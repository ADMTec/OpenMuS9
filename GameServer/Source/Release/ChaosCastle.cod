; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\ChaosCastle.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_iChaosCastle_OffLineGiftRate@@3HA		; g_iChaosCastle_OffLineGiftRate
_DATA	SEGMENT
?g_sttCHAOSCASTLE_LEVEL@@3PAU_CHAOSCASTLE_LEVEL@@A DD 0aH ; g_sttCHAOSCASTLE_LEVEL
	DD	031H
	DD	0aH
	DD	01dH
	DD	032H
	DD	077H
	DD	01eH
	DD	063H
	DD	078H
	DD	0b3H
	DD	064H
	DD	09fH
	DD	0b4H
	DD	0efH
	DD	0a0H
	DD	0dbH
	DD	0f0H
	DD	012bH
	DD	0dcH
	DD	0117H
	DD	012cH
	DD	0190H
	DD	0118H
	DD	0190H
	DD	00H
	DD	0190H
	DD	00H
	DD	0190H
?g_iChaosCastle_OffLineGiftRate@@3HA DD 02H		; g_iChaosCastle_OffLineGiftRate
_DATA	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_sprintf
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0_CHAOSCASTLE_USER@@QAE@XZ			; _CHAOSCASTLE_USER::_CHAOSCASTLE_USER
PUBLIC	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buyheadnode
PUBLIC	?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buynode0
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::erase
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::erase
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::clear
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::find
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Erase
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Rrotate
PUBLIC	?Clear@_CHAOSCASTLE_DATA@@QAEXXZ		; _CHAOSCASTLE_DATA::Clear
PUBLIC	??0_CHAOSCASTLE_DATA@@QAE@XZ			; _CHAOSCASTLE_DATA::_CHAOSCASTLE_DATA
PUBLIC	??1_CHAOSCASTLE_DATA@@QAE@XZ			; _CHAOSCASTLE_DATA::~_CHAOSCASTLE_DATA
PUBLIC	??0CChaosCastle@@QAE@XZ				; CChaosCastle::CChaosCastle
PUBLIC	??1CChaosCastle@@UAE@XZ				; CChaosCastle::~CChaosCastle
PUBLIC	?Run@CChaosCastle@@QAEXXZ			; CChaosCastle::Run
PUBLIC	?Init@CChaosCastle@@QAEX_N@Z			; CChaosCastle::Init
PUBLIC	?Load@CChaosCastle@@QAEXPAD@Z			; CChaosCastle::Load
PUBLIC	?SetState@CChaosCastle@@QAEXHH@Z		; CChaosCastle::SetState
PUBLIC	?EnterUserChaosCastle@CChaosCastle@@QAEHHH@Z	; CChaosCastle::EnterUserChaosCastle
PUBLIC	?LeaveUserChaosCastle@CChaosCastle@@QAEHHH@Z	; CChaosCastle::LeaveUserChaosCastle
PUBLIC	?AddFallUser@CChaosCastle@@QAEXHH@Z		; CChaosCastle::AddFallUser
PUBLIC	?ProcessFallUser@CChaosCastle@@QAEXH@Z		; CChaosCastle::ProcessFallUser
PUBLIC	?SetUserState@CChaosCastle@@QAEXHH@Z		; CChaosCastle::SetUserState
PUBLIC	?GetCurrentWinUser@CChaosCastle@@QAEHH@Z	; CChaosCastle::GetCurrentWinUser
PUBLIC	?CalcSendRewardEXP@CChaosCastle@@QAEHHHHH@Z	; CChaosCastle::CalcSendRewardEXP
PUBLIC	?LevelUp@CChaosCastle@@QAEHHHH@Z		; CChaosCastle::LevelUp
PUBLIC	?GetUserLevelToEnter@CChaosCastle@@QAEHH@Z	; CChaosCastle::GetUserLevelToEnter
PUBLIC	?CheckUserEnterMoney@CChaosCastle@@QAEHHH@Z	; CChaosCastle::CheckUserEnterMoney
PUBLIC	?PayUserEnterMoney@CChaosCastle@@QAEHHH@Z	; CChaosCastle::PayUserEnterMoney
PUBLIC	?GiveUserDamage@CChaosCastle@@QAEXHH@Z		; CChaosCastle::GiveUserDamage
PUBLIC	?ClearMonster@CChaosCastle@@QAEXH@Z		; CChaosCastle::ClearMonster
PUBLIC	?SetMonster@CChaosCastle@@QAEHH@Z		; CChaosCastle::SetMonster
PUBLIC	?AddMonsterList@CChaosCastle@@QAEXHH@Z		; CChaosCastle::AddMonsterList
PUBLIC	?DelMonsterList@CChaosCastle@@QAEXHH@Z		; CChaosCastle::DelMonsterList
PUBLIC	?GetMonsterListCount@CChaosCastle@@QAEHH@Z	; CChaosCastle::GetMonsterListCount
PUBLIC	?SetItemsToMonster@CChaosCastle@@QAEXH@Z	; CChaosCastle::SetItemsToMonster
PUBLIC	?SearchNDropMonsterItem@CChaosCastle@@QAEXHHH@Z	; CChaosCastle::SearchNDropMonsterItem
PUBLIC	?SendAllUserAnyMsg@CChaosCastle@@QAEXPAEH@Z	; CChaosCastle::SendAllUserAnyMsg
PUBLIC	?SendChaosCastleAnyMsg@CChaosCastle@@QAEXPAEHH@Z ; CChaosCastle::SendChaosCastleAnyMsg
PUBLIC	?SendNoticeMessage@CChaosCastle@@QAEXHPAD@Z	; CChaosCastle::SendNoticeMessage
PUBLIC	?SendNoticeState@CChaosCastle@@QAEXHH@Z		; CChaosCastle::SendNoticeState
PUBLIC	?SendWinMessage@CChaosCastle@@QAEXHH@Z		; CChaosCastle::SendWinMessage
PUBLIC	?SendFailMessage@CChaosCastle@@QAEXHH@Z		; CChaosCastle::SendFailMessage
PUBLIC	?SendAllLoserFailMessage@CChaosCastle@@QAEXHH@Z	; CChaosCastle::SendAllLoserFailMessage
PUBLIC	?GetCurrentState@CChaosCastle@@QAEHH@Z		; CChaosCastle::GetCurrentState
PUBLIC	?GetCurEnteredUser@CChaosCastle@@QAEHH@Z	; CChaosCastle::GetCurEnteredUser
PUBLIC	?GetCurPlayUser@CChaosCastle@@QAEHH@Z		; CChaosCastle::GetCurPlayUser
PUBLIC	?GetRemainTime@CChaosCastle@@QAEHH@Z		; CChaosCastle::GetRemainTime
PUBLIC	?GetCurrentRemainSec@CChaosCastle@@QAEHH@Z	; CChaosCastle::GetCurrentRemainSec
PUBLIC	?CheckEnterLevel@CChaosCastle@@QAEHHH@Z		; CChaosCastle::CheckEnterLevel
PUBLIC	?CheckEnterItem@CChaosCastle@@QAEHH@Z		; CChaosCastle::CheckEnterItem
PUBLIC	?CheckPlayEnded@CChaosCastle@@QAEHH@Z		; CChaosCastle::CheckPlayEnded
PUBLIC	?CheckCanEnter@CChaosCastle@@QAE_NH@Z		; CChaosCastle::CheckCanEnter
PUBLIC	?CheckPlayStart@CChaosCastle@@QAE_NH@Z		; CChaosCastle::CheckPlayStart
PUBLIC	?CheckCanStartPlay@CChaosCastle@@QAE_NH@Z	; CChaosCastle::CheckCanStartPlay
PUBLIC	?ObjSetPosition@CChaosCastle@@QAEHHHH@Z		; CChaosCastle::ObjSetPosition
PUBLIC	?SearchNBlowObjs@CChaosCastle@@QAEXHHH@Z	; CChaosCastle::SearchNBlowObjs
PUBLIC	?BlowObjsFromPoint@CChaosCastle@@QAEHHHAAH0@Z	; CChaosCastle::BlowObjsFromPoint
PUBLIC	?BlowObjsToPoint@CChaosCastle@@QAEHHHHH@Z	; CChaosCastle::BlowObjsToPoint
PUBLIC	?CalDistance@CChaosCastle@@QAEHHHHH@Z		; CChaosCastle::CalDistance
PUBLIC	?SafetyCastleZone@CChaosCastle@@QAEXH@Z		; CChaosCastle::SafetyCastleZone
PUBLIC	?UnSafetyCastleZone@CChaosCastle@@QAEXH@Z	; CChaosCastle::UnSafetyCastleZone
PUBLIC	?SendCastleZoneSafetyInfo@CChaosCastle@@QAEXH_N@Z ; CChaosCastle::SendCastleZoneSafetyInfo
PUBLIC	?CheckUserInDieTile@CChaosCastle@@QAEXH@Z	; CChaosCastle::CheckUserInDieTile
PUBLIC	?CheckMonsterInDieTile@CChaosCastle@@QAEXH@Z	; CChaosCastle::CheckMonsterInDieTile
PUBLIC	?PlayFailedRollBack@CChaosCastle@@QAEXH@Z	; CChaosCastle::PlayFailedRollBack
PUBLIC	?RewardZettoMoney@CChaosCastle@@QAEHH@Z		; CChaosCastle::RewardZettoMoney
PUBLIC	?ReCalcUserCount@CChaosCastle@@QAEHH@Z		; CChaosCastle::ReCalcUserCount
PUBLIC	?RewardUserEXP@CChaosCastle@@QAEXHHH@Z		; CChaosCastle::RewardUserEXP
PUBLIC	?ProcessTrapStatus@CChaosCastle@@QAEXH@Z	; CChaosCastle::ProcessTrapStatus
PUBLIC	?CalUsersInTrap@CChaosCastle@@QAEXH@Z		; CChaosCastle::CalUsersInTrap
PUBLIC	?GiveWinnerItem@CChaosCastle@@QAEXHH@Z		; CChaosCastle::GiveWinnerItem
PUBLIC	?PullObjInnerPlace@CChaosCastle@@QAEXHH@Z	; CChaosCastle::PullObjInnerPlace
PUBLIC	?SetMapAttrHollow@CChaosCastle@@QAEXHH@Z	; CChaosCastle::SetMapAttrHollow
PUBLIC	?SetMapAttrFill@CChaosCastle@@QAEXH@Z		; CChaosCastle::SetMapAttrFill
PUBLIC	?CheckRegisterOfflineGift@CChaosCastle@@QAEXH@Z	; CChaosCastle::CheckRegisterOfflineGift
PUBLIC	?GetFloor@CChaosCastle@@QAEHH@Z			; CChaosCastle::GetFloor
PUBLIC	?GetMap@CChaosCastle@@QAEHH@Z			; CChaosCastle::GetMap
PUBLIC	?CheckSync@CChaosCastle@@IAEXH@Z		; CChaosCastle::CheckSync
PUBLIC	?ClearChaosCastleData@CChaosCastle@@IAEXH@Z	; CChaosCastle::ClearChaosCastleData
PUBLIC	?ProcState_None@CChaosCastle@@IAEXH@Z		; CChaosCastle::ProcState_None
PUBLIC	?ProcState_Closed@CChaosCastle@@IAEXH@Z		; CChaosCastle::ProcState_Closed
PUBLIC	?ProcState_Playing@CChaosCastle@@IAEXH@Z	; CChaosCastle::ProcState_Playing
PUBLIC	?ProcState_PlayEnd@CChaosCastle@@IAEXH@Z	; CChaosCastle::ProcState_PlayEnd
PUBLIC	?SetState_None@CChaosCastle@@IAEXH@Z		; CChaosCastle::SetState_None
PUBLIC	?SetState_Closed@CChaosCastle@@IAEXH@Z		; CChaosCastle::SetState_Closed
PUBLIC	?SetState_Playing@CChaosCastle@@IAEXH@Z		; CChaosCastle::SetState_Playing
PUBLIC	?SetState_PlayEnd@CChaosCastle@@IAEXH@Z		; CChaosCastle::SetState_PlayEnd
PUBLIC	?allocate@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEPAUCHAOSCASTLE_START_TIME@@I@Z ; std::allocator<CHAOSCASTLE_START_TIME>::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@I@Z ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::deallocate
PUBLIC	??1?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE@XZ ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::~vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >
PUBLIC	?erase@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@0@Z ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::erase
PUBLIC	?_Reallocate@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Reallocate
PUBLIC	?_Reserve@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Reserve
PUBLIC	??_GCChaosCastle@@UAEPAXI@Z			; CChaosCastle::`scalar deleting destructor'
PUBLIC	?allocate@?$allocator@UtagPOINT@@@std@@QAEPAUtagPOINT@@I@Z ; std::allocator<tagPOINT>::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@I@Z ; std::_Wrap_alloc<std::allocator<tagPOINT> >::deallocate
PUBLIC	??0?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE@XZ ; std::vector<tagPOINT,std::allocator<tagPOINT> >::vector<tagPOINT,std::allocator<tagPOINT> >
PUBLIC	??1?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE@XZ ; std::vector<tagPOINT,std::allocator<tagPOINT> >::~vector<tagPOINT,std::allocator<tagPOINT> >
PUBLIC	?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Reallocate
PUBLIC	?_Reserve@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Reserve
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>::operator++
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>::operator--
PUBLIC	?allocate@?$allocator@H@std@@QAEPAHI@Z		; std::allocator<int>::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reallocate
PUBLIC	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
PUBLIC	??$_Buynode@U?$pair@HU_MONSTER_ITEM_DROP@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buynode<std::pair<int,_MONSTER_ITEM_DROP> >
PUBLIC	??$_Insert_nohint@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Insert_nohint<std::pair<int const ,_MONSTER_ITEM_DROP> &,std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>
PUBLIC	??$_Insert_at@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@1@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Insert_at<std::pair<int const ,_MONSTER_ITEM_DROP> &,std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>
PUBLIC	??$_Uninit_move@PAUtagPOINT@@PAU1@V?$allocator@UtagPOINT@@@std@@U1@@std@@YAPAUtagPOINT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<tagPOINT *,tagPOINT *,std::allocator<tagPOINT>,tagPOINT>
PUBLIC	??$_Uninit_move@PAUCHAOSCASTLE_START_TIME@@PAU1@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@U1@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CHAOSCASTLE_START_TIME *,CHAOSCASTLE_START_TIME *,std::allocator<CHAOSCASTLE_START_TIME>,CHAOSCASTLE_START_TIME>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7CChaosCastle@@6B@				; CChaosCastle::`vftable'
PUBLIC	?g_ChaosCastle@@3VCChaosCastle@@A		; g_ChaosCastle
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0CI@HJPKEJEN@?$FLChaos?5Castle?$FN?5Info?5file?5Load?5Fa@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	??_C@_0GG@HCMJNMOO@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5No?5Schedule?5@ ; `string'
PUBLIC	??_C@_0FH@CMJAMBAM@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5No?5Schedule?5@ ; `string'
PUBLIC	??_C@_0EN@IGEPIJHA@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Sync?5Start?5T@ ; `string'
PUBLIC	??_C@_0DM@PFNIGNGP@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Chaos?5Castle@ ; `string'
PUBLIC	??_C@_0DI@NBGGDBDE@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Chaos?5Castle@ ; `string'
PUBLIC	??_C@_0KB@EOIGCIIB@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5is?5@ ; `string'
PUBLIC	??_C@_0CD@JOONMNFN@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Has?5No?5Winne@ ; `string'
PUBLIC	??_C@_0DG@DNCOEMLJ@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Has?5No?5Winne@ ; `string'
PUBLIC	??_C@_0EC@CDMJLAJE@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5is?5Over?5?3?5TI@ ; `string'
PUBLIC	??_C@_0DM@ENGGGAC@?$FLChaos?5Castle?$FN?$FLBug?5Tracer?$FN?5?$CI?$CFd?$CJ?5@ ; `string'
PUBLIC	??_C@_0CE@MMNDEFNC@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5SetState?5CLO@ ; `string'
PUBLIC	??_C@_0EA@EGGFCMCP@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Failed?5to?5St@ ; `string'
PUBLIC	??_C@_0CF@BCOGMMAI@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5SetState?5PLA@ ; `string'
PUBLIC	??_C@_0CF@HDBNCAHD@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5SetState?5PLA@ ; `string'
PUBLIC	??_C@_0EK@BMJDNMGE@?$FLChaos?5Castle?$FN?$FLBug?5Tracer?$FN?5MONST@ ; `string'
PUBLIC	??_C@_0EI@EFJJJNMJ@?$FLChaos?5Castle?$FN?$FLBug?5Tracer?$FN?5MONST@ ; `string'
PUBLIC	??_C@_0EL@HKCNHNKH@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Monster?5Drop@ ; `string'
PUBLIC	??_C@_0FC@MCCJHJPM@Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5?$FL?$CFs@ ; `string'
PUBLIC	??_C@_0DA@KDBPKGIM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5LevelUp?5PlusStatQuest?5C@ ; `string'
PUBLIC	??_C@_0BM@DJAOLMAF@400?5LevelUp?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Party?5?$AA@ ; `string'
PUBLIC	??_C@_0L@MNKEEMGH@?0?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5?$AA@ ; `string'
PUBLIC	??_C@_0DL@GPIGPHOF@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5GetCurPlayUs@ ; `string'
PUBLIC	??_C@_0FH@PPIJPFML@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use@ ; `string'
PUBLIC	??_C@_0GA@JMGLBJMH@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Pay@ ; `string'
PUBLIC	??_C@_0GI@LIKADFKD@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Rew@ ; `string'
PUBLIC	??_C@_0DB@POIMMHNL@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5ERROR?5?3?5REWA@ ; `string'
PUBLIC	??_C@_0FA@BKKNHLPK@?$FLChaos?5Castle?$FN?$FLBug?5Tracer?$FN?5?$CI?$CFd?$CJ?5@ ; `string'
PUBLIC	??_C@_0EG@DMBELMMH@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Win@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CChaosCastle@@6B@				; CChaosCastle::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCChaosCastle@@@8			; CChaosCastle `RTTI Type Descriptor'
PUBLIC	??_R3CChaosCastle@@8				; CChaosCastle::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CChaosCastle@@8				; CChaosCastle::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CChaosCastle@@8			; CChaosCastle::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_srand:PROC
EXTRN	_rand:PROC
EXTRN	_atof:PROC
EXTRN	__time64:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?SetStandAttr@MapClass@@QAEXHH@Z:PROC		; MapClass::SetStandAttr
EXTRN	?ClearStandAttr@MapClass@@QAEXHH@Z:PROC		; MapClass::ClearStandAttr
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z:PROC	; MsgSendV2
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?GCLevelUpMsgSend@@YAXHH@Z:PROC			; GCLevelUpMsgSend
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?GCDiePlayerSend@@YAXPAUOBJECTSTRUCT@@HGH@Z:PROC ; GCDiePlayerSend
EXTRN	?GCSendExp@@YAXHH_JHH@Z:PROC			; GCSendExp
EXTRN	?gObjSetBP@@YAXH@Z:PROC				; gObjSetBP
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?gObjNextExpCal@@YAXPAUOBJECTSTRUCT@@@Z:PROC	; gObjNextExpCal
EXTRN	?CreateFrustrum@@YAXHHH@Z:PROC			; CreateFrustrum
EXTRN	?gObjMoveGate@@YAHHH@Z:PROC			; gObjMoveGate
EXTRN	?gObjSetExpPetItem@@YAXHH@Z:PROC		; gObjSetExpPetItem
EXTRN	??_ECChaosCastle@@UAEPAXI@Z:PROC		; CChaosCastle::`vector deleting destructor'
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z:PROC ; ItemSerialCreateSend
EXTRN	?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ:PROC	; TNotice::MakeNoticeMsgEx
EXTRN	?GetOccupationState@CCrywolfSync@@QAEHXZ:PROC	; CCrywolfSync::GetOccupationState
EXTRN	?GetGettingExpPenaltyRate@CCrywolfSync@@QAEHXZ:PROC ; CCrywolfSync::GetGettingExpPenaltyRate
EXTRN	?EGReqRegCCOfflineGift@@YAXH@Z:PROC		; EGReqRegCCOfflineGift
EXTRN	?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjAddBuffEffect
EXTRN	?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z:PROC ; gObjCheckUsedBuffEffect
EXTRN	?CheckItemOptForGetExpEx@@YAXPAUOBJECTSTRUCT@@AA_JH@Z:PROC ; CheckItemOptForGetExpEx
EXTRN	?LevelUp@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@_J@Z:PROC ; CMasterExperience::LevelUp
EXTRN	?IsEnabled@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CMasterExperience::IsEnabled
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	?GetLevelPoint@ClassCalc@@QAEGPAUOBJECTSTRUCT@@EE@Z:PROC ; ClassCalc::GetLevelPoint
EXTRN	?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z:PROC ; EventItemBagManager::OpenSpecial
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol3:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	__ltod3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	?gMSetBase@@3VCMonsterSetBase@@A:BYTE		; gMSetBase
EXTRN	?DCInfo@@3Vclassdef@@A:BYTE			; DCInfo
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?g_iCrywolfApplyMvpPenalty@@3HA:DWORD		; g_iCrywolfApplyMvpPenalty
EXTRN	?g_bChaosCastle@@3HA:DWORD			; g_bChaosCastle
EXTRN	?g_CrywolfSync@@3VCCrywolfSync@@A:BYTE		; g_CrywolfSync
EXTRN	?g_MasterExp@@3VCMasterExperience@@A:BYTE	; g_MasterExp
EXTRN	?g_ClassCalc@@3VClassCalc@@A:BYTE		; g_ClassCalc
EXTRN	?g_EventItemBagManager@@3VEventItemBagManager@@A:BYTE ; g_EventItemBagManager
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?g_rtPOINT_FRAME@@3PAUtagRECT@@A DB 040H DUP (?)	; g_rtPOINT_FRAME
?g_rtPOINT_TRAP@@3PAUtagRECT@@A DB 040H DUP (?)		; g_rtPOINT_TRAP
?g_ChaosCastle@@3VCChaosCastle@@A DB 03b04H DUP (?)	; g_ChaosCastle
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
_BSS	ENDS
CRT$XCU	SEGMENT
?g_ChaosCastle$initializer$@@3P6AXXZA DD FLAT:??__Eg_ChaosCastle@@YAXXZ ; g_ChaosCastle$initializer$
CRT$XCU	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CChaosCastle@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CChaosCastle@@8 DD FLAT:??_R0?AVCChaosCastle@@@8 ; CChaosCastle::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CChaosCastle@@8
rdata$r	ENDS
;	COMDAT ??_R2CChaosCastle@@8
rdata$r	SEGMENT
??_R2CChaosCastle@@8 DD FLAT:??_R1A@?0A@EA@CChaosCastle@@8 ; CChaosCastle::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CChaosCastle@@8
rdata$r	SEGMENT
??_R3CChaosCastle@@8 DD 00H				; CChaosCastle::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CChaosCastle@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCChaosCastle@@@8
data$r	SEGMENT
??_R0?AVCChaosCastle@@@8 DD FLAT:??_7type_info@@6B@	; CChaosCastle `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCChaosCastle@@', 00H
data$r	ENDS
;	COMDAT ??_R4CChaosCastle@@6B@
rdata$r	SEGMENT
??_R4CChaosCastle@@6B@ DD 00H				; CChaosCastle::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCChaosCastle@@@8
	DD	FLAT:??_R3CChaosCastle@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@DMBELMMH@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Win@
CONST	SEGMENT
??_C@_0EG@DMBELMMH@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Win@ DB '['
	DB	'Chaos Castle] (%d) [%s][%s] Win Zen Lotto (RewardZen:%d, User'
	DB	'Zen:%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@BKKNHLPK@?$FLChaos?5Castle?$FN?$FLBug?5Tracer?$FN?5?$CI?$CFd?$CJ?5@
CONST	SEGMENT
??_C@_0FA@BKKNHLPK@?$FLChaos?5Castle?$FN?$FLBug?5Tracer?$FN?5?$CI?$CFd?$CJ?5@ DB '['
	DB	'Chaos Castle][Bug Tracer] (%d) [%s][%s] Reword ZettoMoney(Map'
	DB	':%d) Send Message', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@POIMMHNL@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5ERROR?5?3?5REWA@
CONST	SEGMENT
??_C@_0DB@POIMMHNL@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5ERROR?5?3?5REWA@ DB '['
	DB	'Chaos Castle] (%d) ERROR : REWARD ZEN <= 0 (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@LIKADFKD@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Rew@
CONST	SEGMENT
??_C@_0GI@LIKADFKD@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Rew@ DB '['
	DB	'Chaos Castle] (%d) [%s][%s] Reward User EXP (USER_KILL:%d, MO'
	DB	'N_KILL:%d, TOT_EXP:%d, TOT_REWARD_EXP:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GA@JMGLBJMH@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Pay@
CONST	SEGMENT
??_C@_0GA@JMGLBJMH@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Pay@ DB '['
	DB	'Chaos Castle] (%d) [%s][%s] Payback to User ChaosCastle Money'
	DB	' (FIRST:%d, PAYBACK:%d, FINAL:%d)', 00H	; `string'
CONST	ENDS
CONST	SEGMENT
?g_btCastleSafetyZoneMapXY@@3QAY03$$CBEA DB 017H	; g_btCastleSafetyZoneMapXY
	DB	04bH
	DB	02cH
	DB	06cH
	DB	017H
	DB	04bH
	DB	02cH
	DB	06cH
	DB	017H
	DB	04bH
	DB	02cH
	DB	06cH
	DB	017H
	DB	04bH
	DB	02cH
	DB	06cH
	DB	017H
	DB	04bH
	DB	02cH
	DB	06cH
	DB	017H
	DB	04bH
	DB	02cH
	DB	06cH
	DB	017H
	DB	04bH
	DB	02cH
	DB	06cH
?g_btCastleCenterHollowZoneMapXY@@3QAY113$$CBEA DB 020H	; g_btCastleCenterHollowZoneMapXY
	DB	054H
	DB	023H
	DB	057H
	DB	020H
	DB	060H
	DB	023H
	DB	063H
	DB	020H
	DB	054H
	DB	023H
	DB	057H
	DB	020H
	DB	060H
	DB	023H
	DB	063H
	DB	020H
	DB	054H
	DB	023H
	DB	057H
	DB	020H
	DB	060H
	DB	023H
	DB	063H
	DB	020H
	DB	054H
	DB	023H
	DB	057H
	DB	020H
	DB	060H
	DB	023H
	DB	063H
	DB	020H
	DB	054H
	DB	023H
	DB	057H
	DB	020H
	DB	060H
	DB	023H
	DB	063H
	DB	020H
	DB	054H
	DB	023H
	DB	057H
	DB	020H
	DB	060H
	DB	023H
	DB	063H
	DB	020H
	DB	054H
	DB	023H
	DB	057H
	DB	020H
	DB	060H
	DB	023H
	DB	063H
?g_iChaosCastle_ExpTable@@3QAY01$$CBHA DD 01f4H		; g_iChaosCastle_ExpTable
	DD	03e8H
	DD	03e8H
	DD	05dcH
	DD	05dcH
	DD	07d0H
	DD	07d0H
	DD	09c4H
	DD	09c4H
	DD	0bb8H
	DD	0bb8H
	DD	0dacH
	DD	0bb8H
	DD	0dacH
CONST	ENDS
;	COMDAT ??_C@_0FH@PPIJPFML@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use@
CONST	SEGMENT
??_C@_0FH@PPIJPFML@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use@ DB '['
	DB	'Chaos Castle] (%d) [%s][%s] User Dead In Chaos Castle : Fall '
	DB	'from Castle (X:%d, Y:%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@GPIGPHOF@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5GetCurPlayUs@
CONST	SEGMENT
??_C@_0DL@GPIGPHOF@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5GetCurPlayUs@ DB '['
	DB	'Chaos Castle] (%d) GetCurPlayUser() FAILED (UserCount:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MNKEEMGH@?0?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5?$AA@
CONST	SEGMENT
??_C@_0L@MNKEEMGH@?0?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5?$AA@ DB ',(%s)(%s) ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DJAOLMAF@400?5LevelUp?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Party?5?$AA@
CONST	SEGMENT
??_C@_0BM@DJAOLMAF@400?5LevelUp?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Party?5?$AA@ DB '4'
	DB	'00 LevelUp (%s)(%s) Party ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@KDBPKGIM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5LevelUp?5PlusStatQuest?5C@
CONST	SEGMENT
??_C@_0DA@KDBPKGIM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5LevelUp?5PlusStatQuest?5C@ DB '['
	DB	'%s][%s] LevelUp PlusStatQuest Clear AddStat %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@MCCJHJPM@Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5?$FL?$CFs@
CONST	SEGMENT
??_C@_0FC@MCCJHJPM@Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5?$FL?$CFs@ DB 'E'
	DB	'xperience : Map[%d]-(%d,%d) [%s][%s](%d) %u %d MonsterIndex :'
	DB	' %d, EventType : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@HKCNHNKH@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Monster?5Drop@
CONST	SEGMENT
??_C@_0EL@HKCNHNKH@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Monster?5Drop@ DB '['
	DB	'Chaos Castle] (%d) Monster Dropped ChaosCastle Item To [%s][%'
	DB	's] (Item:%s)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@EFJJJNMJ@?$FLChaos?5Castle?$FN?$FLBug?5Tracer?$FN?5MONST@
CONST	SEGMENT
??_C@_0EI@EFJJJNMJ@?$FLChaos?5Castle?$FN?$FLBug?5Tracer?$FN?5MONST@ DB '['
	DB	'Chaos Castle][Bug Tracer] MONSTER DEL (%d) Count(%d) : OUT - '
	DB	'Index(%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@BMJDNMGE@?$FLChaos?5Castle?$FN?$FLBug?5Tracer?$FN?5MONST@
CONST	SEGMENT
??_C@_0EK@BMJDNMGE@?$FLChaos?5Castle?$FN?$FLBug?5Tracer?$FN?5MONST@ DB '['
	DB	'Chaos Castle][Bug Tracer] MONSTER DEL (%d) Count(%d) : ENTER '
	DB	'- Index(%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@HDBNCAHD@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5SetState?5PLA@
CONST	SEGMENT
??_C@_0CF@HDBNCAHD@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5SetState?5PLA@ DB '['
	DB	'Chaos Castle] (%d) SetState PLAYEND', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BCOGMMAI@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5SetState?5PLA@
CONST	SEGMENT
??_C@_0CF@BCOGMMAI@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5SetState?5PLA@ DB '['
	DB	'Chaos Castle] (%d) SetState PLAYING', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@EGGFCMCP@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Failed?5to?5St@
CONST	SEGMENT
??_C@_0EA@EGGFCMCP@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Failed?5to?5St@ DB '['
	DB	'Chaos Castle] (%d) Failed to Start Chaos Castle : Lack of Use'
	DB	'r', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MMNDEFNC@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5SetState?5CLO@
CONST	SEGMENT
??_C@_0CE@MMNDEFNC@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5SetState?5CLO@ DB '['
	DB	'Chaos Castle] (%d) SetState CLOSED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@ENGGGAC@?$FLChaos?5Castle?$FN?$FLBug?5Tracer?$FN?5?$CI?$CFd?$CJ?5@
CONST	SEGMENT
??_C@_0DM@ENGGGAC@?$FLChaos?5Castle?$FN?$FLBug?5Tracer?$FN?5?$CI?$CFd?$CJ?5@ DB '['
	DB	'Chaos Castle][Bug Tracer] (%d) Left Monster AttrInfo %d/%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@CDMJLAJE@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5is?5Over?5?3?5TI@
CONST	SEGMENT
??_C@_0EC@CDMJLAJE@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5is?5Over?5?3?5TI@ DB '['
	DB	'Chaos Castle] (%d) is Over : TIME-OUT (Left User:%d, Monster:'
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@DNCOEMLJ@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Has?5No?5Winne@
CONST	SEGMENT
??_C@_0DG@DNCOEMLJ@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Has?5No?5Winne@ DB '['
	DB	'Chaos Castle] (%d) Has No Winner : Monster Left (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JOONMNFN@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Has?5No?5Winne@
CONST	SEGMENT
??_C@_0CD@JOONMNFN@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Has?5No?5Winne@ DB '['
	DB	'Chaos Castle] (%d) Has No Winner.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0KB@EOIGCIIB@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5is?5@
CONST	SEGMENT
??_C@_0KB@EOIGCIIB@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5is?5@ DB '['
	DB	'Chaos Castle] (%d) [%s][%s] is Winner. [CharInfoSave : Class='
	DB	'%d, Level=%d, LvPoint=%d, Exp=%d, Str=%d, Dex=%d, Vit=%d, Ene'
	DB	'rgy=%d, LeaderShip=%d, Map=%d, Pk=%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@NBGGDBDE@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Chaos?5Castle@
CONST	SEGMENT
??_C@_0DI@NBGGDBDE@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Chaos?5Castle@ DB '['
	DB	'Chaos Castle] (%d) Chaos Castle Quest Closed - No User', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@PFNIGNGP@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Chaos?5Castle@
CONST	SEGMENT
??_C@_0DM@PFNIGNGP@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Chaos?5Castle@ DB '['
	DB	'Chaos Castle] (%d) Chaos Castle Quest Start (UserCount:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@IGEPIJHA@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Sync?5Start?5T@
CONST	SEGMENT
??_C@_0EN@IGEPIJHA@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Sync?5Start?5T@ DB '['
	DB	'Chaos Castle] (%d) Sync Start Time. [%d] min remain (START HO'
	DB	'UR:%d, MIN:%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@CMJAMBAM@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5No?5Schedule?5@
CONST	SEGMENT
??_C@_0FH@CMJAMBAM@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5No?5Schedule?5@ DB '['
	DB	'Chaos Castle] (%d) No Schedule Time Data - Chaos Castle Termi'
	DB	'nated (bTIME_CHANGED=%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GG@HCMJNMOO@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5No?5Schedule?5@
CONST	SEGMENT
??_C@_0GG@HCMJNMOO@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5No?5Schedule?5@ DB '['
	DB	'Chaos Castle] (%d) No Schedule Time Data - Chaos Castle Termi'
	DB	'nated (m_vtChaosCastleOpenTime.empty())', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HJPKEJEN@?$FLChaos?5Castle?$FN?5Info?5file?5Load?5Fa@
CONST	SEGMENT
??_C@_0CI@HJPKEJEN@?$FLChaos?5Castle?$FN?5Info?5file?5Load?5Fa@ DB '[Chao'
	DB	's Castle] Info file Load Fail [%s]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CChaosCastle@@6B@
CONST	SEGMENT
??_7CChaosCastle@@6B@ DD FLAT:??_R4CChaosCastle@@6B@	; CChaosCastle::`vftable'
	DD	FLAT:??_ECChaosCastle@@UAEPAXI@Z
CONST	ENDS
_DATA	SEGMENT
?g_iChaosCastle_BlowOutDistance@@3PAY01HA DD 03H	; g_iChaosCastle_BlowOutDistance
	DD	04H
	DD	03H
	DD	04H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
?g_iChaosCastle_BlowOutDamage@@3PAHA DD 0fH		; g_iChaosCastle_BlowOutDamage
	DD	0fH
	DD	0aH
	DD	05H
?g_iChaosCastle_EnterCost@@3PAHA DD 061a8H		; g_iChaosCastle_EnterCost
	DD	013880H
	DD	0249f0H
	DD	03d090H
	DD	061a80H
	DD	09eb10H
	DD	0f4240H
?g_iChaosCastle_GuardSetValue@@3PAHA DD 09c4H		; g_iChaosCastle_GuardSetValue
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	DD	09c4H
	ORG $+4
?g_iChaosCastle_MonsterItems@@3PAY111HA DD 01c0dH	; g_iChaosCastle_MonsterItems
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	01H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
	DD	01c0dH
	DD	01H
	DD	01c0eH
	DD	02H
?g_iChaosCastle_GroundAxis@@3PAHA DD 017H		; g_iChaosCastle_GroundAxis
	DD	04bH
	DD	02cH
	DD	06cH
?g_iChaosCastle_DamageAxis@@3PAY03HA DD 017H		; g_iChaosCastle_DamageAxis
	DD	04bH
	DD	02cH
	DD	06cH
	DD	019H
	DD	04dH
	DD	02aH
	DD	06aH
	DD	01bH
	DD	04fH
	DD	028H
	DD	068H
	DD	01dH
	DD	051H
	DD	026H
	DD	066H
?g_iChaosCastle_MapHollowZone@@3PAY133HA DD 017H	; g_iChaosCastle_MapHollowZone
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	017H
	DD	04bH
	DD	02cH
	DD	04cH
	DD	02bH
	DD	04dH
	DD	02cH
	DD	06cH
	DD	017H
	DD	06bH
	DD	02aH
	DD	06cH
	DD	017H
	DD	04dH
	DD	018H
	DD	06aH
	DD	019H
	DD	04dH
	DD	02aH
	DD	04eH
	DD	029H
	DD	04fH
	DD	02aH
	DD	06aH
	DD	019H
	DD	069H
	DD	028H
	DD	06aH
	DD	019H
	DD	04fH
	DD	01aH
	DD	068H
	DD	01bH
	DD	04fH
	DD	028H
	DD	050H
	DD	027H
	DD	051H
	DD	028H
	DD	068H
	DD	01bH
	DD	067H
	DD	026H
	DD	068H
	DD	01bH
	DD	051H
	DD	01cH
	DD	066H
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_nohint@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z$58 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_nohint@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z$0
__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_nohint@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z$58
__ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z$50
__ehfuncinfo$?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z$50
__ehfuncinfo$?_Reallocate@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PullObjInnerPlace@CChaosCastle@@QAEXHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PullObjInnerPlace@CChaosCastle@@QAEXHH@Z$0
__ehfuncinfo$?PullObjInnerPlace@CChaosCastle@@QAEXHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PullObjInnerPlace@CChaosCastle@@QAEXHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RewardZettoMoney@CChaosCastle@@QAEHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RewardZettoMoney@CChaosCastle@@QAEHH@Z$0
__ehfuncinfo$?RewardZettoMoney@CChaosCastle@@QAEHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RewardZettoMoney@CChaosCastle@@QAEHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CheckMonsterInDieTile@CChaosCastle@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckMonsterInDieTile@CChaosCastle@@QAEXH@Z$0
__ehfuncinfo$?CheckMonsterInDieTile@CChaosCastle@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckMonsterInDieTile@CChaosCastle@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CChaosCastle@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CChaosCastle@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CChaosCastle@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CChaosCastle@@QAE@XZ$1
__ehfuncinfo$??0CChaosCastle@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CChaosCastle@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clear@_CHAOSCASTLE_DATA@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clear@_CHAOSCASTLE_DATA@@QAEXXZ$0
__ehfuncinfo$?Clear@_CHAOSCASTLE_DATA@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clear@_CHAOSCASTLE_DATA@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UCHAOSCASTLE_START_TIME@@U1@@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UCHAOSCASTLE_START_TIME@@U1@@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@$$QAU2@@Z PROC ; std::allocator<CHAOSCASTLE_START_TIME>::construct<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 656  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UCHAOSCASTLE_START_TIME@@U1@@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@$$QAU2@@Z ENDP ; std::allocator<CHAOSCASTLE_START_TIME>::construct<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UtagPOINT@@U1@@?$allocator@UtagPOINT@@@std@@QAEXPAUtagPOINT@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UtagPOINT@@U1@@?$allocator@UtagPOINT@@@std@@QAEXPAUtagPOINT@@$$QAU2@@Z PROC ; std::allocator<tagPOINT>::construct<tagPOINT,tagPOINT>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 656  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UtagPOINT@@U1@@?$allocator@UtagPOINT@@@std@@QAEXPAUtagPOINT@@$$QAU2@@Z ENDP ; std::allocator<tagPOINT>::construct<tagPOINT,tagPOINT>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U_MONSTER_ITEM_DROP@@@std@@YA$$QAU_MONSTER_ITEM_DROP@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_MONSTER_ITEM_DROP@@@std@@YA$$QAU_MONSTER_ITEM_DROP@@AAU1@@Z PROC ; std::forward<_MONSTER_ITEM_DROP>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_MONSTER_ITEM_DROP@@@std@@YA$$QAU_MONSTER_ITEM_DROP@@AAU1@@Z ENDP ; std::forward<_MONSTER_ITEM_DROP>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@H@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@H@std@@YA$$QAHAAH@Z PROC			; std::forward<int>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@H@std@@YA$$QAHAAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UCHAOSCASTLE_START_TIME@@U1@@?$allocator_traits@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@SAXAAV?$allocator@UCHAOSCASTLE_START_TIME@@@1@PAUCHAOSCASTLE_START_TIME@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UCHAOSCASTLE_START_TIME@@U1@@?$allocator_traits@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@SAXAAV?$allocator@UCHAOSCASTLE_START_TIME@@@1@PAUCHAOSCASTLE_START_TIME@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<CHAOSCASTLE_START_TIME> >::construct<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@UCHAOSCASTLE_START_TIME@@U1@@?$allocator_traits@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@SAXAAV?$allocator@UCHAOSCASTLE_START_TIME@@@1@PAUCHAOSCASTLE_START_TIME@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<CHAOSCASTLE_START_TIME> >::construct<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@UCHAOSCASTLE_START_TIME@@@std@@YA$$QAUCHAOSCASTLE_START_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UCHAOSCASTLE_START_TIME@@@std@@YA$$QAUCHAOSCASTLE_START_TIME@@AAU1@@Z PROC ; std::forward<CHAOSCASTLE_START_TIME>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UCHAOSCASTLE_START_TIME@@@std@@YA$$QAUCHAOSCASTLE_START_TIME@@AAU1@@Z ENDP ; std::forward<CHAOSCASTLE_START_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UtagPOINT@@U1@@?$allocator_traits@V?$allocator@UtagPOINT@@@std@@@std@@SAXAAV?$allocator@UtagPOINT@@@1@PAUtagPOINT@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UtagPOINT@@U1@@?$allocator_traits@V?$allocator@UtagPOINT@@@std@@@std@@SAXAAV?$allocator@UtagPOINT@@@1@PAUtagPOINT@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<tagPOINT> >::construct<tagPOINT,tagPOINT>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@UtagPOINT@@U1@@?$allocator_traits@V?$allocator@UtagPOINT@@@std@@@std@@SAXAAV?$allocator@UtagPOINT@@@1@PAUtagPOINT@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<tagPOINT> >::construct<tagPOINT,tagPOINT>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@UtagPOINT@@@std@@YA$$QAUtagPOINT@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UtagPOINT@@@std@@YA$$QAUtagPOINT@@AAU1@@Z PROC ; std::forward<tagPOINT>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UtagPOINT@@@std@@YA$$QAUtagPOINT@@AAU1@@Z ENDP ; std::forward<tagPOINT>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UCHAOSCASTLE_START_TIME@@U1@@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UCHAOSCASTLE_START_TIME@@U1@@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::construct<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UCHAOSCASTLE_START_TIME@@U1@@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::construct<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UtagPOINT@@U1@@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UtagPOINT@@U1@@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<tagPOINT> >::construct<tagPOINT,tagPOINT>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UtagPOINT@@U1@@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<tagPOINT> >::construct<tagPOINT,tagPOINT>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UCHAOSCASTLE_START_TIME@@@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UCHAOSCASTLE_START_TIME@@@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@@Z PROC ; std::allocator<CHAOSCASTLE_START_TIME>::destroy<CHAOSCASTLE_START_TIME>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UCHAOSCASTLE_START_TIME@@@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@@Z ENDP ; std::allocator<CHAOSCASTLE_START_TIME>::destroy<CHAOSCASTLE_START_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@U?$pair@HU_MONSTER_ITEM_DROP@@@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@U?$pair@HU_MONSTER_ITEM_DROP@@@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> >::construct<std::pair<int const ,_MONSTER_ITEM_DROP>,std::pair<int,_MONSTER_ITEM_DROP> >, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 13		 je	 SHORT $LN3@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00017	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001a	89 42 08	 mov	 DWORD PTR [edx+8], eax
$LN3@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 656  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??$construct@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@U?$pair@HU_MONSTER_ITEM_DROP@@@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> >::construct<std::pair<int const ,_MONSTER_ITEM_DROP>,std::pair<int,_MONSTER_ITEM_DROP> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUCHAOSCASTLE_START_TIME@@PAU1@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@U1@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCHAOSCASTLE_START_TIME@@PAU1@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@U1@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CHAOSCASTLE_START_TIME *,CHAOSCASTLE_START_TIME *,std::allocator<CHAOSCASTLE_START_TIME>,CHAOSCASTLE_START_TIME>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000a	3b cf		 cmp	 ecx, edi
  0000c	74 22		 je	 SHORT $LN37@Uninit_mov
  0000e	56		 push	 esi
  0000f	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
$LL4@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00012	85 f6		 test	 esi, esi
  00014	74 0a		 je	 SHORT $LN2@Uninit_mov
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	89 06		 mov	 DWORD PTR [esi], eax
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN2@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00020	83 c1 08	 add	 ecx, 8
  00023	83 c6 08	 add	 esi, 8
  00026	3b cf		 cmp	 ecx, edi
  00028	75 e8		 jne	 SHORT $LL4@Uninit_mov

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5f		 pop	 edi

; 450  : 	}

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN37@Uninit_mov:

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);

  00030	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00033	5f		 pop	 edi

; 450  : 	}

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??$_Uninit_move@PAUCHAOSCASTLE_START_TIME@@PAU1@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@U1@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CHAOSCASTLE_START_TIME *,CHAOSCASTLE_START_TIME *,std::allocator<CHAOSCASTLE_START_TIME>,CHAOSCASTLE_START_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUCHAOSCASTLE_START_TIME@@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUCHAOSCASTLE_START_TIME@@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@@Z PROC ; std::_Val_type<CHAOSCASTLE_START_TIME *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUCHAOSCASTLE_START_TIME@@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@@Z ENDP ; std::_Val_type<CHAOSCASTLE_START_TIME *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@UtagPOINT@@@std@@YAPAUtagPOINT@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@UtagPOINT@@@std@@YAPAUtagPOINT@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<tagPOINT>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@UtagPOINT@@@std@@YAPAUtagPOINT@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<tagPOINT>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUtagPOINT@@PAU1@V?$allocator@UtagPOINT@@@std@@U1@@std@@YAPAUtagPOINT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUtagPOINT@@PAU1@V?$allocator@UtagPOINT@@@std@@U1@@std@@YAPAUtagPOINT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<tagPOINT *,tagPOINT *,std::allocator<tagPOINT>,tagPOINT>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000a	3b cf		 cmp	 ecx, edi
  0000c	74 22		 je	 SHORT $LN37@Uninit_mov
  0000e	56		 push	 esi
  0000f	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
$LL4@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00012	85 f6		 test	 esi, esi
  00014	74 0a		 je	 SHORT $LN2@Uninit_mov
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	89 06		 mov	 DWORD PTR [esi], eax
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN2@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00020	83 c1 08	 add	 ecx, 8
  00023	83 c6 08	 add	 esi, 8
  00026	3b cf		 cmp	 ecx, edi
  00028	75 e8		 jne	 SHORT $LL4@Uninit_mov

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5f		 pop	 edi

; 450  : 	}

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN37@Uninit_mov:

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);

  00030	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00033	5f		 pop	 edi

; 450  : 	}

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??$_Uninit_move@PAUtagPOINT@@PAU1@V?$allocator@UtagPOINT@@@std@@U1@@std@@YAPAUtagPOINT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<tagPOINT *,tagPOINT *,std::allocator<tagPOINT>,tagPOINT>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUtagPOINT@@@std@@YAPAUtagPOINT@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUtagPOINT@@@std@@YAPAUtagPOINT@@PAU1@@Z PROC ; std::_Val_type<tagPOINT *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUtagPOINT@@@std@@YAPAUtagPOINT@@PAU1@@Z ENDP ; std::_Val_type<tagPOINT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<int,int,int>, COMDAT

; 468  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 469  : 	_DEBUG_RANGE_PTR(_First, _Last, _Dest);
; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 472  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move
; 473  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAH@std@@YAPAHPAH@Z PROC			; std::_Val_type<int *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAH@std@@YAPAHPAH@Z ENDP			; std::_Val_type<int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UCHAOSCASTLE_START_TIME@@@?$allocator_traits@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@SAXAAV?$allocator@UCHAOSCASTLE_START_TIME@@@1@PAUCHAOSCASTLE_START_TIME@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UCHAOSCASTLE_START_TIME@@@?$allocator_traits@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@SAXAAV?$allocator@UCHAOSCASTLE_START_TIME@@@1@PAUCHAOSCASTLE_START_TIME@@@Z PROC ; std::allocator_traits<std::allocator<CHAOSCASTLE_START_TIME> >::destroy<CHAOSCASTLE_START_TIME>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@UCHAOSCASTLE_START_TIME@@@?$allocator_traits@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@SAXAAV?$allocator@UCHAOSCASTLE_START_TIME@@@1@PAUCHAOSCASTLE_START_TIME@@@Z ENDP ; std::allocator_traits<std::allocator<CHAOSCASTLE_START_TIME> >::destroy<CHAOSCASTLE_START_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@UCHAOSCASTLE_START_TIME@@@std@@YAPAUCHAOSCASTLE_START_TIME@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@UCHAOSCASTLE_START_TIME@@@std@@YAPAUCHAOSCASTLE_START_TIME@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<CHAOSCASTLE_START_TIME>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@UCHAOSCASTLE_START_TIME@@@std@@YAPAUCHAOSCASTLE_START_TIME@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<CHAOSCASTLE_START_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > > &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > > >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode_if_nil@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@PAU21@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@@Z
_TEXT	SEGMENT
__Node$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Buynode_if_nil@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@PAU21@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buynode_if_nil<std::pair<int const ,_MONSTER_ITEM_DROP> &>, COMDAT
; _this$ = ecx

; 1657 : 		{	// node exists, just return it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1658 : 		return (_Node);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Node$[ebp]

; 1659 : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
??$_Buynode_if_nil@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@PAU21@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buynode_if_nil<std::pair<int const ,_MONSTER_ITEM_DROP> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@U?$pair@HU_MONSTER_ITEM_DROP@@@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@1@PAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@U?$pair@HU_MONSTER_ITEM_DROP@@@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@1@PAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::construct<std::pair<int const ,_MONSTER_ITEM_DROP>,std::pair<int,_MONSTER_ITEM_DROP> >, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 13		 je	 SHORT $LN8@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00017	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001a	89 42 08	 mov	 DWORD PTR [edx+8], eax
$LN8@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 774  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$construct@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@U?$pair@HU_MONSTER_ITEM_DROP@@@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@1@PAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::construct<std::pair<int const ,_MONSTER_ITEM_DROP>,std::pair<int,_MONSTER_ITEM_DROP> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> >::construct<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *,std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> * &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> >::construct<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *,std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> >::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> ><std::pair<int const ,_MONSTER_ITEM_DROP> >, COMDAT
; _this$ = ecx

; 628  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> >::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> ><std::pair<int const ,_MONSTER_ITEM_DROP> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > ><std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> > >, COMDAT
; _this$ = ecx

; 869  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > ><std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> >::destroy<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> >::destroy<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAUCHAOSCASTLE_START_TIME@@PAU1@@std@@YAAAPAUCHAOSCASTLE_START_TIME@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUCHAOSCASTLE_START_TIME@@PAU1@@std@@YAAAPAUCHAOSCASTLE_START_TIME@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<CHAOSCASTLE_START_TIME *,CHAOSCASTLE_START_TIME *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAUCHAOSCASTLE_START_TIME@@PAU1@@std@@YAAAPAUCHAOSCASTLE_START_TIME@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<CHAOSCASTLE_START_TIME *,CHAOSCASTLE_START_TIME *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUCHAOSCASTLE_START_TIME@@PAU1@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAUCHAOSCASTLE_START_TIME@@PAU1@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@@Z PROC ; std::_Uninit_move<CHAOSCASTLE_START_TIME *,CHAOSCASTLE_START_TIME *,std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCHAOSCASTLE_START_TIME@@PAU1@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@U1@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CHAOSCASTLE_START_TIME *,CHAOSCASTLE_START_TIME *,std::allocator<CHAOSCASTLE_START_TIME>,CHAOSCASTLE_START_TIME>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAUCHAOSCASTLE_START_TIME@@PAU1@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@@Z ENDP ; std::_Uninit_move<CHAOSCASTLE_START_TIME *,CHAOSCASTLE_START_TIME *,std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAUCHAOSCASTLE_START_TIME@@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUCHAOSCASTLE_START_TIME@@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@@Z PROC ; std::_Unchecked<CHAOSCASTLE_START_TIME *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAUCHAOSCASTLE_START_TIME@@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@@Z ENDP ; std::_Unchecked<CHAOSCASTLE_START_TIME *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@UtagPOINT@@@std@@YAPAUtagPOINT@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UtagPOINT@@@std@@YAPAUtagPOINT@@AAU1@@Z PROC ; std::addressof<tagPOINT>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@UtagPOINT@@@std@@YAPAUtagPOINT@@AAU1@@Z ENDP ; std::addressof<tagPOINT>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAUtagPOINT@@PAU1@@std@@YAAAPAUtagPOINT@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUtagPOINT@@PAU1@@std@@YAAAPAUtagPOINT@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<tagPOINT *,tagPOINT *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAUtagPOINT@@PAU1@@std@@YAAAPAUtagPOINT@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<tagPOINT *,tagPOINT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUtagPOINT@@PAU1@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@@std@@YAPAUtagPOINT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAUtagPOINT@@PAU1@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@@std@@YAPAUtagPOINT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@@Z PROC ; std::_Uninit_move<tagPOINT *,tagPOINT *,std::_Wrap_alloc<std::allocator<tagPOINT> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUtagPOINT@@PAU1@V?$allocator@UtagPOINT@@@std@@U1@@std@@YAPAUtagPOINT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<tagPOINT *,tagPOINT *,std::allocator<tagPOINT>,tagPOINT>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAUtagPOINT@@PAU1@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@@std@@YAPAUtagPOINT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@@Z ENDP ; std::_Uninit_move<tagPOINT *,tagPOINT *,std::_Wrap_alloc<std::allocator<tagPOINT> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAUtagPOINT@@@std@@YAPAUtagPOINT@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUtagPOINT@@@std@@YAPAUtagPOINT@@PAU1@@Z PROC ; std::_Unchecked<tagPOINT *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAUtagPOINT@@@std@@YAPAUtagPOINT@@PAU1@@Z ENDP ; std::_Unchecked<tagPOINT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z PROC	; std::_Rechecked<int *,int *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z ENDP	; std::_Rechecked<int *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAH@std@@YAPAHPAH@Z PROC			; std::_Unchecked<int *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAH@std@@YAPAHPAH@Z ENDP			; std::_Unchecked<int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> >::destroy<std::pair<int const ,_MONSTER_ITEM_DROP> >, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> >::destroy<std::pair<int const ,_MONSTER_ITEM_DROP> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UCHAOSCASTLE_START_TIME@@@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UCHAOSCASTLE_START_TIME@@@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@@Z PROC ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::destroy<CHAOSCASTLE_START_TIME>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UCHAOSCASTLE_START_TIME@@@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@@Z ENDP ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::destroy<CHAOSCASTLE_START_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@UCHAOSCASTLE_START_TIME@@@std@@YAPAUCHAOSCASTLE_START_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UCHAOSCASTLE_START_TIME@@@std@@YAPAUCHAOSCASTLE_START_TIME@@AAU1@@Z PROC ; std::addressof<CHAOSCASTLE_START_TIME>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@UCHAOSCASTLE_START_TIME@@@std@@YAPAUCHAOSCASTLE_START_TIME@@AAU1@@Z ENDP ; std::addressof<CHAOSCASTLE_START_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UCHAOSCASTLE_START_TIME@@ABU1@@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UCHAOSCASTLE_START_TIME@@ABU1@@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@ABU2@@Z PROC ; std::allocator<CHAOSCASTLE_START_TIME>::construct<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 656  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UCHAOSCASTLE_START_TIME@@ABU1@@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@ABU2@@Z ENDP ; std::allocator<CHAOSCASTLE_START_TIME>::construct<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UCHAOSCASTLE_START_TIME@@AAU1@@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UCHAOSCASTLE_START_TIME@@AAU1@@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@AAU2@@Z PROC ; std::allocator<CHAOSCASTLE_START_TIME>::construct<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 656  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UCHAOSCASTLE_START_TIME@@AAU1@@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@AAU2@@Z ENDP ; std::allocator<CHAOSCASTLE_START_TIME>::construct<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAUCHAOSCASTLE_START_TIME@@@std@@YA$$QAUCHAOSCASTLE_START_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUCHAOSCASTLE_START_TIME@@@std@@YA$$QAUCHAOSCASTLE_START_TIME@@AAU1@@Z PROC ; std::move<CHAOSCASTLE_START_TIME &>, COMDAT

; 1249 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1250 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1251 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUCHAOSCASTLE_START_TIME@@@std@@YA$$QAUCHAOSCASTLE_START_TIME@@AAU1@@Z ENDP ; std::move<CHAOSCASTLE_START_TIME &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UtagPOINT@@ABU1@@?$allocator@UtagPOINT@@@std@@QAEXPAUtagPOINT@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UtagPOINT@@ABU1@@?$allocator@UtagPOINT@@@std@@QAEXPAUtagPOINT@@ABU2@@Z PROC ; std::allocator<tagPOINT>::construct<tagPOINT,tagPOINT const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 656  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UtagPOINT@@ABU1@@?$allocator@UtagPOINT@@@std@@QAEXPAUtagPOINT@@ABU2@@Z ENDP ; std::allocator<tagPOINT>::construct<tagPOINT,tagPOINT const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UtagPOINT@@AAU1@@?$allocator@UtagPOINT@@@std@@QAEXPAUtagPOINT@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UtagPOINT@@AAU1@@?$allocator@UtagPOINT@@@std@@QAEXPAUtagPOINT@@AAU2@@Z PROC ; std::allocator<tagPOINT>::construct<tagPOINT,tagPOINT &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 656  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UtagPOINT@@AAU1@@?$allocator@UtagPOINT@@@std@@QAEXPAUtagPOINT@@AAU2@@Z ENDP ; std::allocator<tagPOINT>::construct<tagPOINT,tagPOINT &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UtagPOINT@@@?$allocator@UtagPOINT@@@std@@QAEXPAUtagPOINT@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UtagPOINT@@@?$allocator@UtagPOINT@@@std@@QAEXPAUtagPOINT@@@Z PROC ; std::allocator<tagPOINT>::destroy<tagPOINT>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UtagPOINT@@@?$allocator@UtagPOINT@@@std@@QAEXPAUtagPOINT@@@Z ENDP ; std::allocator<tagPOINT>::destroy<tagPOINT>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HABH@?$allocator@H@std@@QAEXPAHABH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@HABH@?$allocator@H@std@@QAEXPAHABH@Z PROC	; std::allocator<int>::construct<int,int const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@HABH@?$allocator@H@std@@QAEXPAHABH@Z ENDP	; std::allocator<int>::construct<int,int const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z PROC	; std::allocator<int>::construct<int,int &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z ENDP	; std::allocator<int>::construct<int,int &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > > &,bool,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 146  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > > &,bool,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >,bool,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 146  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >,bool,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_at@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
__Node$ = 24						; size = 4
??$_Insert_at@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@1@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Insert_at<std::pair<int const ,_MONSTER_ITEM_DROP> &,std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>, COMDAT
; _this$ = ecx

; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 1856 : 		if (max_size() - 1 <= this->_Mysize())

  00008	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0000b	3d 48 92 24 09	 cmp	 eax, 153391688		; 09249248H
  00010	0f 83 6e 01 00
	00		 jae	 $LN730@Insert_at

; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;

  00016	8b 5d 18	 mov	 ebx, DWORD PTR __Node$[ebp]
  00019	40		 inc	 eax
  0001a	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0001d	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00020	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())

  00023	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00025	3b c1		 cmp	 eax, ecx
  00027	75 0e		 jne	 SHORT $LN6@Insert_at

; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;

  00029	89 59 04	 mov	 DWORD PTR [ecx+4], ebx

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0002c	8b 07		 mov	 eax, DWORD PTR [edi]

; 1870 : 			_Lmost() = _Newnode;

  0002e	89 18		 mov	 DWORD PTR [eax], ebx

; 1871 : 			_Rmost() = _Newnode;

  00030	8b 07		 mov	 eax, DWORD PTR [edi]
  00032	89 58 08	 mov	 DWORD PTR [eax+8], ebx
  00035	eb 1f		 jmp	 SHORT $LN11@Insert_at
$LN6@Insert_at:

; 1872 : 			}
; 1873 : 		else if (_Addleft)

  00037	80 7d 0c 00	 cmp	 BYTE PTR __Addleft$[ebp], 0
  0003b	74 0c		 je	 SHORT $LN8@Insert_at

; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;

  0003d	89 18		 mov	 DWORD PTR [eax], ebx

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0003f	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1876 : 			if (_Wherenode == _Lmost())

  00041	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00043	75 11		 jne	 SHORT $LN11@Insert_at

; 1877 : 				_Lmost() = _Newnode;

  00045	89 19		 mov	 DWORD PTR [ecx], ebx

; 1878 : 			}
; 1879 : 		else

  00047	eb 0d		 jmp	 SHORT $LN11@Insert_at
$LN8@Insert_at:

; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;

  00049	89 58 08	 mov	 DWORD PTR [eax+8], ebx

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0004c	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1882 : 			if (_Wherenode == _Rmost())

  0004e	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00051	75 03		 jne	 SHORT $LN11@Insert_at

; 1883 : 				_Rmost() = _Newnode;

  00053	89 59 08	 mov	 DWORD PTR [ecx+8], ebx
$LN11@Insert_at:

; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00056	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00059	8b f3		 mov	 esi, ebx
  0005b	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0005f	0f 85 0a 01 00
	00		 jne	 $LN3@Insert_at
$LL2@Insert_at:

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00065	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00068	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  0006b	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0006d	3b c1		 cmp	 eax, ecx
  0006f	75 74		 jne	 SHORT $LN12@Insert_at

; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =

  00071	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)

  00074	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00078	74 71		 je	 SHORT $LN729@Insert_at

; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  0007a	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0007d	75 0a		 jne	 SHORT $LN16@Insert_at

; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);

  0007f	8b f0		 mov	 esi, eax

; 1906 : 						_Lrotate(_Pnode);

  00081	8b cf		 mov	 ecx, edi
  00083	56		 push	 esi
  00084	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Lrotate
$LN16@Insert_at:

; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =

  00089	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008c	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  00090	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00093	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00096	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  0009a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  000a0	8b 11		 mov	 edx, DWORD PTR [ecx]

; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  000a2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000a5	89 01		 mov	 DWORD PTR [ecx], eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  000a7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  000aa	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ae	75 03		 jne	 SHORT $LN376@Insert_at

; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  000b0	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN376@Insert_at:

; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  000b3	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000b6	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  000b9	8b 07		 mov	 eax, DWORD PTR [edi]

; 2146 : 
; 2147 : 		if (_Wherenode == _Root())

  000bb	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  000be	75 0b		 jne	 SHORT $LN377@Insert_at

; 2148 : 			_Root() = _Pnode;

  000c0	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  000c3	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  000c6	e9 94 00 00 00	 jmp	 $LN728@Insert_at
$LN377@Insert_at:

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  000cb	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  000ce	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000d1	75 0b		 jne	 SHORT $LN379@Insert_at

; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  000d3	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  000d6	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  000d9	e9 81 00 00 00	 jmp	 $LN728@Insert_at
$LN379@Insert_at:

; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  000de	89 10		 mov	 DWORD PTR [eax], edx

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  000e0	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  000e3	eb 7a		 jmp	 SHORT $LN728@Insert_at
$LN12@Insert_at:

; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)

  000e5	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  000e9	75 1a		 jne	 SHORT $LN17@Insert_at
$LN729@Insert_at:

; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  000eb	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1922 : 					this->_Color(_Wherenode) = this->_Black;

  000ef	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  000f3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000f6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f9	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  000fd	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00100	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 1926 : 					}
; 1927 : 				else

  00103	eb 5d		 jmp	 SHORT $LN18@Insert_at
$LN17@Insert_at:

; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  00105	3b 30		 cmp	 esi, DWORD PTR [eax]
  00107	75 0a		 jne	 SHORT $LN19@Insert_at

; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);

  00109	8b f0		 mov	 esi, eax

; 1932 : 						_Rrotate(_Pnode);

  0010b	8b cf		 mov	 ecx, edi
  0010d	56		 push	 esi
  0010e	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Rrotate
$LN19@Insert_at:

; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =

  00113	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00116	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  0011a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0011d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00120	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  00124	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00127	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  0012a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]

; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0012d	8b 02		 mov	 eax, DWORD PTR [edx]
  0012f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00132	8b 02		 mov	 eax, DWORD PTR [edx]

; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  00134	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00138	75 03		 jne	 SHORT $LN575@Insert_at

; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  0013a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN575@Insert_at:

; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0013d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00140	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00143	8b 07		 mov	 eax, DWORD PTR [edi]

; 2116 : 
; 2117 : 		if (_Wherenode == _Root())

  00145	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00148	75 05		 jne	 SHORT $LN576@Insert_at

; 2118 : 			_Root() = _Pnode;

  0014a	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  0014d	eb 0e		 jmp	 SHORT $LN579@Insert_at
$LN576@Insert_at:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0014f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00152	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00154	75 04		 jne	 SHORT $LN578@Insert_at

; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  00156	89 10		 mov	 DWORD PTR [eax], edx

; 2121 : 		else

  00158	eb 03		 jmp	 SHORT $LN579@Insert_at
$LN578@Insert_at:

; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0015a	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN579@Insert_at:

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0015d	89 0a		 mov	 DWORD PTR [edx], ecx
$LN728@Insert_at:

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0015f	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN18@Insert_at:

; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00162	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00165	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00169	0f 84 f6 fe ff
	ff		 je	 $LL2@Insert_at
$LN3@Insert_at:

; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  0016f	8b 07		 mov	 eax, DWORD PTR [edi]
  00171	5f		 pop	 edi
  00172	5e		 pop	 esi
  00173	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00176	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 43   : 		: _Ptr(_Pnode)

  0017a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0017d	89 18		 mov	 DWORD PTR [eax], ebx
  0017f	5b		 pop	 ebx

; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}

  00180	5d		 pop	 ebp
  00181	c2 14 00	 ret	 20			; 00000014H
$LN730@Insert_at:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00184	ff 75 18	 push	 DWORD PTR __Node$[ebp]
  00187	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0018c	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1859 : 			_Xlength_error("map/set<T> too long");

  0018f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  00194	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN732@Insert_at:
$LN727@Insert_at:
  00199	cc		 int	 3
??$_Insert_at@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@1@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Insert_at<std::pair<int const ,_MONSTER_ITEM_DROP> &,std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@YAAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@YAAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@0@AAU10@@Z PROC ; std::forward<std::pair<int const ,_MONSTER_ITEM_DROP> &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@YAAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@0@AAU10@@Z ENDP ; std::forward<std::pair<int const ,_MONSTER_ITEM_DROP> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@U?$pair@HU_MONSTER_ITEM_DROP@@@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@U?$pair@HU_MONSTER_ITEM_DROP@@@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::construct<std::pair<int const ,_MONSTER_ITEM_DROP>,std::pair<int,_MONSTER_ITEM_DROP> >, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 13		 je	 SHORT $LN13@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00017	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001a	89 42 08	 mov	 DWORD PTR [edx+8], eax
$LN13@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 919  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??$construct@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@U?$pair@HU_MONSTER_ITEM_DROP@@@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::construct<std::pair<int const ,_MONSTER_ITEM_DROP>,std::pair<int,_MONSTER_ITEM_DROP> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::construct<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *,std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> * &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::construct<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *,std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> * &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1><std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> > const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 568  : 		this->_Mysize = 0;

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  0000f	c2 08 00	 ret	 8
??$?0ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1><std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@YAABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@YAABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@0@ABV10@@Z PROC ; std::forward<std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> > const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@YAABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z PROC ; std::forward<std::_One_then_variadic_args_t>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z ENDP ; std::forward<std::_One_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABU?$less@H@std@@@std@@YAABU?$less@H@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU?$less@H@std@@@std@@YAABU?$less@H@0@ABU10@@Z PROC ; std::forward<std::less<int> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABU?$less@H@std@@@std@@YAABU?$less@H@0@ABU10@@Z ENDP ; std::forward<std::less<int> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUCHAOSCASTLE_START_TIME@@PAU1@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUCHAOSCASTLE_START_TIME@@PAU1@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@@Z PROC ; std::_Uninitialized_move<CHAOSCASTLE_START_TIME *,CHAOSCASTLE_START_TIME *,std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCHAOSCASTLE_START_TIME@@PAU1@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@U1@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CHAOSCASTLE_START_TIME *,CHAOSCASTLE_START_TIME *,std::allocator<CHAOSCASTLE_START_TIME>,CHAOSCASTLE_START_TIME>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAUCHAOSCASTLE_START_TIME@@PAU1@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<CHAOSCASTLE_START_TIME *,CHAOSCASTLE_START_TIME *,std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@@std@@YAXPAUtagPOINT@@0AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@@std@@YAXPAUtagPOINT@@0AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<tagPOINT> > >, COMDAT

; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@@std@@YAXPAUtagPOINT@@0AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<tagPOINT> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UtagPOINT@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagPOINT@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UtagPOINT@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagPOINT@@0@Z PROC ; std::_Ptr_cat<tagPOINT,tagPOINT>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UtagPOINT@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUtagPOINT@@0@Z ENDP ; std::_Ptr_cat<tagPOINT,tagPOINT>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUtagPOINT@@PAU1@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@@std@@YAPAUtagPOINT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUtagPOINT@@PAU1@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@@std@@YAPAUtagPOINT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@@Z PROC ; std::_Uninitialized_move<tagPOINT *,tagPOINT *,std::_Wrap_alloc<std::allocator<tagPOINT> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUtagPOINT@@PAU1@V?$allocator@UtagPOINT@@@std@@U1@@std@@YAPAUtagPOINT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<tagPOINT *,tagPOINT *,std::allocator<tagPOINT>,tagPOINT>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAUtagPOINT@@PAU1@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@@std@@YAPAUtagPOINT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<tagPOINT *,tagPOINT *,std::_Wrap_alloc<std::allocator<tagPOINT> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >, COMDAT

; 180  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z PROC ; std::_Ptr_cat<int,int>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ENDP ; std::_Ptr_cat<int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@1@PAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@1@PAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::destroy<std::pair<int const ,_MONSTER_ITEM_DROP> >, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@1@PAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::destroy<std::pair<int const ,_MONSTER_ITEM_DROP> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@YAXPAUCHAOSCASTLE_START_TIME@@0AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@YAXPAUCHAOSCASTLE_START_TIME@@0AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> > >, COMDAT

; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@YAXPAUCHAOSCASTLE_START_TIME@@0AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@YAABV?$allocator@UCHAOSCASTLE_START_TIME@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@YAABV?$allocator@UCHAOSCASTLE_START_TIME@@@0@ABV10@@Z PROC ; std::forward<std::allocator<CHAOSCASTLE_START_TIME> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@YAABV?$allocator@UCHAOSCASTLE_START_TIME@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<CHAOSCASTLE_START_TIME> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@UtagPOINT@@@std@@@std@@YAABV?$allocator@UtagPOINT@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@UtagPOINT@@@std@@@std@@YAABV?$allocator@UtagPOINT@@@0@ABV10@@Z PROC ; std::forward<std::allocator<tagPOINT> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@UtagPOINT@@@std@@@std@@YAABV?$allocator@UtagPOINT@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<tagPOINT> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@H@std@@@std@@YAABV?$allocator@H@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@H@std@@@std@@YAABV?$allocator@H@0@ABV10@@Z PROC ; std::forward<std::allocator<int> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@H@std@@@std@@YAABV?$allocator@H@0@ABV10@@Z ENDP ; std::forward<std::allocator<int> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@YAPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@0@AAU10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@YAPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@0@AAU10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<std::pair<int const ,_MONSTER_ITEM_DROP> >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@YAPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@0@AAU10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<std::pair<int const ,_MONSTER_ITEM_DROP> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UCHAOSCASTLE_START_TIME@@ABU1@@?$allocator_traits@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@SAXAAV?$allocator@UCHAOSCASTLE_START_TIME@@@1@PAUCHAOSCASTLE_START_TIME@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UCHAOSCASTLE_START_TIME@@ABU1@@?$allocator_traits@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@SAXAAV?$allocator@UCHAOSCASTLE_START_TIME@@@1@PAUCHAOSCASTLE_START_TIME@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<CHAOSCASTLE_START_TIME> >::construct<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@UCHAOSCASTLE_START_TIME@@ABU1@@?$allocator_traits@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@SAXAAV?$allocator@UCHAOSCASTLE_START_TIME@@@1@PAUCHAOSCASTLE_START_TIME@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<CHAOSCASTLE_START_TIME> >::construct<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABUCHAOSCASTLE_START_TIME@@@std@@YAABUCHAOSCASTLE_START_TIME@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUCHAOSCASTLE_START_TIME@@@std@@YAABUCHAOSCASTLE_START_TIME@@ABU1@@Z PROC ; std::forward<CHAOSCASTLE_START_TIME const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUCHAOSCASTLE_START_TIME@@@std@@YAABUCHAOSCASTLE_START_TIME@@ABU1@@Z ENDP ; std::forward<CHAOSCASTLE_START_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UCHAOSCASTLE_START_TIME@@AAU1@@?$allocator_traits@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@SAXAAV?$allocator@UCHAOSCASTLE_START_TIME@@@1@PAUCHAOSCASTLE_START_TIME@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UCHAOSCASTLE_START_TIME@@AAU1@@?$allocator_traits@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@SAXAAV?$allocator@UCHAOSCASTLE_START_TIME@@@1@PAUCHAOSCASTLE_START_TIME@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<CHAOSCASTLE_START_TIME> >::construct<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@UCHAOSCASTLE_START_TIME@@AAU1@@?$allocator_traits@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@SAXAAV?$allocator@UCHAOSCASTLE_START_TIME@@@1@PAUCHAOSCASTLE_START_TIME@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<CHAOSCASTLE_START_TIME> >::construct<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAUCHAOSCASTLE_START_TIME@@@std@@YAAAUCHAOSCASTLE_START_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUCHAOSCASTLE_START_TIME@@@std@@YAAAUCHAOSCASTLE_START_TIME@@AAU1@@Z PROC ; std::forward<CHAOSCASTLE_START_TIME &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUCHAOSCASTLE_START_TIME@@@std@@YAAAUCHAOSCASTLE_START_TIME@@AAU1@@Z ENDP ; std::forward<CHAOSCASTLE_START_TIME &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBUCHAOSCASTLE_START_TIME@@@std@@YAPBUCHAOSCASTLE_START_TIME@@ABU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBUCHAOSCASTLE_START_TIME@@@std@@YAPBUCHAOSCASTLE_START_TIME@@ABU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<CHAOSCASTLE_START_TIME const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBUCHAOSCASTLE_START_TIME@@@std@@YAPBUCHAOSCASTLE_START_TIME@@ABU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<CHAOSCASTLE_START_TIME const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Move@PAUCHAOSCASTLE_START_TIME@@PAU1@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUCHAOSCASTLE_START_TIME@@PAU1@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<CHAOSCASTLE_START_TIME *,CHAOSCASTLE_START_TIME *>, COMDAT

; 2516 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2517 : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	3b ce		 cmp	 ecx, esi
  0000f	74 14		 je	 SHORT $LN3@Move
$LL4@Move:

; 2518 : 		*_Dest = _STD move(*_First);

  00011	8b 11		 mov	 edx, DWORD PTR [ecx]
  00013	89 10		 mov	 DWORD PTR [eax], edx
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	83 c1 08	 add	 ecx, 8
  0001b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001e	83 c0 08	 add	 eax, 8
  00021	3b ce		 cmp	 ecx, esi
  00023	75 ec		 jne	 SHORT $LL4@Move
$LN3@Move:
  00025	5e		 pop	 esi

; 2519 : 	return (_Dest);
; 2520 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUCHAOSCASTLE_START_TIME@@PAU1@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<CHAOSCASTLE_START_TIME *,CHAOSCASTLE_START_TIME *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UCHAOSCASTLE_START_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCHAOSCASTLE_START_TIME@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UCHAOSCASTLE_START_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCHAOSCASTLE_START_TIME@@0@Z PROC ; std::_Ptr_cat<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UCHAOSCASTLE_START_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCHAOSCASTLE_START_TIME@@0@Z ENDP ; std::_Ptr_cat<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UtagPOINT@@ABU1@@?$allocator_traits@V?$allocator@UtagPOINT@@@std@@@std@@SAXAAV?$allocator@UtagPOINT@@@1@PAUtagPOINT@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UtagPOINT@@ABU1@@?$allocator_traits@V?$allocator@UtagPOINT@@@std@@@std@@SAXAAV?$allocator@UtagPOINT@@@1@PAUtagPOINT@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<tagPOINT> >::construct<tagPOINT,tagPOINT const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@UtagPOINT@@ABU1@@?$allocator_traits@V?$allocator@UtagPOINT@@@std@@@std@@SAXAAV?$allocator@UtagPOINT@@@1@PAUtagPOINT@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<tagPOINT> >::construct<tagPOINT,tagPOINT const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABUtagPOINT@@@std@@YAABUtagPOINT@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUtagPOINT@@@std@@YAABUtagPOINT@@ABU1@@Z PROC ; std::forward<tagPOINT const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUtagPOINT@@@std@@YAABUtagPOINT@@ABU1@@Z ENDP ; std::forward<tagPOINT const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UtagPOINT@@AAU1@@?$allocator_traits@V?$allocator@UtagPOINT@@@std@@@std@@SAXAAV?$allocator@UtagPOINT@@@1@PAUtagPOINT@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UtagPOINT@@AAU1@@?$allocator_traits@V?$allocator@UtagPOINT@@@std@@@std@@SAXAAV?$allocator@UtagPOINT@@@1@PAUtagPOINT@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<tagPOINT> >::construct<tagPOINT,tagPOINT &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@UtagPOINT@@AAU1@@?$allocator_traits@V?$allocator@UtagPOINT@@@std@@@std@@SAXAAV?$allocator@UtagPOINT@@@1@PAUtagPOINT@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<tagPOINT> >::construct<tagPOINT,tagPOINT &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAUtagPOINT@@@std@@YAAAUtagPOINT@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUtagPOINT@@@std@@YAAAUtagPOINT@@AAU1@@Z PROC ; std::forward<tagPOINT &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUtagPOINT@@@std@@YAAAUtagPOINT@@AAU1@@Z ENDP ; std::forward<tagPOINT &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBUtagPOINT@@@std@@YAPBUtagPOINT@@ABU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBUtagPOINT@@@std@@YAPBUtagPOINT@@ABU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<tagPOINT const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBUtagPOINT@@@std@@YAPBUtagPOINT@@ABU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<tagPOINT const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UtagPOINT@@@?$allocator_traits@V?$allocator@UtagPOINT@@@std@@@std@@SAXAAV?$allocator@UtagPOINT@@@1@PAUtagPOINT@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UtagPOINT@@@?$allocator_traits@V?$allocator@UtagPOINT@@@std@@@std@@SAXAAV?$allocator@UtagPOINT@@@1@PAUtagPOINT@@@Z PROC ; std::allocator_traits<std::allocator<tagPOINT> >::destroy<tagPOINT>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@UtagPOINT@@@?$allocator_traits@V?$allocator@UtagPOINT@@@std@@@std@@SAXAAV?$allocator@UtagPOINT@@@1@PAUtagPOINT@@@Z ENDP ; std::allocator_traits<std::allocator<tagPOINT> >::destroy<tagPOINT>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HABH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHABH@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@HABH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHABH@Z PROC ; std::allocator_traits<std::allocator<int> >::construct<int,int const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@HABH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHABH@Z ENDP ; std::allocator_traits<std::allocator<int> >::construct<int,int const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABH@std@@YAABHABH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABH@std@@YAABHABH@Z PROC			; std::forward<int const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABH@std@@YAABHABH@Z ENDP			; std::forward<int const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HAAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHAAH@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@HAAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHAAH@Z PROC ; std::allocator_traits<std::allocator<int> >::construct<int,int &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@HAAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHAAH@Z ENDP ; std::allocator_traits<std::allocator<int> >::construct<int,int &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBH@std@@YAPBHABHU?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBH@std@@YAPBHABHU?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<int const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBH@std@@YAPBHABHU?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<int const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_nohint@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z
_TEXT	SEGMENT
tv735 = -28						; size = 4
_this$1$ = -24						; size = 4
__Addleft$2 = -20					; size = 1
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
$T3 = 12						; size = 4
__Where$4 = 12						; size = 4
__Leftish$ = 12						; size = 1
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 4
??$_Insert_nohint@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Insert_nohint<std::pair<int const ,_MONSTER_ITEM_DROP> &,std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>, COMDAT
; _this$ = ecx

; 1799 : 		{	// try to insert node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_nohint@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b c1		 mov	 eax, ecx
  0002d	89 45 e8	 mov	 DWORD PTR _this$1$[ebp], eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00030	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty

  00032	b2 01		 mov	 dl, 1
  00034	8b 5d 10	 mov	 ebx, DWORD PTR __Val$[ebp]
  00037	8b f9		 mov	 edi, ecx
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00040	89 4d e4	 mov	 DWORD PTR tv735[ebp], ecx

; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();

  00043	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty

  00046	88 55 ec	 mov	 BYTE PTR __Addleft$2[ebp], dl

; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))

  00049	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004d	75 30		 jne	 SHORT $LN3@Insert_noh
  0004f	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00051	8a 75 0c	 mov	 dh, BYTE PTR __Leftish$[ebp]
$LL2@Insert_noh:

; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;

  00054	8b f8		 mov	 edi, eax

; 1808 : 			if (_Leftish)

  00056	84 f6		 test	 dh, dh
  00058	74 08		 je	 SHORT $LN5@Insert_noh
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  0005a	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),

  0005d	0f 9d c2	 setge	 dl

; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else

  00060	eb 06		 jmp	 SHORT $LN336@Insert_noh
$LN5@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00062	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00065	0f 9c c2	 setl	 dl
$LN336@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),

  00068	88 55 ec	 mov	 BYTE PTR __Addleft$2[ebp], dl

; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)

  0006b	84 d2		 test	 dl, dl
  0006d	74 04		 je	 SHORT $LN16@Insert_noh
  0006f	8b 00		 mov	 eax, DWORD PTR [eax]
  00071	eb 03		 jmp	 SHORT $LN17@Insert_noh
$LN16@Insert_noh:
  00073	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN17@Insert_noh:

; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))

  00076	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0007a	74 d8		 je	 SHORT $LL2@Insert_noh
  0007c	8b 4d e4	 mov	 ecx, DWORD PTR tv735[ebp]
$LN3@Insert_noh:

; 43   : 		: _Ptr(_Pnode)

  0007f	8b f7		 mov	 esi, edi
  00081	89 75 0c	 mov	 DWORD PTR __Where$4[ebp], esi

; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)

  00084	84 d2		 test	 dl, dl
  00086	74 41		 je	 SHORT $LN12@Insert_noh

; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00088	3b 39		 cmp	 edi, DWORD PTR [ecx]

; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())

  0008a	75 32		 jne	 SHORT $LN11@Insert_noh

; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,

  0008c	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  0008f	53		 push	 ebx
  00090	57		 push	 edi
  00091	6a 01		 push	 1
$LN337@Insert_noh:
  00093	8b 4d e8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00096	8d 45 0c	 lea	 eax, DWORD PTR $T3[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@1@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Insert_at<std::pair<int const ,_MONSTER_ITEM_DROP> &,std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  0009f	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a4	89 08		 mov	 DWORD PTR [eax], ecx

; 144  : 				second(_STD forward<_Other2>(_Val2))

  000a6	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1849 : 		}

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 10 00	 ret	 16			; 00000010H
$LN11@Insert_noh:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);

  000be	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$4[ebp]
  000c1	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>::operator--
  000c6	8b 75 0c	 mov	 esi, DWORD PTR __Where$4[ebp]
$LN12@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  000c9	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  000cc	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  000cf	3b 03		 cmp	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

  000d1	7d 1b		 jge	 SHORT $LN13@Insert_noh

; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  000d3	53		 push	 ebx
  000d4	57		 push	 edi
  000d5	ff 75 ec	 push	 DWORD PTR __Addleft$2[ebp]
  000d8	eb b9		 jmp	 SHORT $LN337@Insert_noh
__catch$??$_Insert_nohint@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  000da	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  000dd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e2	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1847 : 		_RERAISE;

  000e5	6a 00		 push	 0
  000e7	6a 00		 push	 0
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN338@Insert_noh:
$LN13@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  000ee	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  000f3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  000f6	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  000f9	89 30		 mov	 DWORD PTR [eax], esi

; 144  : 				second(_STD forward<_Other2>(_Val2))

  000fb	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1849 : 		}

  000ff	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00102	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00109	59		 pop	 ecx
  0010a	5f		 pop	 edi
  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx
  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c2 10 00	 ret	 16			; 00000010H
$LN335@Insert_noh:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_nohint@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_nohint@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Insert_nohint<std::pair<int const ,_MONSTER_ITEM_DROP> &,std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode@U?$pair@HU_MONSTER_ITEM_DROP@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Buynode@U?$pair@HU_MONSTER_ITEM_DROP@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buynode<std::pair<int,_MONSTER_ITEM_DROP> >, COMDAT
; _this$ = ecx

; 887  : 		{	// allocate a node with defaults and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 888  : 		_Nodeptr _Pnode = _Buynode0();

  00005	e8 00 00 00 00	 call	 ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buynode0
  0000a	8b f0		 mov	 esi, eax

; 602  : 		return ((reference)_Pnode->_Myval);

  0000c	8d 7e 10	 lea	 edi, DWORD PTR [esi+16]

; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;

  0000f	66 c7 46 0c 00
	00		 mov	 WORD PTR [esi+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00015	85 ff		 test	 edi, edi
  00017	74 15		 je	 SHORT $LN50@Buynode
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  00019	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  0001c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0001e	89 0f		 mov	 DWORD PTR [edi], ecx

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  00020	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00023	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00026	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00029	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 902  : 		return (_Pnode);

  0002c	8b c6		 mov	 eax, esi
$LN50@Buynode:
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi

; 903  : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??$_Buynode@U?$pair@HU_MONSTER_ITEM_DROP@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buynode<std::pair<int,_MONSTER_ITEM_DROP> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U?$pair@HU_MONSTER_ITEM_DROP@@@std@@@std@@YA$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$pair@HU_MONSTER_ITEM_DROP@@@std@@@std@@YA$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@0@AAU10@@Z PROC ; std::forward<std::pair<int,_MONSTER_ITEM_DROP> >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$pair@HU_MONSTER_ITEM_DROP@@@std@@@std@@YA$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@0@AAU10@@Z ENDP ; std::forward<std::pair<int,_MONSTER_ITEM_DROP> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAU_MONSTER_ITEM_DROP@@@std@@YAAAU_MONSTER_ITEM_DROP@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU_MONSTER_ITEM_DROP@@@std@@YAAAU_MONSTER_ITEM_DROP@@AAU1@@Z PROC ; std::forward<_MONSTER_ITEM_DROP &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU_MONSTER_ITEM_DROP@@@std@@YAAAU_MONSTER_ITEM_DROP@@AAU1@@Z ENDP ; std::forward<_MONSTER_ITEM_DROP &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAH@std@@YAAAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAH@std@@YAAAHAAH@Z PROC			; std::forward<int &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAH@std@@YAAAHAAH@Z ENDP			; std::forward<int &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::construct<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *,std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> * &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::construct<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *,std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??$_Kfn@$$CBHU_MONSTER_ITEM_DROP@@@?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBHU_MONSTER_ITEM_DROP@@@?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@@Z PROC ; std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0>::_Kfn<int const ,_MONSTER_ITEM_DROP>, COMDAT

; 61   : 		{	// extract key from element value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 62   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 63   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Kfn@$$CBHU_MONSTER_ITEM_DROP@@@?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@@Z ENDP ; std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0>::_Kfn<int const ,_MONSTER_ITEM_DROP>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABU?$less@H@std@@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@H@1@$$QAU21@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
_<_Val2_1>$ = 20					; size = 4
??$?0ABU?$less@H@std@@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@H@1@$$QAU21@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@Z PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>,1>::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>,1><std::less<int> const &,std::_One_then_variadic_args_t,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> > const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 568  : 		this->_Mysize = 0;

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  0000f	c2 10 00	 ret	 16			; 00000010H
??$?0ABU?$less@H@std@@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@H@1@$$QAU21@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>,1>::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>,1><std::less<int> const &,std::_One_then_variadic_args_t,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAUCHAOSCASTLE_START_TIME@@@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEPAUCHAOSCASTLE_START_TIME@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUCHAOSCASTLE_START_TIME@@@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEPAUCHAOSCASTLE_START_TIME@@PAU2@00@Z PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Umove<CHAOSCASTLE_START_TIME *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCHAOSCASTLE_START_TIME@@PAU1@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@U1@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CHAOSCASTLE_START_TIME *,CHAOSCASTLE_START_TIME *,std::allocator<CHAOSCASTLE_START_TIME>,CHAOSCASTLE_START_TIME>
  00017	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUCHAOSCASTLE_START_TIME@@@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEPAUCHAOSCASTLE_START_TIME@@PAU2@00@Z ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Umove<CHAOSCASTLE_START_TIME *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@@std@@YAXPAUtagPOINT@@0AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@@std@@YAXPAUtagPOINT@@0AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<tagPOINT> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@@std@@YAXPAUtagPOINT@@0AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<tagPOINT> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAUtagPOINT@@@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEPAUtagPOINT@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUtagPOINT@@@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEPAUtagPOINT@@PAU2@00@Z PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Umove<tagPOINT *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUtagPOINT@@PAU1@V?$allocator@UtagPOINT@@@std@@U1@@std@@YAPAUtagPOINT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<tagPOINT *,tagPOINT *,std::allocator<tagPOINT>,tagPOINT>
  00017	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUtagPOINT@@@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEPAUtagPOINT@@PAU2@00@Z ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Umove<tagPOINT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Umove<int *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Umove<int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Lbound@H@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@ABH@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
??$_Lbound@H@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Lbound<int>, COMDAT
; _this$ = ecx

; 2087 : 		{	// find leftmost node not less than _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 2088 : 		_Nodeptr _Pnode = _Root();

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 19		 jne	 SHORT $LN72@Lbound
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LL2@Lbound:
  00013	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  00016	7d 05		 jge	 SHORT $LN4@Lbound

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00018	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 2094 : 			else

  0001b	eb 04		 jmp	 SHORT $LN5@Lbound
$LN4@Lbound:

; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;

  0001d	8b d0		 mov	 edx, eax

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Lbound:

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00021	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00025	74 ec		 je	 SHORT $LL2@Lbound
$LN72@Lbound:

; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate

  00027	8b c2		 mov	 eax, edx

; 2101 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??$_Lbound@H@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Lbound<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::destroy<std::pair<int const ,_MONSTER_ITEM_DROP> >, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::destroy<std::pair<int const ,_MONSTER_ITEM_DROP> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@YAXPAUCHAOSCASTLE_START_TIME@@0AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@YAXPAUCHAOSCASTLE_START_TIME@@0AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@YAXPAUCHAOSCASTLE_START_TIME@@0AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@UCHAOSCASTLE_START_TIME@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UCHAOSCASTLE_START_TIME@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@UCHAOSCASTLE_START_TIME@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UCHAOSCASTLE_START_TIME@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >,std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >,std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> >,1><std::allocator<CHAOSCASTLE_START_TIME> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@UCHAOSCASTLE_START_TIME@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UCHAOSCASTLE_START_TIME@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >,std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >,std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> >,1><std::allocator<CHAOSCASTLE_START_TIME> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@UtagPOINT@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UtagPOINT@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@UtagPOINT@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UtagPOINT@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<tagPOINT> >,std::_Vector_val<std::_Simple_types<tagPOINT> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<tagPOINT> >,std::_Vector_val<std::_Simple_types<tagPOINT> >,1><std::allocator<tagPOINT> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@UtagPOINT@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UtagPOINT@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<tagPOINT> >,std::_Vector_val<std::_Simple_types<tagPOINT> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<tagPOINT> >,std::_Vector_val<std::_Simple_types<tagPOINT> >,1><std::allocator<tagPOINT> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@H@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@H@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@H@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@H@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@H@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@YAPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@YAPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@0@AAU10@@Z PROC ; std::addressof<std::pair<int const ,_MONSTER_ITEM_DROP> >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@YAPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<int const ,_MONSTER_ITEM_DROP> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@SAPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@2@AAU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@SAPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<int const ,_MONSTER_ITEM_DROP> *>::pointer_to, COMDAT

; 316  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 318  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?pointer_to@?$pointer_traits@PAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@SAPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<int const ,_MONSTER_ITEM_DROP> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UCHAOSCASTLE_START_TIME@@ABU1@@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UCHAOSCASTLE_START_TIME@@ABU1@@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::construct<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UCHAOSCASTLE_START_TIME@@ABU1@@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::construct<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UCHAOSCASTLE_START_TIME@@AAU1@@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UCHAOSCASTLE_START_TIME@@AAU1@@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::construct<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UCHAOSCASTLE_START_TIME@@AAU1@@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::construct<CHAOSCASTLE_START_TIME,CHAOSCASTLE_START_TIME &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBUCHAOSCASTLE_START_TIME@@@std@@YAPBUCHAOSCASTLE_START_TIME@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUCHAOSCASTLE_START_TIME@@@std@@YAPBUCHAOSCASTLE_START_TIME@@ABU1@@Z PROC ; std::addressof<CHAOSCASTLE_START_TIME const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUCHAOSCASTLE_START_TIME@@@std@@YAPBUCHAOSCASTLE_START_TIME@@ABU1@@Z ENDP ; std::addressof<CHAOSCASTLE_START_TIME const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Move@PAUCHAOSCASTLE_START_TIME@@PAU1@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUCHAOSCASTLE_START_TIME@@PAU1@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00@Z PROC ; std::_Move<CHAOSCASTLE_START_TIME *,CHAOSCASTLE_START_TIME *>, COMDAT

; 2537 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2538 : 	return (_Move(_First, _Last,

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	56		 push	 esi

; 2517 : 	for (; _First != _Last; ++_Dest, (void)++_First)

  0000a	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	3b ce		 cmp	 ecx, esi
  0000f	74 14		 je	 SHORT $LN7@Move
$LL8@Move:

; 2518 : 		*_Dest = _STD move(*_First);

  00011	8b 11		 mov	 edx, DWORD PTR [ecx]
  00013	89 10		 mov	 DWORD PTR [eax], edx
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	83 c1 08	 add	 ecx, 8
  0001b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001e	83 c0 08	 add	 eax, 8
  00021	3b ce		 cmp	 ecx, esi
  00023	75 ec		 jne	 SHORT $LL8@Move
$LN7@Move:
  00025	5e		 pop	 esi

; 2539 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2540 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUCHAOSCASTLE_START_TIME@@PAU1@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00@Z ENDP ; std::_Move<CHAOSCASTLE_START_TIME *,CHAOSCASTLE_START_TIME *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >::operator-, COMDAT
; _this$ = ecx

; 377  : 		{	// return this - integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 		_Ptr += _Off;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	c1 e0 03	 shl	 eax, 3
  0000b	2b c8		 sub	 ecx, eax

; 378  : 		_Myiter _Tmp = *this;
; 379  : 		return (_Tmp -= _Off);

  0000d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00010	89 08		 mov	 DWORD PTR [eax], ecx

; 380  : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??Z?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Z?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >::operator-=, COMDAT
; _this$ = ecx

; 372  : 		{	// decrement by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 		_Ptr += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	f7 d8		 neg	 eax
  00008	c1 e0 03	 shl	 eax, 3
  0000b	01 01		 add	 DWORD PTR [ecx], eax

; 373  : 		return (*this += -_Off);

  0000d	8b c1		 mov	 eax, ecx

; 374  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??Z?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >::operator-=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >::operator+=, COMDAT
; _this$ = ecx

; 360  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 		_Ptr += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	c1 e0 03	 shl	 eax, 3
  00009	01 01		 add	 DWORD PTR [ecx], eax

; 361  : 		*(_Mybase *)this += _Off;
; 362  : 		return (*this);

  0000b	8b c1		 mov	 eax, ecx

; 363  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QBEAAUtagPOINT@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QBEAAUtagPOINT@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >::operator*, COMDAT
; _this$ = ecx

; 325  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QBEAAUtagPOINT@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QAE@PAUtagPOINT@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QAE@PAUtagPOINT@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >, COMDAT
; _this$ = ecx

; 307  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 308  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QAE@PAUtagPOINT@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >::operator+=, COMDAT
; _this$ = ecx

; 153  : 		{	// increment by integer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	c1 e0 03	 shl	 eax, 3
  00009	01 01		 add	 DWORD PTR [ecx], eax

; 171  : 		return (*this);

  0000b	8b c1		 mov	 eax, ecx

; 172  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QBEABUtagPOINT@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QBEABUtagPOINT@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 87   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QBEABUtagPOINT@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QAE@PAUtagPOINT@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QAE@PAUtagPOINT@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@std@@QAE@PAUtagPOINT@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<tagPOINT> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UtagPOINT@@ABU1@@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UtagPOINT@@ABU1@@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<tagPOINT> >::construct<tagPOINT,tagPOINT const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UtagPOINT@@ABU1@@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<tagPOINT> >::construct<tagPOINT,tagPOINT const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UtagPOINT@@AAU1@@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UtagPOINT@@AAU1@@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<tagPOINT> >::construct<tagPOINT,tagPOINT &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UtagPOINT@@AAU1@@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<tagPOINT> >::construct<tagPOINT,tagPOINT &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBUtagPOINT@@@std@@YAPBUtagPOINT@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUtagPOINT@@@std@@YAPBUtagPOINT@@ABU1@@Z PROC ; std::addressof<tagPOINT const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUtagPOINT@@@std@@YAPBUtagPOINT@@ABU1@@Z ENDP ; std::addressof<tagPOINT const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UtagPOINT@@@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UtagPOINT@@@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@@Z PROC ; std::_Wrap_alloc<std::allocator<tagPOINT> >::destroy<tagPOINT>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UtagPOINT@@@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@@Z ENDP ; std::_Wrap_alloc<std::allocator<tagPOINT> >::destroy<tagPOINT>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HABH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHABH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@HABH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHABH@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@HABH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHABH@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HAAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHAAH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@HAAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHAAH@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@HAAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHAAH@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBH@std@@YAPBHABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBH@std@@YAPBHABH@Z PROC			; std::addressof<int const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBH@std@@YAPBHABH@Z ENDP			; std::addressof<int const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 02	 sar	 eax, 2
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0002e	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0002f	c3		 ret	 0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1646 : 		if (_Unused_capacity() < _Count)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	57		 push	 edi

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  0000a	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0000d	8b c7		 mov	 eax, edi
  0000f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00012	2b c2		 sub	 eax, edx
  00014	c1 f8 02	 sar	 eax, 2

; 1646 : 		if (_Unused_capacity() < _Count)

  00017	3b c1		 cmp	 eax, ecx
  00019	73 3b		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0001b	2b 16		 sub	 edx, DWORD PTR [esi]
  0001d	53		 push	 ebx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  0001e	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00023	c1 fa 02	 sar	 edx, 2

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00026	8b c3		 mov	 eax, ebx
  00028	2b c2		 sub	 eax, edx
  0002a	3b c1		 cmp	 eax, ecx
  0002c	72 2e		 jb	 SHORT $LN134@Reserve

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0002e	2b 3e		 sub	 edi, DWORD PTR [esi]

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00030	03 d1		 add	 edx, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00032	c1 ff 02	 sar	 edi, 2

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00035	8b c7		 mov	 eax, edi
  00037	d1 e8		 shr	 eax, 1
  00039	2b d8		 sub	 ebx, eax
  0003b	3b df		 cmp	 ebx, edi
  0003d	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00040	b8 00 00 00 00	 mov	 eax, 0
  00045	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00048	3b ca		 cmp	 ecx, edx
  0004a	0f 42 ca	 cmovb	 ecx, edx

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004d	51		 push	 ecx
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reallocate
  00055	5b		 pop	 ebx
$LN2@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1651 : 			}
; 1652 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00061	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  00066	cc		 int	 3
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00006	ff 75 08	 push	 DWORD PTR __Count$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1620 : 		{	// move to array of exactly _Count elements

  00009	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  0000b	e8 00 00 00 00	 call	 ?allocate@?$allocator@H@std@@QAEPAHI@Z ; std::allocator<int>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);

  00010	8b 37		 mov	 esi, DWORD PTR [edi]
  00012	8b d8		 mov	 ebx, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00014	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00017	2b d6		 sub	 edx, esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  00019	83 e2 fc	 and	 edx, -4			; fffffffcH
  0001c	52		 push	 edx
  0001d	56		 push	 esi
  0001e	53		 push	 ebx
  0001f	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00024	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00029	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0002c	2b f1		 sub	 esi, ecx
  0002e	c1 fe 02	 sar	 esi, 2

; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00031	85 c9		 test	 ecx, ecx
  00033	74 11		 je	 SHORT $LN3@Reallocate

; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00035	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00038	2b c1		 sub	 eax, ecx
  0003a	c1 f8 02	 sar	 eax, 2
  0003d	50		 push	 eax
  0003e	51		 push	 ecx
  0003f	8b cf		 mov	 ecx, edi
  00041	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
$LN3@Reallocate:

; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;

  00046	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00049	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0004c	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  0004f	8d 04 b3	 lea	 eax, DWORD PTR [ebx+esi*4]
  00052	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  00055	89 1f		 mov	 DWORD PTR [edi], ebx
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx

; 1642 : 		}

  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z PROC ; std::vector<int,std::allocator<int> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ENDP ; std::vector<int,std::allocator<int> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z PROC ; std::vector<int,std::allocator<int> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	2b 31		 sub	 esi, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00009	b9 ff ff ff 3f	 mov	 ecx, 1073741823		; 3fffffffH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0000e	c1 fe 02	 sar	 esi, 2

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00011	8b c6		 mov	 eax, esi
  00013	d1 e8		 shr	 eax, 1
  00015	57		 push	 edi
  00016	2b c8		 sub	 ecx, eax
  00018	33 ff		 xor	 edi, edi
  0001a	3b ce		 cmp	 ecx, esi
  0001c	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0001f	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00022	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00025	5f		 pop	 edi
  00026	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  0002a	8b c2		 mov	 eax, edx
  0002c	5e		 pop	 esi

; 1612 : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ENDP ; std::vector<int,std::allocator<int> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 31		 jae	 SHORT $LN2@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 2b		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0002a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 2a		 je	 SHORT $LN205@push_back
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00036	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00038	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN2@push_back:

; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  00042	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00045	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  00047	6a 01		 push	 1
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00050	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00053	85 c9		 test	 ecx, ecx
  00055	74 04		 je	 SHORT $LN205@push_back
  00057	8b 07		 mov	 eax, DWORD PTR [edi]
  00059	89 01		 mov	 DWORD PTR [ecx], eax
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  0005b	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z PROC	; std::vector<int,std::allocator<int> >::operator[], COMDAT
; _this$ = ecx

; 1228 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00008	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 1241 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ENDP	; std::vector<int,std::allocator<int> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1180 : 		}

  00008	c3		 ret	 0
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 02	 sar	 eax, 2

; 1048 : 		}

  00009	c3		 ret	 0
?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1043 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 02	 sar	 eax, 2
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002e	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0002f	c3		 ret	 0
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 139  : 	}
; 140  : 
; 141  : 		// TEMPLATE FUNCTION _Construct
; 142  : template<class _Ty1,
; 143  : 	class _Ty2> inline
; 144  : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 145  : 	{	// construct object at _Ptr with value _Val
; 146  : 	void *_Vptr = _Ptr;
; 147  : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 148  : 	}
; 149  : 
; 150  : template<class _Ty1> inline
; 151  : 	void _Construct(_Ty1 *_Ptr)
; 152  : 	{	// construct object at _Ptr with default value
; 153  : 	void *_Vptr = _Ptr;
; 154  : 
; 155  : 	::new (_Vptr) _Ty1();
; 156  : 	}
; 157  : 
; 158  : 		// TEMPLATE FUNCTION _Destroy
; 159  : template<class _Ty> inline
; 160  : 	void _Destroy(_Ty *_Ptr)
; 161  : 	{	// destroy object at _Ptr
; 162  : 	_Ptr->~_Ty();
; 163  : 	}
; 164  : 
; 165  : 		// TEMPLATE FUNCTION _Destroy_range
; 166  : template<class _Alloc> inline
; 167  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 168  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 169  : 		_Nonscalar_ptr_iterator_tag)
; 170  : 	{	// destroy [_First, _Last), arbitrary type
; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000e	77 31		 ja	 SHORT $LN16@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN7@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN18@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN19@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN20@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN21@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN7@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 909  : 		_Mybase::deallocate(_Ptr, _Count);
; 910  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN16@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  0005a	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@H@std@@QAEPAHI@Z ; std::allocator<int>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@ABV?$allocator@H@1@@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@ABV?$allocator@H@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z PROC ; std::allocator_traits<std::allocator<int> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z ENDP ; std::allocator_traits<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@H@std@@QAEPAHI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@H@std@@QAEPAHI@Z PROC		; std::allocator<int>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00013	77 3c		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	c1 e0 02	 shl	 eax, 2

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@H@std@@QAEPAHI@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000e	77 31		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 639  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005a	cc		 int	 3
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@H@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@H@std@@QAE@ABV01@@Z PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@H@std@@QAE@ABV01@@Z ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$insert@U?$pair@HU_MONSTER_ITEM_DROP@@@std@@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@HU_MONSTER_ITEM_DROP@@@std@@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::insert<std::pair<int,_MONSTER_ITEM_DROP> >, COMDAT
; _this$ = ecx

; 1092 : 		{	// try to insert node with value _Val, favoring right side

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  00004	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00007	8b f9		 mov	 edi, ecx
  00009	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HU_MONSTER_ITEM_DROP@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buynode<std::pair<int,_MONSTER_ITEM_DROP> >

; 1094 : 		return (_Insert_nohint(false,

  0000e	50		 push	 eax

; 602  : 		return ((reference)_Pnode->_Myval);

  0000f	83 c0 10	 add	 eax, 16			; 00000010H

; 1094 : 		return (_Insert_nohint(false,

  00012	8b cf		 mov	 ecx, edi
  00014	50		 push	 eax
  00015	6a 00		 push	 0
  00017	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??$_Insert_nohint@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Insert_nohint<std::pair<int const ,_MONSTER_ITEM_DROP> &,std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00022	5f		 pop	 edi

; 1095 : 			this->_Myval(_Newnode), _Newnode));
; 1096 : 		}

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??$insert@U?$pair@HU_MONSTER_ITEM_DROP@@@std@@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::insert<std::pair<int,_MONSTER_ITEM_DROP> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0HU_MONSTER_ITEM_DROP@@X@?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@QAE@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0HU_MONSTER_ITEM_DROP@@X@?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@QAE@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z PROC ; std::pair<int const ,_MONSTER_ITEM_DROP>::pair<int const ,_MONSTER_ITEM_DROP><int,_MONSTER_ITEM_DROP,void>, COMDAT
; _this$ = ecx

; 158  : 		{	// construct from moved compatible pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  00003	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  0000a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00010	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00013	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 159  : 		}

  00016	8b c1		 mov	 eax, ecx
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??$?0HU_MONSTER_ITEM_DROP@@X@?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@QAE@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z ENDP ; std::pair<int const ,_MONSTER_ITEM_DROP>::pair<int const ,_MONSTER_ITEM_DROP><int,_MONSTER_ITEM_DROP,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AAHAAU_MONSTER_ITEM_DROP@@X@?$pair@HU_MONSTER_ITEM_DROP@@@std@@QAE@AAHAAU_MONSTER_ITEM_DROP@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAHAAU_MONSTER_ITEM_DROP@@X@?$pair@HU_MONSTER_ITEM_DROP@@@std@@QAE@AAHAAU_MONSTER_ITEM_DROP@@@Z PROC ; std::pair<int,_MONSTER_ITEM_DROP>::pair<int,_MONSTER_ITEM_DROP><int &,_MONSTER_ITEM_DROP &,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]

; 144  : 				second(_STD forward<_Other2>(_Val2))

  00006	8b 55 0c	 mov	 edx, DWORD PTR __Val2$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	89 01		 mov	 DWORD PTR [ecx], eax
  0000d	8b 02		 mov	 eax, DWORD PTR [edx]
  0000f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00012	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00015	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 146  : 		}

  00018	8b c1		 mov	 eax, ecx
  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
??$?0AAHAAU_MONSTER_ITEM_DROP@@X@?$pair@HU_MONSTER_ITEM_DROP@@@std@@QAE@AAHAAU_MONSTER_ITEM_DROP@@@Z ENDP ; std::pair<int,_MONSTER_ITEM_DROP>::pair<int,_MONSTER_ITEM_DROP><int &,_MONSTER_ITEM_DROP &,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::operator--, COMDAT
; _this$ = ecx

; 422  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 308  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>::operator--

; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 425  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::operator->, COMDAT
; _this$ = ecx

; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}

  00005	c3		 ret	 0
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::operator*, COMDAT
; _this$ = ecx

; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}

  00005	c3		 ret	 0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >, COMDAT
; _this$ = ecx

; 382  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 383  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >, COMDAT
; _this$ = ecx

; 38   : 		: _Ptr(0)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 377  : 		{	// construct with null node
; 378  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::operator!=, COMDAT
; _this$ = ecx

; 338  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 339  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 339  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 340  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::operator==, COMDAT
; _this$ = ecx

; 322  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 335  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::operator--, COMDAT
; _this$ = ecx

; 283  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>::operator--

; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 312  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::operator++, COMDAT
; _this$ = ecx

; 276  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 277  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 16		 mov	 DWORD PTR [esi], edx

; 271  : 		++(*(_Mybase *)this);

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>::operator++

; 278  : 		++*this;
; 279  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 280  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::operator++, COMDAT
; _this$ = ecx

; 256  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>::operator++

; 272  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 273  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::operator*, COMDAT
; _this$ = ecx

; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}

  00005	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >, COMDAT
; _this$ = ecx

; 214  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 215  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >, COMDAT
; _this$ = ecx

; 38   : 		: _Ptr(0)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 210  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 123  : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 124  : 		}

  00002	c3		 ret	 0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 84   : 		{	// predecrement

  00000	8b d1		 mov	 edx, ecx

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]

; 85   : 		if (_Mytree::_Isnil(_Ptr))

  00004	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00008	74 08		 je	 SHORT $LN4@operator

; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	89 02		 mov	 DWORD PTR [edx], eax

; 100  : 			}
; 101  : 		return (*this);

  0000f	8b c2		 mov	 eax, edx

; 102  : 		}

  00011	c3		 ret	 0
$LN4@operator:

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 08		 mov	 ecx, DWORD PTR [eax]

; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  00014	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00018	75 19		 jne	 SHORT $LN40@operator

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0001a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  0001d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00021	75 36		 jne	 SHORT $LN23@operator
$LL22@operator:

; 608  : 			_Pnode = _Right(_Pnode);

  00023	8b c8		 mov	 ecx, eax

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00025	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00028	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002c	74 f5		 je	 SHORT $LL22@operator

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

  0002e	89 0a		 mov	 DWORD PTR [edx], ecx

; 100  : 			}
; 101  : 		return (*this);

  00030	8b c2		 mov	 eax, edx

; 102  : 		}

  00032	c3		 ret	 0
$LN40@operator:

; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0003a	75 15		 jne	 SHORT $LN3@operator
  0003c	0f 1f 40 00	 npad	 4
$LL2@operator:
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00044	75 0b		 jne	 SHORT $LN3@operator

; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  00046	89 0a		 mov	 DWORD PTR [edx], ecx
  00048	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004b	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0004f	74 ef		 je	 SHORT $LL2@operator
$LN3@operator:

; 96   : 			if (_Mytree::_Isnil(_Ptr))

  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00057	75 02		 jne	 SHORT $LN47@operator
$LN23@operator:

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

  00059	89 0a		 mov	 DWORD PTR [edx], ecx
$LN47@operator:

; 100  : 			}
; 101  : 		return (*this);

  0005b	8b c2		 mov	 eax, edx

; 102  : 		}

  0005d	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 59   : 		{	// preincrement

  00000	8b d1		 mov	 edx, ecx

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]

; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00004	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00008	75 42		 jne	 SHORT $LN41@operator

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0000d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00011	75 1c		 jne	 SHORT $LN34@operator

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00013	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	75 0f		 jne	 SHORT $LN19@operator
  0001b	0f 1f 44 00 00	 npad	 5
$LL18@operator:

; 615  : 			_Pnode = _Left(_Pnode);

  00020	8b c8		 mov	 ecx, eax

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00022	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 f6		 je	 SHORT $LL18@operator
$LN19@operator:

; 63   : 			_Ptr = _Mytree::_Min(

  0002a	89 0a		 mov	 DWORD PTR [edx], ecx

; 72   : 			}
; 73   : 		return (*this);

  0002c	8b c2		 mov	 eax, edx

; 74   : 		}

  0002e	c3		 ret	 0
$LN34@operator:

; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0002f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00032	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00036	75 12		 jne	 SHORT $LN3@operator
$LL2@operator:
  00038	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0003a	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0003d	75 0b		 jne	 SHORT $LN3@operator

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0003f	89 02		 mov	 DWORD PTR [edx], eax
  00041	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00044	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00048	74 ee		 je	 SHORT $LL2@operator
$LN3@operator:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  0004a	89 02		 mov	 DWORD PTR [edx], eax
$LN41@operator:

; 72   : 			}
; 73   : 		return (*this);

  0004c	8b c2		 mov	 eax, edx

; 74   : 		}

  0004e	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 38   : 		: _Ptr(0)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 40   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IBEXPAUtagPOINT@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IBEXPAUtagPOINT@@0@Z PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IBEXPAUtagPOINT@@0@Z ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IBEXXZ PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IBEXXZ ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXXZ PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 03	 sar	 eax, 3
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@I@Z ; std::_Wrap_alloc<std::allocator<tagPOINT> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0002e	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0002f	c3		 ret	 0
?_Tidy@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXXZ ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1646 : 		if (_Unused_capacity() < _Count)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	57		 push	 edi

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  0000a	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0000d	8b c7		 mov	 eax, edi
  0000f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00012	2b c2		 sub	 eax, edx
  00014	c1 f8 03	 sar	 eax, 3

; 1646 : 		if (_Unused_capacity() < _Count)

  00017	3b c1		 cmp	 eax, ecx
  00019	73 3b		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0001b	2b 16		 sub	 edx, DWORD PTR [esi]
  0001d	53		 push	 ebx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  0001e	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00023	c1 fa 03	 sar	 edx, 3

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00026	8b c3		 mov	 eax, ebx
  00028	2b c2		 sub	 eax, edx
  0002a	3b c1		 cmp	 eax, ecx
  0002c	72 2e		 jb	 SHORT $LN134@Reserve

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0002e	2b 3e		 sub	 edi, DWORD PTR [esi]

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00030	03 d1		 add	 edx, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00032	c1 ff 03	 sar	 edi, 3

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00035	8b c7		 mov	 eax, edi
  00037	d1 e8		 shr	 eax, 1
  00039	2b d8		 sub	 ebx, eax
  0003b	3b df		 cmp	 ebx, edi
  0003d	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00040	b8 00 00 00 00	 mov	 eax, 0
  00045	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00048	3b ca		 cmp	 ecx, edx
  0004a	0f 42 ca	 cmovb	 ecx, edx

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004d	51		 push	 ecx
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Reallocate
  00055	5b		 pop	 ebx
$LN2@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1651 : 			}
; 1652 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00061	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  00066	cc		 int	 3
?_Reserve@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00030	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@UtagPOINT@@@std@@QAEPAUtagPOINT@@I@Z ; std::allocator<tagPOINT>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00038	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0003b	8b f8		 mov	 edi, eax

; 1622 : 
; 1623 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00044	6a 00		 push	 0
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	ff 76 04	 push	 DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0004b	89 7d ec	 mov	 DWORD PTR __Ptr$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0004e	ff 36		 push	 DWORD PTR [esi]
  00050	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUtagPOINT@@PAU1@V?$allocator@UtagPOINT@@@std@@U1@@std@@YAPAUtagPOINT@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<tagPOINT *,tagPOINT *,std::allocator<tagPOINT>,tagPOINT>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00057	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0005a	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  0005d	2b d9		 sub	 ebx, ecx
  0005f	c1 fb 03	 sar	 ebx, 3

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00062	85 c9		 test	 ecx, ecx
  00064	74 11		 je	 SHORT $LN3@Reallocate

; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00066	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00069	2b c1		 sub	 eax, ecx
  0006b	c1 f8 03	 sar	 eax, 3
  0006e	50		 push	 eax
  0006f	51		 push	 ecx
  00070	8b ce		 mov	 ecx, esi
  00072	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@I@Z ; std::_Wrap_alloc<std::allocator<tagPOINT> >::deallocate
$LN3@Reallocate:

; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;

  00077	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0007a	8d 04 c7	 lea	 eax, DWORD PTR [edi+eax*8]
  0007d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  00080	8d 04 df	 lea	 eax, DWORD PTR [edi+ebx*8]
  00083	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  00086	89 3e		 mov	 DWORD PTR [esi], edi

; 1642 : 		}

  00088	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00092	59		 pop	 ecx
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z$0:

; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);

  0009c	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0009f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  000a5	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@I@Z ; std::_Wrap_alloc<std::allocator<tagPOINT> >::deallocate

; 1627 : 		_RERAISE;

  000aa	6a 00		 push	 0
  000ac	6a 00		 push	 0
  000ae	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN175@Reallocate:
$LN174@Reallocate:
  000b3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IBE_NPBUtagPOINT@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IBE_NPBUtagPOINT@@@Z PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IBE_NPBUtagPOINT@@@Z ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IBEII@Z PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	2b 31		 sub	 esi, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00009	b9 ff ff ff 1f	 mov	 ecx, 536870911		; 1fffffffH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0000e	c1 fe 03	 sar	 esi, 3

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00011	8b c6		 mov	 eax, esi
  00013	d1 e8		 shr	 eax, 1
  00015	57		 push	 edi
  00016	2b c8		 sub	 ecx, eax
  00018	33 ff		 xor	 edi, edi
  0001a	3b ce		 cmp	 ecx, esi
  0001c	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0001f	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00022	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00025	5f		 pop	 edi
  00026	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  0002a	8b c2		 mov	 eax, edx
  0002c	5e		 pop	 esi

; 1612 : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?_Grow_to@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IBEII@Z ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXPAUtagPOINT@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXPAUtagPOINT@@0@Z PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXPAUtagPOINT@@0@Z ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?pop_back@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAEXXZ PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::pop_back, COMDAT
; _this$ = ecx

; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();

  00000	83 41 04 f8	 add	 DWORD PTR [ecx+4], -8	; fffffff8H

; 1314 : 		}

  00004	c3		 ret	 0
?pop_back@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAEXXZ ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::pop_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAEXABUtagPOINT@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAEXABUtagPOINT@@@Z PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 38		 jae	 SHORT $LN2@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 32		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 03	 sar	 edi, 3

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0002a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002d	85 d2		 test	 edx, edx
  0002f	74 37		 je	 SHORT $LN205@push_back
  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8b 04 f9	 mov	 eax, DWORD PTR [ecx+edi*8]
  00036	89 02		 mov	 DWORD PTR [edx], eax
  00038	8b 44 f9 04	 mov	 eax, DWORD PTR [ecx+edi*8+4]
  0003c	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  0003f	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
$LN2@push_back:

; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  00049	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004c	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  0004e	6a 01		 push	 1
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00057	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005a	85 c9		 test	 ecx, ecx
  0005c	74 0a		 je	 SHORT $LN205@push_back
  0005e	8b 07		 mov	 eax, DWORD PTR [edi]
  00060	89 01		 mov	 DWORD PTR [ecx], eax
  00062	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00065	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00068	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
?push_back@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAEXABUtagPOINT@@@Z ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?back@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAEAAUtagPOINT@@XZ
_TEXT	SEGMENT
?back@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAEAAUtagPOINT@@XZ PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::back, COMDAT
; _this$ = ecx

; 46   : 		: _Ptr(_Parg)

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;

  00003	83 c0 f8	 add	 eax, -8			; fffffff8H

; 1265 : 		return (*(end() - 1));
; 1266 : 		}

  00006	c3		 ret	 0
?back@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAEAAUtagPOINT@@XZ ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?empty@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QBE_NXZ PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::empty, COMDAT
; _this$ = ecx

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	33 c0		 xor	 eax, eax
  00004	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00007	0f 94 c0	 sete	 al

; 1190 : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QBE_NXZ ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QBEIXZ PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QBEIXZ PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 1180 : 		}

  00008	c3		 ret	 0
?size@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@2@XZ PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::end, COMDAT
; _this$ = ecx

; 1066 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@@2@XZ ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QBEIXZ PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 03	 sar	 eax, 3

; 1048 : 		}

  00009	c3		 ret	 0
?_Unused_capacity@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QBEIXZ PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 1043 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE@XZ PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::~vector<tagPOINT,std::allocator<tagPOINT> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 03	 sar	 eax, 3
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@I@Z ; std::_Wrap_alloc<std::allocator<tagPOINT> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002e	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0002f	c3		 ret	 0
??1?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::~vector<tagPOINT,std::allocator<tagPOINT> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE@XZ PROC ; std::vector<tagPOINT,std::allocator<tagPOINT> >::vector<tagPOINT,std::allocator<tagPOINT> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagPOINT,std::allocator<tagPOINT> >::vector<tagPOINT,std::allocator<tagPOINT> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<tagPOINT> >,std::_Vector_val<std::_Simple_types<tagPOINT> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<tagPOINT> >,std::_Vector_val<std::_Simple_types<tagPOINT> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<tagPOINT> >,std::_Vector_val<std::_Simple_types<tagPOINT> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<tagPOINT> >,std::_Vector_val<std::_Simple_types<tagPOINT> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<tagPOINT> >,std::_Vector_val<std::_Simple_types<tagPOINT> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<tagPOINT> >,std::_Vector_val<std::_Simple_types<tagPOINT> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<tagPOINT> >,std::_Vector_val<std::_Simple_types<tagPOINT> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<tagPOINT> >,std::_Vector_val<std::_Simple_types<tagPOINT> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<tagPOINT> >::_Vector_val<std::_Simple_types<tagPOINT> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<tagPOINT> >::_Vector_val<std::_Simple_types<tagPOINT> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QBEABQAUtagPOINT@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QBEABQAUtagPOINT@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QBEABQAUtagPOINT@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAEAAPAUtagPOINT@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAEAAPAUtagPOINT@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAEAAPAUtagPOINT@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QBEABQAUtagPOINT@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QBEABQAUtagPOINT@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QBEABQAUtagPOINT@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAEAAPAUtagPOINT@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAEAAPAUtagPOINT@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAEAAPAUtagPOINT@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QBEABQAUtagPOINT@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QBEABQAUtagPOINT@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QBEABQAUtagPOINT@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAEAAPAUtagPOINT@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAEAAPAUtagPOINT@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAEAAPAUtagPOINT@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UtagPOINT@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAE@ABV?$allocator@UtagPOINT@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAE@ABV?$allocator@UtagPOINT@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@@std@@QAE@ABV?$allocator@UtagPOINT@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >::_Vector_alloc<std::_Vec_base_types<tagPOINT,std::allocator<tagPOINT> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<tagPOINT> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<tagPOINT> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@I@Z PROC ; std::_Wrap_alloc<std::allocator<tagPOINT> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 139  : 	}
; 140  : 
; 141  : 		// TEMPLATE FUNCTION _Construct
; 142  : template<class _Ty1,
; 143  : 	class _Ty2> inline
; 144  : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 145  : 	{	// construct object at _Ptr with value _Val
; 146  : 	void *_Vptr = _Ptr;
; 147  : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 148  : 	}
; 149  : 
; 150  : template<class _Ty1> inline
; 151  : 	void _Construct(_Ty1 *_Ptr)
; 152  : 	{	// construct object at _Ptr with default value
; 153  : 	void *_Vptr = _Ptr;
; 154  : 
; 155  : 	::new (_Vptr) _Ty1();
; 156  : 	}
; 157  : 
; 158  : 		// TEMPLATE FUNCTION _Destroy
; 159  : template<class _Ty> inline
; 160  : 	void _Destroy(_Ty *_Ptr)
; 161  : 	{	// destroy object at _Ptr
; 162  : 	_Ptr->~_Ty();
; 163  : 	}
; 164  : 
; 165  : 		// TEMPLATE FUNCTION _Destroy_range
; 166  : template<class _Alloc> inline
; 167  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 168  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 169  : 		_Nonscalar_ptr_iterator_tag)
; 170  : 	{	// destroy [_First, _Last), arbitrary type
; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  0000e	77 31		 ja	 SHORT $LN16@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 03	 shl	 eax, 3

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN7@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN18@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN19@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN20@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN21@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN7@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 909  : 		_Mybase::deallocate(_Ptr, _Count);
; 910  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN16@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  0005a	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEXPAUtagPOINT@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<tagPOINT> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEPAUtagPOINT@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEPAUtagPOINT@@I@Z PROC ; std::_Wrap_alloc<std::allocator<tagPOINT> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@UtagPOINT@@@std@@QAEPAUtagPOINT@@I@Z ; std::allocator<tagPOINT>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAEPAUtagPOINT@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<tagPOINT> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAE@ABV?$allocator@UtagPOINT@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAE@ABV?$allocator@UtagPOINT@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<tagPOINT> >::_Wrap_alloc<std::allocator<tagPOINT> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@UtagPOINT@@@std@@@std@@QAE@ABV?$allocator@UtagPOINT@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<tagPOINT> >::_Wrap_alloc<std::allocator<tagPOINT> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@UtagPOINT@@@std@@@std@@SAIABV?$allocator@UtagPOINT@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@UtagPOINT@@@std@@@std@@SAIABV?$allocator@UtagPOINT@@@2@@Z PROC ; std::allocator_traits<std::allocator<tagPOINT> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@UtagPOINT@@@std@@@std@@SAIABV?$allocator@UtagPOINT@@@2@@Z ENDP ; std::allocator_traits<std::allocator<tagPOINT> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@UtagPOINT@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UtagPOINT@@@std@@QBEIXZ PROC	; std::allocator<tagPOINT>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UtagPOINT@@@std@@QBEIXZ ENDP	; std::allocator<tagPOINT>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@UtagPOINT@@@std@@QAEPAUtagPOINT@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UtagPOINT@@@std@@QAEPAUtagPOINT@@I@Z PROC ; std::allocator<tagPOINT>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00013	77 3c		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	c1 e0 03	 shl	 eax, 3

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@UtagPOINT@@@std@@QAEPAUtagPOINT@@I@Z ENDP ; std::allocator<tagPOINT>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UtagPOINT@@@std@@QAEXPAUtagPOINT@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UtagPOINT@@@std@@QAEXPAUtagPOINT@@I@Z PROC ; std::allocator<tagPOINT>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  0000e	77 31		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 03	 shl	 eax, 3

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 639  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005a	cc		 int	 3
?deallocate@?$allocator@UtagPOINT@@@std@@QAEXPAUtagPOINT@@I@Z ENDP ; std::allocator<tagPOINT>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UtagPOINT@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UtagPOINT@@@std@@QAE@ABV01@@Z PROC	; std::allocator<tagPOINT>::allocator<tagPOINT>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@UtagPOINT@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<tagPOINT>::allocator<tagPOINT>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UtagPOINT@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UtagPOINT@@@std@@QAE@XZ PROC		; std::allocator<tagPOINT>::allocator<tagPOINT>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@UtagPOINT@@@std@@QAE@XZ ENDP		; std::allocator<tagPOINT>::allocator<tagPOINT>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 340  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 341  : 		_Myiter _Tmp = *this;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 112  : 		++this->_Ptr;

  0000a	83 c2 08	 add	 edx, 8
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 112  : 		++this->_Ptr;

  00000	83 01 08	 add	 DWORD PTR [ecx], 8

; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 337  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEAAUCHAOSCASTLE_START_TIME@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEAAUCHAOSCASTLE_START_TIME@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::operator*, COMDAT
; _this$ = ecx

; 325  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEAAUCHAOSCASTLE_START_TIME@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAE@PAUCHAOSCASTLE_START_TIME@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAE@PAUCHAOSCASTLE_START_TIME@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >, COMDAT
; _this$ = ecx

; 307  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 308  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAE@PAUCHAOSCASTLE_START_TIME@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >, COMDAT
; _this$ = ecx

; 41   : 		: _Ptr()

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 302  : 		{	// construct with null vector pointer
; 303  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::_Compat, COMDAT
; _this$ = ecx

; 256  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::operator!=, COMDAT
; _this$ = ecx

; 210  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 212  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 207  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  00000	83 01 08	 add	 DWORD PTR [ecx], 8

; 113  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 114  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEABUCHAOSCASTLE_START_TIME@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEABUCHAOSCASTLE_START_TIME@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 87   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEABUCHAOSCASTLE_START_TIME@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAE@PAUCHAOSCASTLE_START_TIME@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAE@PAUCHAOSCASTLE_START_TIME@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAE@PAUCHAOSCASTLE_START_TIME@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >, COMDAT
; _this$ = ecx

; 41   : 		: _Ptr()

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 43   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_ChaosCastle@@YAXXZ
text$yd	SEGMENT
??__Fg_ChaosCastle@@YAXXZ PROC				; `dynamic atexit destructor for 'g_ChaosCastle'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosCastle@@3VCChaosCastle@@A ; g_ChaosCastle
  00005	e9 00 00 00 00	 jmp	 ??1CChaosCastle@@UAE@XZ	; CChaosCastle::~CChaosCastle
??__Fg_ChaosCastle@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_ChaosCastle''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ??__Eg_ChaosCastle@@YAXXZ
text$di	SEGMENT
??__Eg_ChaosCastle@@YAXXZ PROC				; `dynamic initializer for 'g_ChaosCastle'', COMDAT

; 28   : CChaosCastle g_ChaosCastle;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosCastle@@3VCChaosCastle@@A ; g_ChaosCastle
  00005	e8 00 00 00 00	 call	 ??0CChaosCastle@@QAE@XZ	; CChaosCastle::CChaosCastle
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_ChaosCastle@@YAXXZ ; `dynamic atexit destructor for 'g_ChaosCastle''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_ChaosCastle@@YAXXZ ENDP				; `dynamic initializer for 'g_ChaosCastle''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCChaosCastle@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCChaosCastle@@UAEPAXI@Z PROC			; CChaosCastle::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CChaosCastle@@UAE@XZ	; CChaosCastle::~CChaosCastle
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 04 3b 00 00	 push	 15108			; 00003b04H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCChaosCastle@@UAEPAXI@Z ENDP			; CChaosCastle::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IBEXPAUCHAOSCASTLE_START_TIME@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IBEXPAUCHAOSCASTLE_START_TIME@@0@Z PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IBEXPAUCHAOSCASTLE_START_TIME@@0@Z ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IBEXXZ PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IBEXXZ ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXXZ PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 03	 sar	 eax, 3
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@I@Z ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0002e	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0002f	c3		 ret	 0
?_Tidy@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXXZ ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1646 : 		if (_Unused_capacity() < _Count)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	57		 push	 edi

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  0000a	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0000d	8b c7		 mov	 eax, edi
  0000f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00012	2b c2		 sub	 eax, edx
  00014	c1 f8 03	 sar	 eax, 3

; 1646 : 		if (_Unused_capacity() < _Count)

  00017	3b c1		 cmp	 eax, ecx
  00019	73 3b		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0001b	2b 16		 sub	 edx, DWORD PTR [esi]
  0001d	53		 push	 ebx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  0001e	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00023	c1 fa 03	 sar	 edx, 3

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00026	8b c3		 mov	 eax, ebx
  00028	2b c2		 sub	 eax, edx
  0002a	3b c1		 cmp	 eax, ecx
  0002c	72 2e		 jb	 SHORT $LN134@Reserve

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0002e	2b 3e		 sub	 edi, DWORD PTR [esi]

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00030	03 d1		 add	 edx, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00032	c1 ff 03	 sar	 edi, 3

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00035	8b c7		 mov	 eax, edi
  00037	d1 e8		 shr	 eax, 1
  00039	2b d8		 sub	 ebx, eax
  0003b	3b df		 cmp	 ebx, edi
  0003d	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00040	b8 00 00 00 00	 mov	 eax, 0
  00045	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00048	3b ca		 cmp	 ecx, edx
  0004a	0f 42 ca	 cmovb	 ecx, edx

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004d	51		 push	 ecx
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Reallocate
  00055	5b		 pop	 ebx
$LN2@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1651 : 			}
; 1652 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00061	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  00066	cc		 int	 3
?_Reserve@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00030	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEPAUCHAOSCASTLE_START_TIME@@I@Z ; std::allocator<CHAOSCASTLE_START_TIME>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00038	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0003b	8b f8		 mov	 edi, eax

; 1622 : 
; 1623 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00044	6a 00		 push	 0
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	ff 76 04	 push	 DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0004b	89 7d ec	 mov	 DWORD PTR __Ptr$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0004e	ff 36		 push	 DWORD PTR [esi]
  00050	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCHAOSCASTLE_START_TIME@@PAU1@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@U1@@std@@YAPAUCHAOSCASTLE_START_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CHAOSCASTLE_START_TIME *,CHAOSCASTLE_START_TIME *,std::allocator<CHAOSCASTLE_START_TIME>,CHAOSCASTLE_START_TIME>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00057	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0005a	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  0005d	2b d9		 sub	 ebx, ecx
  0005f	c1 fb 03	 sar	 ebx, 3

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00062	85 c9		 test	 ecx, ecx
  00064	74 11		 je	 SHORT $LN3@Reallocate

; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00066	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00069	2b c1		 sub	 eax, ecx
  0006b	c1 f8 03	 sar	 eax, 3
  0006e	50		 push	 eax
  0006f	51		 push	 ecx
  00070	8b ce		 mov	 ecx, esi
  00072	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@I@Z ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::deallocate
$LN3@Reallocate:

; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;

  00077	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0007a	8d 04 c7	 lea	 eax, DWORD PTR [edi+eax*8]
  0007d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  00080	8d 04 df	 lea	 eax, DWORD PTR [edi+ebx*8]
  00083	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  00086	89 3e		 mov	 DWORD PTR [esi], edi

; 1642 : 		}

  00088	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00092	59		 pop	 ecx
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z$0:

; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);

  0009c	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0009f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  000a5	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@I@Z ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::deallocate

; 1627 : 		_RERAISE;

  000aa	6a 00		 push	 0
  000ac	6a 00		 push	 0
  000ae	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN175@Reallocate:
$LN174@Reallocate:
  000b3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IBE_NPBUCHAOSCASTLE_START_TIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IBE_NPBUCHAOSCASTLE_START_TIME@@@Z PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IBE_NPBUCHAOSCASTLE_START_TIME@@@Z ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IBEII@Z PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	2b 31		 sub	 esi, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00009	b9 ff ff ff 1f	 mov	 ecx, 536870911		; 1fffffffH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0000e	c1 fe 03	 sar	 esi, 3

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00011	8b c6		 mov	 eax, esi
  00013	d1 e8		 shr	 eax, 1
  00015	57		 push	 edi
  00016	2b c8		 sub	 ecx, eax
  00018	33 ff		 xor	 edi, edi
  0001a	3b ce		 cmp	 ecx, esi
  0001c	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0001f	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00022	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00025	5f		 pop	 edi
  00026	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  0002a	8b c2		 mov	 eax, edx
  0002c	5e		 pop	 esi

; 1612 : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?_Grow_to@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IBEII@Z ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXPAUCHAOSCASTLE_START_TIME@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXPAUCHAOSCASTLE_START_TIME@@0@Z PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXPAUCHAOSCASTLE_START_TIME@@0@Z ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXXZ PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::clear, COMDAT
; _this$ = ecx

; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1543 : 		}

  00005	c3		 ret	 0
?clear@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXXZ ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?erase@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@0@Z PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::erase, COMDAT
; _this$ = ecx

; 1495 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __First_arg$[ebp]
  00006	53		 push	 ebx

; 1495 : 		{	// erase [_First, _Last)

  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi

; 1496 : 		if (_First_arg == begin() && _Last_arg == end())

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Last_arg$[ebp]

; 46   : 		: _Ptr(_Parg)

  0000d	8b 03		 mov	 eax, DWORD PTR [ebx]

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  0000f	3b d0		 cmp	 edx, eax

; 1496 : 		if (_First_arg == begin() && _Last_arg == end())

  00011	75 13		 jne	 SHORT $LN2@erase

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00013	3b 73 04	 cmp	 esi, DWORD PTR [ebx+4]

; 1496 : 		if (_First_arg == begin() && _Last_arg == end())

  00016	75 0e		 jne	 SHORT $LN2@erase

; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00018	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 46   : 		: _Ptr(_Parg)

  0001b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	89 10		 mov	 DWORD PTR [eax], edx

; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
$LN2@erase:

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00026	3b d6		 cmp	 edx, esi

; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)

  00028	74 25		 je	 SHORT $LN219@erase

; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),

  0002a	57		 push	 edi
  0002b	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2538 : 	return (_Move(_First, _Last,

  0002e	8b ca		 mov	 ecx, edx

; 2517 : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00030	3b f7		 cmp	 esi, edi
  00032	74 17		 je	 SHORT $LN177@erase
$LL178@erase:

; 2518 : 		*_Dest = _STD move(*_First);

  00034	8b 06		 mov	 eax, DWORD PTR [esi]
  00036	89 01		 mov	 DWORD PTR [ecx], eax
  00038	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003b	83 c6 08	 add	 esi, 8
  0003e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00041	83 c1 08	 add	 ecx, 8
  00044	3b f7		 cmp	 esi, edi
  00046	75 ec		 jne	 SHORT $LL178@erase

; 2517 : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00048	8b 55 0c	 mov	 edx, DWORD PTR __First_arg$[ebp]
$LN177@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1520 : 				this->_Mylast() = _Ptr;

  0004b	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
  0004e	5f		 pop	 edi
$LN219@erase:

; 46   : 		: _Ptr(_Parg)

  0004f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	89 10		 mov	 DWORD PTR [eax], edx

; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}

  00056	5d		 pop	 ebp
  00057	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@0@Z ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXABUCHAOSCASTLE_START_TIME@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXABUCHAOSCASTLE_START_TIME@@@Z PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 38		 jae	 SHORT $LN2@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 32		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 03	 sar	 edi, 3

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0002a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002d	85 d2		 test	 edx, edx
  0002f	74 37		 je	 SHORT $LN205@push_back
  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8b 04 f9	 mov	 eax, DWORD PTR [ecx+edi*8]
  00036	89 02		 mov	 DWORD PTR [edx], eax
  00038	8b 44 f9 04	 mov	 eax, DWORD PTR [ecx+edi*8+4]
  0003c	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  0003f	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
$LN2@push_back:

; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  00049	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004c	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  0004e	6a 01		 push	 1
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00057	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005a	85 c9		 test	 ecx, ecx
  0005c	74 0a		 je	 SHORT $LN205@push_back
  0005e	8b 07		 mov	 eax, DWORD PTR [edi]
  00060	89 01		 mov	 DWORD PTR [ecx], eax
  00062	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00065	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00068	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
?push_back@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXABUCHAOSCASTLE_START_TIME@@@Z ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?empty@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBE_NXZ PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::empty, COMDAT
; _this$ = ecx

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	33 c0		 xor	 eax, eax
  00004	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00007	0f 94 c0	 sete	 al

; 1190 : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBE_NXZ ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBEIXZ PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBEIXZ PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 1180 : 		}

  00008	c3		 ret	 0
?size@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@@Z PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Make_iter, COMDAT
; _this$ = ecx

; 1076 : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@@Z ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Make_iter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@XZ PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::end, COMDAT
; _this$ = ecx

; 1066 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@XZ ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@XZ PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::begin, COMDAT
; _this$ = ecx

; 1056 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@XZ ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBEIXZ PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 03	 sar	 eax, 3

; 1048 : 		}

  00009	c3		 ret	 0
?_Unused_capacity@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBEIXZ PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 1043 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE@XZ PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::~vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 03	 sar	 eax, 3
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@I@Z ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002e	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0002f	c3		 ret	 0
??1?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE@XZ ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::~vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE@XZ PROC ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE@XZ ENDP ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >,std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >,std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >,std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >,std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >,std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >,std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >,std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >,std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> >::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> >::_Vector_val<std::_Simple_types<CHAOSCASTLE_START_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEABQAUCHAOSCASTLE_START_TIME@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEABQAUCHAOSCASTLE_START_TIME@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEABQAUCHAOSCASTLE_START_TIME@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAPAUCHAOSCASTLE_START_TIME@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAPAUCHAOSCASTLE_START_TIME@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAPAUCHAOSCASTLE_START_TIME@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEABQAUCHAOSCASTLE_START_TIME@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEABQAUCHAOSCASTLE_START_TIME@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEABQAUCHAOSCASTLE_START_TIME@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAPAUCHAOSCASTLE_START_TIME@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAPAUCHAOSCASTLE_START_TIME@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAPAUCHAOSCASTLE_START_TIME@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEABQAUCHAOSCASTLE_START_TIME@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEABQAUCHAOSCASTLE_START_TIME@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEABQAUCHAOSCASTLE_START_TIME@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAPAUCHAOSCASTLE_START_TIME@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAPAUCHAOSCASTLE_START_TIME@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAPAUCHAOSCASTLE_START_TIME@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAE@ABV?$allocator@UCHAOSCASTLE_START_TIME@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAE@ABV?$allocator@UCHAOSCASTLE_START_TIME@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@@std@@QAE@ABV?$allocator@UCHAOSCASTLE_START_TIME@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >::_Vector_alloc<std::_Vec_base_types<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 139  : 	}
; 140  : 
; 141  : 		// TEMPLATE FUNCTION _Construct
; 142  : template<class _Ty1,
; 143  : 	class _Ty2> inline
; 144  : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 145  : 	{	// construct object at _Ptr with value _Val
; 146  : 	void *_Vptr = _Ptr;
; 147  : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 148  : 	}
; 149  : 
; 150  : template<class _Ty1> inline
; 151  : 	void _Construct(_Ty1 *_Ptr)
; 152  : 	{	// construct object at _Ptr with default value
; 153  : 	void *_Vptr = _Ptr;
; 154  : 
; 155  : 	::new (_Vptr) _Ty1();
; 156  : 	}
; 157  : 
; 158  : 		// TEMPLATE FUNCTION _Destroy
; 159  : template<class _Ty> inline
; 160  : 	void _Destroy(_Ty *_Ptr)
; 161  : 	{	// destroy object at _Ptr
; 162  : 	_Ptr->~_Ty();
; 163  : 	}
; 164  : 
; 165  : 		// TEMPLATE FUNCTION _Destroy_range
; 166  : template<class _Alloc> inline
; 167  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 168  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 169  : 		_Nonscalar_ptr_iterator_tag)
; 170  : 	{	// destroy [_First, _Last), arbitrary type
; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  0000e	77 31		 ja	 SHORT $LN16@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 03	 shl	 eax, 3

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN7@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN18@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN19@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN20@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN21@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN7@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 909  : 		_Mybase::deallocate(_Ptr, _Count);
; 910  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN16@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  0005a	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEPAUCHAOSCASTLE_START_TIME@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEPAUCHAOSCASTLE_START_TIME@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEPAUCHAOSCASTLE_START_TIME@@I@Z ; std::allocator<CHAOSCASTLE_START_TIME>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAEPAUCHAOSCASTLE_START_TIME@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE@ABV?$allocator@UCHAOSCASTLE_START_TIME@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE@ABV?$allocator@UCHAOSCASTLE_START_TIME@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE@ABV?$allocator@UCHAOSCASTLE_START_TIME@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >::_Wrap_alloc<std::allocator<CHAOSCASTLE_START_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@SAIABV?$allocator@UCHAOSCASTLE_START_TIME@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@SAIABV?$allocator@UCHAOSCASTLE_START_TIME@@@2@@Z PROC ; std::allocator_traits<std::allocator<CHAOSCASTLE_START_TIME> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@SAIABV?$allocator@UCHAOSCASTLE_START_TIME@@@2@@Z ENDP ; std::allocator_traits<std::allocator<CHAOSCASTLE_START_TIME> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QBEIXZ PROC ; std::allocator<CHAOSCASTLE_START_TIME>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QBEIXZ ENDP ; std::allocator<CHAOSCASTLE_START_TIME>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEPAUCHAOSCASTLE_START_TIME@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEPAUCHAOSCASTLE_START_TIME@@I@Z PROC ; std::allocator<CHAOSCASTLE_START_TIME>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00013	77 3c		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	c1 e0 03	 shl	 eax, 3

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEPAUCHAOSCASTLE_START_TIME@@I@Z ENDP ; std::allocator<CHAOSCASTLE_START_TIME>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@I@Z PROC ; std::allocator<CHAOSCASTLE_START_TIME>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  0000e	77 31		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 03	 shl	 eax, 3

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 639  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005a	cc		 int	 3
?deallocate@?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAEXPAUCHAOSCASTLE_START_TIME@@I@Z ENDP ; std::allocator<CHAOSCASTLE_START_TIME>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CHAOSCASTLE_START_TIME>::allocator<CHAOSCASTLE_START_TIME>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CHAOSCASTLE_START_TIME>::allocator<CHAOSCASTLE_START_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAE@XZ PROC ; std::allocator<CHAOSCASTLE_START_TIME>::allocator<CHAOSCASTLE_START_TIME>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@UCHAOSCASTLE_START_TIME@@@std@@QAE@XZ ENDP ; std::allocator<CHAOSCASTLE_START_TIME>::allocator<CHAOSCASTLE_START_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SetState_PlayEnd@CChaosCastle@@IAEXH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
?SetState_PlayEnd@CChaosCastle@@IAEXH@Z PROC		; CChaosCastle::SetState_PlayEnd, COMDAT
; _this$ = ecx

; 1049 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1050 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _iChaosCastleIndex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	78 44		 js	 SHORT $LN1@SetState_P
  0000e	33 c0		 xor	 eax, eax
  00010	83 fe 06	 cmp	 esi, 6
  00013	0f 9e c0	 setle	 al
  00016	85 c0		 test	 eax, eax
  00018	74 38		 je	 SHORT $LN1@SetState_P

; 1051 : 	{
; 1052 : 		return;
; 1053 : 	}
; 1054 : 
; 1055 : 	this->SendNoticeState(iChaosCastleIndex, 7);

  0001a	6a 07		 push	 7
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ?SendNoticeState@CChaosCastle@@QAEXHH@Z ; CChaosCastle::SendNoticeState

; 1056 : 	this->ClearMonster(iChaosCastleIndex);

  00022	56		 push	 esi
  00023	8b cf		 mov	 ecx, edi
  00025	e8 00 00 00 00	 call	 ?ClearMonster@CChaosCastle@@QAEXH@Z ; CChaosCastle::ClearMonster

; 1057 : 	this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_CAN_ENTER = false;

  0002a	69 ce 68 08 00
	00		 imul	 ecx, esi, 2152
  00030	c6 44 39 48 00	 mov	 BYTE PTR [ecx+edi+72], 0

; 1058 : 	this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC = this->m_iCC_TIME_MIN_REST * 60 * 1000;

  00035	69 47 10 60 ea
	00 00		 imul	 eax, DWORD PTR [edi+16], 60000
  0003c	89 44 39 3c	 mov	 DWORD PTR [ecx+edi+60], eax

; 1059 : 
; 1060 : 	LogAddTD("[Chaos Castle] (%d) SetState PLAYEND", iChaosCastleIndex+1);

  00040	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00043	50		 push	 eax
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@HDBNCAHD@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5SetState?5PLA@
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0004f	83 c4 08	 add	 esp, 8
$LN1@SetState_P:
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi

; 1061 : 
; 1062 : 
; 1063 : }

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?SetState_PlayEnd@CChaosCastle@@IAEXH@Z ENDP		; CChaosCastle::SetState_PlayEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SetState_Playing@CChaosCastle@@IAEXH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
?SetState_Playing@CChaosCastle@@IAEXH@Z PROC		; CChaosCastle::SetState_Playing, COMDAT
; _this$ = ecx

; 1018 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1019 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _iChaosCastleIndex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	78 72		 js	 SHORT $LN4@SetState_P
  0000e	33 c0		 xor	 eax, eax
  00010	83 fe 06	 cmp	 esi, 6
  00013	0f 9e c0	 setle	 al
  00016	85 c0		 test	 eax, eax
  00018	74 66		 je	 SHORT $LN4@SetState_P

; 1020 : 	{
; 1021 : 		return;
; 1022 : 	}
; 1023 : 
; 1024 : 	this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_CAN_ENTER = false;

  0001a	69 ce 68 08 00
	00		 imul	 ecx, esi, 2152

; 1025 : 	this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC = this->m_iCC_TIME_MIN_PLAY * 60 * 1000;
; 1026 : 	this->SendCastleZoneSafetyInfo(iChaosCastleIndex, true);

  00020	6a 01		 push	 1
  00022	56		 push	 esi
  00023	c6 44 39 48 00	 mov	 BYTE PTR [ecx+edi+72], 0
  00028	69 47 0c 60 ea
	00 00		 imul	 eax, DWORD PTR [edi+12], 60000
  0002f	89 44 39 3c	 mov	 DWORD PTR [ecx+edi+60], eax
  00033	8b cf		 mov	 ecx, edi
  00035	e8 00 00 00 00	 call	 ?SendCastleZoneSafetyInfo@CChaosCastle@@QAEXH_N@Z ; CChaosCastle::SendCastleZoneSafetyInfo

; 1027 : 
; 1028 : 	if ( this->CheckCanStartPlay(iChaosCastleIndex) == false )

  0003a	56		 push	 esi
  0003b	8b cf		 mov	 ecx, edi
  0003d	e8 00 00 00 00	 call	 ?CheckCanStartPlay@CChaosCastle@@QAE_NH@Z ; CChaosCastle::CheckCanStartPlay
  00042	84 c0		 test	 al, al
  00044	75 28		 jne	 SHORT $LN3@SetState_P

; 1029 : 	{
; 1030 : 		this->PlayFailedRollBack(iChaosCastleIndex);

  00046	56		 push	 esi
  00047	8b cf		 mov	 ecx, edi
  00049	e8 00 00 00 00	 call	 ?PlayFailedRollBack@CChaosCastle@@QAEXH@Z ; CChaosCastle::PlayFailedRollBack

; 1031 : 		LogAddTD("[Chaos Castle] (%d) Failed to Start Chaos Castle : Lack of User", iChaosCastleIndex +1 );

  0004e	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00051	50		 push	 eax
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@EGGFCMCP@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Failed?5to?5St@
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0005d	83 c4 08	 add	 esp, 8

; 1032 : 		this->SetState_Closed(iChaosCastleIndex);

  00060	8b cf		 mov	 ecx, edi
  00062	56		 push	 esi
  00063	e8 00 00 00 00	 call	 ?SetState_Closed@CChaosCastle@@IAEXH@Z ; CChaosCastle::SetState_Closed
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi

; 1041 : 	}
; 1042 : }

  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
$LN3@SetState_P:

; 1033 : 	}
; 1034 : 	else
; 1035 : 	{
; 1036 : #if (CHAOS_CASTLE_ZEN_REWARD==1)
; 1037 : 		this->RewardZettoMoney(iChaosCastleIndex);	// #warning In older version it gives reward to the last user entering
; 1038 : #endif
; 1039 : 
; 1040 : 		LogAddTD("[Chaos Castle] (%d) SetState PLAYING", iChaosCastleIndex + 1 );

  0006e	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BCOGMMAI@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5SetState?5PLA@
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0007d	83 c4 08	 add	 esp, 8
$LN4@SetState_P:
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi

; 1041 : 	}
; 1042 : }

  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
?SetState_Playing@CChaosCastle@@IAEXH@Z ENDP		; CChaosCastle::SetState_Playing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SetState_Closed@CChaosCastle@@IAEXH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
tv209 = 8						; size = 4
_iChaosCastleIndex$ = 8					; size = 4
?SetState_Closed@CChaosCastle@@IAEXH@Z PROC		; CChaosCastle::SetState_Closed, COMDAT
; _this$ = ecx

; 985  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 986  : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _iChaosCastleIndex$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	89 75 fc	 mov	 DWORD PTR _this$1$[ebp], esi
  0000e	85 db		 test	 ebx, ebx
  00010	0f 88 ae 00 00
	00		 js	 $LN1@SetState_C
  00016	33 c0		 xor	 eax, eax
  00018	83 fb 06	 cmp	 ebx, 6
  0001b	0f 9e c0	 setle	 al
  0001e	85 c0		 test	 eax, eax
  00020	0f 84 9e 00 00
	00		 je	 $LN1@SetState_C

; 987  : 	{
; 988  : 		return;
; 989  : 	}
; 990  : 
; 991  : 	this->SendNoticeState(iChaosCastleIndex, 7);

  00026	57		 push	 edi
  00027	6a 07		 push	 7
  00029	53		 push	 ebx
  0002a	e8 00 00 00 00	 call	 ?SendNoticeState@CChaosCastle@@QAEXHH@Z ; CChaosCastle::SendNoticeState

; 992  : 	this->ClearChaosCastleData(iChaosCastleIndex);

  0002f	53		 push	 ebx
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?ClearChaosCastleData@CChaosCastle@@IAEXH@Z ; CChaosCastle::ClearChaosCastleData

; 993  : 	this->ClearMonster(iChaosCastleIndex);

  00037	53		 push	 ebx
  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ?ClearMonster@CChaosCastle@@QAEXH@Z ; CChaosCastle::ClearMonster

; 996  : 	{
; 997  : 		if ( gObj[n].MapNumber == GetMap(iChaosCastleIndex) )

  0003f	53		 push	 ebx
  00040	8b ce		 mov	 ecx, esi
  00042	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  00047	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap
  0004c	89 45 08	 mov	 DWORD PTR tv209[ebp], eax
  0004f	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  00054	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL4@SetState_C:
  00060	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00066	0f b6 8c 32 23
	01 00 00	 movzx	 ecx, BYTE PTR [edx+esi+291]
  0006e	3b c8		 cmp	 ecx, eax
  00070	75 15		 jne	 SHORT $LN2@SetState_C

; 998  : 		{
; 999  : 			if ( gObj[n].Connected > PLAYER_LOGGED )

  00072	83 7c 32 04 02	 cmp	 DWORD PTR [edx+esi+4], 2
  00077	7e 0e		 jle	 SHORT $LN2@SetState_C

; 1000 : 			{
; 1001 : 				gObjMoveGate(n, 22);

  00079	6a 16		 push	 22			; 00000016H
  0007b	57		 push	 edi
  0007c	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  00081	8b 45 08	 mov	 eax, DWORD PTR tv209[ebp]
  00084	83 c4 08	 add	 esp, 8
$LN2@SetState_C:

; 994  : 
; 995  : 	for ( int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  00087	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  0008d	47		 inc	 edi
  0008e	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  00094	7c ca		 jl	 SHORT $LL4@SetState_C

; 1002 : 			}
; 1003 : 		}
; 1004 : 	}
; 1005 : 
; 1006 : 	this->SafetyCastleZone(iChaosCastleIndex);

  00096	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
  00099	8b ce		 mov	 ecx, esi
  0009b	53		 push	 ebx
  0009c	e8 00 00 00 00	 call	 ?SafetyCastleZone@CChaosCastle@@QAEXH@Z ; CChaosCastle::SafetyCastleZone

; 1007 : 	this->SetMapAttrFill(iChaosCastleIndex);

  000a1	53		 push	 ebx
  000a2	8b ce		 mov	 ecx, esi
  000a4	e8 00 00 00 00	 call	 ?SetMapAttrFill@CChaosCastle@@QAEXH@Z ; CChaosCastle::SetMapAttrFill

; 1008 : 	this->CheckSync(iChaosCastleIndex);

  000a9	53		 push	 ebx
  000aa	8b ce		 mov	 ecx, esi
  000ac	e8 00 00 00 00	 call	 ?CheckSync@CChaosCastle@@IAEXH@Z ; CChaosCastle::CheckSync

; 1009 : 
; 1010 : 	LogAddTD("[Chaos Castle] (%d) SetState CLOSED", iChaosCastleIndex+1);

  000b1	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  000b4	50		 push	 eax
  000b5	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MMNDEFNC@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5SetState?5CLO@
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000c0	83 c4 08	 add	 esp, 8
  000c3	5f		 pop	 edi
$LN1@SetState_C:
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx

; 1011 : }

  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
?SetState_Closed@CChaosCastle@@IAEXH@Z ENDP		; CChaosCastle::SetState_Closed
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SetState_None@CChaosCastle@@IAEXH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
?SetState_None@CChaosCastle@@IAEXH@Z PROC		; CChaosCastle::SetState_None, COMDAT
; _this$ = ecx

; 977  : 	return;
; 978  : }

  00000	c2 04 00	 ret	 4
?SetState_None@CChaosCastle@@IAEXH@Z ENDP		; CChaosCastle::SetState_None
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?ProcState_PlayEnd@CChaosCastle@@IAEXH@Z
_TEXT	SEGMENT
_pMsg$1 = 8						; size = 4
_iChaosCastleIndex$ = 8					; size = 4
?ProcState_PlayEnd@CChaosCastle@@IAEXH@Z PROC		; CChaosCastle::ProcState_PlayEnd, COMDAT
; _this$ = ecx

; 903  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 904  : 	int iTICK_MSEC = GetTickCount() - this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TICK_COUNT;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _iChaosCastleIndex$[ebp]
  00007	56		 push	 esi
  00008	69 f3 68 08 00
	00		 imul	 esi, ebx, 2152
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	03 f7		 add	 esi, edi
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00019	2b 46 40	 sub	 eax, DWORD PTR [esi+64]

; 905  : 
; 906  : 	if ( iTICK_MSEC >= 1000 )

  0001c	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00021	7c 51		 jl	 SHORT $LN3@ProcState_

; 907  : 	{
; 908  : 		this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC -= iTICK_MSEC;

  00023	29 46 3c	 sub	 DWORD PTR [esi+60], eax

; 909  : 		this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TICK_COUNT = GetTickCount();

  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 910  : 		this->CheckUserInDieTile(iChaosCastleIndex);

  0002c	53		 push	 ebx
  0002d	8b cf		 mov	 ecx, edi
  0002f	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00032	e8 00 00 00 00	 call	 ?CheckUserInDieTile@CChaosCastle@@QAEXH@Z ; CChaosCastle::CheckUserInDieTile

; 911  : 
; 912  : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC <= 30000 && this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC > 0 && this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_MSG_BEFORE_QUIT == false)

  00037	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0003a	3d 30 75 00 00	 cmp	 eax, 30000		; 00007530H
  0003f	7f 33		 jg	 SHORT $LN3@ProcState_
  00041	85 c0		 test	 eax, eax
  00043	7e 2f		 jle	 SHORT $LN3@ProcState_
  00045	80 7e 4e 00	 cmp	 BYTE PTR [esi+78], 0
  00049	75 29		 jne	 SHORT $LN3@ProcState_

; 913  : 		{
; 914  : 			this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_MSG_BEFORE_QUIT = true;
; 915  : 
; 916  : 			PMSG_SET_DEVILSQUARE pMsg;
; 917  : 
; 918  : 			PHeadSetB((LPBYTE)&pMsg, 0x92, sizeof(pMsg));

  0004b	6a 04		 push	 4
  0004d	8d 45 08	 lea	 eax, DWORD PTR _pMsg$1[ebp]
  00050	c6 46 4e 01	 mov	 BYTE PTR [esi+78], 1
  00054	68 92 00 00 00	 push	 146			; 00000092H
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 919  : 			pMsg.Type = 13;

  00062	c6 45 0b 0d	 mov	 BYTE PTR _pMsg$1[ebp+3], 13 ; 0000000dH

; 920  : 
; 921  : 			this->SendChaosCastleAnyMsg((BYTE *)&pMsg, sizeof(pMsg), iChaosCastleIndex);

  00066	8d 45 08	 lea	 eax, DWORD PTR _pMsg$1[ebp]
  00069	8b cf		 mov	 ecx, edi
  0006b	53		 push	 ebx
  0006c	6a 04		 push	 4
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ?SendChaosCastleAnyMsg@CChaosCastle@@QAEXPAEHH@Z ; CChaosCastle::SendChaosCastleAnyMsg
$LN3@ProcState_:

; 922  : 		}
; 923  : 
; 924  : 
; 925  : 	}
; 926  : 
; 927  : 	if ( this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC <= 0 )

  00074	83 7e 3c 00	 cmp	 DWORD PTR [esi+60], 0
  00078	7f 0a		 jg	 SHORT $LN4@ProcState_

; 928  : 	{
; 929  : 		this->SetState(iChaosCastleIndex, CC_STATE_CLOSED);

  0007a	6a 01		 push	 1
  0007c	53		 push	 ebx
  0007d	8b cf		 mov	 ecx, edi
  0007f	e8 00 00 00 00	 call	 ?SetState@CChaosCastle@@QAEXHH@Z ; CChaosCastle::SetState
$LN4@ProcState_:
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx

; 930  : 	}
; 931  : }

  00087	5d		 pop	 ebp
  00088	c2 04 00	 ret	 4
?ProcState_PlayEnd@CChaosCastle@@IAEXH@Z ENDP		; CChaosCastle::ProcState_PlayEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?ProcState_Playing@CChaosCastle@@IAEXH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$GSCopy$1$ = -288			; size = 4
tv1178 = -284						; size = 4
tv1075 = -284						; size = 4
tv1164 = -280						; size = 4
_iWinnerIndex$1$ = -280					; size = 4
_pMsg$1 = -280						; size = 4
_pMsg$2 = -280						; size = 4
_pNotice$3 = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
_iChaosCastleIndex$ = 8					; size = 4
?ProcState_Playing@CChaosCastle@@IAEXH@Z PROC		; CChaosCastle::ProcState_Playing, COMDAT
; _this$ = ecx

; 450  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _iChaosCastleIndex$[ebp]
  00017	56		 push	 esi

; 451  : 	int iTICK_MSEC = GetTickCount() - this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TICK_COUNT;

  00018	69 f3 68 08 00
	00		 imul	 esi, ebx, 2152
  0001e	57		 push	 edi
  0001f	8b f9		 mov	 edi, ecx
  00021	89 9d e0 fe ff
	ff		 mov	 DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp], ebx
  00027	89 b5 e4 fe ff
	ff		 mov	 DWORD PTR tv1075[ebp], esi
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00033	2b 44 3e 40	 sub	 eax, DWORD PTR [esi+edi+64]

; 452  : 
; 453  : 	if ( iTICK_MSEC >= 1000 )

  00037	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  0003c	0f 8c 47 02 00
	00		 jl	 $LN23@ProcState_

; 454  : 	{
; 455  : 		this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC -= iTICK_MSEC;

  00042	29 44 3e 3c	 sub	 DWORD PTR [esi+edi+60], eax

; 456  : 		this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TICK_COUNT = GetTickCount();

  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0004c	89 44 3e 40	 mov	 DWORD PTR [esi+edi+64], eax

; 457  : 
; 458  : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC <= ((this->m_iCC_TIME_MIN_PLAY*60-30)*1000) &&

  00050	69 47 0c 60 ea
	00 00		 imul	 eax, DWORD PTR [edi+12], 60000
  00057	2d 30 75 00 00	 sub	 eax, 30000		; 00007530H
  0005c	39 44 3e 3c	 cmp	 DWORD PTR [esi+edi+60], eax
  00060	7f 3a		 jg	 SHORT $LN6@ProcState_
  00062	80 7c 3e 4c 00	 cmp	 BYTE PTR [esi+edi+76], 0
  00067	75 33		 jne	 SHORT $LN6@ProcState_

; 459  : 			 this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_MSG_BEFORE_PLAY == false )
; 460  : 		{
; 461  : 			this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_MSG_BEFORE_PLAY = true;
; 462  : 			
; 463  : 			PMSG_SET_DEVILSQUARE pMsg;
; 464  : 			PHeadSetB((LPBYTE)&pMsg, 0x92, sizeof(pMsg));

  00069	6a 04		 push	 4
  0006b	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$2[ebp]
  00071	c6 44 3e 4c 01	 mov	 BYTE PTR [esi+edi+76], 1
  00076	68 92 00 00 00	 push	 146			; 00000092H
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH

; 465  : 			pMsg.Type = 11;

  00084	c6 85 eb fe ff
	ff 0b		 mov	 BYTE PTR _pMsg$2[ebp+3], 11 ; 0000000bH

; 466  : 			this->SendChaosCastleAnyMsg((BYTE*)&pMsg, sizeof(pMsg), iChaosCastleIndex);

  0008b	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$2[ebp]
  00091	8b cf		 mov	 ecx, edi
  00093	53		 push	 ebx
  00094	6a 04		 push	 4
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?SendChaosCastleAnyMsg@CChaosCastle@@QAEXPAEHH@Z ; CChaosCastle::SendChaosCastleAnyMsg
$LN6@ProcState_:

; 467  : 		}
; 468  : 
; 469  : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC <= 30000 &&
; 470  : 			 this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC > 0  &&

  0009c	8b 44 3e 3c	 mov	 eax, DWORD PTR [esi+edi+60]
  000a0	3d 30 75 00 00	 cmp	 eax, 30000		; 00007530H
  000a5	7f 3e		 jg	 SHORT $LN7@ProcState_
  000a7	85 c0		 test	 eax, eax
  000a9	7e 3a		 jle	 SHORT $LN7@ProcState_
  000ab	80 7c 3e 4d 00	 cmp	 BYTE PTR [esi+edi+77], 0
  000b0	75 33		 jne	 SHORT $LN7@ProcState_

; 471  : 			 this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_MSG_BEFORE_END == false )
; 472  : 		{
; 473  : 			this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_MSG_BEFORE_END = true;
; 474  : 			PMSG_SET_DEVILSQUARE pMsg;
; 475  : 			PHeadSetB((LPBYTE)&pMsg, 0x92, sizeof(pMsg));

  000b2	6a 04		 push	 4
  000b4	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$1[ebp]
  000ba	c6 44 3e 4d 01	 mov	 BYTE PTR [esi+edi+77], 1
  000bf	68 92 00 00 00	 push	 146			; 00000092H
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH

; 476  : 			pMsg.Type = 12;

  000cd	c6 85 eb fe ff
	ff 0c		 mov	 BYTE PTR _pMsg$1[ebp+3], 12 ; 0000000cH

; 477  : 			this->SendChaosCastleAnyMsg((BYTE*)&pMsg, sizeof(pMsg), iChaosCastleIndex);

  000d4	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$1[ebp]
  000da	8b cf		 mov	 ecx, edi
  000dc	53		 push	 ebx
  000dd	6a 04		 push	 4
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ?SendChaosCastleAnyMsg@CChaosCastle@@QAEXPAEHH@Z ; CChaosCastle::SendChaosCastleAnyMsg
$LN7@ProcState_:

; 478  : 		}
; 479  : 
; 480  : 		// Set Play Quest
; 481  : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC <= ((this->m_iCC_TIME_MIN_PLAY*60-60)*1000) &&

  000e5	69 4f 0c 60 ea
	00 00		 imul	 ecx, DWORD PTR [edi+12], 60000
  000ec	8d 81 a0 15 ff
	ff		 lea	 eax, DWORD PTR [ecx-60000]
  000f2	39 44 3e 3c	 cmp	 DWORD PTR [esi+edi+60], eax
  000f6	0f 8f c5 00 00
	00		 jg	 $LN8@ProcState_
  000fc	80 7c 3e 4a 00	 cmp	 BYTE PTR [esi+edi+74], 0
  00101	0f 85 03 01 00
	00		 jne	 $LN10@ProcState_

; 482  : 			this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_PLAY_START == false )
; 483  : 		{
; 484  : 			PMSG_NOTICE pNotice;
; 485  : 
; 486  : 			this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC = (this->m_iCC_TIME_MIN_PLAY*60)*1000;

  00107	89 4c 3e 3c	 mov	 DWORD PTR [esi+edi+60], ecx

; 487  : 			this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_CAN_PARTY = false;
; 488  : 			TNotice::MakeNoticeMsgEx((TNotice*)&pNotice, 0, lMsg.Get(MSGGET(4,209)), iChaosCastleIndex+1);

  0010b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00110	c6 44 3e 49 00	 mov	 BYTE PTR [esi+edi+73], 0
  00115	8d 73 01	 lea	 esi, DWORD PTR [ebx+1]
  00118	56		 push	 esi
  00119	68 d1 04 00 00	 push	 1233			; 000004d1H
  0011e	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00123	50		 push	 eax
  00124	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$3[ebp]
  0012a	6a 00		 push	 0
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx

; 489  : 			this->SendChaosCastleAnyMsg( (LPBYTE)&pNotice, pNotice.h.size, iChaosCastleIndex);

  00132	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$3[ebp+1]
  00139	83 c4 10	 add	 esp, 16			; 00000010H
  0013c	8b cf		 mov	 ecx, edi
  0013e	53		 push	 ebx
  0013f	50		 push	 eax
  00140	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$3[ebp]
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 ?SendChaosCastleAnyMsg@CChaosCastle@@QAEXPAEHH@Z ; CChaosCastle::SendChaosCastleAnyMsg

; 490  : 			this->UnSafetyCastleZone(iChaosCastleIndex);

  0014c	53		 push	 ebx
  0014d	8b cf		 mov	 ecx, edi
  0014f	e8 00 00 00 00	 call	 ?UnSafetyCastleZone@CChaosCastle@@QAEXH@Z ; CChaosCastle::UnSafetyCastleZone

; 491  : 			this->SendCastleZoneSafetyInfo(iChaosCastleIndex, 0);

  00154	6a 00		 push	 0
  00156	53		 push	 ebx
  00157	8b cf		 mov	 ecx, edi
  00159	e8 00 00 00 00	 call	 ?SendCastleZoneSafetyInfo@CChaosCastle@@QAEXH_N@Z ; CChaosCastle::SendCastleZoneSafetyInfo

; 492  : 			this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_PLAY_START = true;

  0015e	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR tv1075[ebp]

; 493  : 			this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_FIRST_USER_COUNT = this->ReCalcUserCount(iChaosCastleIndex);

  00164	8b cf		 mov	 ecx, edi
  00166	53		 push	 ebx
  00167	c6 44 38 4a 01	 mov	 BYTE PTR [eax+edi+74], 1
  0016c	e8 00 00 00 00	 call	 ?ReCalcUserCount@CChaosCastle@@QAEHH@Z ; CChaosCastle::ReCalcUserCount
  00171	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv1075[ebp]

; 494  : 			this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_CURRENT_MONSTER_COUNT = this->SetMonster(iChaosCastleIndex);

  00177	53		 push	 ebx
  00178	89 44 39 54	 mov	 DWORD PTR [ecx+edi+84], eax
  0017c	8b cf		 mov	 ecx, edi
  0017e	e8 00 00 00 00	 call	 ?SetMonster@CChaosCastle@@QAEHH@Z ; CChaosCastle::SetMonster
  00183	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv1075[ebp]

; 495  : 			this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_FIRST_MONSTER_COUNT = this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_CURRENT_MONSTER_COUNT; 
; 496  : 			this->SetItemsToMonster(iChaosCastleIndex);

  00189	53		 push	 ebx
  0018a	89 44 39 5c	 mov	 DWORD PTR [ecx+edi+92], eax
  0018e	89 44 39 58	 mov	 DWORD PTR [ecx+edi+88], eax
  00192	8b cf		 mov	 ecx, edi
  00194	e8 00 00 00 00	 call	 ?SetItemsToMonster@CChaosCastle@@QAEXH@Z ; CChaosCastle::SetItemsToMonster

; 497  : 			this->SendNoticeState(iChaosCastleIndex, 5);

  00199	6a 05		 push	 5
  0019b	53		 push	 ebx
  0019c	8b cf		 mov	 ecx, edi
  0019e	e8 00 00 00 00	 call	 ?SendNoticeState@CChaosCastle@@QAEXHH@Z ; CChaosCastle::SendNoticeState

; 498  : 			
; 499  : 			LogAddTD("[Chaos Castle] (%d) Chaos Castle Quest Start (UserCount:%d)",

  001a3	53		 push	 ebx
  001a4	8b cf		 mov	 ecx, edi
  001a6	e8 00 00 00 00	 call	 ?GetCurPlayUser@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetCurPlayUser
  001ab	50		 push	 eax
  001ac	56		 push	 esi
  001ad	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@PFNIGNGP@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Chaos?5Castle@
  001b2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001b8	8b b5 e4 fe ff
	ff		 mov	 esi, DWORD PTR tv1075[ebp]
  001be	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@ProcState_:

; 500  : 				iChaosCastleIndex+1, this->GetCurPlayUser(iChaosCastleIndex));
; 501  : 		}
; 502  : 
; 503  : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_PLAY_START == false &&

  001c1	80 7c 3e 4a 00	 cmp	 BYTE PTR [esi+edi+74], 0
  001c6	75 42		 jne	 SHORT $LN10@ProcState_
  001c8	80 7c 3e 48 00	 cmp	 BYTE PTR [esi+edi+72], 0
  001cd	75 3b		 jne	 SHORT $LN10@ProcState_

; 504  : 			 this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_CAN_ENTER == false )
; 505  : 		{
; 506  : 			int iCurPlayUser = this->GetCurPlayUser(iChaosCastleIndex);

  001cf	53		 push	 ebx
  001d0	8b cf		 mov	 ecx, edi
  001d2	e8 00 00 00 00	 call	 ?GetCurPlayUser@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetCurPlayUser

; 507  : 
; 508  : 			if (iCurPlayUser == 0 )

  001d7	85 c0		 test	 eax, eax
  001d9	75 2f		 jne	 SHORT $LN10@ProcState_

; 509  : 			{
; 510  : 				this->SetState(iChaosCastleIndex, CC_STATE_CLOSED);

  001db	6a 01		 push	 1
  001dd	53		 push	 ebx
  001de	8b cf		 mov	 ecx, edi
  001e0	e8 00 00 00 00	 call	 ?SetState@CChaosCastle@@QAEXHH@Z ; CChaosCastle::SetState

; 511  : 				LogAddTD("[Chaos Castle] (%d) Chaos Castle Quest Closed - No User",

  001e5	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  001e8	50		 push	 eax
  001e9	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@NBGGDBDE@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Chaos?5Castle@
  001ee	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001f4	83 c4 08	 add	 esp, 8
  001f7	5f		 pop	 edi
  001f8	5e		 pop	 esi
  001f9	5b		 pop	 ebx

; 681  : 	}
; 682  : }

  001fa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fd	33 cd		 xor	 ecx, ebp
  001ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00204	8b e5		 mov	 esp, ebp
  00206	5d		 pop	 ebp
  00207	c2 04 00	 ret	 4
$LN10@ProcState_:

; 512  : 					iChaosCastleIndex+1);
; 513  : 
; 514  : 				return;
; 515  : 			}
; 516  : 		}
; 517  : 
; 518  : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_PLAY_START == true )

  0020a	80 7c 3e 4a 01	 cmp	 BYTE PTR [esi+edi+74], 1
  0020f	75 78		 jne	 SHORT $LN23@ProcState_

; 519  : 		{
; 520  : 			this->ProcessFallUser(iChaosCastleIndex);

  00211	53		 push	 ebx
  00212	8b cf		 mov	 ecx, edi
  00214	e8 00 00 00 00	 call	 ?ProcessFallUser@CChaosCastle@@QAEXH@Z ; CChaosCastle::ProcessFallUser

; 521  : 			this->CheckUserInDieTile(iChaosCastleIndex);

  00219	53		 push	 ebx
  0021a	8b cf		 mov	 ecx, edi
  0021c	e8 00 00 00 00	 call	 ?CheckUserInDieTile@CChaosCastle@@QAEXH@Z ; CChaosCastle::CheckUserInDieTile

; 522  : 			this->CheckMonsterInDieTile(iChaosCastleIndex);

  00221	53		 push	 ebx
  00222	8b cf		 mov	 ecx, edi
  00224	e8 00 00 00 00	 call	 ?CheckMonsterInDieTile@CChaosCastle@@QAEXH@Z ; CChaosCastle::CheckMonsterInDieTile

; 523  : 			this->ProcessTrapStatus(iChaosCastleIndex);

  00229	53		 push	 ebx
  0022a	8b cf		 mov	 ecx, edi
  0022c	e8 00 00 00 00	 call	 ?ProcessTrapStatus@CChaosCastle@@QAEXH@Z ; CChaosCastle::ProcessTrapStatus

; 524  : 
; 525  : 			if ( this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TRAP_STATUS != this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TRAP_OLD_STATUS )

  00231	8b 44 3e 60	 mov	 eax, DWORD PTR [esi+edi+96]
  00235	3b 44 3e 64	 cmp	 eax, DWORD PTR [esi+edi+100]
  00239	74 19		 je	 SHORT $LN12@ProcState_

; 526  : 			{
; 527  : 				this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TRAP_OLD_STATUS = this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TRAP_STATUS;
; 528  : 				this->SetMapAttrHollow(iChaosCastleIndex, this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TRAP_STATUS);

  0023b	50		 push	 eax
  0023c	53		 push	 ebx
  0023d	8b cf		 mov	 ecx, edi
  0023f	89 44 3e 64	 mov	 DWORD PTR [esi+edi+100], eax
  00243	e8 00 00 00 00	 call	 ?SetMapAttrHollow@CChaosCastle@@QAEXHH@Z ; CChaosCastle::SetMapAttrHollow

; 529  : 				this->PullObjInnerPlace(iChaosCastleIndex, this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TRAP_STATUS);

  00248	ff 74 3e 60	 push	 DWORD PTR [esi+edi+96]
  0024c	8b cf		 mov	 ecx, edi
  0024e	53		 push	 ebx
  0024f	e8 00 00 00 00	 call	 ?PullObjInnerPlace@CChaosCastle@@QAEXHH@Z ; CChaosCastle::PullObjInnerPlace
$LN12@ProcState_:

; 530  : 			}
; 531  : 
; 532  : 			BOOL bPlayEnded = this->CheckPlayEnded(iChaosCastleIndex);

  00254	53		 push	 ebx
  00255	8b cf		 mov	 ecx, edi
  00257	e8 00 00 00 00	 call	 ?CheckPlayEnded@CChaosCastle@@QAEHH@Z ; CChaosCastle::CheckPlayEnded

; 533  : 
; 534  : 			if ( bPlayEnded == TRUE )

  0025c	83 f8 01	 cmp	 eax, 1
  0025f	75 15		 jne	 SHORT $LN13@ProcState_
$LN56@ProcState_:

; 535  : 			{
; 536  : 				int iWinnerIndex = -1;
; 537  : 				int iMonsterCount = this->GetMonsterListCount(iChaosCastleIndex);

  00261	53		 push	 ebx
  00262	8b cf		 mov	 ecx, edi
  00264	e8 00 00 00 00	 call	 ?GetMonsterListCount@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMonsterListCount

; 538  : 
; 539  : 				if ( iMonsterCount <= 0 )

  00269	85 c0		 test	 eax, eax
  0026b	0f 8f 0f 02 00
	00		 jg	 $LN29@ProcState_

; 540  : 				{
; 541  : 					iWinnerIndex = this->GetCurrentWinUser(iChaosCastleIndex);

  00271	53		 push	 ebx
  00272	8b cf		 mov	 ecx, edi

; 542  : 
; 543  : 					if ( iWinnerIndex != -1 )
; 544  : 					{
; 545  : 						LogAddTD("[Chaos Castle] (%d) [%s][%s] is Winner. [CharInfoSave : Class=%d, Level=%d, LvPoint=%d, Exp=%d, Str=%d, Dex=%d, Vit=%d, Energy=%d, LeaderShip=%d, Map=%d, Pk=%d]",
; 546  : 							iChaosCastleIndex+1, gObj[iWinnerIndex].AccountID, gObj[iWinnerIndex].Name,
; 547  : 							gObj[iWinnerIndex].Class, gObj[iWinnerIndex].Level, gObj[iWinnerIndex].LevelUpPoint,
; 548  : 							gObj[iWinnerIndex].Experience, gObj[iWinnerIndex].Strength,
; 549  : 							gObj[iWinnerIndex].Dexterity, gObj[iWinnerIndex].Vitality, gObj[iWinnerIndex].Energy,
; 550  : 							gObj[iWinnerIndex].Leadership, gObj[iWinnerIndex].MapNumber, gObj[iWinnerIndex].m_PK_Level);
; 551  : 
; 552  : 						this->SendWinMessage(iChaosCastleIndex, iWinnerIndex);
; 553  : 						this->GiveWinnerItem(iChaosCastleIndex, iWinnerIndex);
; 554  : 					}
; 555  : 					else

  00274	eb 5e		 jmp	 SHORT $LN55@ProcState_
$LN13@ProcState_:

; 556  : 					{
; 557  : 						LogAddTD("[Chaos Castle] (%d) Has No Winner.", iChaosCastleIndex+1);
; 558  : 					}
; 559  : 				}
; 560  : 				else
; 561  : 				{
; 562  : 					LogAddTD("[Chaos Castle] (%d) Has No Winner : Monster Left (%d)",
; 563  : 						iChaosCastleIndex+1, this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_CURRENT_MONSTER_COUNT);
; 564  : 				}
; 565  : 
; 566  : 				this->SendAllLoserFailMessage(iChaosCastleIndex, iWinnerIndex);
; 567  : 				this->SetState(iChaosCastleIndex, CC_STATE_PLAYEND);
; 568  : 
; 569  : 				return;
; 570  : 			}
; 571  : 		
; 572  : 			if ( bPlayEnded == 2 )

  00276	83 f8 02	 cmp	 eax, 2
  00279	74 e6		 je	 SHORT $LN56@ProcState_

; 573  : 			{
; 574  : 				int iWinnerIndex = -1;
; 575  : 				int iMonsterCount = this->GetMonsterListCount(iChaosCastleIndex);
; 576  : 
; 577  : 				if ( iMonsterCount <= 0 )
; 578  : 				{
; 579  : 					iWinnerIndex = this->GetCurrentWinUser(iChaosCastleIndex);
; 580  : 
; 581  : 					if ( iWinnerIndex != -1 )
; 582  : 					{
; 583  : 						LogAddTD("[Chaos Castle] (%d) [%s][%s] is Winner. [CharInfoSave : Class=%d, Level=%d, LvPoint=%d, Exp=%d, Str=%d, Dex=%d, Vit=%d, Energy=%d, LeaderShip=%d, Map=%d, Pk=%d]",
; 584  : 							iChaosCastleIndex+1, gObj[iWinnerIndex].AccountID, gObj[iWinnerIndex].Name,
; 585  : 							gObj[iWinnerIndex].Class, gObj[iWinnerIndex].Level, gObj[iWinnerIndex].LevelUpPoint,
; 586  : 							gObj[iWinnerIndex].Experience, gObj[iWinnerIndex].Strength,
; 587  : 							gObj[iWinnerIndex].Dexterity, gObj[iWinnerIndex].Vitality, gObj[iWinnerIndex].Energy,
; 588  : 							gObj[iWinnerIndex].Leadership, gObj[iWinnerIndex].MapNumber, gObj[iWinnerIndex].m_PK_Level);
; 589  : 
; 590  : 						this->SendWinMessage(iChaosCastleIndex, iWinnerIndex);
; 591  : 						this->GiveWinnerItem(iChaosCastleIndex, iWinnerIndex);
; 592  : 					}
; 593  : 					else
; 594  : 					{
; 595  : 						LogAddTD("[Chaos Castle] (%d) Has No Winner.", iChaosCastleIndex+1);
; 596  : 					}
; 597  : 				}
; 598  : 				else
; 599  : 				{
; 600  : 					LogAddTD("[Chaos Castle] (%d) Has No Winner : Monster Left (%d)",
; 601  : 						iChaosCastleIndex+1, this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_CURRENT_MONSTER_COUNT);
; 602  : 				}
; 603  : 
; 604  : 				this->SendAllLoserFailMessage(iChaosCastleIndex, iWinnerIndex);
; 605  : 				this->SetState(iChaosCastleIndex, CC_STATE_PLAYEND);
; 606  : 
; 607  : 				return;
; 608  : 			}
; 609  : 		
; 610  : 			if ( bPlayEnded == FALSE )

  0027b	85 c0		 test	 eax, eax
  0027d	75 0a		 jne	 SHORT $LN23@ProcState_

; 611  : 			{
; 612  : 				this->SendNoticeState(iChaosCastleIndex, 6);

  0027f	6a 06		 push	 6
  00281	53		 push	 ebx
  00282	8b cf		 mov	 ecx, edi
  00284	e8 00 00 00 00	 call	 ?SendNoticeState@CChaosCastle@@QAEXHH@Z ; CChaosCastle::SendNoticeState
$LN23@ProcState_:

; 613  : 			}
; 614  : 		}
; 615  : 	}
; 616  : 
; 617  : 	if ( this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC <= 0 )

  00289	83 7c 3e 3c 00	 cmp	 DWORD PTR [esi+edi+60], 0
  0028e	0f 8f 18 02 00
	00		 jg	 $LN24@ProcState_

; 618  : 	{
; 619  : 		LogAddTD("[Chaos Castle] (%d) is Over : TIME-OUT (Left User:%d, Monster:%d)",

  00294	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00297	8b cf		 mov	 ecx, edi
  00299	53		 push	 ebx
  0029a	89 85 e8 fe ff
	ff		 mov	 DWORD PTR tv1164[ebp], eax
  002a0	e8 00 00 00 00	 call	 ?GetMonsterListCount@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMonsterListCount
  002a5	50		 push	 eax
  002a6	53		 push	 ebx
  002a7	8b cf		 mov	 ecx, edi
  002a9	e8 00 00 00 00	 call	 ?GetCurPlayUser@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetCurPlayUser
  002ae	50		 push	 eax
  002af	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  002b2	50		 push	 eax
  002b3	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@CDMJLAJE@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5is?5Over?5?3?5TI@
  002b8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002be	83 c4 10	 add	 esp, 16			; 00000010H

; 620  : 			iChaosCastleIndex+1, this->GetCurPlayUser(iChaosCastleIndex), this->GetMonsterListCount(iChaosCastleIndex));
; 621  : 
; 622  : 
; 623  : 		int iWinnerIndex = -1;
; 624  : 		int iMonsterCount = this->GetMonsterListCount(iChaosCastleIndex);

  002c1	8b cf		 mov	 ecx, edi
  002c3	53		 push	 ebx
  002c4	e8 00 00 00 00	 call	 ?GetMonsterListCount@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMonsterListCount

; 625  : 
; 626  : 		if ( iMonsterCount <= 0 )
; 627  : 		{
; 628  : 			iWinnerIndex = this->GetCurrentWinUser(iChaosCastleIndex);

  002c9	8b cf		 mov	 ecx, edi
  002cb	53		 push	 ebx
  002cc	85 c0		 test	 eax, eax
  002ce	0f 8f d7 00 00
	00		 jg	 $LN25@ProcState_
$LN55@ProcState_:
  002d4	e8 00 00 00 00	 call	 ?GetCurrentWinUser@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetCurrentWinUser
  002d9	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _iWinnerIndex$1$[ebp], eax

; 629  : 
; 630  : 			if ( iWinnerIndex != -1 )

  002df	83 f8 ff	 cmp	 eax, -1
  002e2	0f 84 a6 00 00
	00		 je	 $LN27@ProcState_

; 631  : 			{
; 632  : 				LogAddTD("[Chaos Castle] (%d) [%s][%s] is Winner. [CharInfoSave : Class=%d, Level=%d, LvPoint=%d, Exp=%d, Str=%d, Dex=%d, Vit=%d, Energy=%d, LeaderShip=%d, Map=%d, Pk=%d]",

  002e8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002ee	69 f0 40 27 00
	00		 imul	 esi, eax, 10048
  002f4	0f be 8c 16 19
	01 00 00	 movsx	 ecx, BYTE PTR [esi+edx+281]
  002fc	0f b7 84 16 f4
	00 00 00	 movzx	 eax, WORD PTR [esi+edx+244]
  00304	51		 push	 ecx
  00305	0f b6 8c 16 23
	01 00 00	 movzx	 ecx, BYTE PTR [esi+edx+291]
  0030d	51		 push	 ecx
  0030e	50		 push	 eax
  0030f	0f b7 84 16 d6
	00 00 00	 movzx	 eax, WORD PTR [esi+edx+214]
  00317	50		 push	 eax
  00318	0f b7 84 16 d4
	00 00 00	 movzx	 eax, WORD PTR [esi+edx+212]
  00320	50		 push	 eax
  00321	0f b7 84 16 d2
	00 00 00	 movzx	 eax, WORD PTR [esi+edx+210]
  00329	50		 push	 eax
  0032a	0f b7 84 16 d0
	00 00 00	 movzx	 eax, WORD PTR [esi+edx+208]
  00332	50		 push	 eax
  00333	ff b4 16 a0 00
	00 00		 push	 DWORD PTR [esi+edx+160]
  0033a	0f bf 84 16 96
	00 00 00	 movsx	 eax, WORD PTR [esi+edx+150]
  00342	ff b4 16 98 00
	00 00		 push	 DWORD PTR [esi+edx+152]
  00349	50		 push	 eax
  0034a	0f b7 84 16 90
	00 00 00	 movzx	 eax, WORD PTR [esi+edx+144]
  00352	50		 push	 eax
  00353	8d 42 5d	 lea	 eax, DWORD PTR [edx+93]
  00356	03 c6		 add	 eax, esi
  00358	50		 push	 eax
  00359	8d 42 52	 lea	 eax, DWORD PTR [edx+82]
  0035c	03 c6		 add	 eax, esi
  0035e	50		 push	 eax
  0035f	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00362	50		 push	 eax
  00363	68 00 00 00 00	 push	 OFFSET ??_C@_0KB@EOIGCIIB@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5is?5@
  00368	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 633  : 					iChaosCastleIndex+1, gObj[iWinnerIndex].AccountID, gObj[iWinnerIndex].Name,
; 634  : 					gObj[iWinnerIndex].Class, gObj[iWinnerIndex].Level, gObj[iWinnerIndex].LevelUpPoint,
; 635  : 					gObj[iWinnerIndex].Experience, gObj[iWinnerIndex].Strength,
; 636  : 					gObj[iWinnerIndex].Dexterity, gObj[iWinnerIndex].Vitality, gObj[iWinnerIndex].Energy,
; 637  : 					gObj[iWinnerIndex].Leadership, gObj[iWinnerIndex].MapNumber, gObj[iWinnerIndex].m_PK_Level);
; 638  : 
; 639  : 				this->SendWinMessage(iChaosCastleIndex, iWinnerIndex);

  0036e	8b b5 e8 fe ff
	ff		 mov	 esi, DWORD PTR _iWinnerIndex$1$[ebp]
  00374	83 c4 3c	 add	 esp, 60			; 0000003cH
  00377	8b cf		 mov	 ecx, edi
  00379	56		 push	 esi
  0037a	53		 push	 ebx
  0037b	e8 00 00 00 00	 call	 ?SendWinMessage@CChaosCastle@@QAEXHH@Z ; CChaosCastle::SendWinMessage

; 640  : 				this->GiveWinnerItem(iChaosCastleIndex, iWinnerIndex);

  00380	56		 push	 esi
  00381	53		 push	 ebx
  00382	8b cf		 mov	 ecx, edi
  00384	e8 00 00 00 00	 call	 ?GiveWinnerItem@CChaosCastle@@QAEXHH@Z ; CChaosCastle::GiveWinnerItem

; 641  : 			}
; 642  : 			else

  00389	e9 0b 01 00 00	 jmp	 $LN30@ProcState_
$LN27@ProcState_:

; 643  : 			{
; 644  : 				LogAddTD("[Chaos Castle] (%d) Has No Winner.", iChaosCastleIndex+1);

  0038e	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00391	50		 push	 eax
  00392	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JOONMNFN@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Has?5No?5Winne@
  00397	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 645  : 			}

  0039d	8b b5 e8 fe ff
	ff		 mov	 esi, DWORD PTR _iWinnerIndex$1$[ebp]
  003a3	83 c4 08	 add	 esp, 8
  003a6	e9 ee 00 00 00	 jmp	 $LN30@ProcState_
$LN25@ProcState_:

; 646  : 		}
; 647  : 		else if ( this->GetCurEnteredUser(iChaosCastleIndex) == 1 )

  003ab	e8 00 00 00 00	 call	 ?GetCurEnteredUser@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetCurEnteredUser
  003b0	83 f8 01	 cmp	 eax, 1
  003b3	0f 85 c7 00 00
	00		 jne	 $LN29@ProcState_

; 648  : 		{
; 649  : 			for( int i =0; i < MAX_CHAOSCASTLE_MONSTER; i++)

  003b9	8b 9d e8 fe ff
	ff		 mov	 ebx, DWORD PTR tv1164[ebp]
  003bf	81 c6 e0 05 00
	00		 add	 esi, 1504		; 000005e0H
  003c5	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  003ca	03 f7		 add	 esi, edi
  003cc	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv1178[ebp], eax
  003d2	0f 57 c9	 xorps	 xmm1, xmm1
$LL4@ProcState_:

; 650  : 			{
; 651  : 				if( this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[i] == -1 )

  003d5	8b 0e		 mov	 ecx, DWORD PTR [esi]
  003d7	83 f9 ff	 cmp	 ecx, -1
  003da	74 7c		 je	 SHORT $LN2@ProcState_

; 652  : 				{
; 653  : 					continue;
; 654  : 				}
; 655  : 	
; 656  : 				int iMonIndex = this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[i];
; 657  : 	
; 658  : 				if ( OBJMON_RANGE(iMonIndex) == FALSE )

  003dc	85 c9		 test	 ecx, ecx
  003de	0f 88 94 00 00
	00		 js	 $LN45@ProcState_
  003e4	33 c0		 xor	 eax, eax
  003e6	81 f9 03 29 00
	00		 cmp	 ecx, 10499		; 00002903H
  003ec	0f 9e c0	 setle	 al
  003ef	85 c0		 test	 eax, eax
  003f1	74 7f		 je	 SHORT $LN51@ProcState_

; 661  : 					continue;
; 662  : 				}	
; 663  : 	
; 664  : 				if ( gObj[iMonIndex].Life > 0 &&
; 665  : 						CC_MAP_RANGE(gObj[iMonIndex].MapNumber) &&

  003f3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003f9	69 c9 40 27 00
	00		 imul	 ecx, ecx, 10048
  003ff	f3 0f 10 84 11
	d8 00 00 00	 movss	 xmm0, DWORD PTR [ecx+edx+216]
  00408	0f 2f c1	 comiss	 xmm0, xmm1
  0040b	76 45		 jbe	 SHORT $LN50@ProcState_
  0040d	8a 84 11 23 01
	00 00		 mov	 al, BYTE PTR [ecx+edx+291]
  00414	3c 35		 cmp	 al, 53			; 00000035H
  00416	74 0f		 je	 SHORT $LN46@ProcState_
  00418	3c 12		 cmp	 al, 18			; 00000012H
  0041a	72 36		 jb	 SHORT $LN50@ProcState_
  0041c	b4 17		 mov	 ah, 23			; 00000017H
  0041e	3a e0		 cmp	 ah, al
  00420	1b c0		 sbb	 eax, eax
  00422	83 c0 01	 add	 eax, 1
  00425	74 2b		 je	 SHORT $LN50@ProcState_
$LN46@ProcState_:
  00427	83 7c 11 04 00	 cmp	 DWORD PTR [ecx+edx+4], 0
  0042c	7e 24		 jle	 SHORT $LN50@ProcState_

; 666  : 					gObj[iMonIndex].Connected > 0)
; 667  : 				{
; 668  : 					LogAddTD("[Chaos Castle][Bug Tracer] (%d) Left Monster AttrInfo %d/%d",

  0042e	0f b6 84 11 21
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edx+289]
  00436	50		 push	 eax
  00437	0f b6 84 11 20
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edx+288]
  0043f	50		 push	 eax
  00440	53		 push	 ebx
  00441	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@ENGGGAC@?$FLChaos?5Castle?$FN?$FLBug?5Tracer?$FN?5?$CI?$CFd?$CJ?5@
  00446	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0044c	83 c4 10	 add	 esp, 16			; 00000010H
  0044f	0f 57 c9	 xorps	 xmm1, xmm1
$LN50@ProcState_:
  00452	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR tv1178[ebp]
$LN2@ProcState_:

; 648  : 		{
; 649  : 			for( int i =0; i < MAX_CHAOSCASTLE_MONSTER; i++)

  00458	83 c6 04	 add	 esi, 4
  0045b	83 e8 01	 sub	 eax, 1
  0045e	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv1178[ebp], eax
  00464	0f 85 6b ff ff
	ff		 jne	 $LL4@ProcState_

; 669  : 						iChaosCastleIndex+1,gObj[iMonIndex].X,gObj[iMonIndex].Y);
; 670  : 				}	
; 671  : 			}
; 672  : 		}
; 673  : 		else

  0046a	8b 9d e0 fe ff
	ff		 mov	 ebx, DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp]
  00470	eb 24		 jmp	 SHORT $LN54@ProcState_
$LN51@ProcState_:
  00472	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR tv1178[ebp]
$LN45@ProcState_:

; 659  : 				{
; 660  : 					this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[i] = -1;

  00478	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
  0047e	eb d8		 jmp	 SHORT $LN2@ProcState_
$LN29@ProcState_:

; 674  : 		{
; 675  : 			LogAddTD("[Chaos Castle] (%d) Has No Winner : Monster Left (%d)",

  00480	ff 74 3e 5c	 push	 DWORD PTR [esi+edi+92]
  00484	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00487	50		 push	 eax
  00488	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@DNCOEMLJ@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Has?5No?5Winne@
  0048d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00493	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN54@ProcState_:
  00496	83 ce ff	 or	 esi, -1
$LN30@ProcState_:

; 676  : 				iChaosCastleIndex+1,this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_CURRENT_MONSTER_COUNT);
; 677  : 		}
; 678  : 
; 679  : 		this->SendAllLoserFailMessage(iChaosCastleIndex, iWinnerIndex);

  00499	56		 push	 esi
  0049a	53		 push	 ebx
  0049b	8b cf		 mov	 ecx, edi
  0049d	e8 00 00 00 00	 call	 ?SendAllLoserFailMessage@CChaosCastle@@QAEXHH@Z ; CChaosCastle::SendAllLoserFailMessage

; 680  : 		this->SetState(iChaosCastleIndex, CC_STATE_PLAYEND);

  004a2	6a 03		 push	 3
  004a4	53		 push	 ebx
  004a5	8b cf		 mov	 ecx, edi
  004a7	e8 00 00 00 00	 call	 ?SetState@CChaosCastle@@QAEXHH@Z ; CChaosCastle::SetState
$LN24@ProcState_:

; 681  : 	}
; 682  : }

  004ac	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004af	5f		 pop	 edi
  004b0	5e		 pop	 esi
  004b1	33 cd		 xor	 ecx, ebp
  004b3	5b		 pop	 ebx
  004b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004b9	8b e5		 mov	 esp, ebp
  004bb	5d		 pop	 ebp
  004bc	c2 04 00	 ret	 4
?ProcState_Playing@CChaosCastle@@IAEXH@Z ENDP		; CChaosCastle::ProcState_Playing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?ProcState_Closed@CChaosCastle@@IAEXH@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -288					; size = 4
_pMsg$1 = -284						; size = 4
_iChaosCastleIndex$GSCopy$1$ = -280			; size = 4
_pNotice$2 = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
_iChaosCastleIndex$ = 8					; size = 4
?ProcState_Closed@CChaosCastle@@IAEXH@Z PROC		; CChaosCastle::ProcState_Closed, COMDAT
; _this$ = ecx

; 374  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _iChaosCastleIndex$[ebp]
  00016	53		 push	 ebx

; 375  : 	int iTICK_MSEC = GetTickCount() - this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TICK_COUNT;

  00017	69 d8 68 08 00
	00		 imul	 ebx, eax, 2152
  0001d	56		 push	 esi
  0001e	8b f1		 mov	 esi, ecx
  00020	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp], eax
  00026	57		 push	 edi
  00027	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  0002d	89 b5 e0 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00033	03 de		 add	 ebx, esi
  00035	ff d7		 call	 edi
  00037	2b 43 40	 sub	 eax, DWORD PTR [ebx+64]

; 376  : 
; 377  : 	if ( iTICK_MSEC >= 1000 )

  0003a	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  0003f	0f 8c 6c 01 00
	00		 jl	 $LN39@ProcState_

; 378  : 	{
; 379  : 		this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC -= iTICK_MSEC;

  00045	29 43 3c	 sub	 DWORD PTR [ebx+60], eax

; 380  : 		this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TICK_COUNT = GetTickCount();

  00048	ff d7		 call	 edi
  0004a	89 43 40	 mov	 DWORD PTR [ebx+64], eax

; 381  : 
; 382  : 		if ( g_bChaosCastle != FALSE )

  0004d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bChaosCastle@@3HA, 0 ; g_bChaosCastle
  00054	0f 84 57 01 00
	00		 je	 $LN39@ProcState_

; 383  : 		{
; 384  : 			if ( this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC <= ( this->m_iCC_TIME_MIN_OPEN * 60 * 1000 ) && this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_CAN_ENTER == false)

  0005a	69 46 08 60 ea
	00 00		 imul	 eax, DWORD PTR [esi+8], 60000
  00061	8b 4b 3c	 mov	 ecx, DWORD PTR [ebx+60]
  00064	3b c8		 cmp	 ecx, eax
  00066	7f 0c		 jg	 SHORT $LN7@ProcState_
  00068	80 7b 48 00	 cmp	 BYTE PTR [ebx+72], 0
  0006c	75 06		 jne	 SHORT $LN7@ProcState_

; 385  : 			{
; 386  : 				this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_CAN_ENTER = true;

  0006e	66 c7 43 48 01
	01		 mov	 WORD PTR [ebx+72], 257	; 00000101H
$LN7@ProcState_:

; 387  : 				this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_CAN_PARTY = true;
; 388  : 			}
; 389  : 
; 390  : 			if ( this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC <= ( this->m_iCC_TIME_MIN_OPEN * 60 * 1000 ) && this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC > 0 && (this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC/60000) !=this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_NOTIFY_COUNT)

  00074	69 46 08 60 ea
	00 00		 imul	 eax, DWORD PTR [esi+8], 60000
  0007b	3b c8		 cmp	 ecx, eax
  0007d	7f 62		 jg	 SHORT $LN33@ProcState_
  0007f	85 c9		 test	 ecx, ecx
  00081	7e 5e		 jle	 SHORT $LN33@ProcState_
  00083	b8 73 b2 e7 45	 mov	 eax, 1172812403		; 45e7b273H
  00088	f7 e9		 imul	 ecx
  0008a	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  0008d	8b c2		 mov	 eax, edx
  0008f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00092	03 c2		 add	 eax, edx
  00094	3b 43 44	 cmp	 eax, DWORD PTR [ebx+68]
  00097	74 48		 je	 SHORT $LN33@ProcState_

; 391  : 			{
; 392  : 				this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_NOTIFY_COUNT = this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC / 60000;
; 393  : 
; 394  : 				if ( iChaosCastleIndex == 0 )

  00099	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp], 0
  000a0	89 43 44	 mov	 DWORD PTR [ebx+68], eax
  000a3	75 3c		 jne	 SHORT $LN33@ProcState_

; 395  : 				{
; 396  : 					PMSG_NOTICE pNotice;
; 397  : 
; 398  : 					TNotice::MakeNoticeMsgEx(&pNotice, 0, lMsg.Get( MSGGET(4, 208)), this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_NOTIFY_COUNT+1);

  000a5	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000a8	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000ad	40		 inc	 eax
  000ae	50		 push	 eax
  000af	68 d0 04 00 00	 push	 1232			; 000004d0H
  000b4	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000b9	50		 push	 eax
  000ba	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$2[ebp]
  000c0	6a 00		 push	 0
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx

; 399  : 					this->SendAllUserAnyMsg( (LPBYTE)&pNotice, pNotice.h.size);

  000c8	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$2[ebp+1]
  000cf	83 c4 10	 add	 esp, 16			; 00000010H
  000d2	8b ce		 mov	 ecx, esi
  000d4	50		 push	 eax
  000d5	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$2[ebp]
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ?SendAllUserAnyMsg@CChaosCastle@@QAEXPAEH@Z ; CChaosCastle::SendAllUserAnyMsg
$LN33@ProcState_:

; 400  : 				}
; 401  : 			}
; 402  : 
; 403  : 			if ( this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC <= 30000 && this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC > 0 && this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_MSG_BEFORE_ENTER == false )

  000e1	8b 43 3c	 mov	 eax, DWORD PTR [ebx+60]
  000e4	3d 30 75 00 00	 cmp	 eax, 30000		; 00007530H
  000e9	0f 8f c2 00 00
	00		 jg	 $LN39@ProcState_
  000ef	85 c0		 test	 eax, eax
  000f1	0f 8e ba 00 00
	00		 jle	 $LN39@ProcState_
  000f7	80 7b 4b 00	 cmp	 BYTE PTR [ebx+75], 0

; 404  : 			{
; 405  : 				this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_MSG_BEFORE_ENTER = true;
; 406  : 
; 407  : 				if ( iChaosCastleIndex == 0 )

  000fb	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp]
  00101	0f 85 b0 00 00
	00		 jne	 $LN34@ProcState_
  00107	c6 43 4b 01	 mov	 BYTE PTR [ebx+75], 1
  0010b	85 c0		 test	 eax, eax
  0010d	0f 85 a4 00 00
	00		 jne	 $LN34@ProcState_

; 408  : 				{
; 409  : 					PMSG_SET_DEVILSQUARE pMsg;
; 410  : 
; 411  : 					PHeadSetB((LPBYTE)&pMsg, 0x92, sizeof(pMsg));

  00113	6a 04		 push	 4
  00115	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$1[ebp]
  0011b	68 92 00 00 00	 push	 146			; 00000092H
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00126	83 c4 0c	 add	 esp, 12			; 0000000cH

; 412  : 					pMsg.Type = 10;

  00129	c6 85 e7 fe ff
	ff 0a		 mov	 BYTE PTR _pMsg$1[ebp+3], 10 ; 0000000aH

; 413  : 
; 414  : 					for (int i= OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  00130	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  00135	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  0013a	66 0f 1f 44 00
	00		 npad	 6
$LL4@ProcState_:

; 415  : 					{
; 416  : 						if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00145	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  0014a	75 50		 jne	 SHORT $LN2@ProcState_
  0014c	80 7c 06 50 01	 cmp	 BYTE PTR [esi+eax+80], 1
  00151	75 49		 jne	 SHORT $LN2@ProcState_

; 417  : 						{
; 418  : 							if ( CC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  00153	8a 8c 06 23 01
	00 00		 mov	 cl, BYTE PTR [esi+eax+291]
  0015a	80 f9 35	 cmp	 cl, 53			; 00000035H
  0015d	74 3d		 je	 SHORT $LN2@ProcState_
  0015f	80 f9 12	 cmp	 cl, 18			; 00000012H
  00162	72 0b		 jb	 SHORT $LN31@ProcState_
  00164	b0 17		 mov	 al, 23			; 00000017H
  00166	3a c1		 cmp	 al, cl
  00168	1b c0		 sbb	 eax, eax
  0016a	83 c0 01	 add	 eax, 1
  0016d	75 2d		 jne	 SHORT $LN2@ProcState_
$LN31@ProcState_:

; 419  : 							{
; 420  : 								if ( BC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  0016f	80 f9 34	 cmp	 cl, 52			; 00000034H
  00172	74 28		 je	 SHORT $LN2@ProcState_
  00174	80 f9 0b	 cmp	 cl, 11			; 0000000bH
  00177	72 0b		 jb	 SHORT $LN32@ProcState_
  00179	b0 11		 mov	 al, 17			; 00000011H
  0017b	3a c1		 cmp	 al, cl
  0017d	1b c0		 sbb	 eax, eax
  0017f	83 c0 01	 add	 eax, 1
  00182	75 18		 jne	 SHORT $LN2@ProcState_
$LN32@ProcState_:

; 421  : 								{
; 422  : 									DataSend(i, (UCHAR*)&pMsg, pMsg.h.size);

  00184	0f b6 85 e5 fe
	ff ff		 movzx	 eax, BYTE PTR _pMsg$1[ebp+1]
  0018b	50		 push	 eax
  0018c	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$1[ebp]
  00192	50		 push	 eax
  00193	57		 push	 edi
  00194	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00199	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@ProcState_:

; 413  : 
; 414  : 					for (int i= OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  0019c	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  001a2	47		 inc	 edi
  001a3	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  001a9	7c 95		 jl	 SHORT $LL4@ProcState_
  001ab	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
$LN39@ProcState_:
  001b1	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp]
$LN34@ProcState_:

; 423  : 								}
; 424  : 							}
; 425  : 						}
; 426  : 					}
; 427  : 				}
; 428  : 			}
; 429  : 		}
; 430  : 	}
; 431  : 
; 432  : 	if ( this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC <= 0 )

  001b7	83 7b 3c 00	 cmp	 DWORD PTR [ebx+60], 0
  001bb	7f 17		 jg	 SHORT $LN17@ProcState_

; 433  : 	{
; 434  : 		if ( g_bChaosCastle != FALSE )

  001bd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bChaosCastle@@3HA, 0 ; g_bChaosCastle

; 435  : 		{
; 436  : 			this->SetState(iChaosCastleIndex, CC_STATE_PLAYING);

  001c4	8b ce		 mov	 ecx, esi
  001c6	74 04		 je	 SHORT $LN16@ProcState_
  001c8	6a 02		 push	 2

; 437  : 		}
; 438  : 		else

  001ca	eb 02		 jmp	 SHORT $LN40@ProcState_
$LN16@ProcState_:

; 439  : 		{
; 440  : 			this->SetState(iChaosCastleIndex, CC_STATE_CLOSED);

  001cc	6a 01		 push	 1
$LN40@ProcState_:
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 ?SetState@CChaosCastle@@QAEXHH@Z ; CChaosCastle::SetState
$LN17@ProcState_:

; 441  : 		}
; 442  : 	}
; 443  : }

  001d4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d7	5f		 pop	 edi
  001d8	5e		 pop	 esi
  001d9	33 cd		 xor	 ecx, ebp
  001db	5b		 pop	 ebx
  001dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e1	8b e5		 mov	 esp, ebp
  001e3	5d		 pop	 ebp
  001e4	c2 04 00	 ret	 4
?ProcState_Closed@CChaosCastle@@IAEXH@Z ENDP		; CChaosCastle::ProcState_Closed
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?ProcState_None@CChaosCastle@@IAEXH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
?ProcState_None@CChaosCastle@@IAEXH@Z PROC		; CChaosCastle::ProcState_None, COMDAT
; _this$ = ecx

; 366  : 	return;
; 367  : }

  00000	c2 04 00	 ret	 4
?ProcState_None@CChaosCastle@@IAEXH@Z ENDP		; CChaosCastle::ProcState_None
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.h
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?ClearChaosCastleData@CChaosCastle@@IAEXH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
?ClearChaosCastleData@CChaosCastle@@IAEXH@Z PROC	; CChaosCastle::ClearChaosCastleData, COMDAT
; _this$ = ecx

; 1070 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1071 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iChaosCastleIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	0f 88 c3 00 00
	00		 js	 $LN3@ClearChaos
  0000e	33 c0		 xor	 eax, eax
  00010	83 fa 06	 cmp	 edx, 6
  00013	0f 9e c0	 setle	 al
  00016	85 c0		 test	 eax, eax
  00018	0f 84 b3 00 00
	00		 je	 $LN3@ClearChaos

; 1072 : 	{
; 1073 : 		return;
; 1074 : 	}
; 1075 : 
; 1076 : 	this->m_stChaosCastleData[iChaosCastleIndex].Clear();

  0001e	56		 push	 esi
  0001f	69 f2 68 08 00
	00		 imul	 esi, edx, 2152
  00025	03 f1		 add	 esi, ecx
  00027	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  0002a	e8 00 00 00 00	 call	 ?Clear@_CHAOSCASTLE_DATA@@QAEXXZ ; _CHAOSCASTLE_DATA::Clear
  0002f	8d 46 68	 lea	 eax, DWORD PTR [esi+104]
  00032	be 46 00 00 00	 mov	 esi, 70			; 00000046H
$LL4@ClearChaos:

; 1079 : 	{
; 1080 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex != -1 )

  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	83 f9 ff	 cmp	 ecx, -1
  0003c	74 67		 je	 SHORT $LN6@ClearChaos

; 1081 : 		{
; 1082 : 			gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].m_cChaosCastleIndex = -1;

  0003e	69 d1 40 27 00
	00		 imul	 edx, ecx, 10048
  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004a	c6 84 0a 3d 12
	00 00 ff	 mov	 BYTE PTR [edx+ecx+4669], -1

; 1083 : 			gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].m_cChaosCastleSubIndex = -1;

  00052	69 10 40 27 00
	00		 imul	 edx, DWORD PTR [eax], 10048
  00058	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005e	c6 84 0a 3e 12
	00 00 ff	 mov	 BYTE PTR [edx+ecx+4670], -1

; 1084 : 			gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].m_iChaosCastleBlowTime = 0;

  00066	69 10 40 27 00
	00		 imul	 edx, DWORD PTR [eax], 10048
  0006c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00072	c7 84 0a 40 12
	00 00 00 00 00
	00		 mov	 DWORD PTR [edx+ecx+4672], 0

; 1085 : 			gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].m_cKillUserCount = 0;

  0007d	69 10 40 27 00
	00		 imul	 edx, DWORD PTR [eax], 10048
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00089	c6 84 0a 44 12
	00 00 00	 mov	 BYTE PTR [edx+ecx+4676], 0

; 1086 : 			gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].m_cKillMonsterCount = 0;

  00091	69 10 40 27 00
	00		 imul	 edx, DWORD PTR [eax], 10048
  00097	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009d	c6 84 0a 45 12
	00 00 00	 mov	 BYTE PTR [edx+ecx+4677], 0
$LN6@ClearChaos:
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.h

; 172  : 		this->m_iIndex = -1;

  000a5	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 173  : 		this->m_iEXP = 0;

  000ab	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 174  : 		this->m_iScore = 0;

  000b2	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 175  : 		this->m_iUserState = 0;

  000b9	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 176  : 		this->m_bSendQuitMsg = false;

  000c0	c6 40 10 00	 mov	 BYTE PTR [eax+16], 0
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 1078 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++ )

  000c4	83 c0 14	 add	 eax, 20			; 00000014H
  000c7	83 ee 01	 sub	 esi, 1
  000ca	0f 85 67 ff ff
	ff		 jne	 $LL4@ClearChaos
  000d0	5e		 pop	 esi
$LN3@ClearChaos:

; 1087 : 		}
; 1088 : 
; 1089 : 		this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].Clear();
; 1090 : 	}
; 1091 : }

  000d1	5d		 pop	 ebp
  000d2	c2 04 00	 ret	 4
?ClearChaosCastleData@CChaosCastle@@IAEXH@Z ENDP	; CChaosCastle::ClearChaosCastleData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?CheckSync@CChaosCastle@@IAEXH@Z
_TEXT	SEGMENT
tv667 = -56						; size = 4
tv665 = -52						; size = 4
tv671 = -48						; size = 4
$T1 = -48						; size = 4
tv666 = -44						; size = 4
_it$2$ = -44						; size = 4
_iChaosCastleIndex$GSCopy$1$ = -40			; size = 4
_iMIN_MINUTE$1$ = -36					; size = 4
_bTIME_CHANGED$1$ = -32					; size = 4
tv684 = -28						; size = 4
_iMIN_HOUR$1$ = -28					; size = 4
tv683 = -24						; size = 4
_this$GSCopy$1$ = -24					; size = 4
_sysTime$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_iChaosCastleIndex$ = 8					; size = 4
?CheckSync@CChaosCastle@@IAEXH@Z PROC			; CChaosCastle::CheckSync, COMDAT
; _this$ = ecx

; 278  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _iChaosCastleIndex$[ebp]
  00014	89 5d d8	 mov	 DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp], ebx
  00017	56		 push	 esi
  00018	8b f1		 mov	 esi, ecx
  0001a	89 75 e8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi

; 279  : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  0001d	85 db		 test	 ebx, ebx
  0001f	0f 88 0c 02 00
	00		 js	 $LN1@CheckSync
  00025	33 c0		 xor	 eax, eax
  00027	83 fb 06	 cmp	 ebx, 6
  0002a	0f 9e c0	 setle	 al
  0002d	85 c0		 test	 eax, eax
  0002f	0f 84 fc 01 00
	00		 je	 $LN1@CheckSync
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  00035	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00038	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 284  : 	if ( this->m_vtChaosCastleOpenTime.empty() != false )

  0003b	75 30		 jne	 SHORT $LN11@CheckSync

; 285  : 	{
; 286  : 		LogAddC(2, "[Chaos Castle] (%d) No Schedule Time Data - Chaos Castle Terminated (m_vtChaosCastleOpenTime.empty())", iChaosCastleIndex);

  0003d	53		 push	 ebx
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@HCMJNMOO@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5No?5Schedule?5@
  00043	6a 02		 push	 2
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 287  : 		this->SetState(iChaosCastleIndex+1, CC_STATE_NONE);

  0004e	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00051	8b ce		 mov	 ecx, esi
  00053	6a 00		 push	 0
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?SetState@CChaosCastle@@QAEXHH@Z ; CChaosCastle::SetState
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx

; 355  : 		iChaosCastleIndex+1, this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC / 60000,
; 356  : 		iMIN_HOUR, iMIN_MINUTE);
; 357  : 
; 358  : }

  0005d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00060	33 cd		 xor	 ecx, ebp
  00062	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
$LN11@CheckSync:
  0006d	57		 push	 edi

; 288  : 		
; 289  : 		return;
; 290  : 	}
; 291  : 
; 292  : 	SYSTEMTIME sysTime;
; 293  : 	GetLocalTime(&sysTime);

  0006e	8d 45 ec	 lea	 eax, DWORD PTR _sysTime$[ebp]
  00071	50		 push	 eax
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 294  : 	int iMIN_HOUR = 24;
; 295  : 	int iMIN_MINUTE = 60;
; 296  : 	BOOL bTIME_CHANGED = FALSE;

  00078	33 d2		 xor	 edx, edx
  0007a	c7 45 dc 3c 00
	00 00		 mov	 DWORD PTR _iMIN_MINUTE$1$[ebp], 60 ; 0000003cH
  00081	89 55 e0	 mov	 DWORD PTR _bTIME_CHANGED$1$[ebp], edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  00084	8b d6		 mov	 edx, esi
  00086	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00089	8b c8		 mov	 ecx, eax
  0008b	8b 72 24	 mov	 esi, DWORD PTR [edx+36]
  0008e	89 45 d4	 mov	 DWORD PTR _it$2$[ebp], eax
  00091	89 75 d0	 mov	 DWORD PTR $T1[ebp], esi

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00094	3b ce		 cmp	 ecx, esi
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 300  : 	for (  ; it != this->m_vtChaosCastleOpenTime.end() ; it++ )

  00096	74 71		 je	 SHORT $LN189@CheckSync
  00098	0f b7 7d f4	 movzx	 edi, WORD PTR _sysTime$[ebp+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));

  0009c	8b d6		 mov	 edx, esi
  0009e	8b df		 mov	 ebx, edi
  000a0	c1 e3 04	 shl	 ebx, 4
  000a3	2b df		 sub	 ebx, edi
  000a5	0f b7 7d f6	 movzx	 edi, WORD PTR _sysTime$[ebp+10]
  000a9	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
  000ac	89 45 e4	 mov	 DWORD PTR tv684[ebp], eax
  000af	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
$LL4@CheckSync:
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 304  : 		if ( (sysTime.wHour * 60 + sysTime.wMinute) < (stCCTime->m_iHour * 60 + stCCTime->m_iMinute) )

  000b4	8b 19		 mov	 ebx, DWORD PTR [ecx]
  000b6	8b fb		 mov	 edi, ebx
  000b8	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  000bb	c1 e7 04	 shl	 edi, 4
  000be	2b fb		 sub	 edi, ebx
  000c0	8d 34 be	 lea	 esi, DWORD PTR [esi+edi*4]
  000c3	39 75 e4	 cmp	 DWORD PTR tv684[ebp], esi
  000c6	89 75 cc	 mov	 DWORD PTR tv665[ebp], esi
  000c9	8b 75 dc	 mov	 esi, DWORD PTR _iMIN_MINUTE$1$[ebp]
  000cc	7d 21		 jge	 SHORT $LN192@CheckSync

; 305  : 		{
; 306  : 			if ( ( iMIN_HOUR * 60 + iMIN_MINUTE ) > ( stCCTime->m_iHour * 60 + stCCTime->m_iMinute ) )

  000ce	8b f8		 mov	 edi, eax
  000d0	c1 e7 04	 shl	 edi, 4
  000d3	2b f8		 sub	 edi, eax
  000d5	8d 3c be	 lea	 edi, DWORD PTR [esi+edi*4]
  000d8	3b 7d cc	 cmp	 edi, DWORD PTR tv665[ebp]
  000db	7e 12		 jle	 SHORT $LN192@CheckSync

; 307  : 			{
; 308  : 				bTIME_CHANGED = TRUE;
; 309  : 				iMIN_HOUR = stCCTime->m_iHour;
; 310  : 				iMIN_MINUTE = stCCTime->m_iMinute;

  000dd	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  000e0	bf 01 00 00 00	 mov	 edi, 1
  000e5	89 7d e0	 mov	 DWORD PTR _bTIME_CHANGED$1$[ebp], edi
  000e8	8b c3		 mov	 eax, ebx
  000ea	89 75 dc	 mov	 DWORD PTR _iMIN_MINUTE$1$[ebp], esi
  000ed	eb 03		 jmp	 SHORT $LN2@CheckSync
$LN192@CheckSync:
  000ef	8b 7d e0	 mov	 edi, DWORD PTR _bTIME_CHANGED$1$[ebp]
$LN2@CheckSync:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  000f2	83 c1 08	 add	 ecx, 8

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000f5	3b ca		 cmp	 ecx, edx
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 300  : 	for (  ; it != this->m_vtChaosCastleOpenTime.end() ; it++ )

  000f7	75 bb		 jne	 SHORT $LL4@CheckSync

; 311  : 			}
; 312  : 		}
; 313  : 	}
; 314  : 
; 315  : 	if ( bTIME_CHANGED == FALSE )

  000f9	8b 75 d0	 mov	 esi, DWORD PTR $T1[ebp]
  000fc	89 45 e4	 mov	 DWORD PTR _iMIN_HOUR$1$[ebp], eax
  000ff	8b 45 d4	 mov	 eax, DWORD PTR _it$2$[ebp]
  00102	85 ff		 test	 edi, edi
  00104	75 51		 jne	 SHORT $LN6@CheckSync
  00106	8b 55 e8	 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]
$LN189@CheckSync:

; 316  : 	{
; 317  : 		it = this->m_vtChaosCastleOpenTime.begin();
; 318  : 		iMIN_HOUR = 24;

  00109	bb 18 00 00 00	 mov	 ebx, 24			; 00000018H

; 319  : 		iMIN_MINUTE = 60;

  0010e	bf 3c 00 00 00	 mov	 edi, 60			; 0000003cH
  00113	89 5d e4	 mov	 DWORD PTR _iMIN_HOUR$1$[ebp], ebx
  00116	89 7d dc	 mov	 DWORD PTR _iMIN_MINUTE$1$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00119	3b c6		 cmp	 eax, esi
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 321  : 		for ( ; it != this->m_vtChaosCastleOpenTime.end() ; it++ )

  0011b	74 37		 je	 SHORT $LN190@CheckSync
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));

  0011d	8b 4a 24	 mov	 ecx, DWORD PTR [edx+36]
$LL7@CheckSync:
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 325  : 			if ( ( iMIN_HOUR * 60 + iMIN_MINUTE ) > ( stCCTime->m_iHour * 60 + stCCTime->m_iMinute ) )

  00120	8b 10		 mov	 edx, DWORD PTR [eax]
  00122	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00125	c1 e2 04	 shl	 edx, 4
  00128	2b 10		 sub	 edx, DWORD PTR [eax]
  0012a	8d 34 96	 lea	 esi, DWORD PTR [esi+edx*4]
  0012d	8b d3		 mov	 edx, ebx
  0012f	c1 e2 04	 shl	 edx, 4
  00132	2b d3		 sub	 edx, ebx
  00134	8d 14 97	 lea	 edx, DWORD PTR [edi+edx*4]
  00137	3b d6		 cmp	 edx, esi
  00139	7e 0c		 jle	 SHORT $LN5@CheckSync

; 326  : 			{
; 327  : 				bTIME_CHANGED = 2;
; 328  : 				iMIN_HOUR = stCCTime->m_iHour;

  0013b	8b 18		 mov	 ebx, DWORD PTR [eax]

; 329  : 				iMIN_MINUTE = stCCTime->m_iMinute;

  0013d	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00140	c7 45 e0 02 00
	00 00		 mov	 DWORD PTR _bTIME_CHANGED$1$[ebp], 2
$LN5@CheckSync:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  00147	83 c0 08	 add	 eax, 8

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0014a	3b c1		 cmp	 eax, ecx
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 321  : 		for ( ; it != this->m_vtChaosCastleOpenTime.end() ; it++ )

  0014c	75 d2		 jne	 SHORT $LL7@CheckSync
  0014e	89 7d dc	 mov	 DWORD PTR _iMIN_MINUTE$1$[ebp], edi
  00151	89 5d e4	 mov	 DWORD PTR _iMIN_HOUR$1$[ebp], ebx
$LN190@CheckSync:
  00154	8b 7d e0	 mov	 edi, DWORD PTR _bTIME_CHANGED$1$[ebp]
$LN6@CheckSync:

; 343  : 
; 344  : 		default:
; 345  : 			LogAddC(2, "[Chaos Castle] (%d) No Schedule Time Data - Chaos Castle Terminated (bTIME_CHANGED=%d)",

  00157	8b 5d d8	 mov	 ebx, DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp]
  0015a	8b c7		 mov	 eax, edi
  0015c	83 e8 01	 sub	 eax, 1
  0015f	74 54		 je	 SHORT $LN16@CheckSync

; 330  : 			}
; 331  : 		}
; 332  : 	}
; 333  : 
; 334  : 	switch ( bTIME_CHANGED )

  00161	83 e8 01	 sub	 eax, 1
  00164	74 33		 je	 SHORT $LN17@CheckSync

; 343  : 
; 344  : 		default:
; 345  : 			LogAddC(2, "[Chaos Castle] (%d) No Schedule Time Data - Chaos Castle Terminated (bTIME_CHANGED=%d)",

  00166	57		 push	 edi
  00167	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0016a	50		 push	 eax
  0016b	68 00 00 00 00	 push	 OFFSET ??_C@_0FH@CMJAMBAM@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5No?5Schedule?5@
  00170	6a 02		 push	 2
  00172	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 346  : 				iChaosCastleIndex + 1, bTIME_CHANGED);
; 347  : 			this->SetState(iChaosCastleIndex, CC_STATE_NONE);

  00178	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0017b	83 c4 10	 add	 esp, 16			; 00000010H
  0017e	6a 00		 push	 0
  00180	53		 push	 ebx
  00181	e8 00 00 00 00	 call	 ?SetState@CChaosCastle@@QAEXHH@Z ; CChaosCastle::SetState
  00186	5f		 pop	 edi
  00187	5e		 pop	 esi
  00188	5b		 pop	 ebx

; 355  : 		iChaosCastleIndex+1, this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC / 60000,
; 356  : 		iMIN_HOUR, iMIN_MINUTE);
; 357  : 
; 358  : }

  00189	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018c	33 cd		 xor	 ecx, ebp
  0018e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00193	8b e5		 mov	 esp, ebp
  00195	5d		 pop	 ebp
  00196	c2 04 00	 ret	 4
$LN17@CheckSync:

; 338  : 			break;
; 339  : 
; 340  : 		case 2:
; 341  : 			this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC = ((((iMIN_HOUR+24) * 60 * 60) + (iMIN_MINUTE * 60)) - ((sysTime.wHour * 60 * 60) + (sysTime.wMinute * 60) + (sysTime.wSecond))) * 1000;

  00199	8b 75 e4	 mov	 esi, DWORD PTR _iMIN_HOUR$1$[ebp]
  0019c	8b ce		 mov	 ecx, esi
  0019e	69 c3 68 08 00
	00		 imul	 eax, ebx, 2152
  001a4	03 45 e8	 add	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  001a7	89 45 e8	 mov	 DWORD PTR tv683[ebp], eax
  001aa	0f b7 45 f4	 movzx	 eax, WORD PTR _sysTime$[ebp+8]
  001ae	2b c8		 sub	 ecx, eax
  001b0	83 c1 18	 add	 ecx, 24			; 00000018H

; 342  : 			break;

  001b3	eb 17		 jmp	 SHORT $LN194@CheckSync
$LN16@CheckSync:

; 335  : 	{
; 336  : 		case TRUE:
; 337  : 			this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC = (((iMIN_HOUR * 60 * 60) + (iMIN_MINUTE * 60)) - ((sysTime.wHour * 60 * 60) + (sysTime.wMinute * 60) + (sysTime.wSecond))) * 1000;

  001b5	8b 75 e4	 mov	 esi, DWORD PTR _iMIN_HOUR$1$[ebp]
  001b8	8b ce		 mov	 ecx, esi
  001ba	69 c3 68 08 00
	00		 imul	 eax, ebx, 2152
  001c0	03 45 e8	 add	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  001c3	89 45 e8	 mov	 DWORD PTR tv683[ebp], eax
  001c6	0f b7 45 f4	 movzx	 eax, WORD PTR _sysTime$[ebp+8]
  001ca	2b c8		 sub	 ecx, eax
$LN194@CheckSync:
  001cc	0f b7 45 f6	 movzx	 eax, WORD PTR _sysTime$[ebp+10]
  001d0	8b d1		 mov	 edx, ecx
  001d2	8b 7d dc	 mov	 edi, DWORD PTR _iMIN_MINUTE$1$[ebp]
  001d5	c1 e2 04	 shl	 edx, 4
  001d8	2b d1		 sub	 edx, ecx
  001da	c1 e2 02	 shl	 edx, 2
  001dd	2b d0		 sub	 edx, eax
  001df	0f b7 45 f8	 movzx	 eax, WORD PTR _sysTime$[ebp+12]
  001e3	03 d7		 add	 edx, edi
  001e5	8b ca		 mov	 ecx, edx
  001e7	c1 e1 04	 shl	 ecx, 4
  001ea	2b ca		 sub	 ecx, edx
  001ec	c1 e1 02	 shl	 ecx, 2
  001ef	2b c8		 sub	 ecx, eax
  001f1	69 c1 e8 03 00
	00		 imul	 eax, ecx, 1000
  001f7	8b 4d e8	 mov	 ecx, DWORD PTR tv683[ebp]
  001fa	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 348  : 			return;
; 349  : 
; 350  : 	}
; 351  : 
; 352  : 	this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TICK_COUNT = GetTickCount();

  001fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00203	8b 4d e8	 mov	 ecx, DWORD PTR tv683[ebp]

; 353  : 
; 354  : 	LogAddTD("[Chaos Castle] (%d) Sync Start Time. [%d] min remain (START HOUR:%d, MIN:%d)",

  00206	57		 push	 edi
  00207	56		 push	 esi
  00208	89 41 40	 mov	 DWORD PTR [ecx+64], eax
  0020b	b8 73 b2 e7 45	 mov	 eax, 1172812403		; 45e7b273H
  00210	f7 69 3c	 imul	 DWORD PTR [ecx+60]
  00213	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00216	8b c2		 mov	 eax, edx
  00218	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0021b	03 c2		 add	 eax, edx
  0021d	50		 push	 eax
  0021e	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00221	50		 push	 eax
  00222	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@IGEPIJHA@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Sync?5Start?5T@
  00227	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0022d	83 c4 14	 add	 esp, 20			; 00000014H
  00230	5f		 pop	 edi
$LN1@CheckSync:

; 355  : 		iChaosCastleIndex+1, this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC / 60000,
; 356  : 		iMIN_HOUR, iMIN_MINUTE);
; 357  : 
; 358  : }

  00231	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00234	5e		 pop	 esi
  00235	33 cd		 xor	 ecx, ebp
  00237	5b		 pop	 ebx
  00238	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023d	8b e5		 mov	 esp, ebp
  0023f	5d		 pop	 ebp
  00240	c2 04 00	 ret	 4
?CheckSync@CChaosCastle@@IAEXH@Z ENDP			; CChaosCastle::CheckSync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?GetMap@CChaosCastle@@QAEHH@Z
_TEXT	SEGMENT
_iFloorIndex$ = 8					; size = 4
?GetMap@CChaosCastle@@QAEHH@Z PROC			; CChaosCastle::GetMap, COMDAT
; _this$ = ecx

; 3315 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3316 : 	int Map = 0;
; 3317 : 
; 3318 : 	switch( iFloorIndex )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _iFloorIndex$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	83 f9 06	 cmp	 ecx, 6
  0000b	77 42		 ja	 SHORT $LN2@GetMap
  0000d	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN13@GetMap[ecx*4]
$LN4@GetMap:

; 3319 : 	{
; 3320 : 	case 0:	Map = 18; break;

  00014	b8 12 00 00 00	 mov	 eax, 18			; 00000012H

; 3327 : 	}
; 3328 : 
; 3329 : return Map;
; 3330 : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
$LN5@GetMap:

; 3321 : 	case 1:	Map = 19; break;

  0001d	b8 13 00 00 00	 mov	 eax, 19			; 00000013H

; 3327 : 	}
; 3328 : 
; 3329 : return Map;
; 3330 : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN6@GetMap:

; 3322 : 	case 2:	Map = 20; break;

  00026	b8 14 00 00 00	 mov	 eax, 20			; 00000014H

; 3327 : 	}
; 3328 : 
; 3329 : return Map;
; 3330 : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
$LN7@GetMap:

; 3323 : 	case 3:	Map = 21; break;

  0002f	b8 15 00 00 00	 mov	 eax, 21			; 00000015H

; 3327 : 	}
; 3328 : 
; 3329 : return Map;
; 3330 : }

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN8@GetMap:

; 3324 : 	case 4:	Map = 22; break;

  00038	b8 16 00 00 00	 mov	 eax, 22			; 00000016H

; 3327 : 	}
; 3328 : 
; 3329 : return Map;
; 3330 : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
$LN9@GetMap:

; 3325 : 	case 5:	Map = 23; break;

  00041	b8 17 00 00 00	 mov	 eax, 23			; 00000017H

; 3327 : 	}
; 3328 : 
; 3329 : return Map;
; 3330 : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN10@GetMap:

; 3326 : 	case 6:	Map = 53; break;

  0004a	b8 35 00 00 00	 mov	 eax, 53			; 00000035H
$LN2@GetMap:

; 3327 : 	}
; 3328 : 
; 3329 : return Map;
; 3330 : }

  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
  00053	90		 npad	 1
$LN13@GetMap:
  00054	00 00 00 00	 DD	 $LN4@GetMap
  00058	00 00 00 00	 DD	 $LN5@GetMap
  0005c	00 00 00 00	 DD	 $LN6@GetMap
  00060	00 00 00 00	 DD	 $LN7@GetMap
  00064	00 00 00 00	 DD	 $LN8@GetMap
  00068	00 00 00 00	 DD	 $LN9@GetMap
  0006c	00 00 00 00	 DD	 $LN10@GetMap
?GetMap@CChaosCastle@@QAEHH@Z ENDP			; CChaosCastle::GetMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?GetFloor@CChaosCastle@@QAEHH@Z
_TEXT	SEGMENT
_MapNumber$ = 8						; size = 4
?GetFloor@CChaosCastle@@QAEHH@Z PROC			; CChaosCastle::GetFloor, COMDAT
; _this$ = ecx

; 3297 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3298 : 	int Floor = -1;
; 3299 : 
; 3300 : 	switch( MapNumber )

  00003	8b 45 08	 mov	 eax, DWORD PTR _MapNumber$[ebp]
  00006	83 c9 ff	 or	 ecx, -1
  00009	83 c0 ee	 add	 eax, -18		; ffffffeeH
  0000c	83 f8 23	 cmp	 eax, 35			; 00000023H
  0000f	77 52		 ja	 SHORT $LN2@GetFloor
  00011	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN12@GetFloor[eax]
  00018	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN14@GetFloor[eax*4]
$LN4@GetFloor:

; 3301 : 	{
; 3302 : 	case 18:	Floor = 0; break;

  0001f	33 c9		 xor	 ecx, ecx

; 3309 : 	}
; 3310 : 
; 3311 : return Floor;

  00021	8b c1		 mov	 eax, ecx

; 3312 : }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
$LN5@GetFloor:

; 3303 : 	case 19:	Floor = 1; break;

  00027	b9 01 00 00 00	 mov	 ecx, 1

; 3309 : 	}
; 3310 : 
; 3311 : return Floor;

  0002c	8b c1		 mov	 eax, ecx

; 3312 : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
$LN6@GetFloor:

; 3304 : 	case 20:	Floor = 2; break;

  00032	b9 02 00 00 00	 mov	 ecx, 2

; 3309 : 	}
; 3310 : 
; 3311 : return Floor;

  00037	8b c1		 mov	 eax, ecx

; 3312 : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
$LN7@GetFloor:

; 3305 : 	case 21:	Floor = 3; break;

  0003d	b9 03 00 00 00	 mov	 ecx, 3

; 3309 : 	}
; 3310 : 
; 3311 : return Floor;

  00042	8b c1		 mov	 eax, ecx

; 3312 : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN8@GetFloor:

; 3306 : 	case 22:	Floor = 4; break;

  00048	b9 04 00 00 00	 mov	 ecx, 4

; 3309 : 	}
; 3310 : 
; 3311 : return Floor;

  0004d	8b c1		 mov	 eax, ecx

; 3312 : }

  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
$LN9@GetFloor:

; 3307 : 	case 23:	Floor = 5; break;

  00053	b9 05 00 00 00	 mov	 ecx, 5

; 3309 : 	}
; 3310 : 
; 3311 : return Floor;

  00058	8b c1		 mov	 eax, ecx

; 3312 : }

  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
$LN10@GetFloor:

; 3308 : 	case 53:	Floor = 6; break;

  0005e	b9 06 00 00 00	 mov	 ecx, 6
$LN2@GetFloor:

; 3309 : 	}
; 3310 : 
; 3311 : return Floor;

  00063	8b c1		 mov	 eax, ecx

; 3312 : }

  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
  00069	0f 1f 00	 npad	 3
$LN14@GetFloor:
  0006c	00 00 00 00	 DD	 $LN4@GetFloor
  00070	00 00 00 00	 DD	 $LN5@GetFloor
  00074	00 00 00 00	 DD	 $LN6@GetFloor
  00078	00 00 00 00	 DD	 $LN7@GetFloor
  0007c	00 00 00 00	 DD	 $LN8@GetFloor
  00080	00 00 00 00	 DD	 $LN9@GetFloor
  00084	00 00 00 00	 DD	 $LN10@GetFloor
  00088	00 00 00 00	 DD	 $LN2@GetFloor
$LN12@GetFloor:
  0008c	00		 DB	 0
  0008d	01		 DB	 1
  0008e	02		 DB	 2
  0008f	03		 DB	 3
  00090	04		 DB	 4
  00091	05		 DB	 5
  00092	07		 DB	 7
  00093	07		 DB	 7
  00094	07		 DB	 7
  00095	07		 DB	 7
  00096	07		 DB	 7
  00097	07		 DB	 7
  00098	07		 DB	 7
  00099	07		 DB	 7
  0009a	07		 DB	 7
  0009b	07		 DB	 7
  0009c	07		 DB	 7
  0009d	07		 DB	 7
  0009e	07		 DB	 7
  0009f	07		 DB	 7
  000a0	07		 DB	 7
  000a1	07		 DB	 7
  000a2	07		 DB	 7
  000a3	07		 DB	 7
  000a4	07		 DB	 7
  000a5	07		 DB	 7
  000a6	07		 DB	 7
  000a7	07		 DB	 7
  000a8	07		 DB	 7
  000a9	07		 DB	 7
  000aa	07		 DB	 7
  000ab	07		 DB	 7
  000ac	07		 DB	 7
  000ad	07		 DB	 7
  000ae	07		 DB	 7
  000af	06		 DB	 6
?GetFloor@CChaosCastle@@QAEHH@Z ENDP			; CChaosCastle::GetFloor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?CheckRegisterOfflineGift@CChaosCastle@@QAEXH@Z
_TEXT	SEGMENT
_iUserIndex$ = 8					; size = 4
?CheckRegisterOfflineGift@CChaosCastle@@QAEXH@Z PROC	; CChaosCastle::CheckRegisterOfflineGift, COMDAT
; _this$ = ecx

; 3282 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3283 : 	if ( gObjIsConnected(iUserIndex) == FALSE )

  00003	ff 75 08	 push	 DWORD PTR _iUserIndex$[ebp]
  00006	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000b	83 c4 04	 add	 esp, 4
  0000e	85 c0		 test	 eax, eax
  00010	74 20		 je	 SHORT $LN3@CheckRegis

; 3284 : 	{
; 3285 : 		return;
; 3286 : 	}
; 3287 : 
; 3288 : 	int iGiftRate = rand() % 10000;

  00012	e8 00 00 00 00	 call	 _rand
  00017	99		 cdq
  00018	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0001d	f7 f9		 idiv	 ecx

; 3289 : 
; 3290 : 	if ( iGiftRate < ::g_iChaosCastle_OffLineGiftRate )

  0001f	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?g_iChaosCastle_OffLineGiftRate@@3HA ; g_iChaosCastle_OffLineGiftRate
  00025	7d 0b		 jge	 SHORT $LN3@CheckRegis

; 3291 : 	{
; 3292 : 		EGReqRegCCOfflineGift(iUserIndex);

  00027	ff 75 08	 push	 DWORD PTR _iUserIndex$[ebp]
  0002a	e8 00 00 00 00	 call	 ?EGReqRegCCOfflineGift@@YAXH@Z ; EGReqRegCCOfflineGift
  0002f	83 c4 04	 add	 esp, 4
$LN3@CheckRegis:

; 3293 : 	}
; 3294 : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?CheckRegisterOfflineGift@CChaosCastle@@QAEXH@Z ENDP	; CChaosCastle::CheckRegisterOfflineGift
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SetMapAttrFill@CChaosCastle@@QAEXH@Z
_TEXT	SEGMENT
$T1 = -24						; size = 4
_c$1$ = -20						; size = 4
_this$1$ = -16						; size = 4
tv535 = -12						; size = 4
$T2 = -8						; size = 4
tv534 = -4						; size = 4
_iChaosCastleIndex$ = 8					; size = 4
?SetMapAttrFill@CChaosCastle@@QAEXH@Z PROC		; CChaosCastle::SetMapAttrFill, COMDAT
; _this$ = ecx

; 876  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx

; 877  : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _iChaosCastleIndex$[ebp]
  0000a	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	85 db		 test	 ebx, ebx
  0000f	0f 88 b5 00 00
	00		 js	 $LN3@SetMapAttr
  00015	33 c0		 xor	 eax, eax
  00017	83 fb 06	 cmp	 ebx, 6
  0001a	0f 9e c0	 setle	 al
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 a5 00 00
	00		 je	 $LN3@SetMapAttr

; 878  : 	{
; 879  : 		return;
; 880  : 	}
; 881  : 	
; 882  : 	for ( int iTRAP_STEP=1;iTRAP_STEP<MAX_CC_TRAP_STEP;iTRAP_STEP++)

  00025	56		 push	 esi
  00026	b8 40 00 00 00	 mov	 eax, OFFSET ?g_iChaosCastle_MapHollowZone@@3PAY133HA+64
  0002b	57		 push	 edi
  0002c	0f 1f 40 00	 npad	 4
$LL4@SetMapAttr:

; 883  : 	{
; 884  : 		for ( int a=0;a<MAX_CC_HOLLOW_ZONE;a++)

  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	89 45 fc	 mov	 DWORD PTR tv534[ebp], eax
  00038	89 55 f4	 mov	 DWORD PTR tv535[ebp], edx
  0003b	0f 1f 44 00 00	 npad	 5
$LL7@SetMapAttr:

; 885  : 		{
; 886  : 			for ( int b=::g_iChaosCastle_MapHollowZone[iTRAP_STEP][a][0] ; b<=::g_iChaosCastle_MapHollowZone[iTRAP_STEP][a][2] ; b++)

  00040	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00043	8b 38		 mov	 edi, DWORD PTR [eax]
  00045	89 4d e8	 mov	 DWORD PTR $T1[ebp], ecx
  00048	3b f9		 cmp	 edi, ecx
  0004a	7f 63		 jg	 SHORT $LN5@SetMapAttr

; 887  : 			{
; 888  : 				for ( int c=::g_iChaosCastle_MapHollowZone[iTRAP_STEP][a][1] ; c<=::g_iChaosCastle_MapHollowZone[iTRAP_STEP][a][3] ; c++)

  0004c	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0004f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00052	89 75 ec	 mov	 DWORD PTR _c$1$[ebp], esi
  00055	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
$LL10@SetMapAttr:
  00058	3b f0		 cmp	 esi, eax
  0005a	7f 48		 jg	 SHORT $LN8@SetMapAttr

; 889  : 				{
; 890  : 					int MapNumber = GetMap(iChaosCastleIndex);

  0005c	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0005f	53		 push	 ebx
  00060	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap
  00065	8b 4d fc	 mov	 ecx, DWORD PTR tv534[ebp]
  00068	69 d8 28 38 05
	00		 imul	 ebx, eax, 342056
  0006e	8b c6		 mov	 eax, esi
  00070	8b 75 f8	 mov	 esi, DWORD PTR $T2[ebp]
  00073	c1 e0 08	 shl	 eax, 8
  00076	2b 71 04	 sub	 esi, DWORD PTR [ecx+4]
  00079	46		 inc	 esi
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL13@SetMapAttr:

; 891  : 					MapC[MapNumber].m_attrbuf[ c * 256 + b] &= ~8;

  00080	8b 8b 10 00 00
	00		 mov	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[ebx+16]
  00086	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]
  00089	8d 80 00 01 00
	00		 lea	 eax, DWORD PTR [eax+256]
  0008f	80 24 0a f7	 and	 BYTE PTR [edx+ecx], 247	; 000000f7H
  00093	83 ee 01	 sub	 esi, 1
  00096	75 e8		 jne	 SHORT $LL13@SetMapAttr
  00098	8b 75 ec	 mov	 esi, DWORD PTR _c$1$[ebp]
  0009b	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  0009e	8b 4d e8	 mov	 ecx, DWORD PTR $T1[ebp]
  000a1	8b 5d 08	 mov	 ebx, DWORD PTR _iChaosCastleIndex$[ebp]
$LN8@SetMapAttr:

; 885  : 		{
; 886  : 			for ( int b=::g_iChaosCastle_MapHollowZone[iTRAP_STEP][a][0] ; b<=::g_iChaosCastle_MapHollowZone[iTRAP_STEP][a][2] ; b++)

  000a4	47		 inc	 edi
  000a5	3b f9		 cmp	 edi, ecx
  000a7	7e af		 jle	 SHORT $LL10@SetMapAttr
  000a9	8b 45 fc	 mov	 eax, DWORD PTR tv534[ebp]
  000ac	8b 55 f4	 mov	 edx, DWORD PTR tv535[ebp]
$LN5@SetMapAttr:

; 883  : 	{
; 884  : 		for ( int a=0;a<MAX_CC_HOLLOW_ZONE;a++)

  000af	83 c0 10	 add	 eax, 16			; 00000010H
  000b2	83 ea 01	 sub	 edx, 1
  000b5	89 45 fc	 mov	 DWORD PTR tv534[ebp], eax
  000b8	89 55 f4	 mov	 DWORD PTR tv535[ebp], edx
  000bb	75 83		 jne	 SHORT $LL7@SetMapAttr

; 878  : 	{
; 879  : 		return;
; 880  : 	}
; 881  : 	
; 882  : 	for ( int iTRAP_STEP=1;iTRAP_STEP<MAX_CC_TRAP_STEP;iTRAP_STEP++)

  000bd	3d 00 01 00 00	 cmp	 eax, OFFSET ?g_iChaosCastle_MapHollowZone@@3PAY133HA+256
  000c2	0f 8c 68 ff ff
	ff		 jl	 $LL4@SetMapAttr
  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
$LN3@SetMapAttr:
  000ca	5b		 pop	 ebx

; 892  : 				}
; 893  : 			}
; 894  : 		}
; 895  : 	}
; 896  : }

  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c2 04 00	 ret	 4
?SetMapAttrFill@CChaosCastle@@QAEXH@Z ENDP		; CChaosCastle::SetMapAttrFill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SetMapAttrHollow@CChaosCastle@@QAEXHH@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
_this$1$ = -8						; size = 4
tv499 = -4						; size = 4
_iChaosCastleIndex$ = 8					; size = 4
tv502 = 12						; size = 4
_iTRAP_STEP$ = 12					; size = 4
?SetMapAttrHollow@CChaosCastle@@QAEXHH@Z PROC		; CChaosCastle::SetMapAttrHollow, COMDAT
; _this$ = ecx

; 841  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	57		 push	 edi

; 842  : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00007	8b 7d 08	 mov	 edi, DWORD PTR _iChaosCastleIndex$[ebp]
  0000a	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	85 ff		 test	 edi, edi
  0000f	0f 88 b4 00 00
	00		 js	 $LN3@SetMapAttr
  00015	33 c0		 xor	 eax, eax
  00017	83 ff 06	 cmp	 edi, 6
  0001a	0f 9e c0	 setle	 al
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 a4 00 00
	00		 je	 $LN3@SetMapAttr

; 843  : 	{
; 844  : 		return;
; 845  : 	}
; 846  : 
; 847  : 	if ( CC_TRAP_STEP_RANGE(iTRAP_STEP) == FALSE )

  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _iTRAP_STEP$[ebp]
  00028	85 c9		 test	 ecx, ecx
  0002a	0f 88 99 00 00
	00		 js	 $LN3@SetMapAttr
  00030	33 c0		 xor	 eax, eax
  00032	83 f9 03	 cmp	 ecx, 3
  00035	0f 9e c0	 setle	 al
  00038	85 c0		 test	 eax, eax
  0003a	0f 84 89 00 00
	00		 je	 $LN3@SetMapAttr

; 848  : 	{
; 849  : 		return;
; 850  : 	}
; 851  : 
; 852  : 	if ( iTRAP_STEP == 0 )

  00040	85 c9		 test	 ecx, ecx
  00042	0f 84 81 00 00
	00		 je	 $LN3@SetMapAttr

; 860  : 		{
; 861  : 			for ( int c=::g_iChaosCastle_MapHollowZone[iTRAP_STEP][a][1] ; c<=::g_iChaosCastle_MapHollowZone[iTRAP_STEP][a][3] ; c++)

  00048	c1 e1 06	 shl	 ecx, 6
  0004b	ba 04 00 00 00	 mov	 edx, 4
  00050	53		 push	 ebx
  00051	89 55 fc	 mov	 DWORD PTR tv499[ebp], edx
  00054	56		 push	 esi
  00055	8d 81 00 00 00
	00		 lea	 eax, DWORD PTR ?g_iChaosCastle_MapHollowZone@@3PAY133HA[ecx]
  0005b	89 45 0c	 mov	 DWORD PTR tv502[ebp], eax
  0005e	66 90		 npad	 2
$LL4@SetMapAttr:

; 858  : 	{
; 859  : 		for ( int b=::g_iChaosCastle_MapHollowZone[iTRAP_STEP][a][0] ; b<=::g_iChaosCastle_MapHollowZone[iTRAP_STEP][a][2] ; b++)

  00060	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00063	8b 30		 mov	 esi, DWORD PTR [eax]
  00065	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
  00068	3b f1		 cmp	 esi, ecx
  0006a	7f 4d		 jg	 SHORT $LN2@SetMapAttr

; 860  : 		{
; 861  : 			for ( int c=::g_iChaosCastle_MapHollowZone[iTRAP_STEP][a][1] ; c<=::g_iChaosCastle_MapHollowZone[iTRAP_STEP][a][3] ; c++)

  0006c	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  0006f	90		 npad	 1
$LL7@SetMapAttr:
  00070	3b 58 0c	 cmp	 ebx, DWORD PTR [eax+12]
  00073	7f 3c		 jg	 SHORT $LN5@SetMapAttr

; 862  : 			{
; 863  : 				int MapNumber = GetMap(iChaosCastleIndex);

  00075	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00078	57		 push	 edi
  00079	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap
  0007e	8b 55 0c	 mov	 edx, DWORD PTR tv502[ebp]
  00081	69 f8 28 38 05
	00		 imul	 edi, eax, 342056
  00087	8b c3		 mov	 eax, ebx
  00089	c1 e0 08	 shl	 eax, 8
  0008c	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  0008f	2b d3		 sub	 edx, ebx
  00091	42		 inc	 edx
$LL10@SetMapAttr:

; 864  : 				MapC[MapNumber].m_attrbuf[ c * 256 + b] |= 8;

  00092	8b 8f 10 00 00
	00		 mov	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[edi+16]
  00098	03 c8		 add	 ecx, eax
  0009a	05 00 01 00 00	 add	 eax, 256		; 00000100H
  0009f	80 0c 31 08	 or	 BYTE PTR [ecx+esi], 8
  000a3	83 ea 01	 sub	 edx, 1
  000a6	75 ea		 jne	 SHORT $LL10@SetMapAttr
  000a8	8b 45 0c	 mov	 eax, DWORD PTR tv502[ebp]
  000ab	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  000ae	8b 7d 08	 mov	 edi, DWORD PTR _iChaosCastleIndex$[ebp]
$LN5@SetMapAttr:

; 858  : 	{
; 859  : 		for ( int b=::g_iChaosCastle_MapHollowZone[iTRAP_STEP][a][0] ; b<=::g_iChaosCastle_MapHollowZone[iTRAP_STEP][a][2] ; b++)

  000b1	46		 inc	 esi
  000b2	3b f1		 cmp	 esi, ecx
  000b4	7e ba		 jle	 SHORT $LL7@SetMapAttr
  000b6	8b 55 fc	 mov	 edx, DWORD PTR tv499[ebp]
$LN2@SetMapAttr:

; 853  : 	{
; 854  : 		return;
; 855  : 	}
; 856  : 
; 857  : 	for ( int a=0;a<MAX_CC_HOLLOW_ZONE;a++)

  000b9	83 c0 10	 add	 eax, 16			; 00000010H
  000bc	83 ea 01	 sub	 edx, 1
  000bf	89 45 0c	 mov	 DWORD PTR tv502[ebp], eax
  000c2	89 55 fc	 mov	 DWORD PTR tv499[ebp], edx
  000c5	75 99		 jne	 SHORT $LL4@SetMapAttr
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
$LN3@SetMapAttr:
  000c9	5f		 pop	 edi

; 865  : 			}
; 866  : 		}
; 867  : 	}
; 868  : 	
; 869  : }

  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 08 00	 ret	 8
?SetMapAttrHollow@CChaosCastle@@QAEXHH@Z ENDP		; CChaosCastle::SetMapAttrHollow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?PullObjInnerPlace@CChaosCastle@@QAEXHH@Z
_TEXT	SEGMENT
_iPT$2 = -100						; size = 8
tv2250 = -92						; size = 4
tv2174 = -92						; size = 4
_iUSER_AXIS$1$ = -88					; size = 4
_iChaosCastleIndex$GSCopy$1$ = -80			; size = 4
_this$GSCopy$1$ = -76					; size = 4
tv2256 = -72						; size = 4
tv2222 = -72						; size = 4
_iPT$1$ = -72						; size = 4
tv2252 = -68						; size = 4
tv2236 = -68						; size = 4
_vtMAP_UNTRAP$ = -64					; size = 48
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iChaosCastleIndex$ = 8					; size = 4
_iTRAP_STEP$ = 12					; size = 4
?PullObjInnerPlace@CChaosCastle@@QAEXHH@Z PROC		; CChaosCastle::PullObjInnerPlace, COMDAT
; _this$ = ecx

; 688  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PullObjInnerPlace@CChaosCastle@@QAEXHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d b4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002e	8b 5d 08	 mov	 ebx, DWORD PTR _iChaosCastleIndex$[ebp]
  00031	89 5d b0	 mov	 DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp], ebx

; 689  : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00034	85 db		 test	 ebx, ebx
  00036	0f 88 76 04 00
	00		 js	 $LN1@PullObjInn
  0003c	33 c0		 xor	 eax, eax
  0003e	83 fb 06	 cmp	 ebx, 6
  00041	0f 9e c0	 setle	 al
  00044	85 c0		 test	 eax, eax
  00046	0f 84 66 04 00
	00		 je	 $LN1@PullObjInn

; 690  : 		return;
; 691  : 
; 692  : 	if ( CC_TRAP_STEP_RANGE(iTRAP_STEP) == FALSE )

  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR _iTRAP_STEP$[ebp]
  0004f	85 c9		 test	 ecx, ecx
  00051	0f 88 5b 04 00
	00		 js	 $LN1@PullObjInn
  00057	33 c0		 xor	 eax, eax
  00059	83 f9 03	 cmp	 ecx, 3
  0005c	0f 9e c0	 setle	 al
  0005f	85 c0		 test	 eax, eax
  00061	0f 84 4b 04 00
	00		 je	 $LN1@PullObjInn

; 693  : 		return;
; 694  : 
; 695  : 	if ( iTRAP_STEP == 0 )

  00067	85 c9		 test	 ecx, ecx
  00069	0f 84 43 04 00
	00		 je	 $LN1@PullObjInn

; 696  : 		return;
; 697  : 
; 698  : 	int iUSER_AXIS = 0;
; 699  : 	std::vector<POINT> vtMAP_UNTRAP[MAX_CC_TRAP_STEP];

  0006f	68 00 00 00 00	 push	 OFFSET ??1?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE@XZ ; std::vector<tagPOINT,std::allocator<tagPOINT> >::~vector<tagPOINT,std::allocator<tagPOINT> >
  00074	68 00 00 00 00	 push	 OFFSET ??0?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE@XZ ; std::vector<tagPOINT,std::allocator<tagPOINT> >::vector<tagPOINT,std::allocator<tagPOINT> >
  00079	6a 04		 push	 4
  0007b	6a 0c		 push	 12			; 0000000cH
  0007d	8d 45 c0	 lea	 eax, DWORD PTR _vtMAP_UNTRAP$[ebp]
  00080	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _iUSER_AXIS$1$[ebp], 0
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  0008d	b8 0c 00 00 00	 mov	 eax, OFFSET ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+12
  00092	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00099	89 45 bc	 mov	 DWORD PTR tv2236[ebp], eax
  0009c	8d 75 c4	 lea	 esi, DWORD PTR _vtMAP_UNTRAP$[ebp+4]
  0009f	90		 npad	 1
$LL4@PullObjInn:

; 702  : 	{
; 703  : 		for ( int iMAPX = g_rtPOINT_TRAP[iAXIS].left ; iMAPX <= g_rtPOINT_TRAP[iAXIS].right ; iMAPX ++ )

  000a0	8b 78 f4	 mov	 edi, DWORD PTR [eax-12]
  000a3	89 7d b8	 mov	 DWORD PTR _iPT$1$[ebp], edi
  000a6	3b 78 fc	 cmp	 edi, DWORD PTR [eax-4]
  000a9	0f 8f b9 00 00
	00		 jg	 $LN2@PullObjInn
  000af	90		 npad	 1
$LL7@PullObjInn:

; 705  : 			for ( int iMAPY = g_rtPOINT_TRAP[iAXIS].top ; iMAPY <= g_rtPOINT_TRAP[iAXIS].bottom ; iMAPY++ )

  000b0	8b 58 f8	 mov	 ebx, DWORD PTR [eax-8]
  000b3	3b 18		 cmp	 ebx, DWORD PTR [eax]
  000b5	0f 8f a0 00 00
	00		 jg	 $LN5@PullObjInn

; 706  : 			{
; 707  : 				int MapNumber = GetMap(iChaosCastleIndex);

  000bb	ff 75 b0	 push	 DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp]
  000be	8b 4d b4	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000c1	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap
  000c6	69 c0 28 38 05
	00		 imul	 eax, eax, 342056
  000cc	8d 88 00 00 00
	00		 lea	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[eax]
  000d2	89 4d a4	 mov	 DWORD PTR tv2250[ebp], ecx
$LL10@PullObjInn:

; 708  : 				BYTE btMapAttr = MapC[MapNumber].GetAttr(iMAPX, iMAPY);

  000d5	53		 push	 ebx
  000d6	57		 push	 edi
  000d7	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  000dc	a8 0e		 test	 al, 14			; 0000000eH

; 709  : 
; 710  : 				if ( (btMapAttr&2) != 2 && (btMapAttr&4) != 4 && (btMapAttr&8) != 8 ) 

  000de	75 6c		 jne	 SHORT $LN8@PullObjInn
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  000e0	8b 06		 mov	 eax, DWORD PTR [esi]
  000e2	8d 4d 9c	 lea	 ecx, DWORD PTR _iPT$2[ebp]
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 712  : 					POINT iPT = {iMAPX, iMAPY};

  000e5	89 7d 9c	 mov	 DWORD PTR _iPT$2[ebp], edi
  000e8	89 5d a0	 mov	 DWORD PTR _iPT$2[ebp+4], ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  000eb	3b c8		 cmp	 ecx, eax
  000ed	73 40		 jae	 SHORT $LN61@PullObjInn
  000ef	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  000f2	8d 4e fc	 lea	 ecx, DWORD PTR [esi-4]
  000f5	8d 7d 9c	 lea	 edi, DWORD PTR _iPT$2[ebp]
  000f8	3b d7		 cmp	 edx, edi
  000fa	8b 7d b8	 mov	 edi, DWORD PTR _iPT$1$[ebp]
  000fd	77 30		 ja	 SHORT $LN61@PullObjInn

; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  000ff	8d 7d 9c	 lea	 edi, DWORD PTR _iPT$2[ebp]
  00102	2b fa		 sub	 edi, edx
  00104	c1 ff 03	 sar	 edi, 3

; 1278 : 			if (this->_Mylast() == this->_Myend())

  00107	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0010a	75 0a		 jne	 SHORT $LN63@PullObjInn

; 1279 : 				_Reserve(1);

  0010c	6a 01		 push	 1
  0010e	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Reserve
  00113	8d 4e fc	 lea	 ecx, DWORD PTR [esi-4]
$LN63@PullObjInn:

; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),

  00116	8b 11		 mov	 edx, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00118	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0011a	85 c9		 test	 ecx, ecx
  0011c	74 0c		 je	 SHORT $LN183@PullObjInn
  0011e	8b 04 fa	 mov	 eax, DWORD PTR [edx+edi*8]
  00121	89 01		 mov	 DWORD PTR [ecx], eax
  00123	8b 44 fa 04	 mov	 eax, DWORD PTR [edx+edi*8+4]
  00127	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN183@PullObjInn:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1285 : 		else

  0012a	8b 7d b8	 mov	 edi, DWORD PTR _iPT$1$[ebp]
  0012d	eb 1a		 jmp	 SHORT $LN264@PullObjInn
$LN61@PullObjInn:

; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  0012f	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00132	75 0a		 jne	 SHORT $LN64@PullObjInn

; 1288 : 				_Reserve(1);

  00134	6a 01		 push	 1
  00136	8d 4e fc	 lea	 ecx, DWORD PTR [esi-4]
  00139	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Reserve
$LN64@PullObjInn:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0013e	8b 06		 mov	 eax, DWORD PTR [esi]
  00140	85 c0		 test	 eax, eax
  00142	74 05		 je	 SHORT $LN264@PullObjInn
  00144	89 38		 mov	 DWORD PTR [eax], edi
  00146	89 58 04	 mov	 DWORD PTR [eax+4], ebx
$LN264@PullObjInn:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00149	83 06 08	 add	 DWORD PTR [esi], 8
$LN8@PullObjInn:
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 705  : 			for ( int iMAPY = g_rtPOINT_TRAP[iAXIS].top ; iMAPY <= g_rtPOINT_TRAP[iAXIS].bottom ; iMAPY++ )

  0014c	8b 45 bc	 mov	 eax, DWORD PTR tv2236[ebp]
  0014f	43		 inc	 ebx
  00150	8b 4d a4	 mov	 ecx, DWORD PTR tv2250[ebp]
  00153	3b 18		 cmp	 ebx, DWORD PTR [eax]
  00155	0f 8e 7a ff ff
	ff		 jle	 $LL10@PullObjInn
$LN5@PullObjInn:

; 702  : 	{
; 703  : 		for ( int iMAPX = g_rtPOINT_TRAP[iAXIS].left ; iMAPX <= g_rtPOINT_TRAP[iAXIS].right ; iMAPX ++ )

  0015b	47		 inc	 edi
  0015c	89 7d b8	 mov	 DWORD PTR _iPT$1$[ebp], edi
  0015f	3b 78 fc	 cmp	 edi, DWORD PTR [eax-4]
  00162	0f 8e 48 ff ff
	ff		 jle	 $LL7@PullObjInn
$LN2@PullObjInn:

; 700  : 
; 701  : 	for ( int iAXIS = 0; iAXIS < MAX_CC_TRAP_STEP ; iAXIS++)

  00168	83 c0 10	 add	 eax, 16			; 00000010H
  0016b	83 c6 0c	 add	 esi, 12			; 0000000cH
  0016e	89 45 bc	 mov	 DWORD PTR tv2236[ebp], eax
  00171	3d 4c 00 00 00	 cmp	 eax, OFFSET ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+76
  00176	0f 8c 24 ff ff
	ff		 jl	 $LL4@PullObjInn

; 713  : 					vtMAP_UNTRAP[iAXIS].push_back(iPT);
; 714  : 				}
; 715  : 			}
; 716  : 		}
; 717  : 	}
; 718  : 
; 719  : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  0017c	8b 7d b0	 mov	 edi, DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp]
  0017f	8b 75 b4	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  00182	69 c7 68 08 00
	00		 imul	 eax, edi, 2152
  00188	c7 45 b8 46 00
	00 00		 mov	 DWORD PTR tv2256[ebp], 70 ; 00000046H
  0018f	8d 5e 68	 lea	 ebx, DWORD PTR [esi+104]
  00192	89 45 a4	 mov	 DWORD PTR tv2174[ebp], eax
  00195	03 d8		 add	 ebx, eax
  00197	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL13@PullObjInn:

; 720  : 	{
; 721  : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex != -1 )

  001a0	8b 03		 mov	 eax, DWORD PTR [ebx]
  001a2	83 f8 ff	 cmp	 eax, -1
  001a5	0f 84 eb 00 00
	00		 je	 $LN11@PullObjInn

; 722  : 		{
; 723  : 			if ( gObjIsConnected(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex) ==TRUE && gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].MapNumber == GetMap(iChaosCastleIndex) )

  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  001b1	83 c4 04	 add	 esp, 4
  001b4	83 f8 01	 cmp	 eax, 1
  001b7	0f 85 d9 00 00
	00		 jne	 $LN11@PullObjInn
  001bd	57		 push	 edi
  001be	8b ce		 mov	 ecx, esi
  001c0	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap
  001c5	69 33 40 27 00
	00		 imul	 esi, DWORD PTR [ebx], 10048
  001cb	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001d1	0f b6 8c 3e 23
	01 00 00	 movzx	 ecx, BYTE PTR [esi+edi+291]
  001d9	3b c8		 cmp	 ecx, eax
  001db	0f 85 af 00 00
	00		 jne	 $LN499@PullObjInn

; 724  : 			{
; 725  : 				int iSX = gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].X;

  001e1	0f b6 94 3e 20
	01 00 00	 movzx	 edx, BYTE PTR [esi+edi+288]

; 726  : 				int iSY = gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].Y;

  001e9	0f b6 b4 3e 21
	01 00 00	 movzx	 esi, BYTE PTR [esi+edi+289]

; 727  : 
; 728  : 				int MapNumber = GetMap(iChaosCastleIndex);
; 729  : 
; 730  : 				BYTE btMapAttr = MapC[MapNumber].m_attrbuf[iSY * 256 + iSX] & 0x08;

  001f1	69 c0 28 38 05
	00		 imul	 eax, eax, 342056
  001f7	8b ce		 mov	 ecx, esi
  001f9	c1 e1 08	 shl	 ecx, 8
  001fc	03 88 10 00 00
	00		 add	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[eax+16]
  00202	8a 04 11	 mov	 al, BYTE PTR [ecx+edx]
  00205	24 08		 and	 al, 8

; 731  : 
; 732  : 				if ( btMapAttr == 8 )

  00207	0f 84 83 00 00
	00		 je	 $LN499@PullObjInn

; 733  : 				{
; 734  : 					int n;
; 735  : 					for ( n=0;n<MAX_CC_TRAP_STEP;n++)

  0020d	33 c9		 xor	 ecx, ecx
  0020f	b8 08 00 00 00	 mov	 eax, OFFSET ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+8
$LL16@PullObjInn:

; 736  : 					{
; 737  : 						if ( iSX >= g_rtPOINT_FRAME[n].left && iSX <= g_rtPOINT_FRAME[n].right &&
; 738  : 							 iSY >= g_rtPOINT_FRAME[n].top && iSY <= g_rtPOINT_FRAME[n].bottom )

  00214	3b 50 f8	 cmp	 edx, DWORD PTR [eax-8]
  00217	7c 0e		 jl	 SHORT $LN14@PullObjInn
  00219	3b 10		 cmp	 edx, DWORD PTR [eax]
  0021b	7f 0a		 jg	 SHORT $LN14@PullObjInn
  0021d	3b 70 fc	 cmp	 esi, DWORD PTR [eax-4]
  00220	7c 05		 jl	 SHORT $LN14@PullObjInn
  00222	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  00225	7e 62		 jle	 SHORT $LN458@PullObjInn
$LN14@PullObjInn:

; 733  : 				{
; 734  : 					int n;
; 735  : 					for ( n=0;n<MAX_CC_TRAP_STEP;n++)

  00227	83 c0 10	 add	 eax, 16			; 00000010H
  0022a	41		 inc	 ecx
  0022b	3d 48 00 00 00	 cmp	 eax, OFFSET ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+72
  00230	7c e2		 jl	 SHORT $LL16@PullObjInn
  00232	8b 45 a8	 mov	 eax, DWORD PTR _iUSER_AXIS$1$[ebp]
$LN487@PullObjInn:

; 753  : 						if ( this->ObjSetPosition(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex, ptEMPTY.x, ptEMPTY.y) == TRUE )

  00235	8b 75 b4	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  00238	83 f9 04	 cmp	 ecx, 4
  0023b	74 56		 je	 SHORT $LN503@PullObjInn

; 748  : 					if ( vtMAP_UNTRAP[iUSER_AXIS].empty() == false )

  0023d	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  00240	8b 44 95 c0	 mov	 eax, DWORD PTR _vtMAP_UNTRAP$[ebp+edx*4]
  00244	3b 44 95 c4	 cmp	 eax, DWORD PTR _vtMAP_UNTRAP$[ebp+edx*4+4]
  00248	0f 94 c0	 sete	 al
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 748  : 					if ( vtMAP_UNTRAP[iUSER_AXIS].empty() == false )

  0024b	84 c0		 test	 al, al
  0024d	75 44		 jne	 SHORT $LN503@PullObjInn
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  0024f	8b 44 95 c4	 mov	 eax, DWORD PTR _vtMAP_UNTRAP$[ebp+edx*4+4]
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 750  : 						POINT ptEMPTY = vtMAP_UNTRAP[iUSER_AXIS].back();

  00253	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  00256	8b 40 fc	 mov	 eax, DWORD PTR [eax-4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1313 : 		--this->_Mylast();

  00259	83 44 95 c4 f8	 add	 DWORD PTR _vtMAP_UNTRAP$[ebp+edx*4+4], -8 ; fffffff8H
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 753  : 						if ( this->ObjSetPosition(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex, ptEMPTY.x, ptEMPTY.y) == TRUE )

  0025e	50		 push	 eax
  0025f	51		 push	 ecx
  00260	ff 33		 push	 DWORD PTR [ebx]
  00262	8b ce		 mov	 ecx, esi
  00264	e8 00 00 00 00	 call	 ?ObjSetPosition@CChaosCastle@@QAEHHHH@Z ; CChaosCastle::ObjSetPosition
  00269	83 f8 01	 cmp	 eax, 1
  0026c	75 25		 jne	 SHORT $LN503@PullObjInn

; 754  : 						{
; 755  : 							gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].m_iChaosCastleBlowTime = GetTickCount();

  0026e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00274	69 13 40 27 00
	00		 imul	 edx, DWORD PTR [ebx], 10048
  0027a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00280	89 84 0a 40 12
	00 00		 mov	 DWORD PTR [edx+ecx+4672], eax
  00287	eb 0a		 jmp	 SHORT $LN503@PullObjInn
$LN458@PullObjInn:

; 739  : 						{
; 740  : 							iUSER_AXIS = n;

  00289	8b c1		 mov	 eax, ecx
  0028b	89 45 a8	 mov	 DWORD PTR _iUSER_AXIS$1$[ebp], eax
  0028e	eb a5		 jmp	 SHORT $LN487@PullObjInn
$LN499@PullObjInn:
  00290	8b 75 b4	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
$LN503@PullObjInn:
  00293	8b 7d b0	 mov	 edi, DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp]
$LN11@PullObjInn:

; 713  : 					vtMAP_UNTRAP[iAXIS].push_back(iPT);
; 714  : 				}
; 715  : 			}
; 716  : 		}
; 717  : 	}
; 718  : 
; 719  : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  00296	83 c3 14	 add	 ebx, 20			; 00000014H
  00299	83 6d b8 01	 sub	 DWORD PTR tv2256[ebp], 1
  0029d	0f 85 fd fe ff
	ff		 jne	 $LL13@PullObjInn

; 756  : 						}
; 757  : 					}
; 758  : 				}
; 759  : 			}
; 760  : 		}
; 761  : 	}
; 762  : 
; 763  : 	for ( int iMON = 0; iMON < MAX_CHAOSCASTLE_MONSTER ; iMON++ )

  002a3	8b 55 a4	 mov	 edx, DWORD PTR tv2174[ebp]
  002a6	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  002ab	81 c2 e0 05 00
	00		 add	 edx, 1504		; 000005e0H
  002b1	89 45 bc	 mov	 DWORD PTR tv2252[ebp], eax
  002b4	03 d6		 add	 edx, esi
  002b6	89 55 b8	 mov	 DWORD PTR tv2222[ebp], edx
  002b9	0f 1f 80 00 00
	00 00		 npad	 7
$LL19@PullObjInn:

; 764  : 	{
; 765  : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[iMON] == -1 )

  002c0	8b 0a		 mov	 ecx, DWORD PTR [edx]
  002c2	83 f9 ff	 cmp	 ecx, -1
  002c5	0f 84 35 01 00
	00		 je	 $LN17@PullObjInn

; 766  : 			continue;
; 767  : 
; 768  : 		int iMON_INDEX = this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[iMON];
; 769  : 
; 770  : 		if ( !CHECK_LIMIT(iMON_INDEX, OBJ_MAXMONSTER))

  002cb	85 c9		 test	 ecx, ecx
  002cd	0f 88 1c 01 00
	00		 js	 $LN485@PullObjInn
  002d3	33 c0		 xor	 eax, eax
  002d5	81 f9 03 29 00
	00		 cmp	 ecx, 10499		; 00002903H
  002db	0f 9e c0	 setle	 al
  002de	85 c0		 test	 eax, eax
  002e0	0f 84 06 01 00
	00		 je	 $LN498@PullObjInn

; 773  : 			continue;
; 774  : 		}
; 775  : 
; 776  : 		if ( gObj[iMON_INDEX].Life > 0.0f && CC_MAP_RANGE(gObj[iMON_INDEX].MapNumber) != FALSE && gObj[iMON_INDEX].Connected > PLAYER_EMPTY )

  002e6	69 d9 40 27 00
	00		 imul	 ebx, ecx, 10048
  002ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002f2	f3 0f 10 84 0b
	d8 00 00 00	 movss	 xmm0, DWORD PTR [ebx+ecx+216]
  002fb	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00302	0f 86 f5 00 00
	00		 jbe	 $LN497@PullObjInn
  00308	8a 84 0b 23 01
	00 00		 mov	 al, BYTE PTR [ebx+ecx+291]
  0030f	3c 35		 cmp	 al, 53			; 00000035H
  00311	74 17		 je	 SHORT $LN486@PullObjInn
  00313	3c 12		 cmp	 al, 18			; 00000012H
  00315	0f 82 e2 00 00
	00		 jb	 $LN497@PullObjInn
  0031b	b4 17		 mov	 ah, 23			; 00000017H
  0031d	3a e0		 cmp	 ah, al
  0031f	1b c0		 sbb	 eax, eax
  00321	83 c0 01	 add	 eax, 1
  00324	0f 84 d3 00 00
	00		 je	 $LN497@PullObjInn
$LN486@PullObjInn:
  0032a	83 7c 0b 04 00	 cmp	 DWORD PTR [ebx+ecx+4], 0
  0032f	0f 8e c8 00 00
	00		 jle	 $LN497@PullObjInn

; 777  : 		{
; 778  : 			int iSX = gObj[iMON_INDEX].X;

  00335	0f b6 b4 0b 20
	01 00 00	 movzx	 esi, BYTE PTR [ebx+ecx+288]

; 779  : 			int iSY = gObj[iMON_INDEX].Y;

  0033d	0f b6 bc 0b 21
	01 00 00	 movzx	 edi, BYTE PTR [ebx+ecx+289]

; 780  : 
; 781  : 			int MapNumber = GetMap(iChaosCastleIndex);

  00345	ff 75 b0	 push	 DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp]
  00348	8b 4d b4	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0034b	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap

; 782  : 
; 783  : 			BYTE btMapAttr = MapC[MapNumber].m_attrbuf[iSY * 256 + iSX] & 0x08;

  00350	69 c0 28 38 05
	00		 imul	 eax, eax, 342056
  00356	8b cf		 mov	 ecx, edi
  00358	c1 e1 08	 shl	 ecx, 8
  0035b	03 88 10 00 00
	00		 add	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[eax+16]
  00361	8a 04 31	 mov	 al, BYTE PTR [ecx+esi]
  00364	24 08		 and	 al, 8

; 784  : 
; 785  : 			if ( btMapAttr == 8 )

  00366	0f 84 8b 00 00
	00		 je	 $LN491@PullObjInn

; 786  : 			{
; 787  : 				int n;
; 788  : 				for ( n=0;n<MAX_CC_TRAP_STEP;n++)

  0036c	33 c9		 xor	 ecx, ecx
  0036e	b8 08 00 00 00	 mov	 eax, OFFSET ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+8
$LL22@PullObjInn:

; 789  : 				{
; 790  : 					if ( iSX >= g_rtPOINT_FRAME[n].left && iSX <= g_rtPOINT_FRAME[n].right &&
; 791  : 						 iSY >= g_rtPOINT_FRAME[n].top && iSY <= g_rtPOINT_FRAME[n].bottom )

  00373	3b 70 f8	 cmp	 esi, DWORD PTR [eax-8]
  00376	7c 0e		 jl	 SHORT $LN20@PullObjInn
  00378	3b 30		 cmp	 esi, DWORD PTR [eax]
  0037a	7f 0a		 jg	 SHORT $LN20@PullObjInn
  0037c	3b 78 fc	 cmp	 edi, DWORD PTR [eax-4]
  0037f	7c 05		 jl	 SHORT $LN20@PullObjInn
  00381	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00384	7e 5f		 jle	 SHORT $LN459@PullObjInn
$LN20@PullObjInn:

; 786  : 			{
; 787  : 				int n;
; 788  : 				for ( n=0;n<MAX_CC_TRAP_STEP;n++)

  00386	83 c0 10	 add	 eax, 16			; 00000010H
  00389	41		 inc	 ecx
  0038a	3d 48 00 00 00	 cmp	 eax, OFFSET ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+72
  0038f	7c e2		 jl	 SHORT $LL22@PullObjInn
  00391	8b 45 a8	 mov	 eax, DWORD PTR _iUSER_AXIS$1$[ebp]
$LN488@PullObjInn:

; 806  : 					if ( this->ObjSetPosition(iMON_INDEX, ptEMPTY.x, ptEMPTY.y) == TRUE )

  00394	8b 75 b4	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  00397	83 f9 04	 cmp	 ecx, 4
  0039a	74 5e		 je	 SHORT $LN493@PullObjInn

; 801  : 				if ( vtMAP_UNTRAP[iUSER_AXIS].empty() == false )

  0039c	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  0039f	8b 44 95 c0	 mov	 eax, DWORD PTR _vtMAP_UNTRAP$[ebp+edx*4]
  003a3	3b 44 95 c4	 cmp	 eax, DWORD PTR _vtMAP_UNTRAP$[ebp+edx*4+4]
  003a7	0f 94 c0	 sete	 al
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 801  : 				if ( vtMAP_UNTRAP[iUSER_AXIS].empty() == false )

  003aa	84 c0		 test	 al, al
  003ac	75 4c		 jne	 SHORT $LN493@PullObjInn
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  003ae	8b 44 95 c4	 mov	 eax, DWORD PTR _vtMAP_UNTRAP$[ebp+edx*4+4]
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 803  : 					POINT ptEMPTY = vtMAP_UNTRAP[iUSER_AXIS].back();

  003b2	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  003b5	8b 40 fc	 mov	 eax, DWORD PTR [eax-4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1313 : 		--this->_Mylast();

  003b8	83 44 95 c4 f8	 add	 DWORD PTR _vtMAP_UNTRAP$[ebp+edx*4+4], -8 ; fffffff8H
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 806  : 					if ( this->ObjSetPosition(iMON_INDEX, ptEMPTY.x, ptEMPTY.y) == TRUE )

  003bd	50		 push	 eax
  003be	8b 45 b8	 mov	 eax, DWORD PTR tv2222[ebp]
  003c1	51		 push	 ecx
  003c2	8b ce		 mov	 ecx, esi
  003c4	ff 30		 push	 DWORD PTR [eax]
  003c6	e8 00 00 00 00	 call	 ?ObjSetPosition@CChaosCastle@@QAEHHHH@Z ; CChaosCastle::ObjSetPosition
  003cb	83 f8 01	 cmp	 eax, 1
  003ce	75 2a		 jne	 SHORT $LN493@PullObjInn

; 807  : 					{
; 808  : 						gObj[iMON_INDEX].m_iChaosCastleBlowTime = GetTickCount();

  003d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  003d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003dc	89 84 0b 40 12
	00 00		 mov	 DWORD PTR [ebx+ecx+4672], eax
  003e3	eb 15		 jmp	 SHORT $LN493@PullObjInn
$LN459@PullObjInn:

; 792  : 					{
; 793  : 						iUSER_AXIS = n;

  003e5	8b c1		 mov	 eax, ecx
  003e7	89 45 a8	 mov	 DWORD PTR _iUSER_AXIS$1$[ebp], eax
  003ea	eb a8		 jmp	 SHORT $LN488@PullObjInn
$LN498@PullObjInn:
  003ec	8b 45 bc	 mov	 eax, DWORD PTR tv2252[ebp]
$LN485@PullObjInn:

; 771  : 		{
; 772  : 			this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[iMON] = -1;

  003ef	c7 02 ff ff ff
	ff		 mov	 DWORD PTR [edx], -1
  003f5	eb 09		 jmp	 SHORT $LN17@PullObjInn
$LN491@PullObjInn:
  003f7	8b 75 b4	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
$LN493@PullObjInn:
  003fa	8b 55 b8	 mov	 edx, DWORD PTR tv2222[ebp]
$LN497@PullObjInn:
  003fd	8b 45 bc	 mov	 eax, DWORD PTR tv2252[ebp]
$LN17@PullObjInn:

; 756  : 						}
; 757  : 					}
; 758  : 				}
; 759  : 			}
; 760  : 		}
; 761  : 	}
; 762  : 
; 763  : 	for ( int iMON = 0; iMON < MAX_CHAOSCASTLE_MONSTER ; iMON++ )

  00400	83 c2 04	 add	 edx, 4
  00403	83 e8 01	 sub	 eax, 1
  00406	89 55 b8	 mov	 DWORD PTR tv2222[ebp], edx
  00409	89 45 bc	 mov	 DWORD PTR tv2252[ebp], eax
  0040c	0f 85 ae fe ff
	ff		 jne	 $LL19@PullObjInn

; 816  : 	{
; 817  : 		int MapNumber = GetMap(iChaosCastleIndex);

  00412	ff 75 b0	 push	 DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp]
  00415	8b ce		 mov	 ecx, esi
  00417	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap
  0041c	8b 5d 0c	 mov	 ebx, DWORD PTR _iTRAP_STEP$[ebp]
  0041f	69 f8 28 38 05
	00		 imul	 edi, eax, 342056
  00425	33 f6		 xor	 esi, esi
  00427	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL25@PullObjInn:

; 818  : 
; 819  : 		if ( MapC[MapNumber].m_cItem[iMAP_ITEM].IsItem() )

  00430	8d 8e 24 00 00
	00		 lea	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[esi+36]
  00436	03 cf		 add	 ecx, edi
  00438	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0043d	85 c0		 test	 eax, eax
  0043f	74 4a		 je	 SHORT $LN23@PullObjInn

; 820  : 		{
; 821  : 
; 822  : 			int x = MapC[MapNumber].m_cItem[iMAP_ITEM].px;

  00441	0f b6 94 37 f8
	00 00 00	 movzx	 edx, BYTE PTR ?MapC@@3PAVMapClass@@A[edi+esi+248]

; 823  : 			int y = MapC[MapNumber].m_cItem[iMAP_ITEM].py;
; 824  : 
; 825  : 			if ( x < ::g_iChaosCastle_DamageAxis[iTRAP_STEP][0] || x > ::g_iChaosCastle_DamageAxis[iTRAP_STEP][2] ||
; 826  : 				 y < ::g_iChaosCastle_DamageAxis[iTRAP_STEP][1] || y > ::g_iChaosCastle_DamageAxis[iTRAP_STEP][3] )

  00449	8b c3		 mov	 eax, ebx
  0044b	0f b6 8c 37 f9
	00 00 00	 movzx	 ecx, BYTE PTR ?MapC@@3PAVMapClass@@A[edi+esi+249]
  00453	c1 e0 04	 shl	 eax, 4
  00456	3b 90 00 00 00
	00		 cmp	 edx, DWORD PTR ?g_iChaosCastle_DamageAxis@@3PAY03HA[eax]
  0045c	7c 18		 jl	 SHORT $LN47@PullObjInn
  0045e	3b 90 08 00 00
	00		 cmp	 edx, DWORD PTR ?g_iChaosCastle_DamageAxis@@3PAY03HA[eax+8]
  00464	7f 10		 jg	 SHORT $LN47@PullObjInn
  00466	3b 88 04 00 00
	00		 cmp	 ecx, DWORD PTR ?g_iChaosCastle_DamageAxis@@3PAY03HA[eax+4]
  0046c	7c 08		 jl	 SHORT $LN47@PullObjInn
  0046e	3b 88 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?g_iChaosCastle_DamageAxis@@3PAY03HA[eax+12]
  00474	7e 15		 jle	 SHORT $LN23@PullObjInn
$LN47@PullObjInn:

; 827  : 			{
; 828  : 				MapC[MapNumber].m_cItem[iMAP_ITEM].m_State = 8;

  00476	c7 84 37 fc 00
	00 00 08 00 00
	00		 mov	 DWORD PTR ?MapC@@3PAVMapClass@@A[edi+esi+252], 8

; 829  : 				MapC[MapNumber].m_cItem[iMAP_ITEM].Give = true;
; 830  : 				MapC[MapNumber].m_cItem[iMAP_ITEM].live = false;

  00481	66 c7 84 37 fa
	00 00 00 00 01	 mov	 WORD PTR ?MapC@@3PAVMapClass@@A[edi+esi+250], 256 ; 00000100H
$LN23@PullObjInn:

; 809  : 					}
; 810  : 				}
; 811  : 			}
; 812  : 		}
; 813  : 	}
; 814  : 
; 815  : 	for ( int iMAP_ITEM =0;iMAP_ITEM<MAX_MAPITEM;iMAP_ITEM++)

  0048b	81 c6 74 04 00
	00		 add	 esi, 1140		; 00000474H
  00491	81 fe f0 37 05
	00		 cmp	 esi, 342000		; 000537f0H
  00497	7c 97		 jl	 SHORT $LL25@PullObjInn

; 831  : 			}
; 832  : 		}
; 833  : 	}
; 834  : }

  00499	68 00 00 00 00	 push	 OFFSET ??1?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE@XZ ; std::vector<tagPOINT,std::allocator<tagPOINT> >::~vector<tagPOINT,std::allocator<tagPOINT> >
  0049e	6a 04		 push	 4
  004a0	6a 0c		 push	 12			; 0000000cH
  004a2	8d 45 c0	 lea	 eax, DWORD PTR _vtMAP_UNTRAP$[ebp]
  004a5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  004ac	50		 push	 eax
  004ad	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
$LN1@PullObjInn:
  004b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004bc	59		 pop	 ecx
  004bd	5f		 pop	 edi
  004be	5e		 pop	 esi
  004bf	5b		 pop	 ebx
  004c0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004c3	33 cd		 xor	 ecx, ebp
  004c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004ca	8b e5		 mov	 esp, ebp
  004cc	5d		 pop	 ebp
  004cd	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PullObjInnerPlace@CChaosCastle@@QAEXHH@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE@XZ ; std::vector<tagPOINT,std::allocator<tagPOINT> >::~vector<tagPOINT,std::allocator<tagPOINT> >
  00005	6a 04		 push	 4
  00007	6a 0c		 push	 12			; 0000000cH
  00009	8d 45 c0	 lea	 eax, DWORD PTR _vtMAP_UNTRAP$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00012	c3		 ret	 0
__ehhandler$?PullObjInnerPlace@CChaosCastle@@QAEXHH@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PullObjInnerPlace@CChaosCastle@@QAEXHH@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PullObjInnerPlace@CChaosCastle@@QAEXHH@Z ENDP		; CChaosCastle::PullObjInnerPlace
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?GiveWinnerItem@CChaosCastle@@QAEXHH@Z
_TEXT	SEGMENT
_SpecialType$ = 8					; size = 1
_iChaosCastleIndex$ = 8					; size = 4
_iWinnerIndex$ = 12					; size = 4
?GiveWinnerItem@CChaosCastle@@QAEXHH@Z PROC		; CChaosCastle::GiveWinnerItem, COMDAT
; _this$ = ecx

; 3143 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 3144 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _iChaosCastleIndex$[ebp]
  00007	85 db		 test	 ebx, ebx
  00009	78 64		 js	 SHORT $LN1@GiveWinner
  0000b	33 c0		 xor	 eax, eax
  0000d	83 fb 06	 cmp	 ebx, 6
  00010	0f 9e c0	 setle	 al
  00013	85 c0		 test	 eax, eax
  00015	74 58		 je	 SHORT $LN1@GiveWinner

; 3145 : 		return;
; 3146 : 
; 3147 : 	if ( !gObjIsConnected(iWinnerIndex))

  00017	56		 push	 esi
  00018	8b 75 0c	 mov	 esi, DWORD PTR _iWinnerIndex$[ebp]
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00021	83 c4 04	 add	 esp, 4
  00024	85 c0		 test	 eax, eax
  00026	74 46		 je	 SHORT $LN9@GiveWinner

; 3148 : 		return;
; 3149 : 
; 3150 : #ifdef POINTEX
; 3151 : 	g_ShopPointEx.AddEventBonus(iWinnerIndex, ShopPointExEvent::CC);
; 3152 : #endif
; 3153 : 
; 3154 : 	BYTE SpecialType = iChaosCastleIndex + EventBagSpecial::ChaosCastle1;

  00028	80 c3 13	 add	 bl, 19			; 00000013H
  0002b	88 5d 08	 mov	 BYTE PTR _SpecialType$[ebp], bl

; 3155 : 
; 3156 : 	if( SpecialType < EventBagSpecial::ChaosCastle1 || SpecialType > EventBagSpecial::ChaosCastle7 )

  0002e	80 fb 13	 cmp	 bl, 19			; 00000013H
  00031	72 05		 jb	 SHORT $LN5@GiveWinner
  00033	80 fb 19	 cmp	 bl, 25			; 00000019H
  00036	76 04		 jbe	 SHORT $LN4@GiveWinner
$LN5@GiveWinner:

; 3157 : 	{
; 3158 : 		SpecialType = EventBagSpecial::ChaosCastle1;

  00038	c6 45 08 13	 mov	 BYTE PTR _SpecialType$[ebp], 19 ; 00000013H
$LN4@GiveWinner:

; 3159 : 	}
; 3160 : 
; 3161 : 	g_EventItemBagManager.OpenSpecial(SpecialType, iWinnerIndex, gObj[iWinnerIndex].MapNumber, gObj[iWinnerIndex].X, gObj[iWinnerIndex].Y);

  0003c	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  00042	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00048	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  0004f	50		 push	 eax
  00050	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  00057	50		 push	 eax
  00058	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  0005f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_EventItemBagManager@@3VEventItemBagManager@@A ; g_EventItemBagManager
  00064	50		 push	 eax
  00065	56		 push	 esi
  00066	ff 75 08	 push	 DWORD PTR _SpecialType$[ebp]
  00069	e8 00 00 00 00	 call	 ?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z ; EventItemBagManager::OpenSpecial
$LN9@GiveWinner:
  0006e	5e		 pop	 esi
$LN1@GiveWinner:
  0006f	5b		 pop	 ebx

; 3162 : }

  00070	5d		 pop	 ebp
  00071	c2 08 00	 ret	 8
?GiveWinnerItem@CChaosCastle@@QAEXHH@Z ENDP		; CChaosCastle::GiveWinnerItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?CalUsersInTrap@CChaosCastle@@QAEXH@Z
_TEXT	SEGMENT
_iTRAP_STEP$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
_iChaosCastleIndex$ = 8					; size = 4
?CalUsersInTrap@CChaosCastle@@QAEXH@Z PROC		; CChaosCastle::CalUsersInTrap, COMDAT
; _this$ = ecx

; 3092 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3093 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00006	8b 55 08	 mov	 edx, DWORD PTR _iChaosCastleIndex$[ebp]
  00009	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000c	85 d2		 test	 edx, edx
  0000e	0f 88 55 01 00
	00		 js	 $LN3@CalUsersIn
  00014	33 c0		 xor	 eax, eax
  00016	83 fa 06	 cmp	 edx, 6
  00019	0f 9e c0	 setle	 al
  0001c	85 c0		 test	 eax, eax
  0001e	0f 84 45 01 00
	00		 je	 $LN3@CalUsersIn

; 3094 : 		return;
; 3095 : 
; 3096 : 	if (this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TRAP_STATUS== 0 )

  00024	57		 push	 edi
  00025	69 fa 68 08 00
	00		 imul	 edi, edx, 2152
  0002b	03 f9		 add	 edi, ecx
  0002d	8b 4f 60	 mov	 ecx, DWORD PTR [edi+96]
  00030	89 4d f8	 mov	 DWORD PTR _iTRAP_STEP$1$[ebp], ecx
  00033	85 c9		 test	 ecx, ecx
  00035	0f 84 2d 01 00
	00		 je	 $LN22@CalUsersIn

; 3097 : 		return;
; 3098 : 
; 3099 : 	if ( !CHECK_LIMIT(this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TRAP_STATUS, 4))

  0003b	0f 88 27 01 00
	00		 js	 $LN22@CalUsersIn
  00041	33 c0		 xor	 eax, eax
  00043	83 f9 03	 cmp	 ecx, 3
  00046	0f 9e c0	 setle	 al
  00049	85 c0		 test	 eax, eax
  0004b	0f 84 17 01 00
	00		 je	 $LN22@CalUsersIn

; 3100 : 		return;
; 3101 : 
; 3102 : 	int iTRAP_STEP = this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TRAP_STATUS;

  00051	53		 push	 ebx
  00052	56		 push	 esi
  00053	83 c7 68	 add	 edi, 104		; 00000068H
  00056	bb 46 00 00 00	 mov	 ebx, 70			; 00000046H
  0005b	0f 1f 44 00 00	 npad	 5
$LL4@CalUsersIn:

; 3105 : 	{
; 3106 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex != -1 )

  00060	8b 07		 mov	 eax, DWORD PTR [edi]
  00062	83 f8 ff	 cmp	 eax, -1
  00065	0f 84 ef 00 00
	00		 je	 $LN2@CalUsersIn

; 3107 : 		{
; 3108 : 			if ( gObjIsConnected(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex) ==TRUE &&

  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00071	83 c4 04	 add	 esp, 4
  00074	83 f8 01	 cmp	 eax, 1
  00077	0f 85 dd 00 00
	00		 jne	 $LN2@CalUsersIn
  0007d	69 37 40 27 00
	00		 imul	 esi, DWORD PTR [edi], 10048
  00083	ff 75 08	 push	 DWORD PTR _iChaosCastleIndex$[ebp]
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00089	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0008f	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap
  00094	0f b6 8e 23 01
	00 00		 movzx	 ecx, BYTE PTR [esi+291]
  0009b	3b c8		 cmp	 ecx, eax
  0009d	0f 85 b7 00 00
	00		 jne	 $LN2@CalUsersIn

; 3109 : 				 gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].MapNumber == GetMap(iChaosCastleIndex) )
; 3110 : 			{
; 3111 : 				int iSX = gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].X;

  000a3	0f b6 96 20 01
	00 00		 movzx	 edx, BYTE PTR [esi+288]

; 3112 : 				int iSY = gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].Y;

  000aa	0f b6 8e 21 01
	00 00		 movzx	 ecx, BYTE PTR [esi+289]

; 3113 : 				
; 3114 : 				if ( iSX >= g_iChaosCastle_GroundAxis[0] &&
; 3115 : 					 iSX <= g_iChaosCastle_GroundAxis[2] &&
; 3116 : 					 iSY >= g_iChaosCastle_GroundAxis[1] &&
; 3117 : 					 iSY <= g_iChaosCastle_GroundAxis[3] &&

  000b1	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?g_iChaosCastle_GroundAxis@@3PAHA
  000b7	0f 8c 9d 00 00
	00		 jl	 $LN2@CalUsersIn
  000bd	3b 15 08 00 00
	00		 cmp	 edx, DWORD PTR ?g_iChaosCastle_GroundAxis@@3PAHA+8
  000c3	0f 8f 91 00 00
	00		 jg	 $LN2@CalUsersIn
  000c9	3b 0d 04 00 00
	00		 cmp	 ecx, DWORD PTR ?g_iChaosCastle_GroundAxis@@3PAHA+4
  000cf	0f 8c 85 00 00
	00		 jl	 $LN2@CalUsersIn
  000d5	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?g_iChaosCastle_GroundAxis@@3PAHA+12
  000db	7f 7d		 jg	 SHORT $LN2@CalUsersIn
  000dd	8b 45 f8	 mov	 eax, DWORD PTR _iTRAP_STEP$1$[ebp]
  000e0	c1 e0 04	 shl	 eax, 4
  000e3	3b 90 00 00 00
	00		 cmp	 edx, DWORD PTR ?g_iChaosCastle_DamageAxis@@3PAY03HA[eax]
  000e9	7c 18		 jl	 SHORT $LN11@CalUsersIn
  000eb	3b 90 08 00 00
	00		 cmp	 edx, DWORD PTR ?g_iChaosCastle_DamageAxis@@3PAY03HA[eax+8]
  000f1	7f 10		 jg	 SHORT $LN11@CalUsersIn
  000f3	3b 88 04 00 00
	00		 cmp	 ecx, DWORD PTR ?g_iChaosCastle_DamageAxis@@3PAY03HA[eax+4]
  000f9	7c 08		 jl	 SHORT $LN11@CalUsersIn
  000fb	3b 88 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?g_iChaosCastle_DamageAxis@@3PAY03HA[eax+12]
  00101	7e 57		 jle	 SHORT $LN2@CalUsersIn
$LN11@CalUsersIn:

; 3118 : 					 ( iSX < g_iChaosCastle_DamageAxis[iTRAP_STEP][0] ||
; 3119 : 					   iSX > g_iChaosCastle_DamageAxis[iTRAP_STEP][2] ||
; 3120 : 					   iSY < g_iChaosCastle_DamageAxis[iTRAP_STEP][1] ||
; 3121 : 					   iSY > g_iChaosCastle_DamageAxis[iTRAP_STEP][3] ) )
; 3122 : 				{
; 3123 : 					this->GiveUserDamage(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex, 10);

  00103	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00106	6a 0a		 push	 10			; 0000000aH
  00108	ff 37		 push	 DWORD PTR [edi]
  0010a	e8 00 00 00 00	 call	 ?GiveUserDamage@CChaosCastle@@QAEXHH@Z ; CChaosCastle::GiveUserDamage

; 3124 : 
; 3125 : 					LPOBJ lpObj = &gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex];

  0010f	69 37 40 27 00
	00		 imul	 esi, DWORD PTR [edi], 10048

; 3126 : 					
; 3127 : 					if ( gObjCheckUsedBuffEffect(lpObj,BUFF_ICE) == FALSE )

  00115	6a 38		 push	 56			; 00000038H
  00117	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0011d	56		 push	 esi
  0011e	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00123	83 c4 08	 add	 esp, 8
  00126	84 c0		 test	 al, al
  00128	75 30		 jne	 SHORT $LN2@CalUsersIn

; 3128 : 					{
; 3129 : 						lpObj->DelayActionTime = 800;
; 3130 : 						lpObj->DelayLevel = 1;
; 3131 : 						lpObj->lpAttackObj = NULL;
; 3132 : 
; 3133 : 						gObjAddBuffEffect(lpObj,BUFF_ICE,0,0,0,0,3);

  0012a	6a 03		 push	 3
  0012c	6a 00		 push	 0
  0012e	6a 00		 push	 0
  00130	6a 00		 push	 0
  00132	6a 00		 push	 0
  00134	6a 38		 push	 56			; 00000038H
  00136	56		 push	 esi
  00137	c7 86 a4 05 00
	00 20 03 00 00	 mov	 DWORD PTR [esi+1444], 800 ; 00000320H
  00141	c6 86 a8 05 00
	00 01		 mov	 BYTE PTR [esi+1448], 1
  00148	c7 86 b4 05 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1460], 0
  00152	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  00157	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN2@CalUsersIn:

; 3103 : 
; 3104 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  0015a	83 c7 14	 add	 edi, 20			; 00000014H
  0015d	83 eb 01	 sub	 ebx, 1
  00160	0f 85 fa fe ff
	ff		 jne	 $LL4@CalUsersIn
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx
$LN22@CalUsersIn:
  00168	5f		 pop	 edi
$LN3@CalUsersIn:

; 3134 : 					}
; 3135 : 				}
; 3136 : 			}
; 3137 : 		}
; 3138 : 	}
; 3139 : }

  00169	8b e5		 mov	 esp, ebp
  0016b	5d		 pop	 ebp
  0016c	c2 04 00	 ret	 4
?CalUsersInTrap@CChaosCastle@@QAEXH@Z ENDP		; CChaosCastle::CalUsersInTrap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?ProcessTrapStatus@CChaosCastle@@QAEXH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
?ProcessTrapStatus@CChaosCastle@@QAEXH@Z PROC		; CChaosCastle::ProcessTrapStatus, COMDAT
; _this$ = ecx

; 3060 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3061 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _iChaosCastleIndex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	0f 88 88 00 00
	00		 js	 $LN8@ProcessTra
  00012	33 c0		 xor	 eax, eax
  00014	83 fe 06	 cmp	 esi, 6
  00017	0f 9e c0	 setle	 al
  0001a	85 c0		 test	 eax, eax
  0001c	74 7c		 je	 SHORT $LN8@ProcessTra

; 3062 : 		return;
; 3063 : 
; 3064 : 	int iCUR_LIVES = this->GetCurPlayUser(iChaosCastleIndex) + this->GetMonsterListCount(iChaosCastleIndex);

  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ?GetMonsterListCount@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMonsterListCount
  00025	56		 push	 esi
  00026	8b cf		 mov	 ecx, edi
  00028	8b d8		 mov	 ebx, eax
  0002a	e8 00 00 00 00	 call	 ?GetCurPlayUser@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetCurPlayUser
  0002f	03 d8		 add	 ebx, eax

; 3065 : 
; 3066 : 	if ( iCUR_LIVES > 40 )
; 3067 : 	{
; 3068 : 		this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TRAP_STATUS = 0;

  00031	69 c6 68 08 00
	00		 imul	 eax, esi, 2152
  00037	83 fb 28	 cmp	 ebx, 40			; 00000028H
  0003a	7e 0f		 jle	 SHORT $LN3@ProcessTra
  0003c	5b		 pop	 ebx
  0003d	c7 44 38 60 00
	00 00 00	 mov	 DWORD PTR [eax+edi+96], 0
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 3084 : 	}
; 3085 : }

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN3@ProcessTra:

; 3069 : 	}
; 3070 : 	else if ( iCUR_LIVES > 30 )

  0004b	83 fb 1e	 cmp	 ebx, 30			; 0000001eH
  0004e	7e 19		 jle	 SHORT $LN5@ProcessTra

; 3071 : 	{
; 3072 : 		this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TRAP_STATUS = 1;
; 3073 : 		this->SendNoticeState(iChaosCastleIndex, 8);

  00050	6a 08		 push	 8

; 3079 : 	}
; 3080 : 	else
; 3081 : 	{
; 3082 : 		this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TRAP_STATUS = 3;
; 3083 : 		this->SendNoticeState(iChaosCastleIndex, 10);

  00052	56		 push	 esi
  00053	8b cf		 mov	 ecx, edi
  00055	c7 44 38 60 01
	00 00 00	 mov	 DWORD PTR [eax+edi+96], 1
  0005d	e8 00 00 00 00	 call	 ?SendNoticeState@CChaosCastle@@QAEXHH@Z ; CChaosCastle::SendNoticeState
  00062	5b		 pop	 ebx
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi

; 3084 : 	}
; 3085 : }

  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
$LN5@ProcessTra:

; 3074 : 	}
; 3075 : 	else if ( iCUR_LIVES > 20 )

  00069	83 fb 14	 cmp	 ebx, 20			; 00000014H
  0006c	7e 19		 jle	 SHORT $LN7@ProcessTra

; 3076 : 	{
; 3077 : 		this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TRAP_STATUS = 2;
; 3078 : 		this->SendNoticeState(iChaosCastleIndex, 9);

  0006e	6a 09		 push	 9

; 3079 : 	}
; 3080 : 	else
; 3081 : 	{
; 3082 : 		this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TRAP_STATUS = 3;
; 3083 : 		this->SendNoticeState(iChaosCastleIndex, 10);

  00070	56		 push	 esi
  00071	8b cf		 mov	 ecx, edi
  00073	c7 44 38 60 02
	00 00 00	 mov	 DWORD PTR [eax+edi+96], 2
  0007b	e8 00 00 00 00	 call	 ?SendNoticeState@CChaosCastle@@QAEXHH@Z ; CChaosCastle::SendNoticeState
  00080	5b		 pop	 ebx
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi

; 3084 : 	}
; 3085 : }

  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
$LN7@ProcessTra:

; 3079 : 	}
; 3080 : 	else
; 3081 : 	{
; 3082 : 		this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_TRAP_STATUS = 3;
; 3083 : 		this->SendNoticeState(iChaosCastleIndex, 10);

  00087	6a 0a		 push	 10			; 0000000aH
  00089	56		 push	 esi
  0008a	8b cf		 mov	 ecx, edi
  0008c	c7 44 38 60 03
	00 00 00	 mov	 DWORD PTR [eax+edi+96], 3
  00094	e8 00 00 00 00	 call	 ?SendNoticeState@CChaosCastle@@QAEXHH@Z ; CChaosCastle::SendNoticeState
  00099	5b		 pop	 ebx
$LN8@ProcessTra:
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi

; 3084 : 	}
; 3085 : }

  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
?ProcessTrapStatus@CChaosCastle@@QAEXH@Z ENDP		; CChaosCastle::ProcessTrapStatus
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?RewardUserEXP@CChaosCastle@@QAEXHHH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$GSCopy$1$ = -292			; size = 4
_this$GSCopy$1$ = -288					; size = 4
_iKILLCOUNT_USER$1$ = -284				; size = 4
tv386 = -280						; size = 4
_pMsg$1 = -276						; size = 269
__$ArrayPad$ = -4					; size = 4
_iChaosCastleIndex$ = 8					; size = 4
_iChaosCastleSubIndex$ = 12				; size = 4
_bWinner$ = 16						; size = 4
?RewardUserEXP@CChaosCastle@@QAEXHHH@Z PROC		; CChaosCastle::RewardUserEXP, COMDAT
; _this$ = ecx

; 3005 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 55 0c	 mov	 edx, DWORD PTR _iChaosCastleSubIndex$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _iChaosCastleIndex$[ebp]
  0001b	8b d9		 mov	 ebx, ecx
  0001d	89 9d e0 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  00023	89 b5 dc fe ff
	ff		 mov	 DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp], esi

; 3006 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00029	85 f6		 test	 esi, esi
  0002b	0f 88 81 01 00
	00		 js	 $LN7@RewardUser
  00031	33 c0		 xor	 eax, eax
  00033	83 fe 06	 cmp	 esi, 6
  00036	0f 9e c0	 setle	 al
  00039	85 c0		 test	 eax, eax
  0003b	0f 84 71 01 00
	00		 je	 $LN7@RewardUser

; 3007 : 		return;
; 3008 : 
; 3009 : 	if ( CC_SUB_FLOOR_RANGE(iChaosCastleSubIndex) == FALSE )

  00041	85 d2		 test	 edx, edx
  00043	0f 88 69 01 00
	00		 js	 $LN7@RewardUser
  00049	33 c0		 xor	 eax, eax
  0004b	83 fa 45	 cmp	 edx, 69			; 00000045H
  0004e	0f 9e c0	 setle	 al
  00051	85 c0		 test	 eax, eax
  00053	0f 84 59 01 00
	00		 je	 $LN7@RewardUser

; 3010 : 		return;
; 3011 : 
; 3012 : 	if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_iIndex != -1 )

  00059	69 ce 68 08 00
	00		 imul	 ecx, esi, 2152
  0005f	8d 04 95 1a 00
	00 00		 lea	 eax, DWORD PTR [edx*4+26]
  00066	03 c2		 add	 eax, edx
  00068	03 cb		 add	 ecx, ebx
  0006a	8d 1c 81	 lea	 ebx, DWORD PTR [ecx+eax*4]
  0006d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0006f	89 9d e8 fe ff
	ff		 mov	 DWORD PTR tv386[ebp], ebx
  00075	83 f8 ff	 cmp	 eax, -1
  00078	0f 84 34 01 00
	00		 je	 $LN7@RewardUser

; 3013 : 	{
; 3014 : 		if ( gObjIsConnected(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_iIndex) ==TRUE )

  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00084	83 c4 04	 add	 esp, 4
  00087	83 f8 01	 cmp	 eax, 1
  0008a	0f 85 22 01 00
	00		 jne	 $LN7@RewardUser

; 3015 : 		{
; 3016 : 			if ( gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_iIndex].m_cChaosCastleIndex == -1 ||

  00090	8b 13		 mov	 edx, DWORD PTR [ebx]
  00092	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00097	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  0009d	03 c1		 add	 eax, ecx
  0009f	80 b8 3d 12 00
	00 ff		 cmp	 BYTE PTR [eax+4669], -1
  000a6	0f 84 06 01 00
	00		 je	 $LN7@RewardUser
  000ac	80 b8 3e 12 00
	00 ff		 cmp	 BYTE PTR [eax+4670], -1
  000b3	0f 84 f9 00 00
	00		 je	 $LN7@RewardUser

; 3017 : 				 gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_iIndex].m_cChaosCastleSubIndex == -1 )
; 3018 : 			{
; 3019 : 				return;
; 3020 : 			}
; 3021 : 
; 3022 : 			int iKILLCOUNT_USER = gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_iIndex].m_cKillUserCount;

  000b9	0f be 88 44 12
	00 00		 movsx	 ecx, BYTE PTR [eax+4676]

; 3023 : 			int iKILLCOUNT_MONSTER = gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_iIndex].m_cKillMonsterCount;

  000c0	0f be 98 45 12
	00 00		 movsx	 ebx, BYTE PTR [eax+4677]

; 3024 : 			int iTOT_EXP = iKILLCOUNT_USER * g_iChaosCastle_ExpTable[iChaosCastleIndex][0] + iKILLCOUNT_MONSTER * g_iChaosCastle_ExpTable[iChaosCastleIndex][1];

  000c7	8b 04 f5 00 00
	00 00		 mov	 eax, DWORD PTR ?g_iChaosCastle_ExpTable@@3QAY01$$CBHA[esi*8]
  000ce	57		 push	 edi
  000cf	8b 3c f5 04 00
	00 00		 mov	 edi, DWORD PTR ?g_iChaosCastle_ExpTable@@3QAY01$$CBHA[esi*8+4]
  000d6	0f af c1	 imul	 eax, ecx
  000d9	0f af fb	 imul	 edi, ebx

; 3025 : 
; 3026 : 			int iREWARD_EXP = this->CalcSendRewardEXP(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_iIndex,

  000dc	53		 push	 ebx
  000dd	51		 push	 ecx
  000de	89 8d e4 fe ff
	ff		 mov	 DWORD PTR _iKILLCOUNT_USER$1$[ebp], ecx
  000e4	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000ea	03 f8		 add	 edi, eax
  000ec	57		 push	 edi
  000ed	52		 push	 edx
  000ee	e8 00 00 00 00	 call	 ?CalcSendRewardEXP@CChaosCastle@@QAEHHHHH@Z ; CChaosCastle::CalcSendRewardEXP

; 3027 : 				iTOT_EXP, iKILLCOUNT_USER, iKILLCOUNT_MONSTER);
; 3028 : 
; 3029 : 			PMSG_DEVILSQUARERESULT pMsg;
; 3030 : 
; 3031 : 			pMsg.MyRank = bWinner;

  000f3	8a 4d 10	 mov	 cl, BYTE PTR _bWinner$[ebp]
  000f6	8b f0		 mov	 esi, eax

; 3032 : 			pMsg.Count = 0xFE;
; 3033 : 			memcpy(pMsg.Score[0].Name, gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_iIndex].Name, 10);

  000f8	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR tv386[ebp]
  000fe	88 8d ef fe ff
	ff		 mov	 BYTE PTR _pMsg$1[ebp+3], cl
  00104	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0010a	c6 85 f0 fe ff
	ff fe		 mov	 BYTE PTR _pMsg$1[ebp+4], 254 ; 000000feH
  00111	69 10 40 27 00
	00		 imul	 edx, DWORD PTR [eax], 10048

; 3034 : 			pMsg.Score[0].BonusExp = iTOT_EXP;
; 3035 : 			pMsg.Score[0].BonusZen = iKILLCOUNT_USER;
; 3036 : 			pMsg.Score[0].TotalScore = iKILLCOUNT_MONSTER;
; 3037 : 			PHeadSetB((LPBYTE)&pMsg, 0x93, 0x35);

  00117	6a 35		 push	 53			; 00000035H
  00119	68 93 00 00 00	 push	 147			; 00000093H
  0011e	f3 0f 7e 44 0a
	5d		 movq	 xmm0, QWORD PTR [edx+ecx+93]
  00124	66 0f d6 85 f1
	fe ff ff	 movq	 QWORD PTR _pMsg$1[ebp+5], xmm0
  0012c	66 8b 44 0a 65	 mov	 ax, WORD PTR [edx+ecx+101]
  00131	66 89 85 f9 fe
	ff ff		 mov	 WORD PTR _pMsg$1[ebp+13], ax
  00138	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _iKILLCOUNT_USER$1$[ebp]
  0013e	89 85 05 ff ff
	ff		 mov	 DWORD PTR _pMsg$1[ebp+25], eax
  00144	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$1[ebp]
  0014a	50		 push	 eax
  0014b	89 bd 01 ff ff
	ff		 mov	 DWORD PTR _pMsg$1[ebp+21], edi
  00151	89 9d fd fe ff
	ff		 mov	 DWORD PTR _pMsg$1[ebp+17], ebx
  00157	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 3038 : 
; 3039 : 			DataSend(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_iIndex, (LPBYTE)&pMsg, pMsg.h.size);

  0015c	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _pMsg$1[ebp+1]
  00163	50		 push	 eax
  00164	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$1[ebp]
  0016a	50		 push	 eax
  0016b	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR tv386[ebp]
  00171	ff 30		 push	 DWORD PTR [eax]
  00173	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3040 : 
; 3041 : 			LogAddTD("[Chaos Castle] (%d) [%s][%s] Reward User EXP (USER_KILL:%d, MON_KILL:%d, TOT_EXP:%d, TOT_REWARD_EXP:%d)",

  00178	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR tv386[ebp]
  0017e	56		 push	 esi
  0017f	57		 push	 edi
  00180	53		 push	 ebx
  00181	69 08 40 27 00
	00		 imul	 ecx, DWORD PTR [eax], 10048
  00187	ff b5 e4 fe ff
	ff		 push	 DWORD PTR _iKILLCOUNT_USER$1$[ebp]
  0018d	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00193	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00196	50		 push	 eax
  00197	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0019a	50		 push	 eax
  0019b	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp]
  001a1	40		 inc	 eax
  001a2	50		 push	 eax
  001a3	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@LIKADFKD@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Rew@
  001a8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001ae	83 c4 38	 add	 esp, 56			; 00000038H
  001b1	5f		 pop	 edi
$LN7@RewardUser:

; 3042 : 				iChaosCastleIndex+1, gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_iIndex].AccountID,
; 3043 : 				gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_iIndex].Name,
; 3044 : 				iKILLCOUNT_USER, iKILLCOUNT_MONSTER, iTOT_EXP, iREWARD_EXP);
; 3045 : 
; 3046 : #if( __4GAMERS__ == 1 )
; 3047 : 			g_Achievements.GD_UpdateEventDataCC(&gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_iIndex], 
; 3048 : 				iKILLCOUNT_USER, iKILLCOUNT_MONSTER, iTOT_EXP, iREWARD_EXP);
; 3049 : #endif
; 3050 : 		}
; 3051 : 	}
; 3052 : }

  001b2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b5	5e		 pop	 esi
  001b6	33 cd		 xor	 ecx, ebp
  001b8	5b		 pop	 ebx
  001b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001be	8b e5		 mov	 esp, ebp
  001c0	5d		 pop	 ebp
  001c1	c2 0c 00	 ret	 12			; 0000000cH
?RewardUserEXP@CChaosCastle@@QAEXHHH@Z ENDP		; CChaosCastle::RewardUserEXP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?ReCalcUserCount@CChaosCastle@@QAEHH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
?ReCalcUserCount@CChaosCastle@@QAEHH@Z PROC		; CChaosCastle::ReCalcUserCount, COMDAT
; _this$ = ecx

; 3169 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3170 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _iChaosCastleIndex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	78 3c		 js	 SHORT $LN8@ReCalcUser
  0000e	33 c0		 xor	 eax, eax
  00010	83 fe 06	 cmp	 esi, 6
  00013	0f 9e c0	 setle	 al
  00016	85 c0		 test	 eax, eax
  00018	74 30		 je	 SHORT $LN8@ReCalcUser

; 3172 : 
; 3173 : 	int iRET_VAL = 0;
; 3174 : 	int iPlayUser = this->GetCurPlayUser(iChaosCastleIndex);

  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?GetCurPlayUser@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetCurPlayUser
  00020	8b c8		 mov	 ecx, eax

; 3175 : 
; 3176 : 	if ( iPlayUser > 0 )
; 3177 : 	{
; 3178 : 		this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_ENTERED_USER = iPlayUser;

  00022	69 c6 68 08 00
	00		 imul	 eax, esi, 2152
  00028	85 c9		 test	 ecx, ecx
  0002a	7e 0c		 jle	 SHORT $LN3@ReCalcUser
  0002c	89 4c 38 50	 mov	 DWORD PTR [eax+edi+80], ecx

; 3185 : 	}
; 3186 : 	return iRET_VAL;

  00030	8b c1		 mov	 eax, ecx
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi

; 3187 : }

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN3@ReCalcUser:

; 3179 : 		iRET_VAL = iPlayUser;
; 3180 : 	}
; 3181 : 	else
; 3182 : 	{
; 3183 : 		this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_ENTERED_USER = 0;

  00038	c7 44 38 50 00
	00 00 00	 mov	 DWORD PTR [eax+edi+80], 0

; 3184 : 		iRET_VAL = 0;

  00040	33 c9		 xor	 ecx, ecx
  00042	5f		 pop	 edi

; 3185 : 	}
; 3186 : 	return iRET_VAL;

  00043	8b c1		 mov	 eax, ecx
  00045	5e		 pop	 esi

; 3187 : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN8@ReCalcUser:
  0004a	5f		 pop	 edi

; 3171 : 		return -1;

  0004b	83 c8 ff	 or	 eax, -1
  0004e	5e		 pop	 esi

; 3187 : }

  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?ReCalcUserCount@CChaosCastle@@QAEHH@Z ENDP		; CChaosCastle::ReCalcUserCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?RewardZettoMoney@CChaosCastle@@QAEHH@Z
_TEXT	SEGMENT
_vtZettoWinner$ = -328					; size = 12
tv981 = -316						; size = 4
_iChaosCastleIndex$GSCopy$1$ = -316			; size = 4
tv971 = -312						; size = 4
$T2 = -312						; size = 4
tv980 = -308						; size = 4
_this$GSCopy$1$ = -308					; size = 4
_iZettoMoney$1$ = -304					; size = 4
_pNotice$ = -300					; size = 272
_szZettoWinnerName$ = -28				; size = 11
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iChaosCastleIndex$ = 8					; size = 4
?RewardZettoMoney@CChaosCastle@@QAEHH@Z PROC		; CChaosCastle::RewardZettoMoney, COMDAT
; _this$ = ecx

; 3194 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RewardZettoMoney@CChaosCastle@@QAEHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f1		 mov	 esi, ecx
  00030	89 b5 cc fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00036	8b 5d 08	 mov	 ebx, DWORD PTR _iChaosCastleIndex$[ebp]
  00039	89 9d c4 fe ff
	ff		 mov	 DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp], ebx

; 3195 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  0003f	85 db		 test	 ebx, ebx
  00041	78 56		 js	 SHORT $LN191@RewardZett
  00043	33 c0		 xor	 eax, eax
  00045	83 fb 06	 cmp	 ebx, 6
  00048	0f 9e c0	 setle	 al
  0004b	85 c0		 test	 eax, eax
  0004d	74 4a		 je	 SHORT $LN191@RewardZett

; 3197 : 
; 3198 : 	int iPlayUser = this->GetCurPlayUser(iChaosCastleIndex);

  0004f	53		 push	 ebx
  00050	e8 00 00 00 00	 call	 ?GetCurPlayUser@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetCurPlayUser
  00055	8b f8		 mov	 edi, eax

; 3199 : 
; 3200 : 	if ( iPlayUser <= 0 )

  00057	85 ff		 test	 edi, edi
  00059	7e 3e		 jle	 SHORT $LN191@RewardZett

; 3201 : 		return -1;
; 3202 : 
; 3203 : 	int iZettoMoney = iPlayUser * (g_iChaosCastle_EnterCost[iChaosCastleIndex] * 80 / 100);

  0005b	8b 04 9d 00 00
	00 00		 mov	 eax, DWORD PTR ?g_iChaosCastle_EnterCost@@3PAHA[ebx*4]
  00062	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00065	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0006a	c1 e1 04	 shl	 ecx, 4
  0006d	f7 e9		 imul	 ecx
  0006f	c1 fa 05	 sar	 edx, 5
  00072	8b c2		 mov	 eax, edx
  00074	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00077	03 c2		 add	 eax, edx
  00079	0f af c7	 imul	 eax, edi
  0007c	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _iZettoMoney$1$[ebp], eax

; 3204 : 
; 3205 : 	if ( iZettoMoney <= 0 )

  00082	85 c0		 test	 eax, eax
  00084	7f 34		 jg	 SHORT $LN10@RewardZett

; 3206 : 	{
; 3207 : 		LogAddTD("[Chaos Castle] (%d) ERROR : REWARD ZEN <= 0 (%d)",

  00086	50		 push	 eax
  00087	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0008a	50		 push	 eax
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@POIMMHNL@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5ERROR?5?3?5REWA@
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00096	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN191@RewardZett:

; 3196 : 		return -1;

  00099	83 c8 ff	 or	 eax, -1
$LN1@RewardZett:

; 3275 : }

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ad	33 cd		 xor	 ecx, ebp
  000af	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 04 00	 ret	 4
$LN10@RewardZett:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  000ba	c7 85 b8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _vtZettoWinner$[ebp], 0

; 481  : 		_Mylast = pointer();

  000c4	c7 85 bc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _vtZettoWinner$[ebp+4], 0

; 482  : 		_Myend = pointer();

  000ce	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _vtZettoWinner$[ebp+8], 0

; 480  : 		_Myfirst = pointer();

  000d8	69 c3 68 08 00
	00		 imul	 eax, ebx, 2152
  000de	8d 7e 68	 lea	 edi, DWORD PTR [esi+104]
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 3213 : 	std::vector<int> vtZettoWinner;

  000e1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  000e8	03 f8		 add	 edi, eax
  000ea	89 bd c8 fe ff
	ff		 mov	 DWORD PTR tv971[ebp], edi
  000f0	8b f7		 mov	 esi, edi
  000f2	bf 46 00 00 00	 mov	 edi, 70			; 00000046H
$LL4@RewardZett:
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 3218 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex != -1 )

  000f7	8b 06		 mov	 eax, DWORD PTR [esi]
  000f9	83 f8 ff	 cmp	 eax, -1
  000fc	74 3e		 je	 SHORT $LN2@RewardZett

; 3219 : 		{
; 3220 : 			if ( gObjIsConnected(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex) == TRUE &&

  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00104	83 c4 04	 add	 esp, 4
  00107	83 f8 01	 cmp	 eax, 1
  0010a	75 30		 jne	 SHORT $LN2@RewardZett
  0010c	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00112	53		 push	 ebx
  00113	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap
  00118	69 16 40 27 00
	00		 imul	 edx, DWORD PTR [esi], 10048
  0011e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00124	0f b6 8c 0a 23
	01 00 00	 movzx	 ecx, BYTE PTR [edx+ecx+291]
  0012c	3b c8		 cmp	 ecx, eax
  0012e	75 0c		 jne	 SHORT $LN2@RewardZett

; 3221 : 				 gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].MapNumber == GetMap(iChaosCastleIndex) )
; 3222 : 			{
; 3223 : 				vtZettoWinner.push_back(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex);

  00130	56		 push	 esi
  00131	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _vtZettoWinner$[ebp]
  00137	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
$LN2@RewardZett:

; 3214 : 
; 3215 : 	int i;
; 3216 : 	for(i=0;i<MAX_CHAOSCASTLE_USER;i++)

  0013c	83 c6 14	 add	 esi, 20			; 00000014H
  0013f	83 ef 01	 sub	 edi, 1
  00142	75 b3		 jne	 SHORT $LL4@RewardZett
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00144	8b b5 bc fe ff
	ff		 mov	 esi, DWORD PTR _vtZettoWinner$[ebp+4]
  0014a	8b 9d b8 fe ff
	ff		 mov	 ebx, DWORD PTR _vtZettoWinner$[ebp]
  00150	2b f3		 sub	 esi, ebx
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 3230 : 	if ( iPlayUser <= 0 )

  00152	8b bd c8 fe ff
	ff		 mov	 edi, DWORD PTR tv971[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00158	c1 fe 02	 sar	 esi, 2
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 3230 : 	if ( iPlayUser <= 0 )

  0015b	85 f6		 test	 esi, esi
  0015d	7f 08		 jg	 SHORT $LN13@RewardZett
  0015f	83 ce ff	 or	 esi, -1
  00162	e9 9a 01 00 00	 jmp	 $LN25@RewardZett
$LN13@RewardZett:

; 3231 : 		return -1;
; 3232 : 
; 3233 : 	int iZettoWinnerIndex = vtZettoWinner[rand()%iPlayUser];

  00167	e8 00 00 00 00	 call	 _rand
  0016c	99		 cdq
  0016d	0f 57 c0	 xorps	 xmm0, xmm0
  00170	f7 fe		 idiv	 esi

; 3234 : 	char szZettoWinnerName[11] ={0};
; 3235 : 	memcpy(szZettoWinnerName, gObj[iZettoWinnerIndex].Name, 10);

  00172	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00178	8b 14 93	 mov	 edx, DWORD PTR [ebx+edx*4]
  0017b	69 f2 40 27 00
	00		 imul	 esi, edx, 10048
  00181	03 ce		 add	 ecx, esi
  00183	66 0f d6 45 e5	 movq	 QWORD PTR _szZettoWinnerName$[ebp+1], xmm0
  00188	c6 45 e4 00	 mov	 BYTE PTR _szZettoWinnerName$[ebp], 0
  0018c	66 c7 45 ed 00
	00		 mov	 WORD PTR _szZettoWinnerName$[ebp+9], 0
  00192	89 95 c8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  00198	f3 0f 7e 41 5d	 movq	 xmm0, QWORD PTR [ecx+93]
  0019d	66 0f d6 45 e4	 movq	 QWORD PTR _szZettoWinnerName$[ebp], xmm0
  001a2	66 8b 41 65	 mov	 ax, WORD PTR [ecx+101]
  001a6	66 89 45 ec	 mov	 WORD PTR _szZettoWinnerName$[ebp+8], ax

; 3236 : 	gObj[iZettoWinnerIndex].Money += iZettoMoney;

  001aa	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _iZettoMoney$1$[ebp]
  001b0	01 81 cc 00 00
	00		 add	 DWORD PTR [ecx+204], eax

; 3237 : 
; 3238 : 	if ( gObj[iZettoWinnerIndex].Money > MAX_ZEN )

  001b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001bb	81 bc 06 cc 00
	00 00 00 94 35
	77		 cmp	 DWORD PTR [esi+eax+204], 2000000000 ; 77359400H
  001c6	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  001c9	89 b5 cc fe ff
	ff		 mov	 DWORD PTR tv980[ebp], esi
  001cf	7e 0f		 jle	 SHORT $LN14@RewardZett

; 3239 : 		gObj[iZettoWinnerIndex].Money = MAX_ZEN;

  001d1	c7 81 cc 00 00
	00 00 94 35 77	 mov	 DWORD PTR [ecx+204], 2000000000 ; 77359400H
  001db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN14@RewardZett:

; 3240 : 
; 3241 : 	GCMoneySend(iZettoWinnerIndex, gObj[iZettoWinnerIndex].Money);

  001e0	ff b4 06 cc 00
	00 00		 push	 DWORD PTR [esi+eax+204]
  001e7	52		 push	 edx
  001e8	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 3242 : 
; 3243 : 	PMSG_NOTICE pNotice;
; 3244 : 	TNotice::MakeNoticeMsgEx(&pNotice, 0, lMsg.Get(MSGGET(4,213)), iChaosCastleIndex+1, szZettoWinnerName, iZettoMoney);

  001ed	8b b5 c4 fe ff
	ff		 mov	 esi, DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp]
  001f3	8d 4d e4	 lea	 ecx, DWORD PTR _szZettoWinnerName$[ebp]
  001f6	83 c4 08	 add	 esp, 8
  001f9	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  001fc	ff b5 d0 fe ff
	ff		 push	 DWORD PTR _iZettoMoney$1$[ebp]
  00202	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv981[ebp], eax
  00208	51		 push	 ecx
  00209	50		 push	 eax
  0020a	68 d5 04 00 00	 push	 1237			; 000004d5H
  0020f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00214	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00219	50		 push	 eax
  0021a	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$[ebp]
  00220	6a 00		 push	 0
  00222	50		 push	 eax
  00223	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx
  00228	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0022e	83 c4 18	 add	 esp, 24			; 00000018H
  00231	bb 46 00 00 00	 mov	 ebx, 70			; 00000046H
$LL7@RewardZett:

; 3247 : 	{
; 3248 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex != -1 )

  00236	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00238	83 f9 ff	 cmp	 ecx, -1
  0023b	74 6a		 je	 SHORT $LN5@RewardZett

; 3249 : 		{
; 3250 : 			if ( gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].Connected == PLAYER_PLAYING )

  0023d	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048
  00243	83 7c 10 04 03	 cmp	 DWORD PTR [eax+edx+4], 3
  00248	75 5d		 jne	 SHORT $LN5@RewardZett

; 3251 : 			{
; 3252 : 				if ( gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].m_cChaosCastleIndex != -1 && 

  0024a	80 bc 10 3d 12
	00 00 ff	 cmp	 BYTE PTR [eax+edx+4669], -1
  00252	74 28		 je	 SHORT $LN17@RewardZett
  00254	80 bc 10 3e 12
	00 00 ff	 cmp	 BYTE PTR [eax+edx+4670], -1
  0025c	74 1e		 je	 SHORT $LN17@RewardZett

; 3253 : 					 gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].m_cChaosCastleSubIndex!= -1)
; 3254 : 				{
; 3255 : 					DataSend(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex,

  0025e	0f b6 85 d5 fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$[ebp+1]
  00265	50		 push	 eax
  00266	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$[ebp]
  0026c	50		 push	 eax
  0026d	51		 push	 ecx
  0026e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00273	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00279	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN17@RewardZett:

; 3256 : 						(LPBYTE)&pNotice, pNotice.h.size);
; 3257 : 				}
; 3258 : 
; 3259 : 				LogAddTD("[Chaos Castle][Bug Tracer] (%d) [%s][%s] Reword ZettoMoney(Map:%d) Send Message",

  0027c	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00282	8d 42 5d	 lea	 eax, DWORD PTR [edx+93]
  00285	56		 push	 esi
  00286	03 c1		 add	 eax, ecx
  00288	50		 push	 eax
  00289	8d 42 52	 lea	 eax, DWORD PTR [edx+82]
  0028c	03 c1		 add	 eax, ecx
  0028e	50		 push	 eax
  0028f	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00292	50		 push	 eax
  00293	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@BKKNHLPK@?$FLChaos?5Castle?$FN?$FLBug?5Tracer?$FN?5?$CI?$CFd?$CJ?5@
  00298	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0029e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002a4	83 c4 14	 add	 esp, 20			; 00000014H
$LN5@RewardZett:

; 3245 : 
; 3246 : 	for(i=0;i<MAX_CHAOSCASTLE_USER;i++)

  002a7	83 c7 14	 add	 edi, 20			; 00000014H
  002aa	83 eb 01	 sub	 ebx, 1
  002ad	75 87		 jne	 SHORT $LL7@RewardZett

; 3260 : 					iChaosCastleIndex+1, gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].AccountID,
; 3261 : 					gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].Name,
; 3262 : 					iChaosCastleIndex);
; 3263 : 			}
; 3264 : 		}
; 3265 : 	}
; 3266 : 
; 3267 : 	if ( OBJMAX_RANGE(iZettoWinnerIndex))

  002af	8b b5 c8 fe ff
	ff		 mov	 esi, DWORD PTR $T2[ebp]
  002b5	8b 9d b8 fe ff
	ff		 mov	 ebx, DWORD PTR _vtZettoWinner$[ebp]
  002bb	85 f6		 test	 esi, esi
  002bd	78 42		 js	 SHORT $LN25@RewardZett
  002bf	33 c0		 xor	 eax, eax
  002c1	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  002c7	0f 9e c0	 setle	 al
  002ca	85 c0		 test	 eax, eax
  002cc	74 33		 je	 SHORT $LN25@RewardZett

; 3268 : 	{
; 3269 : 		LogAddTD("[Chaos Castle] (%d) [%s][%s] Win Zen Lotto (RewardZen:%d, UserZen:%d)",

  002ce	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR tv980[ebp]
  002d4	ff b4 11 cc 00
	00 00		 push	 DWORD PTR [ecx+edx+204]
  002db	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  002de	ff b5 d0 fe ff
	ff		 push	 DWORD PTR _iZettoMoney$1$[ebp]
  002e4	03 c2		 add	 eax, edx
  002e6	50		 push	 eax
  002e7	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  002ea	03 c2		 add	 eax, edx
  002ec	50		 push	 eax
  002ed	ff b5 c4 fe ff
	ff		 push	 DWORD PTR tv981[ebp]
  002f3	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@DMBELMMH@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Win@
  002f8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002fe	83 c4 18	 add	 esp, 24			; 00000018H
$LN25@RewardZett:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00301	85 db		 test	 ebx, ebx
  00303	74 58		 je	 SHORT $LN77@RewardZett

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00305	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _vtZettoWinner$[ebp+8]
  0030b	2b c3		 sub	 eax, ebx
  0030d	c1 f8 02	 sar	 eax, 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00310	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00315	76 05		 jbe	 SHORT $LN144@RewardZett
  00317	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN194@RewardZett:
$LN144@RewardZett:

; 101  : 	const size_t _User_size = _Count * _Sz;

  0031c	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0031f	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00324	72 2e		 jb	 SHORT $LN145@RewardZett

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00326	f6 c3 1f	 test	 bl, 31			; 0000001fH
  00329	74 05		 je	 SHORT $LN146@RewardZett
  0032b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN195@RewardZett:
$LN146@RewardZett:

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00330	8b 43 fc	 mov	 eax, DWORD PTR [ebx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00333	3b c3		 cmp	 eax, ebx
  00335	72 05		 jb	 SHORT $LN147@RewardZett
  00337	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN196@RewardZett:
$LN147@RewardZett:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0033c	2b d8		 sub	 ebx, eax
  0033e	83 fb 04	 cmp	 ebx, 4
  00341	73 05		 jae	 SHORT $LN148@RewardZett
  00343	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN197@RewardZett:
$LN148@RewardZett:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00348	83 fb 23	 cmp	 ebx, 35			; 00000023H
  0034b	76 05		 jbe	 SHORT $LN149@RewardZett
  0034d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN198@RewardZett:
$LN149@RewardZett:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00352	8b d8		 mov	 ebx, eax
$LN145@RewardZett:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00354	53		 push	 ebx
  00355	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0035a	83 c4 04	 add	 esp, 4
$LN77@RewardZett:
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 3274 : 	return iZettoWinnerIndex;

  0035d	8b c6		 mov	 eax, esi
  0035f	e9 38 fd ff ff	 jmp	 $LN1@RewardZett
$LN193@RewardZett:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RewardZettoMoney@CChaosCastle@@QAEHH@Z$0:
  00000	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _vtZettoWinner$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$?RewardZettoMoney@CChaosCastle@@QAEHH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a b4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-332]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RewardZettoMoney@CChaosCastle@@QAEHH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RewardZettoMoney@CChaosCastle@@QAEHH@Z ENDP		; CChaosCastle::RewardZettoMoney
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?PlayFailedRollBack@CChaosCastle@@QAEXH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$GSCopy$1$ = -296			; size = 4
_iFIRST_MONEY$1$ = -292					; size = 4
_this$GSCopy$1$ = -288					; size = 4
tv665 = -284						; size = 4
tv658 = -280						; size = 4
_Notice$1 = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
_iChaosCastleIndex$ = 8					; size = 4
?PlayFailedRollBack@CChaosCastle@@QAEXH@Z PROC		; CChaosCastle::PlayFailedRollBack, COMDAT
; _this$ = ecx

; 2956 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _iChaosCastleIndex$[ebp]
  00017	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0001d	89 9d d8 fe ff
	ff		 mov	 DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp], ebx

; 2957 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00023	85 db		 test	 ebx, ebx
  00025	0f 88 4f 01 00
	00		 js	 $LN3@PlayFailed
  0002b	33 c0		 xor	 eax, eax
  0002d	83 fb 06	 cmp	 ebx, 6
  00030	0f 9e c0	 setle	 al
  00033	85 c0		 test	 eax, eax
  00035	0f 84 3f 01 00
	00		 je	 $LN3@PlayFailed

; 2958 : 		return;
; 2959 : 
; 2960 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  0003b	56		 push	 esi
  0003c	69 c3 68 08 00
	00		 imul	 eax, ebx, 2152
  00042	8d 71 68	 lea	 esi, DWORD PTR [ecx+104]
  00045	57		 push	 edi
  00046	bf 46 00 00 00	 mov	 edi, 70			; 00000046H
  0004b	89 bd e4 fe ff
	ff		 mov	 DWORD PTR tv665[ebp], edi
  00051	03 f0		 add	 esi, eax
$LL4@PlayFailed:

; 2961 : 	{
; 2962 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex != -1 )

  00053	8b 06		 mov	 eax, DWORD PTR [esi]
  00055	83 f8 ff	 cmp	 eax, -1
  00058	0f 84 08 01 00
	00		 je	 $LN2@PlayFailed

; 2963 : 		{
; 2964 : 			if ( gObjIsConnected(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex) ==TRUE &&

  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00064	83 c4 04	 add	 esp, 4
  00067	83 f8 01	 cmp	 eax, 1
  0006a	0f 85 f6 00 00
	00		 jne	 $LN2@PlayFailed
  00070	69 0e 40 27 00
	00		 imul	 ecx, DWORD PTR [esi], 10048
  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0007b	53		 push	 ebx
  0007c	03 c1		 add	 eax, ecx
  0007e	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00084	89 85 e8 fe ff
	ff		 mov	 DWORD PTR tv658[ebp], eax
  0008a	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap
  0008f	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR tv658[ebp]
  00095	0f b6 8a 23 01
	00 00		 movzx	 ecx, BYTE PTR [edx+291]
  0009c	3b c8		 cmp	 ecx, eax
  0009e	0f 85 c2 00 00
	00		 jne	 $LN2@PlayFailed

; 2965 : 				 gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].MapNumber == GetMap(iChaosCastleIndex) )
; 2966 : 			{
; 2967 : 				int iFIRST_MONEY = gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].Money;
; 2968 : 				int iPAYBACK_MONEY = g_iChaosCastle_EnterCost[iChaosCastleIndex] + g_iChaosCastle_GuardSetValue[iChaosCastleIndex];

  000a4	8b 0c 9d 00 00
	00 00		 mov	 ecx, DWORD PTR ?g_iChaosCastle_GuardSetValue@@3PAHA[ebx*4]
  000ab	8b 04 9d 00 00
	00 00		 mov	 eax, DWORD PTR ?g_iChaosCastle_EnterCost@@3PAHA[ebx*4]
  000b2	8b 92 cc 00 00
	00		 mov	 edx, DWORD PTR [edx+204]
  000b8	89 95 dc fe ff
	ff		 mov	 DWORD PTR _iFIRST_MONEY$1$[ebp], edx
  000be	8d 1c 08	 lea	 ebx, DWORD PTR [eax+ecx]

; 2969 : 				gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].Money += g_iChaosCastle_EnterCost[iChaosCastleIndex] + g_iChaosCastle_GuardSetValue[iChaosCastleIndex];

  000c1	03 c2		 add	 eax, edx
  000c3	03 c1		 add	 eax, ecx
  000c5	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR tv658[ebp]
  000cb	89 81 cc 00 00
	00		 mov	 DWORD PTR [ecx+204], eax

; 2970 : 				int iNOW_MONEY = gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].Money;

  000d1	8b 16		 mov	 edx, DWORD PTR [esi]
  000d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d8	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  000de	8b bc 01 cc 00
	00 00		 mov	 edi, DWORD PTR [ecx+eax+204]

; 2971 : 
; 2972 : 				GCMoneySend(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex, gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].Money);

  000e5	57		 push	 edi
  000e6	52		 push	 edx
  000e7	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 2973 : 				gObjMoveGate(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex, 22);

  000ec	6a 16		 push	 22			; 00000016H
  000ee	ff 36		 push	 DWORD PTR [esi]
  000f0	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  000f5	83 c4 10	 add	 esp, 16			; 00000010H

; 2974 : 
; 2975 : 				PMSG_NOTICE Notice;
; 2976 : 
; 2977 : 				TNotice::MakeNoticeMsgEx(&Notice, 1, lMsg.Get(MSGGET(4,212)));

  000f8	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000fd	68 d4 04 00 00	 push	 1236			; 000004d4H
  00102	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00107	50		 push	 eax
  00108	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _Notice$1[ebp]
  0010e	6a 01		 push	 1
  00110	50		 push	 eax
  00111	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx

; 2978 : 
; 2979 : 				DataSend(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex, (LPBYTE)&Notice, Notice.h.size);

  00116	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _Notice$1[ebp+1]
  0011d	50		 push	 eax
  0011e	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _Notice$1[ebp]
  00124	50		 push	 eax
  00125	ff 36		 push	 DWORD PTR [esi]
  00127	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 2980 : 
; 2981 : 				LogAddTD("[Chaos Castle] (%d) [%s][%s] Payback to User ChaosCastle Money (FIRST:%d, PAYBACK:%d, FINAL:%d)",

  0012c	69 0e 40 27 00
	00		 imul	 ecx, DWORD PTR [esi], 10048
  00132	57		 push	 edi
  00133	53		 push	 ebx
  00134	ff b5 dc fe ff
	ff		 push	 DWORD PTR _iFIRST_MONEY$1$[ebp]
  0013a	8b 9d d8 fe ff
	ff		 mov	 ebx, DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp]
  00140	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00146	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00149	50		 push	 eax
  0014a	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0014d	50		 push	 eax
  0014e	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00151	50		 push	 eax
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_0GA@JMGLBJMH@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Pay@
  00157	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0015d	8b bd e4 fe ff
	ff		 mov	 edi, DWORD PTR tv665[ebp]
  00163	83 c4 34	 add	 esp, 52			; 00000034H
$LN2@PlayFailed:

; 2958 : 		return;
; 2959 : 
; 2960 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  00166	83 c6 14	 add	 esi, 20			; 00000014H
  00169	83 ef 01	 sub	 edi, 1
  0016c	89 bd e4 fe ff
	ff		 mov	 DWORD PTR tv665[ebp], edi
  00172	0f 85 db fe ff
	ff		 jne	 $LL4@PlayFailed
  00178	5f		 pop	 edi
  00179	5e		 pop	 esi
$LN3@PlayFailed:

; 2982 : 					iChaosCastleIndex+1, gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].AccountID,
; 2983 : 					gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].Name,
; 2984 : 					iFIRST_MONEY, iPAYBACK_MONEY, iNOW_MONEY);
; 2985 : 
; 2986 : 			}
; 2987 : 		}
; 2988 : 	}
; 2989 : }

  0017a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017d	33 cd		 xor	 ecx, ebp
  0017f	5b		 pop	 ebx
  00180	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c2 04 00	 ret	 4
?PlayFailedRollBack@CChaosCastle@@QAEXH@Z ENDP		; CChaosCastle::PlayFailedRollBack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?CheckMonsterInDieTile@CChaosCastle@@QAEXH@Z
_TEXT	SEGMENT
tv1919 = -112						; size = 4
__Idx$1$ = -108						; size = 4
__Capacity$1$ = -104					; size = 4
_iPT$2 = -100						; size = 8
_iUSER_AXIS$1$ = -92					; size = 4
tv1908 = -88						; size = 4
_iChaosCastleIndex$GSCopy$1$ = -84			; size = 4
_this$GSCopy$1$ = -76					; size = 4
_iPT$1$ = -72						; size = 4
tv1890 = -72						; size = 4
_iPT$2$ = -68						; size = 4
tv1921 = -68						; size = 4
_vtMAP_UNTRAP$ = -64					; size = 48
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iChaosCastleIndex$ = 8					; size = 4
?CheckMonsterInDieTile@CChaosCastle@@QAEXH@Z PROC	; CChaosCastle::CheckMonsterInDieTile, COMDAT
; _this$ = ecx

; 2824 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CheckMonsterInDieTile@CChaosCastle@@QAEXH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 64	 sub	 esp, 100		; 00000064H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d b4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002e	8b 75 08	 mov	 esi, DWORD PTR _iChaosCastleIndex$[ebp]
  00031	89 75 ac	 mov	 DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp], esi

; 2825 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00034	85 f6		 test	 esi, esi
  00036	0f 88 d7 02 00
	00		 js	 $LN1@CheckMonst
  0003c	33 c0		 xor	 eax, eax
  0003e	83 fe 06	 cmp	 esi, 6
  00041	0f 9e c0	 setle	 al
  00044	85 c0		 test	 eax, eax
  00046	0f 84 c7 02 00
	00		 je	 $LN1@CheckMonst

; 2826 : 		return ;
; 2827 : 
; 2828 : 	int iUSER_AXIS = 0;
; 2829 : 	std::vector<POINT> vtMAP_UNTRAP[4];

  0004c	68 00 00 00 00	 push	 OFFSET ??1?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE@XZ ; std::vector<tagPOINT,std::allocator<tagPOINT> >::~vector<tagPOINT,std::allocator<tagPOINT> >
  00051	68 00 00 00 00	 push	 OFFSET ??0?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE@XZ ; std::vector<tagPOINT,std::allocator<tagPOINT> >::vector<tagPOINT,std::allocator<tagPOINT> >
  00056	6a 04		 push	 4
  00058	6a 0c		 push	 12			; 0000000cH
  0005a	8d 45 c0	 lea	 eax, DWORD PTR _vtMAP_UNTRAP$[ebp]
  0005d	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _iUSER_AXIS$1$[ebp], 0
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  0006a	b8 0c 00 00 00	 mov	 eax, OFFSET ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+12
  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00076	89 45 a8	 mov	 DWORD PTR tv1908[ebp], eax
  00079	8d 5d c4	 lea	 ebx, DWORD PTR _vtMAP_UNTRAP$[ebp+4]
  0007c	0f 1f 40 00	 npad	 4
$LL4@CheckMonst:

; 2832 : 	{
; 2833 : 		for(int iMAPX = g_rtPOINT_TRAP[iAXIS].left; iMAPX <= g_rtPOINT_TRAP[iAXIS].right ; iMAPX++)

  00080	8b 78 f4	 mov	 edi, DWORD PTR [eax-12]
  00083	89 7d b8	 mov	 DWORD PTR _iPT$1$[ebp], edi
  00086	3b 78 fc	 cmp	 edi, DWORD PTR [eax-4]
  00089	0f 8f fa 00 00
	00		 jg	 $LN2@CheckMonst
  0008f	90		 npad	 1
$LL7@CheckMonst:

; 2835 : 			for(int iMAPY = g_rtPOINT_TRAP[iAXIS].top; iMAPY <= g_rtPOINT_TRAP[iAXIS].bottom ; iMAPY++)

  00090	8b 70 f8	 mov	 esi, DWORD PTR [eax-8]
  00093	89 75 bc	 mov	 DWORD PTR _iPT$2$[ebp], esi
  00096	3b 30		 cmp	 esi, DWORD PTR [eax]
  00098	0f 8f de 00 00
	00		 jg	 $LN5@CheckMonst

; 2836 : 			{
; 2837 : 				int MapNumber = GetMap(iChaosCastleIndex);

  0009e	ff 75 ac	 push	 DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp]
  000a1	8b 4d b4	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000a4	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap
  000a9	69 c0 28 38 05
	00		 imul	 eax, eax, 342056
  000af	8d 88 00 00 00
	00		 lea	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[eax]
  000b5	89 4d 90	 mov	 DWORD PTR tv1919[ebp], ecx
$LL10@CheckMonst:

; 2838 : 				BYTE btMapAttr = MapC[MapNumber].GetAttr(iMAPX, iMAPY);

  000b8	56		 push	 esi
  000b9	57		 push	 edi
  000ba	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  000bf	a8 0e		 test	 al, 14			; 0000000eH

; 2839 : 
; 2840 : 				if ( (btMapAttr&2)!= 2 && (btMapAttr&4)!= 4 && (btMapAttr&8)!= 8 )

  000c1	0f 85 a3 00 00
	00		 jne	 $LN8@CheckMonst

; 2842 : 					POINT iPT = {iMAPX, iMAPY};

  000c7	89 7d 9c	 mov	 DWORD PTR _iPT$2[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  000ca	8d 45 9c	 lea	 eax, DWORD PTR _iPT$2[ebp]
  000cd	8b 3b		 mov	 edi, DWORD PTR [ebx]
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 2842 : 					POINT iPT = {iMAPX, iMAPY};

  000cf	89 75 a0	 mov	 DWORD PTR _iPT$2[ebp+4], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  000d2	3b c7		 cmp	 eax, edi
  000d4	0f 83 57 02 00
	00		 jae	 $LN38@CheckMonst
  000da	8b 43 fc	 mov	 eax, DWORD PTR [ebx-4]
  000dd	8d 4d 9c	 lea	 ecx, DWORD PTR _iPT$2[ebp]
  000e0	3b c1		 cmp	 eax, ecx
  000e2	0f 87 49 02 00
	00		 ja	 $LN38@CheckMonst

; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  000e8	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  000eb	2b c8		 sub	 ecx, eax
  000ed	c1 f9 03	 sar	 ecx, 3
  000f0	89 4d 94	 mov	 DWORD PTR __Idx$1$[ebp], ecx

; 1278 : 			if (this->_Mylast() == this->_Myend())

  000f3	3b fa		 cmp	 edi, edx
  000f5	75 58		 jne	 SHORT $LN105@CheckMonst

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  000f7	8b c2		 mov	 eax, edx
  000f9	2b c7		 sub	 eax, edi
  000fb	c1 f8 03	 sar	 eax, 3

; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)

  000fe	83 f8 01	 cmp	 eax, 1
  00101	73 4c		 jae	 SHORT $LN105@CheckMonst

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00103	8b 4b fc	 mov	 ecx, DWORD PTR [ebx-4]

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00106	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0010b	2b f9		 sub	 edi, ecx
  0010d	c1 ff 03	 sar	 edi, 3

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00110	2b c7		 sub	 eax, edi
  00112	83 f8 01	 cmp	 eax, 1
  00115	0f 82 83 02 00
	00		 jb	 $LN613@CheckMonst

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);
; 207  : 		}
; 208  : 
; 209  : 	bool operator!=(const _Myiter& _Right) const
; 210  : 		{	// test for iterator inequality
; 211  : 		return (!(*this == _Right));
; 212  : 		}
; 213  : 
; 214  : 	bool operator<(const _Myiter& _Right) const
; 215  : 		{	// test if this < _Right
; 216  : 		_Compat(_Right);
; 217  : 		return (this->_Ptr < _Right._Ptr);
; 218  : 		}
; 219  : 
; 220  : 	bool operator>(const _Myiter& _Right) const
; 221  : 		{	// test if this > _Right
; 222  : 		return (_Right < *this);
; 223  : 		}
; 224  : 
; 225  : 	bool operator<=(const _Myiter& _Right) const
; 226  : 		{	// test if this <= _Right
; 227  : 		return (!(_Right < *this));
; 228  : 		}
; 229  : 
; 230  : 	bool operator>=(const _Myiter& _Right) const
; 231  : 		{	// test if this >= _Right
; 232  : 		return (!(*this < _Right));
; 233  : 		}
; 234  : 
; 235  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 236  : 	void _Compat(const _Myiter& _Right) const
; 237  : 		{	// test for compatible iterator pair
; 238  : 		if (this->_Getcont() == 0
; 239  : 			|| this->_Getcont() != _Right._Getcont())
; 240  : 			{	// report error
; 241  : 			_DEBUG_ERROR("vector iterators incompatible");
; 242  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 243  : 			}
; 244  : 		}
; 245  : 
; 246  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 247  : 	void _Compat(const _Myiter& _Right) const
; 248  : 		{	// test for compatible iterator pair
; 249  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 250  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 251  : 		}
; 252  : 
; 253  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 254  : 	void _Compat(const _Myiter&) const
; 255  : 		{	// test for compatible iterator pair
; 256  : 		}
; 257  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 258  : 
; 259  : 	_Tptr _Ptr;	// pointer to element in vector
; 260  : 	};
; 261  : 
; 262  : template<class _Myvec> inline
; 263  : 	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
; 264  : 		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
; 265  : 	{	// convert to unchecked
; 266  : 	return (_Iter._Unchecked());
; 267  : 	}
; 268  : 
; 269  : template<class _Myvec> inline
; 270  : 	_Vector_const_iterator<_Myvec>&
; 271  : 		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
; 272  : 			typename _Vector_const_iterator<_Myvec>
; 273  : 				::_Unchecked_type _Right)
; 274  : 	{	// convert to checked
; 275  : 	return (_Iter._Rechecked(_Right));
; 276  : 	}
; 277  : 
; 278  : template<class _Myvec> inline
; 279  : 	_Vector_const_iterator<_Myvec> operator+(
; 280  : 		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
; 281  : 		_Vector_const_iterator<_Myvec> _Next)
; 282  : 	{	// add offset to iterator
; 283  : 	return (_Next += _Off);
; 284  : 	}
; 285  : 
; 286  : 		// TEMPLATE CLASS _Vector_iterator
; 287  : template<class _Myvec>
; 288  : 	class _Vector_iterator
; 289  : 		: public _Vector_const_iterator<_Myvec>
; 290  : 	{	// iterator for mutable vector
; 291  : public:
; 292  : 	typedef _Vector_iterator<_Myvec> _Myiter;
; 293  : 	typedef _Vector_const_iterator<_Myvec> _Mybase;
; 294  : 	typedef random_access_iterator_tag iterator_category;
; 295  : 
; 296  : 	typedef typename _Myvec::value_type value_type;
; 297  : 	typedef typename _Myvec::difference_type difference_type;
; 298  : 	typedef typename _Myvec::pointer pointer;
; 299  : 	typedef typename _Myvec::reference reference;
; 300  : 
; 301  : 	_Vector_iterator()
; 302  : 		{	// construct with null vector pointer
; 303  : 		}
; 304  : 
; 305  : 	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
; 306  : 		: _Mybase(_Parg, _Pvector)
; 307  : 		{	// construct with pointer _Parg
; 308  : 		}
; 309  : 
; 310  : 	typedef pointer _Unchecked_type;
; 311  : 
; 312  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 313  : 		{	// reset from unchecked iterator
; 314  : 		this->_Ptr = _Right;
; 315  : 		return (*this);
; 316  : 		}
; 317  : 
; 318  : 	_Unchecked_type _Unchecked() const
; 319  : 		{	// make an unchecked iterator
; 320  : 		return (_Unchecked_type(this->_Ptr));
; 321  : 		}
; 322  : 
; 323  : 	reference operator*() const
; 324  : 		{	// return designated object
; 325  : 		return ((reference)**(_Mybase *)this);
; 326  : 		}
; 327  : 
; 328  : 	pointer operator->() const
; 329  : 		{	// return pointer to class object
; 330  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 331  : 		}
; 332  : 
; 333  : 	_Myiter& operator++()
; 334  : 		{	// preincrement
; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);
; 337  : 		}
; 338  : 
; 339  : 	_Myiter operator++(int)
; 340  : 		{	// postincrement
; 341  : 		_Myiter _Tmp = *this;
; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}
; 345  : 
; 346  : 	_Myiter& operator--()
; 347  : 		{	// predecrement
; 348  : 		--*(_Mybase *)this;
; 349  : 		return (*this);
; 350  : 		}
; 351  : 
; 352  : 	_Myiter operator--(int)
; 353  : 		{	// postdecrement
; 354  : 		_Myiter _Tmp = *this;
; 355  : 		--*this;
; 356  : 		return (_Tmp);
; 357  : 		}
; 358  : 
; 359  : 	_Myiter& operator+=(difference_type _Off)
; 360  : 		{	// increment by integer
; 361  : 		*(_Mybase *)this += _Off;
; 362  : 		return (*this);
; 363  : 		}
; 364  : 
; 365  : 	_Myiter operator+(difference_type _Off) const
; 366  : 		{	// return this + integer
; 367  : 		_Myiter _Tmp = *this;
; 368  : 		return (_Tmp += _Off);
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator-=(difference_type _Off)
; 372  : 		{	// decrement by integer
; 373  : 		return (*this += -_Off);
; 374  : 		}
; 375  : 
; 376  : 	_Myiter operator-(difference_type _Off) const
; 377  : 		{	// return this - integer
; 378  : 		_Myiter _Tmp = *this;
; 379  : 		return (_Tmp -= _Off);
; 380  : 		}
; 381  : 
; 382  : 	difference_type operator-(const _Mybase& _Right) const
; 383  : 		{	// return difference of iterators
; 384  : 		return (*(_Mybase *)this - _Right);
; 385  : 		}
; 386  : 
; 387  : 	reference operator[](difference_type _Off) const
; 388  : 		{	// subscript
; 389  : 		return (*(*this + _Off));
; 390  : 		}
; 391  : 	};
; 392  : 
; 393  : template<class _Myvec> inline
; 394  : 	typename _Vector_iterator<_Myvec>::_Unchecked_type
; 395  : 		_Unchecked(_Vector_iterator<_Myvec> _Iter)
; 396  : 	{	// convert to unchecked
; 397  : 	return (_Iter._Unchecked());
; 398  : 	}
; 399  : 
; 400  : template<class _Myvec> inline
; 401  : 	_Vector_iterator<_Myvec>&
; 402  : 		_Rechecked(_Vector_iterator<_Myvec>& _Iter,
; 403  : 			typename _Vector_iterator<_Myvec>
; 404  : 				::_Unchecked_type _Right)
; 405  : 	{	// convert to checked
; 406  : 	return (_Iter._Rechecked(_Right));
; 407  : 	}
; 408  : 
; 409  : template<class _Myvec> inline
; 410  : 	_Vector_iterator<_Myvec> operator+(
; 411  : 		typename _Vector_iterator<_Myvec>::difference_type _Off,
; 412  : 		_Vector_iterator<_Myvec> _Next)
; 413  : 	{	// add offset to iterator
; 414  : 	return (_Next += _Off);
; 415  : 	}
; 416  : 
; 417  : 		// vector TYPE WRAPPERS
; 418  : template<class _Value_type,
; 419  : 	class _Size_type,
; 420  : 	class _Difference_type,
; 421  : 	class _Pointer,
; 422  : 	class _Const_pointer,
; 423  : 	class _Reference,
; 424  : 	class _Const_reference>
; 425  : 	struct _Vec_iter_types
; 426  : 	{	// wraps types needed by iterators
; 427  : 	typedef _Value_type value_type;
; 428  : 	typedef _Size_type size_type;
; 429  : 	typedef _Difference_type difference_type;
; 430  : 	typedef _Pointer pointer;
; 431  : 	typedef _Const_pointer const_pointer;
; 432  : 	typedef _Reference reference;
; 433  : 	typedef _Const_reference const_reference;
; 434  : 	};
; 435  : 
; 436  : template<class _Ty,
; 437  : 	class _Alloc0>
; 438  : 	struct _Vec_base_types
; 439  : 	{	// types needed for a container base
; 440  : 	typedef _Alloc0 _Alloc;
; 441  : 	typedef _Vec_base_types<_Ty, _Alloc> _Myt;
; 442  : 
; 443  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 444  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 445  : 
; 446  : 
; 447  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 448  : 		_Simple_types<typename _Alty::value_type>,
; 449  : 		_Vec_iter_types<typename _Alty::value_type,
; 450  : 			typename _Alty::size_type,
; 451  : 			typename _Alty::difference_type,
; 452  : 			typename _Alty::pointer,
; 453  : 			typename _Alty::const_pointer,
; 454  : 			typename _Alty::reference,
; 455  : 			typename _Alty::const_reference> >::type
; 456  : 		_Val_types;
; 457  : 	};
; 458  : 
; 459  : 		// TEMPLATE CLASS _Vector_val
; 460  : template<class _Val_types>
; 461  : 	class _Vector_val
; 462  : 		: public _Container_base
; 463  : 	{	// base class for vector to hold data
; 464  : public:
; 465  : 	typedef _Vector_val<_Val_types> _Myt;
; 466  : 
; 467  : 	typedef typename _Val_types::value_type value_type;
; 468  : 	typedef typename _Val_types::size_type size_type;
; 469  : 	typedef typename _Val_types::difference_type difference_type;
; 470  : 	typedef typename _Val_types::pointer pointer;
; 471  : 	typedef typename _Val_types::const_pointer const_pointer;
; 472  : 	typedef typename _Val_types::reference reference;
; 473  : 	typedef typename _Val_types::const_reference const_reference;
; 474  : 
; 475  : 	typedef _Vector_iterator<_Myt> iterator;
; 476  : 	typedef _Vector_const_iterator<_Myt> const_iterator;
; 477  : 
; 478  : 	_Vector_val()
; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();
; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}
; 484  : 
; 485  : 	pointer _Myfirst;	// pointer to beginning of array
; 486  : 	pointer _Mylast;	// pointer to current end of sequence
; 487  : 	pointer _Myend;	// pointer to end of array
; 488  : 	};
; 489  : 
; 490  : 		// TEMPLATE CLASS _Vector_alloc
; 491  : template<class _Alloc_types>
; 492  : 	class _Vector_alloc
; 493  : 	{	// base class for vector to hold allocator
; 494  : public:
; 495  : 	typedef _Vector_alloc<_Alloc_types> _Myt;
; 496  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 497  : 	typedef typename _Alloc_types::_Alty _Alty;
; 498  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 499  : 
; 500  : 	typedef typename _Val_types::value_type value_type;
; 501  : 	typedef typename _Val_types::size_type size_type;
; 502  : 	typedef typename _Val_types::difference_type difference_type;
; 503  : 	typedef typename _Val_types::pointer pointer;
; 504  : 	typedef typename _Val_types::const_pointer const_pointer;
; 505  : 	typedef typename _Val_types::reference reference;
; 506  : 	typedef typename _Val_types::const_reference const_reference;
; 507  : 
; 508  : 	typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
; 509  : 	typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
; 510  : 
; 511  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 512  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 513  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 514  : 		{	// construct allocator from _Al
; 515  : 		}
; 516  : 
; 517  : 	_Vector_alloc(_Alloc&& _Al)
; 518  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 519  : 		{	// construct allocator from _Al
; 520  : 		}
; 521  : 
; 522  : 	void _Copy_alloc(const _Alty& _Al)
; 523  : 		{	// replace old allocator
; 524  : 		_Pocca(_Getal(), _Al);
; 525  : 		}
; 526  : 
; 527  : 	void _Move_alloc(_Alty& _Al)
; 528  : 		{	// replace old allocator
; 529  : 		_Pocma(_Getal(), _Al);
; 530  : 		}
; 531  : 
; 532  : 	void _Swap_alloc(_Myt& _Right)
; 533  : 		{	// swap allocators
; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}
; 536  : 
; 537  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 538  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 540  : 		{	// construct allocator from _Al
; 541  : 		_Alloc_proxy();
; 542  : 		}
; 543  : 
; 544  : 	_Vector_alloc(_Alloc&& _Al)
; 545  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 546  : 		{	// construct allocator from _Al
; 547  : 		_Alloc_proxy();
; 548  : 		}
; 549  : 
; 550  : 	~_Vector_alloc() _NOEXCEPT
; 551  : 		{	// destroy proxy
; 552  : 		_Free_proxy();
; 553  : 		}
; 554  : 
; 555  : 	void _Copy_alloc(const _Alty& _Al)
; 556  : 		{	// replace old allocator
; 557  : 		_Free_proxy();
; 558  : 		_Pocca(_Getal(), _Al);
; 559  : 		_Alloc_proxy();
; 560  : 		}
; 561  : 
; 562  : 	void _Move_alloc(_Alty& _Al)
; 563  : 		{	// replace old allocator
; 564  : 		_Free_proxy();
; 565  : 		_Pocma(_Getal(), _Al);
; 566  : 		_Alloc_proxy();
; 567  : 		}
; 568  : 
; 569  : 	void _Swap_alloc(_Myt& _Right)
; 570  : 		{	// swap allocators
; 571  : 		_Pocs(_Getal(), _Right._Getal());
; 572  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 573  : 		}
; 574  : 
; 575  : 	void _Alloc_proxy()
; 576  : 		{	// construct proxy
; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());
; 579  : 		_Myproxy() = _Alproxy.allocate(1);
; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 581  : 		_Myproxy()->_Mycont = &_Get_data();
; 582  : 		}
; 583  : 
; 584  : 	void _Free_proxy()
; 585  : 		{	// destroy proxy
; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());
; 588  : 		_Orphan_all();
; 589  : 		_Alproxy.destroy(_Myproxy());
; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 591  : 		_Myproxy() = 0;
; 592  : 		}
; 593  : 
; 594  : 	_Iterator_base12 **_Getpfirst() const
; 595  : 		{	// get address of iterator chain
; 596  : 		return (_Get_data()._Getpfirst());
; 597  : 		}
; 598  : 
; 599  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 600  : 		{	// return reference to _Myproxy
; 601  : 		return (_Get_data()._Myproxy);
; 602  : 		}
; 603  : 
; 604  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 605  : 		{	// return const reference to _Myproxy
; 606  : 		return (_Get_data()._Myproxy);
; 607  : 		}
; 608  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 609  : 
; 610  : 	void _Orphan_all()
; 611  : 		{	// orphan all iterators
; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}
; 614  : 
; 615  : 	void _Swap_all(_Myt& _Right)
; 616  : 		{	// swap all iterators
; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}
; 619  : 
; 620  : 	_Alty& _Getal() _NOEXCEPT
; 621  : 		{	// return reference to allocator
; 622  : 		return (_Mypair._Get_first());
; 623  : 		}
; 624  : 
; 625  : 	const _Alty& _Getal() const _NOEXCEPT
; 626  : 		{	// return const reference to allocator
; 627  : 		return (_Mypair._Get_first());
; 628  : 		}
; 629  : 
; 630  : 	_Vector_val<_Val_types>& _Get_data() _NOEXCEPT
; 631  : 		{	// return reference to _Vector_val
; 632  : 		return (_Mypair._Get_second());
; 633  : 		}
; 634  : 
; 635  : 	const _Vector_val<_Val_types>& _Get_data() const _NOEXCEPT
; 636  : 		{	// return const reference to _Vector_val
; 637  : 		return (_Mypair._Get_second());
; 638  : 		}
; 639  : 
; 640  : 	pointer& _Myfirst() _NOEXCEPT
; 641  : 		{	// return reference to _Myfirst
; 642  : 		return (_Get_data()._Myfirst);
; 643  : 		}
; 644  : 
; 645  : 	const pointer& _Myfirst() const _NOEXCEPT
; 646  : 		{	// return const reference to _Myfirst
; 647  : 		return (_Get_data()._Myfirst);
; 648  : 		}
; 649  : 
; 650  : 	pointer& _Mylast() _NOEXCEPT
; 651  : 		{	// return reference to _Mylast
; 652  : 		return (_Get_data()._Mylast);
; 653  : 		}
; 654  : 
; 655  : 	const pointer& _Mylast() const _NOEXCEPT
; 656  : 		{	// return const reference to _Mylast
; 657  : 		return (_Get_data()._Mylast);
; 658  : 		}
; 659  : 
; 660  : 	pointer& _Myend() _NOEXCEPT
; 661  : 		{	// return reference to _Myend
; 662  : 		return (_Get_data()._Myend);
; 663  : 		}
; 664  : 
; 665  : 	const pointer& _Myend() const _NOEXCEPT
; 666  : 		{	// return const reference to _Myend
; 667  : 		return (_Get_data()._Myend);
; 668  : 		}
; 669  : 
; 670  : private:
; 671  : 	_Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
; 672  : 	};
; 673  : 
; 674  : 		// TEMPLATE CLASS vector
; 675  : template<class _Ty,
; 676  : 	class _Alloc = allocator<_Ty> >
; 677  : 	class vector
; 678  : 		: public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
; 679  : 	{	// varying size array of values
; 680  : public:
; 681  : 	typedef vector<_Ty, _Alloc> _Myt;
; 682  : 	typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
; 683  : 	typedef _Alloc allocator_type;
; 684  : 
; 685  : 	typedef typename _Mybase::_Alty _Alty;
; 686  : 
; 687  : 	typedef typename _Mybase::value_type value_type;
; 688  : 	typedef typename _Mybase::size_type size_type;
; 689  : 	typedef typename _Mybase::difference_type difference_type;
; 690  : 	typedef typename _Mybase::pointer pointer;
; 691  : 	typedef typename _Mybase::const_pointer const_pointer;
; 692  : 	typedef typename _Mybase::reference reference;
; 693  : 	typedef typename _Mybase::const_reference const_reference;
; 694  : 
; 695  :  #define _VICONT(it)	it._Getcont()
; 696  :  #define _VIPTR(it)	(it)._Ptr
; 697  : 
; 698  : 	typedef typename _Mybase::iterator iterator;
; 699  : 	typedef typename _Mybase::const_iterator const_iterator;
; 700  : 
; 701  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 702  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 703  : 
; 704  : 	vector() _NOEXCEPT
; 705  : 		: _Mybase()
; 706  : 		{	// construct empty vector
; 707  : 		}
; 708  : 
; 709  : 	explicit vector(const _Alloc& _Al) _NOEXCEPT
; 710  : 		: _Mybase(_Al)
; 711  : 		{	// construct empty vector, allocator
; 712  : 		}
; 713  : 
; 714  : 	explicit vector(size_type _Count)
; 715  : 		: _Mybase()
; 716  : 		{	// construct from _Count * value_type()
; 717  : 		if (_Buy(_Count))
; 718  : 			{	// nonzero, fill it
; 719  : 			_TRY_BEGIN
; 720  : 			_Uninitialized_default_fill_n(this->_Myfirst(), _Count,
; 721  : 				this->_Getal());
; 722  : 			this->_Mylast() += _Count;
; 723  : 			_CATCH_ALL
; 724  : 			_Tidy();
; 725  : 			_RERAISE;
; 726  : 			_CATCH_END
; 727  : 			}
; 728  : 		}
; 729  : 
; 730  : 	vector(size_type _Count, const value_type& _Val)
; 731  : 		: _Mybase()
; 732  : 		{	// construct from _Count * _Val
; 733  : 		_Construct_n(_Count, _STD addressof(_Val));
; 734  : 		}
; 735  : 
; 736  : 	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 737  : 		: _Mybase(_Al)
; 738  : 		{	// construct from _Count * _Val, allocator
; 739  : 		_Construct_n(_Count, _STD addressof(_Val));
; 740  : 		}
; 741  : 
; 742  : 	vector(const _Myt& _Right)
; 743  : 
; 744  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 745  : 
; 746  : 
; 747  : 		{	// construct by copying _Right
; 748  : 		if (_Buy(_Right.size()))
; 749  : 			_TRY_BEGIN
; 750  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 751  : 				this->_Myfirst());
; 752  : 			_CATCH_ALL
; 753  : 			_Tidy();
; 754  : 			_RERAISE;
; 755  : 			_CATCH_END
; 756  : 		}
; 757  : 
; 758  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 759  : 		: _Mybase(_Al)
; 760  : 		{	// construct by copying _Right, allocator
; 761  : 		if (_Buy(_Right.size()))
; 762  : 			_TRY_BEGIN
; 763  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 764  : 				this->_Myfirst());
; 765  : 			_CATCH_ALL
; 766  : 			_Tidy();
; 767  : 			_RERAISE;
; 768  : 			_CATCH_END
; 769  : 		}
; 770  : 
; 771  : 	template<class _Iter,
; 772  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 773  : 			void>::type>
; 774  : 		vector(_Iter _First, _Iter _Last)
; 775  : 		: _Mybase()
; 776  : 		{	// construct from [_First, _Last)
; 777  : 		_Construct(_First, _Last);
; 778  : 		}
; 779  : 
; 780  : 	template<class _Iter,
; 781  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 782  : 			void>::type>
; 783  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 784  : 		: _Mybase(_Al)
; 785  : 		{	// construct from [_First, _Last) with allocator
; 786  : 		_Construct(_First, _Last);
; 787  : 		}
; 788  : 
; 789  : 	template<class _Iter>
; 790  : 		void _Construct(_Iter _First, _Iter _Last)
; 791  : 		{	// initialize with [_First, _Last)
; 792  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 793  : 		}
; 794  : 
; 795  : 	template<class _Iter>
; 796  : 		void _Construct(_Iter _First, _Iter _Last,
; 797  : 			input_iterator_tag)
; 798  : 		{	// initialize with [_First, _Last), input iterators
; 799  : 		_TRY_BEGIN
; 800  : 
; 801  : 		for (; _First != _Last; ++_First)
; 802  : 			emplace_back(*_First);
; 803  : 
; 804  : 		_CATCH_ALL
; 805  : 		_Tidy();
; 806  : 		_RERAISE;
; 807  : 		_CATCH_END
; 808  : 		}
; 809  : 
; 810  : 	template<class _Iter>
; 811  : 		void _Construct(_Iter _First, _Iter _Last,
; 812  : 			forward_iterator_tag)
; 813  : 		{	// initialize with [_First, _Last), forward iterators
; 814  : 		if (_Buy(_STD distance(_First, _Last)))
; 815  : 			{	// nonzero, fill it
; 816  : 			_TRY_BEGIN
; 817  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 818  : 			_CATCH_ALL
; 819  : 			_Tidy();
; 820  : 			_RERAISE;
; 821  : 			_CATCH_END
; 822  : 			}
; 823  : 		}
; 824  : 
; 825  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 826  : 		{	// construct from _Count * *_Pval
; 827  : 		if (_Buy(_Count))
; 828  : 			{	// nonzero, fill it
; 829  : 			_TRY_BEGIN
; 830  : 			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
; 831  : 			_CATCH_ALL
; 832  : 			_Tidy();
; 833  : 			_RERAISE;
; 834  : 			_CATCH_END
; 835  : 			}
; 836  : 		}
; 837  : 
; 838  : 	vector(_Myt&& _Right) _NOEXCEPT
; 839  : 		: _Mybase(_STD move(_Right._Getal()))
; 840  : 		{	// construct by moving _Right
; 841  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 842  : 		}
; 843  : 
; 844  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 845  : 		: _Mybase(_Al)
; 846  : 		{	// construct by moving _Right, allocator
; 847  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 848  : 		}
; 849  : 
; 850  : 	_Myt& operator=(_Myt&& _Right)
; 851  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 852  : 			|| _Alty::is_always_equal::value)
; 853  : 		{	// assign by moving _Right
; 854  : 		if (this != &_Right)
; 855  : 			{	// different, assign it
; 856  : 			_Tidy();
; 857  : 			if (_Alty::propagate_on_container_move_assignment::value
; 858  : 				&& this->_Getal() != _Right._Getal())
; 859  : 				this->_Move_alloc(_Right._Getal());
; 860  : 
; 861  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 862  : 			}
; 863  : 		return (*this);
; 864  : 		}
; 865  : 
; 866  : 	void _Assign_rv(_Myt&& _Right, true_type)
; 867  : 		{	// move from _Right, stealing its contents
; 868  : 		this->_Swap_all((_Myt&)_Right);
; 869  : 		this->_Myfirst() = _Right._Myfirst();
; 870  : 		this->_Mylast() = _Right._Mylast();
; 871  : 		this->_Myend() = _Right._Myend();
; 872  : 
; 873  : 		_Right._Myfirst() = pointer();
; 874  : 		_Right._Mylast() = pointer();
; 875  : 		_Right._Myend() = pointer();
; 876  : 		}
; 877  : 
; 878  : 	void _Assign_rv(_Myt&& _Right, false_type)
; 879  : 		{	// move from _Right, possibly moving its contents
; 880  : 		if (get_allocator() == _Right.get_allocator())
; 881  : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 882  : 		else
; 883  : 			_Construct(_STD make_move_iterator(_Right.begin()),
; 884  : 				_STD make_move_iterator(_Right.end()));
; 885  : 		}
; 886  : 
; 887  : 	void _Assign_rv(_Myt&& _Right)
; 888  : 		{	// assign by moving _Right
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 890  : 			typename _Alty::propagate_on_container_move_assignment());
; 891  : 		}
; 892  : 
; 893  : 
; 894  : 	void push_back(value_type&& _Val)
; 895  : 		{	// insert by moving into element at end
; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 899  : 			if (this->_Mylast() == this->_Myend())
; 900  : 				_Reserve(1);
; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 902  : 			this->_Getal().construct(this->_Mylast(),
; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();
; 905  : 			}
; 906  : 		else
; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())
; 909  : 				_Reserve(1);
; 910  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 911  : 			this->_Getal().construct(this->_Mylast(),
; 912  : 				_STD forward<value_type>(_Val));
; 913  : 			++this->_Mylast();
; 914  : 			}
; 915  : 		}
; 916  : 
; 917  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 918  : 		{	// insert by moving _Val at _Where
; 919  : 		return (emplace(_Where, _STD move(_Val)));
; 920  : 		}
; 921  : 
; 922  : 	template<class... _Valty>
; 923  : 		void emplace_back(_Valty&&... _Val)
; 924  : 		{	// insert by moving into element at end
; 925  : 		if (this->_Mylast() == this->_Myend())
; 926  : 			_Reserve(1);
; 927  : 		_Orphan_range(this->_Mylast(), this->_Mylast());
; 928  : 		this->_Getal().construct(this->_Mylast(),
; 929  : 			_STD forward<_Valty>(_Val)...);
; 930  : 		++this->_Mylast();
; 931  : 		}
; 932  : 
; 933  : 	template<class... _Valty>
; 934  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 935  : 		{	// insert by moving _Val at _Where
; 936  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 937  : 
; 938  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 939  : 		if (size() < _Off)
; 940  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 941  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 942  : 
; 943  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 944  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 945  : 		return (begin() + _Off);
; 946  : 		}
; 947  : 
; 948  : 
; 949  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Construct(_Ilist.begin(), _Ilist.end());
; 954  : 		}
; 955  : 
; 956  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 957  : 		{	// assign initializer_list
; 958  : 		assign(_Ilist.begin(), _Ilist.end());
; 959  : 		return (*this);
; 960  : 		}
; 961  : 
; 962  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 963  : 		{	// assign initializer_list
; 964  : 		assign(_Ilist.begin(), _Ilist.end());
; 965  : 		}
; 966  : 
; 967  : 	iterator insert(const_iterator _Where,
; 968  : 		_XSTD initializer_list<value_type> _Ilist)
; 969  : 		{	// insert initializer_list
; 970  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 971  : 		}
; 972  : 
; 973  : 	~vector() _NOEXCEPT
; 974  : 		{	// destroy the object
; 975  : 		_Tidy();
; 976  : 		}
; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0011b	2b d1		 sub	 edx, ecx

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0011d	8d 77 01	 lea	 esi, DWORD PTR [edi+1]

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);
; 207  : 		}
; 208  : 
; 209  : 	bool operator!=(const _Myiter& _Right) const
; 210  : 		{	// test for iterator inequality
; 211  : 		return (!(*this == _Right));
; 212  : 		}
; 213  : 
; 214  : 	bool operator<(const _Myiter& _Right) const
; 215  : 		{	// test if this < _Right
; 216  : 		_Compat(_Right);
; 217  : 		return (this->_Ptr < _Right._Ptr);
; 218  : 		}
; 219  : 
; 220  : 	bool operator>(const _Myiter& _Right) const
; 221  : 		{	// test if this > _Right
; 222  : 		return (_Right < *this);
; 223  : 		}
; 224  : 
; 225  : 	bool operator<=(const _Myiter& _Right) const
; 226  : 		{	// test if this <= _Right
; 227  : 		return (!(_Right < *this));
; 228  : 		}
; 229  : 
; 230  : 	bool operator>=(const _Myiter& _Right) const
; 231  : 		{	// test if this >= _Right
; 232  : 		return (!(*this < _Right));
; 233  : 		}
; 234  : 
; 235  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 236  : 	void _Compat(const _Myiter& _Right) const
; 237  : 		{	// test for compatible iterator pair
; 238  : 		if (this->_Getcont() == 0
; 239  : 			|| this->_Getcont() != _Right._Getcont())
; 240  : 			{	// report error
; 241  : 			_DEBUG_ERROR("vector iterators incompatible");
; 242  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 243  : 			}
; 244  : 		}
; 245  : 
; 246  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 247  : 	void _Compat(const _Myiter& _Right) const
; 248  : 		{	// test for compatible iterator pair
; 249  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 250  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 251  : 		}
; 252  : 
; 253  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 254  : 	void _Compat(const _Myiter&) const
; 255  : 		{	// test for compatible iterator pair
; 256  : 		}
; 257  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 258  : 
; 259  : 	_Tptr _Ptr;	// pointer to element in vector
; 260  : 	};
; 261  : 
; 262  : template<class _Myvec> inline
; 263  : 	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
; 264  : 		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
; 265  : 	{	// convert to unchecked
; 266  : 	return (_Iter._Unchecked());
; 267  : 	}
; 268  : 
; 269  : template<class _Myvec> inline
; 270  : 	_Vector_const_iterator<_Myvec>&
; 271  : 		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
; 272  : 			typename _Vector_const_iterator<_Myvec>
; 273  : 				::_Unchecked_type _Right)
; 274  : 	{	// convert to checked
; 275  : 	return (_Iter._Rechecked(_Right));
; 276  : 	}
; 277  : 
; 278  : template<class _Myvec> inline
; 279  : 	_Vector_const_iterator<_Myvec> operator+(
; 280  : 		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
; 281  : 		_Vector_const_iterator<_Myvec> _Next)
; 282  : 	{	// add offset to iterator
; 283  : 	return (_Next += _Off);
; 284  : 	}
; 285  : 
; 286  : 		// TEMPLATE CLASS _Vector_iterator
; 287  : template<class _Myvec>
; 288  : 	class _Vector_iterator
; 289  : 		: public _Vector_const_iterator<_Myvec>
; 290  : 	{	// iterator for mutable vector
; 291  : public:
; 292  : 	typedef _Vector_iterator<_Myvec> _Myiter;
; 293  : 	typedef _Vector_const_iterator<_Myvec> _Mybase;
; 294  : 	typedef random_access_iterator_tag iterator_category;
; 295  : 
; 296  : 	typedef typename _Myvec::value_type value_type;
; 297  : 	typedef typename _Myvec::difference_type difference_type;
; 298  : 	typedef typename _Myvec::pointer pointer;
; 299  : 	typedef typename _Myvec::reference reference;
; 300  : 
; 301  : 	_Vector_iterator()
; 302  : 		{	// construct with null vector pointer
; 303  : 		}
; 304  : 
; 305  : 	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
; 306  : 		: _Mybase(_Parg, _Pvector)
; 307  : 		{	// construct with pointer _Parg
; 308  : 		}
; 309  : 
; 310  : 	typedef pointer _Unchecked_type;
; 311  : 
; 312  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 313  : 		{	// reset from unchecked iterator
; 314  : 		this->_Ptr = _Right;
; 315  : 		return (*this);
; 316  : 		}
; 317  : 
; 318  : 	_Unchecked_type _Unchecked() const
; 319  : 		{	// make an unchecked iterator
; 320  : 		return (_Unchecked_type(this->_Ptr));
; 321  : 		}
; 322  : 
; 323  : 	reference operator*() const
; 324  : 		{	// return designated object
; 325  : 		return ((reference)**(_Mybase *)this);
; 326  : 		}
; 327  : 
; 328  : 	pointer operator->() const
; 329  : 		{	// return pointer to class object
; 330  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 331  : 		}
; 332  : 
; 333  : 	_Myiter& operator++()
; 334  : 		{	// preincrement
; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);
; 337  : 		}
; 338  : 
; 339  : 	_Myiter operator++(int)
; 340  : 		{	// postincrement
; 341  : 		_Myiter _Tmp = *this;
; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}
; 345  : 
; 346  : 	_Myiter& operator--()
; 347  : 		{	// predecrement
; 348  : 		--*(_Mybase *)this;
; 349  : 		return (*this);
; 350  : 		}
; 351  : 
; 352  : 	_Myiter operator--(int)
; 353  : 		{	// postdecrement
; 354  : 		_Myiter _Tmp = *this;
; 355  : 		--*this;
; 356  : 		return (_Tmp);
; 357  : 		}
; 358  : 
; 359  : 	_Myiter& operator+=(difference_type _Off)
; 360  : 		{	// increment by integer
; 361  : 		*(_Mybase *)this += _Off;
; 362  : 		return (*this);
; 363  : 		}
; 364  : 
; 365  : 	_Myiter operator+(difference_type _Off) const
; 366  : 		{	// return this + integer
; 367  : 		_Myiter _Tmp = *this;
; 368  : 		return (_Tmp += _Off);
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator-=(difference_type _Off)
; 372  : 		{	// decrement by integer
; 373  : 		return (*this += -_Off);
; 374  : 		}
; 375  : 
; 376  : 	_Myiter operator-(difference_type _Off) const
; 377  : 		{	// return this - integer
; 378  : 		_Myiter _Tmp = *this;
; 379  : 		return (_Tmp -= _Off);
; 380  : 		}
; 381  : 
; 382  : 	difference_type operator-(const _Mybase& _Right) const
; 383  : 		{	// return difference of iterators
; 384  : 		return (*(_Mybase *)this - _Right);
; 385  : 		}
; 386  : 
; 387  : 	reference operator[](difference_type _Off) const
; 388  : 		{	// subscript
; 389  : 		return (*(*this + _Off));
; 390  : 		}
; 391  : 	};
; 392  : 
; 393  : template<class _Myvec> inline
; 394  : 	typename _Vector_iterator<_Myvec>::_Unchecked_type
; 395  : 		_Unchecked(_Vector_iterator<_Myvec> _Iter)
; 396  : 	{	// convert to unchecked
; 397  : 	return (_Iter._Unchecked());
; 398  : 	}
; 399  : 
; 400  : template<class _Myvec> inline
; 401  : 	_Vector_iterator<_Myvec>&
; 402  : 		_Rechecked(_Vector_iterator<_Myvec>& _Iter,
; 403  : 			typename _Vector_iterator<_Myvec>
; 404  : 				::_Unchecked_type _Right)
; 405  : 	{	// convert to checked
; 406  : 	return (_Iter._Rechecked(_Right));
; 407  : 	}
; 408  : 
; 409  : template<class _Myvec> inline
; 410  : 	_Vector_iterator<_Myvec> operator+(
; 411  : 		typename _Vector_iterator<_Myvec>::difference_type _Off,
; 412  : 		_Vector_iterator<_Myvec> _Next)
; 413  : 	{	// add offset to iterator
; 414  : 	return (_Next += _Off);
; 415  : 	}
; 416  : 
; 417  : 		// vector TYPE WRAPPERS
; 418  : template<class _Value_type,
; 419  : 	class _Size_type,
; 420  : 	class _Difference_type,
; 421  : 	class _Pointer,
; 422  : 	class _Const_pointer,
; 423  : 	class _Reference,
; 424  : 	class _Const_reference>
; 425  : 	struct _Vec_iter_types
; 426  : 	{	// wraps types needed by iterators
; 427  : 	typedef _Value_type value_type;
; 428  : 	typedef _Size_type size_type;
; 429  : 	typedef _Difference_type difference_type;
; 430  : 	typedef _Pointer pointer;
; 431  : 	typedef _Const_pointer const_pointer;
; 432  : 	typedef _Reference reference;
; 433  : 	typedef _Const_reference const_reference;
; 434  : 	};
; 435  : 
; 436  : template<class _Ty,
; 437  : 	class _Alloc0>
; 438  : 	struct _Vec_base_types
; 439  : 	{	// types needed for a container base
; 440  : 	typedef _Alloc0 _Alloc;
; 441  : 	typedef _Vec_base_types<_Ty, _Alloc> _Myt;
; 442  : 
; 443  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 444  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 445  : 
; 446  : 
; 447  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 448  : 		_Simple_types<typename _Alty::value_type>,
; 449  : 		_Vec_iter_types<typename _Alty::value_type,
; 450  : 			typename _Alty::size_type,
; 451  : 			typename _Alty::difference_type,
; 452  : 			typename _Alty::pointer,
; 453  : 			typename _Alty::const_pointer,
; 454  : 			typename _Alty::reference,
; 455  : 			typename _Alty::const_reference> >::type
; 456  : 		_Val_types;
; 457  : 	};
; 458  : 
; 459  : 		// TEMPLATE CLASS _Vector_val
; 460  : template<class _Val_types>
; 461  : 	class _Vector_val
; 462  : 		: public _Container_base
; 463  : 	{	// base class for vector to hold data
; 464  : public:
; 465  : 	typedef _Vector_val<_Val_types> _Myt;
; 466  : 
; 467  : 	typedef typename _Val_types::value_type value_type;
; 468  : 	typedef typename _Val_types::size_type size_type;
; 469  : 	typedef typename _Val_types::difference_type difference_type;
; 470  : 	typedef typename _Val_types::pointer pointer;
; 471  : 	typedef typename _Val_types::const_pointer const_pointer;
; 472  : 	typedef typename _Val_types::reference reference;
; 473  : 	typedef typename _Val_types::const_reference const_reference;
; 474  : 
; 475  : 	typedef _Vector_iterator<_Myt> iterator;
; 476  : 	typedef _Vector_const_iterator<_Myt> const_iterator;
; 477  : 
; 478  : 	_Vector_val()
; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();
; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}
; 484  : 
; 485  : 	pointer _Myfirst;	// pointer to beginning of array
; 486  : 	pointer _Mylast;	// pointer to current end of sequence
; 487  : 	pointer _Myend;	// pointer to end of array
; 488  : 	};
; 489  : 
; 490  : 		// TEMPLATE CLASS _Vector_alloc
; 491  : template<class _Alloc_types>
; 492  : 	class _Vector_alloc
; 493  : 	{	// base class for vector to hold allocator
; 494  : public:
; 495  : 	typedef _Vector_alloc<_Alloc_types> _Myt;
; 496  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 497  : 	typedef typename _Alloc_types::_Alty _Alty;
; 498  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 499  : 
; 500  : 	typedef typename _Val_types::value_type value_type;
; 501  : 	typedef typename _Val_types::size_type size_type;
; 502  : 	typedef typename _Val_types::difference_type difference_type;
; 503  : 	typedef typename _Val_types::pointer pointer;
; 504  : 	typedef typename _Val_types::const_pointer const_pointer;
; 505  : 	typedef typename _Val_types::reference reference;
; 506  : 	typedef typename _Val_types::const_reference const_reference;
; 507  : 
; 508  : 	typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
; 509  : 	typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
; 510  : 
; 511  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 512  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 513  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 514  : 		{	// construct allocator from _Al
; 515  : 		}
; 516  : 
; 517  : 	_Vector_alloc(_Alloc&& _Al)
; 518  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 519  : 		{	// construct allocator from _Al
; 520  : 		}
; 521  : 
; 522  : 	void _Copy_alloc(const _Alty& _Al)
; 523  : 		{	// replace old allocator
; 524  : 		_Pocca(_Getal(), _Al);
; 525  : 		}
; 526  : 
; 527  : 	void _Move_alloc(_Alty& _Al)
; 528  : 		{	// replace old allocator
; 529  : 		_Pocma(_Getal(), _Al);
; 530  : 		}
; 531  : 
; 532  : 	void _Swap_alloc(_Myt& _Right)
; 533  : 		{	// swap allocators
; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}
; 536  : 
; 537  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 538  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 540  : 		{	// construct allocator from _Al
; 541  : 		_Alloc_proxy();
; 542  : 		}
; 543  : 
; 544  : 	_Vector_alloc(_Alloc&& _Al)
; 545  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 546  : 		{	// construct allocator from _Al
; 547  : 		_Alloc_proxy();
; 548  : 		}
; 549  : 
; 550  : 	~_Vector_alloc() _NOEXCEPT
; 551  : 		{	// destroy proxy
; 552  : 		_Free_proxy();
; 553  : 		}
; 554  : 
; 555  : 	void _Copy_alloc(const _Alty& _Al)
; 556  : 		{	// replace old allocator
; 557  : 		_Free_proxy();
; 558  : 		_Pocca(_Getal(), _Al);
; 559  : 		_Alloc_proxy();
; 560  : 		}
; 561  : 
; 562  : 	void _Move_alloc(_Alty& _Al)
; 563  : 		{	// replace old allocator
; 564  : 		_Free_proxy();
; 565  : 		_Pocma(_Getal(), _Al);
; 566  : 		_Alloc_proxy();
; 567  : 		}
; 568  : 
; 569  : 	void _Swap_alloc(_Myt& _Right)
; 570  : 		{	// swap allocators
; 571  : 		_Pocs(_Getal(), _Right._Getal());
; 572  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 573  : 		}
; 574  : 
; 575  : 	void _Alloc_proxy()
; 576  : 		{	// construct proxy
; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());
; 579  : 		_Myproxy() = _Alproxy.allocate(1);
; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 581  : 		_Myproxy()->_Mycont = &_Get_data();
; 582  : 		}
; 583  : 
; 584  : 	void _Free_proxy()
; 585  : 		{	// destroy proxy
; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());
; 588  : 		_Orphan_all();
; 589  : 		_Alproxy.destroy(_Myproxy());
; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 591  : 		_Myproxy() = 0;
; 592  : 		}
; 593  : 
; 594  : 	_Iterator_base12 **_Getpfirst() const
; 595  : 		{	// get address of iterator chain
; 596  : 		return (_Get_data()._Getpfirst());
; 597  : 		}
; 598  : 
; 599  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 600  : 		{	// return reference to _Myproxy
; 601  : 		return (_Get_data()._Myproxy);
; 602  : 		}
; 603  : 
; 604  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 605  : 		{	// return const reference to _Myproxy
; 606  : 		return (_Get_data()._Myproxy);
; 607  : 		}
; 608  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 609  : 
; 610  : 	void _Orphan_all()
; 611  : 		{	// orphan all iterators
; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}
; 614  : 
; 615  : 	void _Swap_all(_Myt& _Right)
; 616  : 		{	// swap all iterators
; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}
; 619  : 
; 620  : 	_Alty& _Getal() _NOEXCEPT
; 621  : 		{	// return reference to allocator
; 622  : 		return (_Mypair._Get_first());
; 623  : 		}
; 624  : 
; 625  : 	const _Alty& _Getal() const _NOEXCEPT
; 626  : 		{	// return const reference to allocator
; 627  : 		return (_Mypair._Get_first());
; 628  : 		}
; 629  : 
; 630  : 	_Vector_val<_Val_types>& _Get_data() _NOEXCEPT
; 631  : 		{	// return reference to _Vector_val
; 632  : 		return (_Mypair._Get_second());
; 633  : 		}
; 634  : 
; 635  : 	const _Vector_val<_Val_types>& _Get_data() const _NOEXCEPT
; 636  : 		{	// return const reference to _Vector_val
; 637  : 		return (_Mypair._Get_second());
; 638  : 		}
; 639  : 
; 640  : 	pointer& _Myfirst() _NOEXCEPT
; 641  : 		{	// return reference to _Myfirst
; 642  : 		return (_Get_data()._Myfirst);
; 643  : 		}
; 644  : 
; 645  : 	const pointer& _Myfirst() const _NOEXCEPT
; 646  : 		{	// return const reference to _Myfirst
; 647  : 		return (_Get_data()._Myfirst);
; 648  : 		}
; 649  : 
; 650  : 	pointer& _Mylast() _NOEXCEPT
; 651  : 		{	// return reference to _Mylast
; 652  : 		return (_Get_data()._Mylast);
; 653  : 		}
; 654  : 
; 655  : 	const pointer& _Mylast() const _NOEXCEPT
; 656  : 		{	// return const reference to _Mylast
; 657  : 		return (_Get_data()._Mylast);
; 658  : 		}
; 659  : 
; 660  : 	pointer& _Myend() _NOEXCEPT
; 661  : 		{	// return reference to _Myend
; 662  : 		return (_Get_data()._Myend);
; 663  : 		}
; 664  : 
; 665  : 	const pointer& _Myend() const _NOEXCEPT
; 666  : 		{	// return const reference to _Myend
; 667  : 		return (_Get_data()._Myend);
; 668  : 		}
; 669  : 
; 670  : private:
; 671  : 	_Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
; 672  : 	};
; 673  : 
; 674  : 		// TEMPLATE CLASS vector
; 675  : template<class _Ty,
; 676  : 	class _Alloc = allocator<_Ty> >
; 677  : 	class vector
; 678  : 		: public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
; 679  : 	{	// varying size array of values
; 680  : public:
; 681  : 	typedef vector<_Ty, _Alloc> _Myt;
; 682  : 	typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
; 683  : 	typedef _Alloc allocator_type;
; 684  : 
; 685  : 	typedef typename _Mybase::_Alty _Alty;
; 686  : 
; 687  : 	typedef typename _Mybase::value_type value_type;
; 688  : 	typedef typename _Mybase::size_type size_type;
; 689  : 	typedef typename _Mybase::difference_type difference_type;
; 690  : 	typedef typename _Mybase::pointer pointer;
; 691  : 	typedef typename _Mybase::const_pointer const_pointer;
; 692  : 	typedef typename _Mybase::reference reference;
; 693  : 	typedef typename _Mybase::const_reference const_reference;
; 694  : 
; 695  :  #define _VICONT(it)	it._Getcont()
; 696  :  #define _VIPTR(it)	(it)._Ptr
; 697  : 
; 698  : 	typedef typename _Mybase::iterator iterator;
; 699  : 	typedef typename _Mybase::const_iterator const_iterator;
; 700  : 
; 701  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 702  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 703  : 
; 704  : 	vector() _NOEXCEPT
; 705  : 		: _Mybase()
; 706  : 		{	// construct empty vector
; 707  : 		}
; 708  : 
; 709  : 	explicit vector(const _Alloc& _Al) _NOEXCEPT
; 710  : 		: _Mybase(_Al)
; 711  : 		{	// construct empty vector, allocator
; 712  : 		}
; 713  : 
; 714  : 	explicit vector(size_type _Count)
; 715  : 		: _Mybase()
; 716  : 		{	// construct from _Count * value_type()
; 717  : 		if (_Buy(_Count))
; 718  : 			{	// nonzero, fill it
; 719  : 			_TRY_BEGIN
; 720  : 			_Uninitialized_default_fill_n(this->_Myfirst(), _Count,
; 721  : 				this->_Getal());
; 722  : 			this->_Mylast() += _Count;
; 723  : 			_CATCH_ALL
; 724  : 			_Tidy();
; 725  : 			_RERAISE;
; 726  : 			_CATCH_END
; 727  : 			}
; 728  : 		}
; 729  : 
; 730  : 	vector(size_type _Count, const value_type& _Val)
; 731  : 		: _Mybase()
; 732  : 		{	// construct from _Count * _Val
; 733  : 		_Construct_n(_Count, _STD addressof(_Val));
; 734  : 		}
; 735  : 
; 736  : 	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 737  : 		: _Mybase(_Al)
; 738  : 		{	// construct from _Count * _Val, allocator
; 739  : 		_Construct_n(_Count, _STD addressof(_Val));
; 740  : 		}
; 741  : 
; 742  : 	vector(const _Myt& _Right)
; 743  : 
; 744  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 745  : 
; 746  : 
; 747  : 		{	// construct by copying _Right
; 748  : 		if (_Buy(_Right.size()))
; 749  : 			_TRY_BEGIN
; 750  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 751  : 				this->_Myfirst());
; 752  : 			_CATCH_ALL
; 753  : 			_Tidy();
; 754  : 			_RERAISE;
; 755  : 			_CATCH_END
; 756  : 		}
; 757  : 
; 758  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 759  : 		: _Mybase(_Al)
; 760  : 		{	// construct by copying _Right, allocator
; 761  : 		if (_Buy(_Right.size()))
; 762  : 			_TRY_BEGIN
; 763  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 764  : 				this->_Myfirst());
; 765  : 			_CATCH_ALL
; 766  : 			_Tidy();
; 767  : 			_RERAISE;
; 768  : 			_CATCH_END
; 769  : 		}
; 770  : 
; 771  : 	template<class _Iter,
; 772  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 773  : 			void>::type>
; 774  : 		vector(_Iter _First, _Iter _Last)
; 775  : 		: _Mybase()
; 776  : 		{	// construct from [_First, _Last)
; 777  : 		_Construct(_First, _Last);
; 778  : 		}
; 779  : 
; 780  : 	template<class _Iter,
; 781  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 782  : 			void>::type>
; 783  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 784  : 		: _Mybase(_Al)
; 785  : 		{	// construct from [_First, _Last) with allocator
; 786  : 		_Construct(_First, _Last);
; 787  : 		}
; 788  : 
; 789  : 	template<class _Iter>
; 790  : 		void _Construct(_Iter _First, _Iter _Last)
; 791  : 		{	// initialize with [_First, _Last)
; 792  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 793  : 		}
; 794  : 
; 795  : 	template<class _Iter>
; 796  : 		void _Construct(_Iter _First, _Iter _Last,
; 797  : 			input_iterator_tag)
; 798  : 		{	// initialize with [_First, _Last), input iterators
; 799  : 		_TRY_BEGIN
; 800  : 
; 801  : 		for (; _First != _Last; ++_First)
; 802  : 			emplace_back(*_First);
; 803  : 
; 804  : 		_CATCH_ALL
; 805  : 		_Tidy();
; 806  : 		_RERAISE;
; 807  : 		_CATCH_END
; 808  : 		}
; 809  : 
; 810  : 	template<class _Iter>
; 811  : 		void _Construct(_Iter _First, _Iter _Last,
; 812  : 			forward_iterator_tag)
; 813  : 		{	// initialize with [_First, _Last), forward iterators
; 814  : 		if (_Buy(_STD distance(_First, _Last)))
; 815  : 			{	// nonzero, fill it
; 816  : 			_TRY_BEGIN
; 817  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 818  : 			_CATCH_ALL
; 819  : 			_Tidy();
; 820  : 			_RERAISE;
; 821  : 			_CATCH_END
; 822  : 			}
; 823  : 		}
; 824  : 
; 825  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 826  : 		{	// construct from _Count * *_Pval
; 827  : 		if (_Buy(_Count))
; 828  : 			{	// nonzero, fill it
; 829  : 			_TRY_BEGIN
; 830  : 			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
; 831  : 			_CATCH_ALL
; 832  : 			_Tidy();
; 833  : 			_RERAISE;
; 834  : 			_CATCH_END
; 835  : 			}
; 836  : 		}
; 837  : 
; 838  : 	vector(_Myt&& _Right) _NOEXCEPT
; 839  : 		: _Mybase(_STD move(_Right._Getal()))
; 840  : 		{	// construct by moving _Right
; 841  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 842  : 		}
; 843  : 
; 844  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 845  : 		: _Mybase(_Al)
; 846  : 		{	// construct by moving _Right, allocator
; 847  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 848  : 		}
; 849  : 
; 850  : 	_Myt& operator=(_Myt&& _Right)
; 851  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 852  : 			|| _Alty::is_always_equal::value)
; 853  : 		{	// assign by moving _Right
; 854  : 		if (this != &_Right)
; 855  : 			{	// different, assign it
; 856  : 			_Tidy();
; 857  : 			if (_Alty::propagate_on_container_move_assignment::value
; 858  : 				&& this->_Getal() != _Right._Getal())
; 859  : 				this->_Move_alloc(_Right._Getal());
; 860  : 
; 861  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 862  : 			}
; 863  : 		return (*this);
; 864  : 		}
; 865  : 
; 866  : 	void _Assign_rv(_Myt&& _Right, true_type)
; 867  : 		{	// move from _Right, stealing its contents
; 868  : 		this->_Swap_all((_Myt&)_Right);
; 869  : 		this->_Myfirst() = _Right._Myfirst();
; 870  : 		this->_Mylast() = _Right._Mylast();
; 871  : 		this->_Myend() = _Right._Myend();
; 872  : 
; 873  : 		_Right._Myfirst() = pointer();
; 874  : 		_Right._Mylast() = pointer();
; 875  : 		_Right._Myend() = pointer();
; 876  : 		}
; 877  : 
; 878  : 	void _Assign_rv(_Myt&& _Right, false_type)
; 879  : 		{	// move from _Right, possibly moving its contents
; 880  : 		if (get_allocator() == _Right.get_allocator())
; 881  : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 882  : 		else
; 883  : 			_Construct(_STD make_move_iterator(_Right.begin()),
; 884  : 				_STD make_move_iterator(_Right.end()));
; 885  : 		}
; 886  : 
; 887  : 	void _Assign_rv(_Myt&& _Right)
; 888  : 		{	// assign by moving _Right
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 890  : 			typename _Alty::propagate_on_container_move_assignment());
; 891  : 		}
; 892  : 
; 893  : 
; 894  : 	void push_back(value_type&& _Val)
; 895  : 		{	// insert by moving into element at end
; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 899  : 			if (this->_Mylast() == this->_Myend())
; 900  : 				_Reserve(1);
; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 902  : 			this->_Getal().construct(this->_Mylast(),
; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();
; 905  : 			}
; 906  : 		else
; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())
; 909  : 				_Reserve(1);
; 910  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 911  : 			this->_Getal().construct(this->_Mylast(),
; 912  : 				_STD forward<value_type>(_Val));
; 913  : 			++this->_Mylast();
; 914  : 			}
; 915  : 		}
; 916  : 
; 917  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 918  : 		{	// insert by moving _Val at _Where
; 919  : 		return (emplace(_Where, _STD move(_Val)));
; 920  : 		}
; 921  : 
; 922  : 	template<class... _Valty>
; 923  : 		void emplace_back(_Valty&&... _Val)
; 924  : 		{	// insert by moving into element at end
; 925  : 		if (this->_Mylast() == this->_Myend())
; 926  : 			_Reserve(1);
; 927  : 		_Orphan_range(this->_Mylast(), this->_Mylast());
; 928  : 		this->_Getal().construct(this->_Mylast(),
; 929  : 			_STD forward<_Valty>(_Val)...);
; 930  : 		++this->_Mylast();
; 931  : 		}
; 932  : 
; 933  : 	template<class... _Valty>
; 934  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 935  : 		{	// insert by moving _Val at _Where
; 936  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 937  : 
; 938  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 939  : 		if (size() < _Off)
; 940  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 941  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 942  : 
; 943  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 944  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 945  : 		return (begin() + _Off);
; 946  : 		}
; 947  : 
; 948  : 
; 949  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Construct(_Ilist.begin(), _Ilist.end());
; 954  : 		}
; 955  : 
; 956  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 957  : 		{	// assign initializer_list
; 958  : 		assign(_Ilist.begin(), _Ilist.end());
; 959  : 		return (*this);
; 960  : 		}
; 961  : 
; 962  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 963  : 		{	// assign initializer_list
; 964  : 		assign(_Ilist.begin(), _Ilist.end());
; 965  : 		}
; 966  : 
; 967  : 	iterator insert(const_iterator _Where,
; 968  : 		_XSTD initializer_list<value_type> _Ilist)
; 969  : 		{	// insert initializer_list
; 970  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 971  : 		}
; 972  : 
; 973  : 	~vector() _NOEXCEPT
; 974  : 		{	// destroy the object
; 975  : 		_Tidy();
; 976  : 		}
; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00120	c1 fa 03	 sar	 edx, 3

; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00123	b9 ff ff ff 1f	 mov	 ecx, 536870911		; 1fffffffH
  00128	8b c2		 mov	 eax, edx

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);
; 207  : 		}
; 208  : 
; 209  : 	bool operator!=(const _Myiter& _Right) const
; 210  : 		{	// test for iterator inequality
; 211  : 		return (!(*this == _Right));
; 212  : 		}
; 213  : 
; 214  : 	bool operator<(const _Myiter& _Right) const
; 215  : 		{	// test if this < _Right
; 216  : 		_Compat(_Right);
; 217  : 		return (this->_Ptr < _Right._Ptr);
; 218  : 		}
; 219  : 
; 220  : 	bool operator>(const _Myiter& _Right) const
; 221  : 		{	// test if this > _Right
; 222  : 		return (_Right < *this);
; 223  : 		}
; 224  : 
; 225  : 	bool operator<=(const _Myiter& _Right) const
; 226  : 		{	// test if this <= _Right
; 227  : 		return (!(_Right < *this));
; 228  : 		}
; 229  : 
; 230  : 	bool operator>=(const _Myiter& _Right) const
; 231  : 		{	// test if this >= _Right
; 232  : 		return (!(*this < _Right));
; 233  : 		}
; 234  : 
; 235  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 236  : 	void _Compat(const _Myiter& _Right) const
; 237  : 		{	// test for compatible iterator pair
; 238  : 		if (this->_Getcont() == 0
; 239  : 			|| this->_Getcont() != _Right._Getcont())
; 240  : 			{	// report error
; 241  : 			_DEBUG_ERROR("vector iterators incompatible");
; 242  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 243  : 			}
; 244  : 		}
; 245  : 
; 246  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 247  : 	void _Compat(const _Myiter& _Right) const
; 248  : 		{	// test for compatible iterator pair
; 249  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 250  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 251  : 		}
; 252  : 
; 253  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 254  : 	void _Compat(const _Myiter&) const
; 255  : 		{	// test for compatible iterator pair
; 256  : 		}
; 257  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 258  : 
; 259  : 	_Tptr _Ptr;	// pointer to element in vector
; 260  : 	};
; 261  : 
; 262  : template<class _Myvec> inline
; 263  : 	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
; 264  : 		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
; 265  : 	{	// convert to unchecked
; 266  : 	return (_Iter._Unchecked());
; 267  : 	}
; 268  : 
; 269  : template<class _Myvec> inline
; 270  : 	_Vector_const_iterator<_Myvec>&
; 271  : 		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
; 272  : 			typename _Vector_const_iterator<_Myvec>
; 273  : 				::_Unchecked_type _Right)
; 274  : 	{	// convert to checked
; 275  : 	return (_Iter._Rechecked(_Right));
; 276  : 	}
; 277  : 
; 278  : template<class _Myvec> inline
; 279  : 	_Vector_const_iterator<_Myvec> operator+(
; 280  : 		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
; 281  : 		_Vector_const_iterator<_Myvec> _Next)
; 282  : 	{	// add offset to iterator
; 283  : 	return (_Next += _Off);
; 284  : 	}
; 285  : 
; 286  : 		// TEMPLATE CLASS _Vector_iterator
; 287  : template<class _Myvec>
; 288  : 	class _Vector_iterator
; 289  : 		: public _Vector_const_iterator<_Myvec>
; 290  : 	{	// iterator for mutable vector
; 291  : public:
; 292  : 	typedef _Vector_iterator<_Myvec> _Myiter;
; 293  : 	typedef _Vector_const_iterator<_Myvec> _Mybase;
; 294  : 	typedef random_access_iterator_tag iterator_category;
; 295  : 
; 296  : 	typedef typename _Myvec::value_type value_type;
; 297  : 	typedef typename _Myvec::difference_type difference_type;
; 298  : 	typedef typename _Myvec::pointer pointer;
; 299  : 	typedef typename _Myvec::reference reference;
; 300  : 
; 301  : 	_Vector_iterator()
; 302  : 		{	// construct with null vector pointer
; 303  : 		}
; 304  : 
; 305  : 	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
; 306  : 		: _Mybase(_Parg, _Pvector)
; 307  : 		{	// construct with pointer _Parg
; 308  : 		}
; 309  : 
; 310  : 	typedef pointer _Unchecked_type;
; 311  : 
; 312  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 313  : 		{	// reset from unchecked iterator
; 314  : 		this->_Ptr = _Right;
; 315  : 		return (*this);
; 316  : 		}
; 317  : 
; 318  : 	_Unchecked_type _Unchecked() const
; 319  : 		{	// make an unchecked iterator
; 320  : 		return (_Unchecked_type(this->_Ptr));
; 321  : 		}
; 322  : 
; 323  : 	reference operator*() const
; 324  : 		{	// return designated object
; 325  : 		return ((reference)**(_Mybase *)this);
; 326  : 		}
; 327  : 
; 328  : 	pointer operator->() const
; 329  : 		{	// return pointer to class object
; 330  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 331  : 		}
; 332  : 
; 333  : 	_Myiter& operator++()
; 334  : 		{	// preincrement
; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);
; 337  : 		}
; 338  : 
; 339  : 	_Myiter operator++(int)
; 340  : 		{	// postincrement
; 341  : 		_Myiter _Tmp = *this;
; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}
; 345  : 
; 346  : 	_Myiter& operator--()
; 347  : 		{	// predecrement
; 348  : 		--*(_Mybase *)this;
; 349  : 		return (*this);
; 350  : 		}
; 351  : 
; 352  : 	_Myiter operator--(int)
; 353  : 		{	// postdecrement
; 354  : 		_Myiter _Tmp = *this;
; 355  : 		--*this;
; 356  : 		return (_Tmp);
; 357  : 		}
; 358  : 
; 359  : 	_Myiter& operator+=(difference_type _Off)
; 360  : 		{	// increment by integer
; 361  : 		*(_Mybase *)this += _Off;
; 362  : 		return (*this);
; 363  : 		}
; 364  : 
; 365  : 	_Myiter operator+(difference_type _Off) const
; 366  : 		{	// return this + integer
; 367  : 		_Myiter _Tmp = *this;
; 368  : 		return (_Tmp += _Off);
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator-=(difference_type _Off)
; 372  : 		{	// decrement by integer
; 373  : 		return (*this += -_Off);
; 374  : 		}
; 375  : 
; 376  : 	_Myiter operator-(difference_type _Off) const
; 377  : 		{	// return this - integer
; 378  : 		_Myiter _Tmp = *this;
; 379  : 		return (_Tmp -= _Off);
; 380  : 		}
; 381  : 
; 382  : 	difference_type operator-(const _Mybase& _Right) const
; 383  : 		{	// return difference of iterators
; 384  : 		return (*(_Mybase *)this - _Right);
; 385  : 		}
; 386  : 
; 387  : 	reference operator[](difference_type _Off) const
; 388  : 		{	// subscript
; 389  : 		return (*(*this + _Off));
; 390  : 		}
; 391  : 	};
; 392  : 
; 393  : template<class _Myvec> inline
; 394  : 	typename _Vector_iterator<_Myvec>::_Unchecked_type
; 395  : 		_Unchecked(_Vector_iterator<_Myvec> _Iter)
; 396  : 	{	// convert to unchecked
; 397  : 	return (_Iter._Unchecked());
; 398  : 	}
; 399  : 
; 400  : template<class _Myvec> inline
; 401  : 	_Vector_iterator<_Myvec>&
; 402  : 		_Rechecked(_Vector_iterator<_Myvec>& _Iter,
; 403  : 			typename _Vector_iterator<_Myvec>
; 404  : 				::_Unchecked_type _Right)
; 405  : 	{	// convert to checked
; 406  : 	return (_Iter._Rechecked(_Right));
; 407  : 	}
; 408  : 
; 409  : template<class _Myvec> inline
; 410  : 	_Vector_iterator<_Myvec> operator+(
; 411  : 		typename _Vector_iterator<_Myvec>::difference_type _Off,
; 412  : 		_Vector_iterator<_Myvec> _Next)
; 413  : 	{	// add offset to iterator
; 414  : 	return (_Next += _Off);
; 415  : 	}
; 416  : 
; 417  : 		// vector TYPE WRAPPERS
; 418  : template<class _Value_type,
; 419  : 	class _Size_type,
; 420  : 	class _Difference_type,
; 421  : 	class _Pointer,
; 422  : 	class _Const_pointer,
; 423  : 	class _Reference,
; 424  : 	class _Const_reference>
; 425  : 	struct _Vec_iter_types
; 426  : 	{	// wraps types needed by iterators
; 427  : 	typedef _Value_type value_type;
; 428  : 	typedef _Size_type size_type;
; 429  : 	typedef _Difference_type difference_type;
; 430  : 	typedef _Pointer pointer;
; 431  : 	typedef _Const_pointer const_pointer;
; 432  : 	typedef _Reference reference;
; 433  : 	typedef _Const_reference const_reference;
; 434  : 	};
; 435  : 
; 436  : template<class _Ty,
; 437  : 	class _Alloc0>
; 438  : 	struct _Vec_base_types
; 439  : 	{	// types needed for a container base
; 440  : 	typedef _Alloc0 _Alloc;
; 441  : 	typedef _Vec_base_types<_Ty, _Alloc> _Myt;
; 442  : 
; 443  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 444  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 445  : 
; 446  : 
; 447  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 448  : 		_Simple_types<typename _Alty::value_type>,
; 449  : 		_Vec_iter_types<typename _Alty::value_type,
; 450  : 			typename _Alty::size_type,
; 451  : 			typename _Alty::difference_type,
; 452  : 			typename _Alty::pointer,
; 453  : 			typename _Alty::const_pointer,
; 454  : 			typename _Alty::reference,
; 455  : 			typename _Alty::const_reference> >::type
; 456  : 		_Val_types;
; 457  : 	};
; 458  : 
; 459  : 		// TEMPLATE CLASS _Vector_val
; 460  : template<class _Val_types>
; 461  : 	class _Vector_val
; 462  : 		: public _Container_base
; 463  : 	{	// base class for vector to hold data
; 464  : public:
; 465  : 	typedef _Vector_val<_Val_types> _Myt;
; 466  : 
; 467  : 	typedef typename _Val_types::value_type value_type;
; 468  : 	typedef typename _Val_types::size_type size_type;
; 469  : 	typedef typename _Val_types::difference_type difference_type;
; 470  : 	typedef typename _Val_types::pointer pointer;
; 471  : 	typedef typename _Val_types::const_pointer const_pointer;
; 472  : 	typedef typename _Val_types::reference reference;
; 473  : 	typedef typename _Val_types::const_reference const_reference;
; 474  : 
; 475  : 	typedef _Vector_iterator<_Myt> iterator;
; 476  : 	typedef _Vector_const_iterator<_Myt> const_iterator;
; 477  : 
; 478  : 	_Vector_val()
; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();
; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}
; 484  : 
; 485  : 	pointer _Myfirst;	// pointer to beginning of array
; 486  : 	pointer _Mylast;	// pointer to current end of sequence
; 487  : 	pointer _Myend;	// pointer to end of array
; 488  : 	};
; 489  : 
; 490  : 		// TEMPLATE CLASS _Vector_alloc
; 491  : template<class _Alloc_types>
; 492  : 	class _Vector_alloc
; 493  : 	{	// base class for vector to hold allocator
; 494  : public:
; 495  : 	typedef _Vector_alloc<_Alloc_types> _Myt;
; 496  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 497  : 	typedef typename _Alloc_types::_Alty _Alty;
; 498  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 499  : 
; 500  : 	typedef typename _Val_types::value_type value_type;
; 501  : 	typedef typename _Val_types::size_type size_type;
; 502  : 	typedef typename _Val_types::difference_type difference_type;
; 503  : 	typedef typename _Val_types::pointer pointer;
; 504  : 	typedef typename _Val_types::const_pointer const_pointer;
; 505  : 	typedef typename _Val_types::reference reference;
; 506  : 	typedef typename _Val_types::const_reference const_reference;
; 507  : 
; 508  : 	typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
; 509  : 	typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
; 510  : 
; 511  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 512  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 513  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 514  : 		{	// construct allocator from _Al
; 515  : 		}
; 516  : 
; 517  : 	_Vector_alloc(_Alloc&& _Al)
; 518  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 519  : 		{	// construct allocator from _Al
; 520  : 		}
; 521  : 
; 522  : 	void _Copy_alloc(const _Alty& _Al)
; 523  : 		{	// replace old allocator
; 524  : 		_Pocca(_Getal(), _Al);
; 525  : 		}
; 526  : 
; 527  : 	void _Move_alloc(_Alty& _Al)
; 528  : 		{	// replace old allocator
; 529  : 		_Pocma(_Getal(), _Al);
; 530  : 		}
; 531  : 
; 532  : 	void _Swap_alloc(_Myt& _Right)
; 533  : 		{	// swap allocators
; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}
; 536  : 
; 537  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 538  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 540  : 		{	// construct allocator from _Al
; 541  : 		_Alloc_proxy();
; 542  : 		}
; 543  : 
; 544  : 	_Vector_alloc(_Alloc&& _Al)
; 545  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 546  : 		{	// construct allocator from _Al
; 547  : 		_Alloc_proxy();
; 548  : 		}
; 549  : 
; 550  : 	~_Vector_alloc() _NOEXCEPT
; 551  : 		{	// destroy proxy
; 552  : 		_Free_proxy();
; 553  : 		}
; 554  : 
; 555  : 	void _Copy_alloc(const _Alty& _Al)
; 556  : 		{	// replace old allocator
; 557  : 		_Free_proxy();
; 558  : 		_Pocca(_Getal(), _Al);
; 559  : 		_Alloc_proxy();
; 560  : 		}
; 561  : 
; 562  : 	void _Move_alloc(_Alty& _Al)
; 563  : 		{	// replace old allocator
; 564  : 		_Free_proxy();
; 565  : 		_Pocma(_Getal(), _Al);
; 566  : 		_Alloc_proxy();
; 567  : 		}
; 568  : 
; 569  : 	void _Swap_alloc(_Myt& _Right)
; 570  : 		{	// swap allocators
; 571  : 		_Pocs(_Getal(), _Right._Getal());
; 572  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 573  : 		}
; 574  : 
; 575  : 	void _Alloc_proxy()
; 576  : 		{	// construct proxy
; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());
; 579  : 		_Myproxy() = _Alproxy.allocate(1);
; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 581  : 		_Myproxy()->_Mycont = &_Get_data();
; 582  : 		}
; 583  : 
; 584  : 	void _Free_proxy()
; 585  : 		{	// destroy proxy
; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());
; 588  : 		_Orphan_all();
; 589  : 		_Alproxy.destroy(_Myproxy());
; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 591  : 		_Myproxy() = 0;
; 592  : 		}
; 593  : 
; 594  : 	_Iterator_base12 **_Getpfirst() const
; 595  : 		{	// get address of iterator chain
; 596  : 		return (_Get_data()._Getpfirst());
; 597  : 		}
; 598  : 
; 599  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 600  : 		{	// return reference to _Myproxy
; 601  : 		return (_Get_data()._Myproxy);
; 602  : 		}
; 603  : 
; 604  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 605  : 		{	// return const reference to _Myproxy
; 606  : 		return (_Get_data()._Myproxy);
; 607  : 		}
; 608  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 609  : 
; 610  : 	void _Orphan_all()
; 611  : 		{	// orphan all iterators
; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}
; 614  : 
; 615  : 	void _Swap_all(_Myt& _Right)
; 616  : 		{	// swap all iterators
; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}
; 619  : 
; 620  : 	_Alty& _Getal() _NOEXCEPT
; 621  : 		{	// return reference to allocator
; 622  : 		return (_Mypair._Get_first());
; 623  : 		}
; 624  : 
; 625  : 	const _Alty& _Getal() const _NOEXCEPT
; 626  : 		{	// return const reference to allocator
; 627  : 		return (_Mypair._Get_first());
; 628  : 		}
; 629  : 
; 630  : 	_Vector_val<_Val_types>& _Get_data() _NOEXCEPT
; 631  : 		{	// return reference to _Vector_val
; 632  : 		return (_Mypair._Get_second());
; 633  : 		}
; 634  : 
; 635  : 	const _Vector_val<_Val_types>& _Get_data() const _NOEXCEPT
; 636  : 		{	// return const reference to _Vector_val
; 637  : 		return (_Mypair._Get_second());
; 638  : 		}
; 639  : 
; 640  : 	pointer& _Myfirst() _NOEXCEPT
; 641  : 		{	// return reference to _Myfirst
; 642  : 		return (_Get_data()._Myfirst);
; 643  : 		}
; 644  : 
; 645  : 	const pointer& _Myfirst() const _NOEXCEPT
; 646  : 		{	// return const reference to _Myfirst
; 647  : 		return (_Get_data()._Myfirst);
; 648  : 		}
; 649  : 
; 650  : 	pointer& _Mylast() _NOEXCEPT
; 651  : 		{	// return reference to _Mylast
; 652  : 		return (_Get_data()._Mylast);
; 653  : 		}
; 654  : 
; 655  : 	const pointer& _Mylast() const _NOEXCEPT
; 656  : 		{	// return const reference to _Mylast
; 657  : 		return (_Get_data()._Mylast);
; 658  : 		}
; 659  : 
; 660  : 	pointer& _Myend() _NOEXCEPT
; 661  : 		{	// return reference to _Myend
; 662  : 		return (_Get_data()._Myend);
; 663  : 		}
; 664  : 
; 665  : 	const pointer& _Myend() const _NOEXCEPT
; 666  : 		{	// return const reference to _Myend
; 667  : 		return (_Get_data()._Myend);
; 668  : 		}
; 669  : 
; 670  : private:
; 671  : 	_Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
; 672  : 	};
; 673  : 
; 674  : 		// TEMPLATE CLASS vector
; 675  : template<class _Ty,
; 676  : 	class _Alloc = allocator<_Ty> >
; 677  : 	class vector
; 678  : 		: public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
; 679  : 	{	// varying size array of values
; 680  : public:
; 681  : 	typedef vector<_Ty, _Alloc> _Myt;
; 682  : 	typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
; 683  : 	typedef _Alloc allocator_type;
; 684  : 
; 685  : 	typedef typename _Mybase::_Alty _Alty;
; 686  : 
; 687  : 	typedef typename _Mybase::value_type value_type;
; 688  : 	typedef typename _Mybase::size_type size_type;
; 689  : 	typedef typename _Mybase::difference_type difference_type;
; 690  : 	typedef typename _Mybase::pointer pointer;
; 691  : 	typedef typename _Mybase::const_pointer const_pointer;
; 692  : 	typedef typename _Mybase::reference reference;
; 693  : 	typedef typename _Mybase::const_reference const_reference;
; 694  : 
; 695  :  #define _VICONT(it)	it._Getcont()
; 696  :  #define _VIPTR(it)	(it)._Ptr
; 697  : 
; 698  : 	typedef typename _Mybase::iterator iterator;
; 699  : 	typedef typename _Mybase::const_iterator const_iterator;
; 700  : 
; 701  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 702  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 703  : 
; 704  : 	vector() _NOEXCEPT
; 705  : 		: _Mybase()
; 706  : 		{	// construct empty vector
; 707  : 		}
; 708  : 
; 709  : 	explicit vector(const _Alloc& _Al) _NOEXCEPT
; 710  : 		: _Mybase(_Al)
; 711  : 		{	// construct empty vector, allocator
; 712  : 		}
; 713  : 
; 714  : 	explicit vector(size_type _Count)
; 715  : 		: _Mybase()
; 716  : 		{	// construct from _Count * value_type()
; 717  : 		if (_Buy(_Count))
; 718  : 			{	// nonzero, fill it
; 719  : 			_TRY_BEGIN
; 720  : 			_Uninitialized_default_fill_n(this->_Myfirst(), _Count,
; 721  : 				this->_Getal());
; 722  : 			this->_Mylast() += _Count;
; 723  : 			_CATCH_ALL
; 724  : 			_Tidy();
; 725  : 			_RERAISE;
; 726  : 			_CATCH_END
; 727  : 			}
; 728  : 		}
; 729  : 
; 730  : 	vector(size_type _Count, const value_type& _Val)
; 731  : 		: _Mybase()
; 732  : 		{	// construct from _Count * _Val
; 733  : 		_Construct_n(_Count, _STD addressof(_Val));
; 734  : 		}
; 735  : 
; 736  : 	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 737  : 		: _Mybase(_Al)
; 738  : 		{	// construct from _Count * _Val, allocator
; 739  : 		_Construct_n(_Count, _STD addressof(_Val));
; 740  : 		}
; 741  : 
; 742  : 	vector(const _Myt& _Right)
; 743  : 
; 744  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 745  : 
; 746  : 
; 747  : 		{	// construct by copying _Right
; 748  : 		if (_Buy(_Right.size()))
; 749  : 			_TRY_BEGIN
; 750  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 751  : 				this->_Myfirst());
; 752  : 			_CATCH_ALL
; 753  : 			_Tidy();
; 754  : 			_RERAISE;
; 755  : 			_CATCH_END
; 756  : 		}
; 757  : 
; 758  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 759  : 		: _Mybase(_Al)
; 760  : 		{	// construct by copying _Right, allocator
; 761  : 		if (_Buy(_Right.size()))
; 762  : 			_TRY_BEGIN
; 763  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 764  : 				this->_Myfirst());
; 765  : 			_CATCH_ALL
; 766  : 			_Tidy();
; 767  : 			_RERAISE;
; 768  : 			_CATCH_END
; 769  : 		}
; 770  : 
; 771  : 	template<class _Iter,
; 772  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 773  : 			void>::type>
; 774  : 		vector(_Iter _First, _Iter _Last)
; 775  : 		: _Mybase()
; 776  : 		{	// construct from [_First, _Last)
; 777  : 		_Construct(_First, _Last);
; 778  : 		}
; 779  : 
; 780  : 	template<class _Iter,
; 781  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 782  : 			void>::type>
; 783  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 784  : 		: _Mybase(_Al)
; 785  : 		{	// construct from [_First, _Last) with allocator
; 786  : 		_Construct(_First, _Last);
; 787  : 		}
; 788  : 
; 789  : 	template<class _Iter>
; 790  : 		void _Construct(_Iter _First, _Iter _Last)
; 791  : 		{	// initialize with [_First, _Last)
; 792  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 793  : 		}
; 794  : 
; 795  : 	template<class _Iter>
; 796  : 		void _Construct(_Iter _First, _Iter _Last,
; 797  : 			input_iterator_tag)
; 798  : 		{	// initialize with [_First, _Last), input iterators
; 799  : 		_TRY_BEGIN
; 800  : 
; 801  : 		for (; _First != _Last; ++_First)
; 802  : 			emplace_back(*_First);
; 803  : 
; 804  : 		_CATCH_ALL
; 805  : 		_Tidy();
; 806  : 		_RERAISE;
; 807  : 		_CATCH_END
; 808  : 		}
; 809  : 
; 810  : 	template<class _Iter>
; 811  : 		void _Construct(_Iter _First, _Iter _Last,
; 812  : 			forward_iterator_tag)
; 813  : 		{	// initialize with [_First, _Last), forward iterators
; 814  : 		if (_Buy(_STD distance(_First, _Last)))
; 815  : 			{	// nonzero, fill it
; 816  : 			_TRY_BEGIN
; 817  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 818  : 			_CATCH_ALL
; 819  : 			_Tidy();
; 820  : 			_RERAISE;
; 821  : 			_CATCH_END
; 822  : 			}
; 823  : 		}
; 824  : 
; 825  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 826  : 		{	// construct from _Count * *_Pval
; 827  : 		if (_Buy(_Count))
; 828  : 			{	// nonzero, fill it
; 829  : 			_TRY_BEGIN
; 830  : 			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
; 831  : 			_CATCH_ALL
; 832  : 			_Tidy();
; 833  : 			_RERAISE;
; 834  : 			_CATCH_END
; 835  : 			}
; 836  : 		}
; 837  : 
; 838  : 	vector(_Myt&& _Right) _NOEXCEPT
; 839  : 		: _Mybase(_STD move(_Right._Getal()))
; 840  : 		{	// construct by moving _Right
; 841  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 842  : 		}
; 843  : 
; 844  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 845  : 		: _Mybase(_Al)
; 846  : 		{	// construct by moving _Right, allocator
; 847  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 848  : 		}
; 849  : 
; 850  : 	_Myt& operator=(_Myt&& _Right)
; 851  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 852  : 			|| _Alty::is_always_equal::value)
; 853  : 		{	// assign by moving _Right
; 854  : 		if (this != &_Right)
; 855  : 			{	// different, assign it
; 856  : 			_Tidy();
; 857  : 			if (_Alty::propagate_on_container_move_assignment::value
; 858  : 				&& this->_Getal() != _Right._Getal())
; 859  : 				this->_Move_alloc(_Right._Getal());
; 860  : 
; 861  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 862  : 			}
; 863  : 		return (*this);
; 864  : 		}
; 865  : 
; 866  : 	void _Assign_rv(_Myt&& _Right, true_type)
; 867  : 		{	// move from _Right, stealing its contents
; 868  : 		this->_Swap_all((_Myt&)_Right);
; 869  : 		this->_Myfirst() = _Right._Myfirst();
; 870  : 		this->_Mylast() = _Right._Mylast();
; 871  : 		this->_Myend() = _Right._Myend();
; 872  : 
; 873  : 		_Right._Myfirst() = pointer();
; 874  : 		_Right._Mylast() = pointer();
; 875  : 		_Right._Myend() = pointer();
; 876  : 		}
; 877  : 
; 878  : 	void _Assign_rv(_Myt&& _Right, false_type)
; 879  : 		{	// move from _Right, possibly moving its contents
; 880  : 		if (get_allocator() == _Right.get_allocator())
; 881  : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 882  : 		else
; 883  : 			_Construct(_STD make_move_iterator(_Right.begin()),
; 884  : 				_STD make_move_iterator(_Right.end()));
; 885  : 		}
; 886  : 
; 887  : 	void _Assign_rv(_Myt&& _Right)
; 888  : 		{	// assign by moving _Right
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 890  : 			typename _Alty::propagate_on_container_move_assignment());
; 891  : 		}
; 892  : 
; 893  : 
; 894  : 	void push_back(value_type&& _Val)
; 895  : 		{	// insert by moving into element at end
; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 899  : 			if (this->_Mylast() == this->_Myend())
; 900  : 				_Reserve(1);
; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 902  : 			this->_Getal().construct(this->_Mylast(),
; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();
; 905  : 			}
; 906  : 		else
; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())
; 909  : 				_Reserve(1);
; 910  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 911  : 			this->_Getal().construct(this->_Mylast(),
; 912  : 				_STD forward<value_type>(_Val));
; 913  : 			++this->_Mylast();
; 914  : 			}
; 915  : 		}
; 916  : 
; 917  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 918  : 		{	// insert by moving _Val at _Where
; 919  : 		return (emplace(_Where, _STD move(_Val)));
; 920  : 		}
; 921  : 
; 922  : 	template<class... _Valty>
; 923  : 		void emplace_back(_Valty&&... _Val)
; 924  : 		{	// insert by moving into element at end
; 925  : 		if (this->_Mylast() == this->_Myend())
; 926  : 			_Reserve(1);
; 927  : 		_Orphan_range(this->_Mylast(), this->_Mylast());
; 928  : 		this->_Getal().construct(this->_Mylast(),
; 929  : 			_STD forward<_Valty>(_Val)...);
; 930  : 		++this->_Mylast();
; 931  : 		}
; 932  : 
; 933  : 	template<class... _Valty>
; 934  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 935  : 		{	// insert by moving _Val at _Where
; 936  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 937  : 
; 938  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 939  : 		if (size() < _Off)
; 940  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 941  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 942  : 
; 943  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 944  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 945  : 		return (begin() + _Off);
; 946  : 		}
; 947  : 
; 948  : 
; 949  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Construct(_Ilist.begin(), _Ilist.end());
; 954  : 		}
; 955  : 
; 956  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 957  : 		{	// assign initializer_list
; 958  : 		assign(_Ilist.begin(), _Ilist.end());
; 959  : 		return (*this);
; 960  : 		}
; 961  : 
; 962  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 963  : 		{	// assign initializer_list
; 964  : 		assign(_Ilist.begin(), _Ilist.end());
; 965  : 		}
; 966  : 
; 967  : 	iterator insert(const_iterator _Where,
; 968  : 		_XSTD initializer_list<value_type> _Ilist)
; 969  : 		{	// insert initializer_list
; 970  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 971  : 		}
; 972  : 
; 973  : 	~vector() _NOEXCEPT
; 974  : 		{	// destroy the object
; 975  : 		_Tidy();
; 976  : 		}
; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0012a	89 55 98	 mov	 DWORD PTR __Capacity$1$[ebp], edx

; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0012d	d1 e8		 shr	 eax, 1
  0012f	33 ff		 xor	 edi, edi
  00131	2b c8		 sub	 ecx, eax
  00133	03 d0		 add	 edx, eax
  00135	3b 4d 98	 cmp	 ecx, DWORD PTR __Capacity$1$[ebp]

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00138	8d 4b fc	 lea	 ecx, DWORD PTR [ebx-4]
  0013b	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  0013e	3b d6		 cmp	 edx, esi
  00140	0f 42 d6	 cmovb	 edx, esi

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00143	52		 push	 edx
  00144	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Reallocate
  00149	8b 4d 94	 mov	 ecx, DWORD PTR __Idx$1$[ebp]
  0014c	8b 75 bc	 mov	 esi, DWORD PTR _iPT$2$[ebp]
$LN105@CheckMonst:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0014f	8b 13		 mov	 edx, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1281 : 			this->_Getal().construct(this->_Mylast(),

  00151	8b 7b fc	 mov	 edi, DWORD PTR [ebx-4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00154	85 d2		 test	 edx, edx
  00156	74 0c		 je	 SHORT $LN637@CheckMonst
  00158	8b 04 cf	 mov	 eax, DWORD PTR [edi+ecx*8]
  0015b	89 02		 mov	 DWORD PTR [edx], eax
  0015d	8b 44 cf 04	 mov	 eax, DWORD PTR [edi+ecx*8+4]
  00161	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN637@CheckMonst:
  00164	8b 7d b8	 mov	 edi, DWORD PTR _iPT$1$[ebp]
$LN506@CheckMonst:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00167	83 03 08	 add	 DWORD PTR [ebx], 8
$LN8@CheckMonst:
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 2835 : 			for(int iMAPY = g_rtPOINT_TRAP[iAXIS].top; iMAPY <= g_rtPOINT_TRAP[iAXIS].bottom ; iMAPY++)

  0016a	8b 45 a8	 mov	 eax, DWORD PTR tv1908[ebp]
  0016d	46		 inc	 esi
  0016e	8b 4d 90	 mov	 ecx, DWORD PTR tv1919[ebp]
  00171	89 75 bc	 mov	 DWORD PTR _iPT$2$[ebp], esi
  00174	3b 30		 cmp	 esi, DWORD PTR [eax]
  00176	0f 8e 3c ff ff
	ff		 jle	 $LL10@CheckMonst
$LN5@CheckMonst:

; 2832 : 	{
; 2833 : 		for(int iMAPX = g_rtPOINT_TRAP[iAXIS].left; iMAPX <= g_rtPOINT_TRAP[iAXIS].right ; iMAPX++)

  0017c	47		 inc	 edi
  0017d	89 7d b8	 mov	 DWORD PTR _iPT$1$[ebp], edi
  00180	3b 78 fc	 cmp	 edi, DWORD PTR [eax-4]
  00183	0f 8e 07 ff ff
	ff		 jle	 $LL7@CheckMonst
$LN2@CheckMonst:

; 2830 : 
; 2831 : 	for ( int iAXIS =0;iAXIS <	4 ; iAXIS++)

  00189	83 c0 10	 add	 eax, 16			; 00000010H
  0018c	83 c3 0c	 add	 ebx, 12			; 0000000cH
  0018f	89 45 a8	 mov	 DWORD PTR tv1908[ebp], eax
  00192	3d 4c 00 00 00	 cmp	 eax, OFFSET ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+76
  00197	0f 8c e3 fe ff
	ff		 jl	 $LL4@CheckMonst

; 2843 : 					vtMAP_UNTRAP[iAXIS].push_back(iPT);
; 2844 : 				}
; 2845 : 			}
; 2846 : 		}
; 2847 : 	}
; 2848 : 
; 2849 : 	for(int iMON = 0;iMON < MAX_CHAOSCASTLE_MONSTER ; iMON ++ )

  0019d	69 45 ac 68 08
	00 00		 imul	 eax, DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp], 2152
  001a4	8b 55 b4	 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]
  001a7	05 e0 05 00 00	 add	 eax, 1504		; 000005e0H
  001ac	03 d0		 add	 edx, eax
  001ae	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  001b3	89 55 b8	 mov	 DWORD PTR tv1890[ebp], edx
  001b6	89 45 bc	 mov	 DWORD PTR tv1921[ebp], eax
  001b9	0f 1f 80 00 00
	00 00		 npad	 7
$LL13@CheckMonst:

; 2850 : 	{
; 2851 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[iMON] == -1 )

  001c0	8b 0a		 mov	 ecx, DWORD PTR [edx]
  001c2	83 f9 ff	 cmp	 ecx, -1
  001c5	0f 84 1d 01 00
	00		 je	 $LN11@CheckMonst

; 2852 : 			continue;
; 2853 : 
; 2854 : 		int iMON_INDEX = this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[iMON];
; 2855 : 
; 2856 : 		if ( !CHECK_LIMIT(iMON_INDEX, OBJ_MAXMONSTER))

  001cb	85 c9		 test	 ecx, ecx
  001cd	0f 88 e2 01 00
	00		 js	 $LN632@CheckMonst
  001d3	33 c0		 xor	 eax, eax
  001d5	81 f9 03 29 00
	00		 cmp	 ecx, 10499		; 00002903H
  001db	0f 9e c0	 setle	 al
  001de	85 c0		 test	 eax, eax
  001e0	0f 84 cc 01 00
	00		 je	 $LN645@CheckMonst

; 2859 : 			continue;
; 2860 : 		}
; 2861 : 
; 2862 : 		if ( gObj[iMON_INDEX].Life > 0.0f && CC_MAP_RANGE(gObj[iMON_INDEX].MapNumber) != FALSE && gObj[iMON_INDEX].Connected > PLAYER_EMPTY )

  001e6	69 d9 40 27 00
	00		 imul	 ebx, ecx, 10048
  001ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001f2	f3 0f 10 84 0b
	d8 00 00 00	 movss	 xmm0, DWORD PTR [ebx+ecx+216]
  001fb	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00202	0f 86 dd 00 00
	00		 jbe	 $LN644@CheckMonst
  00208	8a 84 0b 23 01
	00 00		 mov	 al, BYTE PTR [ebx+ecx+291]
  0020f	3c 35		 cmp	 al, 53			; 00000035H
  00211	74 17		 je	 SHORT $LN633@CheckMonst
  00213	3c 12		 cmp	 al, 18			; 00000012H
  00215	0f 82 ca 00 00
	00		 jb	 $LN644@CheckMonst
  0021b	b4 17		 mov	 ah, 23			; 00000017H
  0021d	3a e0		 cmp	 ah, al
  0021f	1b c0		 sbb	 eax, eax
  00221	83 c0 01	 add	 eax, 1
  00224	0f 84 bb 00 00
	00		 je	 $LN644@CheckMonst
$LN633@CheckMonst:
  0022a	83 7c 0b 04 00	 cmp	 DWORD PTR [ebx+ecx+4], 0
  0022f	0f 8e b0 00 00
	00		 jle	 $LN644@CheckMonst

; 2863 : 		{
; 2864 : 			int iSX = gObj[iMON_INDEX].X;

  00235	0f b6 b4 0b 20
	01 00 00	 movzx	 esi, BYTE PTR [ebx+ecx+288]

; 2865 : 			int iSY = gObj[iMON_INDEX].Y;

  0023d	0f b6 bc 0b 21
	01 00 00	 movzx	 edi, BYTE PTR [ebx+ecx+289]

; 2866 : 
; 2867 : 			int MapNumber = GetMap(iChaosCastleIndex);

  00245	ff 75 ac	 push	 DWORD PTR _iChaosCastleIndex$GSCopy$1$[ebp]
  00248	8b 4d b4	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0024b	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap

; 2868 : 			BYTE btMapAttr = MapC[MapNumber].m_attrbuf[iSY * 256 + iSX] & 0x08;

  00250	69 c0 28 38 05
	00		 imul	 eax, eax, 342056
  00256	8b cf		 mov	 ecx, edi
  00258	c1 e1 08	 shl	 ecx, 8
  0025b	03 88 10 00 00
	00		 add	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[eax+16]
  00261	8a 04 31	 mov	 al, BYTE PTR [ecx+esi]
  00264	24 08		 and	 al, 8

; 2869 : 
; 2870 : 			if ( btMapAttr == 8 )

  00266	74 7a		 je	 SHORT $LN640@CheckMonst

; 2871 : 			{
; 2872 : 				int n;
; 2873 : 				for ( n=0;n<MAX_CC_TRAP_STEP;n++)

  00268	33 c9		 xor	 ecx, ecx
  0026a	b8 08 00 00 00	 mov	 eax, OFFSET ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+8
  0026f	90		 npad	 1
$LL16@CheckMonst:

; 2874 : 				{
; 2875 : 					if ( iSX >= g_rtPOINT_FRAME[n].left && iSX <= g_rtPOINT_FRAME[n].right &&
; 2876 : 						 iSY >= g_rtPOINT_FRAME[n].top && iSY <= g_rtPOINT_FRAME[n].bottom )

  00270	3b 70 f8	 cmp	 esi, DWORD PTR [eax-8]
  00273	7c 12		 jl	 SHORT $LN14@CheckMonst
  00275	3b 30		 cmp	 esi, DWORD PTR [eax]
  00277	7f 0e		 jg	 SHORT $LN14@CheckMonst
  00279	3b 78 fc	 cmp	 edi, DWORD PTR [eax-4]
  0027c	7c 09		 jl	 SHORT $LN14@CheckMonst
  0027e	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00281	0f 8e 21 01 00
	00		 jle	 $LN615@CheckMonst
$LN14@CheckMonst:

; 2871 : 			{
; 2872 : 				int n;
; 2873 : 				for ( n=0;n<MAX_CC_TRAP_STEP;n++)

  00287	83 c0 10	 add	 eax, 16			; 00000010H
  0028a	41		 inc	 ecx
  0028b	3d 48 00 00 00	 cmp	 eax, OFFSET ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+72
  00290	7c de		 jl	 SHORT $LL16@CheckMonst
  00292	8b 45 a4	 mov	 eax, DWORD PTR _iUSER_AXIS$1$[ebp]
$LN635@CheckMonst:

; 2879 : 						break;
; 2880 : 					}
; 2881 : 				}
; 2882 : 
; 2883 : 				if ( n == MAX_CC_TRAP_STEP )

  00295	83 f9 04	 cmp	 ecx, 4
  00298	74 48		 je	 SHORT $LN640@CheckMonst

; 2886 : 				if ( vtMAP_UNTRAP[iUSER_AXIS].empty() == false )

  0029a	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  0029d	8b 44 95 c0	 mov	 eax, DWORD PTR _vtMAP_UNTRAP$[ebp+edx*4]
  002a1	3b 44 95 c4	 cmp	 eax, DWORD PTR _vtMAP_UNTRAP$[ebp+edx*4+4]
  002a5	0f 94 c0	 sete	 al
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 2886 : 				if ( vtMAP_UNTRAP[iUSER_AXIS].empty() == false )

  002a8	84 c0		 test	 al, al
  002aa	75 36		 jne	 SHORT $LN640@CheckMonst
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  002ac	8b 44 95 c4	 mov	 eax, DWORD PTR _vtMAP_UNTRAP$[ebp+edx*4+4]
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 2888 : 					POINT ptEMPTY = vtMAP_UNTRAP[iUSER_AXIS].back();

  002b0	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  002b3	8b 40 fc	 mov	 eax, DWORD PTR [eax-4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1313 : 		--this->_Mylast();

  002b6	83 44 95 c4 f8	 add	 DWORD PTR _vtMAP_UNTRAP$[ebp+edx*4+4], -8 ; fffffff8H
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 2891 : 					if ( this->ObjSetPosition(iMON_INDEX, ptEMPTY.x, ptEMPTY.y) == TRUE )

  002bb	50		 push	 eax
  002bc	8b 45 b8	 mov	 eax, DWORD PTR tv1890[ebp]
  002bf	51		 push	 ecx
  002c0	8b 4d b4	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  002c3	ff 30		 push	 DWORD PTR [eax]
  002c5	e8 00 00 00 00	 call	 ?ObjSetPosition@CChaosCastle@@QAEHHHH@Z ; CChaosCastle::ObjSetPosition
  002ca	83 f8 01	 cmp	 eax, 1
  002cd	75 13		 jne	 SHORT $LN640@CheckMonst

; 2892 : 					{
; 2893 : 						gObj[iMON_INDEX].m_iChaosCastleBlowTime = GetTickCount();

  002cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  002d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002db	89 84 0b 40 12
	00 00		 mov	 DWORD PTR [ebx+ecx+4672], eax
$LN640@CheckMonst:
  002e2	8b 55 b8	 mov	 edx, DWORD PTR tv1890[ebp]
$LN644@CheckMonst:
  002e5	8b 45 bc	 mov	 eax, DWORD PTR tv1921[ebp]
$LN11@CheckMonst:

; 2843 : 					vtMAP_UNTRAP[iAXIS].push_back(iPT);
; 2844 : 				}
; 2845 : 			}
; 2846 : 		}
; 2847 : 	}
; 2848 : 
; 2849 : 	for(int iMON = 0;iMON < MAX_CHAOSCASTLE_MONSTER ; iMON ++ )

  002e8	83 c2 04	 add	 edx, 4
  002eb	83 e8 01	 sub	 eax, 1
  002ee	89 55 b8	 mov	 DWORD PTR tv1890[ebp], edx
  002f1	89 45 bc	 mov	 DWORD PTR tv1921[ebp], eax
  002f4	0f 85 c6 fe ff
	ff		 jne	 $LL13@CheckMonst

; 2894 : 					}
; 2895 : 				}
; 2896 : 			}
; 2897 : 		}
; 2898 : 	}
; 2899 : }

  002fa	68 00 00 00 00	 push	 OFFSET ??1?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE@XZ ; std::vector<tagPOINT,std::allocator<tagPOINT> >::~vector<tagPOINT,std::allocator<tagPOINT> >
  002ff	6a 04		 push	 4
  00301	6a 0c		 push	 12			; 0000000cH
  00303	8d 45 c0	 lea	 eax, DWORD PTR _vtMAP_UNTRAP$[ebp]
  00306	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0030d	50		 push	 eax
  0030e	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
$LN1@CheckMonst:
  00313	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00316	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0031d	59		 pop	 ecx
  0031e	5f		 pop	 edi
  0031f	5e		 pop	 esi
  00320	5b		 pop	 ebx
  00321	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00324	33 cd		 xor	 ecx, ebp
  00326	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0032b	8b e5		 mov	 esp, ebp
  0032d	5d		 pop	 ebp
  0032e	c2 04 00	 ret	 4
$LN38@CheckMonst:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1287 : 			if (this->_Mylast() == this->_Myend())

  00331	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00334	3b f9		 cmp	 edi, ecx
  00336	75 4f		 jne	 SHORT $LN328@CheckMonst

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00338	8b c1		 mov	 eax, ecx
  0033a	2b c7		 sub	 eax, edi
  0033c	c1 f8 03	 sar	 eax, 3

; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)

  0033f	83 f8 01	 cmp	 eax, 1
  00342	73 43		 jae	 SHORT $LN328@CheckMonst

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00344	8b 53 fc	 mov	 edx, DWORD PTR [ebx-4]

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00347	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0034c	2b fa		 sub	 edi, edx
  0034e	c1 ff 03	 sar	 edi, 3

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00351	2b c7		 sub	 eax, edi
  00353	83 f8 01	 cmp	 eax, 1
  00356	72 46		 jb	 SHORT $LN613@CheckMonst

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);
; 207  : 		}
; 208  : 
; 209  : 	bool operator!=(const _Myiter& _Right) const
; 210  : 		{	// test for iterator inequality
; 211  : 		return (!(*this == _Right));
; 212  : 		}
; 213  : 
; 214  : 	bool operator<(const _Myiter& _Right) const
; 215  : 		{	// test if this < _Right
; 216  : 		_Compat(_Right);
; 217  : 		return (this->_Ptr < _Right._Ptr);
; 218  : 		}
; 219  : 
; 220  : 	bool operator>(const _Myiter& _Right) const
; 221  : 		{	// test if this > _Right
; 222  : 		return (_Right < *this);
; 223  : 		}
; 224  : 
; 225  : 	bool operator<=(const _Myiter& _Right) const
; 226  : 		{	// test if this <= _Right
; 227  : 		return (!(_Right < *this));
; 228  : 		}
; 229  : 
; 230  : 	bool operator>=(const _Myiter& _Right) const
; 231  : 		{	// test if this >= _Right
; 232  : 		return (!(*this < _Right));
; 233  : 		}
; 234  : 
; 235  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 236  : 	void _Compat(const _Myiter& _Right) const
; 237  : 		{	// test for compatible iterator pair
; 238  : 		if (this->_Getcont() == 0
; 239  : 			|| this->_Getcont() != _Right._Getcont())
; 240  : 			{	// report error
; 241  : 			_DEBUG_ERROR("vector iterators incompatible");
; 242  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 243  : 			}
; 244  : 		}
; 245  : 
; 246  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 247  : 	void _Compat(const _Myiter& _Right) const
; 248  : 		{	// test for compatible iterator pair
; 249  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 250  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 251  : 		}
; 252  : 
; 253  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 254  : 	void _Compat(const _Myiter&) const
; 255  : 		{	// test for compatible iterator pair
; 256  : 		}
; 257  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 258  : 
; 259  : 	_Tptr _Ptr;	// pointer to element in vector
; 260  : 	};
; 261  : 
; 262  : template<class _Myvec> inline
; 263  : 	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
; 264  : 		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
; 265  : 	{	// convert to unchecked
; 266  : 	return (_Iter._Unchecked());
; 267  : 	}
; 268  : 
; 269  : template<class _Myvec> inline
; 270  : 	_Vector_const_iterator<_Myvec>&
; 271  : 		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
; 272  : 			typename _Vector_const_iterator<_Myvec>
; 273  : 				::_Unchecked_type _Right)
; 274  : 	{	// convert to checked
; 275  : 	return (_Iter._Rechecked(_Right));
; 276  : 	}
; 277  : 
; 278  : template<class _Myvec> inline
; 279  : 	_Vector_const_iterator<_Myvec> operator+(
; 280  : 		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
; 281  : 		_Vector_const_iterator<_Myvec> _Next)
; 282  : 	{	// add offset to iterator
; 283  : 	return (_Next += _Off);
; 284  : 	}
; 285  : 
; 286  : 		// TEMPLATE CLASS _Vector_iterator
; 287  : template<class _Myvec>
; 288  : 	class _Vector_iterator
; 289  : 		: public _Vector_const_iterator<_Myvec>
; 290  : 	{	// iterator for mutable vector
; 291  : public:
; 292  : 	typedef _Vector_iterator<_Myvec> _Myiter;
; 293  : 	typedef _Vector_const_iterator<_Myvec> _Mybase;
; 294  : 	typedef random_access_iterator_tag iterator_category;
; 295  : 
; 296  : 	typedef typename _Myvec::value_type value_type;
; 297  : 	typedef typename _Myvec::difference_type difference_type;
; 298  : 	typedef typename _Myvec::pointer pointer;
; 299  : 	typedef typename _Myvec::reference reference;
; 300  : 
; 301  : 	_Vector_iterator()
; 302  : 		{	// construct with null vector pointer
; 303  : 		}
; 304  : 
; 305  : 	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
; 306  : 		: _Mybase(_Parg, _Pvector)
; 307  : 		{	// construct with pointer _Parg
; 308  : 		}
; 309  : 
; 310  : 	typedef pointer _Unchecked_type;
; 311  : 
; 312  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 313  : 		{	// reset from unchecked iterator
; 314  : 		this->_Ptr = _Right;
; 315  : 		return (*this);
; 316  : 		}
; 317  : 
; 318  : 	_Unchecked_type _Unchecked() const
; 319  : 		{	// make an unchecked iterator
; 320  : 		return (_Unchecked_type(this->_Ptr));
; 321  : 		}
; 322  : 
; 323  : 	reference operator*() const
; 324  : 		{	// return designated object
; 325  : 		return ((reference)**(_Mybase *)this);
; 326  : 		}
; 327  : 
; 328  : 	pointer operator->() const
; 329  : 		{	// return pointer to class object
; 330  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 331  : 		}
; 332  : 
; 333  : 	_Myiter& operator++()
; 334  : 		{	// preincrement
; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);
; 337  : 		}
; 338  : 
; 339  : 	_Myiter operator++(int)
; 340  : 		{	// postincrement
; 341  : 		_Myiter _Tmp = *this;
; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}
; 345  : 
; 346  : 	_Myiter& operator--()
; 347  : 		{	// predecrement
; 348  : 		--*(_Mybase *)this;
; 349  : 		return (*this);
; 350  : 		}
; 351  : 
; 352  : 	_Myiter operator--(int)
; 353  : 		{	// postdecrement
; 354  : 		_Myiter _Tmp = *this;
; 355  : 		--*this;
; 356  : 		return (_Tmp);
; 357  : 		}
; 358  : 
; 359  : 	_Myiter& operator+=(difference_type _Off)
; 360  : 		{	// increment by integer
; 361  : 		*(_Mybase *)this += _Off;
; 362  : 		return (*this);
; 363  : 		}
; 364  : 
; 365  : 	_Myiter operator+(difference_type _Off) const
; 366  : 		{	// return this + integer
; 367  : 		_Myiter _Tmp = *this;
; 368  : 		return (_Tmp += _Off);
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator-=(difference_type _Off)
; 372  : 		{	// decrement by integer
; 373  : 		return (*this += -_Off);
; 374  : 		}
; 375  : 
; 376  : 	_Myiter operator-(difference_type _Off) const
; 377  : 		{	// return this - integer
; 378  : 		_Myiter _Tmp = *this;
; 379  : 		return (_Tmp -= _Off);
; 380  : 		}
; 381  : 
; 382  : 	difference_type operator-(const _Mybase& _Right) const
; 383  : 		{	// return difference of iterators
; 384  : 		return (*(_Mybase *)this - _Right);
; 385  : 		}
; 386  : 
; 387  : 	reference operator[](difference_type _Off) const
; 388  : 		{	// subscript
; 389  : 		return (*(*this + _Off));
; 390  : 		}
; 391  : 	};
; 392  : 
; 393  : template<class _Myvec> inline
; 394  : 	typename _Vector_iterator<_Myvec>::_Unchecked_type
; 395  : 		_Unchecked(_Vector_iterator<_Myvec> _Iter)
; 396  : 	{	// convert to unchecked
; 397  : 	return (_Iter._Unchecked());
; 398  : 	}
; 399  : 
; 400  : template<class _Myvec> inline
; 401  : 	_Vector_iterator<_Myvec>&
; 402  : 		_Rechecked(_Vector_iterator<_Myvec>& _Iter,
; 403  : 			typename _Vector_iterator<_Myvec>
; 404  : 				::_Unchecked_type _Right)
; 405  : 	{	// convert to checked
; 406  : 	return (_Iter._Rechecked(_Right));
; 407  : 	}
; 408  : 
; 409  : template<class _Myvec> inline
; 410  : 	_Vector_iterator<_Myvec> operator+(
; 411  : 		typename _Vector_iterator<_Myvec>::difference_type _Off,
; 412  : 		_Vector_iterator<_Myvec> _Next)
; 413  : 	{	// add offset to iterator
; 414  : 	return (_Next += _Off);
; 415  : 	}
; 416  : 
; 417  : 		// vector TYPE WRAPPERS
; 418  : template<class _Value_type,
; 419  : 	class _Size_type,
; 420  : 	class _Difference_type,
; 421  : 	class _Pointer,
; 422  : 	class _Const_pointer,
; 423  : 	class _Reference,
; 424  : 	class _Const_reference>
; 425  : 	struct _Vec_iter_types
; 426  : 	{	// wraps types needed by iterators
; 427  : 	typedef _Value_type value_type;
; 428  : 	typedef _Size_type size_type;
; 429  : 	typedef _Difference_type difference_type;
; 430  : 	typedef _Pointer pointer;
; 431  : 	typedef _Const_pointer const_pointer;
; 432  : 	typedef _Reference reference;
; 433  : 	typedef _Const_reference const_reference;
; 434  : 	};
; 435  : 
; 436  : template<class _Ty,
; 437  : 	class _Alloc0>
; 438  : 	struct _Vec_base_types
; 439  : 	{	// types needed for a container base
; 440  : 	typedef _Alloc0 _Alloc;
; 441  : 	typedef _Vec_base_types<_Ty, _Alloc> _Myt;
; 442  : 
; 443  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 444  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 445  : 
; 446  : 
; 447  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 448  : 		_Simple_types<typename _Alty::value_type>,
; 449  : 		_Vec_iter_types<typename _Alty::value_type,
; 450  : 			typename _Alty::size_type,
; 451  : 			typename _Alty::difference_type,
; 452  : 			typename _Alty::pointer,
; 453  : 			typename _Alty::const_pointer,
; 454  : 			typename _Alty::reference,
; 455  : 			typename _Alty::const_reference> >::type
; 456  : 		_Val_types;
; 457  : 	};
; 458  : 
; 459  : 		// TEMPLATE CLASS _Vector_val
; 460  : template<class _Val_types>
; 461  : 	class _Vector_val
; 462  : 		: public _Container_base
; 463  : 	{	// base class for vector to hold data
; 464  : public:
; 465  : 	typedef _Vector_val<_Val_types> _Myt;
; 466  : 
; 467  : 	typedef typename _Val_types::value_type value_type;
; 468  : 	typedef typename _Val_types::size_type size_type;
; 469  : 	typedef typename _Val_types::difference_type difference_type;
; 470  : 	typedef typename _Val_types::pointer pointer;
; 471  : 	typedef typename _Val_types::const_pointer const_pointer;
; 472  : 	typedef typename _Val_types::reference reference;
; 473  : 	typedef typename _Val_types::const_reference const_reference;
; 474  : 
; 475  : 	typedef _Vector_iterator<_Myt> iterator;
; 476  : 	typedef _Vector_const_iterator<_Myt> const_iterator;
; 477  : 
; 478  : 	_Vector_val()
; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();
; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}
; 484  : 
; 485  : 	pointer _Myfirst;	// pointer to beginning of array
; 486  : 	pointer _Mylast;	// pointer to current end of sequence
; 487  : 	pointer _Myend;	// pointer to end of array
; 488  : 	};
; 489  : 
; 490  : 		// TEMPLATE CLASS _Vector_alloc
; 491  : template<class _Alloc_types>
; 492  : 	class _Vector_alloc
; 493  : 	{	// base class for vector to hold allocator
; 494  : public:
; 495  : 	typedef _Vector_alloc<_Alloc_types> _Myt;
; 496  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 497  : 	typedef typename _Alloc_types::_Alty _Alty;
; 498  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 499  : 
; 500  : 	typedef typename _Val_types::value_type value_type;
; 501  : 	typedef typename _Val_types::size_type size_type;
; 502  : 	typedef typename _Val_types::difference_type difference_type;
; 503  : 	typedef typename _Val_types::pointer pointer;
; 504  : 	typedef typename _Val_types::const_pointer const_pointer;
; 505  : 	typedef typename _Val_types::reference reference;
; 506  : 	typedef typename _Val_types::const_reference const_reference;
; 507  : 
; 508  : 	typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
; 509  : 	typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
; 510  : 
; 511  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 512  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 513  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 514  : 		{	// construct allocator from _Al
; 515  : 		}
; 516  : 
; 517  : 	_Vector_alloc(_Alloc&& _Al)
; 518  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 519  : 		{	// construct allocator from _Al
; 520  : 		}
; 521  : 
; 522  : 	void _Copy_alloc(const _Alty& _Al)
; 523  : 		{	// replace old allocator
; 524  : 		_Pocca(_Getal(), _Al);
; 525  : 		}
; 526  : 
; 527  : 	void _Move_alloc(_Alty& _Al)
; 528  : 		{	// replace old allocator
; 529  : 		_Pocma(_Getal(), _Al);
; 530  : 		}
; 531  : 
; 532  : 	void _Swap_alloc(_Myt& _Right)
; 533  : 		{	// swap allocators
; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}
; 536  : 
; 537  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 538  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 540  : 		{	// construct allocator from _Al
; 541  : 		_Alloc_proxy();
; 542  : 		}
; 543  : 
; 544  : 	_Vector_alloc(_Alloc&& _Al)
; 545  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 546  : 		{	// construct allocator from _Al
; 547  : 		_Alloc_proxy();
; 548  : 		}
; 549  : 
; 550  : 	~_Vector_alloc() _NOEXCEPT
; 551  : 		{	// destroy proxy
; 552  : 		_Free_proxy();
; 553  : 		}
; 554  : 
; 555  : 	void _Copy_alloc(const _Alty& _Al)
; 556  : 		{	// replace old allocator
; 557  : 		_Free_proxy();
; 558  : 		_Pocca(_Getal(), _Al);
; 559  : 		_Alloc_proxy();
; 560  : 		}
; 561  : 
; 562  : 	void _Move_alloc(_Alty& _Al)
; 563  : 		{	// replace old allocator
; 564  : 		_Free_proxy();
; 565  : 		_Pocma(_Getal(), _Al);
; 566  : 		_Alloc_proxy();
; 567  : 		}
; 568  : 
; 569  : 	void _Swap_alloc(_Myt& _Right)
; 570  : 		{	// swap allocators
; 571  : 		_Pocs(_Getal(), _Right._Getal());
; 572  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 573  : 		}
; 574  : 
; 575  : 	void _Alloc_proxy()
; 576  : 		{	// construct proxy
; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());
; 579  : 		_Myproxy() = _Alproxy.allocate(1);
; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 581  : 		_Myproxy()->_Mycont = &_Get_data();
; 582  : 		}
; 583  : 
; 584  : 	void _Free_proxy()
; 585  : 		{	// destroy proxy
; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());
; 588  : 		_Orphan_all();
; 589  : 		_Alproxy.destroy(_Myproxy());
; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 591  : 		_Myproxy() = 0;
; 592  : 		}
; 593  : 
; 594  : 	_Iterator_base12 **_Getpfirst() const
; 595  : 		{	// get address of iterator chain
; 596  : 		return (_Get_data()._Getpfirst());
; 597  : 		}
; 598  : 
; 599  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 600  : 		{	// return reference to _Myproxy
; 601  : 		return (_Get_data()._Myproxy);
; 602  : 		}
; 603  : 
; 604  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 605  : 		{	// return const reference to _Myproxy
; 606  : 		return (_Get_data()._Myproxy);
; 607  : 		}
; 608  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 609  : 
; 610  : 	void _Orphan_all()
; 611  : 		{	// orphan all iterators
; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}
; 614  : 
; 615  : 	void _Swap_all(_Myt& _Right)
; 616  : 		{	// swap all iterators
; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}
; 619  : 
; 620  : 	_Alty& _Getal() _NOEXCEPT
; 621  : 		{	// return reference to allocator
; 622  : 		return (_Mypair._Get_first());
; 623  : 		}
; 624  : 
; 625  : 	const _Alty& _Getal() const _NOEXCEPT
; 626  : 		{	// return const reference to allocator
; 627  : 		return (_Mypair._Get_first());
; 628  : 		}
; 629  : 
; 630  : 	_Vector_val<_Val_types>& _Get_data() _NOEXCEPT
; 631  : 		{	// return reference to _Vector_val
; 632  : 		return (_Mypair._Get_second());
; 633  : 		}
; 634  : 
; 635  : 	const _Vector_val<_Val_types>& _Get_data() const _NOEXCEPT
; 636  : 		{	// return const reference to _Vector_val
; 637  : 		return (_Mypair._Get_second());
; 638  : 		}
; 639  : 
; 640  : 	pointer& _Myfirst() _NOEXCEPT
; 641  : 		{	// return reference to _Myfirst
; 642  : 		return (_Get_data()._Myfirst);
; 643  : 		}
; 644  : 
; 645  : 	const pointer& _Myfirst() const _NOEXCEPT
; 646  : 		{	// return const reference to _Myfirst
; 647  : 		return (_Get_data()._Myfirst);
; 648  : 		}
; 649  : 
; 650  : 	pointer& _Mylast() _NOEXCEPT
; 651  : 		{	// return reference to _Mylast
; 652  : 		return (_Get_data()._Mylast);
; 653  : 		}
; 654  : 
; 655  : 	const pointer& _Mylast() const _NOEXCEPT
; 656  : 		{	// return const reference to _Mylast
; 657  : 		return (_Get_data()._Mylast);
; 658  : 		}
; 659  : 
; 660  : 	pointer& _Myend() _NOEXCEPT
; 661  : 		{	// return reference to _Myend
; 662  : 		return (_Get_data()._Myend);
; 663  : 		}
; 664  : 
; 665  : 	const pointer& _Myend() const _NOEXCEPT
; 666  : 		{	// return const reference to _Myend
; 667  : 		return (_Get_data()._Myend);
; 668  : 		}
; 669  : 
; 670  : private:
; 671  : 	_Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
; 672  : 	};
; 673  : 
; 674  : 		// TEMPLATE CLASS vector
; 675  : template<class _Ty,
; 676  : 	class _Alloc = allocator<_Ty> >
; 677  : 	class vector
; 678  : 		: public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
; 679  : 	{	// varying size array of values
; 680  : public:
; 681  : 	typedef vector<_Ty, _Alloc> _Myt;
; 682  : 	typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
; 683  : 	typedef _Alloc allocator_type;
; 684  : 
; 685  : 	typedef typename _Mybase::_Alty _Alty;
; 686  : 
; 687  : 	typedef typename _Mybase::value_type value_type;
; 688  : 	typedef typename _Mybase::size_type size_type;
; 689  : 	typedef typename _Mybase::difference_type difference_type;
; 690  : 	typedef typename _Mybase::pointer pointer;
; 691  : 	typedef typename _Mybase::const_pointer const_pointer;
; 692  : 	typedef typename _Mybase::reference reference;
; 693  : 	typedef typename _Mybase::const_reference const_reference;
; 694  : 
; 695  :  #define _VICONT(it)	it._Getcont()
; 696  :  #define _VIPTR(it)	(it)._Ptr
; 697  : 
; 698  : 	typedef typename _Mybase::iterator iterator;
; 699  : 	typedef typename _Mybase::const_iterator const_iterator;
; 700  : 
; 701  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 702  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 703  : 
; 704  : 	vector() _NOEXCEPT
; 705  : 		: _Mybase()
; 706  : 		{	// construct empty vector
; 707  : 		}
; 708  : 
; 709  : 	explicit vector(const _Alloc& _Al) _NOEXCEPT
; 710  : 		: _Mybase(_Al)
; 711  : 		{	// construct empty vector, allocator
; 712  : 		}
; 713  : 
; 714  : 	explicit vector(size_type _Count)
; 715  : 		: _Mybase()
; 716  : 		{	// construct from _Count * value_type()
; 717  : 		if (_Buy(_Count))
; 718  : 			{	// nonzero, fill it
; 719  : 			_TRY_BEGIN
; 720  : 			_Uninitialized_default_fill_n(this->_Myfirst(), _Count,
; 721  : 				this->_Getal());
; 722  : 			this->_Mylast() += _Count;
; 723  : 			_CATCH_ALL
; 724  : 			_Tidy();
; 725  : 			_RERAISE;
; 726  : 			_CATCH_END
; 727  : 			}
; 728  : 		}
; 729  : 
; 730  : 	vector(size_type _Count, const value_type& _Val)
; 731  : 		: _Mybase()
; 732  : 		{	// construct from _Count * _Val
; 733  : 		_Construct_n(_Count, _STD addressof(_Val));
; 734  : 		}
; 735  : 
; 736  : 	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 737  : 		: _Mybase(_Al)
; 738  : 		{	// construct from _Count * _Val, allocator
; 739  : 		_Construct_n(_Count, _STD addressof(_Val));
; 740  : 		}
; 741  : 
; 742  : 	vector(const _Myt& _Right)
; 743  : 
; 744  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 745  : 
; 746  : 
; 747  : 		{	// construct by copying _Right
; 748  : 		if (_Buy(_Right.size()))
; 749  : 			_TRY_BEGIN
; 750  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 751  : 				this->_Myfirst());
; 752  : 			_CATCH_ALL
; 753  : 			_Tidy();
; 754  : 			_RERAISE;
; 755  : 			_CATCH_END
; 756  : 		}
; 757  : 
; 758  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 759  : 		: _Mybase(_Al)
; 760  : 		{	// construct by copying _Right, allocator
; 761  : 		if (_Buy(_Right.size()))
; 762  : 			_TRY_BEGIN
; 763  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 764  : 				this->_Myfirst());
; 765  : 			_CATCH_ALL
; 766  : 			_Tidy();
; 767  : 			_RERAISE;
; 768  : 			_CATCH_END
; 769  : 		}
; 770  : 
; 771  : 	template<class _Iter,
; 772  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 773  : 			void>::type>
; 774  : 		vector(_Iter _First, _Iter _Last)
; 775  : 		: _Mybase()
; 776  : 		{	// construct from [_First, _Last)
; 777  : 		_Construct(_First, _Last);
; 778  : 		}
; 779  : 
; 780  : 	template<class _Iter,
; 781  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 782  : 			void>::type>
; 783  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 784  : 		: _Mybase(_Al)
; 785  : 		{	// construct from [_First, _Last) with allocator
; 786  : 		_Construct(_First, _Last);
; 787  : 		}
; 788  : 
; 789  : 	template<class _Iter>
; 790  : 		void _Construct(_Iter _First, _Iter _Last)
; 791  : 		{	// initialize with [_First, _Last)
; 792  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 793  : 		}
; 794  : 
; 795  : 	template<class _Iter>
; 796  : 		void _Construct(_Iter _First, _Iter _Last,
; 797  : 			input_iterator_tag)
; 798  : 		{	// initialize with [_First, _Last), input iterators
; 799  : 		_TRY_BEGIN
; 800  : 
; 801  : 		for (; _First != _Last; ++_First)
; 802  : 			emplace_back(*_First);
; 803  : 
; 804  : 		_CATCH_ALL
; 805  : 		_Tidy();
; 806  : 		_RERAISE;
; 807  : 		_CATCH_END
; 808  : 		}
; 809  : 
; 810  : 	template<class _Iter>
; 811  : 		void _Construct(_Iter _First, _Iter _Last,
; 812  : 			forward_iterator_tag)
; 813  : 		{	// initialize with [_First, _Last), forward iterators
; 814  : 		if (_Buy(_STD distance(_First, _Last)))
; 815  : 			{	// nonzero, fill it
; 816  : 			_TRY_BEGIN
; 817  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 818  : 			_CATCH_ALL
; 819  : 			_Tidy();
; 820  : 			_RERAISE;
; 821  : 			_CATCH_END
; 822  : 			}
; 823  : 		}
; 824  : 
; 825  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 826  : 		{	// construct from _Count * *_Pval
; 827  : 		if (_Buy(_Count))
; 828  : 			{	// nonzero, fill it
; 829  : 			_TRY_BEGIN
; 830  : 			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
; 831  : 			_CATCH_ALL
; 832  : 			_Tidy();
; 833  : 			_RERAISE;
; 834  : 			_CATCH_END
; 835  : 			}
; 836  : 		}
; 837  : 
; 838  : 	vector(_Myt&& _Right) _NOEXCEPT
; 839  : 		: _Mybase(_STD move(_Right._Getal()))
; 840  : 		{	// construct by moving _Right
; 841  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 842  : 		}
; 843  : 
; 844  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 845  : 		: _Mybase(_Al)
; 846  : 		{	// construct by moving _Right, allocator
; 847  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 848  : 		}
; 849  : 
; 850  : 	_Myt& operator=(_Myt&& _Right)
; 851  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 852  : 			|| _Alty::is_always_equal::value)
; 853  : 		{	// assign by moving _Right
; 854  : 		if (this != &_Right)
; 855  : 			{	// different, assign it
; 856  : 			_Tidy();
; 857  : 			if (_Alty::propagate_on_container_move_assignment::value
; 858  : 				&& this->_Getal() != _Right._Getal())
; 859  : 				this->_Move_alloc(_Right._Getal());
; 860  : 
; 861  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 862  : 			}
; 863  : 		return (*this);
; 864  : 		}
; 865  : 
; 866  : 	void _Assign_rv(_Myt&& _Right, true_type)
; 867  : 		{	// move from _Right, stealing its contents
; 868  : 		this->_Swap_all((_Myt&)_Right);
; 869  : 		this->_Myfirst() = _Right._Myfirst();
; 870  : 		this->_Mylast() = _Right._Mylast();
; 871  : 		this->_Myend() = _Right._Myend();
; 872  : 
; 873  : 		_Right._Myfirst() = pointer();
; 874  : 		_Right._Mylast() = pointer();
; 875  : 		_Right._Myend() = pointer();
; 876  : 		}
; 877  : 
; 878  : 	void _Assign_rv(_Myt&& _Right, false_type)
; 879  : 		{	// move from _Right, possibly moving its contents
; 880  : 		if (get_allocator() == _Right.get_allocator())
; 881  : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 882  : 		else
; 883  : 			_Construct(_STD make_move_iterator(_Right.begin()),
; 884  : 				_STD make_move_iterator(_Right.end()));
; 885  : 		}
; 886  : 
; 887  : 	void _Assign_rv(_Myt&& _Right)
; 888  : 		{	// assign by moving _Right
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 890  : 			typename _Alty::propagate_on_container_move_assignment());
; 891  : 		}
; 892  : 
; 893  : 
; 894  : 	void push_back(value_type&& _Val)
; 895  : 		{	// insert by moving into element at end
; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 899  : 			if (this->_Mylast() == this->_Myend())
; 900  : 				_Reserve(1);
; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 902  : 			this->_Getal().construct(this->_Mylast(),
; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();
; 905  : 			}
; 906  : 		else
; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())
; 909  : 				_Reserve(1);
; 910  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 911  : 			this->_Getal().construct(this->_Mylast(),
; 912  : 				_STD forward<value_type>(_Val));
; 913  : 			++this->_Mylast();
; 914  : 			}
; 915  : 		}
; 916  : 
; 917  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 918  : 		{	// insert by moving _Val at _Where
; 919  : 		return (emplace(_Where, _STD move(_Val)));
; 920  : 		}
; 921  : 
; 922  : 	template<class... _Valty>
; 923  : 		void emplace_back(_Valty&&... _Val)
; 924  : 		{	// insert by moving into element at end
; 925  : 		if (this->_Mylast() == this->_Myend())
; 926  : 			_Reserve(1);
; 927  : 		_Orphan_range(this->_Mylast(), this->_Mylast());
; 928  : 		this->_Getal().construct(this->_Mylast(),
; 929  : 			_STD forward<_Valty>(_Val)...);
; 930  : 		++this->_Mylast();
; 931  : 		}
; 932  : 
; 933  : 	template<class... _Valty>
; 934  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 935  : 		{	// insert by moving _Val at _Where
; 936  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 937  : 
; 938  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 939  : 		if (size() < _Off)
; 940  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 941  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 942  : 
; 943  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 944  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 945  : 		return (begin() + _Off);
; 946  : 		}
; 947  : 
; 948  : 
; 949  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Construct(_Ilist.begin(), _Ilist.end());
; 954  : 		}
; 955  : 
; 956  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 957  : 		{	// assign initializer_list
; 958  : 		assign(_Ilist.begin(), _Ilist.end());
; 959  : 		return (*this);
; 960  : 		}
; 961  : 
; 962  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 963  : 		{	// assign initializer_list
; 964  : 		assign(_Ilist.begin(), _Ilist.end());
; 965  : 		}
; 966  : 
; 967  : 	iterator insert(const_iterator _Where,
; 968  : 		_XSTD initializer_list<value_type> _Ilist)
; 969  : 		{	// insert initializer_list
; 970  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 971  : 		}
; 972  : 
; 973  : 	~vector() _NOEXCEPT
; 974  : 		{	// destroy the object
; 975  : 		_Tidy();
; 976  : 		}
; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00358	2b ca		 sub	 ecx, edx

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0035a	47		 inc	 edi

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);
; 207  : 		}
; 208  : 
; 209  : 	bool operator!=(const _Myiter& _Right) const
; 210  : 		{	// test for iterator inequality
; 211  : 		return (!(*this == _Right));
; 212  : 		}
; 213  : 
; 214  : 	bool operator<(const _Myiter& _Right) const
; 215  : 		{	// test if this < _Right
; 216  : 		_Compat(_Right);
; 217  : 		return (this->_Ptr < _Right._Ptr);
; 218  : 		}
; 219  : 
; 220  : 	bool operator>(const _Myiter& _Right) const
; 221  : 		{	// test if this > _Right
; 222  : 		return (_Right < *this);
; 223  : 		}
; 224  : 
; 225  : 	bool operator<=(const _Myiter& _Right) const
; 226  : 		{	// test if this <= _Right
; 227  : 		return (!(_Right < *this));
; 228  : 		}
; 229  : 
; 230  : 	bool operator>=(const _Myiter& _Right) const
; 231  : 		{	// test if this >= _Right
; 232  : 		return (!(*this < _Right));
; 233  : 		}
; 234  : 
; 235  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 236  : 	void _Compat(const _Myiter& _Right) const
; 237  : 		{	// test for compatible iterator pair
; 238  : 		if (this->_Getcont() == 0
; 239  : 			|| this->_Getcont() != _Right._Getcont())
; 240  : 			{	// report error
; 241  : 			_DEBUG_ERROR("vector iterators incompatible");
; 242  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 243  : 			}
; 244  : 		}
; 245  : 
; 246  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 247  : 	void _Compat(const _Myiter& _Right) const
; 248  : 		{	// test for compatible iterator pair
; 249  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 250  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 251  : 		}
; 252  : 
; 253  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 254  : 	void _Compat(const _Myiter&) const
; 255  : 		{	// test for compatible iterator pair
; 256  : 		}
; 257  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 258  : 
; 259  : 	_Tptr _Ptr;	// pointer to element in vector
; 260  : 	};
; 261  : 
; 262  : template<class _Myvec> inline
; 263  : 	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
; 264  : 		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
; 265  : 	{	// convert to unchecked
; 266  : 	return (_Iter._Unchecked());
; 267  : 	}
; 268  : 
; 269  : template<class _Myvec> inline
; 270  : 	_Vector_const_iterator<_Myvec>&
; 271  : 		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
; 272  : 			typename _Vector_const_iterator<_Myvec>
; 273  : 				::_Unchecked_type _Right)
; 274  : 	{	// convert to checked
; 275  : 	return (_Iter._Rechecked(_Right));
; 276  : 	}
; 277  : 
; 278  : template<class _Myvec> inline
; 279  : 	_Vector_const_iterator<_Myvec> operator+(
; 280  : 		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
; 281  : 		_Vector_const_iterator<_Myvec> _Next)
; 282  : 	{	// add offset to iterator
; 283  : 	return (_Next += _Off);
; 284  : 	}
; 285  : 
; 286  : 		// TEMPLATE CLASS _Vector_iterator
; 287  : template<class _Myvec>
; 288  : 	class _Vector_iterator
; 289  : 		: public _Vector_const_iterator<_Myvec>
; 290  : 	{	// iterator for mutable vector
; 291  : public:
; 292  : 	typedef _Vector_iterator<_Myvec> _Myiter;
; 293  : 	typedef _Vector_const_iterator<_Myvec> _Mybase;
; 294  : 	typedef random_access_iterator_tag iterator_category;
; 295  : 
; 296  : 	typedef typename _Myvec::value_type value_type;
; 297  : 	typedef typename _Myvec::difference_type difference_type;
; 298  : 	typedef typename _Myvec::pointer pointer;
; 299  : 	typedef typename _Myvec::reference reference;
; 300  : 
; 301  : 	_Vector_iterator()
; 302  : 		{	// construct with null vector pointer
; 303  : 		}
; 304  : 
; 305  : 	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
; 306  : 		: _Mybase(_Parg, _Pvector)
; 307  : 		{	// construct with pointer _Parg
; 308  : 		}
; 309  : 
; 310  : 	typedef pointer _Unchecked_type;
; 311  : 
; 312  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 313  : 		{	// reset from unchecked iterator
; 314  : 		this->_Ptr = _Right;
; 315  : 		return (*this);
; 316  : 		}
; 317  : 
; 318  : 	_Unchecked_type _Unchecked() const
; 319  : 		{	// make an unchecked iterator
; 320  : 		return (_Unchecked_type(this->_Ptr));
; 321  : 		}
; 322  : 
; 323  : 	reference operator*() const
; 324  : 		{	// return designated object
; 325  : 		return ((reference)**(_Mybase *)this);
; 326  : 		}
; 327  : 
; 328  : 	pointer operator->() const
; 329  : 		{	// return pointer to class object
; 330  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 331  : 		}
; 332  : 
; 333  : 	_Myiter& operator++()
; 334  : 		{	// preincrement
; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);
; 337  : 		}
; 338  : 
; 339  : 	_Myiter operator++(int)
; 340  : 		{	// postincrement
; 341  : 		_Myiter _Tmp = *this;
; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}
; 345  : 
; 346  : 	_Myiter& operator--()
; 347  : 		{	// predecrement
; 348  : 		--*(_Mybase *)this;
; 349  : 		return (*this);
; 350  : 		}
; 351  : 
; 352  : 	_Myiter operator--(int)
; 353  : 		{	// postdecrement
; 354  : 		_Myiter _Tmp = *this;
; 355  : 		--*this;
; 356  : 		return (_Tmp);
; 357  : 		}
; 358  : 
; 359  : 	_Myiter& operator+=(difference_type _Off)
; 360  : 		{	// increment by integer
; 361  : 		*(_Mybase *)this += _Off;
; 362  : 		return (*this);
; 363  : 		}
; 364  : 
; 365  : 	_Myiter operator+(difference_type _Off) const
; 366  : 		{	// return this + integer
; 367  : 		_Myiter _Tmp = *this;
; 368  : 		return (_Tmp += _Off);
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator-=(difference_type _Off)
; 372  : 		{	// decrement by integer
; 373  : 		return (*this += -_Off);
; 374  : 		}
; 375  : 
; 376  : 	_Myiter operator-(difference_type _Off) const
; 377  : 		{	// return this - integer
; 378  : 		_Myiter _Tmp = *this;
; 379  : 		return (_Tmp -= _Off);
; 380  : 		}
; 381  : 
; 382  : 	difference_type operator-(const _Mybase& _Right) const
; 383  : 		{	// return difference of iterators
; 384  : 		return (*(_Mybase *)this - _Right);
; 385  : 		}
; 386  : 
; 387  : 	reference operator[](difference_type _Off) const
; 388  : 		{	// subscript
; 389  : 		return (*(*this + _Off));
; 390  : 		}
; 391  : 	};
; 392  : 
; 393  : template<class _Myvec> inline
; 394  : 	typename _Vector_iterator<_Myvec>::_Unchecked_type
; 395  : 		_Unchecked(_Vector_iterator<_Myvec> _Iter)
; 396  : 	{	// convert to unchecked
; 397  : 	return (_Iter._Unchecked());
; 398  : 	}
; 399  : 
; 400  : template<class _Myvec> inline
; 401  : 	_Vector_iterator<_Myvec>&
; 402  : 		_Rechecked(_Vector_iterator<_Myvec>& _Iter,
; 403  : 			typename _Vector_iterator<_Myvec>
; 404  : 				::_Unchecked_type _Right)
; 405  : 	{	// convert to checked
; 406  : 	return (_Iter._Rechecked(_Right));
; 407  : 	}
; 408  : 
; 409  : template<class _Myvec> inline
; 410  : 	_Vector_iterator<_Myvec> operator+(
; 411  : 		typename _Vector_iterator<_Myvec>::difference_type _Off,
; 412  : 		_Vector_iterator<_Myvec> _Next)
; 413  : 	{	// add offset to iterator
; 414  : 	return (_Next += _Off);
; 415  : 	}
; 416  : 
; 417  : 		// vector TYPE WRAPPERS
; 418  : template<class _Value_type,
; 419  : 	class _Size_type,
; 420  : 	class _Difference_type,
; 421  : 	class _Pointer,
; 422  : 	class _Const_pointer,
; 423  : 	class _Reference,
; 424  : 	class _Const_reference>
; 425  : 	struct _Vec_iter_types
; 426  : 	{	// wraps types needed by iterators
; 427  : 	typedef _Value_type value_type;
; 428  : 	typedef _Size_type size_type;
; 429  : 	typedef _Difference_type difference_type;
; 430  : 	typedef _Pointer pointer;
; 431  : 	typedef _Const_pointer const_pointer;
; 432  : 	typedef _Reference reference;
; 433  : 	typedef _Const_reference const_reference;
; 434  : 	};
; 435  : 
; 436  : template<class _Ty,
; 437  : 	class _Alloc0>
; 438  : 	struct _Vec_base_types
; 439  : 	{	// types needed for a container base
; 440  : 	typedef _Alloc0 _Alloc;
; 441  : 	typedef _Vec_base_types<_Ty, _Alloc> _Myt;
; 442  : 
; 443  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 444  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 445  : 
; 446  : 
; 447  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 448  : 		_Simple_types<typename _Alty::value_type>,
; 449  : 		_Vec_iter_types<typename _Alty::value_type,
; 450  : 			typename _Alty::size_type,
; 451  : 			typename _Alty::difference_type,
; 452  : 			typename _Alty::pointer,
; 453  : 			typename _Alty::const_pointer,
; 454  : 			typename _Alty::reference,
; 455  : 			typename _Alty::const_reference> >::type
; 456  : 		_Val_types;
; 457  : 	};
; 458  : 
; 459  : 		// TEMPLATE CLASS _Vector_val
; 460  : template<class _Val_types>
; 461  : 	class _Vector_val
; 462  : 		: public _Container_base
; 463  : 	{	// base class for vector to hold data
; 464  : public:
; 465  : 	typedef _Vector_val<_Val_types> _Myt;
; 466  : 
; 467  : 	typedef typename _Val_types::value_type value_type;
; 468  : 	typedef typename _Val_types::size_type size_type;
; 469  : 	typedef typename _Val_types::difference_type difference_type;
; 470  : 	typedef typename _Val_types::pointer pointer;
; 471  : 	typedef typename _Val_types::const_pointer const_pointer;
; 472  : 	typedef typename _Val_types::reference reference;
; 473  : 	typedef typename _Val_types::const_reference const_reference;
; 474  : 
; 475  : 	typedef _Vector_iterator<_Myt> iterator;
; 476  : 	typedef _Vector_const_iterator<_Myt> const_iterator;
; 477  : 
; 478  : 	_Vector_val()
; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();
; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}
; 484  : 
; 485  : 	pointer _Myfirst;	// pointer to beginning of array
; 486  : 	pointer _Mylast;	// pointer to current end of sequence
; 487  : 	pointer _Myend;	// pointer to end of array
; 488  : 	};
; 489  : 
; 490  : 		// TEMPLATE CLASS _Vector_alloc
; 491  : template<class _Alloc_types>
; 492  : 	class _Vector_alloc
; 493  : 	{	// base class for vector to hold allocator
; 494  : public:
; 495  : 	typedef _Vector_alloc<_Alloc_types> _Myt;
; 496  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 497  : 	typedef typename _Alloc_types::_Alty _Alty;
; 498  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 499  : 
; 500  : 	typedef typename _Val_types::value_type value_type;
; 501  : 	typedef typename _Val_types::size_type size_type;
; 502  : 	typedef typename _Val_types::difference_type difference_type;
; 503  : 	typedef typename _Val_types::pointer pointer;
; 504  : 	typedef typename _Val_types::const_pointer const_pointer;
; 505  : 	typedef typename _Val_types::reference reference;
; 506  : 	typedef typename _Val_types::const_reference const_reference;
; 507  : 
; 508  : 	typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
; 509  : 	typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
; 510  : 
; 511  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 512  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 513  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 514  : 		{	// construct allocator from _Al
; 515  : 		}
; 516  : 
; 517  : 	_Vector_alloc(_Alloc&& _Al)
; 518  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 519  : 		{	// construct allocator from _Al
; 520  : 		}
; 521  : 
; 522  : 	void _Copy_alloc(const _Alty& _Al)
; 523  : 		{	// replace old allocator
; 524  : 		_Pocca(_Getal(), _Al);
; 525  : 		}
; 526  : 
; 527  : 	void _Move_alloc(_Alty& _Al)
; 528  : 		{	// replace old allocator
; 529  : 		_Pocma(_Getal(), _Al);
; 530  : 		}
; 531  : 
; 532  : 	void _Swap_alloc(_Myt& _Right)
; 533  : 		{	// swap allocators
; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}
; 536  : 
; 537  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 538  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 540  : 		{	// construct allocator from _Al
; 541  : 		_Alloc_proxy();
; 542  : 		}
; 543  : 
; 544  : 	_Vector_alloc(_Alloc&& _Al)
; 545  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 546  : 		{	// construct allocator from _Al
; 547  : 		_Alloc_proxy();
; 548  : 		}
; 549  : 
; 550  : 	~_Vector_alloc() _NOEXCEPT
; 551  : 		{	// destroy proxy
; 552  : 		_Free_proxy();
; 553  : 		}
; 554  : 
; 555  : 	void _Copy_alloc(const _Alty& _Al)
; 556  : 		{	// replace old allocator
; 557  : 		_Free_proxy();
; 558  : 		_Pocca(_Getal(), _Al);
; 559  : 		_Alloc_proxy();
; 560  : 		}
; 561  : 
; 562  : 	void _Move_alloc(_Alty& _Al)
; 563  : 		{	// replace old allocator
; 564  : 		_Free_proxy();
; 565  : 		_Pocma(_Getal(), _Al);
; 566  : 		_Alloc_proxy();
; 567  : 		}
; 568  : 
; 569  : 	void _Swap_alloc(_Myt& _Right)
; 570  : 		{	// swap allocators
; 571  : 		_Pocs(_Getal(), _Right._Getal());
; 572  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 573  : 		}
; 574  : 
; 575  : 	void _Alloc_proxy()
; 576  : 		{	// construct proxy
; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());
; 579  : 		_Myproxy() = _Alproxy.allocate(1);
; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 581  : 		_Myproxy()->_Mycont = &_Get_data();
; 582  : 		}
; 583  : 
; 584  : 	void _Free_proxy()
; 585  : 		{	// destroy proxy
; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());
; 588  : 		_Orphan_all();
; 589  : 		_Alproxy.destroy(_Myproxy());
; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 591  : 		_Myproxy() = 0;
; 592  : 		}
; 593  : 
; 594  : 	_Iterator_base12 **_Getpfirst() const
; 595  : 		{	// get address of iterator chain
; 596  : 		return (_Get_data()._Getpfirst());
; 597  : 		}
; 598  : 
; 599  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 600  : 		{	// return reference to _Myproxy
; 601  : 		return (_Get_data()._Myproxy);
; 602  : 		}
; 603  : 
; 604  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 605  : 		{	// return const reference to _Myproxy
; 606  : 		return (_Get_data()._Myproxy);
; 607  : 		}
; 608  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 609  : 
; 610  : 	void _Orphan_all()
; 611  : 		{	// orphan all iterators
; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}
; 614  : 
; 615  : 	void _Swap_all(_Myt& _Right)
; 616  : 		{	// swap all iterators
; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}
; 619  : 
; 620  : 	_Alty& _Getal() _NOEXCEPT
; 621  : 		{	// return reference to allocator
; 622  : 		return (_Mypair._Get_first());
; 623  : 		}
; 624  : 
; 625  : 	const _Alty& _Getal() const _NOEXCEPT
; 626  : 		{	// return const reference to allocator
; 627  : 		return (_Mypair._Get_first());
; 628  : 		}
; 629  : 
; 630  : 	_Vector_val<_Val_types>& _Get_data() _NOEXCEPT
; 631  : 		{	// return reference to _Vector_val
; 632  : 		return (_Mypair._Get_second());
; 633  : 		}
; 634  : 
; 635  : 	const _Vector_val<_Val_types>& _Get_data() const _NOEXCEPT
; 636  : 		{	// return const reference to _Vector_val
; 637  : 		return (_Mypair._Get_second());
; 638  : 		}
; 639  : 
; 640  : 	pointer& _Myfirst() _NOEXCEPT
; 641  : 		{	// return reference to _Myfirst
; 642  : 		return (_Get_data()._Myfirst);
; 643  : 		}
; 644  : 
; 645  : 	const pointer& _Myfirst() const _NOEXCEPT
; 646  : 		{	// return const reference to _Myfirst
; 647  : 		return (_Get_data()._Myfirst);
; 648  : 		}
; 649  : 
; 650  : 	pointer& _Mylast() _NOEXCEPT
; 651  : 		{	// return reference to _Mylast
; 652  : 		return (_Get_data()._Mylast);
; 653  : 		}
; 654  : 
; 655  : 	const pointer& _Mylast() const _NOEXCEPT
; 656  : 		{	// return const reference to _Mylast
; 657  : 		return (_Get_data()._Mylast);
; 658  : 		}
; 659  : 
; 660  : 	pointer& _Myend() _NOEXCEPT
; 661  : 		{	// return reference to _Myend
; 662  : 		return (_Get_data()._Myend);
; 663  : 		}
; 664  : 
; 665  : 	const pointer& _Myend() const _NOEXCEPT
; 666  : 		{	// return const reference to _Myend
; 667  : 		return (_Get_data()._Myend);
; 668  : 		}
; 669  : 
; 670  : private:
; 671  : 	_Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
; 672  : 	};
; 673  : 
; 674  : 		// TEMPLATE CLASS vector
; 675  : template<class _Ty,
; 676  : 	class _Alloc = allocator<_Ty> >
; 677  : 	class vector
; 678  : 		: public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
; 679  : 	{	// varying size array of values
; 680  : public:
; 681  : 	typedef vector<_Ty, _Alloc> _Myt;
; 682  : 	typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
; 683  : 	typedef _Alloc allocator_type;
; 684  : 
; 685  : 	typedef typename _Mybase::_Alty _Alty;
; 686  : 
; 687  : 	typedef typename _Mybase::value_type value_type;
; 688  : 	typedef typename _Mybase::size_type size_type;
; 689  : 	typedef typename _Mybase::difference_type difference_type;
; 690  : 	typedef typename _Mybase::pointer pointer;
; 691  : 	typedef typename _Mybase::const_pointer const_pointer;
; 692  : 	typedef typename _Mybase::reference reference;
; 693  : 	typedef typename _Mybase::const_reference const_reference;
; 694  : 
; 695  :  #define _VICONT(it)	it._Getcont()
; 696  :  #define _VIPTR(it)	(it)._Ptr
; 697  : 
; 698  : 	typedef typename _Mybase::iterator iterator;
; 699  : 	typedef typename _Mybase::const_iterator const_iterator;
; 700  : 
; 701  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 702  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 703  : 
; 704  : 	vector() _NOEXCEPT
; 705  : 		: _Mybase()
; 706  : 		{	// construct empty vector
; 707  : 		}
; 708  : 
; 709  : 	explicit vector(const _Alloc& _Al) _NOEXCEPT
; 710  : 		: _Mybase(_Al)
; 711  : 		{	// construct empty vector, allocator
; 712  : 		}
; 713  : 
; 714  : 	explicit vector(size_type _Count)
; 715  : 		: _Mybase()
; 716  : 		{	// construct from _Count * value_type()
; 717  : 		if (_Buy(_Count))
; 718  : 			{	// nonzero, fill it
; 719  : 			_TRY_BEGIN
; 720  : 			_Uninitialized_default_fill_n(this->_Myfirst(), _Count,
; 721  : 				this->_Getal());
; 722  : 			this->_Mylast() += _Count;
; 723  : 			_CATCH_ALL
; 724  : 			_Tidy();
; 725  : 			_RERAISE;
; 726  : 			_CATCH_END
; 727  : 			}
; 728  : 		}
; 729  : 
; 730  : 	vector(size_type _Count, const value_type& _Val)
; 731  : 		: _Mybase()
; 732  : 		{	// construct from _Count * _Val
; 733  : 		_Construct_n(_Count, _STD addressof(_Val));
; 734  : 		}
; 735  : 
; 736  : 	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 737  : 		: _Mybase(_Al)
; 738  : 		{	// construct from _Count * _Val, allocator
; 739  : 		_Construct_n(_Count, _STD addressof(_Val));
; 740  : 		}
; 741  : 
; 742  : 	vector(const _Myt& _Right)
; 743  : 
; 744  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 745  : 
; 746  : 
; 747  : 		{	// construct by copying _Right
; 748  : 		if (_Buy(_Right.size()))
; 749  : 			_TRY_BEGIN
; 750  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 751  : 				this->_Myfirst());
; 752  : 			_CATCH_ALL
; 753  : 			_Tidy();
; 754  : 			_RERAISE;
; 755  : 			_CATCH_END
; 756  : 		}
; 757  : 
; 758  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 759  : 		: _Mybase(_Al)
; 760  : 		{	// construct by copying _Right, allocator
; 761  : 		if (_Buy(_Right.size()))
; 762  : 			_TRY_BEGIN
; 763  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 764  : 				this->_Myfirst());
; 765  : 			_CATCH_ALL
; 766  : 			_Tidy();
; 767  : 			_RERAISE;
; 768  : 			_CATCH_END
; 769  : 		}
; 770  : 
; 771  : 	template<class _Iter,
; 772  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 773  : 			void>::type>
; 774  : 		vector(_Iter _First, _Iter _Last)
; 775  : 		: _Mybase()
; 776  : 		{	// construct from [_First, _Last)
; 777  : 		_Construct(_First, _Last);
; 778  : 		}
; 779  : 
; 780  : 	template<class _Iter,
; 781  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 782  : 			void>::type>
; 783  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 784  : 		: _Mybase(_Al)
; 785  : 		{	// construct from [_First, _Last) with allocator
; 786  : 		_Construct(_First, _Last);
; 787  : 		}
; 788  : 
; 789  : 	template<class _Iter>
; 790  : 		void _Construct(_Iter _First, _Iter _Last)
; 791  : 		{	// initialize with [_First, _Last)
; 792  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 793  : 		}
; 794  : 
; 795  : 	template<class _Iter>
; 796  : 		void _Construct(_Iter _First, _Iter _Last,
; 797  : 			input_iterator_tag)
; 798  : 		{	// initialize with [_First, _Last), input iterators
; 799  : 		_TRY_BEGIN
; 800  : 
; 801  : 		for (; _First != _Last; ++_First)
; 802  : 			emplace_back(*_First);
; 803  : 
; 804  : 		_CATCH_ALL
; 805  : 		_Tidy();
; 806  : 		_RERAISE;
; 807  : 		_CATCH_END
; 808  : 		}
; 809  : 
; 810  : 	template<class _Iter>
; 811  : 		void _Construct(_Iter _First, _Iter _Last,
; 812  : 			forward_iterator_tag)
; 813  : 		{	// initialize with [_First, _Last), forward iterators
; 814  : 		if (_Buy(_STD distance(_First, _Last)))
; 815  : 			{	// nonzero, fill it
; 816  : 			_TRY_BEGIN
; 817  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 818  : 			_CATCH_ALL
; 819  : 			_Tidy();
; 820  : 			_RERAISE;
; 821  : 			_CATCH_END
; 822  : 			}
; 823  : 		}
; 824  : 
; 825  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 826  : 		{	// construct from _Count * *_Pval
; 827  : 		if (_Buy(_Count))
; 828  : 			{	// nonzero, fill it
; 829  : 			_TRY_BEGIN
; 830  : 			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
; 831  : 			_CATCH_ALL
; 832  : 			_Tidy();
; 833  : 			_RERAISE;
; 834  : 			_CATCH_END
; 835  : 			}
; 836  : 		}
; 837  : 
; 838  : 	vector(_Myt&& _Right) _NOEXCEPT
; 839  : 		: _Mybase(_STD move(_Right._Getal()))
; 840  : 		{	// construct by moving _Right
; 841  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 842  : 		}
; 843  : 
; 844  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 845  : 		: _Mybase(_Al)
; 846  : 		{	// construct by moving _Right, allocator
; 847  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 848  : 		}
; 849  : 
; 850  : 	_Myt& operator=(_Myt&& _Right)
; 851  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 852  : 			|| _Alty::is_always_equal::value)
; 853  : 		{	// assign by moving _Right
; 854  : 		if (this != &_Right)
; 855  : 			{	// different, assign it
; 856  : 			_Tidy();
; 857  : 			if (_Alty::propagate_on_container_move_assignment::value
; 858  : 				&& this->_Getal() != _Right._Getal())
; 859  : 				this->_Move_alloc(_Right._Getal());
; 860  : 
; 861  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 862  : 			}
; 863  : 		return (*this);
; 864  : 		}
; 865  : 
; 866  : 	void _Assign_rv(_Myt&& _Right, true_type)
; 867  : 		{	// move from _Right, stealing its contents
; 868  : 		this->_Swap_all((_Myt&)_Right);
; 869  : 		this->_Myfirst() = _Right._Myfirst();
; 870  : 		this->_Mylast() = _Right._Mylast();
; 871  : 		this->_Myend() = _Right._Myend();
; 872  : 
; 873  : 		_Right._Myfirst() = pointer();
; 874  : 		_Right._Mylast() = pointer();
; 875  : 		_Right._Myend() = pointer();
; 876  : 		}
; 877  : 
; 878  : 	void _Assign_rv(_Myt&& _Right, false_type)
; 879  : 		{	// move from _Right, possibly moving its contents
; 880  : 		if (get_allocator() == _Right.get_allocator())
; 881  : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 882  : 		else
; 883  : 			_Construct(_STD make_move_iterator(_Right.begin()),
; 884  : 				_STD make_move_iterator(_Right.end()));
; 885  : 		}
; 886  : 
; 887  : 	void _Assign_rv(_Myt&& _Right)
; 888  : 		{	// assign by moving _Right
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 890  : 			typename _Alty::propagate_on_container_move_assignment());
; 891  : 		}
; 892  : 
; 893  : 
; 894  : 	void push_back(value_type&& _Val)
; 895  : 		{	// insert by moving into element at end
; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 899  : 			if (this->_Mylast() == this->_Myend())
; 900  : 				_Reserve(1);
; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 902  : 			this->_Getal().construct(this->_Mylast(),
; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();
; 905  : 			}
; 906  : 		else
; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())
; 909  : 				_Reserve(1);
; 910  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 911  : 			this->_Getal().construct(this->_Mylast(),
; 912  : 				_STD forward<value_type>(_Val));
; 913  : 			++this->_Mylast();
; 914  : 			}
; 915  : 		}
; 916  : 
; 917  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 918  : 		{	// insert by moving _Val at _Where
; 919  : 		return (emplace(_Where, _STD move(_Val)));
; 920  : 		}
; 921  : 
; 922  : 	template<class... _Valty>
; 923  : 		void emplace_back(_Valty&&... _Val)
; 924  : 		{	// insert by moving into element at end
; 925  : 		if (this->_Mylast() == this->_Myend())
; 926  : 			_Reserve(1);
; 927  : 		_Orphan_range(this->_Mylast(), this->_Mylast());
; 928  : 		this->_Getal().construct(this->_Mylast(),
; 929  : 			_STD forward<_Valty>(_Val)...);
; 930  : 		++this->_Mylast();
; 931  : 		}
; 932  : 
; 933  : 	template<class... _Valty>
; 934  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 935  : 		{	// insert by moving _Val at _Where
; 936  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 937  : 
; 938  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 939  : 		if (size() < _Off)
; 940  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 941  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 942  : 
; 943  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 944  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 945  : 		return (begin() + _Off);
; 946  : 		}
; 947  : 
; 948  : 
; 949  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Construct(_Ilist.begin(), _Ilist.end());
; 954  : 		}
; 955  : 
; 956  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 957  : 		{	// assign initializer_list
; 958  : 		assign(_Ilist.begin(), _Ilist.end());
; 959  : 		return (*this);
; 960  : 		}
; 961  : 
; 962  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 963  : 		{	// assign initializer_list
; 964  : 		assign(_Ilist.begin(), _Ilist.end());
; 965  : 		}
; 966  : 
; 967  : 	iterator insert(const_iterator _Where,
; 968  : 		_XSTD initializer_list<value_type> _Ilist)
; 969  : 		{	// insert initializer_list
; 970  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 971  : 		}
; 972  : 
; 973  : 	~vector() _NOEXCEPT
; 974  : 		{	// destroy the object
; 975  : 		_Tidy();
; 976  : 		}
; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0035b	c1 f9 03	 sar	 ecx, 3

; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0035e	ba ff ff ff 1f	 mov	 edx, 536870911		; 1fffffffH
  00363	8b c1		 mov	 eax, ecx
  00365	d1 e8		 shr	 eax, 1
  00367	2b d0		 sub	 edx, eax
  00369	3b d1		 cmp	 edx, ecx
  0036b	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  0036e	b8 00 00 00 00	 mov	 eax, 0
  00373	0f 42 f0	 cmovb	 esi, eax

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00376	8d 4b fc	 lea	 ecx, DWORD PTR [ebx-4]

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00379	3b f7		 cmp	 esi, edi
  0037b	0f 42 f7	 cmovb	 esi, edi

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0037e	56		 push	 esi
  0037f	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@IAEXI@Z ; std::vector<tagPOINT,std::allocator<tagPOINT> >::_Reallocate
  00384	8b 75 bc	 mov	 esi, DWORD PTR _iPT$2$[ebp]
$LN328@CheckMonst:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00387	8b 03		 mov	 eax, DWORD PTR [ebx]
  00389	85 c0		 test	 eax, eax
  0038b	0f 84 d3 fd ff
	ff		 je	 $LN637@CheckMonst
  00391	8b 7d b8	 mov	 edi, DWORD PTR _iPT$1$[ebp]
  00394	89 38		 mov	 DWORD PTR [eax], edi
  00396	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00399	e9 c9 fd ff ff	 jmp	 $LN506@CheckMonst
$LN613@CheckMonst:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1784 : 		_Xlength_error("vector<T> too long");

  0039e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  003a3	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN649@CheckMonst:
$LN615@CheckMonst:
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 2878 : 						iUSER_AXIS = n;

  003a8	8b c1		 mov	 eax, ecx
  003aa	89 45 a4	 mov	 DWORD PTR _iUSER_AXIS$1$[ebp], eax
  003ad	e9 e3 fe ff ff	 jmp	 $LN635@CheckMonst
$LN645@CheckMonst:
  003b2	8b 45 bc	 mov	 eax, DWORD PTR tv1921[ebp]
$LN632@CheckMonst:

; 2857 : 		{
; 2858 : 			this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[iMON] = -1;

  003b5	c7 02 ff ff ff
	ff		 mov	 DWORD PTR [edx], -1
  003bb	e9 28 ff ff ff	 jmp	 $LN11@CheckMonst
$LN648@CheckMonst:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckMonsterInDieTile@CChaosCastle@@QAEXH@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1?$vector@UtagPOINT@@V?$allocator@UtagPOINT@@@std@@@std@@QAE@XZ ; std::vector<tagPOINT,std::allocator<tagPOINT> >::~vector<tagPOINT,std::allocator<tagPOINT> >
  00005	6a 04		 push	 4
  00007	6a 0c		 push	 12			; 0000000cH
  00009	8d 45 c0	 lea	 eax, DWORD PTR _vtMAP_UNTRAP$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00012	c3		 ret	 0
__ehhandler$?CheckMonsterInDieTile@CChaosCastle@@QAEXH@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckMonsterInDieTile@CChaosCastle@@QAEXH@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckMonsterInDieTile@CChaosCastle@@QAEXH@Z ENDP	; CChaosCastle::CheckMonsterInDieTile
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?CheckUserInDieTile@CChaosCastle@@QAEXH@Z
_TEXT	SEGMENT
_iSY$1$ = -12						; size = 4
tv871 = -8						; size = 4
_this$1$ = -4						; size = 4
_iSX$1$ = 8						; size = 4
_iChaosCastleIndex$ = 8					; size = 4
?CheckUserInDieTile@CChaosCastle@@QAEXH@Z PROC		; CChaosCastle::CheckUserInDieTile, COMDAT
; _this$ = ecx

; 2906 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 2907 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _iChaosCastleIndex$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi
  00010	85 db		 test	 ebx, ebx
  00012	0f 88 8f 01 00
	00		 js	 $LN3@CheckUserI
  00018	33 c0		 xor	 eax, eax
  0001a	83 fb 06	 cmp	 ebx, 6
  0001d	0f 9e c0	 setle	 al
  00020	85 c0		 test	 eax, eax
  00022	0f 84 7f 01 00
	00		 je	 $LN3@CheckUserI

; 2908 : 		return;
; 2909 : 
; 2910 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  00028	69 c3 68 08 00
	00		 imul	 eax, ebx, 2152
  0002e	56		 push	 esi
  0002f	8d 77 68	 lea	 esi, DWORD PTR [edi+104]
  00032	c7 45 f8 46 00
	00 00		 mov	 DWORD PTR tv871[ebp], 70 ; 00000046H
  00039	03 f0		 add	 esi, eax
  0003b	0f 1f 44 00 00	 npad	 5
$LL4@CheckUserI:

; 2911 : 	{
; 2912 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex != -1 )

  00040	8b 06		 mov	 eax, DWORD PTR [esi]
  00042	83 f8 ff	 cmp	 eax, -1
  00045	0f 84 4e 01 00
	00		 je	 $LN2@CheckUserI

; 2913 : 		{
; 2914 : 			if ( gObjIsConnected(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex) ==TRUE &&

  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00051	83 c4 04	 add	 esp, 4
  00054	83 f8 01	 cmp	 eax, 1
  00057	0f 85 3c 01 00
	00		 jne	 $LN2@CheckUserI
  0005d	53		 push	 ebx
  0005e	8b cf		 mov	 ecx, edi
  00060	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap
  00065	69 16 40 27 00
	00		 imul	 edx, DWORD PTR [esi], 10048
  0006b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00071	0f b6 8c 3a 23
	01 00 00	 movzx	 ecx, BYTE PTR [edx+edi+291]
  00079	3b c8		 cmp	 ecx, eax
  0007b	0f 85 15 01 00
	00		 jne	 $LN19@CheckUserI

; 2915 : 				 gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].MapNumber == GetMap(iChaosCastleIndex) )
; 2916 : 			{
; 2917 : 				if ( gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].Life > 0.0 )

  00081	f3 0f 10 84 3a
	d8 00 00 00	 movss	 xmm0, DWORD PTR [edx+edi+216]
  0008a	0f 57 c9	 xorps	 xmm1, xmm1
  0008d	0f 2f c1	 comiss	 xmm0, xmm1
  00090	0f 86 00 01 00
	00		 jbe	 $LN19@CheckUserI

; 2918 : 				{
; 2919 : 					int iSX = gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].X;

  00096	0f b6 8c 3a 20
	01 00 00	 movzx	 ecx, BYTE PTR [edx+edi+288]

; 2920 : 					int iSY = gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].Y;
; 2921 : 
; 2922 : 					int MapNumber = GetMap(iChaosCastleIndex);
; 2923 : 					BYTE btMapAttr = MapC[MapNumber].m_attrbuf[iSY * 256 + iSX] & 0x08;

  0009e	69 c0 28 38 05
	00		 imul	 eax, eax, 342056
  000a4	89 4d 08	 mov	 DWORD PTR _iSX$1$[ebp], ecx
  000a7	0f b6 8c 3a 21
	01 00 00	 movzx	 ecx, BYTE PTR [edx+edi+289]
  000af	89 4d f4	 mov	 DWORD PTR _iSY$1$[ebp], ecx
  000b2	c1 e1 08	 shl	 ecx, 8
  000b5	03 88 10 00 00
	00		 add	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[eax+16]
  000bb	8b 45 08	 mov	 eax, DWORD PTR _iSX$1$[ebp]
  000be	f6 04 01 08	 test	 BYTE PTR [ecx+eax], 8

; 2924 : 
; 2925 : 					if ( btMapAttr == 8 )

  000c2	0f 84 ce 00 00
	00		 je	 $LN19@CheckUserI

; 2926 : 					{
; 2927 : 						gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].Life = 0;

  000c8	c7 84 3a d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [edx+edi+216], 0

; 2928 : 						gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].m_State = 4;

  000d3	69 0e 40 27 00
	00		 imul	 ecx, DWORD PTR [esi], 10048
  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000de	c7 84 01 d0 01
	00 00 04 00 00
	00		 mov	 DWORD PTR [ecx+eax+464], 4

; 2929 : 						gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].KillerType = 1;

  000e9	69 0e 40 27 00
	00		 imul	 ecx, DWORD PTR [esi], 10048
  000ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f4	c6 84 01 89 05
	00 00 01	 mov	 BYTE PTR [ecx+eax+1417], 1

; 2930 : 						gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].RegenTime = GetTickCount();

  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00102	69 16 40 27 00
	00		 imul	 edx, DWORD PTR [esi], 10048
  00108	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 2931 : 						gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].DieRegen = 1;
; 2932 : 						gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].PathCount = 0;
; 2933 : 
; 2934 : 						GCDiePlayerSend(&gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex],

  0010e	6a 00		 push	 0
  00110	6a 00		 push	 0
  00112	89 84 0a 90 05
	00 00		 mov	 DWORD PTR [edx+ecx+1424], eax
  00119	69 0e 40 27 00
	00		 imul	 ecx, DWORD PTR [esi], 10048
  0011f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00124	c6 84 01 8a 05
	00 00 01	 mov	 BYTE PTR [ecx+eax+1418], 1
  0012c	69 0e 40 27 00
	00		 imul	 ecx, DWORD PTR [esi], 10048
  00132	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00137	c7 84 01 58 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+344], 0
  00142	8b 06		 mov	 eax, DWORD PTR [esi]
  00144	50		 push	 eax
  00145	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  0014b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 ?GCDiePlayerSend@@YAXPAUOBJECTSTRUCT@@HGH@Z ; GCDiePlayerSend

; 2935 : 							this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex, 0, 0);
; 2936 : 
; 2937 : 						LogAddTD("[Chaos Castle] (%d) [%s][%s] User Dead In Chaos Castle : Fall from Castle (X:%d, Y:%d)",

  00157	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0015d	69 16 40 27 00
	00		 imul	 edx, DWORD PTR [esi], 10048
  00163	ff 75 f4	 push	 DWORD PTR _iSY$1$[ebp]
  00166	ff 75 08	 push	 DWORD PTR _iSX$1$[ebp]
  00169	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0016c	03 c2		 add	 eax, edx
  0016e	50		 push	 eax
  0016f	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00172	03 c2		 add	 eax, edx
  00174	50		 push	 eax
  00175	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00178	50		 push	 eax
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_0FH@PPIJPFML@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use@
  0017e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2938 : 							iChaosCastleIndex+1, gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].AccountID,
; 2939 : 							gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].Name,
; 2940 : 							iSX, iSY);
; 2941 : 
; 2942 : 						this->SendFailMessage(iChaosCastleIndex, this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex);

  00184	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
  00187	83 c4 28	 add	 esp, 40			; 00000028H
  0018a	8b cf		 mov	 ecx, edi
  0018c	ff 36		 push	 DWORD PTR [esi]
  0018e	53		 push	 ebx
  0018f	e8 00 00 00 00	 call	 ?SendFailMessage@CChaosCastle@@QAEXHH@Z ; CChaosCastle::SendFailMessage
  00194	eb 03		 jmp	 SHORT $LN2@CheckUserI
$LN19@CheckUserI:
  00196	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN2@CheckUserI:

; 2908 : 		return;
; 2909 : 
; 2910 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  00199	83 c6 14	 add	 esi, 20			; 00000014H
  0019c	83 6d f8 01	 sub	 DWORD PTR tv871[ebp], 1
  001a0	0f 85 9a fe ff
	ff		 jne	 $LL4@CheckUserI
  001a6	5e		 pop	 esi
$LN3@CheckUserI:
  001a7	5f		 pop	 edi
  001a8	5b		 pop	 ebx

; 2943 : 
; 2944 : 					}
; 2945 : 				}
; 2946 : 			}
; 2947 : 		}
; 2948 : 	}
; 2949 : }

  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c2 04 00	 ret	 4
?CheckUserInDieTile@CChaosCastle@@QAEXH@Z ENDP		; CChaosCastle::CheckUserInDieTile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SendCastleZoneSafetyInfo@CChaosCastle@@QAEXH_N@Z
_TEXT	SEGMENT
_cTEMP_BUF$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_iChaosCastleIndex$ = 8					; size = 4
_bDoSet$ = 12						; size = 1
?SendCastleZoneSafetyInfo@CChaosCastle@@QAEXH_N@Z PROC	; CChaosCastle::SendCastleZoneSafetyInfo, COMDAT
; _this$ = ecx

; 2788 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi

; 2789 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00015	8b 75 08	 mov	 esi, DWORD PTR _iChaosCastleIndex$[ebp]
  00018	8b d9		 mov	 ebx, ecx
  0001a	85 f6		 test	 esi, esi
  0001c	0f 88 cf 00 00
	00		 js	 $LN3@SendCastle
  00022	33 c0		 xor	 eax, eax
  00024	83 fe 06	 cmp	 esi, 6
  00027	0f 9e c0	 setle	 al
  0002a	85 c0		 test	 eax, eax
  0002c	0f 84 bf 00 00
	00		 je	 $LN3@SendCastle

; 2790 : 		return ;
; 2791 : 
; 2792 : 	char cTEMP_BUF[256];
; 2793 : 	PMSG_SETMAPATTR_COUNT * lpMsg = (PMSG_SETMAPATTR_COUNT *)cTEMP_BUF;
; 2794 : 
; 2795 : 	PHeadSetB((LPBYTE)lpMsg, 0x46, sizeof(PMSG_SETMAPATTR_COUNT)+sizeof(PMSG_SETMAPATTR)*6);

  00032	57		 push	 edi
  00033	6a 13		 push	 19			; 00000013H
  00035	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _cTEMP_BUF$[ebp]
  0003b	6a 46		 push	 70			; 00000046H
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 2796 : 	PMSG_SETMAPATTR * lpMsgBody = (PMSG_SETMAPATTR *)&cTEMP_BUF[7];
; 2797 : 	lpMsg->btType = 0;
; 2798 : 	lpMsg->btCount = 1;
; 2799 : 	lpMsg->btMapAttr = 1;
; 2800 : 	(bDoSet)?(lpMsg->btMapSetType=0) :( lpMsg->btMapSetType=1);
; 2801 : 
; 2802 : 	lpMsgBody[0].btX = ::g_btCastleSafetyZoneMapXY[iChaosCastleIndex][0];

  00043	0f b6 04 b5 00
	00 00 00	 movzx	 eax, BYTE PTR ?g_btCastleSafetyZoneMapXY@@3QAY03$$CBEA[esi*4]
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	80 7d 0c 00	 cmp	 BYTE PTR _bDoSet$[ebp], 0

; 2808 : 	{
; 2809 : 		if ( gObj[i].MapNumber == GetMap(iChaosCastleIndex) )

  00052	8b cb		 mov	 ecx, ebx
  00054	88 85 03 ff ff
	ff		 mov	 BYTE PTR _cTEMP_BUF$[ebp+7], al
  0005a	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  0005f	0f b6 04 b5 01
	00 00 00	 movzx	 eax, BYTE PTR ?g_btCastleSafetyZoneMapXY@@3QAY03$$CBEA[esi*4+1]
  00067	0f 94 85 01 ff
	ff ff		 sete	 BYTE PTR _cTEMP_BUF$[ebp+5]
  0006e	88 85 04 ff ff
	ff		 mov	 BYTE PTR _cTEMP_BUF$[ebp+8], al
  00074	0f b6 04 b5 02
	00 00 00	 movzx	 eax, BYTE PTR ?g_btCastleSafetyZoneMapXY@@3QAY03$$CBEA[esi*4+2]
  0007c	88 85 05 ff ff
	ff		 mov	 BYTE PTR _cTEMP_BUF$[ebp+9], al
  00082	0f b6 04 b5 03
	00 00 00	 movzx	 eax, BYTE PTR ?g_btCastleSafetyZoneMapXY@@3QAY03$$CBEA[esi*4+3]
  0008a	56		 push	 esi
  0008b	66 c7 85 ff fe
	ff ff 00 01	 mov	 WORD PTR _cTEMP_BUF$[ebp+3], 256 ; 00000100H
  00094	c6 85 02 ff ff
	ff 01		 mov	 BYTE PTR _cTEMP_BUF$[ebp+6], 1
  0009b	88 85 06 ff ff
	ff		 mov	 BYTE PTR _cTEMP_BUF$[ebp+10], al
  000a1	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap
  000a6	8b d8		 mov	 ebx, eax
  000a8	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  000ad	0f 1f 00	 npad	 3
$LL4@SendCastle:
  000b0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b6	0f b6 8c 32 23
	01 00 00	 movzx	 ecx, BYTE PTR [edx+esi+291]
  000be	3b cb		 cmp	 ecx, ebx
  000c0	75 1f		 jne	 SHORT $LN2@SendCastle

; 2810 : 		{
; 2811 : 			if ( gObj[i].Connected > PLAYER_LOGGED )

  000c2	83 7c 32 04 02	 cmp	 DWORD PTR [edx+esi+4], 2
  000c7	7e 18		 jle	 SHORT $LN2@SendCastle

; 2812 : 			{
; 2813 : 				DataSend(i, (unsigned char *)lpMsg, lpMsg->h.size);

  000c9	0f b6 85 fd fe
	ff ff		 movzx	 eax, BYTE PTR _cTEMP_BUF$[ebp+1]
  000d0	50		 push	 eax
  000d1	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _cTEMP_BUF$[ebp]
  000d7	50		 push	 eax
  000d8	57		 push	 edi
  000d9	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000de	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@SendCastle:

; 2803 : 	lpMsgBody[0].btY = ::g_btCastleSafetyZoneMapXY[iChaosCastleIndex][1];
; 2804 : 	lpMsgBody[1].btX   = ::g_btCastleSafetyZoneMapXY[iChaosCastleIndex][2];
; 2805 : 	lpMsgBody[1].btY   = ::g_btCastleSafetyZoneMapXY[iChaosCastleIndex][3];
; 2806 : 
; 2807 : 	for (int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  000e1	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  000e7	47		 inc	 edi
  000e8	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  000ee	7c c0		 jl	 SHORT $LL4@SendCastle
  000f0	5f		 pop	 edi
$LN3@SendCastle:

; 2814 : 			}
; 2815 : 		}
; 2816 : 	}
; 2817 : }

  000f1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f4	5e		 pop	 esi
  000f5	33 cd		 xor	 ecx, ebp
  000f7	5b		 pop	 ebx
  000f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 08 00	 ret	 8
?SendCastleZoneSafetyInfo@CChaosCastle@@QAEXH_N@Z ENDP	; CChaosCastle::SendCastleZoneSafetyInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?UnSafetyCastleZone@CChaosCastle@@QAEXH@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
tv675 = -12						; size = 4
$T2 = -12						; size = 4
tv677 = -8						; size = 4
$T3 = -8						; size = 4
_MapNumber$1$ = -4					; size = 4
$T4 = 8							; size = 4
_iChaosCastleIndex$ = 8					; size = 4
?UnSafetyCastleZone@CChaosCastle@@QAEXH@Z PROC		; CChaosCastle::UnSafetyCastleZone, COMDAT
; _this$ = ecx

; 2757 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 2758 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _iChaosCastleIndex$[ebp]
  0000a	85 db		 test	 ebx, ebx
  0000c	0f 88 1b 01 00
	00		 js	 $LN9@UnSafetyCa
  00012	33 c0		 xor	 eax, eax
  00014	83 fb 06	 cmp	 ebx, 6
  00017	0f 9e c0	 setle	 al
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 0b 01 00
	00		 je	 $LN9@UnSafetyCa

; 2759 : 		return ;
; 2760 : 
; 2761 : 	int MapNumber = GetMap(iChaosCastleIndex);

  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	53		 push	 ebx
  00025	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap

; 2762 : 
; 2763 : 	for ( int i=g_btCastleSafetyZoneMapXY[iChaosCastleIndex][0] ; i <= g_btCastleSafetyZoneMapXY[iChaosCastleIndex][2] ; i++ )

  0002a	0f b6 34 9d 00
	00 00 00	 movzx	 esi, BYTE PTR ?g_btCastleSafetyZoneMapXY@@3QAY03$$CBEA[ebx*4]
  00032	8b f8		 mov	 edi, eax
  00034	0f b6 04 9d 02
	00 00 00	 movzx	 eax, BYTE PTR ?g_btCastleSafetyZoneMapXY@@3QAY03$$CBEA[ebx*4+2]
  0003c	89 7d fc	 mov	 DWORD PTR _MapNumber$1$[ebp], edi
  0003f	89 45 f8	 mov	 DWORD PTR $T3[ebp], eax
  00042	3b f0		 cmp	 esi, eax
  00044	7f 54		 jg	 SHORT $LN3@UnSafetyCa
  00046	0f b6 14 9d 03
	00 00 00	 movzx	 edx, BYTE PTR ?g_btCastleSafetyZoneMapXY@@3QAY03$$CBEA[ebx*4+3]
  0004e	0f b6 1c 9d 01
	00 00 00	 movzx	 ebx, BYTE PTR ?g_btCastleSafetyZoneMapXY@@3QAY03$$CBEA[ebx*4+1]
  00056	89 55 f4	 mov	 DWORD PTR $T2[ebp], edx
  00059	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@UnSafetyCa:

; 2764 : 	{
; 2765 : 		for(int j=g_btCastleSafetyZoneMapXY[iChaosCastleIndex][1] ; j <= g_btCastleSafetyZoneMapXY[iChaosCastleIndex][3] ; j++ )

  00060	3b da		 cmp	 ebx, edx
  00062	7f 2e		 jg	 SHORT $LN2@UnSafetyCa
  00064	8b cb		 mov	 ecx, ebx
  00066	69 ff 28 38 05
	00		 imul	 edi, edi, 342056
  0006c	2b d3		 sub	 edx, ebx
  0006e	c1 e1 08	 shl	 ecx, 8
  00071	42		 inc	 edx
$LL7@UnSafetyCa:

; 2766 : 		{
; 2767 : 			MapC[MapNumber].m_attrbuf[ j * 256 + i] &= ~1;

  00072	8b 87 10 00 00
	00		 mov	 eax, DWORD PTR ?MapC@@3PAVMapClass@@A[edi+16]
  00078	03 c1		 add	 eax, ecx
  0007a	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  00080	80 24 30 fe	 and	 BYTE PTR [eax+esi], 254	; 000000feH
  00084	83 ea 01	 sub	 edx, 1
  00087	75 e9		 jne	 SHORT $LL7@UnSafetyCa
  00089	8b 55 f4	 mov	 edx, DWORD PTR $T2[ebp]
  0008c	8b 45 f8	 mov	 eax, DWORD PTR $T3[ebp]
  0008f	8b 7d fc	 mov	 edi, DWORD PTR _MapNumber$1$[ebp]
$LN2@UnSafetyCa:

; 2762 : 
; 2763 : 	for ( int i=g_btCastleSafetyZoneMapXY[iChaosCastleIndex][0] ; i <= g_btCastleSafetyZoneMapXY[iChaosCastleIndex][2] ; i++ )

  00092	46		 inc	 esi
  00093	3b f0		 cmp	 esi, eax
  00095	7e c9		 jle	 SHORT $LL4@UnSafetyCa
  00097	8b 5d 08	 mov	 ebx, DWORD PTR _iChaosCastleIndex$[ebp]
$LN3@UnSafetyCa:

; 2768 : 		}
; 2769 : 	}
; 2770 : 
; 2771 : 	for ( int iHOLE_NUM = 0; iHOLE_NUM <2;iHOLE_NUM++)

  0009a	8d 0c dd 02 00
	00 00		 lea	 ecx, DWORD PTR ?g_btCastleCenterHollowZoneMapXY@@3QAY113$$CBEA[ebx*8+2]
  000a1	ba 02 00 00 00	 mov	 edx, 2
  000a6	89 4d f8	 mov	 DWORD PTR tv677[ebp], ecx
  000a9	89 55 f4	 mov	 DWORD PTR tv675[ebp], edx
  000ac	0f 1f 40 00	 npad	 4
$LL10@UnSafetyCa:

; 2772 : 	{
; 2773 : 		for(int i=g_btCastleCenterHollowZoneMapXY[iChaosCastleIndex][iHOLE_NUM][0] ; i<= g_btCastleCenterHollowZoneMapXY[iChaosCastleIndex][iHOLE_NUM][2] ; i++ )

  000b0	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  000b3	0f b6 71 fe	 movzx	 esi, BYTE PTR [ecx-2]
  000b7	89 45 08	 mov	 DWORD PTR $T4[ebp], eax
  000ba	3b f0		 cmp	 esi, eax
  000bc	7f 5c		 jg	 SHORT $LN8@UnSafetyCa

; 2774 : 		{
; 2775 : 			for (int j=g_btCastleCenterHollowZoneMapXY[iChaosCastleIndex][iHOLE_NUM][1] ; j<= g_btCastleCenterHollowZoneMapXY[iChaosCastleIndex][iHOLE_NUM][3] ; j++ )

  000be	8a 41 ff	 mov	 al, BYTE PTR [ecx-1]
  000c1	0f b6 49 01	 movzx	 ecx, BYTE PTR [ecx+1]
  000c5	0f b6 d8	 movzx	 ebx, al
  000c8	8b 45 08	 mov	 eax, DWORD PTR $T4[ebp]
  000cb	89 4d f0	 mov	 DWORD PTR $T1[ebp], ecx
  000ce	66 90		 npad	 2
$LL13@UnSafetyCa:
  000d0	3b d9		 cmp	 ebx, ecx
  000d2	7f 38		 jg	 SHORT $LN11@UnSafetyCa
  000d4	8b d1		 mov	 edx, ecx
  000d6	69 ff 28 38 05
	00		 imul	 edi, edi, 342056
  000dc	8b c3		 mov	 eax, ebx
  000de	2b d3		 sub	 edx, ebx
  000e0	c1 e0 08	 shl	 eax, 8
  000e3	42		 inc	 edx
  000e4	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL16@UnSafetyCa:

; 2776 : 			{
; 2777 : 				MapC[MapNumber].m_attrbuf[ j * 256 + i] |= 8;

  000f0	8b 8f 10 00 00
	00		 mov	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[edi+16]
  000f6	03 c8		 add	 ecx, eax
  000f8	05 00 01 00 00	 add	 eax, 256		; 00000100H
  000fd	80 0c 31 08	 or	 BYTE PTR [ecx+esi], 8
  00101	83 ea 01	 sub	 edx, 1
  00104	75 ea		 jne	 SHORT $LL16@UnSafetyCa
  00106	8b 4d f0	 mov	 ecx, DWORD PTR $T1[ebp]
  00109	8b 45 08	 mov	 eax, DWORD PTR $T4[ebp]
$LN11@UnSafetyCa:

; 2772 : 	{
; 2773 : 		for(int i=g_btCastleCenterHollowZoneMapXY[iChaosCastleIndex][iHOLE_NUM][0] ; i<= g_btCastleCenterHollowZoneMapXY[iChaosCastleIndex][iHOLE_NUM][2] ; i++ )

  0010c	8b 7d fc	 mov	 edi, DWORD PTR _MapNumber$1$[ebp]
  0010f	46		 inc	 esi
  00110	3b f0		 cmp	 esi, eax
  00112	7e bc		 jle	 SHORT $LL13@UnSafetyCa
  00114	8b 4d f8	 mov	 ecx, DWORD PTR tv677[ebp]
  00117	8b 55 f4	 mov	 edx, DWORD PTR tv675[ebp]
$LN8@UnSafetyCa:

; 2768 : 		}
; 2769 : 	}
; 2770 : 
; 2771 : 	for ( int iHOLE_NUM = 0; iHOLE_NUM <2;iHOLE_NUM++)

  0011a	8b 7d fc	 mov	 edi, DWORD PTR _MapNumber$1$[ebp]
  0011d	83 c1 04	 add	 ecx, 4
  00120	83 ea 01	 sub	 edx, 1
  00123	89 4d f8	 mov	 DWORD PTR tv677[ebp], ecx
  00126	89 55 f4	 mov	 DWORD PTR tv675[ebp], edx
  00129	75 85		 jne	 SHORT $LL10@UnSafetyCa
  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
$LN9@UnSafetyCa:
  0012d	5b		 pop	 ebx

; 2778 : 			}
; 2779 : 		}
; 2780 : 	}
; 2781 : }

  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 04 00	 ret	 4
?UnSafetyCastleZone@CChaosCastle@@QAEXH@Z ENDP		; CChaosCastle::UnSafetyCastleZone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SafetyCastleZone@CChaosCastle@@QAEXH@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
tv677 = -12						; size = 4
$T2 = -12						; size = 4
tv679 = -8						; size = 4
$T3 = -8						; size = 4
_MapNumber$1$ = -4					; size = 4
$T4 = 8							; size = 4
_iChaosCastleIndex$ = 8					; size = 4
?SafetyCastleZone@CChaosCastle@@QAEXH@Z PROC		; CChaosCastle::SafetyCastleZone, COMDAT
; _this$ = ecx

; 2726 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 2727 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _iChaosCastleIndex$[ebp]
  0000a	85 db		 test	 ebx, ebx
  0000c	0f 88 1b 01 00
	00		 js	 $LN9@SafetyCast
  00012	33 c0		 xor	 eax, eax
  00014	83 fb 06	 cmp	 ebx, 6
  00017	0f 9e c0	 setle	 al
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 0b 01 00
	00		 je	 $LN9@SafetyCast

; 2728 : 		return ;
; 2729 : 
; 2730 : 	int MapNumber = GetMap(iChaosCastleIndex);

  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	53		 push	 ebx
  00025	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap

; 2731 : 
; 2732 : 	for ( int i=g_btCastleSafetyZoneMapXY[iChaosCastleIndex][0] ; i <= g_btCastleSafetyZoneMapXY[iChaosCastleIndex][2] ; i++ )

  0002a	0f b6 34 9d 00
	00 00 00	 movzx	 esi, BYTE PTR ?g_btCastleSafetyZoneMapXY@@3QAY03$$CBEA[ebx*4]
  00032	8b f8		 mov	 edi, eax
  00034	0f b6 04 9d 02
	00 00 00	 movzx	 eax, BYTE PTR ?g_btCastleSafetyZoneMapXY@@3QAY03$$CBEA[ebx*4+2]
  0003c	89 7d fc	 mov	 DWORD PTR _MapNumber$1$[ebp], edi
  0003f	89 45 f8	 mov	 DWORD PTR $T3[ebp], eax
  00042	3b f0		 cmp	 esi, eax
  00044	7f 54		 jg	 SHORT $LN3@SafetyCast
  00046	0f b6 14 9d 03
	00 00 00	 movzx	 edx, BYTE PTR ?g_btCastleSafetyZoneMapXY@@3QAY03$$CBEA[ebx*4+3]
  0004e	0f b6 1c 9d 01
	00 00 00	 movzx	 ebx, BYTE PTR ?g_btCastleSafetyZoneMapXY@@3QAY03$$CBEA[ebx*4+1]
  00056	89 55 f4	 mov	 DWORD PTR $T2[ebp], edx
  00059	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@SafetyCast:

; 2733 : 	{
; 2734 : 		for(int j=g_btCastleSafetyZoneMapXY[iChaosCastleIndex][1] ; j <= g_btCastleSafetyZoneMapXY[iChaosCastleIndex][3] ; j++ )

  00060	3b da		 cmp	 ebx, edx
  00062	7f 2e		 jg	 SHORT $LN2@SafetyCast
  00064	8b cb		 mov	 ecx, ebx
  00066	69 ff 28 38 05
	00		 imul	 edi, edi, 342056
  0006c	2b d3		 sub	 edx, ebx
  0006e	c1 e1 08	 shl	 ecx, 8
  00071	42		 inc	 edx
$LL7@SafetyCast:

; 2735 : 		{
; 2736 : 			MapC[MapNumber].m_attrbuf[ j * 256 + i] |= 1;

  00072	8b 87 10 00 00
	00		 mov	 eax, DWORD PTR ?MapC@@3PAVMapClass@@A[edi+16]
  00078	03 c1		 add	 eax, ecx
  0007a	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  00080	80 0c 30 01	 or	 BYTE PTR [eax+esi], 1
  00084	83 ea 01	 sub	 edx, 1
  00087	75 e9		 jne	 SHORT $LL7@SafetyCast
  00089	8b 55 f4	 mov	 edx, DWORD PTR $T2[ebp]
  0008c	8b 45 f8	 mov	 eax, DWORD PTR $T3[ebp]
  0008f	8b 7d fc	 mov	 edi, DWORD PTR _MapNumber$1$[ebp]
$LN2@SafetyCast:

; 2731 : 
; 2732 : 	for ( int i=g_btCastleSafetyZoneMapXY[iChaosCastleIndex][0] ; i <= g_btCastleSafetyZoneMapXY[iChaosCastleIndex][2] ; i++ )

  00092	46		 inc	 esi
  00093	3b f0		 cmp	 esi, eax
  00095	7e c9		 jle	 SHORT $LL4@SafetyCast
  00097	8b 5d 08	 mov	 ebx, DWORD PTR _iChaosCastleIndex$[ebp]
$LN3@SafetyCast:

; 2737 : 		}
; 2738 : 	}
; 2739 : 
; 2740 : 	for ( int iHOLE_NUM = 0; iHOLE_NUM <2;iHOLE_NUM++)

  0009a	8d 0c dd 02 00
	00 00		 lea	 ecx, DWORD PTR ?g_btCastleCenterHollowZoneMapXY@@3QAY113$$CBEA[ebx*8+2]
  000a1	ba 02 00 00 00	 mov	 edx, 2
  000a6	89 4d f8	 mov	 DWORD PTR tv679[ebp], ecx
  000a9	89 55 f4	 mov	 DWORD PTR tv677[ebp], edx
  000ac	0f 1f 40 00	 npad	 4
$LL10@SafetyCast:

; 2741 : 	{
; 2742 : 		for(int i=g_btCastleCenterHollowZoneMapXY[iChaosCastleIndex][iHOLE_NUM][0] ; i<= g_btCastleCenterHollowZoneMapXY[iChaosCastleIndex][iHOLE_NUM][2] ; i++ )

  000b0	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  000b3	0f b6 71 fe	 movzx	 esi, BYTE PTR [ecx-2]
  000b7	89 45 08	 mov	 DWORD PTR $T4[ebp], eax
  000ba	3b f0		 cmp	 esi, eax
  000bc	7f 5c		 jg	 SHORT $LN8@SafetyCast

; 2743 : 		{
; 2744 : 			for (int j=g_btCastleCenterHollowZoneMapXY[iChaosCastleIndex][iHOLE_NUM][1] ; j<= g_btCastleCenterHollowZoneMapXY[iChaosCastleIndex][iHOLE_NUM][3] ; j++ )

  000be	8a 41 ff	 mov	 al, BYTE PTR [ecx-1]
  000c1	0f b6 49 01	 movzx	 ecx, BYTE PTR [ecx+1]
  000c5	0f b6 d8	 movzx	 ebx, al
  000c8	8b 45 08	 mov	 eax, DWORD PTR $T4[ebp]
  000cb	89 4d f0	 mov	 DWORD PTR $T1[ebp], ecx
  000ce	66 90		 npad	 2
$LL13@SafetyCast:
  000d0	3b d9		 cmp	 ebx, ecx
  000d2	7f 38		 jg	 SHORT $LN11@SafetyCast
  000d4	8b d1		 mov	 edx, ecx
  000d6	69 ff 28 38 05
	00		 imul	 edi, edi, 342056
  000dc	8b c3		 mov	 eax, ebx
  000de	2b d3		 sub	 edx, ebx
  000e0	c1 e0 08	 shl	 eax, 8
  000e3	42		 inc	 edx
  000e4	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL16@SafetyCast:

; 2745 : 			{
; 2746 : 				MapC[MapNumber].m_attrbuf[ j * 256 + i] |= 8;

  000f0	8b 8f 10 00 00
	00		 mov	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[edi+16]
  000f6	03 c8		 add	 ecx, eax
  000f8	05 00 01 00 00	 add	 eax, 256		; 00000100H
  000fd	80 0c 31 08	 or	 BYTE PTR [ecx+esi], 8
  00101	83 ea 01	 sub	 edx, 1
  00104	75 ea		 jne	 SHORT $LL16@SafetyCast
  00106	8b 4d f0	 mov	 ecx, DWORD PTR $T1[ebp]
  00109	8b 45 08	 mov	 eax, DWORD PTR $T4[ebp]
$LN11@SafetyCast:

; 2741 : 	{
; 2742 : 		for(int i=g_btCastleCenterHollowZoneMapXY[iChaosCastleIndex][iHOLE_NUM][0] ; i<= g_btCastleCenterHollowZoneMapXY[iChaosCastleIndex][iHOLE_NUM][2] ; i++ )

  0010c	8b 7d fc	 mov	 edi, DWORD PTR _MapNumber$1$[ebp]
  0010f	46		 inc	 esi
  00110	3b f0		 cmp	 esi, eax
  00112	7e bc		 jle	 SHORT $LL13@SafetyCast
  00114	8b 4d f8	 mov	 ecx, DWORD PTR tv679[ebp]
  00117	8b 55 f4	 mov	 edx, DWORD PTR tv677[ebp]
$LN8@SafetyCast:

; 2737 : 		}
; 2738 : 	}
; 2739 : 
; 2740 : 	for ( int iHOLE_NUM = 0; iHOLE_NUM <2;iHOLE_NUM++)

  0011a	8b 7d fc	 mov	 edi, DWORD PTR _MapNumber$1$[ebp]
  0011d	83 c1 04	 add	 ecx, 4
  00120	83 ea 01	 sub	 edx, 1
  00123	89 4d f8	 mov	 DWORD PTR tv679[ebp], ecx
  00126	89 55 f4	 mov	 DWORD PTR tv677[ebp], edx
  00129	75 85		 jne	 SHORT $LL10@SafetyCast
  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
$LN9@SafetyCast:
  0012d	5b		 pop	 ebx

; 2747 : 			}
; 2748 : 		}
; 2749 : 	}
; 2750 : }

  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 04 00	 ret	 4
?SafetyCastleZone@CChaosCastle@@QAEXH@Z ENDP		; CChaosCastle::SafetyCastleZone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?CalDistance@CChaosCastle@@QAEHHHHH@Z
_TEXT	SEGMENT
_iX1$ = 8						; size = 4
_iY1$ = 12						; size = 4
_iX2$ = 16						; size = 4
_iY2$ = 20						; size = 4
?CalDistance@CChaosCastle@@QAEHHHHH@Z PROC		; CChaosCastle::CalDistance, COMDAT
; _this$ = ecx

; 2689 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 2690 : 	if ( iX1 == iX2 && iY1 == iY2 )

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _iX1$[ebp]
  00009	8b 55 14	 mov	 edx, DWORD PTR _iY2$[ebp]
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _iY1$[ebp]
  0000f	3b 4d 10	 cmp	 ecx, DWORD PTR _iX2$[ebp]
  00012	75 0c		 jne	 SHORT $LN2@CalDistanc
  00014	3b c2		 cmp	 eax, edx
  00016	75 08		 jne	 SHORT $LN2@CalDistanc

; 2691 : 	{
; 2692 : 		return 0;

  00018	33 c0		 xor	 eax, eax

; 2699 : }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 10 00	 ret	 16			; 00000010H
$LN2@CalDistanc:

; 2693 : 	}
; 2694 : 
; 2695 : 	float fTX = (float)(iX1 - iX2);

  00020	2b 4d 10	 sub	 ecx, DWORD PTR _iX2$[ebp]

; 2696 : 	float fTY = (float)(iY1 - iY2);

  00023	2b c2		 sub	 eax, edx
  00025	66 0f 6e c9	 movd	 xmm1, ecx
  00029	66 0f 6e c0	 movd	 xmm0, eax
  0002d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00030	0f 5b c9	 cvtdq2ps xmm1, xmm1

; 2698 : 	return (int)sqrt( (fTX * fTX) + (fTY * fTY) );

  00033	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00037	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0003b	f3 0f 58 c1	 addss	 xmm0, xmm1
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 746  :         return (float)sqrt(_X);

  0003f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00042	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  00047	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 2698 : 	return (int)sqrt( (fTX * fTX) + (fTY * fTY) );

  0004b	f3 0f 2c c0	 cvttss2si eax, xmm0

; 2699 : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 10 00	 ret	 16			; 00000010H
?CalDistance@CChaosCastle@@QAEHHHHH@Z ENDP		; CChaosCastle::CalDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?BlowObjsToPoint@CChaosCastle@@QAEHHHHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_iMapNumber$ = 12					; size = 4
_iX$ = 16						; size = 4
_iY$ = 20						; size = 4
?BlowObjsToPoint@CChaosCastle@@QAEHHHHH@Z PROC		; CChaosCastle::BlowObjsToPoint, COMDAT
; _this$ = ecx

; 2681 : 	return TRUE;

  00000	b8 01 00 00 00	 mov	 eax, 1

; 2682 : }

  00005	c2 10 00	 ret	 16			; 00000010H
?BlowObjsToPoint@CChaosCastle@@QAEHHHHH@Z ENDP		; CChaosCastle::BlowObjsToPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?BlowObjsFromPoint@CChaosCastle@@QAEHHHAAH0@Z
_TEXT	SEGMENT
_lpObj$1$ = -24						; size = 4
_iOBJ_DIST$1$ = -20					; size = 4
_iBLOWOUT_COUNT$1$ = -16				; size = 4
_this$1$ = -12						; size = 4
_iSIGN_Y$1$ = -8					; size = 4
_iSIGN_X$1$ = -4					; size = 4
_iIndex$ = 8						; size = 4
_iBLOW_MIN$1$ = 12					; size = 4
_iUY$1$ = 12						; size = 4
_iMapNumber$ = 12					; size = 4
_iX$ = 16						; size = 4
_iY$ = 20						; size = 4
?BlowObjsFromPoint@CChaosCastle@@QAEHHHAAH0@Z PROC	; CChaosCastle::BlowObjsFromPoint, COMDAT
; _this$ = ecx

; 2573 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx

; 2574 : 	if ( !gObjIsConnected(iIndex))

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _iIndex$[ebp]
  0000a	53		 push	 ebx
  0000b	89 4d f4	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000e	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00013	83 c4 04	 add	 esp, 4
  00016	85 c0		 test	 eax, eax
  00018	75 07		 jne	 SHORT $LN5@BlowObjsFr
  0001a	5b		 pop	 ebx

; 2673 : }

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 10 00	 ret	 16			; 00000010H
$LN5@BlowObjsFr:
  00021	56		 push	 esi

; 2575 : 		return FALSE;
; 2576 : 
; 2577 : 	if ( !CHECK_LIMIT(iX, 256) || !CHECK_LIMIT(iY, 256))

  00022	8b 75 10	 mov	 esi, DWORD PTR _iX$[ebp]
  00025	8b 36		 mov	 esi, DWORD PTR [esi]
  00027	85 f6		 test	 esi, esi
  00029	0f 88 68 02 00
	00		 js	 $LN7@BlowObjsFr
  0002f	33 c0		 xor	 eax, eax
  00031	81 fe ff 00 00
	00		 cmp	 esi, 255		; 000000ffH
  00037	0f 9e c0	 setle	 al
  0003a	85 c0		 test	 eax, eax
  0003c	0f 84 55 02 00
	00		 je	 $LN7@BlowObjsFr
  00042	8b 55 14	 mov	 edx, DWORD PTR _iY$[ebp]
  00045	8b 12		 mov	 edx, DWORD PTR [edx]
  00047	85 d2		 test	 edx, edx
  00049	0f 88 48 02 00
	00		 js	 $LN7@BlowObjsFr
  0004f	33 c0		 xor	 eax, eax
  00051	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  00057	0f 9e c0	 setle	 al
  0005a	85 c0		 test	 eax, eax
  0005c	0f 84 35 02 00
	00		 je	 $LN7@BlowObjsFr

; 2579 : 
; 2580 : 	LPOBJ lpObj = &gObj[iIndex];

  00062	69 cb 40 27 00
	00		 imul	 ecx, ebx, 10048
  00068	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006e	89 4d e8	 mov	 DWORD PTR _lpObj$1$[ebp], ecx

; 2581 : 
; 2582 : 	if ( lpObj->DieRegen )

  00071	80 b9 8a 05 00
	00 00		 cmp	 BYTE PTR [ecx+1418], 0
  00078	0f 85 19 02 00
	00		 jne	 $LN7@BlowObjsFr

; 2583 : 		return FALSE;
; 2584 : 
; 2585 : 	if ( lpObj->Teleport )

  0007e	80 b9 88 05 00
	00 00		 cmp	 BYTE PTR [ecx+1416], 0
  00085	0f 85 0c 02 00
	00		 jne	 $LN7@BlowObjsFr

; 2586 : 		return FALSE;
; 2587 : 
; 2588 : 	if ( lpObj->MapNumber != iMapNumber )

  0008b	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  00092	3b 45 0c	 cmp	 eax, DWORD PTR _iMapNumber$[ebp]
  00095	0f 85 fc 01 00
	00		 jne	 $LN7@BlowObjsFr

; 2589 : 		return FALSE;
; 2590 : 
; 2591 : 	int iOBJ_DIST = this->CalDistance(lpObj->X, lpObj->Y, iX, iY);

  0009b	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  000a2	57		 push	 edi
  000a3	0f b6 b9 20 01
	00 00		 movzx	 edi, BYTE PTR [ecx+288]
  000aa	8b 4d f4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000ad	52		 push	 edx
  000ae	56		 push	 esi
  000af	50		 push	 eax
  000b0	57		 push	 edi
  000b1	89 45 0c	 mov	 DWORD PTR _iUY$1$[ebp], eax
  000b4	e8 00 00 00 00	 call	 ?CalDistance@CChaosCastle@@QAEHHHHH@Z ; CChaosCastle::CalDistance
  000b9	8b d8		 mov	 ebx, eax
  000bb	89 5d ec	 mov	 DWORD PTR _iOBJ_DIST$1$[ebp], ebx

; 2592 : 
; 2593 : 	if ( !CHECK_LIMIT(iOBJ_DIST, 4))

  000be	85 db		 test	 ebx, ebx
  000c0	0f 88 c6 01 00
	00		 js	 $LN47@BlowObjsFr
  000c6	33 c9		 xor	 ecx, ecx
  000c8	83 fb 03	 cmp	 ebx, 3
  000cb	0f 9e c1	 setle	 cl
  000ce	85 c9		 test	 ecx, ecx
  000d0	0f 84 b6 01 00
	00		 je	 $LN47@BlowObjsFr

; 2595 : 
; 2596 : 	int iSIGN_X = 1;
; 2597 : 	int iSIGN_Y = 1;
; 2598 : 	int iUX = lpObj->X;
; 2599 : 	int iUY = lpObj->Y;
; 2600 : 
; 2601 : 	if ( iUX > iX )

  000d6	3b fe		 cmp	 edi, esi
  000d8	7e 09		 jle	 SHORT $LN56@BlowObjsFr

; 2602 : 		iSIGN_X = 1;

  000da	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _iSIGN_X$1$[ebp], 1
  000e1	eb 27		 jmp	 SHORT $LN38@BlowObjsFr
$LN56@BlowObjsFr:

; 2603 : 	else if ( iUX < iX )

  000e3	7d 09		 jge	 SHORT $LN14@BlowObjsFr

; 2604 : 		iSIGN_X = -1;

  000e5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _iSIGN_X$1$[ebp], -1

; 2605 : 	else

  000ec	eb 1c		 jmp	 SHORT $LN38@BlowObjsFr
$LN14@BlowObjsFr:

; 2606 : 	{
; 2607 : 		int iRND = rand() % 2;

  000ee	e8 00 00 00 00	 call	 _rand
  000f3	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000f8	79 05		 jns	 SHORT $LN50@BlowObjsFr
  000fa	48		 dec	 eax
  000fb	83 c8 fe	 or	 eax, -2			; fffffffeH
  000fe	40		 inc	 eax
$LN50@BlowObjsFr:

; 2608 : 		(!iRND)?iSIGN_X = 1:iSIGN_X = -1;

  000ff	f7 d8		 neg	 eax
  00101	1b c0		 sbb	 eax, eax
  00103	83 e0 fe	 and	 eax, -2			; fffffffeH
  00106	40		 inc	 eax
  00107	89 45 fc	 mov	 DWORD PTR _iSIGN_X$1$[ebp], eax
$LN38@BlowObjsFr:

; 2609 : 	}
; 2610 : 		
; 2611 : 	if ( iUY > iY )

  0010a	8b 45 14	 mov	 eax, DWORD PTR _iY$[ebp]
  0010d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010f	8b 45 0c	 mov	 eax, DWORD PTR _iUY$1$[ebp]
  00112	3b c1		 cmp	 eax, ecx
  00114	7e 09		 jle	 SHORT $LN57@BlowObjsFr

; 2612 : 		iSIGN_Y = 1;

  00116	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _iSIGN_Y$1$[ebp], 1
  0011d	eb 27		 jmp	 SHORT $LN40@BlowObjsFr
$LN57@BlowObjsFr:

; 2613 : 	else if ( iUY < iY )

  0011f	7d 09		 jge	 SHORT $LN18@BlowObjsFr

; 2614 : 		iSIGN_Y = -1;

  00121	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _iSIGN_Y$1$[ebp], -1

; 2615 : 	else

  00128	eb 1c		 jmp	 SHORT $LN40@BlowObjsFr
$LN18@BlowObjsFr:

; 2616 : 	{
; 2617 : 		int iRND = rand() % 2;

  0012a	e8 00 00 00 00	 call	 _rand
  0012f	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00134	79 05		 jns	 SHORT $LN51@BlowObjsFr
  00136	48		 dec	 eax
  00137	83 c8 fe	 or	 eax, -2			; fffffffeH
  0013a	40		 inc	 eax
$LN51@BlowObjsFr:

; 2618 : 		(!iRND)?iSIGN_Y = 1:iSIGN_Y = -1;

  0013b	f7 d8		 neg	 eax
  0013d	1b c0		 sbb	 eax, eax
  0013f	83 e0 fe	 and	 eax, -2			; fffffffeH
  00142	40		 inc	 eax
  00143	89 45 f8	 mov	 DWORD PTR _iSIGN_Y$1$[ebp], eax
$LN40@BlowObjsFr:

; 2619 : 	}
; 2620 : 
; 2621 : 	BOOL bSuccessBlowOut = FALSE;
; 2622 : 
; 2623 : 	for ( int iBLOWOUT_COUNT = 0;iBLOWOUT_COUNT < 5 ;iBLOWOUT_COUNT++)

  00146	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _iBLOWOUT_COUNT$1$[ebp], 0
  0014d	0f 1f 00	 npad	 3
$LL4@BlowObjsFr:

; 2624 : 	{
; 2625 : 		int iBLOW_MIN = g_iChaosCastle_BlowOutDistance[iOBJ_DIST][0];

  00150	8b 0c dd 00 00
	00 00		 mov	 ecx, DWORD PTR ?g_iChaosCastle_BlowOutDistance@@3PAY01HA[ebx*8]

; 2626 : 		int iBLOW_MAX = g_iChaosCastle_BlowOutDistance[iOBJ_DIST][1];

  00157	8b 1c dd 04 00
	00 00		 mov	 ebx, DWORD PTR ?g_iChaosCastle_BlowOutDistance@@3PAY01HA[ebx*8+4]

; 2627 : 		int iBLOW_X = rand() % (iBLOW_MAX - iBLOW_MIN + 1) + iBLOW_MIN;

  0015e	8b fb		 mov	 edi, ebx
  00160	2b f9		 sub	 edi, ecx
  00162	89 4d 0c	 mov	 DWORD PTR _iBLOW_MIN$1$[ebp], ecx
  00165	47		 inc	 edi
  00166	e8 00 00 00 00	 call	 _rand
  0016b	99		 cdq
  0016c	f7 ff		 idiv	 edi
  0016e	8b 75 0c	 mov	 esi, DWORD PTR _iBLOW_MIN$1$[ebp]
  00171	03 f2		 add	 esi, edx

; 2628 : 		int iBLOW_Y = rand() % (iBLOW_MAX - iBLOW_MIN + 1) + iBLOW_MIN;

  00173	e8 00 00 00 00	 call	 _rand
  00178	99		 cdq
  00179	f7 ff		 idiv	 edi
  0017b	8b fa		 mov	 edi, edx
  0017d	03 7d 0c	 add	 edi, DWORD PTR _iBLOW_MIN$1$[ebp]

; 2629 : 		int iRND = rand() % 2;

  00180	e8 00 00 00 00	 call	 _rand
  00185	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0018a	79 05		 jns	 SHORT $LN52@BlowObjsFr
  0018c	48		 dec	 eax
  0018d	83 c8 fe	 or	 eax, -2			; fffffffeH
  00190	40		 inc	 eax
$LN52@BlowObjsFr:

; 2630 : 
; 2631 : 		if ( iRND )

  00191	74 23		 je	 SHORT $LN20@BlowObjsFr

; 2632 : 		{
; 2633 : 			if ( iBLOW_X >= iBLOW_MAX )

  00193	3b f3		 cmp	 esi, ebx
  00195	7c 43		 jl	 SHORT $LN25@BlowObjsFr

; 2634 : 			{
; 2635 : 				iBLOW_X = iBLOW_MAX;

  00197	8b f3		 mov	 esi, ebx

; 2636 : 				iBLOW_Y = iBLOW_MIN + (rand() % 2 -1);

  00199	e8 00 00 00 00	 call	 _rand
  0019e	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  001a3	79 05		 jns	 SHORT $LN53@BlowObjsFr
  001a5	48		 dec	 eax
  001a6	83 c8 fe	 or	 eax, -2			; fffffffeH
  001a9	40		 inc	 eax
$LN53@BlowObjsFr:
  001aa	8b 7d 0c	 mov	 edi, DWORD PTR _iBLOW_MIN$1$[ebp]
  001ad	4f		 dec	 edi
  001ae	03 f8		 add	 edi, eax

; 2637 : 
; 2638 : 				if ( iBLOW_Y < 0 )

  001b0	79 28		 jns	 SHORT $LN25@BlowObjsFr

; 2639 : 					iBLOW_Y = 0;

  001b2	33 ff		 xor	 edi, edi

; 2640 : 			}
; 2641 : 		}

  001b4	eb 24		 jmp	 SHORT $LN25@BlowObjsFr
$LN20@BlowObjsFr:

; 2642 : 		else if ( iBLOW_Y >= iBLOW_MAX )

  001b6	3b fb		 cmp	 edi, ebx
  001b8	7c 20		 jl	 SHORT $LN25@BlowObjsFr

; 2643 : 		{
; 2644 : 			iBLOW_Y = iBLOW_MAX;

  001ba	8b fb		 mov	 edi, ebx

; 2645 : 			iBLOW_X = iBLOW_MIN + (rand() % 2 -1);

  001bc	e8 00 00 00 00	 call	 _rand
  001c1	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  001c6	79 05		 jns	 SHORT $LN54@BlowObjsFr
  001c8	48		 dec	 eax
  001c9	83 c8 fe	 or	 eax, -2			; fffffffeH
  001cc	40		 inc	 eax
$LN54@BlowObjsFr:
  001cd	8b 75 0c	 mov	 esi, DWORD PTR _iBLOW_MIN$1$[ebp]
  001d0	4e		 dec	 esi
  001d1	03 f0		 add	 esi, eax

; 2646 : 
; 2647 : 			if ( iBLOW_X < 0 )

  001d3	33 c0		 xor	 eax, eax
  001d5	85 f6		 test	 esi, esi
  001d7	0f 48 f0	 cmovs	 esi, eax
$LN25@BlowObjsFr:

; 2648 : 				iBLOW_X = 0;
; 2649 : 		}
; 2650 : 
; 2651 : 		int iTX = lpObj->X  + iBLOW_X * iSIGN_X;

  001da	0f af 75 fc	 imul	 esi, DWORD PTR _iSIGN_X$1$[ebp]

; 2652 : 		int iTY = lpObj->Y  + iBLOW_Y * iSIGN_Y;

  001de	0f af 7d f8	 imul	 edi, DWORD PTR _iSIGN_Y$1$[ebp]
  001e2	8b 5d e8	 mov	 ebx, DWORD PTR _lpObj$1$[ebp]

; 2653 : 
; 2654 : 		if ( iTX < 0 ) iTX = 0;
; 2655 : 		if ( iTY < 0 ) iTY = 0;
; 2656 : 		if ( iTX > 255 ) iTX = 255;
; 2657 : 		if ( iTY > 255 ) iTY = 255;
; 2658 : 
; 2659 : 		bSuccessBlowOut = this->ObjSetPosition(iIndex, iTX, iTY);

  001e5	8b 4d f4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001e8	0f b6 83 20 01
	00 00		 movzx	 eax, BYTE PTR [ebx+288]
  001ef	03 f0		 add	 esi, eax
  001f1	0f b6 83 21 01
	00 00		 movzx	 eax, BYTE PTR [ebx+289]
  001f8	03 f8		 add	 edi, eax
  001fa	33 c0		 xor	 eax, eax
  001fc	85 f6		 test	 esi, esi
  001fe	0f 48 f0	 cmovs	 esi, eax
  00201	85 ff		 test	 edi, edi
  00203	0f 48 f8	 cmovs	 edi, eax
  00206	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0020b	81 fe ff 00 00
	00		 cmp	 esi, 255		; 000000ffH
  00211	0f 4f f0	 cmovg	 esi, eax
  00214	3b f8		 cmp	 edi, eax
  00216	0f 4f f8	 cmovg	 edi, eax
  00219	57		 push	 edi
  0021a	56		 push	 esi
  0021b	ff 75 08	 push	 DWORD PTR _iIndex$[ebp]
  0021e	e8 00 00 00 00	 call	 ?ObjSetPosition@CChaosCastle@@QAEHHHH@Z ; CChaosCastle::ObjSetPosition

; 2660 : 		
; 2661 : 		if ( bSuccessBlowOut )

  00223	85 c0		 test	 eax, eax
  00225	75 21		 jne	 SHORT $LN43@BlowObjsFr

; 2619 : 	}
; 2620 : 
; 2621 : 	BOOL bSuccessBlowOut = FALSE;
; 2622 : 
; 2623 : 	for ( int iBLOWOUT_COUNT = 0;iBLOWOUT_COUNT < 5 ;iBLOWOUT_COUNT++)

  00227	8b 45 f0	 mov	 eax, DWORD PTR _iBLOWOUT_COUNT$1$[ebp]
  0022a	8b 5d ec	 mov	 ebx, DWORD PTR _iOBJ_DIST$1$[ebp]
  0022d	40		 inc	 eax
  0022e	89 45 f0	 mov	 DWORD PTR _iBLOWOUT_COUNT$1$[ebp], eax
  00231	83 f8 05	 cmp	 eax, 5
  00234	0f 8c 16 ff ff
	ff		 jl	 $LL4@BlowObjsFr

; 2668 : 			break;
; 2669 : 		}
; 2670 : 	}
; 2671 : 
; 2672 : 	return TRUE;

  0023a	5f		 pop	 edi
  0023b	5e		 pop	 esi
  0023c	b8 01 00 00 00	 mov	 eax, 1
  00241	5b		 pop	 ebx

; 2673 : }

  00242	8b e5		 mov	 esp, ebp
  00244	5d		 pop	 ebp
  00245	c2 10 00	 ret	 16			; 00000010H
$LN43@BlowObjsFr:

; 2662 : 		{
; 2663 : 			lpObj->m_iChaosCastleBlowTime = GetTickCount();

  00248	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0024e	89 83 40 12 00
	00		 mov	 DWORD PTR [ebx+4672], eax

; 2664 : 			iX = iTX;

  00254	8b 45 10	 mov	 eax, DWORD PTR _iX$[ebp]
  00257	89 30		 mov	 DWORD PTR [eax], esi

; 2665 : 			iY = iTY;

  00259	8b 45 14	 mov	 eax, DWORD PTR _iY$[ebp]
  0025c	89 38		 mov	 DWORD PTR [eax], edi

; 2666 : 
; 2667 : 			this->GiveUserDamage(lpObj->m_Index, g_iChaosCastle_BlowOutDamage[iOBJ_DIST % 4]);

  0025e	8b 45 ec	 mov	 eax, DWORD PTR _iOBJ_DIST$1$[ebp]
  00261	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00266	79 05		 jns	 SHORT $LN55@BlowObjsFr
  00268	48		 dec	 eax
  00269	83 c8 fc	 or	 eax, -4			; fffffffcH
  0026c	40		 inc	 eax
$LN55@BlowObjsFr:
  0026d	ff 34 85 00 00
	00 00		 push	 DWORD PTR ?g_iChaosCastle_BlowOutDamage@@3PAHA[eax*4]
  00274	8b 4d f4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00277	ff 33		 push	 DWORD PTR [ebx]
  00279	e8 00 00 00 00	 call	 ?GiveUserDamage@CChaosCastle@@QAEXHH@Z ; CChaosCastle::GiveUserDamage
  0027e	5f		 pop	 edi
  0027f	5e		 pop	 esi

; 2668 : 			break;
; 2669 : 		}
; 2670 : 	}
; 2671 : 
; 2672 : 	return TRUE;

  00280	b8 01 00 00 00	 mov	 eax, 1
  00285	5b		 pop	 ebx

; 2673 : }

  00286	8b e5		 mov	 esp, ebp
  00288	5d		 pop	 ebp
  00289	c2 10 00	 ret	 16			; 00000010H
$LN47@BlowObjsFr:
  0028c	5f		 pop	 edi
  0028d	5e		 pop	 esi

; 2594 : 		return FALSE;

  0028e	33 c0		 xor	 eax, eax
  00290	5b		 pop	 ebx

; 2673 : }

  00291	8b e5		 mov	 esp, ebp
  00293	5d		 pop	 ebp
  00294	c2 10 00	 ret	 16			; 00000010H
$LN7@BlowObjsFr:
  00297	5e		 pop	 esi

; 2578 : 		return FALSE;

  00298	33 c0		 xor	 eax, eax
  0029a	5b		 pop	 ebx

; 2673 : }

  0029b	8b e5		 mov	 esp, ebp
  0029d	5d		 pop	 ebp
  0029e	c2 10 00	 ret	 16			; 00000010H
?BlowObjsFromPoint@CChaosCastle@@QAEHHHAAH0@Z ENDP	; CChaosCastle::BlowObjsFromPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SearchNBlowObjs@CChaosCastle@@QAEXHHH@Z
_TEXT	SEGMENT
tv347 = -28						; size = 4
_iMAX_Y$1$ = -24					; size = 4
_iMIN_Y$3$ = -20					; size = 4
_iMAX_X$1$ = -16					; size = 4
_iMIN_X$3$ = -12					; size = 4
_iCastleIndex$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
tv348 = 8						; size = 4
_iMapNumber$ = 8					; size = 4
_iX$ = 12						; size = 4
_iY$ = 16						; size = 4
?SearchNBlowObjs@CChaosCastle@@QAEXHHH@Z PROC		; CChaosCastle::SearchNBlowObjs, COMDAT
; _this$ = ecx

; 2522 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx

; 2523 : 	if ( !CC_MAP_RANGE(iMapNumber))

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _iMapNumber$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi
  00010	83 fb 35	 cmp	 ebx, 53			; 00000035H
  00013	74 19		 je	 SHORT $LN29@SearchNBlo
  00015	83 fb 12	 cmp	 ebx, 18			; 00000012H
  00018	0f 8c 7f 01 00
	00		 jl	 $LN7@SearchNBlo
  0001e	33 c0		 xor	 eax, eax
  00020	83 fb 17	 cmp	 ebx, 23			; 00000017H
  00023	0f 9e c0	 setle	 al
  00026	85 c0		 test	 eax, eax
  00028	0f 84 6f 01 00
	00		 je	 $LN7@SearchNBlo
$LN29@SearchNBlo:

; 2524 : 		return;
; 2525 : 
; 2526 : 	if ( !CHECK_LIMIT(iX, 256) || !CHECK_LIMIT(iY, 256))

  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _iX$[ebp]
  00031	85 c9		 test	 ecx, ecx
  00033	0f 88 64 01 00
	00		 js	 $LN7@SearchNBlo
  00039	33 c0		 xor	 eax, eax
  0003b	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  00041	0f 9e c0	 setle	 al
  00044	85 c0		 test	 eax, eax
  00046	0f 84 51 01 00
	00		 je	 $LN7@SearchNBlo
  0004c	8b 55 10	 mov	 edx, DWORD PTR _iY$[ebp]
  0004f	85 d2		 test	 edx, edx
  00051	0f 88 46 01 00
	00		 js	 $LN7@SearchNBlo
  00057	33 c0		 xor	 eax, eax
  00059	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  0005f	0f 9e c0	 setle	 al
  00062	85 c0		 test	 eax, eax
  00064	0f 84 33 01 00
	00		 je	 $LN7@SearchNBlo

; 2527 : 		return;
; 2528 : 
; 2529 : 	int iMIN_X = iX-3;

  0006a	8d 41 fd	 lea	 eax, DWORD PTR [ecx-3]

; 2530 : 	int iMAX_X = iX+3;

  0006d	83 c1 03	 add	 ecx, 3
  00070	89 4d f0	 mov	 DWORD PTR _iMAX_X$1$[ebp], ecx

; 2531 : 	int iMIN_Y = iY-3;

  00073	8d 4a fd	 lea	 ecx, DWORD PTR [edx-3]

; 2532 : 	int iMAX_Y = iY+3;

  00076	83 c2 03	 add	 edx, 3
  00079	89 55 e8	 mov	 DWORD PTR _iMAX_Y$1$[ebp], edx

; 2533 : 
; 2534 : 	if ( iMIN_X < 0 ) iMIN_X = 0;

  0007c	33 d2		 xor	 edx, edx
  0007e	85 c0		 test	 eax, eax
  00080	56		 push	 esi
  00081	0f 48 c2	 cmovs	 eax, edx

; 2535 : 	if ( iMIN_Y < 0 ) iMIN_Y = 0;

  00084	85 c9		 test	 ecx, ecx

; 2540 : 	{
; 2541 : 		int iCastleIndex = GetFloor(iMapNumber);

  00086	53		 push	 ebx
  00087	0f 48 ca	 cmovs	 ecx, edx
  0008a	ba ff 00 00 00	 mov	 edx, 255		; 000000ffH
  0008f	3b c2		 cmp	 eax, edx
  00091	0f 4f c2	 cmovg	 eax, edx
  00094	3b ca		 cmp	 ecx, edx
  00096	89 45 f4	 mov	 DWORD PTR _iMIN_X$3$[ebp], eax
  00099	0f 4f ca	 cmovg	 ecx, edx
  0009c	89 4d ec	 mov	 DWORD PTR _iMIN_Y$3$[ebp], ecx
  0009f	8b cf		 mov	 ecx, edi
  000a1	e8 00 00 00 00	 call	 ?GetFloor@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetFloor
  000a6	89 45 f8	 mov	 DWORD PTR _iCastleIndex$1$[ebp], eax
  000a9	69 c0 68 08 00
	00		 imul	 eax, eax, 2152
  000af	33 f6		 xor	 esi, esi
  000b1	89 45 08	 mov	 DWORD PTR tv348[ebp], eax
$LL4@SearchNBlo:

; 2542 : 		if ( this->m_stChaosCastleData[iCastleIndex].m_UserData[i].m_iIndex == -1 )

  000b4	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  000b7	8b 7c 39 68	 mov	 edi, DWORD PTR [ecx+edi+104]
  000bb	83 ff ff	 cmp	 edi, -1
  000be	0f 84 be 00 00
	00		 je	 $LN37@SearchNBlo

; 2543 : 			continue;
; 2544 : 
; 2545 : 		int iIndex = this->m_stChaosCastleData[iCastleIndex].m_UserData[i].m_iIndex;
; 2546 : 
; 2547 : 		if ( gObj[iIndex].MapNumber == iMapNumber && gObj[iIndex].Connected > PLAYER_LOGGED )

  000c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c9	69 d7 40 27 00
	00		 imul	 edx, edi, 10048
  000cf	89 55 e4	 mov	 DWORD PTR tv347[ebp], edx
  000d2	0f b6 8c 02 23
	01 00 00	 movzx	 ecx, BYTE PTR [edx+eax+291]
  000da	3b cb		 cmp	 ecx, ebx
  000dc	0f 85 a5 00 00
	00		 jne	 $LN38@SearchNBlo
  000e2	83 7c 02 04 02	 cmp	 DWORD PTR [edx+eax+4], 2
  000e7	0f 8e 9a 00 00
	00		 jle	 $LN38@SearchNBlo

; 2548 : 		{
; 2549 : 			if ( gObj[iIndex].X >= iMIN_X && gObj[iIndex].X <= iMAX_X &&
; 2550 : 				 gObj[iIndex].Y >= iMIN_Y && gObj[iIndex].Y <= iMAX_Y )

  000ed	0f b6 8c 02 20
	01 00 00	 movzx	 ecx, BYTE PTR [edx+eax+288]
  000f5	3b 4d f4	 cmp	 ecx, DWORD PTR _iMIN_X$3$[ebp]
  000f8	0f 8c 89 00 00
	00		 jl	 $LN38@SearchNBlo
  000fe	3b 4d f0	 cmp	 ecx, DWORD PTR _iMAX_X$1$[ebp]
  00101	0f 8f 80 00 00
	00		 jg	 $LN38@SearchNBlo
  00107	0f b6 8c 02 21
	01 00 00	 movzx	 ecx, BYTE PTR [edx+eax+289]
  0010f	3b 4d ec	 cmp	 ecx, DWORD PTR _iMIN_Y$3$[ebp]
  00112	7c 73		 jl	 SHORT $LN38@SearchNBlo
  00114	3b 4d e8	 cmp	 ecx, DWORD PTR _iMAX_Y$1$[ebp]
  00117	7f 6e		 jg	 SHORT $LN38@SearchNBlo

; 2551 : 			{
; 2552 : 				this->BlowObjsFromPoint(gObj[iIndex].m_Index, iMapNumber, iX, iY);

  00119	8d 4d 10	 lea	 ecx, DWORD PTR _iY$[ebp]
  0011c	51		 push	 ecx
  0011d	8d 4d 0c	 lea	 ecx, DWORD PTR _iX$[ebp]
  00120	51		 push	 ecx
  00121	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00124	53		 push	 ebx
  00125	ff 34 02	 push	 DWORD PTR [edx+eax]
  00128	e8 00 00 00 00	 call	 ?BlowObjsFromPoint@CChaosCastle@@QAEHHHAAH0@Z ; CChaosCastle::BlowObjsFromPoint

; 2553 : 
; 2554 : 				BYTE btMapAttr = MapC[iMapNumber].m_attrbuf[iY * 256 + iX]&0x08;

  0012d	8b 4d 10	 mov	 ecx, DWORD PTR _iY$[ebp]
  00130	69 c3 28 38 05
	00		 imul	 eax, ebx, 342056
  00136	c1 e1 08	 shl	 ecx, 8
  00139	03 88 10 00 00
	00		 add	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[eax+16]
  0013f	8b 45 0c	 mov	 eax, DWORD PTR _iX$[ebp]
  00142	f6 04 01 08	 test	 BYTE PTR [ecx+eax], 8

; 2555 : 
; 2556 : 				if ( btMapAttr == 8 )

  00146	74 3f		 je	 SHORT $LN38@SearchNBlo

; 2557 : 				{
; 2558 : 					this->AddFallUser(iCastleIndex, iIndex);

  00148	57		 push	 edi
  00149	ff 75 f8	 push	 DWORD PTR _iCastleIndex$1$[ebp]
  0014c	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
  0014f	8b cf		 mov	 ecx, edi
  00151	e8 00 00 00 00	 call	 ?AddFallUser@CChaosCastle@@QAEXHH@Z ; CChaosCastle::AddFallUser

; 2559 : 
; 2560 : 					LogAddTD("[Chaos Castle] (%d) [%s][%s] User Dead In Chaos Castle : Fall from Castle (X:%d, Y:%d)",

  00156	ff 75 10	 push	 DWORD PTR _iY$[ebp]
  00159	8b 4d e4	 mov	 ecx, DWORD PTR tv347[ebp]
  0015c	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00162	ff 75 0c	 push	 DWORD PTR _iX$[ebp]
  00165	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00168	50		 push	 eax
  00169	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0016c	50		 push	 eax
  0016d	8b 45 f8	 mov	 eax, DWORD PTR _iCastleIndex$1$[ebp]
  00170	40		 inc	 eax
  00171	50		 push	 eax
  00172	68 00 00 00 00	 push	 OFFSET ??_C@_0FH@PPIJPFML@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use@
  00177	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0017d	83 c4 18	 add	 esp, 24			; 00000018H
  00180	eb 08		 jmp	 SHORT $LN39@SearchNBlo
$LN37@SearchNBlo:
  00182	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
  00185	eb 06		 jmp	 SHORT $LN2@SearchNBlo
$LN38@SearchNBlo:
  00187	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN39@SearchNBlo:
  0018a	8b 45 08	 mov	 eax, DWORD PTR tv348[ebp]
$LN2@SearchNBlo:

; 2536 : 	if ( iMIN_X > 255 ) iMIN_X = 255;
; 2537 : 	if ( iMIN_Y > 255 ) iMIN_Y = 255;
; 2538 : 	
; 2539 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  0018d	83 c6 14	 add	 esi, 20			; 00000014H
  00190	81 fe 78 05 00
	00		 cmp	 esi, 1400		; 00000578H
  00196	0f 8c 18 ff ff
	ff		 jl	 $LL4@SearchNBlo
  0019c	5e		 pop	 esi
$LN7@SearchNBlo:
  0019d	5f		 pop	 edi
  0019e	5b		 pop	 ebx

; 2561 : 						iCastleIndex+1, gObj[iIndex].AccountID, gObj[iIndex].Name, iX, iY);
; 2562 : 				}
; 2563 : 			}
; 2564 : 		}
; 2565 : 	}
; 2566 : }

  0019f	8b e5		 mov	 esp, ebp
  001a1	5d		 pop	 ebp
  001a2	c2 0c 00	 ret	 12			; 0000000cH
?SearchNBlowObjs@CChaosCastle@@QAEXHHH@Z ENDP		; CChaosCastle::SearchNBlowObjs
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?ObjSetPosition@CChaosCastle@@QAEHHHH@Z
_TEXT	SEGMENT
_pMove2$ = -8						; size = 7
tv318 = 8						; size = 4
_iIndex$ = 8						; size = 4
_iX$ = 12						; size = 4
_iY$ = 16						; size = 4
?ObjSetPosition@CChaosCastle@@QAEHHHH@Z PROC		; CChaosCastle::ObjSetPosition, COMDAT
; _this$ = ecx

; 2441 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 2442 : 	if ( !OBJMAX_RANGE(iIndex))

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _iIndex$[ebp]
  0000a	85 db		 test	 ebx, ebx
  0000c	0f 88 e7 01 00
	00		 js	 $LN15@ObjSetPosi
  00012	33 c0		 xor	 eax, eax
  00014	81 fb eb 2c 00
	00		 cmp	 ebx, 11499		; 00002cebH
  0001a	0f 9e c0	 setle	 al
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 d4 01 00
	00		 je	 $LN15@ObjSetPosi

; 2444 : 
; 2445 : 	LPOBJ lpObj = &gObj[iIndex];

  00025	69 cb 40 27 00
	00		 imul	 ecx, ebx, 10048
  0002b	56		 push	 esi
  0002c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00032	03 f1		 add	 esi, ecx
  00034	89 4d 08	 mov	 DWORD PTR tv318[ebp], ecx

; 2446 : 
; 2447 : 	if ( !CC_MAP_RANGE(lpObj->MapNumber))

  00037	8a 8e 23 01 00
	00		 mov	 cl, BYTE PTR [esi+291]
  0003d	80 f9 35	 cmp	 cl, 53			; 00000035H
  00040	74 1a		 je	 SHORT $LN3@ObjSetPosi
  00042	80 f9 12	 cmp	 cl, 18			; 00000012H
  00045	72 0b		 jb	 SHORT $LN16@ObjSetPosi
  00047	b0 17		 mov	 al, 23			; 00000017H
  00049	3a c1		 cmp	 al, cl
  0004b	1b c0		 sbb	 eax, eax
  0004d	83 c0 01	 add	 eax, 1
  00050	75 0a		 jne	 SHORT $LN3@ObjSetPosi
$LN16@ObjSetPosi:
  00052	5e		 pop	 esi

; 2448 : 		return FALSE;

  00053	33 c0		 xor	 eax, eax
  00055	5b		 pop	 ebx

; 2514 : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 0c 00	 ret	 12			; 0000000cH
$LN3@ObjSetPosi:

; 2449 : 
; 2450 : 	if ( lpObj->Teleport )

  0005c	80 be 88 05 00
	00 00		 cmp	 BYTE PTR [esi+1416], 0
  00063	74 0d		 je	 SHORT $LN4@ObjSetPosi

; 2451 : 		return TRUE;

  00065	5e		 pop	 esi
  00066	b8 01 00 00 00	 mov	 eax, 1
  0006b	5b		 pop	 ebx

; 2514 : }

  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 0c 00	 ret	 12			; 0000000cH
$LN4@ObjSetPosi:

; 2452 : 
; 2453 : 	BYTE btMapAttr = MapC[lpObj->MapNumber].GetAttr(iX, iY);

  00072	0f b6 c1	 movzx	 eax, cl
  00075	57		 push	 edi
  00076	8b 7d 10	 mov	 edi, DWORD PTR _iY$[ebp]
  00079	69 c8 28 38 05
	00		 imul	 ecx, eax, 342056
  0007f	57		 push	 edi
  00080	ff 75 0c	 push	 DWORD PTR _iX$[ebp]
  00083	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00089	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  0008e	a8 06		 test	 al, 6

; 2454 : 
; 2455 : 	if ( (btMapAttr&2) == 2 || (btMapAttr&4) == 4 )

  00090	0f 85 58 01 00
	00		 jne	 $LN6@ObjSetPosi

; 2457 : 
; 2458 : 	
; 2459 : 	PMSG_POSISTION_SET pMove;
; 2460 : 	pMove.h.c = 0xC1;
; 2461 : #if (__ENG__ == 1)
; 2462 : 	pMove.h.headcode = 0x15;
; 2463 : #else
; 2464 : 	// KOR PROTOCOL
; 2465 : 	pMove.h.headcode = 0x10;
; 2466 : #endif
; 2467 : 	pMove.h.size = sizeof(pMove);
; 2468 : 	pMove.X = iX;
; 2469 : 	pMove.Y = iY;
; 2470 : 
; 2471 : 	lpObj->m_Rest = 0;
; 2472 : 
; 2473 : 	MapC[lpObj->MapNumber].ClearStandAttr(lpObj->m_OldX,lpObj->m_OldY);

  00096	0f b6 86 51 01
	00 00		 movzx	 eax, BYTE PTR [esi+337]
  0009d	50		 push	 eax
  0009e	0f b6 86 50 01
	00 00		 movzx	 eax, BYTE PTR [esi+336]
  000a5	50		 push	 eax
  000a6	0f b6 86 23 01
	00 00		 movzx	 eax, BYTE PTR [esi+291]
  000ad	69 c8 28 38 05
	00		 imul	 ecx, eax, 342056
  000b3	c6 86 d4 01 00
	00 00		 mov	 BYTE PTR [esi+468], 0
  000ba	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  000c0	e8 00 00 00 00	 call	 ?ClearStandAttr@MapClass@@QAEXHH@Z ; MapClass::ClearStandAttr

; 2474 : 	MapC[lpObj->MapNumber].SetStandAttr(iX,iY);

  000c5	0f b6 86 23 01
	00 00		 movzx	 eax, BYTE PTR [esi+291]
  000cc	69 c8 28 38 05
	00		 imul	 ecx, eax, 342056
  000d2	57		 push	 edi
  000d3	ff 75 0c	 push	 DWORD PTR _iX$[ebp]
  000d6	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  000dc	e8 00 00 00 00	 call	 ?SetStandAttr@MapClass@@QAEXHH@Z ; MapClass::SetStandAttr

; 2475 : 
; 2476 : 	lpObj->m_OldX = iX;

  000e1	8b 4d 0c	 mov	 ecx, DWORD PTR _iX$[ebp]

; 2477 : 	lpObj->m_OldY = iY;

  000e4	8b c7		 mov	 eax, edi

; 2478 : 
; 2479 : 	lpObj->X = pMove.X;
; 2480 : 	lpObj->Y = pMove.Y;
; 2481 : 
; 2482 : 	PMSG_RECV_POSISTION_SET pMove2;
; 2483 : 
; 2484 : #if (__ENG__ == 1)
; 2485 : 	// KOR PROTOCOL
; 2486 : 	PHeadSetB((LPBYTE)&pMove2, 0x15, sizeof(pMove2));

  000e6	6a 07		 push	 7
  000e8	88 86 51 01 00
	00		 mov	 BYTE PTR [esi+337], al
  000ee	88 86 21 01 00
	00		 mov	 BYTE PTR [esi+289], al
  000f4	8d 45 f8	 lea	 eax, DWORD PTR _pMove2$[ebp]
  000f7	6a 15		 push	 21			; 00000015H
  000f9	50		 push	 eax
  000fa	88 8e 50 01 00
	00		 mov	 BYTE PTR [esi+336], cl
  00100	88 8e 20 01 00
	00		 mov	 BYTE PTR [esi+288], cl
  00106	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 2487 : #else
; 2488 : 	// KOR PROTOCOL
; 2489 : 	PHeadSetB((LPBYTE)&pMove2, 0x10, sizeof(pMove2));
; 2490 : #endif
; 2491 : 	pMove2.NumberH = SET_NUMBERH(iIndex);
; 2492 : 	pMove2.NumberL = SET_NUMBERL(iIndex);
; 2493 : 	pMove2.X = pMove.X;

  0010b	8b 4d 0c	 mov	 ecx, DWORD PTR _iX$[ebp]
  0010e	8b c3		 mov	 eax, ebx
  00110	c1 e8 08	 shr	 eax, 8
  00113	88 45 fb	 mov	 BYTE PTR _pMove2$[ebp+3], al

; 2494 : 	pMove2.Y = pMove.Y;

  00116	8b c7		 mov	 eax, edi
  00118	88 5d fc	 mov	 BYTE PTR _pMove2$[ebp+4], bl
  0011b	88 4d fd	 mov	 BYTE PTR _pMove2$[ebp+5], cl
  0011e	88 45 fe	 mov	 BYTE PTR _pMove2$[ebp+6], al

; 2495 : 	lpObj->TX = pMove.X;
; 2496 : 	lpObj->TY = pMove.Y;

  00121	88 86 53 01 00
	00		 mov	 BYTE PTR [esi+339], al

; 2497 : 
; 2498 : 	CreateFrustrum(lpObj->X, lpObj->Y, iIndex);

  00127	0f b6 86 21 01
	00 00		 movzx	 eax, BYTE PTR [esi+289]
  0012e	53		 push	 ebx
  0012f	50		 push	 eax
  00130	0f b6 86 20 01
	00 00		 movzx	 eax, BYTE PTR [esi+288]
  00137	50		 push	 eax
  00138	88 8e 52 01 00
	00		 mov	 BYTE PTR [esi+338], cl
  0013e	e8 00 00 00 00	 call	 ?CreateFrustrum@@YAXHHH@Z ; CreateFrustrum
  00143	83 c4 18	 add	 esp, 24			; 00000018H

; 2499 : 
; 2500 : 	if ( lpObj->Type == OBJ_USER )

  00146	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  0014a	75 12		 jne	 SHORT $LN7@ObjSetPosi

; 2501 : 	{
; 2502 : 		DataSend(iIndex, (UCHAR *)&pMove2, pMove2.h.size);

  0014c	0f b6 45 f9	 movzx	 eax, BYTE PTR _pMove2$[ebp+1]
  00150	50		 push	 eax
  00151	8d 45 f8	 lea	 eax, DWORD PTR _pMove2$[ebp]
  00154	50		 push	 eax
  00155	53		 push	 ebx
  00156	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0015b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@ObjSetPosi:

; 2503 : 	}
; 2504 : 
; 2505 : 	MsgSendV2(&gObj[iIndex], (UCHAR *)&pMove2, pMove2.h.size);

  0015e	0f b6 45 f9	 movzx	 eax, BYTE PTR _pMove2$[ebp+1]
  00162	50		 push	 eax
  00163	8d 45 f8	 lea	 eax, DWORD PTR _pMove2$[ebp]
  00166	50		 push	 eax
  00167	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0016c	03 45 08	 add	 eax, DWORD PTR tv318[ebp]
  0016f	50		 push	 eax
  00170	e8 00 00 00 00	 call	 ?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z ; MsgSendV2

; 2506 : 
; 2507 : 	MapC[lpObj->MapNumber].ClearStandAttr(lpObj->m_OldX, lpObj->m_OldY);

  00175	0f b6 86 51 01
	00 00		 movzx	 eax, BYTE PTR [esi+337]
  0017c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017f	50		 push	 eax
  00180	0f b6 86 50 01
	00 00		 movzx	 eax, BYTE PTR [esi+336]
  00187	50		 push	 eax
  00188	0f b6 86 23 01
	00 00		 movzx	 eax, BYTE PTR [esi+291]
  0018f	69 c8 28 38 05
	00		 imul	 ecx, eax, 342056
  00195	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  0019b	e8 00 00 00 00	 call	 ?ClearStandAttr@MapClass@@QAEXHH@Z ; MapClass::ClearStandAttr

; 2508 : 	MapC[lpObj->MapNumber].SetStandAttr(lpObj->TX, lpObj->TY);

  001a0	0f b6 86 53 01
	00 00		 movzx	 eax, BYTE PTR [esi+339]
  001a7	50		 push	 eax
  001a8	0f b6 86 52 01
	00 00		 movzx	 eax, BYTE PTR [esi+338]
  001af	50		 push	 eax
  001b0	0f b6 86 23 01
	00 00		 movzx	 eax, BYTE PTR [esi+291]
  001b7	69 c8 28 38 05
	00		 imul	 ecx, eax, 342056
  001bd	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  001c3	e8 00 00 00 00	 call	 ?SetStandAttr@MapClass@@QAEXHH@Z ; MapClass::SetStandAttr

; 2509 : 
; 2510 : 	lpObj->m_OldX = lpObj->TX;

  001c8	8a 86 52 01 00
	00		 mov	 al, BYTE PTR [esi+338]
  001ce	88 86 50 01 00
	00		 mov	 BYTE PTR [esi+336], al

; 2511 : 	lpObj->m_OldY = lpObj->TY;

  001d4	8a 86 53 01 00
	00		 mov	 al, BYTE PTR [esi+339]
  001da	5f		 pop	 edi
  001db	88 86 51 01 00
	00		 mov	 BYTE PTR [esi+337], al

; 2512 : 
; 2513 : 	return TRUE;

  001e1	b8 01 00 00 00	 mov	 eax, 1
  001e6	5e		 pop	 esi
  001e7	5b		 pop	 ebx

; 2514 : }

  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
$LN6@ObjSetPosi:
  001ee	5f		 pop	 edi
  001ef	5e		 pop	 esi

; 2456 : 		return FALSE;

  001f0	33 c0		 xor	 eax, eax
  001f2	5b		 pop	 ebx

; 2514 : }

  001f3	8b e5		 mov	 esp, ebp
  001f5	5d		 pop	 ebp
  001f6	c2 0c 00	 ret	 12			; 0000000cH
$LN15@ObjSetPosi:

; 2443 : 		return TRUE;

  001f9	b8 01 00 00 00	 mov	 eax, 1
  001fe	5b		 pop	 ebx

; 2514 : }

  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 0c 00	 ret	 12			; 0000000cH
?ObjSetPosition@CChaosCastle@@QAEHHHH@Z ENDP		; CChaosCastle::ObjSetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?CheckCanStartPlay@CChaosCastle@@QAE_NH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
?CheckCanStartPlay@CChaosCastle@@QAE_NH@Z PROC		; CChaosCastle::CheckCanStartPlay, COMDAT
; _this$ = ecx

; 2265 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2266 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _iChaosCastleIndex$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	78 2a		 js	 SHORT $LN7@CheckCanSt
  0000b	33 c0		 xor	 eax, eax
  0000d	83 fe 06	 cmp	 esi, 6
  00010	0f 9e c0	 setle	 al
  00013	85 c0		 test	 eax, eax
  00015	74 1e		 je	 SHORT $LN7@CheckCanSt

; 2269 : 	}
; 2270 : 
; 2271 : 	int iEnteredUser = this->GetCurPlayUser(iChaosCastleIndex);

  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ?GetCurPlayUser@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetCurPlayUser

; 2272 : 
; 2273 : 	if ( iEnteredUser < MIN_CC_USER_NEED_PLAY )

  0001d	83 f8 01	 cmp	 eax, 1
  00020	7d 1a		 jge	 SHORT $LN3@CheckCanSt

; 2274 : 	{
; 2275 : 		LogAddTD("[Chaos Castle] (%d) GetCurPlayUser() FAILED (UserCount:%d)", iChaosCastleIndex+1, iEnteredUser);

  00022	50		 push	 eax
  00023	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00026	50		 push	 eax
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@GPIGPHOF@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5GetCurPlayUs@
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@CheckCanSt:

; 2267 : 	{
; 2268 : 		return false;

  00035	32 c0		 xor	 al, al
  00037	5e		 pop	 esi

; 2281 : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
$LN3@CheckCanSt:

; 2276 : 
; 2277 : 		return false;
; 2278 : 	}
; 2279 : 
; 2280 : 	return true;

  0003c	b0 01		 mov	 al, 1
  0003e	5e		 pop	 esi

; 2281 : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?CheckCanStartPlay@CChaosCastle@@QAE_NH@Z ENDP		; CChaosCastle::CheckCanStartPlay
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?CheckPlayStart@CChaosCastle@@QAE_NH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
?CheckPlayStart@CChaosCastle@@QAE_NH@Z PROC		; CChaosCastle::CheckPlayStart, COMDAT
; _this$ = ecx

; 2251 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2252 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iChaosCastleIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 1a		 js	 SHORT $LN6@CheckPlayS
  0000a	33 c0		 xor	 eax, eax
  0000c	83 fa 06	 cmp	 edx, 6
  0000f	0f 9e c0	 setle	 al
  00012	85 c0		 test	 eax, eax
  00014	74 0e		 je	 SHORT $LN6@CheckPlayS

; 2255 : 	}
; 2256 : 
; 2257 : 	return this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_PLAY_START;

  00016	69 c2 68 08 00
	00		 imul	 eax, edx, 2152
  0001c	8a 44 08 4a	 mov	 al, BYTE PTR [eax+ecx+74]

; 2258 : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN6@CheckPlayS:

; 2253 : 	{
; 2254 : 		return false;

  00024	32 c0		 xor	 al, al

; 2258 : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?CheckPlayStart@CChaosCastle@@QAE_NH@Z ENDP		; CChaosCastle::CheckPlayStart
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?CheckCanEnter@CChaosCastle@@QAE_NH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
?CheckCanEnter@CChaosCastle@@QAE_NH@Z PROC		; CChaosCastle::CheckCanEnter, COMDAT
; _this$ = ecx

; 2237 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2238 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iChaosCastleIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 1a		 js	 SHORT $LN6@CheckCanEn
  0000a	33 c0		 xor	 eax, eax
  0000c	83 fa 06	 cmp	 edx, 6
  0000f	0f 9e c0	 setle	 al
  00012	85 c0		 test	 eax, eax
  00014	74 0e		 je	 SHORT $LN6@CheckCanEn

; 2241 : 	}
; 2242 : 
; 2243 : 	return this->m_stChaosCastleData[iChaosCastleIndex].m_bCC_CAN_ENTER;

  00016	69 c2 68 08 00
	00		 imul	 eax, edx, 2152
  0001c	8a 44 08 48	 mov	 al, BYTE PTR [eax+ecx+72]

; 2244 : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN6@CheckCanEn:

; 2239 : 	{
; 2240 : 		return false;

  00024	32 c0		 xor	 al, al

; 2244 : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?CheckCanEnter@CChaosCastle@@QAE_NH@Z ENDP		; CChaosCastle::CheckCanEnter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?CheckPlayEnded@CChaosCastle@@QAEHH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
?CheckPlayEnded@CChaosCastle@@QAEHH@Z PROC		; CChaosCastle::CheckPlayEnded, COMDAT
; _this$ = ecx

; 2210 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 2211 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00005	8b 75 08	 mov	 esi, DWORD PTR _iChaosCastleIndex$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	78 48		 js	 SHORT $LN8@CheckPlayE
  0000e	33 c0		 xor	 eax, eax
  00010	83 fe 06	 cmp	 esi, 6
  00013	0f 9e c0	 setle	 al
  00016	85 c0		 test	 eax, eax
  00018	74 3c		 je	 SHORT $LN8@CheckPlayE

; 2214 : 	}
; 2215 : 
; 2216 : 	int iCUR_USER_COUNT = this->GetCurPlayUser(iChaosCastleIndex);

  0001a	57		 push	 edi
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 ?GetCurPlayUser@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetCurPlayUser

; 2217 : 	int iCUR_MONSTER_COUNT = this->GetMonsterListCount(iChaosCastleIndex);

  00021	56		 push	 esi
  00022	8b cb		 mov	 ecx, ebx
  00024	8b f8		 mov	 edi, eax
  00026	e8 00 00 00 00	 call	 ?GetMonsterListCount@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMonsterListCount

; 2218 : 
; 2219 : 	if ( iCUR_USER_COUNT <= 0 )

  0002b	85 ff		 test	 edi, edi
  0002d	7f 0c		 jg	 SHORT $LN3@CheckPlayE

; 2220 : 	{
; 2221 : 		return 2;

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	b8 02 00 00 00	 mov	 eax, 2
  00036	5b		 pop	 ebx

; 2230 : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
$LN3@CheckPlayE:

; 2222 : 	}
; 2223 : 
; 2224 : 	if ( iCUR_USER_COUNT == 1 && iCUR_MONSTER_COUNT <= 0)

  0003b	83 ff 01	 cmp	 edi, 1
  0003e	75 0d		 jne	 SHORT $LN4@CheckPlayE
  00040	85 c0		 test	 eax, eax
  00042	7f 09		 jg	 SHORT $LN4@CheckPlayE

; 2225 : 	{
; 2226 : 		return 1;

  00044	8b c7		 mov	 eax, edi
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx

; 2230 : }

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN4@CheckPlayE:
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi

; 2227 : 	}
; 2228 : 
; 2229 : 	return 0;

  0004f	33 c0		 xor	 eax, eax
  00051	5b		 pop	 ebx

; 2230 : }

  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
$LN8@CheckPlayE:
  00056	5e		 pop	 esi

; 2212 : 	{
; 2213 : 		return FALSE;

  00057	33 c0		 xor	 eax, eax
  00059	5b		 pop	 ebx

; 2230 : }

  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?CheckPlayEnded@CChaosCastle@@QAEHH@Z ENDP		; CChaosCastle::CheckPlayEnded
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?CheckEnterItem@CChaosCastle@@QAEHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?CheckEnterItem@CChaosCastle@@QAEHH@Z PROC		; CChaosCastle::CheckEnterItem, COMDAT
; _this$ = ecx

; 2167 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2168 : 	int iITEM_LEVEL = 0;
; 2169 : 
; 2170 : 	if ( OBJMAX_RANGE(iIndex) == FALSE )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  00006	56		 push	 esi
  00007	33 f6		 xor	 esi, esi
  00009	85 c9		 test	 ecx, ecx
  0000b	0f 88 99 00 00
	00		 js	 $LN22@CheckEnter
  00011	33 c0		 xor	 eax, eax
  00013	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00019	0f 9e c0	 setle	 al
  0001c	85 c0		 test	 eax, eax
  0001e	0f 84 86 00 00
	00		 je	 $LN22@CheckEnter

; 2173 : 	}
; 2174 : 
; 2175 : 	if ( gObj[iIndex].Type != OBJ_USER || gObj[iIndex].Connected <= PLAYER_LOGGED )

  00024	53		 push	 ebx
  00025	69 d9 40 27 00
	00		 imul	 ebx, ecx, 10048
  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00031	80 7c 0b 50 01	 cmp	 BYTE PTR [ebx+ecx+80], 1
  00036	75 6a		 jne	 SHORT $LN7@CheckEnter
  00038	83 7c 0b 04 02	 cmp	 DWORD PTR [ebx+ecx+4], 2
  0003d	7e 63		 jle	 SHORT $LN7@CheckEnter

; 2178 : 	}
; 2179 : 
; 2180 : 	for ( int x=0;x<MAIN_INVENTORY_SIZE;x++)

  0003f	57		 push	 edi
  00040	33 ff		 xor	 edi, edi
$LL4@CheckEnter:

; 2181 : 	{
; 2182 : 		if ( gObj[iIndex].pInventory[x].IsItem() == TRUE )

  00042	8b 8c 0b c0 11
	00 00		 mov	 ecx, DWORD PTR [ebx+ecx+4544]
  00049	03 cf		 add	 ecx, edi
  0004b	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00050	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00056	83 f8 01	 cmp	 eax, 1
  00059	75 30		 jne	 SHORT $LN2@CheckEnter

; 2183 : 		{
; 2184 : 			if ( gObj[iIndex].pInventory[x].m_Type == ITEMGET(13,29) )

  0005b	8b 84 0b c0 11
	00 00		 mov	 eax, DWORD PTR [ebx+ecx+4544]
  00062	ba 1d 1a 00 00	 mov	 edx, 6685		; 00001a1dH
  00067	66 39 54 38 06	 cmp	 WORD PTR [eax+edi+6], dx
  0006c	75 1d		 jne	 SHORT $LN2@CheckEnter

; 2185 : 			{
; 2186 : 				iITEM_LEVEL = gObj[iIndex].pInventory[x].m_Level;

  0006e	0f bf 74 38 08	 movsx	 esi, WORD PTR [eax+edi+8]

; 2187 : 
; 2188 : 				if ( CHECK_LIMIT(iITEM_LEVEL, MAX_CHAOSCASTLE_LEVEL+1) == FALSE )

  00073	85 f6		 test	 esi, esi
  00075	78 12		 js	 SHORT $LN23@CheckEnter
  00077	33 c0		 xor	 eax, eax
  00079	83 fe 07	 cmp	 esi, 7
  0007c	0f 9e c0	 setle	 al
  0007f	85 c0		 test	 eax, eax
  00081	74 06		 je	 SHORT $LN23@CheckEnter

; 2191 : 
; 2192 : 				}
; 2193 : 
; 2194 : 				if ( iITEM_LEVEL != 0 )

  00083	85 f6		 test	 esi, esi
  00085	75 12		 jne	 SHORT $LN24@CheckEnter
  00087	eb 02		 jmp	 SHORT $LN2@CheckEnter
$LN23@CheckEnter:

; 2189 : 				{
; 2190 : 					iITEM_LEVEL = 0;

  00089	33 f6		 xor	 esi, esi
$LN2@CheckEnter:

; 2178 : 	}
; 2179 : 
; 2180 : 	for ( int x=0;x<MAIN_INVENTORY_SIZE;x++)

  0008b	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00091	81 ff f0 a8 00
	00		 cmp	 edi, 43248		; 0000a8f0H
  00097	7c a9		 jl	 SHORT $LL4@CheckEnter
$LN24@CheckEnter:
  00099	5f		 pop	 edi
  0009a	5b		 pop	 ebx

; 2195 : 				{
; 2196 : 					return iITEM_LEVEL;
; 2197 : 				}
; 2198 : 			}
; 2199 : 		}
; 2200 : 	}
; 2201 : 
; 2202 : 	return iITEM_LEVEL;

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi

; 2203 : }

  0009e	5d		 pop	 ebp
  0009f	c2 04 00	 ret	 4
$LN7@CheckEnter:
  000a2	5b		 pop	 ebx

; 2176 : 	{
; 2177 : 		return 0;

  000a3	33 c0		 xor	 eax, eax
  000a5	5e		 pop	 esi

; 2203 : }

  000a6	5d		 pop	 ebp
  000a7	c2 04 00	 ret	 4
$LN22@CheckEnter:

; 2171 : 	{
; 2172 : 		return 0;

  000aa	33 c0		 xor	 eax, eax
  000ac	5e		 pop	 esi

; 2203 : }

  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
?CheckEnterItem@CChaosCastle@@QAEHH@Z ENDP		; CChaosCastle::CheckEnterItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?CheckEnterLevel@CChaosCastle@@QAEHHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_iLevel$ = 12						; size = 4
?CheckEnterLevel@CChaosCastle@@QAEHHH@Z PROC		; CChaosCastle::CheckEnterLevel, COMDAT
; _this$ = ecx

; 2112 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2113 : 	if ( OBJMAX_RANGE(iIndex) == FALSE )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	0f 88 bb 00 00
	00		 js	 $LN17@CheckEnter
  0000e	33 c0		 xor	 eax, eax
  00010	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	0f 84 a8 00 00
	00		 je	 $LN17@CheckEnter

; 2116 : 	}
; 2117 : 
; 2118 : 	if ( gObj[iIndex].Type != OBJ_USER || gObj[iIndex].Connected <= PLAYER_LOGGED )

  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00026	69 c9 40 27 00
	00		 imul	 ecx, ecx, 10048
  0002c	03 c1		 add	 eax, ecx
  0002e	80 78 50 01	 cmp	 BYTE PTR [eax+80], 1
  00032	0f 85 91 00 00
	00		 jne	 $LN17@CheckEnter
  00038	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  0003c	0f 8e 87 00 00
	00		 jle	 $LN17@CheckEnter

; 2119 : 	{
; 2120 : 		return 2;
; 2121 : 	}
; 2122 : 
; 2123 : 	if ( gObj[iIndex].Class == CLASS_DARKLORD || gObj[iIndex].Class == CLASS_MAGUMSA || gObj[iIndex].Class == CLASS_FIGHTER )

  00042	0f b7 88 90 00
	00 00		 movzx	 ecx, WORD PTR [eax+144]
  00049	83 f9 04	 cmp	 ecx, 4
  0004c	74 3e		 je	 SHORT $LN7@CheckEnter
  0004e	83 f9 03	 cmp	 ecx, 3
  00051	74 39		 je	 SHORT $LN7@CheckEnter
  00053	83 f9 06	 cmp	 ecx, 6
  00056	74 34		 je	 SHORT $LN7@CheckEnter

; 2138 : 		}
; 2139 : 	}
; 2140 : 	else
; 2141 : 	{
; 2142 : 		if ( gObj[iIndex].Level >= g_sttCHAOSCASTLE_LEVEL[iLevel-1].iLOWER_BOUND && gObj[iIndex].Level <= g_sttCHAOSCASTLE_LEVEL[iLevel-1].iUPPER_BOUND )

  00058	0f bf 88 96 00
	00 00		 movsx	 ecx, WORD PTR [eax+150]
  0005f	8b 45 0c	 mov	 eax, DWORD PTR _iLevel$[ebp]
  00062	c1 e0 04	 shl	 eax, 4
  00065	8b 90 f0 ff ff
	ff		 mov	 edx, DWORD PTR ?g_sttCHAOSCASTLE_LEVEL@@3PAU_CHAOSCASTLE_LEVEL@@A[eax-16]
  0006b	3b ca		 cmp	 ecx, edx
  0006d	7c 46		 jl	 SHORT $LN21@CheckEnter
  0006f	3b 88 f4 ff ff
	ff		 cmp	 ecx, DWORD PTR ?g_sttCHAOSCASTLE_LEVEL@@3PAU_CHAOSCASTLE_LEVEL@@A[eax-12]
  00075	7e 34		 jle	 SHORT $LN23@CheckEnter

; 2143 : 		{
; 2144 : 			return 0;
; 2145 : 		}
; 2146 : 
; 2147 : 		if ( gObj[iIndex].Level < g_sttCHAOSCASTLE_LEVEL[iLevel-1].iLOWER_BOUND )

  00077	3b ca		 cmp	 ecx, edx
  00079	7c 3a		 jl	 SHORT $LN21@CheckEnter

; 2148 : 		{
; 2149 : 			return -1;
; 2150 : 		}
; 2151 : 
; 2152 : 		if ( gObj[iIndex].Level > g_sttCHAOSCASTLE_LEVEL[iLevel-1].iUPPER_BOUND )

  0007b	3b 88 f4 ff ff
	ff		 cmp	 ecx, DWORD PTR ?g_sttCHAOSCASTLE_LEVEL@@3PAU_CHAOSCASTLE_LEVEL@@A[eax-12]
  00081	7e 46		 jle	 SHORT $LN17@CheckEnter

; 2153 : 		{
; 2154 : 			return 1;

  00083	b8 01 00 00 00	 mov	 eax, 1

; 2155 : 		}
; 2156 : 	}
; 2157 : 
; 2158 : 	return 2;
; 2159 : }

  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
$LN7@CheckEnter:

; 2124 : 	{
; 2125 : 		if ( gObj[iIndex].Level >= g_sttCHAOSCASTLE_LEVEL[iLevel-1].iLOWER_BOUND_MAGUMSA && gObj[iIndex].Level <= g_sttCHAOSCASTLE_LEVEL[iLevel-1].iUPPER_BOUND_MAGUMSA )

  0008c	0f bf 88 96 00
	00 00		 movsx	 ecx, WORD PTR [eax+150]
  00093	8b 45 0c	 mov	 eax, DWORD PTR _iLevel$[ebp]
  00096	c1 e0 04	 shl	 eax, 4
  00099	8b 90 f8 ff ff
	ff		 mov	 edx, DWORD PTR ?g_sttCHAOSCASTLE_LEVEL@@3PAU_CHAOSCASTLE_LEVEL@@A[eax-8]
  0009f	3b ca		 cmp	 ecx, edx
  000a1	7c 12		 jl	 SHORT $LN21@CheckEnter
  000a3	3b 88 fc ff ff
	ff		 cmp	 ecx, DWORD PTR ?g_sttCHAOSCASTLE_LEVEL@@3PAU_CHAOSCASTLE_LEVEL@@A[eax-4]
  000a9	7f 06		 jg	 SHORT $LN8@CheckEnter
$LN23@CheckEnter:

; 2126 : 		{
; 2127 : 			return 0;

  000ab	33 c0		 xor	 eax, eax

; 2155 : 		}
; 2156 : 	}
; 2157 : 
; 2158 : 	return 2;
; 2159 : }

  000ad	5d		 pop	 ebp
  000ae	c2 08 00	 ret	 8
$LN8@CheckEnter:

; 2128 : 		}
; 2129 : 
; 2130 : 		if ( gObj[iIndex].Level < g_sttCHAOSCASTLE_LEVEL[iLevel-1].iLOWER_BOUND_MAGUMSA )

  000b1	3b ca		 cmp	 ecx, edx
  000b3	7d 07		 jge	 SHORT $LN9@CheckEnter
$LN21@CheckEnter:

; 2131 : 		{
; 2132 : 			return -1;

  000b5	83 c8 ff	 or	 eax, -1

; 2155 : 		}
; 2156 : 	}
; 2157 : 
; 2158 : 	return 2;
; 2159 : }

  000b8	5d		 pop	 ebp
  000b9	c2 08 00	 ret	 8
$LN9@CheckEnter:

; 2133 : 		}
; 2134 : 
; 2135 : 		if ( gObj[iIndex].Level > g_sttCHAOSCASTLE_LEVEL[iLevel-1].iUPPER_BOUND_MAGUMSA )

  000bc	3b 88 fc ff ff
	ff		 cmp	 ecx, DWORD PTR ?g_sttCHAOSCASTLE_LEVEL@@3PAU_CHAOSCASTLE_LEVEL@@A[eax-4]

; 2136 : 		{
; 2137 : 			return 1;

  000c2	b8 01 00 00 00	 mov	 eax, 1
  000c7	7f 05		 jg	 SHORT $LN1@CheckEnter
$LN17@CheckEnter:

; 2114 : 	{
; 2115 : 		return 2;

  000c9	b8 02 00 00 00	 mov	 eax, 2
$LN1@CheckEnter:

; 2155 : 		}
; 2156 : 	}
; 2157 : 
; 2158 : 	return 2;
; 2159 : }

  000ce	5d		 pop	 ebp
  000cf	c2 08 00	 ret	 8
?CheckEnterLevel@CChaosCastle@@QAEHHH@Z ENDP		; CChaosCastle::CheckEnterLevel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?GetCurrentRemainSec@CChaosCastle@@QAEHH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
?GetCurrentRemainSec@CChaosCastle@@QAEHH@Z PROC		; CChaosCastle::GetCurrentRemainSec, COMDAT
; _this$ = ecx

; 2432 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2433 : 	return this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC / 1000;

  00003	69 45 08 68 08
	00 00		 imul	 eax, DWORD PTR _iChaosCastleIndex$[ebp], 2152
  0000a	8b 4c 08 3c	 mov	 ecx, DWORD PTR [eax+ecx+60]
  0000e	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00013	f7 e9		 imul	 ecx
  00015	c1 fa 06	 sar	 edx, 6
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx

; 2434 : }

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?GetCurrentRemainSec@CChaosCastle@@QAEHH@Z ENDP		; CChaosCastle::GetCurrentRemainSec
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?GetRemainTime@CChaosCastle@@QAEHH@Z
_TEXT	SEGMENT
_it$2$ = -48						; size = 4
tv611 = -44						; size = 4
tv613 = -40						; size = 4
_this$1$ = -40						; size = 4
tv610 = -36						; size = 4
$T1 = -36						; size = 4
_bTIME_CHANGED$1$ = -32					; size = 4
tv626 = -28						; size = 4
_iMIN_MINUTE$1$ = -28					; size = 4
tv614 = -24						; size = 4
_iMIN_HOUR$1$ = -24					; size = 4
_sysTime$2 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_iChaosCastleIndex$ = 8					; size = 4
?GetRemainTime@CChaosCastle@@QAEHH@Z PROC		; CChaosCastle::GetRemainTime, COMDAT
; _this$ = ecx

; 2355 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi

; 2356 : 	int iREMAIN_MINUTE = 0;
; 2357 : 
; 2358 : 	if ( this->GetCurrentState(iChaosCastleIndex) == 1 )

  00012	8b 75 08	 mov	 esi, DWORD PTR _iChaosCastleIndex$[ebp]
  00015	8b d9		 mov	 ebx, ecx
  00017	56		 push	 esi
  00018	89 5d d8	 mov	 DWORD PTR _this$1$[ebp], ebx
  0001b	e8 00 00 00 00	 call	 ?GetCurrentState@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetCurrentState
  00020	83 f8 01	 cmp	 eax, 1
  00023	75 24		 jne	 SHORT $LN10@GetRemainT

; 2359 : 	{
; 2360 : 		iREMAIN_MINUTE = this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC / 60000 - this->m_iCC_TIME_MIN_OPEN + 1;

  00025	69 c6 68 08 00
	00		 imul	 eax, esi, 2152
  0002b	8b 4c 18 3c	 mov	 ecx, DWORD PTR [eax+ebx+60]
  0002f	b8 73 b2 e7 45	 mov	 eax, 1172812403		; 45e7b273H
  00034	f7 e9		 imul	 ecx
  00036	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx
  00040	2b 43 08	 sub	 eax, DWORD PTR [ebx+8]
  00043	40		 inc	 eax

; 2361 : 	}
; 2362 : 	else

  00044	e9 3f 01 00 00	 jmp	 $LN8@GetRemainT
$LN10@GetRemainT:
  00049	57		 push	 edi

; 2363 : 	{
; 2364 : 		SYSTEMTIME sysTime;
; 2365 : 		GetLocalTime(&sysTime);

  0004a	8d 45 ec	 lea	 eax, DWORD PTR _sysTime$2[ebp]
  0004d	50		 push	 eax
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  00054	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 2368 : 		BOOL bTIME_CHANGED = FALSE;

  00057	33 d2		 xor	 edx, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  00059	8b 73 24	 mov	 esi, DWORD PTR [ebx+36]
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 2371 : 		for( it = this->m_vtChaosCastleOpenTime.begin();  it != this->m_vtChaosCastleOpenTime.end(); it++)

  0005c	8b c8		 mov	 ecx, eax
  0005e	89 55 e0	 mov	 DWORD PTR _bTIME_CHANGED$1$[ebp], edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  00061	89 45 d0	 mov	 DWORD PTR _it$2$[ebp], eax
  00064	89 75 dc	 mov	 DWORD PTR $T1[ebp], esi

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00067	3b ce		 cmp	 ecx, esi
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 2371 : 		for( it = this->m_vtChaosCastleOpenTime.begin();  it != this->m_vtChaosCastleOpenTime.end(); it++)

  00069	74 6e		 je	 SHORT $LN171@GetRemainT
  0006b	0f b7 7d f4	 movzx	 edi, WORD PTR _sysTime$2[ebp+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));

  0006f	8b d6		 mov	 edx, esi
  00071	8b df		 mov	 ebx, edi
  00073	c1 e3 04	 shl	 ebx, 4
  00076	2b df		 sub	 ebx, edi
  00078	0f b7 7d f6	 movzx	 edi, WORD PTR _sysTime$2[ebp+10]
  0007c	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
  0007f	89 45 e4	 mov	 DWORD PTR tv626[ebp], eax
  00082	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00087	8d 70 24	 lea	 esi, DWORD PTR [eax+36]
  0008a	66 0f 1f 44 00
	00		 npad	 6
$LL4@GetRemainT:
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 2375 : 			if ( (sysTime.wHour * 60 + sysTime.wMinute) < (pRET.m_iHour * 60 + pRET.m_iMinute))

  00090	8b 39		 mov	 edi, DWORD PTR [ecx]
  00092	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]
  00095	c1 e7 04	 shl	 edi, 4
  00098	2b 39		 sub	 edi, DWORD PTR [ecx]
  0009a	8d 1c bb	 lea	 ebx, DWORD PTR [ebx+edi*4]
  0009d	39 5d e4	 cmp	 DWORD PTR tv626[ebp], ebx
  000a0	7d 1d		 jge	 SHORT $LN178@GetRemainT

; 2376 : 			{
; 2377 : 				if ( (iMIN_HOUR * 60 + iMIN_MINUTE) > (pRET.m_iHour * 60 + pRET.m_iMinute))

  000a2	8b f8		 mov	 edi, eax
  000a4	c1 e7 04	 shl	 edi, 4
  000a7	2b f8		 sub	 edi, eax
  000a9	8d 3c be	 lea	 edi, DWORD PTR [esi+edi*4]
  000ac	3b fb		 cmp	 edi, ebx
  000ae	7e 0f		 jle	 SHORT $LN178@GetRemainT

; 2378 : 				{
; 2379 : 					bTIME_CHANGED = 1;
; 2380 : 					iMIN_HOUR = pRET.m_iHour;

  000b0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b2	bb 01 00 00 00	 mov	 ebx, 1

; 2381 : 					iMIN_MINUTE = pRET.m_iMinute;

  000b7	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  000ba	89 5d e0	 mov	 DWORD PTR _bTIME_CHANGED$1$[ebp], ebx
  000bd	eb 03		 jmp	 SHORT $LN2@GetRemainT
$LN178@GetRemainT:
  000bf	8b 5d e0	 mov	 ebx, DWORD PTR _bTIME_CHANGED$1$[ebp]
$LN2@GetRemainT:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  000c2	83 c1 08	 add	 ecx, 8

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000c5	3b ca		 cmp	 ecx, edx
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 2371 : 		for( it = this->m_vtChaosCastleOpenTime.begin();  it != this->m_vtChaosCastleOpenTime.end(); it++)

  000c7	75 c7		 jne	 SHORT $LL4@GetRemainT

; 2382 : 				}
; 2383 : 			}
; 2384 : 		}
; 2385 : 
; 2386 : 		
; 2387 : 					
; 2388 : 		if ( bTIME_CHANGED == 0 )

  000c9	89 75 e4	 mov	 DWORD PTR _iMIN_MINUTE$1$[ebp], esi
  000cc	8b 75 dc	 mov	 esi, DWORD PTR $T1[ebp]
  000cf	89 45 e8	 mov	 DWORD PTR _iMIN_HOUR$1$[ebp], eax
  000d2	8b 45 d0	 mov	 eax, DWORD PTR _it$2$[ebp]
  000d5	85 db		 test	 ebx, ebx
  000d7	75 6d		 jne	 SHORT $LN174@GetRemainT
$LN171@GetRemainT:

; 2389 : 		{
; 2390 : 			it = this->m_vtChaosCastleOpenTime.begin();
; 2391 : 			iMIN_HOUR = 24;

  000d9	ba 18 00 00 00	 mov	 edx, 24			; 00000018H

; 2392 : 			iMIN_MINUTE = 60;

  000de	bb 3c 00 00 00	 mov	 ebx, 60			; 0000003cH
  000e3	89 55 e8	 mov	 DWORD PTR _iMIN_HOUR$1$[ebp], edx
  000e6	89 5d e4	 mov	 DWORD PTR _iMIN_MINUTE$1$[ebp], ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000e9	3b c6		 cmp	 eax, esi
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 2394 : 			for( ;  it != this->m_vtChaosCastleOpenTime.end(); it++)

  000eb	74 40		 je	 SHORT $LN176@GetRemainT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));

  000ed	8b 4d d8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000f0	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
$LL7@GetRemainT:
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 2398 : 				if ( (iMIN_HOUR * 60 + iMIN_MINUTE) > (pRET.m_iHour * 60 + pRET.m_iMinute))

  000f3	8b 10		 mov	 edx, DWORD PTR [eax]
  000f5	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  000f8	c1 e2 04	 shl	 edx, 4
  000fb	2b 10		 sub	 edx, DWORD PTR [eax]
  000fd	8d 34 97	 lea	 esi, DWORD PTR [edi+edx*4]
  00100	8b 55 e8	 mov	 edx, DWORD PTR _iMIN_HOUR$1$[ebp]
  00103	c1 e2 04	 shl	 edx, 4
  00106	2b 55 e8	 sub	 edx, DWORD PTR _iMIN_HOUR$1$[ebp]
  00109	8d 14 93	 lea	 edx, DWORD PTR [ebx+edx*4]
  0010c	3b d6		 cmp	 edx, esi
  0010e	7e 10		 jle	 SHORT $LN175@GetRemainT

; 2399 : 				{
; 2400 : 					bTIME_CHANGED = 2;
; 2401 : 					iMIN_HOUR = pRET.m_iHour;

  00110	8b 10		 mov	 edx, DWORD PTR [eax]

; 2402 : 					iMIN_MINUTE = pRET.m_iMinute;

  00112	8b df		 mov	 ebx, edi
  00114	c7 45 e0 02 00
	00 00		 mov	 DWORD PTR _bTIME_CHANGED$1$[ebp], 2
  0011b	89 55 e8	 mov	 DWORD PTR _iMIN_HOUR$1$[ebp], edx
  0011e	eb 03		 jmp	 SHORT $LN5@GetRemainT
$LN175@GetRemainT:
  00120	8b 55 e8	 mov	 edx, DWORD PTR _iMIN_HOUR$1$[ebp]
$LN5@GetRemainT:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  00123	83 c0 08	 add	 eax, 8

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00126	3b c1		 cmp	 eax, ecx
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 2394 : 			for( ;  it != this->m_vtChaosCastleOpenTime.end(); it++)

  00128	75 c9		 jne	 SHORT $LL7@GetRemainT
  0012a	89 5d e4	 mov	 DWORD PTR _iMIN_MINUTE$1$[ebp], ebx
$LN176@GetRemainT:
  0012d	8b 5d e0	 mov	 ebx, DWORD PTR _bTIME_CHANGED$1$[ebp]
$LN6@GetRemainT:
  00130	5f		 pop	 edi

; 2403 : 				}
; 2404 : 			}
; 2405 : 		}
; 2406 : 
; 2407 : 		switch ( bTIME_CHANGED )

  00131	83 eb 01	 sub	 ebx, 1
  00134	74 15		 je	 SHORT $LN16@GetRemainT
  00136	83 eb 01	 sub	 ebx, 1
  00139	75 51		 jne	 SHORT $LN172@GetRemainT

; 2411 : 				break;
; 2412 : 			case 2:
; 2413 : 				iREMAIN_MINUTE = ((((iMIN_HOUR + 24) * 60 * 60 + iMIN_MINUTE * 60) - (sysTime.wHour * 60 * 60 + sysTime.wMinute * 60 + sysTime.wSecond)) ) / 60 + 1;

  0013b	0f b7 45 f4	 movzx	 eax, WORD PTR _sysTime$2[ebp+8]
  0013f	2b d0		 sub	 edx, eax
  00141	83 c2 18	 add	 edx, 24			; 00000018H

; 2414 : 				break;

  00144	eb 0b		 jmp	 SHORT $LN179@GetRemainT
$LN174@GetRemainT:
  00146	8b 55 e8	 mov	 edx, DWORD PTR _iMIN_HOUR$1$[ebp]
  00149	eb e5		 jmp	 SHORT $LN6@GetRemainT
$LN16@GetRemainT:

; 2408 : 		{
; 2409 : 			case 1:
; 2410 : 				iREMAIN_MINUTE = (((iMIN_HOUR * 60 * 60 + iMIN_MINUTE * 60) - (sysTime.wHour * 60 * 60 + sysTime.wMinute * 60 + sysTime.wSecond))) /60 + 1;

  0014b	0f b7 45 f4	 movzx	 eax, WORD PTR _sysTime$2[ebp+8]
  0014f	2b d0		 sub	 edx, eax
$LN179@GetRemainT:
  00151	0f b7 45 f6	 movzx	 eax, WORD PTR _sysTime$2[ebp+10]
  00155	8b ca		 mov	 ecx, edx
  00157	c1 e1 04	 shl	 ecx, 4
  0015a	2b ca		 sub	 ecx, edx
  0015c	c1 e1 02	 shl	 ecx, 2
  0015f	2b c8		 sub	 ecx, eax
  00161	0f b7 45 f8	 movzx	 eax, WORD PTR _sysTime$2[ebp+12]
  00165	03 4d e4	 add	 ecx, DWORD PTR _iMIN_MINUTE$1$[ebp]
  00168	8b f1		 mov	 esi, ecx
  0016a	c1 e6 04	 shl	 esi, 4
  0016d	2b f1		 sub	 esi, ecx
  0016f	c1 e6 02	 shl	 esi, 2
  00172	2b f0		 sub	 esi, eax
  00174	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00179	f7 ee		 imul	 esi
  0017b	03 d6		 add	 edx, esi
  0017d	c1 fa 05	 sar	 edx, 5
  00180	8b c2		 mov	 eax, edx
  00182	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00185	40		 inc	 eax
  00186	03 c2		 add	 eax, edx
$LN8@GetRemainT:

; 2415 : 			default:
; 2416 : 				iREMAIN_MINUTE = -1;
; 2417 : 				break;
; 2418 : 		}
; 2419 : 	}
; 2420 : 
; 2421 : 	if ( iREMAIN_MINUTE < 0 )

  00188	85 c0		 test	 eax, eax
  0018a	79 02		 jns	 SHORT $LN19@GetRemainT
$LN172@GetRemainT:

; 2422 : 		iREMAIN_MINUTE = 0;
; 2423 : 
; 2424 : 	return iREMAIN_MINUTE;

  0018c	33 c0		 xor	 eax, eax
$LN19@GetRemainT:

; 2425 : }

  0018e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00191	5e		 pop	 esi
  00192	33 cd		 xor	 ecx, ebp
  00194	5b		 pop	 ebx
  00195	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019a	8b e5		 mov	 esp, ebp
  0019c	5d		 pop	 ebp
  0019d	c2 04 00	 ret	 4
?GetRemainTime@CChaosCastle@@QAEHH@Z ENDP		; CChaosCastle::GetRemainTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?GetCurPlayUser@CChaosCastle@@QAEHH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_iChaosCastleIndex$ = 8					; size = 4
?GetCurPlayUser@CChaosCastle@@QAEHH@Z PROC		; CChaosCastle::GetCurPlayUser, COMDAT
; _this$ = ecx

; 2316 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b d1		 mov	 edx, ecx

; 2317 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _iChaosCastleIndex$[ebp]
  00009	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
  0000c	85 c9		 test	 ecx, ecx
  0000e	78 6c		 js	 SHORT $LN15@GetCurPlay
  00010	33 c0		 xor	 eax, eax
  00012	83 f9 06	 cmp	 ecx, 6
  00015	0f 9e c0	 setle	 al
  00018	85 c0		 test	 eax, eax
  0001a	74 60		 je	 SHORT $LN15@GetCurPlay

; 2320 : 	}
; 2321 : 
; 2322 : 	int iPlayUser = 0;

  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	33 ff		 xor	 edi, edi
  00021	69 c1 68 08 00
	00		 imul	 eax, ecx, 2152
  00027	8d 72 68	 lea	 esi, DWORD PTR [edx+104]
  0002a	8d 5f 46	 lea	 ebx, DWORD PTR [edi+70]
  0002d	03 f0		 add	 esi, eax
  0002f	90		 npad	 1
$LL4@GetCurPlay:

; 2325 : 	{
; 2326 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex != -1 )

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	83 f8 ff	 cmp	 eax, -1
  00035	74 32		 je	 SHORT $LN2@GetCurPlay

; 2327 : 		{
; 2328 : 			if ( gObjIsConnected(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex) == TRUE &&

  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0003d	83 c4 04	 add	 esp, 4
  00040	83 f8 01	 cmp	 eax, 1
  00043	75 24		 jne	 SHORT $LN2@GetCurPlay
  00045	ff 75 08	 push	 DWORD PTR _iChaosCastleIndex$[ebp]
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0004b	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap
  00050	69 16 40 27 00
	00		 imul	 edx, DWORD PTR [esi], 10048
  00056	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005c	0f b6 8c 0a 23
	01 00 00	 movzx	 ecx, BYTE PTR [edx+ecx+291]
  00064	3b c8		 cmp	 ecx, eax
  00066	75 01		 jne	 SHORT $LN2@GetCurPlay

; 2329 : 				 gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].MapNumber == GetMap(iChaosCastleIndex) )
; 2330 : 			{
; 2331 : 				iPlayUser++;

  00068	47		 inc	 edi
$LN2@GetCurPlay:

; 2323 : 
; 2324 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  00069	83 c6 14	 add	 esi, 20			; 00000014H
  0006c	83 eb 01	 sub	 ebx, 1
  0006f	75 bf		 jne	 SHORT $LL4@GetCurPlay

; 2332 : 			}
; 2333 : 		}
; 2334 : 	}
; 2335 : 
; 2336 : 	return iPlayUser;

  00071	8b c7		 mov	 eax, edi
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx

; 2337 : }

  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
$LN15@GetCurPlay:

; 2318 : 	{
; 2319 : 		return -1;

  0007c	83 c8 ff	 or	 eax, -1

; 2337 : }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
?GetCurPlayUser@CChaosCastle@@QAEHH@Z ENDP		; CChaosCastle::GetCurPlayUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?GetCurEnteredUser@CChaosCastle@@QAEHH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
?GetCurEnteredUser@CChaosCastle@@QAEHH@Z PROC		; CChaosCastle::GetCurEnteredUser, COMDAT
; _this$ = ecx

; 2302 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2303 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iChaosCastleIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 1a		 js	 SHORT $LN6@GetCurEnte
  0000a	33 c0		 xor	 eax, eax
  0000c	83 fa 06	 cmp	 edx, 6
  0000f	0f 9e c0	 setle	 al
  00012	85 c0		 test	 eax, eax
  00014	74 0e		 je	 SHORT $LN6@GetCurEnte

; 2306 : 	}
; 2307 : 
; 2308 : 	return this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_ENTERED_USER;

  00016	69 c2 68 08 00
	00		 imul	 eax, edx, 2152
  0001c	8b 44 08 50	 mov	 eax, DWORD PTR [eax+ecx+80]

; 2309 : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN6@GetCurEnte:

; 2304 : 	{
; 2305 : 		return -1;

  00024	83 c8 ff	 or	 eax, -1

; 2309 : }

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?GetCurEnteredUser@CChaosCastle@@QAEHH@Z ENDP		; CChaosCastle::GetCurEnteredUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?GetCurrentState@CChaosCastle@@QAEHH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
?GetCurrentState@CChaosCastle@@QAEHH@Z PROC		; CChaosCastle::GetCurrentState, COMDAT
; _this$ = ecx

; 2288 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2289 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iChaosCastleIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 1a		 js	 SHORT $LN6@GetCurrent
  0000a	33 c0		 xor	 eax, eax
  0000c	83 fa 06	 cmp	 edx, 6
  0000f	0f 9e c0	 setle	 al
  00012	85 c0		 test	 eax, eax
  00014	74 0e		 je	 SHORT $LN6@GetCurrent

; 2292 : 	}
; 2293 : 
; 2294 : 	return this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_STATE;

  00016	69 c2 68 08 00
	00		 imul	 eax, edx, 2152
  0001c	8b 44 08 2c	 mov	 eax, DWORD PTR [eax+ecx+44]

; 2295 : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN6@GetCurrent:

; 2290 : 	{
; 2291 : 		return -1;

  00024	83 c8 ff	 or	 eax, -1

; 2295 : }

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?GetCurrentState@CChaosCastle@@QAEHH@Z ENDP		; CChaosCastle::GetCurrentState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SendAllLoserFailMessage@CChaosCastle@@QAEXHH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_iChaosCastleIndex$ = 8					; size = 4
_iWinnerIndex$ = 12					; size = 4
?SendAllLoserFailMessage@CChaosCastle@@QAEXHH@Z PROC	; CChaosCastle::SendAllLoserFailMessage, COMDAT
; _this$ = ecx

; 1541 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1542 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00004	8b 55 08	 mov	 edx, DWORD PTR _iChaosCastleIndex$[ebp]
  00007	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000a	85 d2		 test	 edx, edx
  0000c	0f 88 9c 00 00
	00		 js	 $LN3@SendAllLos
  00012	33 c0		 xor	 eax, eax
  00014	83 fa 06	 cmp	 edx, 6
  00017	0f 9e c0	 setle	 al
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 8c 00 00
	00		 je	 $LN3@SendAllLos

; 1543 : 	{
; 1544 : 		return;
; 1545 : 	}
; 1546 : 
; 1547 : 	if ( OBJMAX_RANGE(iWinnerIndex) == FALSE && iWinnerIndex != -1)	

  00022	53		 push	 ebx
  00023	8b 5d 0c	 mov	 ebx, DWORD PTR _iWinnerIndex$[ebp]
  00026	85 db		 test	 ebx, ebx
  00028	78 0f		 js	 SHORT $LN19@SendAllLos
  0002a	33 c0		 xor	 eax, eax
  0002c	81 fb eb 2c 00
	00		 cmp	 ebx, 11499		; 00002cebH
  00032	0f 9e c0	 setle	 al
  00035	85 c0		 test	 eax, eax
  00037	75 05		 jne	 SHORT $LN6@SendAllLos
$LN19@SendAllLos:
  00039	83 fb ff	 cmp	 ebx, -1
  0003c	75 6f		 jne	 SHORT $LN20@SendAllLos
$LN6@SendAllLos:

; 1548 : 	{
; 1549 : 		return;
; 1550 : 	}
; 1551 : 
; 1552 : 
; 1553 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  0003e	69 c2 68 08 00
	00		 imul	 eax, edx, 2152
  00044	56		 push	 esi
  00045	8d 71 68	 lea	 esi, DWORD PTR [ecx+104]
  00048	57		 push	 edi
  00049	bf 46 00 00 00	 mov	 edi, 70			; 00000046H
  0004e	03 f0		 add	 esi, eax
$LL4@SendAllLos:

; 1554 : 	{
; 1555 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex != -1 )

  00050	8b 06		 mov	 eax, DWORD PTR [esi]
  00052	83 f8 ff	 cmp	 eax, -1
  00055	74 4c		 je	 SHORT $LN2@SendAllLos

; 1556 : 		{
; 1557 : 			if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex != iWinnerIndex )

  00057	3b c3		 cmp	 eax, ebx
  00059	74 48		 je	 SHORT $LN2@SendAllLos

; 1558 : 			{
; 1559 : 				if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_bSendQuitMsg == false )

  0005b	80 7e 10 00	 cmp	 BYTE PTR [esi+16], 0
  0005f	75 42		 jne	 SHORT $LN2@SendAllLos

; 1560 : 				{
; 1561 : 					this->RewardUserEXP(iChaosCastleIndex, gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].m_cChaosCastleSubIndex, false);

  00061	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048
  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006c	6a 00		 push	 0
  0006e	0f be 84 01 3e
	12 00 00	 movsx	 eax, BYTE PTR [ecx+eax+4670]
  00076	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00079	50		 push	 eax
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 ?RewardUserEXP@CChaosCastle@@QAEXHHH@Z ; CChaosCastle::RewardUserEXP

; 1562 : 					::GCServerMsgStringSend(lMsg.Get(MSGGET(4, 211)), this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex, 1);

  00080	6a 01		 push	 1
  00082	ff 36		 push	 DWORD PTR [esi]
  00084	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00089	68 d3 04 00 00	 push	 1235			; 000004d3H
  0008e	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00099	8b 55 08	 mov	 edx, DWORD PTR _iChaosCastleIndex$[ebp]
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1563 : 					this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_bSendQuitMsg = true;

  0009f	c6 46 10 01	 mov	 BYTE PTR [esi+16], 1
$LN2@SendAllLos:

; 1548 : 	{
; 1549 : 		return;
; 1550 : 	}
; 1551 : 
; 1552 : 
; 1553 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  000a3	83 c6 14	 add	 esi, 20			; 00000014H
  000a6	83 ef 01	 sub	 edi, 1
  000a9	75 a5		 jne	 SHORT $LL4@SendAllLos
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
$LN20@SendAllLos:
  000ad	5b		 pop	 ebx
$LN3@SendAllLos:

; 1564 : 				}
; 1565 : 			}
; 1566 : 		}
; 1567 : 	}
; 1568 : }

  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 08 00	 ret	 8
?SendAllLoserFailMessage@CChaosCastle@@QAEXHH@Z ENDP	; CChaosCastle::SendAllLoserFailMessage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SendFailMessage@CChaosCastle@@QAEXHH@Z
_TEXT	SEGMENT
tv212 = 8						; size = 4
_iChaosCastleIndex$ = 8					; size = 4
_iLoserIndex$ = 12					; size = 4
?SendFailMessage@CChaosCastle@@QAEXHH@Z PROC		; CChaosCastle::SendFailMessage, COMDAT
; _this$ = ecx

; 1509 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1510 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iChaosCastleIndex$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	0f 88 8a 00 00
	00		 js	 $LN1@SendFailMe
  00011	33 c0		 xor	 eax, eax
  00013	83 fa 06	 cmp	 edx, 6
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	74 7e		 je	 SHORT $LN1@SendFailMe

; 1511 : 	{
; 1512 : 		return;
; 1513 : 	}
; 1514 : 
; 1515 : 	if ( OBJMAX_RANGE(iLoserIndex) == FALSE )

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR _iLoserIndex$[ebp]
  00020	85 c9		 test	 ecx, ecx
  00022	78 77		 js	 SHORT $LN1@SendFailMe
  00024	33 c0		 xor	 eax, eax
  00026	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  0002c	0f 9e c0	 setle	 al
  0002f	85 c0		 test	 eax, eax
  00031	74 68		 je	 SHORT $LN1@SendFailMe

; 1516 : 	{
; 1517 : 		return;
; 1518 : 	}
; 1519 : 
; 1520 : 	int iChaosCastleSubIndex = gObj[iLoserIndex].m_cChaosCastleSubIndex;

  00033	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048
  00039	57		 push	 edi
  0003a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00040	0f be 8c 38 3e
	12 00 00	 movsx	 ecx, BYTE PTR [eax+edi+4670]

; 1521 : 
; 1522 : 	if ( CC_SUB_FLOOR_RANGE(iChaosCastleSubIndex) == FALSE )

  00048	85 c9		 test	 ecx, ecx
  0004a	78 4e		 js	 SHORT $LN13@SendFailMe
  0004c	33 c0		 xor	 eax, eax
  0004e	83 f9 45	 cmp	 ecx, 69			; 00000045H
  00051	0f 9e c0	 setle	 al
  00054	85 c0		 test	 eax, eax
  00056	74 42		 je	 SHORT $LN13@SendFailMe

; 1523 : 	{
; 1524 : 		return;
; 1525 : 	}
; 1526 : 
; 1527 : 	if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_bSendQuitMsg == true )

  00058	53		 push	 ebx
  00059	69 da 68 08 00
	00		 imul	 ebx, edx, 2152
  0005f	8d 41 06	 lea	 eax, DWORD PTR [ecx+6]
  00062	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00065	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  00068	03 c6		 add	 eax, esi
  0006a	89 45 08	 mov	 DWORD PTR tv212[ebp], eax
  0006d	80 38 01	 cmp	 BYTE PTR [eax], 1
  00070	74 27		 je	 SHORT $LN14@SendFailMe

; 1528 : 	{
; 1529 : 		return;
; 1530 : 	}
; 1531 : 
; 1532 : 	this->RewardUserEXP(iChaosCastleIndex, gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_iIndex].m_cChaosCastleSubIndex, false );

  00072	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]
  00075	8b ce		 mov	 ecx, esi
  00077	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0007a	69 44 30 68 40
	27 00 00	 imul	 eax, DWORD PTR [eax+esi+104], 10048
  00082	6a 00		 push	 0
  00084	0f be 84 38 3e
	12 00 00	 movsx	 eax, BYTE PTR [eax+edi+4670]
  0008c	50		 push	 eax
  0008d	52		 push	 edx
  0008e	e8 00 00 00 00	 call	 ?RewardUserEXP@CChaosCastle@@QAEXHHH@Z ; CChaosCastle::RewardUserEXP

; 1533 : 	this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_bSendQuitMsg = true;

  00093	8b 45 08	 mov	 eax, DWORD PTR tv212[ebp]
  00096	c6 00 01	 mov	 BYTE PTR [eax], 1
$LN14@SendFailMe:
  00099	5b		 pop	 ebx
$LN13@SendFailMe:
  0009a	5f		 pop	 edi
$LN1@SendFailMe:
  0009b	5e		 pop	 esi

; 1534 : }

  0009c	5d		 pop	 ebp
  0009d	c2 08 00	 ret	 8
?SendFailMessage@CChaosCastle@@QAEXHH@Z ENDP		; CChaosCastle::SendFailMessage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SendWinMessage@CChaosCastle@@QAEXHH@Z
_TEXT	SEGMENT
tv176 = 8						; size = 4
_iChaosCastleIndex$ = 8					; size = 4
_iWinnerIndex$ = 12					; size = 4
?SendWinMessage@CChaosCastle@@QAEXHH@Z PROC		; CChaosCastle::SendWinMessage, COMDAT
; _this$ = ecx

; 1476 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1477 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iChaosCastleIndex$[ebp]
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	85 d2		 test	 edx, edx
  0000b	0f 88 93 00 00
	00		 js	 $LN1@SendWinMes
  00011	33 c0		 xor	 eax, eax
  00013	83 fa 06	 cmp	 edx, 6
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	0f 84 83 00 00
	00		 je	 $LN1@SendWinMes

; 1478 : 	{
; 1479 : 		return;
; 1480 : 	}
; 1481 : 
; 1482 : 	if ( OBJMAX_RANGE(iWinnerIndex) == FALSE )

  00021	56		 push	 esi
  00022	8b 75 0c	 mov	 esi, DWORD PTR _iWinnerIndex$[ebp]
  00025	85 f6		 test	 esi, esi
  00027	78 7a		 js	 SHORT $LN13@SendWinMes
  00029	33 c0		 xor	 eax, eax
  0002b	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  00031	0f 9e c0	 setle	 al
  00034	85 c0		 test	 eax, eax
  00036	74 6b		 je	 SHORT $LN13@SendWinMes

; 1483 : 	{
; 1484 : 		return;
; 1485 : 	}
; 1486 : 
; 1487 : 	int iChaosCastleSubIndex = gObj[iWinnerIndex].m_cChaosCastleSubIndex;

  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003d	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  00043	57		 push	 edi
  00044	0f be bc 01 3e
	12 00 00	 movsx	 edi, BYTE PTR [ecx+eax+4670]

; 1488 : 
; 1489 : 	if ( CC_SUB_FLOOR_RANGE(iChaosCastleSubIndex) == FALSE )

  0004c	85 ff		 test	 edi, edi
  0004e	78 52		 js	 SHORT $LN14@SendWinMes
  00050	33 c0		 xor	 eax, eax
  00052	83 ff 45	 cmp	 edi, 69			; 00000045H
  00055	0f 9e c0	 setle	 al
  00058	85 c0		 test	 eax, eax
  0005a	74 46		 je	 SHORT $LN14@SendWinMes

; 1490 : 	{
; 1491 : 		return;
; 1492 : 	}
; 1493 : 
; 1494 : 	if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_bSendQuitMsg == true )

  0005c	69 c2 68 08 00
	00		 imul	 eax, edx, 2152
  00062	8d 4f 06	 lea	 ecx, DWORD PTR [edi+6]
  00065	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  00068	03 c3		 add	 eax, ebx
  0006a	80 3c 88 01	 cmp	 BYTE PTR [eax+ecx*4], 1
  0006e	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00071	89 45 08	 mov	 DWORD PTR tv176[ebp], eax
  00074	74 2c		 je	 SHORT $LN14@SendWinMes

; 1495 : 	{
; 1496 : 		return;
; 1497 : 	}
; 1498 : 
; 1499 : 	this->RewardUserEXP(iChaosCastleIndex, gObj[iWinnerIndex].m_cChaosCastleSubIndex, true );

  00076	6a 01		 push	 1
  00078	57		 push	 edi
  00079	52		 push	 edx
  0007a	8b cb		 mov	 ecx, ebx
  0007c	e8 00 00 00 00	 call	 ?RewardUserEXP@CChaosCastle@@QAEXHHH@Z ; CChaosCastle::RewardUserEXP

; 1500 : 	::GCServerMsgStringSend(lMsg.Get(MSGGET(4, 210)), iWinnerIndex, 1);

  00081	6a 01		 push	 1
  00083	56		 push	 esi
  00084	68 d2 04 00 00	 push	 1234			; 000004d2H
  00089	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0008e	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 1501 : 	this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_bSendQuitMsg = true;

  00099	8b 45 08	 mov	 eax, DWORD PTR tv176[ebp]
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009f	c6 00 01	 mov	 BYTE PTR [eax], 1
$LN14@SendWinMes:
  000a2	5f		 pop	 edi
$LN13@SendWinMes:
  000a3	5e		 pop	 esi
$LN1@SendWinMes:
  000a4	5b		 pop	 ebx

; 1502 : }

  000a5	5d		 pop	 ebp
  000a6	c2 08 00	 ret	 8
?SendWinMessage@CChaosCastle@@QAEXHH@Z ENDP		; CChaosCastle::SendWinMessage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SendNoticeState@CChaosCastle@@QAEXHH@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -24					; size = 4
_pMsg$ = -20						; size = 14
__$ArrayPad$ = -4					; size = 4
_iChaosCastleIndex$ = 8					; size = 4
_iPlayState$ = 12					; size = 4
?SendNoticeState@CChaosCastle@@QAEXHH@Z PROC		; CChaosCastle::SendNoticeState, COMDAT
; _this$ = ecx

; 1440 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _iChaosCastleIndex$[ebp]
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx
  00017	89 75 e8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi

; 1441 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  0001a	85 db		 test	 ebx, ebx
  0001c	0f 88 cb 00 00
	00		 js	 $LN3@SendNotice
  00022	33 c0		 xor	 eax, eax
  00024	83 fb 06	 cmp	 ebx, 6
  00027	0f 9e c0	 setle	 al
  0002a	85 c0		 test	 eax, eax
  0002c	0f 84 bb 00 00
	00		 je	 $LN3@SendNotice

; 1442 : 	{
; 1443 : 		return;
; 1444 : 	}
; 1445 : 
; 1446 : 	PMSG_STATEBLOODCASTLE pMsg;
; 1447 : 
; 1448 : 	PHeadSetB((LPBYTE)&pMsg, 0x9B, sizeof(PMSG_STATEBLOODCASTLE));

  00032	57		 push	 edi
  00033	6a 0e		 push	 14			; 0000000eH
  00035	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00038	68 9b 00 00 00	 push	 155			; 0000009bH
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 1449 : 	pMsg.btPlayState = iPlayState;

  00043	8a 45 0c	 mov	 al, BYTE PTR _iPlayState$[ebp]
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1450 : 	pMsg.wRemainSec = this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_REMAIN_MSEC / 1000;

  00049	69 fb 68 08 00
	00		 imul	 edi, ebx, 2152

; 1451 : 	pMsg.wMaxKillMonster = this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_FIRST_USER_COUNT + this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_FIRST_MONSTER_COUNT;
; 1452 : 	pMsg.wCurKillMonster = this->GetCurPlayUser(iChaosCastleIndex) + this->GetMonsterListCount(iChaosCastleIndex);

  0004f	8b ce		 mov	 ecx, esi
  00051	88 45 ef	 mov	 BYTE PTR _pMsg$[ebp+3], al
  00054	03 fe		 add	 edi, esi
  00056	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  0005b	53		 push	 ebx
  0005c	f7 6f 3c	 imul	 DWORD PTR [edi+60]
  0005f	c1 fa 06	 sar	 edx, 6
  00062	8b c2		 mov	 eax, edx
  00064	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00067	03 c2		 add	 eax, edx
  00069	66 89 45 f0	 mov	 WORD PTR _pMsg$[ebp+4], ax
  0006d	66 8b 47 58	 mov	 ax, WORD PTR [edi+88]
  00071	66 03 47 54	 add	 ax, WORD PTR [edi+84]
  00075	66 89 45 f2	 mov	 WORD PTR _pMsg$[ebp+6], ax
  00079	e8 00 00 00 00	 call	 ?GetMonsterListCount@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMonsterListCount
  0007e	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00081	8b f0		 mov	 esi, eax
  00083	53		 push	 ebx
  00084	e8 00 00 00 00	 call	 ?GetCurPlayUser@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetCurPlayUser
  00089	03 f0		 add	 esi, eax

; 1453 : 	pMsg.wUserHaveWeapon = -1;
; 1454 : 	pMsg.btWeaponNum = -1;

  0008b	c6 45 f8 ff	 mov	 BYTE PTR _pMsg$[ebp+12], 255 ; 000000ffH
  0008f	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00094	66 89 75 f4	 mov	 WORD PTR _pMsg$[ebp+8], si
  00098	66 89 45 f6	 mov	 WORD PTR _pMsg$[ebp+10], ax
  0009c	83 c7 68	 add	 edi, 104		; 00000068H
  0009f	be 46 00 00 00	 mov	 esi, 70			; 00000046H
$LL4@SendNotice:

; 1457 : 	{
; 1458 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex != -1 )

  000a4	8b 07		 mov	 eax, DWORD PTR [edi]
  000a6	83 f8 ff	 cmp	 eax, -1
  000a9	74 39		 je	 SHORT $LN2@SendNotice

; 1459 : 		{
; 1460 : 			if ( gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].Connected > PLAYER_LOGGED )

  000ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b1	69 d0 40 27 00
	00		 imul	 edx, eax, 10048
  000b7	83 7c 0a 04 02	 cmp	 DWORD PTR [edx+ecx+4], 2
  000bc	7e 26		 jle	 SHORT $LN2@SendNotice

; 1461 : 			{
; 1462 : 				if ( gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].m_cChaosCastleIndex != -1 && gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].m_cChaosCastleSubIndex != -1 )

  000be	80 bc 0a 3d 12
	00 00 ff	 cmp	 BYTE PTR [edx+ecx+4669], -1
  000c6	74 1c		 je	 SHORT $LN2@SendNotice
  000c8	80 bc 0a 3e 12
	00 00 ff	 cmp	 BYTE PTR [edx+ecx+4670], -1
  000d0	74 12		 je	 SHORT $LN2@SendNotice

; 1463 : 				{
; 1464 : 					DataSend(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex, (UCHAR*)&pMsg, pMsg.h.size);

  000d2	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  000d6	51		 push	 ecx
  000d7	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000da	51		 push	 ecx
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@SendNotice:

; 1455 : 
; 1456 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  000e4	83 c7 14	 add	 edi, 20			; 00000014H
  000e7	83 ee 01	 sub	 esi, 1
  000ea	75 b8		 jne	 SHORT $LL4@SendNotice
  000ec	5f		 pop	 edi
$LN3@SendNotice:

; 1465 : 				}
; 1466 : 			}
; 1467 : 		}
; 1468 : 	}
; 1469 : }

  000ed	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f0	5e		 pop	 esi
  000f1	33 cd		 xor	 ecx, ebp
  000f3	5b		 pop	 ebx
  000f4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 08 00	 ret	 8
?SendNoticeState@CChaosCastle@@QAEXHH@Z ENDP		; CChaosCastle::SendNoticeState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SendNoticeMessage@CChaosCastle@@QAEXHPAD@Z
_TEXT	SEGMENT
_pNotice$ = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
_iChaosCastleIndex$ = 8					; size = 4
_lpszMSG$ = 12						; size = 4
?SendNoticeMessage@CChaosCastle@@QAEXHPAD@Z PROC	; CChaosCastle::SendNoticeMessage, COMDAT
; _this$ = ecx

; 1410 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _iChaosCastleIndex$[ebp]
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _lpszMSG$[ebp]

; 1411 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  0001d	85 f6		 test	 esi, esi
  0001f	78 7c		 js	 SHORT $LN3@SendNotice
  00021	33 c0		 xor	 eax, eax
  00023	83 fe 06	 cmp	 esi, 6
  00026	0f 9e c0	 setle	 al
  00029	85 c0		 test	 eax, eax
  0002b	74 70		 je	 SHORT $LN3@SendNotice

; 1412 : 	{
; 1413 : 		return;
; 1414 : 	}
; 1415 : 
; 1416 : 	PMSG_NOTICE pNotice;
; 1417 : 	TNotice::MakeNoticeMsgEx((TNotice *)&pNotice, 0, lpszMSG);

  0002d	51		 push	 ecx
  0002e	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$[ebp]
  00034	6a 00		 push	 0
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx
  0003c	69 c6 68 08 00
	00		 imul	 eax, esi, 2152
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	8d 77 68	 lea	 esi, DWORD PTR [edi+104]
  00048	bf 46 00 00 00	 mov	 edi, 70			; 00000046H
  0004d	03 f0		 add	 esi, eax
  0004f	90		 npad	 1
$LL4@SendNotice:

; 1420 : 	{
; 1421 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex != -1 )

  00050	8b 16		 mov	 edx, DWORD PTR [esi]
  00052	83 fa ff	 cmp	 edx, -1
  00055	74 3e		 je	 SHORT $LN2@SendNotice

; 1422 : 		{
; 1423 : 			if ( gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].Connected > PLAYER_LOGGED )

  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005c	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00062	83 7c 01 04 02	 cmp	 DWORD PTR [ecx+eax+4], 2
  00067	7e 2c		 jle	 SHORT $LN2@SendNotice

; 1424 : 			{
; 1425 : 				if ( gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].m_cChaosCastleIndex != -1 && gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].m_cChaosCastleSubIndex != -1 )

  00069	80 bc 01 3d 12
	00 00 ff	 cmp	 BYTE PTR [ecx+eax+4669], -1
  00071	74 22		 je	 SHORT $LN2@SendNotice
  00073	80 bc 01 3e 12
	00 00 ff	 cmp	 BYTE PTR [ecx+eax+4670], -1
  0007b	74 18		 je	 SHORT $LN2@SendNotice

; 1426 : 				{
; 1427 : 					DataSend(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex, (UCHAR*)&pNotice, pNotice.h.size);

  0007d	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$[ebp+1]
  00084	50		 push	 eax
  00085	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$[ebp]
  0008b	50		 push	 eax
  0008c	52		 push	 edx
  0008d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@SendNotice:

; 1418 : 
; 1419 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  00095	83 c6 14	 add	 esi, 20			; 00000014H
  00098	83 ef 01	 sub	 edi, 1
  0009b	75 b3		 jne	 SHORT $LL4@SendNotice
$LN3@SendNotice:

; 1428 : 				}
; 1429 : 			}
; 1430 : 		}
; 1431 : 	}
; 1432 : 
; 1433 : }

  0009d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a0	5f		 pop	 edi
  000a1	33 cd		 xor	 ecx, ebp
  000a3	5e		 pop	 esi
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 08 00	 ret	 8
?SendNoticeMessage@CChaosCastle@@QAEXHPAD@Z ENDP	; CChaosCastle::SendNoticeMessage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SendChaosCastleAnyMsg@CChaosCastle@@QAEXPAEHH@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_iSize$ = 12						; size = 4
_iChaosCastleIndex$ = 16				; size = 4
?SendChaosCastleAnyMsg@CChaosCastle@@QAEXPAEHH@Z PROC	; CChaosCastle::SendChaosCastleAnyMsg, COMDAT
; _this$ = ecx

; 1384 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1385 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00003	8b 55 10	 mov	 edx, DWORD PTR _iChaosCastleIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 73		 js	 SHORT $LN3@SendChaosC
  0000a	33 c0		 xor	 eax, eax
  0000c	83 fa 06	 cmp	 edx, 6
  0000f	0f 9e c0	 setle	 al
  00012	85 c0		 test	 eax, eax
  00014	74 67		 je	 SHORT $LN3@SendChaosC

; 1386 : 	{
; 1387 : 		return;
; 1388 : 	}
; 1389 : 
; 1390 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  00016	53		 push	 ebx
  00017	8b 5d 0c	 mov	 ebx, DWORD PTR _iSize$[ebp]
  0001a	69 c2 68 08 00
	00		 imul	 eax, edx, 2152
  00020	56		 push	 esi
  00021	8d 71 68	 lea	 esi, DWORD PTR [ecx+104]
  00024	57		 push	 edi
  00025	bf 46 00 00 00	 mov	 edi, 70			; 00000046H
  0002a	03 f0		 add	 esi, eax
  0002c	0f 1f 40 00	 npad	 4
$LL4@SendChaosC:

; 1391 : 	{
; 1392 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex != -1 )

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	83 f8 ff	 cmp	 eax, -1
  00035	74 3b		 je	 SHORT $LN2@SendChaosC

; 1393 : 		{
; 1394 : 			if ( gObjIsConnected(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex) != FALSE )

  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0003d	83 c4 04	 add	 esp, 4
  00040	85 c0		 test	 eax, eax
  00042	74 2e		 je	 SHORT $LN2@SendChaosC

; 1395 : 			{
; 1396 : 				if ( gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].m_cChaosCastleIndex != -1 && gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].m_cChaosCastleSubIndex != -1 )

  00044	8b 16		 mov	 edx, DWORD PTR [esi]
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004b	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00051	80 bc 01 3d 12
	00 00 ff	 cmp	 BYTE PTR [ecx+eax+4669], -1
  00059	74 17		 je	 SHORT $LN2@SendChaosC
  0005b	80 bc 01 3e 12
	00 00 ff	 cmp	 BYTE PTR [ecx+eax+4670], -1
  00063	74 0d		 je	 SHORT $LN2@SendChaosC

; 1397 : 				{
; 1398 : 					DataSend(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex, lpMsg, iSize);

  00065	53		 push	 ebx
  00066	ff 75 08	 push	 DWORD PTR _lpMsg$[ebp]
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@SendChaosC:

; 1386 : 	{
; 1387 : 		return;
; 1388 : 	}
; 1389 : 
; 1390 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  00072	83 c6 14	 add	 esi, 20			; 00000014H
  00075	83 ef 01	 sub	 edi, 1
  00078	75 b6		 jne	 SHORT $LL4@SendChaosC
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
$LN3@SendChaosC:

; 1399 : 				}
; 1400 : 			}
; 1401 : 		}
; 1402 : 	}
; 1403 : }

  0007d	5d		 pop	 ebp
  0007e	c2 0c 00	 ret	 12			; 0000000cH
?SendChaosCastleAnyMsg@CChaosCastle@@QAEXPAEHH@Z ENDP	; CChaosCastle::SendChaosCastleAnyMsg
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SendAllUserAnyMsg@CChaosCastle@@QAEXPAEH@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_iSize$ = 12						; size = 4
?SendAllUserAnyMsg@CChaosCastle@@QAEXPAEH@Z PROC	; CChaosCastle::SendAllUserAnyMsg, COMDAT
; _this$ = ecx

; 1366 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1367 : 	for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _iSize$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  0000e	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
$LL4@SendAllUse:

; 1368 : 	{
; 1369 : 		if ( gObj[i].Connected == PLAYER_PLAYING )

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00018	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  0001d	75 14		 jne	 SHORT $LN2@SendAllUse

; 1370 : 		{
; 1371 : 			if ( gObj[i].Type == OBJ_USER )

  0001f	80 7c 06 50 01	 cmp	 BYTE PTR [esi+eax+80], 1
  00024	75 0d		 jne	 SHORT $LN2@SendAllUse

; 1372 : 			{
; 1373 : 				DataSend(i, lpMsg, iSize);

  00026	53		 push	 ebx
  00027	ff 75 08	 push	 DWORD PTR _lpMsg$[ebp]
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@SendAllUse:

; 1367 : 	for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  00033	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00039	47		 inc	 edi
  0003a	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  00040	7c d1		 jl	 SHORT $LL4@SendAllUse
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx

; 1374 : 			}
; 1375 : 		}
; 1376 : 	}
; 1377 : }

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
?SendAllUserAnyMsg@CChaosCastle@@QAEXPAEH@Z ENDP	; CChaosCastle::SendAllUserAnyMsg
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SearchNDropMonsterItem@CChaosCastle@@QAEXHHH@Z
_TEXT	SEGMENT
_it$ = 8						; size = 4
_iChaosCastleIndex$ = 8					; size = 4
tv363 = 12						; size = 4
_iMonsterIndex$ = 12					; size = 4
_iMaxHitUserIndex$ = 16					; size = 4
?SearchNDropMonsterItem@CChaosCastle@@QAEXHHH@Z PROC	; CChaosCastle::SearchNDropMonsterItem, COMDAT
; _this$ = ecx

; 1318 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b d1		 mov	 edx, ecx
  00008	57		 push	 edi

; 1319 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00009	8b 7d 08	 mov	 edi, DWORD PTR _iChaosCastleIndex$[ebp]
  0000c	85 ff		 test	 edi, edi
  0000e	0f 88 18 01 00
	00		 js	 $LN7@SearchNDro
  00014	33 c0		 xor	 eax, eax
  00016	83 ff 06	 cmp	 edi, 6
  00019	0f 9e c0	 setle	 al
  0001c	85 c0		 test	 eax, eax
  0001e	0f 84 08 01 00
	00		 je	 $LN7@SearchNDro

; 1320 : 	{
; 1321 : 		return;
; 1322 : 	}
; 1323 : 
; 1324 : 	if ( OBJMAX_RANGE(iMonsterIndex) == FALSE )

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _iMonsterIndex$[ebp]
  00027	85 c9		 test	 ecx, ecx
  00029	0f 88 fd 00 00
	00		 js	 $LN7@SearchNDro
  0002f	33 c0		 xor	 eax, eax
  00031	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00037	0f 9e c0	 setle	 al
  0003a	85 c0		 test	 eax, eax
  0003c	0f 84 ea 00 00
	00		 je	 $LN7@SearchNDro

; 1325 : 	{
; 1326 : 		return;
; 1327 : 	}
; 1328 : 
; 1329 : 	if ( OBJMAX_RANGE(iMaxHitUserIndex) == FALSE )

  00042	8b 45 10	 mov	 eax, DWORD PTR _iMaxHitUserIndex$[ebp]
  00045	85 c0		 test	 eax, eax
  00047	0f 88 df 00 00
	00		 js	 $LN7@SearchNDro
  0004d	53		 push	 ebx
  0004e	33 db		 xor	 ebx, ebx
  00050	3d eb 2c 00 00	 cmp	 eax, 11499		; 00002cebH
  00055	0f 9e c3	 setle	 bl
  00058	85 db		 test	 ebx, ebx
  0005a	0f 84 cb 00 00
	00		 je	 $LN67@SearchNDro

; 1330 : 	{
; 1331 : 		return;
; 1332 : 	}
; 1333 : 
; 1334 : 	std::map<int, _MONSTER_ITEM_DROP>::iterator it = this->m_stChaosCastleData[iChaosCastleIndex].m_mapMonsterItemList.find(iMonsterIndex);

  00060	56		 push	 esi
  00061	69 f7 68 08 00
	00		 imul	 esi, edi, 2152
  00067	8d 45 0c	 lea	 eax, DWORD PTR _iMonsterIndex$[ebp]
  0006a	50		 push	 eax
  0006b	8d 45 08	 lea	 eax, DWORD PTR _it$[ebp]
  0006e	50		 push	 eax
  0006f	03 f2		 add	 esi, edx
  00071	8d 8e 88 08 00
	00		 lea	 ecx, DWORD PTR [esi+2184]
  00077	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::find
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 334  : 		return (this->_Ptr == _Right._Ptr);

  0007c	8b 45 08	 mov	 eax, DWORD PTR _it$[ebp]
  0007f	3b 86 88 08 00
	00		 cmp	 eax, DWORD PTR [esi+2184]
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 1336 : 	if ( it == this->m_stChaosCastleData[iChaosCastleIndex].m_mapMonsterItemList.end() )

  00085	0f 84 9f 00 00
	00		 je	 $LN68@SearchNDro

; 1337 : 	{
; 1338 : 		return;
; 1339 : 	}
; 1340 : 
; 1341 : 	_MONSTER_ITEM_DROP MID = it->second;

  0008b	8b 70 18	 mov	 esi, DWORD PTR [eax+24]

; 1342 : 	int iType = MID.m_iItemKind;
; 1343 : 	int iLevel = 0;

  0008e	33 d2		 xor	 edx, edx

; 1344 : 	
; 1345 : 	if ( iType == ITEMGET(13,15) ) // Fruit

  00090	81 fe 0f 1a 00
	00		 cmp	 esi, 6671		; 00001a0fH
  00096	75 14		 jne	 SHORT $LN69@SearchNDro

; 1346 : 	{
; 1347 : 		iLevel = rand()%4;

  00098	e8 00 00 00 00	 call	 _rand
  0009d	8b d0		 mov	 edx, eax
  0009f	81 e2 03 00 00
	80		 and	 edx, -2147483645	; 80000003H
  000a5	79 05		 jns	 SHORT $LN69@SearchNDro
  000a7	4a		 dec	 edx
  000a8	83 ca fc	 or	 edx, -4			; fffffffcH
  000ab	42		 inc	 edx
$LN69@SearchNDro:

; 1348 : 	}
; 1349 : 
; 1350 : 	::ItemSerialCreateSend(gObj[iMaxHitUserIndex].m_Index, gObj[iMaxHitUserIndex].MapNumber, gObj[iMaxHitUserIndex].X,

  000ac	8b 45 10	 mov	 eax, DWORD PTR _iMaxHitUserIndex$[ebp]
  000af	6a 00		 push	 0
  000b1	6a 00		 push	 0
  000b3	6a 00		 push	 0
  000b5	6a 00		 push	 0
  000b7	50		 push	 eax
  000b8	6a 00		 push	 0
  000ba	6a 00		 push	 0
  000bc	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048
  000c2	6a 00		 push	 0
  000c4	6a 00		 push	 0
  000c6	52		 push	 edx
  000c7	56		 push	 esi
  000c8	89 4d 0c	 mov	 DWORD PTR tv363[ebp], ecx
  000cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d1	8b 55 0c	 mov	 edx, DWORD PTR tv363[ebp]
  000d4	0f b6 84 0a 21
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+289]
  000dc	50		 push	 eax
  000dd	0f b6 84 0a 20
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+288]
  000e5	50		 push	 eax
  000e6	0f b6 84 0a 23
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+291]
  000ee	50		 push	 eax
  000ef	ff 34 0a	 push	 DWORD PTR [edx+ecx]
  000f2	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend
  000f7	83 c4 3c	 add	 esp, 60			; 0000003cH

; 1351 : 		gObj[iMaxHitUserIndex].Y, iType, iLevel, 0, 0, 0, 0, iMaxHitUserIndex, 0, 0);
; 1352 : 
; 1353 : 	if ( OBJMAX_RANGE(iMaxHitUserIndex) != FALSE )

  000fa	85 db		 test	 ebx, ebx
  000fc	74 2c		 je	 SHORT $LN68@SearchNDro

; 1354 : 	{
; 1355 : 		LogAddTD("[Chaos Castle] (%d) Monster Dropped ChaosCastle Item To [%s][%s] (Item:%s)",

  000fe	8b 4d 0c	 mov	 ecx, DWORD PTR tv363[ebp]
  00101	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00107	6b c6 70	 imul	 eax, esi, 112
  0010a	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  0010f	50		 push	 eax
  00110	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00113	50		 push	 eax
  00114	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00117	50		 push	 eax
  00118	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0011b	50		 push	 eax
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@HKCNHNKH@?$FLChaos?5Castle?$FN?5?$CI?$CFd?$CJ?5Monster?5Drop@
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00127	83 c4 14	 add	 esp, 20			; 00000014H
$LN68@SearchNDro:
  0012a	5e		 pop	 esi
$LN67@SearchNDro:
  0012b	5b		 pop	 ebx
$LN7@SearchNDro:
  0012c	5f		 pop	 edi

; 1356 : 			iChaosCastleIndex+1, gObj[iMaxHitUserIndex].AccountID, gObj[iMaxHitUserIndex].Name,
; 1357 : 			ItemAttribute[iType].Name);
; 1358 : 	}
; 1359 : }

  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c2 0c 00	 ret	 12			; 0000000cH
?SearchNDropMonsterItem@CChaosCastle@@QAEXHHH@Z ENDP	; CChaosCastle::SearchNDropMonsterItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.h
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SetItemsToMonster@CChaosCastle@@QAEXH@Z
_TEXT	SEGMENT
$T1 = -56						; size = 12
$T2 = -44						; size = 8
_MID$ = -36						; size = 8
$T3 = -32						; size = 4
$T4 = -28						; size = 4
tv764 = -24						; size = 4
_iMAX_MONSTER$1$ = -20					; size = 4
tv765 = -16						; size = 4
_iB$1$ = -12						; size = 4
tv761 = -8						; size = 4
_this$1$ = -4						; size = 4
_iChaosCastleIndex$ = 8					; size = 4
?SetItemsToMonster@CChaosCastle@@QAEXH@Z PROC		; CChaosCastle::SetItemsToMonster, COMDAT
; _this$ = ecx

; 1276 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	53		 push	 ebx

; 1277 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _iChaosCastleIndex$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 75 fc	 mov	 DWORD PTR _this$1$[ebp], esi
  00010	85 db		 test	 ebx, ebx
  00012	0f 88 2e 01 00
	00		 js	 $LN3@SetItemsTo
  00018	33 c0		 xor	 eax, eax
  0001a	83 fb 06	 cmp	 ebx, 6
  0001d	0f 9e c0	 setle	 al
  00020	85 c0		 test	 eax, eax
  00022	0f 84 1e 01 00
	00		 je	 $LN3@SetItemsTo

; 1278 : 	{
; 1279 : 		return;
; 1280 : 	}
; 1281 : 
; 1282 : 	int iMAX_MONSTER = this->GetMonsterListCount(iChaosCastleIndex);

  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ?GetMonsterListCount@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMonsterListCount
  0002e	89 45 ec	 mov	 DWORD PTR _iMAX_MONSTER$1$[ebp], eax

; 1283 : 
; 1284 : 	if ( iMAX_MONSTER <= 0 )

  00031	85 c0		 test	 eax, eax
  00033	0f 8e 0d 01 00
	00		 jle	 $LN3@SetItemsTo
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.h

; 151  : 		this->m_iIndex = -1;

  00039	8b c3		 mov	 eax, ebx
  0003b	c7 45 dc ff ff
	ff ff		 mov	 DWORD PTR _MID$[ebp], -1
  00042	c1 e0 04	 shl	 eax, 4
  00045	b9 02 00 00 00	 mov	 ecx, 2
  0004a	05 04 00 00 00	 add	 eax, OFFSET ?g_iChaosCastle_MonsterItems@@3PAY111HA+4

; 152  : 		this->m_iItemKind = -1;

  0004f	c7 45 e0 ff ff
	ff ff		 mov	 DWORD PTR _MID$[ebp+4], -1
  00056	89 45 f8	 mov	 DWORD PTR tv761[ebp], eax
  00059	89 4d f0	 mov	 DWORD PTR tv765[ebp], ecx
  0005c	57		 push	 edi
  0005d	0f 1f 00	 npad	 3
$LL4@SetItemsTo:
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 1294 : 		for ( int iB=0; iB< ::g_iChaosCastle_MonsterItems[iChaosCastleIndex][iA][1] ; iB++)

  00060	83 38 00	 cmp	 DWORD PTR [eax], 0
  00063	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iB$1$[ebp], 0
  0006a	0f 8e c3 00 00
	00		 jle	 $LN2@SetItemsTo
  00070	69 c3 1a 02 00
	00		 imul	 eax, ebx, 538
  00076	69 db 68 08 00
	00		 imul	 ebx, ebx, 2152
  0007c	89 45 e8	 mov	 DWORD PTR tv764[ebp], eax
  0007f	03 de		 add	 ebx, esi
$LL7@SetItemsTo:

; 1295 : 		{
; 1296 : 			for ( int iC=0;iC<200;iC++)	// Try 200 times

  00081	33 ff		 xor	 edi, edi
$LL10@SetItemsTo:

; 1298 : 				int iMONSTER_INDEX = this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[rand() % iMAX_MONSTER];

  00083	e8 00 00 00 00	 call	 _rand
  00088	99		 cdq
  00089	f7 7d ec	 idiv	 DWORD PTR _iMAX_MONSTER$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  0008c	8b 83 88 08 00
	00		 mov	 eax, DWORD PTR [ebx+2184]
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 1298 : 				int iMONSTER_INDEX = this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[rand() % iMAX_MONSTER];

  00092	03 55 e8	 add	 edx, DWORD PTR tv764[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2088 : 		_Nodeptr _Pnode = _Root();

  00095	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 1298 : 				int iMONSTER_INDEX = this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[rand() % iMAX_MONSTER];

  00098	8b b4 96 e0 05
	00 00		 mov	 esi, DWORD PTR [esi+edx*4+1504]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails

  0009f	8b d0		 mov	 edx, eax

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  000a1	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000a5	75 14		 jne	 SHORT $LN42@SetItemsTo
$LL41@SetItemsTo:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  000a7	39 71 10	 cmp	 DWORD PTR [ecx+16], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  000aa	7d 05		 jge	 SHORT $LN43@SetItemsTo

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  000ac	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 2094 : 			else

  000af	eb 04		 jmp	 SHORT $LN44@SetItemsTo
$LN43@SetItemsTo:

; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;

  000b1	8b d1		 mov	 edx, ecx

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  000b3	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN44@SetItemsTo:

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  000b5	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000b9	74 ec		 je	 SHORT $LL41@SetItemsTo
$LN42@SetItemsTo:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  000bb	3b d0		 cmp	 edx, eax

; 1487 : 		return (_Where == end()

  000bd	74 0d		 je	 SHORT $LN27@SetItemsTo
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  000bf	3b 72 10	 cmp	 esi, DWORD PTR [edx+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1487 : 		return (_Where == end()

  000c2	7c 08		 jl	 SHORT $LN27@SetItemsTo
  000c4	89 55 e4	 mov	 DWORD PTR $T4[ebp], edx
  000c7	8d 4d e4	 lea	 ecx, DWORD PTR $T4[ebp]
  000ca	eb 06		 jmp	 SHORT $LN171@SetItemsTo
$LN27@SetItemsTo:

; 43   : 		: _Ptr(_Pnode)

  000cc	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax

; 1095 : 			this->_Myval(_Newnode), _Newnode));
; 1096 : 		}
; 1097 : 
; 1098 : 	template<class _Valty>
; 1099 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1100 : 			iterator>::type
; 1101 : 		insert(const_iterator _Where, _Valty&& _Val)
; 1102 : 		{	// try to insert node with value _Val using _Where as a hint
; 1103 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1104 : 		return (_Insert_hint(_Where,
; 1105 : 			this->_Myval(_Newnode), _Newnode));
; 1106 : 		}
; 1107 : 
; 1108 : 	template<class... _Valty>
; 1109 : 		_Pairib emplace(_Valty&&... _Val)
; 1110 : 		{	// try to insert value_type(_Val...), favoring right side
; 1111 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1112 : 		return (_Insert_nohint(false,
; 1113 : 			this->_Myval(_Newnode), _Newnode));
; 1114 : 		}
; 1115 : 
; 1116 : 	template<class... _Valty>
; 1117 : 		iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
; 1118 : 		{	// insert value_type(_Val...) at _Where
; 1119 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1120 : 		return (_Insert_hint(_Where,
; 1121 : 			this->_Myval(_Newnode), _Newnode));
; 1122 : 		}
; 1123 : 
; 1124 : 
; 1125 : 	~_Tree() _NOEXCEPT
; 1126 : 		{	// destroy tree
; 1127 : 		_Tidy();
; 1128 : 		}
; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));

  000cf	8d 4d e0	 lea	 ecx, DWORD PTR $T3[ebp]
$LN171@SetItemsTo:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  000d2	39 01		 cmp	 DWORD PTR [ecx], eax
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 1301 : 				if ( it == this->m_stChaosCastleData[iChaosCastleIndex].m_mapMonsterItemList.end() )

  000d4	74 0e		 je	 SHORT $LN258@SetItemsTo

; 1295 : 		{
; 1296 : 			for ( int iC=0;iC<200;iC++)	// Try 200 times

  000d6	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
  000d9	47		 inc	 edi
  000da	81 ff c8 00 00
	00		 cmp	 edi, 200		; 000000c8H
  000e0	7c a1		 jl	 SHORT $LL10@SetItemsTo

; 1301 : 				if ( it == this->m_stChaosCastleData[iChaosCastleIndex].m_mapMonsterItemList.end() )

  000e2	eb 34		 jmp	 SHORT $LN5@SetItemsTo
$LN258@SetItemsTo:

; 1304 : 					MID.m_iItemKind = ::g_iChaosCastle_MonsterItems[iChaosCastleIndex][iA][0];

  000e4	8b 45 f8	 mov	 eax, DWORD PTR tv761[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  000e7	8d 8b 88 08 00
	00		 lea	 ecx, DWORD PTR [ebx+2184]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  000ed	89 75 c8	 mov	 DWORD PTR $T1[ebp], esi

; 144  : 				second(_STD forward<_Other2>(_Val2))

  000f0	89 75 cc	 mov	 DWORD PTR $T1[ebp+4], esi
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 1304 : 					MID.m_iItemKind = ::g_iChaosCastle_MonsterItems[iChaosCastleIndex][iA][0];

  000f3	8b 40 fc	 mov	 eax, DWORD PTR [eax-4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 144  : 				second(_STD forward<_Other2>(_Val2))

  000f6	89 45 d0	 mov	 DWORD PTR $T1[ebp+8], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  000f9	8d 45 c8	 lea	 eax, DWORD PTR $T1[ebp]
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HU_MONSTER_ITEM_DROP@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@$$QAU?$pair@HU_MONSTER_ITEM_DROP@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buynode<std::pair<int,_MONSTER_ITEM_DROP> >

; 1094 : 		return (_Insert_nohint(false,

  00102	50		 push	 eax

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);

  00103	83 c0 10	 add	 eax, 16			; 00000010H

; 1094 : 		return (_Insert_nohint(false,

  00106	8d 8b 88 08 00
	00		 lea	 ecx, DWORD PTR [ebx+2184]
  0010c	50		 push	 eax
  0010d	6a 00		 push	 0
  0010f	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ??$_Insert_nohint@AAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Insert_nohint<std::pair<int const ,_MONSTER_ITEM_DROP> &,std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> *>
$LN5@SetItemsTo:
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 1294 : 		for ( int iB=0; iB< ::g_iChaosCastle_MonsterItems[iChaosCastleIndex][iA][1] ; iB++)

  00118	8b 4d f4	 mov	 ecx, DWORD PTR _iB$1$[ebp]
  0011b	8b 45 f8	 mov	 eax, DWORD PTR tv761[ebp]
  0011e	41		 inc	 ecx
  0011f	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
  00122	89 4d f4	 mov	 DWORD PTR _iB$1$[ebp], ecx
  00125	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00127	0f 8c 54 ff ff
	ff		 jl	 $LL7@SetItemsTo
  0012d	8b 5d 08	 mov	 ebx, DWORD PTR _iChaosCastleIndex$[ebp]
  00130	8b 4d f0	 mov	 ecx, DWORD PTR tv765[ebp]
$LN2@SetItemsTo:

; 1285 : 	{
; 1286 : 		return;
; 1287 : 	}
; 1288 : 
; 1289 : 	std::map<int, _MONSTER_ITEM_DROP>::iterator it;
; 1290 : 	_MONSTER_ITEM_DROP MID;
; 1291 : 
; 1292 : 	for ( int iA = 0;iA < MAX_CC_MONSTER_DROP_ITEM ; iA++)

  00133	83 c0 08	 add	 eax, 8
  00136	83 e9 01	 sub	 ecx, 1
  00139	89 45 f8	 mov	 DWORD PTR tv761[ebp], eax
  0013c	89 4d f0	 mov	 DWORD PTR tv765[ebp], ecx
  0013f	0f 85 1b ff ff
	ff		 jne	 $LL4@SetItemsTo
  00145	5f		 pop	 edi
$LN3@SetItemsTo:
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx

; 1305 : 					this->m_stChaosCastleData[iChaosCastleIndex].m_mapMonsterItemList.insert( std::pair<int,_MONSTER_ITEM_DROP>(iMONSTER_INDEX, MID) );
; 1306 : 					break;
; 1307 : 				}
; 1308 : 			}
; 1309 : 		}
; 1310 : 	}
; 1311 : }

  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c2 04 00	 ret	 4
?SetItemsToMonster@CChaosCastle@@QAEXH@Z ENDP		; CChaosCastle::SetItemsToMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?GetMonsterListCount@CChaosCastle@@QAEHH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
?GetMonsterListCount@CChaosCastle@@QAEHH@Z PROC		; CChaosCastle::GetMonsterListCount, COMDAT
; _this$ = ecx

; 1239 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1240 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iChaosCastleIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	0f 88 98 00 00
	00		 js	 $LN22@GetMonster
  0000e	33 c0		 xor	 eax, eax
  00010	83 fa 06	 cmp	 edx, 6
  00013	0f 9e c0	 setle	 al
  00016	85 c0		 test	 eax, eax
  00018	0f 84 88 00 00
	00		 je	 $LN22@GetMonster

; 1243 : 	}
; 1244 : 
; 1245 : 	int iAliveMonsterCount = 0;

  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	69 c2 68 08 00
	00		 imul	 eax, edx, 2152
  00026	0f 57 c9	 xorps	 xmm1, xmm1
  00029	57		 push	 edi
  0002a	33 ff		 xor	 edi, edi
  0002c	8d 91 e0 05 00
	00		 lea	 edx, DWORD PTR [ecx+1504]
  00032	03 d0		 add	 edx, eax
  00034	8d 5f 64	 lea	 ebx, DWORD PTR [edi+100]
$LL4@GetMonster:

; 1248 : 	{
; 1249 : 		if( this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[i] == -1 )

  00037	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00039	83 f9 ff	 cmp	 ecx, -1
  0003c	74 57		 je	 SHORT $LN2@GetMonster

; 1250 : 			continue;
; 1251 : 
; 1252 : 		int iMonIndex = this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[i];
; 1253 : 
; 1254 : 		if( OBJMON_RANGE(iMonIndex) == FALSE )

  0003e	85 c9		 test	 ecx, ecx
  00040	78 4d		 js	 SHORT $LN23@GetMonster
  00042	33 c0		 xor	 eax, eax
  00044	81 f9 03 29 00
	00		 cmp	 ecx, 10499		; 00002903H
  0004a	0f 9e c0	 setle	 al
  0004d	85 c0		 test	 eax, eax
  0004f	74 3e		 je	 SHORT $LN23@GetMonster

; 1257 : 			continue;
; 1258 : 		}
; 1259 : 
; 1260 : 		if( gObj[iMonIndex].Life > 0 &&
; 1261 : 			CC_MAP_RANGE(gObj[iMonIndex].MapNumber) &&

  00051	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00057	69 c9 40 27 00
	00		 imul	 ecx, ecx, 10048
  0005d	f3 0f 10 84 31
	d8 00 00 00	 movss	 xmm0, DWORD PTR [ecx+esi+216]
  00066	0f 2f c1	 comiss	 xmm0, xmm1
  00069	76 2a		 jbe	 SHORT $LN2@GetMonster
  0006b	8a 84 31 23 01
	00 00		 mov	 al, BYTE PTR [ecx+esi+291]
  00072	3c 35		 cmp	 al, 53			; 00000035H
  00074	74 0f		 je	 SHORT $LN24@GetMonster
  00076	3c 12		 cmp	 al, 18			; 00000012H
  00078	72 1b		 jb	 SHORT $LN2@GetMonster
  0007a	b4 17		 mov	 ah, 23			; 00000017H
  0007c	3a e0		 cmp	 ah, al
  0007e	1b c0		 sbb	 eax, eax
  00080	83 c0 01	 add	 eax, 1
  00083	74 10		 je	 SHORT $LN2@GetMonster
$LN24@GetMonster:
  00085	83 7c 31 04 00	 cmp	 DWORD PTR [ecx+esi+4], 0
  0008a	7e 09		 jle	 SHORT $LN2@GetMonster

; 1262 : 			gObj[iMonIndex].Connected > 0 )
; 1263 : 		{
; 1264 : 			iAliveMonsterCount++;

  0008c	47		 inc	 edi
  0008d	eb 06		 jmp	 SHORT $LN2@GetMonster
$LN23@GetMonster:

; 1255 : 		{
; 1256 : 			this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[i] = -1;

  0008f	c7 02 ff ff ff
	ff		 mov	 DWORD PTR [edx], -1
$LN2@GetMonster:

; 1246 : 
; 1247 : 	for(int i=0;i<MAX_CHAOSCASTLE_MONSTER;i++)

  00095	83 c2 04	 add	 edx, 4
  00098	83 eb 01	 sub	 ebx, 1
  0009b	75 9a		 jne	 SHORT $LL4@GetMonster

; 1265 : 		}
; 1266 : 	}
; 1267 : 	
; 1268 : 	return iAliveMonsterCount;

  0009d	8b c7		 mov	 eax, edi
  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx

; 1269 : }

  000a2	5d		 pop	 ebp
  000a3	c2 04 00	 ret	 4
$LN22@GetMonster:

; 1241 : 	{
; 1242 : 		return -1;

  000a6	83 c8 ff	 or	 eax, -1

; 1269 : }

  000a9	5d		 pop	 ebp
  000aa	c2 04 00	 ret	 4
?GetMonsterListCount@CChaosCastle@@QAEHH@Z ENDP		; CChaosCastle::GetMonsterListCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?DelMonsterList@CChaosCastle@@QAEXHH@Z
_TEXT	SEGMENT
tv245 = -8						; size = 4
_this$1$ = -4						; size = 4
_iChaosCastleIndex$ = 8					; size = 4
_iMonsterIndex$ = 12					; size = 4
?DelMonsterList@CChaosCastle@@QAEXHH@Z PROC		; CChaosCastle::DelMonsterList, COMDAT
; _this$ = ecx

; 1205 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b d1		 mov	 edx, ecx

; 1206 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00008	8b 4d 08	 mov	 ecx, DWORD PTR _iChaosCastleIndex$[ebp]
  0000b	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
  0000e	85 c9		 test	 ecx, ecx
  00010	0f 88 90 00 00
	00		 js	 $LN1@DelMonster
  00016	33 c0		 xor	 eax, eax
  00018	83 f9 06	 cmp	 ecx, 6
  0001b	0f 9e c0	 setle	 al
  0001e	85 c0		 test	 eax, eax
  00020	0f 84 80 00 00
	00		 je	 $LN1@DelMonster

; 1207 : 	{
; 1208 : 		return;
; 1209 : 	}
; 1210 : 
; 1211 : 	LogAddTD("[Chaos Castle][Bug Tracer] MONSTER DEL (%d) Count(%d) : ENTER - Index(%d)",

  00026	53		 push	 ebx
  00027	8b 5d 0c	 mov	 ebx, DWORD PTR _iMonsterIndex$[ebp]
  0002a	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0002d	56		 push	 esi
  0002e	69 f1 68 08 00
	00		 imul	 esi, ecx, 2152
  00034	57		 push	 edi
  00035	53		 push	 ebx
  00036	89 45 f8	 mov	 DWORD PTR tv245[ebp], eax
  00039	03 f2		 add	 esi, edx
  0003b	ff 76 5c	 push	 DWORD PTR [esi+92]
  0003e	8d 7e 5c	 lea	 edi, DWORD PTR [esi+92]
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@BMJDNMGE@?$FLChaos?5Castle?$FN?$FLBug?5Tracer?$FN?5MONST@
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0004d	83 c4 10	 add	 esp, 16			; 00000010H

; 1212 : 		iChaosCastleIndex+1, this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_CURRENT_MONSTER_COUNT, iMonsterIndex);
; 1213 : 
; 1214 : 	for ( int iMON =0;iMON<MAX_CC_MONSTERS;iMON++)

  00050	33 d2		 xor	 edx, edx
  00052	81 c6 e0 05 00
	00		 add	 esi, 1504		; 000005e0H
$LL4@DelMonster:

; 1215 : 	{
; 1216 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[iMON] == iMonsterIndex )

  00058	39 1e		 cmp	 DWORD PTR [esi], ebx
  0005a	74 0b		 je	 SHORT $LN12@DelMonster

; 1212 : 		iChaosCastleIndex+1, this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_CURRENT_MONSTER_COUNT, iMonsterIndex);
; 1213 : 
; 1214 : 	for ( int iMON =0;iMON<MAX_CC_MONSTERS;iMON++)

  0005c	42		 inc	 edx
  0005d	83 c6 04	 add	 esi, 4
  00060	83 fa 64	 cmp	 edx, 100		; 00000064H
  00063	7c f3		 jl	 SHORT $LL4@DelMonster

; 1215 : 	{
; 1216 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[iMON] == iMonsterIndex )

  00065	eb 1a		 jmp	 SHORT $LN3@DelMonster
$LN12@DelMonster:

; 1217 : 		{
; 1218 : 			InterlockedExchange(&this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[iMON], -1);

  00067	69 45 08 1a 02
	00 00		 imul	 eax, DWORD PTR _iChaosCastleIndex$[ebp], 538
  0006e	83 c9 ff	 or	 ecx, -1
  00071	03 c2		 add	 eax, edx
  00073	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  00076	81 c2 e0 05 00
	00		 add	 edx, 1504		; 000005e0H
  0007c	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  0007f	87 08		 xchg	 DWORD PTR [eax], ecx
$LN3@DelMonster:

; 1219 : 			break;
; 1220 : 		}
; 1221 : 	}
; 1222 : 
; 1223 : 	InterlockedDecrement(&this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_CURRENT_MONSTER_COUNT);

  00081	f0 ff 0f	 lock	  dec	 DWORD PTR [edi]

; 1224 : 
; 1225 : 	if ( this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_CURRENT_MONSTER_COUNT < 0 )

  00084	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00087	7d 06		 jge	 SHORT $LN7@DelMonster

; 1226 : 	{
; 1227 : 		this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_CURRENT_MONSTER_COUNT = 0;

  00089	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
$LN7@DelMonster:

; 1228 : 	}
; 1229 : 
; 1230 : 	LogAddTD("[Chaos Castle][Bug Tracer] MONSTER DEL (%d) Count(%d) : OUT - Index(%d)",

  0008f	53		 push	 ebx
  00090	ff 37		 push	 DWORD PTR [edi]
  00092	ff 75 f8	 push	 DWORD PTR tv245[ebp]
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@EFJJJNMJ@?$FLChaos?5Castle?$FN?$FLBug?5Tracer?$FN?5MONST@
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000a0	83 c4 10	 add	 esp, 16			; 00000010H
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
$LN1@DelMonster:

; 1231 : 		iChaosCastleIndex+1, this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_CURRENT_MONSTER_COUNT, iMonsterIndex);
; 1232 : }

  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 08 00	 ret	 8
?DelMonsterList@CChaosCastle@@QAEXHH@Z ENDP		; CChaosCastle::DelMonsterList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?AddMonsterList@CChaosCastle@@QAEXHH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
_iMonsterIndex$ = 12					; size = 4
?AddMonsterList@CChaosCastle@@QAEXHH@Z PROC		; CChaosCastle::AddMonsterList, COMDAT
; _this$ = ecx

; 1184 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1185 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _iChaosCastleIndex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	78 4b		 js	 SHORT $LN3@AddMonster
  0000e	33 c0		 xor	 eax, eax
  00010	83 fe 06	 cmp	 esi, 6
  00013	0f 9e c0	 setle	 al
  00016	85 c0		 test	 eax, eax
  00018	74 3f		 je	 SHORT $LN3@AddMonster

; 1186 : 	{
; 1187 : 		return;
; 1188 : 	}
; 1189 : 
; 1190 : 	for ( int iMON =0;iMON<MAX_CC_MONSTERS;iMON++)

  0001a	69 c6 68 08 00
	00		 imul	 eax, esi, 2152
  00020	33 d2		 xor	 edx, edx
  00022	05 e0 05 00 00	 add	 eax, 1504		; 000005e0H
  00027	03 c7		 add	 eax, edi
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@AddMonster:

; 1191 : 	{
; 1192 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[iMON] == -1 )

  00030	83 38 ff	 cmp	 DWORD PTR [eax], -1
  00033	74 0f		 je	 SHORT $LN11@AddMonster

; 1186 : 	{
; 1187 : 		return;
; 1188 : 	}
; 1189 : 
; 1190 : 	for ( int iMON =0;iMON<MAX_CC_MONSTERS;iMON++)

  00035	42		 inc	 edx
  00036	83 c0 04	 add	 eax, 4
  00039	83 fa 64	 cmp	 edx, 100		; 00000064H
  0003c	7c f2		 jl	 SHORT $LL4@AddMonster
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 1195 : 			break;
; 1196 : 		}
; 1197 : 	}
; 1198 : }

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN11@AddMonster:

; 1193 : 		{
; 1194 : 			InterlockedExchange((LPLONG)&this->m_stChaosCastleData[iChaosCastleIndex].m_lCC_MONSTER_COUNT[iMON], iMonsterIndex);

  00044	8b 4d 0c	 mov	 ecx, DWORD PTR _iMonsterIndex$[ebp]
  00047	69 c6 1a 02 00
	00		 imul	 eax, esi, 538
  0004d	05 78 01 00 00	 add	 eax, 376		; 00000178H
  00052	03 c2		 add	 eax, edx
  00054	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  00057	87 08		 xchg	 DWORD PTR [eax], ecx
$LN3@AddMonster:
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi

; 1195 : 			break;
; 1196 : 		}
; 1197 : 	}
; 1198 : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
?AddMonsterList@CChaosCastle@@QAEXHH@Z ENDP		; CChaosCastle::AddMonsterList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SetMonster@CChaosCastle@@QAEHH@Z
_TEXT	SEGMENT
_iMAX_ADDABLE_MONSTER_COUNT$2$ = -24			; size = 4
_result$1$ = -20					; size = 4
_btMonsterIndex$1$ = -16				; size = 4
_this$1$ = -12						; size = 4
_iNOW_ADDED_MONSTER_COUNT$1$ = -8			; size = 4
_btChaosCastleIndex$1$ = -1				; size = 1
_iChaosCastleIndex$ = 8					; size = 4
?SetMonster@CChaosCastle@@QAEHH@Z PROC			; CChaosCastle::SetMonster, COMDAT
; _this$ = ecx

; 1118 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	8b d1		 mov	 edx, ecx

; 1119 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00008	8b 4d 08	 mov	 ecx, DWORD PTR _iChaosCastleIndex$[ebp]
  0000b	89 55 f4	 mov	 DWORD PTR _this$1$[ebp], edx
  0000e	85 c9		 test	 ecx, ecx
  00010	0f 88 f6 01 00
	00		 js	 $LN23@SetMonster
  00016	33 c0		 xor	 eax, eax
  00018	83 f9 06	 cmp	 ecx, 6
  0001b	0f 9e c0	 setle	 al
  0001e	85 c0		 test	 eax, eax
  00020	0f 84 e6 01 00
	00		 je	 $LN23@SetMonster

; 1122 : 	}
; 1123 : 
; 1124 : 	int iNOW_ADDED_MONSTER_COUNT = 0;
; 1125 : 	int iMAX_ADDABLE_MONSTER_COUNT = MAX_CC_MONSTERS - this->GetCurPlayUser(iChaosCastleIndex);

  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	51		 push	 ecx
  0002a	33 ff		 xor	 edi, edi
  0002c	8b ca		 mov	 ecx, edx
  0002e	89 7d f8	 mov	 DWORD PTR _iNOW_ADDED_MONSTER_COUNT$1$[ebp], edi
  00031	e8 00 00 00 00	 call	 ?GetCurPlayUser@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetCurPlayUser
  00036	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H

; 1126 : 	int result;
; 1127 : 
; 1128 : 	if ( iMAX_ADDABLE_MONSTER_COUNT < 0 )
; 1129 : 	{
; 1130 : 		iMAX_ADDABLE_MONSTER_COUNT = 0;
; 1131 : 	}
; 1132 : 
; 1133 : 	for ( int n=0;n<OBJ_MAXMONSTER;n++)

  0003b	be 08 00 00 00	 mov	 esi, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A+8
  00040	2b c8		 sub	 ecx, eax
  00042	8b c7		 mov	 eax, edi
  00044	0f 48 c8	 cmovs	 ecx, eax
  00047	33 db		 xor	 ebx, ebx
  00049	89 4d e8	 mov	 DWORD PTR _iMAX_ADDABLE_MONSTER_COUNT$2$[ebp], ecx
  0004c	0f 1f 40 00	 npad	 4
$LL4@SetMonster:

; 1134 : 	{
; 1135 : 		if ( iNOW_ADDED_MONSTER_COUNT >= iMAX_ADDABLE_MONSTER_COUNT )

  00050	3b f9		 cmp	 edi, ecx
  00052	0f 8d a9 01 00
	00		 jge	 $LN19@SetMonster

; 1136 : 		{
; 1137 : 			break;
; 1138 : 		}
; 1139 : 
; 1140 : 		if ( CC_MAP_RANGE(gMSetBase.m_Mp[n].m_MapNumber) != FALSE )

  00058	8a 0e		 mov	 cl, BYTE PTR [esi]
  0005a	80 f9 35	 cmp	 cl, 53			; 00000035H
  0005d	74 1b		 je	 SHORT $LN24@SetMonster
  0005f	80 f9 12	 cmp	 cl, 18			; 00000012H
  00062	0f 82 86 01 00
	00		 jb	 $LN2@SetMonster
  00068	b8 17 00 00 00	 mov	 eax, 23			; 00000017H
  0006d	3a c1		 cmp	 al, cl
  0006f	1b c0		 sbb	 eax, eax
  00071	83 c0 01	 add	 eax, 1
  00074	0f 84 74 01 00
	00		 je	 $LN2@SetMonster
$LN24@SetMonster:

; 1141 : 		{
; 1142 : 			WORD btMonsterIndex = gMSetBase.m_Mp[n].m_Type;

  0007a	0f b7 46 fe	 movzx	 eax, WORD PTR [esi-2]

; 1143 : 			BYTE btMapNumber = gMSetBase.m_Mp[n].m_MapNumber;
; 1144 : 			BYTE btChaosCastleIndex = GetFloor(btMapNumber);

  0007e	0f b6 f9	 movzx	 edi, cl
  00081	8b 4d f4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00084	57		 push	 edi
  00085	89 45 f0	 mov	 DWORD PTR _btMonsterIndex$1$[ebp], eax
  00088	e8 00 00 00 00	 call	 ?GetFloor@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetFloor
  0008d	88 45 ff	 mov	 BYTE PTR _btChaosCastleIndex$1$[ebp], al

; 1145 : 
; 1146 : 			if ( btChaosCastleIndex != iChaosCastleIndex )

  00090	0f b6 c0	 movzx	 eax, al
  00093	3b 45 08	 cmp	 eax, DWORD PTR _iChaosCastleIndex$[ebp]
  00096	0f 85 4f 01 00
	00		 jne	 $LN26@SetMonster

; 1147 : 			{
; 1148 : 				continue;
; 1149 : 			}
; 1150 : 
; 1151 : 			result = gObjAddMonster(btMapNumber);

  0009c	57		 push	 edi
  0009d	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  000a2	0f bf d0	 movsx	 edx, ax
  000a5	83 c4 04	 add	 esp, 4
  000a8	89 55 ec	 mov	 DWORD PTR _result$1$[ebp], edx

; 1152 : 
; 1153 : 			if ( result >= 0 )

  000ab	85 d2		 test	 edx, edx
  000ad	0f 88 38 01 00
	00		 js	 $LN26@SetMonster

; 1154 : 			{
; 1155 : 				gObj[result].m_PosNum = n;

  000b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b8	69 fa 40 27 00
	00		 imul	 edi, edx, 10048
  000be	66 89 9c 07 98
	05 00 00	 mov	 WORD PTR [edi+eax+1432], bx

; 1156 : 				gObj[result].X = gMSetBase.m_Mp[n].m_X;

  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000cb	0f b6 4e 02	 movzx	 ecx, BYTE PTR [esi+2]
  000cf	88 8c 07 20 01
	00 00		 mov	 BYTE PTR [edi+eax+288], cl

; 1157 : 				gObj[result].Y = gMSetBase.m_Mp[n].m_Y;

  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000db	0f b6 4e 03	 movzx	 ecx, BYTE PTR [esi+3]
  000df	88 8c 07 21 01
	00 00		 mov	 BYTE PTR [edi+eax+289], cl

; 1158 : 				gObj[result].MapNumber = gMSetBase.m_Mp[n].m_MapNumber;

  000e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000eb	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]
  000ee	88 8c 07 23 01
	00 00		 mov	 BYTE PTR [edi+eax+291], cl

; 1159 : 				gObj[result].TX = gObj[result].X;

  000f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000fb	0f b6 84 39 20
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edi+288]
  00103	88 84 39 52 01
	00 00		 mov	 BYTE PTR [ecx+edi+338], al

; 1160 : 				gObj[result].TY = gObj[result].Y;

  0010a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00110	0f b6 84 39 21
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edi+289]
  00118	88 84 39 53 01
	00 00		 mov	 BYTE PTR [ecx+edi+339], al

; 1161 : 				gObj[result].m_OldX = gObj[result].X;

  0011f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00125	0f b6 84 39 20
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edi+288]
  0012d	88 84 39 50 01
	00 00		 mov	 BYTE PTR [ecx+edi+336], al

; 1162 : 				gObj[result].m_OldY = gObj[result].Y;

  00134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0013a	0f b6 84 39 21
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edi+289]
  00142	88 84 39 51 01
	00 00		 mov	 BYTE PTR [ecx+edi+337], al

; 1163 : 				gObj[result].Dir = gMSetBase.m_Mp[n].m_Dir;

  00149	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0014e	0f b6 4e 04	 movzx	 ecx, BYTE PTR [esi+4]
  00152	88 8c 07 22 01
	00 00		 mov	 BYTE PTR [edi+eax+290], cl

; 1164 : 				gObj[result].StartX = gObj[result].X;

  00159	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0015f	0f b6 84 39 20
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edi+288]
  00167	88 84 39 4e 01
	00 00		 mov	 BYTE PTR [ecx+edi+334], al

; 1165 : 				gObj[result].StartY = gObj[result].Y;

  0016e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00174	0f b6 84 39 21
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edi+289]
  0017c	88 84 39 4f 01
	00 00		 mov	 BYTE PTR [ecx+edi+335], al

; 1166 : 				gObjSetMonster(result, btMonsterIndex);

  00183	8b 45 f0	 mov	 eax, DWORD PTR _btMonsterIndex$1$[ebp]
  00186	0f b7 c0	 movzx	 eax, ax
  00189	50		 push	 eax
  0018a	52		 push	 edx
  0018b	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 1167 : 				gObj[result].MaxRegenTime = this->m_iCC_MONSTER_REGEN;

  00190	8b 45 f4	 mov	 eax, DWORD PTR _this$1$[ebp]
  00193	83 c4 08	 add	 esp, 8
  00196	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00199	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0019e	89 8c 07 94 05
	00 00		 mov	 DWORD PTR [edi+eax+1428], ecx

; 1168 : 				gObj[result].m_cChaosCastleIndex = btChaosCastleIndex;

  001a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001aa	8a 4d ff	 mov	 cl, BYTE PTR _btChaosCastleIndex$1$[ebp]
  001ad	88 8c 07 3d 12
	00 00		 mov	 BYTE PTR [edi+eax+4669], cl

; 1169 : 				gObj[result].Dir = rand() % 8;

  001b4	e8 00 00 00 00	 call	 _rand
  001b9	8b c8		 mov	 ecx, eax
  001bb	81 e1 07 00 00
	80		 and	 ecx, -2147483641	; 80000007H
  001c1	79 05		 jns	 SHORT $LN27@SetMonster
  001c3	49		 dec	 ecx
  001c4	83 c9 f8	 or	 ecx, -8			; fffffff8H
  001c7	41		 inc	 ecx
$LN27@SetMonster:
  001c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1170 : 				iNOW_ADDED_MONSTER_COUNT++;
; 1171 : 				this->AddMonsterList(iChaosCastleIndex, result);

  001cd	ff 75 ec	 push	 DWORD PTR _result$1$[ebp]
  001d0	ff 75 08	 push	 DWORD PTR _iChaosCastleIndex$[ebp]
  001d3	88 8c 07 22 01
	00 00		 mov	 BYTE PTR [edi+eax+290], cl
  001da	8b 7d f8	 mov	 edi, DWORD PTR _iNOW_ADDED_MONSTER_COUNT$1$[ebp]
  001dd	8b 4d f4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001e0	47		 inc	 edi
  001e1	89 7d f8	 mov	 DWORD PTR _iNOW_ADDED_MONSTER_COUNT$1$[ebp], edi
  001e4	e8 00 00 00 00	 call	 ?AddMonsterList@CChaosCastle@@QAEXHH@Z ; CChaosCastle::AddMonsterList
  001e9	eb 03		 jmp	 SHORT $LN2@SetMonster
$LN26@SetMonster:
  001eb	8b 7d f8	 mov	 edi, DWORD PTR _iNOW_ADDED_MONSTER_COUNT$1$[ebp]
$LN2@SetMonster:

; 1126 : 	int result;
; 1127 : 
; 1128 : 	if ( iMAX_ADDABLE_MONSTER_COUNT < 0 )
; 1129 : 	{
; 1130 : 		iMAX_ADDABLE_MONSTER_COUNT = 0;
; 1131 : 	}
; 1132 : 
; 1133 : 	for ( int n=0;n<OBJ_MAXMONSTER;n++)

  001ee	8b 4d e8	 mov	 ecx, DWORD PTR _iMAX_ADDABLE_MONSTER_COUNT$2$[ebp]
  001f1	83 c6 14	 add	 esi, 20			; 00000014H
  001f4	43		 inc	 ebx
  001f5	81 fe 58 34 03
	00		 cmp	 esi, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A+210008
  001fb	0f 8c 4f fe ff
	ff		 jl	 $LL4@SetMonster
$LN19@SetMonster:

; 1172 : 			}
; 1173 : 		}
; 1174 : 	}
; 1175 : 
; 1176 : 	return iNOW_ADDED_MONSTER_COUNT;

  00201	8b c7		 mov	 eax, edi
  00203	5f		 pop	 edi
  00204	5e		 pop	 esi
  00205	5b		 pop	 ebx

; 1177 : }

  00206	8b e5		 mov	 esp, ebp
  00208	5d		 pop	 ebp
  00209	c2 04 00	 ret	 4
$LN23@SetMonster:

; 1120 : 	{
; 1121 : 		return -1;

  0020c	83 c8 ff	 or	 eax, -1

; 1177 : }

  0020f	8b e5		 mov	 esp, ebp
  00211	5d		 pop	 ebp
  00212	c2 04 00	 ret	 4
?SetMonster@CChaosCastle@@QAEHH@Z ENDP			; CChaosCastle::SetMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?ClearMonster@CChaosCastle@@QAEXH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
?ClearMonster@CChaosCastle@@QAEXH@Z PROC		; CChaosCastle::ClearMonster, COMDAT
; _this$ = ecx

; 1098 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1099 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iChaosCastleIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 53		 js	 SHORT $LN3@ClearMonst
  0000a	33 c0		 xor	 eax, eax
  0000c	83 fa 06	 cmp	 edx, 6
  0000f	0f 9e c0	 setle	 al
  00012	85 c0		 test	 eax, eax
  00014	74 47		 je	 SHORT $LN3@ClearMonst

; 1105 : 	{
; 1106 : 		if ( gObj[n].MapNumber == GetMap(iChaosCastleIndex) )

  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	52		 push	 edx
  0001a	33 ff		 xor	 edi, edi
  0001c	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap
  00021	8b d8		 mov	 ebx, eax
  00023	33 f6		 xor	 esi, esi
  00025	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@ClearMonst:
  00030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00036	0f b6 8c 0e 23
	01 00 00	 movzx	 ecx, BYTE PTR [esi+ecx+291]
  0003e	3b cb		 cmp	 ecx, ebx
  00040	75 09		 jne	 SHORT $LN2@ClearMonst

; 1107 : 		{
; 1108 : 			gObjDel(n);

  00042	57		 push	 edi
  00043	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00048	83 c4 04	 add	 esp, 4
$LN2@ClearMonst:

; 1100 : 	{
; 1101 : 		return;
; 1102 : 	}
; 1103 : 
; 1104 : 	for ( int n=0;n<OBJ_MAXMONSTER;n++)

  0004b	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00051	47		 inc	 edi
  00052	81 fe 00 dd 49
	06		 cmp	 esi, 105504000		; 0649dd00H
  00058	7c d6		 jl	 SHORT $LL4@ClearMonst
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
$LN3@ClearMonst:

; 1109 : 		}
; 1110 : 	}
; 1111 : }

  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
?ClearMonster@CChaosCastle@@QAEXH@Z ENDP		; CChaosCastle::ClearMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?GiveUserDamage@CChaosCastle@@QAEXHH@Z
_TEXT	SEGMENT
_pResult$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_iUserIndex$ = 8					; size = 4
_iDamage$ = 12						; size = 4
?GiveUserDamage@CChaosCastle@@QAEXHH@Z PROC		; CChaosCastle::GiveUserDamage, COMDAT
; _this$ = ecx

; 1893 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _iUserIndex$[ebp]

; 1894 : 	if ( !gObjIsConnected(iUserIndex))

  00014	53		 push	 ebx
  00015	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001a	83 c4 04	 add	 esp, 4
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 10 01 00
	00		 je	 $LN5@GiveUserDa

; 1895 : 		return;
; 1896 : 
; 1897 : 	if ( gObj[iUserIndex].Life <= 0.0 )

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002a	0f 57 c0	 xorps	 xmm0, xmm0
  0002d	56		 push	 esi
  0002e	69 f3 40 27 00
	00		 imul	 esi, ebx, 10048
  00034	0f 2f 84 06 d8
	00 00 00	 comiss	 xmm0, DWORD PTR [esi+eax+216]
  0003c	0f 83 f2 00 00
	00		 jae	 $LN7@GiveUserDa

; 1898 : 		return;
; 1899 : 
; 1900 : 	PMSG_ATTACKRESULT pResult;
; 1901 : 
; 1902 : #if (__ENG__==1)
; 1903 : 	// ENG PROTOCOL
; 1904 : 	PHeadSetB((LPBYTE)&pResult, 0x11, sizeof(pResult));

  00042	6a 14		 push	 20			; 00000014H
  00044	8d 45 e8	 lea	 eax, DWORD PTR _pResult$[ebp]
  00047	6a 11		 push	 17			; 00000011H
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 1905 : #else
; 1906 : 	// KOR PROTOCOL
; 1907 : 	PHeadSetB((LPBYTE)&pResult, 0xDF, sizeof(pResult));
; 1908 : #endif
; 1909 : 
; 1910 : 	pResult.NumberH = SET_NUMBERH(iUserIndex);
; 1911 : 	pResult.NumberL = SET_NUMBERL(iUserIndex);
; 1912 : 
; 1913 : #if (CUSTOM_DAMAGE == 1)
; 1914 : 	pResult.DamageHW = SET_NUMBERHW(iDamage);
; 1915 : 	pResult.DamageLW = SET_NUMBERLW(iDamage);
; 1916 : 
; 1917 : 	pResult.wShieldDamageHW = 0;
; 1918 : 	pResult.wShieldDamageLW = 0;
; 1919 : #else
; 1920 : 	pResult.DamageH = SET_NUMBERH(iDamage);

  0004f	8b 4d 0c	 mov	 ecx, DWORD PTR _iDamage$[ebp]
  00052	8b c3		 mov	 eax, ebx
  00054	c1 e8 08	 shr	 eax, 8
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	88 45 eb	 mov	 BYTE PTR _pResult$[ebp+3], al
  0005d	8b c1		 mov	 eax, ecx
  0005f	c1 e8 08	 shr	 eax, 8
  00062	88 45 ed	 mov	 BYTE PTR _pResult$[ebp+5], al

; 1921 : 	pResult.DamageL = SET_NUMBERL(iDamage);
; 1922 : 	pResult.btShieldDamageH = 0;
; 1923 : 	pResult.btShieldDamageL = 0;
; 1924 : #endif
; 1925 : 
; 1926 : 	if ( gObj[iUserIndex].Type == OBJ_USER )

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006a	88 5d ec	 mov	 BYTE PTR _pResult$[ebp+4], bl
  0006d	88 4d ee	 mov	 BYTE PTR _pResult$[ebp+6], cl
  00070	66 c7 45 f1 00
	00		 mov	 WORD PTR _pResult$[ebp+9], 0
  00076	80 7c 06 50 01	 cmp	 BYTE PTR [esi+eax+80], 1
  0007b	75 1a		 jne	 SHORT $LN4@GiveUserDa

; 1927 : 		DataSend(iUserIndex, (LPBYTE)&pResult, pResult.h.size);

  0007d	0f b6 45 e9	 movzx	 eax, BYTE PTR _pResult$[ebp+1]
  00081	50		 push	 eax
  00082	8d 45 e8	 lea	 eax, DWORD PTR _pResult$[ebp]
  00085	50		 push	 eax
  00086	53		 push	 ebx
  00087	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
  00094	8b 4d 0c	 mov	 ecx, DWORD PTR _iDamage$[ebp]
$LN4@GiveUserDa:

; 1928 : 
; 1929 : 	gObj[iUserIndex].Life -= iDamage;

  00097	f3 0f 10 8c 06
	d8 00 00 00	 movss	 xmm1, DWORD PTR [esi+eax+216]
  000a0	66 0f 6e c1	 movd	 xmm0, ecx
  000a4	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000a7	f3 0f 5c c8	 subss	 xmm1, xmm0
  000ab	0f 57 c0	 xorps	 xmm0, xmm0
  000ae	f3 0f 11 8c 06
	d8 00 00 00	 movss	 DWORD PTR [esi+eax+216], xmm1

; 1930 : 
; 1931 : 	if ( gObj[iUserIndex].Life <= 0.0 )

  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000bc	0f 2f 84 06 d8
	00 00 00	 comiss	 xmm0, DWORD PTR [esi+eax+216]
  000c4	72 6e		 jb	 SHORT $LN7@GiveUserDa

; 1932 : 	{
; 1933 : 		gObj[iUserIndex].Life = 0;

  000c6	c7 84 06 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [esi+eax+216], 0

; 1934 : 		gObj[iUserIndex].m_State = 4;

  000d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d6	c7 84 06 d0 01
	00 00 04 00 00
	00		 mov	 DWORD PTR [esi+eax+464], 4

; 1935 : 		gObj[iUserIndex].KillerType = 1;

  000e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e6	c6 84 06 89 05
	00 00 01	 mov	 BYTE PTR [esi+eax+1417], 1

; 1936 : 		gObj[iUserIndex].RegenTime = GetTickCount();

  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1937 : 		gObj[iUserIndex].DieRegen = 1;
; 1938 : 		gObj[iUserIndex].PathCount = 0;
; 1939 : 		
; 1940 : 		GCDiePlayerSend(&gObj[iUserIndex], gObj[iUserIndex].m_Index, 0, 0);

  000fa	6a 00		 push	 0
  000fc	6a 00		 push	 0
  000fe	89 84 0e 90 05
	00 00		 mov	 DWORD PTR [esi+ecx+1424], eax
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0010a	c6 84 06 8a 05
	00 00 01	 mov	 BYTE PTR [esi+eax+1418], 1
  00112	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00117	c7 84 06 58 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [esi+eax+344], 0
  00122	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00127	03 c6		 add	 eax, esi
  00129	ff 30		 push	 DWORD PTR [eax]
  0012b	50		 push	 eax
  0012c	e8 00 00 00 00	 call	 ?GCDiePlayerSend@@YAXPAUOBJECTSTRUCT@@HGH@Z ; GCDiePlayerSend
  00131	83 c4 10	 add	 esp, 16			; 00000010H
$LN7@GiveUserDa:
  00134	5e		 pop	 esi
$LN5@GiveUserDa:

; 1941 : 	}
; 1942 : }

  00135	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00138	33 cd		 xor	 ecx, ebp
  0013a	5b		 pop	 ebx
  0013b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c2 08 00	 ret	 8
?GiveUserDamage@CChaosCastle@@QAEXHH@Z ENDP		; CChaosCastle::GiveUserDamage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?PayUserEnterMoney@CChaosCastle@@QAEHHH@Z
_TEXT	SEGMENT
_iUserIndex$ = 8					; size = 4
_iEnterLevel$ = 12					; size = 4
?PayUserEnterMoney@CChaosCastle@@QAEHHH@Z PROC		; CChaosCastle::PayUserEnterMoney, COMDAT
; _this$ = ecx

; 1866 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1867 : 	if ( OBJMAX_RANGE(iUserIndex) == FALSE )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _iUserIndex$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	78 73		 js	 SHORT $LN11@PayUserEnt
  0000a	33 c0		 xor	 eax, eax
  0000c	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00012	0f 9e c0	 setle	 al
  00015	85 c0		 test	 eax, eax
  00017	74 64		 je	 SHORT $LN11@PayUserEnt

; 1868 : 	{
; 1869 : 		return FALSE;
; 1870 : 	}
; 1871 : 
; 1872 : 	if ( CC_FLOOR_RANGE(iEnterLevel) == FALSE )

  00019	8b 55 0c	 mov	 edx, DWORD PTR _iEnterLevel$[ebp]
  0001c	85 d2		 test	 edx, edx
  0001e	78 5d		 js	 SHORT $LN11@PayUserEnt
  00020	33 c0		 xor	 eax, eax
  00022	83 fa 06	 cmp	 edx, 6
  00025	0f 9e c0	 setle	 al
  00028	85 c0		 test	 eax, eax
  0002a	74 51		 je	 SHORT $LN11@PayUserEnt

; 1875 : 	}
; 1876 : 
; 1877 : 	if ( gObj[iUserIndex].Money >= ::g_iChaosCastle_EnterCost[iEnterLevel] )

  0002c	8b 14 95 00 00
	00 00		 mov	 edx, DWORD PTR ?g_iChaosCastle_EnterCost@@3PAHA[edx*4]
  00033	56		 push	 esi
  00034	69 f1 40 27 00
	00		 imul	 esi, ecx, 10048
  0003a	57		 push	 edi
  0003b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00041	8b 84 37 cc 00
	00 00		 mov	 eax, DWORD PTR [edi+esi+204]
  00048	3b c2		 cmp	 eax, edx
  0004a	7c 29		 jl	 SHORT $LN4@PayUserEnt

; 1878 : 	{
; 1879 : 		gObj[iUserIndex].Money -= ::g_iChaosCastle_EnterCost[iEnterLevel];

  0004c	2b c2		 sub	 eax, edx
  0004e	89 84 37 cc 00
	00 00		 mov	 DWORD PTR [edi+esi+204], eax

; 1880 : 		GCMoneySend(iUserIndex, gObj[iUserIndex].Money);

  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005a	ff b4 06 cc 00
	00 00		 push	 DWORD PTR [esi+eax+204]
  00061	51		 push	 ecx
  00062	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00067	83 c4 08	 add	 esp, 8

; 1881 : 
; 1882 : 		return TRUE;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi

; 1886 : }

  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
$LN4@PayUserEnt:
  00075	5f		 pop	 edi

; 1883 : 	}
; 1884 : 
; 1885 : 	return FALSE;

  00076	33 c0		 xor	 eax, eax
  00078	5e		 pop	 esi

; 1886 : }

  00079	5d		 pop	 ebp
  0007a	c2 08 00	 ret	 8
$LN11@PayUserEnt:

; 1873 : 	{
; 1874 : 		return FALSE;

  0007d	33 c0		 xor	 eax, eax

; 1886 : }

  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
?PayUserEnterMoney@CChaosCastle@@QAEHHH@Z ENDP		; CChaosCastle::PayUserEnterMoney
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?CheckUserEnterMoney@CChaosCastle@@QAEHHH@Z
_TEXT	SEGMENT
_iUserIndex$ = 8					; size = 4
_iEnterLevel$ = 12					; size = 4
?CheckUserEnterMoney@CChaosCastle@@QAEHHH@Z PROC	; CChaosCastle::CheckUserEnterMoney, COMDAT
; _this$ = ecx

; 1842 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1843 : 	if ( OBJMAX_RANGE(iUserIndex) == FALSE )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _iUserIndex$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	78 44		 js	 SHORT $LN10@CheckUserE
  0000a	33 c0		 xor	 eax, eax
  0000c	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00012	0f 9e c0	 setle	 al
  00015	85 c0		 test	 eax, eax
  00017	74 35		 je	 SHORT $LN10@CheckUserE

; 1846 : 	}
; 1847 : 
; 1848 : 	if ( CC_FLOOR_RANGE(iEnterLevel) == FALSE )

  00019	8b 55 0c	 mov	 edx, DWORD PTR _iEnterLevel$[ebp]
  0001c	85 d2		 test	 edx, edx
  0001e	78 2e		 js	 SHORT $LN10@CheckUserE
  00020	33 c0		 xor	 eax, eax
  00022	83 fa 06	 cmp	 edx, 6
  00025	0f 9e c0	 setle	 al
  00028	85 c0		 test	 eax, eax
  0002a	74 22		 je	 SHORT $LN10@CheckUserE

; 1849 : 	{
; 1850 : 		return FALSE;
; 1851 : 	}
; 1852 : 
; 1853 : 	if ( gObj[iUserIndex].Money >= ::g_iChaosCastle_EnterCost[iEnterLevel] )

  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00031	69 c9 40 27 00
	00		 imul	 ecx, ecx, 10048
  00037	8b 8c 01 cc 00
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+204]
  0003e	33 c0		 xor	 eax, eax
  00040	3b 0c 95 00 00
	00 00		 cmp	 ecx, DWORD PTR ?g_iChaosCastle_EnterCost@@3PAHA[edx*4]
  00047	0f 9d c0	 setge	 al

; 1854 : 	{
; 1855 : 		return TRUE;
; 1856 : 	}
; 1857 : 
; 1858 : 	return FALSE;
; 1859 : }

  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
$LN10@CheckUserE:

; 1844 : 	{
; 1845 : 		return FALSE;

  0004e	33 c0		 xor	 eax, eax

; 1854 : 	{
; 1855 : 		return TRUE;
; 1856 : 	}
; 1857 : 
; 1858 : 	return FALSE;
; 1859 : }

  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?CheckUserEnterMoney@CChaosCastle@@QAEHHH@Z ENDP	; CChaosCastle::CheckUserEnterMoney
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?GetUserLevelToEnter@CChaosCastle@@QAEHH@Z
_TEXT	SEGMENT
_iUserIndex$ = 8					; size = 4
?GetUserLevelToEnter@CChaosCastle@@QAEHH@Z PROC		; CChaosCastle::GetUserLevelToEnter, COMDAT
; _this$ = ecx

; 1793 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1794 : 	if ( !gObjIsConnected(iUserIndex))

  00004	8b 75 08	 mov	 esi, DWORD PTR _iUserIndex$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	75 08		 jne	 SHORT $LN5@GetUserLev

; 1795 : 		return -1;

  00014	83 c8 ff	 or	 eax, -1
  00017	5e		 pop	 esi

; 1835 : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN5@GetUserLev:
  0001c	53		 push	 ebx
  0001d	57		 push	 edi

; 1796 : 
; 1797 : 	int iENTER_LEVEL = -1;
; 1798 : 
; 1799 : #if (__CUSTOM__ == 1 )
; 1800 : 	if ( gObj[iUserIndex].ChangeUP2 == TRUE )

  0001e	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  00024	83 cb ff	 or	 ebx, -1
  00027	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002d	80 bf 94 00 00
	00 01		 cmp	 BYTE PTR [edi+148], 1
  00034	75 0e		 jne	 SHORT $LN6@GetUserLev

; 1801 : #else
; 1802 : 	if ( g_MasterExp.IsEnabled(&gObj[iUserIndex]) )
; 1803 : #endif
; 1804 : 	{
; 1805 : 		iENTER_LEVEL = 6;

  00036	bb 06 00 00 00	 mov	 ebx, 6
  0003b	5f		 pop	 edi

; 1825 : 				 gObj[iUserIndex].Level <= g_sttCHAOSCASTLE_LEVEL[i].iUPPER_BOUND )
; 1826 : 				{
; 1827 : 					iENTER_LEVEL = i;
; 1828 : 					break;
; 1829 : 				}
; 1830 : 			}
; 1831 : 		}
; 1832 : 	}
; 1833 : 			 
; 1834 : 	return iENTER_LEVEL;

  0003c	8b c3		 mov	 eax, ebx
  0003e	5b		 pop	 ebx
  0003f	5e		 pop	 esi

; 1835 : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
$LN6@GetUserLev:

; 1810 : 		{
; 1811 : 			if ( gObj[iUserIndex].Class == CLASS_DARKLORD ||
; 1812 : 				gObj[iUserIndex].Class == CLASS_MAGUMSA ||

  00044	0f b7 97 90 00
	00 00		 movzx	 edx, WORD PTR [edi+144]
  0004b	33 f6		 xor	 esi, esi
  0004d	b8 04 00 00 00	 mov	 eax, OFFSET ?g_sttCHAOSCASTLE_LEVEL@@3PAU_CHAOSCASTLE_LEVEL@@A+4
$LL4@GetUserLev:
  00052	83 fa 04	 cmp	 edx, 4
  00055	74 1a		 je	 SHORT $LN10@GetUserLev
  00057	83 fa 03	 cmp	 edx, 3
  0005a	74 15		 je	 SHORT $LN10@GetUserLev
  0005c	83 fa 06	 cmp	 edx, 6
  0005f	74 10		 je	 SHORT $LN10@GetUserLev

; 1819 : 					break;
; 1820 : 				}
; 1821 : 			}
; 1822 : 			else
; 1823 : 			{
; 1824 : 				if ( gObj[iUserIndex].Level >= g_sttCHAOSCASTLE_LEVEL[i].iLOWER_BOUND &&

  00061	0f bf 8f 96 00
	00 00		 movsx	 ecx, WORD PTR [edi+150]
  00068	3b 48 fc	 cmp	 ecx, DWORD PTR [eax-4]
  0006b	7c 15		 jl	 SHORT $LN2@GetUserLev
  0006d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0006f	eb 0f		 jmp	 SHORT $LN21@GetUserLev
$LN10@GetUserLev:

; 1813 : 				gObj[iUserIndex].Class == CLASS_FIGHTER )
; 1814 : 			{
; 1815 : 				if ( gObj[iUserIndex].Level >= g_sttCHAOSCASTLE_LEVEL[i].iLOWER_BOUND_MAGUMSA &&

  00071	0f bf 8f 96 00
	00 00		 movsx	 ecx, WORD PTR [edi+150]
  00078	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0007b	7c 05		 jl	 SHORT $LN2@GetUserLev
  0007d	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
$LN21@GetUserLev:
  00080	7e 14		 jle	 SHORT $LN16@GetUserLev
$LN2@GetUserLev:

; 1806 : 	}
; 1807 : 	else
; 1808 : 	{
; 1809 : 		for(int i=0;i<MAX_CHAOSCASTLE_LEVEL;i++)

  00082	83 c0 10	 add	 eax, 16			; 00000010H
  00085	46		 inc	 esi
  00086	3d 74 00 00 00	 cmp	 eax, OFFSET ?g_sttCHAOSCASTLE_LEVEL@@3PAU_CHAOSCASTLE_LEVEL@@A+116
  0008b	7c c5		 jl	 SHORT $LL4@GetUserLev

; 1825 : 				 gObj[iUserIndex].Level <= g_sttCHAOSCASTLE_LEVEL[i].iUPPER_BOUND )
; 1826 : 				{
; 1827 : 					iENTER_LEVEL = i;
; 1828 : 					break;
; 1829 : 				}
; 1830 : 			}
; 1831 : 		}
; 1832 : 	}
; 1833 : 			 
; 1834 : 	return iENTER_LEVEL;

  0008d	5f		 pop	 edi
  0008e	8b c3		 mov	 eax, ebx
  00090	5b		 pop	 ebx
  00091	5e		 pop	 esi

; 1835 : }

  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
$LN16@GetUserLev:

; 1816 : 					gObj[iUserIndex].Level <= g_sttCHAOSCASTLE_LEVEL[i].iUPPER_BOUND_MAGUMSA )
; 1817 : 				{
; 1818 : 					iENTER_LEVEL = i;

  00096	8b de		 mov	 ebx, esi
  00098	5f		 pop	 edi

; 1825 : 				 gObj[iUserIndex].Level <= g_sttCHAOSCASTLE_LEVEL[i].iUPPER_BOUND )
; 1826 : 				{
; 1827 : 					iENTER_LEVEL = i;
; 1828 : 					break;
; 1829 : 				}
; 1830 : 			}
; 1831 : 		}
; 1832 : 	}
; 1833 : 			 
; 1834 : 	return iENTER_LEVEL;

  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx
  0009c	5e		 pop	 esi

; 1835 : }

  0009d	5d		 pop	 ebp
  0009e	c2 04 00	 ret	 4
?GetUserLevelToEnter@CChaosCastle@@QAEHH@Z ENDP		; CChaosCastle::GetUserLevelToEnter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?LevelUp@CChaosCastle@@QAEHHHH@Z
_TEXT	SEGMENT
_iLEFT_EXP$1$ = -264					; size = 4
_szLog$1 = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_iUserIndex$ = 8					; size = 4
_iAddExp$ = 12						; size = 4
_iEventType$ = 16					; size = 4
?LevelUp@CChaosCastle@@QAEHHHH@Z PROC			; CChaosCastle::LevelUp, COMDAT
; _this$ = ecx

; 1949 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _iUserIndex$[ebp]

; 1950 : 	if ( OBJMAX_RANGE(iUserIndex) == FALSE )

  00017	85 f6		 test	 esi, esi
  00019	0f 88 60 03 00
	00		 js	 $LN20@LevelUp
  0001f	33 c0		 xor	 eax, eax
  00021	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  00027	0f 9e c0	 setle	 al
  0002a	85 c0		 test	 eax, eax
  0002c	0f 84 4d 03 00
	00		 je	 $LN20@LevelUp

; 1951 : 	{
; 1952 : 		return 0;
; 1953 : 	}
; 1954 : 
; 1955 : 	int iLEFT_EXP = 0;
; 1956 : 
; 1957 : 	if ( g_MasterExp.LevelUp(&gObj[iUserIndex],iAddExp) )

  00032	53		 push	 ebx
  00033	8b 5d 0c	 mov	 ebx, DWORD PTR _iAddExp$[ebp]
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterExp@@3VCMasterExperience@@A ; g_MasterExp
  0003b	57		 push	 edi
  0003c	8b c3		 mov	 eax, ebx
  0003e	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  00044	99		 cdq
  00045	52		 push	 edx
  00046	50		 push	 eax
  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004c	03 c7		 add	 eax, edi
  0004e	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iLEFT_EXP$1$[ebp], 0
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?LevelUp@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@_J@Z ; CMasterExperience::LevelUp
  0005e	85 c0		 test	 eax, eax
  00060	0f 85 89 00 00
	00		 jne	 $LN24@LevelUp

; 1958 : 	{
; 1959 : 		return 0;
; 1960 : 	}
; 1961 : 
; 1962 : 	::gObjSetExpPetItem(iUserIndex, iAddExp);

  00066	53		 push	 ebx
  00067	56		 push	 esi
  00068	e8 00 00 00 00	 call	 ?gObjSetExpPetItem@@YAXHH@Z ; gObjSetExpPetItem

; 1963 : 
; 1964 : 	LogAddTD("Experience : Map[%d]-(%d,%d) [%s][%s](%d) %u %d MonsterIndex : %d, EventType : %d",

  0006d	ff 75 10	 push	 DWORD PTR _iEventType$[ebp]
  00070	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00076	6a 00		 push	 0
  00078	53		 push	 ebx
  00079	ff b4 0f a0 00
	00 00		 push	 DWORD PTR [edi+ecx+160]
  00080	0f bf 84 0f 96
	00 00 00	 movsx	 eax, WORD PTR [edi+ecx+150]
  00088	50		 push	 eax
  00089	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0008c	03 c7		 add	 eax, edi
  0008e	50		 push	 eax
  0008f	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00092	03 c7		 add	 eax, edi
  00094	50		 push	 eax
  00095	0f b6 84 0f 21
	01 00 00	 movzx	 eax, BYTE PTR [edi+ecx+289]
  0009d	50		 push	 eax
  0009e	0f b6 84 0f 20
	01 00 00	 movzx	 eax, BYTE PTR [edi+ecx+288]
  000a6	50		 push	 eax
  000a7	0f b6 84 0f 23
	01 00 00	 movzx	 eax, BYTE PTR [edi+ecx+291]
  000af	50		 push	 eax
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@MCCJHJPM@Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5?$FL?$CFs@
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1965 : 		gObj[iUserIndex].MapNumber, gObj[iUserIndex].X, gObj[iUserIndex].Y,	
; 1966 : 		gObj[iUserIndex].AccountID,	gObj[iUserIndex].Name,
; 1967 : 		gObj[iUserIndex].Level, gObj[iUserIndex].Experience,
; 1968 : 		iAddExp, 0, iEventType);
; 1969 : 
; 1970 : 	if ( gObj[iUserIndex].Level >= MAX_CHAR_LEVEL )

  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c0	b9 90 01 00 00	 mov	 ecx, 400		; 00000190H
  000c5	83 c4 34	 add	 esp, 52			; 00000034H
  000c8	66 39 8c 07 96
	00 00 00	 cmp	 WORD PTR [edi+eax+150], cx
  000d0	7c 32		 jl	 SHORT $LN7@LevelUp

; 1971 : 	{
; 1972 : 		::GCServerMsgStringSend(lMsg.Get(MSGGET(4, 112)), gObj[iUserIndex].m_Index, 1);

  000d2	6a 01		 push	 1
  000d4	ff 34 07	 push	 DWORD PTR [edi+eax]
  000d7	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000dc	68 70 04 00 00	 push	 1136			; 00000470H
  000e1	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  000ec	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN24@LevelUp:

; 1973 : 		return 0;

  000ef	5f		 pop	 edi
  000f0	5b		 pop	 ebx
  000f1	33 c0		 xor	 eax, eax
  000f3	5e		 pop	 esi

; 2052 : }

  000f4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f7	33 cd		 xor	 ecx, ebp
  000f9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c2 0c 00	 ret	 12			; 0000000cH
$LN7@LevelUp:

; 1974 : 	}
; 1975 : 
; 1976 : 	if ( (gObj[iUserIndex].Experience + iAddExp) < gObj[iUserIndex].NextExp )

  00104	8b b4 07 a0 00
	00 00		 mov	 esi, DWORD PTR [edi+eax+160]
  0010b	8b 94 07 a4 00
	00 00		 mov	 edx, DWORD PTR [edi+eax+164]
  00112	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
  00115	3b ca		 cmp	 ecx, edx
  00117	73 20		 jae	 SHORT $LN8@LevelUp

; 1977 : 	{
; 1978 : 		gObj[iUserIndex].Experience += iAddExp;

  00119	89 8c 07 a0 00
	00 00		 mov	 DWORD PTR [edi+eax+160], ecx

; 2047 : 		}
; 2048 : 
; 2049 : 	}
; 2050 : 
; 2051 : 	return iLEFT_EXP;

  00120	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _iLEFT_EXP$1$[ebp]
  00126	5f		 pop	 edi
  00127	5b		 pop	 ebx
  00128	5e		 pop	 esi

; 2052 : }

  00129	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012c	33 cd		 xor	 ecx, ebp
  0012e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c2 0c 00	 ret	 12			; 0000000cH
$LN8@LevelUp:

; 1979 : 	}
; 1980 : 	else
; 1981 : 	{
; 1982 : 		iLEFT_EXP = gObj[iUserIndex].Experience + iAddExp - gObj[iUserIndex].NextExp;
; 1983 : 		gObj[iUserIndex].Experience = gObj[iUserIndex].NextExp;

  00139	89 94 07 a0 00
	00 00		 mov	 DWORD PTR [edi+eax+160], edx
  00140	2b f2		 sub	 esi, edx

; 1984 : 		gObj[iUserIndex].Level++;

  00142	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00147	03 f3		 add	 esi, ebx
  00149	89 b5 f8 fe ff
	ff		 mov	 DWORD PTR _iLEFT_EXP$1$[ebp], esi

; 1985 : #if (ENABLE_CUSTOM_CLASSCALC == 1)
; 1986 : 		gObj[iUserIndex].LevelUpPoint += g_ClassCalc.GetLevelPoint(&gObj[iUserIndex], 0, 0);

  0014f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ClassCalc@@3VClassCalc@@A ; g_ClassCalc
  00154	6a 00		 push	 0
  00156	6a 00		 push	 0
  00158	66 ff 84 07 96
	00 00 00	 inc	 WORD PTR [edi+eax+150]
  00160	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00166	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00169	50		 push	 eax
  0016a	e8 00 00 00 00	 call	 ?GetLevelPoint@ClassCalc@@QAEGPAUOBJECTSTRUCT@@EE@Z ; ClassCalc::GetLevelPoint
  0016f	0f b7 c0	 movzx	 eax, ax
  00172	01 84 37 98 00
	00 00		 add	 DWORD PTR [edi+esi+152], eax

; 1987 : #else
; 1988 : 		if( gObj[iUserIndex].Class == CLASS_DARKLORD )
; 1989 : 		{
; 1990 : 			gObj[iUserIndex].LevelUpPoint += 7;
; 1991 : 		}
; 1992 : 		else if( gObj[iUserIndex].Class == CLASS_MAGUMSA )
; 1993 : 		{
; 1994 : 			gObj[iUserIndex].LevelUpPoint += 7;
; 1995 : 		}
; 1996 : 		else if( gObj[iUserIndex].Class == CLASS_FIGHTER )
; 1997 : 		{
; 1998 : 			gObj[iUserIndex].LevelUpPoint += 7;
; 1999 : 		}
; 2000 : 		else
; 2001 : 		{
; 2002 : 			gObj[iUserIndex].LevelUpPoint += 5;
; 2003 : 		}
; 2004 : #endif
; 2005 : 
; 2006 : 		if( gObj[iUserIndex].PlusStatQuestClear != false )

  00179	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0017f	80 7c 37 7c 00	 cmp	 BYTE PTR [edi+esi+124], 0
  00184	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00187	74 46		 je	 SHORT $LN10@LevelUp

; 2007 : 		{
; 2008 : #if (ENABLE_CUSTOM_CLASSCALC == 1)
; 2009 : 			gObj[iUserIndex].LevelUpPoint += g_ClassCalc.GetLevelPoint(&gObj[iUserIndex], 0, 1);

  00189	6a 01		 push	 1
  0018b	6a 00		 push	 0
  0018d	50		 push	 eax
  0018e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ClassCalc@@3VClassCalc@@A ; g_ClassCalc
  00193	e8 00 00 00 00	 call	 ?GetLevelPoint@ClassCalc@@QAEGPAUOBJECTSTRUCT@@EE@Z ; ClassCalc::GetLevelPoint
  00198	0f b7 c0	 movzx	 eax, ax
  0019b	01 84 37 98 00
	00 00		 add	 DWORD PTR [edi+esi+152], eax

; 2010 : #else
; 2011 : 			gObj[iUserIndex].LevelUpPoint += 1;
; 2012 : #endif
; 2013 : 			LogAddTD("[%s][%s] LevelUp PlusStatQuest Clear AddStat %d",

  001a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001a8	ff b4 0f 98 00
	00 00		 push	 DWORD PTR [edi+ecx+152]
  001af	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  001b2	03 c7		 add	 eax, edi
  001b4	50		 push	 eax
  001b5	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  001b8	03 c7		 add	 eax, edi
  001ba	50		 push	 eax
  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@KDBPKGIM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5LevelUp?5PlusStatQuest?5C@
  001c0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001c6	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001cc	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@LevelUp:

; 2014 : 				gObj[iUserIndex].AccountID, gObj[iUserIndex].Name, gObj[iUserIndex].LevelUpPoint);
; 2015 : 		}
; 2016 : 
; 2017 : 		gObj[iUserIndex].MaxLife += DCInfo.DefClass[gObj[iUserIndex].Class].LevelLife;

  001cf	0f b7 84 37 90
	00 00 00	 movzx	 eax, WORD PTR [edi+esi+144]
  001d7	69 c0 c8 0b 00
	00		 imul	 eax, eax, 3016
  001dd	f3 0f 10 80 10
	00 00 00	 movss	 xmm0, DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+16]
  001e5	f3 0f 58 84 37
	dc 00 00 00	 addss	 xmm0, DWORD PTR [edi+esi+220]
  001ee	f3 0f 11 84 37
	dc 00 00 00	 movss	 DWORD PTR [edi+esi+220], xmm0

; 2018 : 		gObj[iUserIndex].MaxMana += DCInfo.DefClass[gObj[iUserIndex].Class].LevelMana;

  001f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001fd	0f b7 84 0f 90
	00 00 00	 movzx	 eax, WORD PTR [edi+ecx+144]
  00205	69 c0 c8 0b 00
	00		 imul	 eax, eax, 3016
  0020b	f3 0f 10 80 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+28]
  00213	f3 0f 58 84 0f
	f0 00 00 00	 addss	 xmm0, DWORD PTR [edi+ecx+240]
  0021c	f3 0f 11 84 0f
	f0 00 00 00	 movss	 DWORD PTR [edi+ecx+240], xmm0

; 2019 : 		gObj[iUserIndex].Life = gObj[iUserIndex].MaxLife;

  00225	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0022b	8b 84 0f dc 00
	00 00		 mov	 eax, DWORD PTR [edi+ecx+220]
  00232	89 84 0f d8 00
	00 00		 mov	 DWORD PTR [edi+ecx+216], eax

; 2020 : 		gObj[iUserIndex].Mana = gObj[iUserIndex].MaxMana;

  00239	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0023f	8b 84 0f f0 00
	00 00		 mov	 eax, DWORD PTR [edi+ecx+240]
  00246	89 84 0f ec 00
	00 00		 mov	 DWORD PTR [edi+ecx+236], eax

; 2021 : 		gObjNextExpCal(&gObj[iUserIndex]);

  0024d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00252	03 c7		 add	 eax, edi
  00254	50		 push	 eax
  00255	e8 00 00 00 00	 call	 ?gObjNextExpCal@@YAXPAUOBJECTSTRUCT@@@Z ; gObjNextExpCal

; 2022 : 		gObjSetBP(gObj[iUserIndex].m_Index);

  0025a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0025f	ff 34 07	 push	 DWORD PTR [edi+eax]
  00262	e8 00 00 00 00	 call	 ?gObjSetBP@@YAXH@Z	; gObjSetBP

; 2023 : 		GCLevelUpMsgSend(gObj[iUserIndex].m_Index, 1);

  00267	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0026c	6a 01		 push	 1
  0026e	ff 34 07	 push	 DWORD PTR [edi+eax]
  00271	e8 00 00 00 00	 call	 ?GCLevelUpMsgSend@@YAXHH@Z ; GCLevelUpMsgSend

; 2024 : 		LogAddTD(lMsg.Get(MSGGET(2, 8)), gObj[iUserIndex].AccountID, gObj[iUserIndex].Name, gObj[iUserIndex].Level);

  00276	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0027c	83 c4 10	 add	 esp, 16			; 00000010H
  0027f	0f bf 84 0f 96
	00 00 00	 movsx	 eax, WORD PTR [edi+ecx+150]
  00287	50		 push	 eax
  00288	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0028b	03 c7		 add	 eax, edi
  0028d	50		 push	 eax
  0028e	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00291	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00296	03 c7		 add	 eax, edi
  00298	50		 push	 eax
  00299	68 08 02 00 00	 push	 520			; 00000208H
  0029e	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  002a3	50		 push	 eax
  002a4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2025 : 
; 2026 : 		if( gObj[iUserIndex].Level == 400 && gObj[iUserIndex].PartyNumber >= 0)

  002aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002b0	b8 90 01 00 00	 mov	 eax, 400		; 00000190H
  002b5	83 c4 10	 add	 esp, 16			; 00000010H
  002b8	66 39 84 0f 96
	00 00 00	 cmp	 WORD PTR [edi+ecx+150], ax
  002c0	0f 85 a0 00 00
	00		 jne	 $LN11@LevelUp
  002c6	8b b4 0f 0c 06
	00 00		 mov	 esi, DWORD PTR [edi+ecx+1548]
  002cd	85 f6		 test	 esi, esi
  002cf	0f 88 91 00 00
	00		 js	 $LN11@LevelUp

; 2027 : 		{
; 2028 : 			int PartyNumber = gObj[iUserIndex].PartyNumber;
; 2029 : 			char szLog[256];
; 2030 : 
; 2031 : 			sprintf(szLog,"400 LevelUp (%s)(%s) Party ",gObj[iUserIndex].AccountID,gObj[iUserIndex].Name);

  002d5	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  002d8	03 c7		 add	 eax, edi
  002da	50		 push	 eax
  002db	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  002de	03 c7		 add	 eax, edi
  002e0	50		 push	 eax
  002e1	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szLog$1[ebp]
  002e7	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DJAOLMAF@400?5LevelUp?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Party?5?$AA@
  002ec	50		 push	 eax
  002ed	e8 00 00 00 00	 call	 _sprintf
  002f2	8b c6		 mov	 eax, esi
  002f4	83 c4 10	 add	 esp, 16			; 00000010H
  002f7	c1 e0 04	 shl	 eax, 4
  002fa	bb 05 00 00 00	 mov	 ebx, 5
  002ff	2b c6		 sub	 eax, esi
  00301	8d 3c 85 0c 00
	00 00		 lea	 edi, DWORD PTR ?gParty@@3VPartyClass@@A[eax*4+12]
$LL4@LevelUp:

; 2036 : 			{
; 2037 : 				tObjNum = gParty.m_PartyS[PartyNumber].Number[i];

  00308	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 2038 : 
; 2039 : 				if( tObjNum >= 0 )

  0030a	85 c9		 test	 ecx, ecx
  0030c	78 40		 js	 SHORT $LN2@LevelUp

; 2040 : 				{
; 2041 : 					int Len = strlen(szLog);

  0030e	8d b5 fc fe ff
	ff		 lea	 esi, DWORD PTR _szLog$1[ebp]
  00314	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
$LL21@LevelUp:
  00317	8a 06		 mov	 al, BYTE PTR [esi]
  00319	46		 inc	 esi
  0031a	84 c0		 test	 al, al
  0031c	75 f9		 jne	 SHORT $LL21@LevelUp
  0031e	2b f2		 sub	 esi, edx

; 2042 : 					sprintf(&szLog[Len],",(%s)(%s) ",gObj[tObjNum].AccountID,gObj[tObjNum].Name);

  00320	69 d1 40 27 00
	00		 imul	 edx, ecx, 10048
  00326	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0032c	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0032f	03 c2		 add	 eax, edx
  00331	50		 push	 eax
  00332	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00335	03 c2		 add	 eax, edx
  00337	50		 push	 eax
  00338	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szLog$1[ebp]
  0033e	03 c6		 add	 eax, esi
  00340	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MNKEEMGH@?0?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5?$AA@
  00345	50		 push	 eax
  00346	e8 00 00 00 00	 call	 _sprintf
  0034b	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@LevelUp:

; 2032 : 
; 2033 : 			int tObjNum;
; 2034 : 
; 2035 : 			for(int i = 0; i < MAX_USER_IN_PARTY; i++)

  0034e	83 c7 04	 add	 edi, 4
  00351	83 eb 01	 sub	 ebx, 1
  00354	75 b2		 jne	 SHORT $LL4@LevelUp

; 2043 : 				}
; 2044 : 			}
; 2045 : 
; 2046 : 			LogAddTD(szLog);

  00356	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szLog$1[ebp]
  0035c	50		 push	 eax
  0035d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00363	83 c4 04	 add	 esp, 4
$LN11@LevelUp:

; 2047 : 		}
; 2048 : 
; 2049 : 	}
; 2050 : 
; 2051 : 	return iLEFT_EXP;

  00366	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _iLEFT_EXP$1$[ebp]
  0036c	5f		 pop	 edi
  0036d	5b		 pop	 ebx
  0036e	5e		 pop	 esi

; 2052 : }

  0036f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00372	33 cd		 xor	 ecx, ebp
  00374	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00379	8b e5		 mov	 esp, ebp
  0037b	5d		 pop	 ebp
  0037c	c2 0c 00	 ret	 12			; 0000000cH
$LN20@LevelUp:
  0037f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00382	33 c0		 xor	 eax, eax
  00384	33 cd		 xor	 ecx, ebp
  00386	5e		 pop	 esi
  00387	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0038c	8b e5		 mov	 esp, ebp
  0038e	5d		 pop	 ebp
  0038f	c2 0c 00	 ret	 12			; 0000000cH
?LevelUp@CChaosCastle@@QAEHHHH@Z ENDP			; CChaosCastle::LevelUp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?CalcSendRewardEXP@CChaosCastle@@QAEHHHHH@Z
_TEXT	SEGMENT
_iCAL_EXP$ = -16					; size = 8
tv171 = -8						; size = 4
_this$1$ = -4						; size = 4
_iRET_EXP$2$ = 8					; size = 4
_iUserIndex$ = 8					; size = 4
_iRET_EXP$1$ = 12					; size = 4
_iEXP$ = 12						; size = 4
_iKILLCOUNT_USER$ = 16					; size = 4
_iKILLCOUNT_MONSTER$ = 20				; size = 4
?CalcSendRewardEXP@CChaosCastle@@QAEHHHHH@Z PROC	; CChaosCastle::CalcSendRewardEXP, COMDAT
; _this$ = ecx

; 1742 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 1743 : 	if ( iEXP <= 0 )

  00007	8b 75 0c	 mov	 esi, DWORD PTR _iEXP$[ebp]
  0000a	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	85 f6		 test	 esi, esi
  0000f	7f 09		 jg	 SHORT $LN4@CalcSendRe

; 1744 : 		return 0;

  00011	33 c0		 xor	 eax, eax
  00013	5e		 pop	 esi

; 1786 : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 10 00	 ret	 16			; 00000010H
$LN4@CalcSendRe:

; 1745 : 
; 1746 : 	if ( g_CrywolfSync.GetOccupationState() == 1 &&

  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  0001f	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetOccupationState
  00024	83 f8 01	 cmp	 eax, 1
  00027	75 29		 jne	 SHORT $LN5@CalcSendRe
  00029	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_iCrywolfApplyMvpPenalty@@3HA, 0 ; g_iCrywolfApplyMvpPenalty
  00030	74 20		 je	 SHORT $LN5@CalcSendRe

; 1747 : 		 g_iCrywolfApplyMvpPenalty )
; 1748 : 	{
; 1749 : 		iEXP = iEXP * g_CrywolfSync.GetGettingExpPenaltyRate() / 100;

  00032	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  00037	e8 00 00 00 00	 call	 ?GetGettingExpPenaltyRate@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetGettingExpPenaltyRate
  0003c	8b c8		 mov	 ecx, eax
  0003e	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00043	0f af ce	 imul	 ecx, esi
  00046	f7 e9		 imul	 ecx
  00048	c1 fa 05	 sar	 edx, 5
  0004b	8b f2		 mov	 esi, edx
  0004d	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00050	03 f2		 add	 esi, edx
$LN5@CalcSendRe:

; 1750 : 	}
; 1751 : 
; 1752 : 	__int64 iRET_EXP = 0;
; 1753 : 	__int64 iCAL_EXP = iEXP;
; 1754 : 	int iMAX_LEVCOUNT = 0;
; 1755 : 
; 1756 : 	if ( !gObjIsConnected(iUserIndex))

  00052	53		 push	 ebx
  00053	8b 5d 08	 mov	 ebx, DWORD PTR _iUserIndex$[ebp]
  00056	8b c6		 mov	 eax, esi
  00058	57		 push	 edi
  00059	99		 cdq
  0005a	33 ff		 xor	 edi, edi
  0005c	53		 push	 ebx
  0005d	89 45 f0	 mov	 DWORD PTR _iCAL_EXP$[ebp], eax
  00060	89 55 f4	 mov	 DWORD PTR _iCAL_EXP$[ebp+4], edx
  00063	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00068	83 c4 04	 add	 esp, 4
  0006b	85 c0		 test	 eax, eax
  0006d	75 09		 jne	 SHORT $LN6@CalcSendRe
  0006f	5f		 pop	 edi
  00070	5b		 pop	 ebx
  00071	5e		 pop	 esi

; 1786 : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 10 00	 ret	 16			; 00000010H
$LN6@CalcSendRe:

; 1757 : 		return 0;
; 1758 : 
; 1759 : 	iRET_EXP = iCAL_EXP;
; 1760 : 
; 1761 : 	if ( gObj[iUserIndex].Type == OBJ_USER )

  00078	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0007e	8b 45 f0	 mov	 eax, DWORD PTR _iCAL_EXP$[ebp]
  00081	8b 55 f4	 mov	 edx, DWORD PTR _iCAL_EXP$[ebp+4]
  00084	69 f3 40 27 00
	00		 imul	 esi, ebx, 10048
  0008a	89 45 0c	 mov	 DWORD PTR _iRET_EXP$1$[ebp], eax
  0008d	89 55 08	 mov	 DWORD PTR _iRET_EXP$2$[ebp], edx
  00090	89 75 f8	 mov	 DWORD PTR tv171[ebp], esi
  00093	80 7c 0e 50 01	 cmp	 BYTE PTR [esi+ecx+80], 1
  00098	0f 85 d7 00 00
	00		 jne	 $LN23@CalcSendRe

; 1762 : 	{
; 1763 : 		while ( iCAL_EXP > 0 )

  0009e	85 d2		 test	 edx, edx
  000a0	0f 8c 9b 00 00
	00		 jl	 $LN22@CalcSendRe
  000a6	7f 12		 jg	 SHORT $LN17@CalcSendRe
  000a8	85 c0		 test	 eax, eax
  000aa	0f 84 91 00 00
	00		 je	 $LN22@CalcSendRe
$LL2@CalcSendRe:

; 1764 : 		{
; 1765 : 			if ( iCAL_EXP > 0 )

  000b0	85 d2		 test	 edx, edx
  000b2	7c 76		 jl	 SHORT $LN8@CalcSendRe
  000b4	7f 04		 jg	 SHORT $LN17@CalcSendRe
  000b6	85 c0		 test	 eax, eax
  000b8	74 70		 je	 SHORT $LN8@CalcSendRe
$LN17@CalcSendRe:

; 1766 : 			{
; 1767 : 				CheckItemOptForGetExpEx(&gObj[iUserIndex],iCAL_EXP,TRUE);

  000ba	6a 01		 push	 1
  000bc	8d 45 f0	 lea	 eax, DWORD PTR _iCAL_EXP$[ebp]
  000bf	50		 push	 eax
  000c0	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?CheckItemOptForGetExpEx@@YAXPAUOBJECTSTRUCT@@AA_JH@Z ; CheckItemOptForGetExpEx

; 1768 : 				iCAL_EXP = __int64(iCAL_EXP*this->m_stChaosCastleData[gObj[iUserIndex].m_cChaosCastleIndex].m_iCC_REWARD_MULTIPLY);

  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d1	8b 55 f4	 mov	 edx, DWORD PTR _iCAL_EXP$[ebp+4]
  000d4	8b 4d f0	 mov	 ecx, DWORD PTR _iCAL_EXP$[ebp]
  000d7	0f be 84 06 3d
	12 00 00	 movsx	 eax, BYTE PTR [esi+eax+4669]
  000df	69 f0 68 08 00
	00		 imul	 esi, eax, 2152
  000e5	e8 00 00 00 00	 call	 __ltod3
  000ea	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000ed	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000f1	f3 0f 59 84 06
	90 08 00 00	 mulss	 xmm0, DWORD PTR [esi+eax+2192]
  000fa	e8 00 00 00 00	 call	 __ftol3
  000ff	8b c8		 mov	 ecx, eax
  00101	89 55 f4	 mov	 DWORD PTR _iCAL_EXP$[ebp+4], edx

; 1769 : 				iRET_EXP = int(iCAL_EXP);
; 1770 : 				iCAL_EXP = this->LevelUp(iUserIndex, (int)iCAL_EXP, 3);

  00104	6a 03		 push	 3
  00106	51		 push	 ecx
  00107	99		 cdq
  00108	89 4d f0	 mov	 DWORD PTR _iCAL_EXP$[ebp], ecx
  0010b	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0010e	53		 push	 ebx
  0010f	89 45 0c	 mov	 DWORD PTR _iRET_EXP$1$[ebp], eax
  00112	89 55 08	 mov	 DWORD PTR _iRET_EXP$2$[ebp], edx
  00115	e8 00 00 00 00	 call	 ?LevelUp@CChaosCastle@@QAEHHHH@Z ; CChaosCastle::LevelUp
  0011a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00120	8b 75 f8	 mov	 esi, DWORD PTR tv171[ebp]
  00123	99		 cdq
  00124	89 45 f0	 mov	 DWORD PTR _iCAL_EXP$[ebp], eax
  00127	89 55 f4	 mov	 DWORD PTR _iCAL_EXP$[ebp+4], edx
$LN8@CalcSendRe:

; 1771 : 			}
; 1772 : 
; 1773 : 			iMAX_LEVCOUNT++;

  0012a	47		 inc	 edi

; 1774 : 
; 1775 : 			if ( iMAX_LEVCOUNT > 1000 )

  0012b	81 ff e8 03 00
	00		 cmp	 edi, 1000		; 000003e8H
  00131	7f 0e		 jg	 SHORT $LN22@CalcSendRe

; 1762 : 	{
; 1763 : 		while ( iCAL_EXP > 0 )

  00133	85 d2		 test	 edx, edx
  00135	7f 83		 jg	 SHORT $LN17@CalcSendRe
  00137	7c 08		 jl	 SHORT $LN22@CalcSendRe
  00139	85 c0		 test	 eax, eax
  0013b	0f 85 6f ff ff
	ff		 jne	 $LL2@CalcSendRe
$LN22@CalcSendRe:

; 1776 : 				break;
; 1777 : 		}
; 1778 : 
; 1779 : 		if( g_MasterExp.IsEnabled(&gObj[iUserIndex]) == FALSE )

  00141	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00144	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterExp@@3VCMasterExperience@@A ; g_MasterExp
  00149	50		 push	 eax
  0014a	e8 00 00 00 00	 call	 ?IsEnabled@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterExperience::IsEnabled

; 1780 : 		{
; 1781 : 			GCSendExp(iUserIndex,(WORD)-1,iRET_EXP,0,0);

  0014f	8b 75 0c	 mov	 esi, DWORD PTR _iRET_EXP$1$[ebp]
  00152	85 c0		 test	 eax, eax
  00154	75 21		 jne	 SHORT $LN10@CalcSendRe
  00156	50		 push	 eax
  00157	50		 push	 eax
  00158	ff 75 08	 push	 DWORD PTR _iRET_EXP$2$[ebp]
  0015b	56		 push	 esi
  0015c	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00161	53		 push	 ebx
  00162	e8 00 00 00 00	 call	 ?GCSendExp@@YAXHH_JHH@Z	; GCSendExp
  00167	83 c4 18	 add	 esp, 24			; 00000018H

; 1782 : 		}
; 1783 : 	}
; 1784 : 
; 1785 : 	return (int)iRET_EXP;

  0016a	8b c6		 mov	 eax, esi
  0016c	5f		 pop	 edi
  0016d	5b		 pop	 ebx
  0016e	5e		 pop	 esi

; 1786 : }

  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c2 10 00	 ret	 16			; 00000010H
$LN23@CalcSendRe:
  00175	8b f0		 mov	 esi, eax
$LN10@CalcSendRe:
  00177	5f		 pop	 edi
  00178	5b		 pop	 ebx

; 1782 : 		}
; 1783 : 	}
; 1784 : 
; 1785 : 	return (int)iRET_EXP;

  00179	8b c6		 mov	 eax, esi
  0017b	5e		 pop	 esi

; 1786 : }

  0017c	8b e5		 mov	 esp, ebp
  0017e	5d		 pop	 ebp
  0017f	c2 10 00	 ret	 16			; 00000010H
?CalcSendRewardEXP@CChaosCastle@@QAEHHHHH@Z ENDP	; CChaosCastle::CalcSendRewardEXP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?GetCurrentWinUser@CChaosCastle@@QAEHH@Z
_TEXT	SEGMENT
tv426 = -12						; size = 4
_iCC_SCORE$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
_iChaosCastleIndex$ = 8					; size = 4
?GetCurrentWinUser@CChaosCastle@@QAEHH@Z PROC		; CChaosCastle::GetCurrentWinUser, COMDAT
; _this$ = ecx

; 2059 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	57		 push	 edi

; 2060 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00007	8b 7d 08	 mov	 edi, DWORD PTR _iChaosCastleIndex$[ebp]
  0000a	8b d1		 mov	 edx, ecx
  0000c	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
  0000f	85 ff		 test	 edi, edi
  00011	0f 88 e1 00 00
	00		 js	 $LN20@GetCurrent
  00017	33 c0		 xor	 eax, eax
  00019	83 ff 06	 cmp	 edi, 6
  0001c	0f 9e c0	 setle	 al
  0001f	85 c0		 test	 eax, eax
  00021	0f 84 d1 00 00
	00		 je	 $LN20@GetCurrent

; 2063 : 	}
; 2064 : 
; 2065 : 	int iCC_SCORE = -1;

  00027	53		 push	 ebx
  00028	69 c7 68 08 00
	00		 imul	 eax, edi, 2152

; 2066 : 	int iCC_WINNER_INDEX = -1;

  0002e	83 cb ff	 or	 ebx, -1
  00031	56		 push	 esi
  00032	8d 72 68	 lea	 esi, DWORD PTR [edx+104]
  00035	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _iCC_SCORE$1$[ebp], -1
  0003c	c7 45 f4 46 00
	00 00		 mov	 DWORD PTR tv426[ebp], 70 ; 00000046H
  00043	03 f0		 add	 esi, eax
$LL4@GetCurrent:

; 2069 : 	{
; 2070 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex != -1 )

  00045	8b 06		 mov	 eax, DWORD PTR [esi]
  00047	83 f8 ff	 cmp	 eax, -1
  0004a	74 51		 je	 SHORT $LN2@GetCurrent

; 2071 : 		{
; 2072 : 			if ( gObjIsConnected(this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex) == TRUE &&
; 2073 : 				 gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex].MapNumber == GetMap(iChaosCastleIndex) &&	

  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00052	83 c4 04	 add	 esp, 4
  00055	83 f8 01	 cmp	 eax, 1
  00058	75 43		 jne	 SHORT $LN2@GetCurrent
  0005a	69 3e 40 27 00
	00		 imul	 edi, DWORD PTR [esi], 10048
  00060	ff 75 08	 push	 DWORD PTR _iChaosCastleIndex$[ebp]
  00063	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00066	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006c	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap
  00071	0f b6 8f 23 01
	00 00		 movzx	 ecx, BYTE PTR [edi+291]
  00078	3b c8		 cmp	 ecx, eax
  0007a	75 21		 jne	 SHORT $LN2@GetCurrent
  0007c	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  00080	75 1b		 jne	 SHORT $LN2@GetCurrent

; 2074 : 				this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iUserState == 0 )
; 2075 : 			{
; 2076 : 				LPOBJ lpObj = &gObj[this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex];
; 2077 : 
; 2078 : 				int iUSER_SCORE = lpObj->m_cKillUserCount + lpObj->m_cKillMonsterCount * 2;

  00082	0f be 8f 45 12
	00 00		 movsx	 ecx, BYTE PTR [edi+4677]
  00089	0f be 87 44 12
	00 00		 movsx	 eax, BYTE PTR [edi+4676]
  00090	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]

; 2079 : 
; 2080 : 				if ( iCC_SCORE < iUSER_SCORE )

  00093	39 45 f8	 cmp	 DWORD PTR _iCC_SCORE$1$[ebp], eax
  00096	7d 05		 jge	 SHORT $LN2@GetCurrent

; 2081 : 				{
; 2082 : 					iCC_SCORE = iUSER_SCORE;
; 2083 : 					iCC_WINNER_INDEX = lpObj->m_Index;

  00098	8b 1f		 mov	 ebx, DWORD PTR [edi]
  0009a	89 45 f8	 mov	 DWORD PTR _iCC_SCORE$1$[ebp], eax
$LN2@GetCurrent:

; 2067 : 
; 2068 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  0009d	83 c6 14	 add	 esi, 20			; 00000014H
  000a0	83 6d f4 01	 sub	 DWORD PTR tv426[ebp], 1
  000a4	75 9f		 jne	 SHORT $LL4@GetCurrent

; 2084 : 				}
; 2085 : 			}
; 2086 : 		}
; 2087 : 	}
; 2088 : 
; 2089 : 	if ( iCC_WINNER_INDEX != -1 )

  000a6	83 fb ff	 cmp	 ebx, -1
  000a9	74 42		 je	 SHORT $LN11@GetCurrent

; 2090 : 	{
; 2091 : 		if ( gObj[iCC_WINNER_INDEX].m_cKillUserCount == 0 &&

  000ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b0	69 cb 40 27 00
	00		 imul	 ecx, ebx, 10048
  000b6	80 bc 01 44 12
	00 00 00	 cmp	 BYTE PTR [ecx+eax+4676], 0
  000be	75 2d		 jne	 SHORT $LN11@GetCurrent
  000c0	80 bc 01 45 12
	00 00 00	 cmp	 BYTE PTR [ecx+eax+4677], 0
  000c8	75 23		 jne	 SHORT $LN11@GetCurrent

; 2092 : 			 gObj[iCC_WINNER_INDEX].m_cKillMonsterCount == 0 )
; 2093 : 		{
; 2094 : 			int iUSER_COUNT = this->GetCurPlayUser(iChaosCastleIndex);

  000ca	8b 7d 08	 mov	 edi, DWORD PTR _iChaosCastleIndex$[ebp]
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000d0	57		 push	 edi
  000d1	e8 00 00 00 00	 call	 ?GetCurPlayUser@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetCurPlayUser

; 2095 : 			int iMONSTER_COUNT = this->GetMonsterListCount(iChaosCastleIndex);

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000d9	8b f0		 mov	 esi, eax
  000db	57		 push	 edi
  000dc	e8 00 00 00 00	 call	 ?GetMonsterListCount@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMonsterListCount

; 2096 : 
; 2097 : 			if ( iUSER_COUNT != 1 || iMONSTER_COUNT != 0 )

  000e1	83 fe 01	 cmp	 esi, 1
  000e4	75 04		 jne	 SHORT $LN12@GetCurrent
  000e6	85 c0		 test	 eax, eax
  000e8	74 03		 je	 SHORT $LN11@GetCurrent
$LN12@GetCurrent:

; 2098 : 			{
; 2099 : 				iCC_WINNER_INDEX = -1;

  000ea	83 cb ff	 or	 ebx, -1
$LN11@GetCurrent:
  000ed	5e		 pop	 esi

; 2100 : 			}
; 2101 : 		}
; 2102 : 	}
; 2103 : 
; 2104 : 	return iCC_WINNER_INDEX;

  000ee	8b c3		 mov	 eax, ebx
  000f0	5b		 pop	 ebx
  000f1	5f		 pop	 edi

; 2105 : }

  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 04 00	 ret	 4
$LN20@GetCurrent:

; 2061 : 	{
; 2062 : 		return -1;

  000f8	83 c8 ff	 or	 eax, -1
  000fb	5f		 pop	 edi

; 2105 : }

  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 04 00	 ret	 4
?GetCurrentWinUser@CChaosCastle@@QAEHH@Z ENDP		; CChaosCastle::GetCurrentWinUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SetUserState@CChaosCastle@@QAEXHH@Z
_TEXT	SEGMENT
_iUserIndex$ = 8					; size = 4
_iState$ = 12						; size = 4
?SetUserState@CChaosCastle@@QAEXHH@Z PROC		; CChaosCastle::SetUserState, COMDAT
; _this$ = ecx

; 1714 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1715 : 	if ( !OBJMAX_RANGE(iUserIndex))

  00003	8b 55 08	 mov	 edx, DWORD PTR _iUserIndex$[ebp]
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	0f 88 85 00 00
	00		 js	 $LN2@SetUserSta
  00011	33 c0		 xor	 eax, eax
  00013	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00019	0f 9e c0	 setle	 al
  0001c	85 c0		 test	 eax, eax
  0001e	74 76		 je	 SHORT $LN2@SetUserSta

; 1716 : 		return;
; 1717 : 
; 1718 : 	int iChaosCastleIndex = gObj[iUserIndex].m_cChaosCastleIndex;

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00025	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  0002b	56		 push	 esi
  0002c	0f be b4 01 3d
	12 00 00	 movsx	 esi, BYTE PTR [ecx+eax+4669]

; 1719 : 	int iChaosCastleSubIndex = gObj[iUserIndex].m_cChaosCastleSubIndex;

  00034	0f be 94 01 3e
	12 00 00	 movsx	 edx, BYTE PTR [ecx+eax+4670]

; 1720 : 
; 1721 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  0003c	85 f6		 test	 esi, esi
  0003e	78 55		 js	 SHORT $LN16@SetUserSta
  00040	33 c0		 xor	 eax, eax
  00042	83 fe 06	 cmp	 esi, 6
  00045	0f 9e c0	 setle	 al
  00048	85 c0		 test	 eax, eax
  0004a	74 49		 je	 SHORT $LN16@SetUserSta

; 1722 : 		return;
; 1723 : 
; 1724 : 	if ( CC_SUB_FLOOR_RANGE(iChaosCastleSubIndex) == FALSE )

  0004c	85 d2		 test	 edx, edx
  0004e	78 45		 js	 SHORT $LN16@SetUserSta
  00050	33 c0		 xor	 eax, eax
  00052	83 fa 45	 cmp	 edx, 69			; 00000045H
  00055	0f 9e c0	 setle	 al
  00058	85 c0		 test	 eax, eax
  0005a	74 39		 je	 SHORT $LN16@SetUserSta

; 1725 : 		return;
; 1726 : 
; 1727 : 	switch ( iState )

  0005c	8b 45 0c	 mov	 eax, DWORD PTR _iState$[ebp]
  0005f	83 e8 00	 sub	 eax, 0
  00062	74 1e		 je	 SHORT $LN7@SetUserSta
  00064	83 e8 01	 sub	 eax, 1
  00067	75 2c		 jne	 SHORT $LN16@SetUserSta

; 1731 : 			break;
; 1732 : 		case 1:
; 1733 : 			this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_iUserState = 1;

  00069	69 ce 68 08 00
	00		 imul	 ecx, esi, 2152
  0006f	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]
  00072	5e		 pop	 esi
  00073	03 cf		 add	 ecx, edi
  00075	5f		 pop	 edi
  00076	c7 44 81 74 01
	00 00 00	 mov	 DWORD PTR [ecx+eax*4+116], 1

; 1734 : 	}
; 1735 : }

  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
$LN7@SetUserSta:

; 1728 : 	{
; 1729 : 		case 0:
; 1730 : 			this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[iChaosCastleSubIndex].m_iUserState = 0;

  00082	69 ce 68 08 00
	00		 imul	 ecx, esi, 2152
  00088	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]
  0008b	03 cf		 add	 ecx, edi
  0008d	c7 44 81 74 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*4+116], 0
$LN16@SetUserSta:
  00095	5e		 pop	 esi
$LN2@SetUserSta:
  00096	5f		 pop	 edi

; 1734 : 	}
; 1735 : }

  00097	5d		 pop	 ebp
  00098	c2 08 00	 ret	 8
?SetUserState@CChaosCastle@@QAEXHH@Z ENDP		; CChaosCastle::SetUserState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?ProcessFallUser@CChaosCastle@@QAEXH@Z
_TEXT	SEGMENT
tv294 = -8						; size = 4
_this$1$ = -4						; size = 4
_iChaosCastleIndex$ = 8					; size = 4
?ProcessFallUser@CChaosCastle@@QAEXH@Z PROC		; CChaosCastle::ProcessFallUser, COMDAT
; _this$ = ecx

; 1679 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b d1		 mov	 edx, ecx

; 1680 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00008	8b 4d 08	 mov	 ecx, DWORD PTR _iChaosCastleIndex$[ebp]
  0000b	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
  0000e	85 c9		 test	 ecx, ecx
  00010	0f 88 09 01 00
	00		 js	 $LN3@ProcessFal
  00016	33 c0		 xor	 eax, eax
  00018	83 f9 06	 cmp	 ecx, 6
  0001b	0f 9e c0	 setle	 al
  0001e	85 c0		 test	 eax, eax
  00020	0f 84 f9 00 00
	00		 je	 $LN3@ProcessFal

; 1681 : 	{
; 1682 : 		return;
; 1683 : 	}
; 1684 : 
; 1685 : 	for ( int iFALL=0;iFALL<MAX_CHAOSCASTLE_USER;iFALL++)

  00026	53		 push	 ebx
  00027	69 c1 68 08 00
	00		 imul	 eax, ecx, 2152
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	8d ba 70 07 00
	00		 lea	 edi, DWORD PTR [edx+1904]
  00035	c7 45 f8 46 00
	00 00		 mov	 DWORD PTR tv294[ebp], 70 ; 00000046H
  0003c	03 f8		 add	 edi, eax
  0003e	66 90		 npad	 2
$LL4@ProcessFal:

; 1686 : 	{
; 1687 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_lFallUser[iFALL] != -1 )

  00040	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00042	83 fb ff	 cmp	 ebx, -1
  00045	0f 84 c4 00 00
	00		 je	 $LN2@ProcessFal

; 1688 : 		{
; 1689 : 			int iFALL_INDEX = this->m_stChaosCastleData[iChaosCastleIndex].m_lFallUser[iFALL];
; 1690 : 			InterlockedExchange(&this->m_stChaosCastleData[iChaosCastleIndex].m_lFallUser[iFALL], -1);

  0004b	83 c8 ff	 or	 eax, -1
  0004e	87 07		 xchg	 DWORD PTR [edi], eax

; 1691 : 
; 1692 : 			if ( (gObj[iFALL_INDEX].MapNumber) == GetMap(iChaosCastleIndex) &&
; 1693 : 				  gObjIsConnected(iFALL_INDEX) &&

  00050	51		 push	 ecx
  00051	8b ca		 mov	 ecx, edx
  00053	69 f3 40 27 00
	00		 imul	 esi, ebx, 10048
  00059	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00064	0f b6 8c 0e 23
	01 00 00	 movzx	 ecx, BYTE PTR [esi+ecx+291]
  0006c	3b c8		 cmp	 ecx, eax
  0006e	0f 85 95 00 00
	00		 jne	 $LN17@ProcessFal
  00074	53		 push	 ebx
  00075	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0007a	83 c4 04	 add	 esp, 4
  0007d	85 c0		 test	 eax, eax
  0007f	0f 84 84 00 00
	00		 je	 $LN17@ProcessFal
  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0008a	0f 57 c9	 xorps	 xmm1, xmm1
  0008d	f3 0f 10 84 06
	d8 00 00 00	 movss	 xmm0, DWORD PTR [esi+eax+216]
  00096	0f 2f c1	 comiss	 xmm0, xmm1
  00099	76 6e		 jbe	 SHORT $LN17@ProcessFal

; 1694 : 				  gObj[iFALL_INDEX].Life > 0 )
; 1695 : 			{
; 1696 : 				gObj[iFALL_INDEX].Life = 0;

  0009b	c7 84 06 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [esi+eax+216], 0

; 1697 : 				gObj[iFALL_INDEX].m_State = 4;

  000a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ab	c7 84 06 d0 01
	00 00 04 00 00
	00		 mov	 DWORD PTR [esi+eax+464], 4

; 1698 : 				gObj[iFALL_INDEX].KillerType = 1;

  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000bb	c6 84 06 89 05
	00 00 01	 mov	 BYTE PTR [esi+eax+1417], 1

; 1699 : 				gObj[iFALL_INDEX].RegenTime = GetTickCount();

  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1700 : 				gObj[iFALL_INDEX].DieRegen = 1;
; 1701 : 				gObj[iFALL_INDEX].PathCount = 0;
; 1702 : 				
; 1703 : 				GCDiePlayerSend(&gObj[iFALL_INDEX], gObj[iFALL_INDEX].m_Index, 0, 0);

  000cf	6a 00		 push	 0
  000d1	6a 00		 push	 0
  000d3	89 84 0e 90 05
	00 00		 mov	 DWORD PTR [esi+ecx+1424], eax
  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000df	c6 84 06 8a 05
	00 00 01	 mov	 BYTE PTR [esi+eax+1418], 1
  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ec	c7 84 06 58 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [esi+eax+344], 0
  000f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000fc	03 c6		 add	 eax, esi
  000fe	ff 30		 push	 DWORD PTR [eax]
  00100	50		 push	 eax
  00101	e8 00 00 00 00	 call	 ?GCDiePlayerSend@@YAXPAUOBJECTSTRUCT@@HGH@Z ; GCDiePlayerSend
  00106	83 c4 10	 add	 esp, 16			; 00000010H
$LN17@ProcessFal:
  00109	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  0010c	8b 4d 08	 mov	 ecx, DWORD PTR _iChaosCastleIndex$[ebp]
$LN2@ProcessFal:

; 1681 : 	{
; 1682 : 		return;
; 1683 : 	}
; 1684 : 
; 1685 : 	for ( int iFALL=0;iFALL<MAX_CHAOSCASTLE_USER;iFALL++)

  0010f	83 c7 04	 add	 edi, 4
  00112	83 6d f8 01	 sub	 DWORD PTR tv294[ebp], 1
  00116	0f 85 24 ff ff
	ff		 jne	 $LL4@ProcessFal
  0011c	5f		 pop	 edi
  0011d	5e		 pop	 esi
  0011e	5b		 pop	 ebx
$LN3@ProcessFal:

; 1704 : 			}
; 1705 : 		}
; 1706 : 	}
; 1707 : }

  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c2 04 00	 ret	 4
?ProcessFallUser@CChaosCastle@@QAEXH@Z ENDP		; CChaosCastle::ProcessFallUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?AddFallUser@CChaosCastle@@QAEXHH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
_iUserIndex$ = 12					; size = 4
?AddFallUser@CChaosCastle@@QAEXHH@Z PROC		; CChaosCastle::AddFallUser, COMDAT
; _this$ = ecx

; 1658 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1659 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _iChaosCastleIndex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	78 4b		 js	 SHORT $LN3@AddFallUse
  0000e	33 c0		 xor	 eax, eax
  00010	83 fe 06	 cmp	 esi, 6
  00013	0f 9e c0	 setle	 al
  00016	85 c0		 test	 eax, eax
  00018	74 3f		 je	 SHORT $LN3@AddFallUse

; 1660 : 	{
; 1661 : 		return;
; 1662 : 	}
; 1663 : 
; 1664 : 	for ( int iFALL=0;iFALL<MAX_CHAOSCASTLE_USER;iFALL++)

  0001a	69 c6 68 08 00
	00		 imul	 eax, esi, 2152
  00020	33 d2		 xor	 edx, edx
  00022	05 70 07 00 00	 add	 eax, 1904		; 00000770H
  00027	03 c7		 add	 eax, edi
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@AddFallUse:

; 1665 : 	{
; 1666 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_lFallUser[iFALL] == -1 )

  00030	83 38 ff	 cmp	 DWORD PTR [eax], -1
  00033	74 0f		 je	 SHORT $LN11@AddFallUse

; 1660 : 	{
; 1661 : 		return;
; 1662 : 	}
; 1663 : 
; 1664 : 	for ( int iFALL=0;iFALL<MAX_CHAOSCASTLE_USER;iFALL++)

  00035	42		 inc	 edx
  00036	83 c0 04	 add	 eax, 4
  00039	83 fa 46	 cmp	 edx, 70			; 00000046H
  0003c	7c f2		 jl	 SHORT $LL4@AddFallUse
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 1669 : 			break;
; 1670 : 		}
; 1671 : 	}
; 1672 : }

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN11@AddFallUse:

; 1667 : 		{
; 1668 : 			InterlockedExchange(&this->m_stChaosCastleData[iChaosCastleIndex].m_lFallUser[iFALL], iUserIndex);

  00044	8b 4d 0c	 mov	 ecx, DWORD PTR _iUserIndex$[ebp]
  00047	69 c6 1a 02 00
	00		 imul	 eax, esi, 538
  0004d	05 dc 01 00 00	 add	 eax, 476		; 000001dcH
  00052	03 c2		 add	 eax, edx
  00054	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  00057	87 08		 xchg	 DWORD PTR [eax], ecx
$LN3@AddFallUse:
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi

; 1669 : 			break;
; 1670 : 		}
; 1671 : 	}
; 1672 : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
?AddFallUser@CChaosCastle@@QAEXHH@Z ENDP		; CChaosCastle::AddFallUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?LeaveUserChaosCastle@CChaosCastle@@QAEHHH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
_iUserIndex$ = 12					; size = 4
?LeaveUserChaosCastle@CChaosCastle@@QAEHHH@Z PROC	; CChaosCastle::LeaveUserChaosCastle, COMDAT
; _this$ = ecx

; 1621 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1622 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iChaosCastleIndex$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	0f 88 84 00 00
	00		 js	 $LN16@LeaveUserC
  00011	33 c0		 xor	 eax, eax
  00013	83 fa 06	 cmp	 edx, 6
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	74 78		 je	 SHORT $LN16@LeaveUserC

; 1625 : 	}
; 1626 : 
; 1627 : 	int iRET_VAL = -1;

  0001d	53		 push	 ebx
  0001e	69 da 68 08 00
	00		 imul	 ebx, edx, 2152
  00024	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  00027	8b 55 0c	 mov	 edx, DWORD PTR _iUserIndex$[ebp]

; 1628 : 
; 1629 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  0002a	33 c0		 xor	 eax, eax
  0002c	57		 push	 edi
  0002d	83 cf ff	 or	 edi, -1
  00030	03 cb		 add	 ecx, ebx
$LL4@LeaveUserC:

; 1630 : 	{
; 1631 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex == iUserIndex )

  00032	39 11		 cmp	 DWORD PTR [ecx], edx
  00034	74 12		 je	 SHORT $LN12@LeaveUserC

; 1628 : 
; 1629 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  00036	40		 inc	 eax
  00037	83 c1 14	 add	 ecx, 20			; 00000014H
  0003a	83 f8 46	 cmp	 eax, 70			; 00000046H
  0003d	7c f3		 jl	 SHORT $LL4@LeaveUserC

; 1644 : 			}
; 1645 : 
; 1646 : 			break;
; 1647 : 		}
; 1648 : 	}
; 1649 : 
; 1650 : 	return iRET_VAL;

  0003f	8b c7		 mov	 eax, edi
  00041	5f		 pop	 edi
  00042	5b		 pop	 ebx
  00043	5e		 pop	 esi

; 1651 : }

  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
$LN12@LeaveUserC:

; 1632 : 		{
; 1633 : 			iRET_VAL = iUserIndex;
; 1634 : 			this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex = -1;

  00048	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  0004b	8b fa		 mov	 edi, edx
  0004d	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]
  00050	c7 44 31 68 ff
	ff ff ff	 mov	 DWORD PTR [ecx+esi+104], -1

; 1635 : 			this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iEXP = 0;

  00058	c7 44 31 6c 00
	00 00 00	 mov	 DWORD PTR [ecx+esi+108], 0

; 1636 : 			this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iScore = 0;

  00060	c7 44 31 70 00
	00 00 00	 mov	 DWORD PTR [ecx+esi+112], 0

; 1637 : 			this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iUserState = 0;

  00068	c7 44 31 74 00
	00 00 00	 mov	 DWORD PTR [ecx+esi+116], 0

; 1638 : 			this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_bSendQuitMsg = false;

  00070	8d 48 06	 lea	 ecx, DWORD PTR [eax+6]
  00073	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  00076	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]
  00079	c6 04 31 00	 mov	 BYTE PTR [ecx+esi], 0

; 1639 : 			this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_ENTERED_USER--;

  0007d	83 44 33 50 ff	 add	 DWORD PTR [ebx+esi+80], -1

; 1640 : 	
; 1641 : 			if ( this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_ENTERED_USER < 0)

  00082	79 08		 jns	 SHORT $LN7@LeaveUserC

; 1642 : 			{
; 1643 : 				this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_ENTERED_USER = 0;

  00084	c7 44 33 50 00
	00 00 00	 mov	 DWORD PTR [ebx+esi+80], 0
$LN7@LeaveUserC:

; 1644 : 			}
; 1645 : 
; 1646 : 			break;
; 1647 : 		}
; 1648 : 	}
; 1649 : 
; 1650 : 	return iRET_VAL;

  0008c	8b c7		 mov	 eax, edi
  0008e	5f		 pop	 edi
  0008f	5b		 pop	 ebx
  00090	5e		 pop	 esi

; 1651 : }

  00091	5d		 pop	 ebp
  00092	c2 08 00	 ret	 8
$LN16@LeaveUserC:

; 1623 : 	{
; 1624 : 		return -1;

  00095	83 c8 ff	 or	 eax, -1
  00098	5e		 pop	 esi

; 1651 : }

  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
?LeaveUserChaosCastle@CChaosCastle@@QAEHHH@Z ENDP	; CChaosCastle::LeaveUserChaosCastle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?EnterUserChaosCastle@CChaosCastle@@QAEHHH@Z
_TEXT	SEGMENT
tv306 = 8						; size = 4
_iChaosCastleIndex$ = 8					; size = 4
_iUserIndex$ = 12					; size = 4
?EnterUserChaosCastle@CChaosCastle@@QAEHHH@Z PROC	; CChaosCastle::EnterUserChaosCastle, COMDAT
; _this$ = ecx

; 1575 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1576 : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iChaosCastleIndex$[ebp]
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	85 d2		 test	 edx, edx
  0000b	0f 88 a5 00 00
	00		 js	 $LN19@EnterUserC
  00011	33 c0		 xor	 eax, eax
  00013	83 fa 06	 cmp	 edx, 6
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	0f 84 95 00 00
	00		 je	 $LN19@EnterUserC

; 1579 : 	}
; 1580 : 
; 1581 : 	int iRET_VAL = -1;

  00021	69 ca 68 08 00
	00		 imul	 ecx, edx, 2152

; 1582 : 
; 1583 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  00027	33 c0		 xor	 eax, eax
  00029	56		 push	 esi
  0002a	8b 75 0c	 mov	 esi, DWORD PTR _iUserIndex$[ebp]
  0002d	57		 push	 edi
  0002e	83 cf ff	 or	 edi, -1
  00031	89 4d 08	 mov	 DWORD PTR tv306[ebp], ecx
  00034	83 c1 68	 add	 ecx, 104		; 00000068H
  00037	03 cb		 add	 ecx, ebx
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@EnterUserC:

; 1584 : 	{
; 1585 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex != -1 )

  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	83 fa ff	 cmp	 edx, -1
  00045	74 1f		 je	 SHORT $LN15@EnterUserC

; 1586 : 		{
; 1587 : 			if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex == iUserIndex )

  00047	3b d6		 cmp	 edx, esi
  00049	74 12		 je	 SHORT $LN14@EnterUserC

; 1582 : 
; 1583 : 	for ( int i=0;i<MAX_CHAOSCASTLE_USER;i++)

  0004b	40		 inc	 eax
  0004c	83 c1 14	 add	 ecx, 20			; 00000014H
  0004f	83 f8 46	 cmp	 eax, 70			; 00000046H
  00052	7c ec		 jl	 SHORT $LL4@EnterUserC

; 1607 : 			}
; 1608 : 
; 1609 : 			break;
; 1610 : 		}
; 1611 : 	}
; 1612 : 
; 1613 : 	return iRET_VAL;

  00054	8b c7		 mov	 eax, edi
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx

; 1614 : }

  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
$LN14@EnterUserC:

; 1588 : 			{
; 1589 : 				iRET_VAL = i;

  0005d	8b f8		 mov	 edi, eax
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx

; 1614 : }

  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
$LN15@EnterUserC:

; 1590 : 				break;
; 1591 : 			}
; 1592 : 		}
; 1593 : 
; 1594 : 		if ( this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex == -1 )
; 1595 : 		{
; 1596 : 			iRET_VAL = i;
; 1597 : 			this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iIndex = iUserIndex;

  00066	8b 55 08	 mov	 edx, DWORD PTR tv306[ebp]
  00069	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  0006c	8b f8		 mov	 edi, eax

; 1598 : 			this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iEXP = 0;
; 1599 : 			this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iScore = 0;
; 1600 : 			this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_iUserState = 0;
; 1601 : 			this->m_stChaosCastleData[iChaosCastleIndex].m_UserData[i].m_bSendQuitMsg = false;

  0006e	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00071	8d 40 1e	 lea	 eax, DWORD PTR [eax+30]
  00074	8d 0c 8a	 lea	 ecx, DWORD PTR [edx+ecx*4]
  00077	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  0007a	89 74 19 68	 mov	 DWORD PTR [ecx+ebx+104], esi
  0007e	c7 44 19 6c 00
	00 00 00	 mov	 DWORD PTR [ecx+ebx+108], 0
  00086	c7 44 19 70 00
	00 00 00	 mov	 DWORD PTR [ecx+ebx+112], 0
  0008e	c7 44 19 74 00
	00 00 00	 mov	 DWORD PTR [ecx+ebx+116], 0
  00096	c6 04 18 00	 mov	 BYTE PTR [eax+ebx], 0

; 1602 : 			this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_ENTERED_USER++;

  0009a	ff 44 1a 50	 inc	 DWORD PTR [edx+ebx+80]

; 1603 : 	
; 1604 : 			if ( this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_ENTERED_USER > MAX_CHAOSCASTLE_USER)

  0009e	83 7c 1a 50 46	 cmp	 DWORD PTR [edx+ebx+80], 70 ; 00000046H
  000a3	7e 08		 jle	 SHORT $LN9@EnterUserC

; 1605 : 			{
; 1606 : 				this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_ENTERED_USER = MAX_CHAOSCASTLE_USER;

  000a5	c7 44 1a 50 46
	00 00 00	 mov	 DWORD PTR [edx+ebx+80], 70 ; 00000046H
$LN9@EnterUserC:

; 1607 : 			}
; 1608 : 
; 1609 : 			break;
; 1610 : 		}
; 1611 : 	}
; 1612 : 
; 1613 : 	return iRET_VAL;

  000ad	8b c7		 mov	 eax, edi
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx

; 1614 : }

  000b2	5d		 pop	 ebp
  000b3	c2 08 00	 ret	 8
$LN19@EnterUserC:

; 1577 : 	{
; 1578 : 		return -1;

  000b6	83 c8 ff	 or	 eax, -1
  000b9	5b		 pop	 ebx

; 1614 : }

  000ba	5d		 pop	 ebp
  000bb	c2 08 00	 ret	 8
?EnterUserChaosCastle@CChaosCastle@@QAEHHH@Z ENDP	; CChaosCastle::EnterUserChaosCastle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?SetState@CChaosCastle@@QAEXHH@Z
_TEXT	SEGMENT
_iChaosCastleIndex$ = 8					; size = 4
_iCC_STATE$ = 12					; size = 4
?SetState@CChaosCastle@@QAEXHH@Z PROC			; CChaosCastle::SetState, COMDAT
; _this$ = ecx

; 938  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 939  : 	if ( CC_FLOOR_RANGE(iChaosCastleIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iChaosCastleIndex$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	78 4c		 js	 SHORT $LN6@SetState
  0000d	33 c0		 xor	 eax, eax
  0000f	83 fa 06	 cmp	 edx, 6
  00012	0f 9e c0	 setle	 al
  00015	85 c0		 test	 eax, eax
  00017	74 40		 je	 SHORT $LN6@SetState

; 940  : 	{
; 941  : 		return;
; 942  : 	}
; 943  : 
; 944  : 	if ( iCC_STATE < CC_STATE_NONE || iCC_STATE > CC_STATE_PLAYEND )

  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _iCC_STATE$[ebp]
  0001c	83 f9 03	 cmp	 ecx, 3
  0001f	77 38		 ja	 SHORT $LN6@SetState

; 945  : 	{
; 946  : 		return;
; 947  : 	}
; 948  : 
; 949  : 	this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_STATE = iCC_STATE;

  00021	69 c2 68 08 00
	00		 imul	 eax, edx, 2152
  00027	89 4c 30 2c	 mov	 DWORD PTR [eax+esi+44], ecx

; 950  : 
; 951  : 	switch ( this->m_stChaosCastleData[iChaosCastleIndex].m_iCC_STATE )

  0002b	83 f9 03	 cmp	 ecx, 3
  0002e	77 29		 ja	 SHORT $LN6@SetState
  00030	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN15@SetState[ecx*4]
$LN8@SetState:

; 952  : 	{
; 953  : 		case CC_STATE_NONE:
; 954  : 			this->SetState_None(iChaosCastleIndex);
; 955  : 			break;
; 956  : 
; 957  : 		case CC_STATE_CLOSED:
; 958  : 			this->SetState_Closed(iChaosCastleIndex);

  00037	52		 push	 edx
  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ?SetState_Closed@CChaosCastle@@IAEXH@Z ; CChaosCastle::SetState_Closed
  0003f	5e		 pop	 esi

; 967  : 	}
; 968  : 	
; 969  : }

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN9@SetState:

; 959  : 			break;
; 960  : 
; 961  : 		case CC_STATE_PLAYING:
; 962  : 			this->SetState_Playing(iChaosCastleIndex);

  00044	52		 push	 edx
  00045	8b ce		 mov	 ecx, esi
  00047	e8 00 00 00 00	 call	 ?SetState_Playing@CChaosCastle@@IAEXH@Z ; CChaosCastle::SetState_Playing
  0004c	5e		 pop	 esi

; 967  : 	}
; 968  : 	
; 969  : }

  0004d	5d		 pop	 ebp
  0004e	c2 08 00	 ret	 8
$LN10@SetState:

; 963  : 			break;
; 964  : 
; 965  : 		case CC_STATE_PLAYEND:
; 966  : 			this->SetState_PlayEnd(iChaosCastleIndex);

  00051	52		 push	 edx
  00052	8b ce		 mov	 ecx, esi
  00054	e8 00 00 00 00	 call	 ?SetState_PlayEnd@CChaosCastle@@IAEXH@Z ; CChaosCastle::SetState_PlayEnd
$LN6@SetState:
  00059	5e		 pop	 esi

; 967  : 	}
; 968  : 	
; 969  : }

  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
  0005e	66 90		 npad	 2
$LN15@SetState:
  00060	00 00 00 00	 DD	 $LN6@SetState
  00064	00 00 00 00	 DD	 $LN8@SetState
  00068	00 00 00 00	 DD	 $LN9@SetState
  0006c	00 00 00 00	 DD	 $LN10@SetState
?SetState@CChaosCastle@@QAEXHH@Z ENDP			; CChaosCastle::SetState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?Load@CChaosCastle@@QAEXPAD@Z
_TEXT	SEGMENT
_Schedule$1 = -16					; size = 8
_this$1$ = -8						; size = 4
_type$1$ = -4						; size = 4
$T2 = -4						; size = 4
_filename$ = 8						; size = 4
?Load@CChaosCastle@@QAEXPAD@Z PROC			; CChaosCastle::Load, COMDAT
; _this$ = ecx

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 153  : 	SMDFile = fopen(filename, "r");

  00007	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00012	56		 push	 esi
  00013	89 7d f8	 mov	 DWORD PTR _this$1$[ebp], edi
  00016	e8 00 00 00 00	 call	 _fopen
  0001b	83 c4 08	 add	 esp, 8
  0001e	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 154  : 
; 155  : 	if ( SMDFile == NULL )

  00023	85 c0		 test	 eax, eax
  00025	75 16		 jne	 SHORT $LN6@Load

; 156  : 	{
; 157  : 		MsgBox("[Chaos Castle] Info file Load Fail [%s]", filename);

  00027	56		 push	 esi
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HJPKEJEN@?$FLChaos?5Castle?$FN?5Info?5file?5Load?5Fa@
  0002d	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00032	83 c4 08	 add	 esp, 8
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi

; 271  : }

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
$LN6@Load:
  0003d	53		 push	 ebx

; 158  : 		return;
; 159  : 	}
; 160  : 
; 161  : 	int Token;
; 162  : 	int type = -1;
; 163  : 	int iChaosCastleCount = -1;
; 164  : 
; 165  : 	this->m_vtChaosCastleOpenTime.erase( this->m_vtChaosCastleOpenTime.begin(), this->m_vtChaosCastleOpenTime.end());

  0003e	ff 77 24	 push	 DWORD PTR [edi+36]
  00041	8d 5f 20	 lea	 ebx, DWORD PTR [edi+32]
  00044	ff 33		 push	 DWORD PTR [ebx]
  00046	8d 45 fc	 lea	 eax, DWORD PTR $T2[ebp]
  00049	8b cb		 mov	 ecx, ebx
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?erase@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UCHAOSCASTLE_START_TIME@@@std@@@std@@@2@0@Z ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::erase

; 166  : 
; 167  : 	while ( true )
; 168  : 	{
; 169  : 		Token = GetToken();

  00051	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 170  : 
; 171  : 		if ( Token == 2 )

  00056	83 f8 02	 cmp	 eax, 2
  00059	0f 84 d9 02 00
	00		 je	 $LN304@Load
  0005f	90		 npad	 1
$LL2@Load:

; 172  : 		{
; 173  : 			break;
; 174  : 		}
; 175  : 
; 176  : 		type = (int)TokenNumber;

  00060	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00068	89 45 fc	 mov	 DWORD PTR _type$1$[ebp], eax
  0006b	0f 1f 44 00 00	 npad	 5
$LL4@Load:

; 177  : 
; 178  : 		while ( true )
; 179  : 		{
; 180  : 			if ( type == 0 )	// Time Setting

  00070	85 c0		 test	 eax, eax
  00072	75 6c		 jne	 SHORT $LN8@Load

; 181  : 			{
; 182  : 				Token = GetToken();

  00074	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 183  : 
; 184  : 				if ( strcmp("end", TokenString) == 0 )

  00079	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0007e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL310@Load:
  00083	8a 10		 mov	 dl, BYTE PTR [eax]
  00085	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00087	75 1a		 jne	 SHORT $LN311@Load
  00089	84 d2		 test	 dl, dl
  0008b	74 12		 je	 SHORT $LN312@Load
  0008d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00090	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00093	75 0e		 jne	 SHORT $LN311@Load
  00095	83 c0 02	 add	 eax, 2
  00098	83 c1 02	 add	 ecx, 2
  0009b	84 d2		 test	 dl, dl
  0009d	75 e4		 jne	 SHORT $LL310@Load
$LN312@Load:
  0009f	33 c0		 xor	 eax, eax
  000a1	eb 05		 jmp	 SHORT $LN313@Load
$LN311@Load:
  000a3	1b c0		 sbb	 eax, eax
  000a5	83 c8 01	 or	 eax, 1
$LN313@Load:
  000a8	85 c0		 test	 eax, eax
  000aa	0f 84 77 02 00
	00		 je	 $LN299@Load

; 185  : 				{
; 186  : 					break;
; 187  : 				}
; 188  : 
; 189  : 				this->m_iCC_TIME_MIN_OPEN = (int)TokenNumber;

  000b0	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000b8	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 190  : 
; 191  : 				Token = GetToken();

  000bb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 192  : 				this->m_iCC_TIME_MIN_PLAY = (int)TokenNumber;

  000c0	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000c8	89 47 0c	 mov	 DWORD PTR [edi+12], eax

; 193  : 
; 194  : 				Token = GetToken();

  000cb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 195  : 				this->m_iCC_TIME_MIN_REST = (int)TokenNumber;

  000d0	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000d8	89 47 10	 mov	 DWORD PTR [edi+16], eax
  000db	8b 45 fc	 mov	 eax, DWORD PTR _type$1$[ebp]
  000de	eb 90		 jmp	 SHORT $LL4@Load
$LN8@Load:

; 196  : 			}
; 197  : 			else if ( type == 1 ) // Drops

  000e0	83 f8 01	 cmp	 eax, 1
  000e3	75 6f		 jne	 SHORT $LN11@Load

; 198  : 			{
; 199  : 				Token = GetToken();

  000e5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 200  : 
; 201  : 				if ( strcmp("end", TokenString) == 0 )

  000ea	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  000ef	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL314@Load:
  000f4	8a 10		 mov	 dl, BYTE PTR [eax]
  000f6	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000f8	75 1a		 jne	 SHORT $LN315@Load
  000fa	84 d2		 test	 dl, dl
  000fc	74 12		 je	 SHORT $LN316@Load
  000fe	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00101	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00104	75 0e		 jne	 SHORT $LN315@Load
  00106	83 c0 02	 add	 eax, 2
  00109	83 c1 02	 add	 ecx, 2
  0010c	84 d2		 test	 dl, dl
  0010e	75 e4		 jne	 SHORT $LL314@Load
$LN316@Load:
  00110	33 c0		 xor	 eax, eax
  00112	eb 05		 jmp	 SHORT $LN317@Load
$LN315@Load:
  00114	1b c0		 sbb	 eax, eax
  00116	83 c8 01	 or	 eax, 1
$LN317@Load:
  00119	85 c0		 test	 eax, eax
  0011b	0f 84 06 02 00
	00		 je	 $LN299@Load

; 202  : 				{
; 203  : 					break;
; 204  : 				}
; 205  : 
; 206  : 				this->m_iCC_NORMAL_ITEM_DROP = (int)TokenNumber;

  00121	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00129	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 207  : 
; 208  : 				Token = GetToken();

  0012c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 209  : 				this->m_iCC_EXCEL_ITEM_DROP = (int)TokenNumber;

  00131	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00139	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 210  : 
; 211  : 				Token = GetToken();

  0013c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 212  : 				this->m_iCC_MONSTER_REGEN = (int)TokenNumber;

  00141	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00149	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  0014c	8b 45 fc	 mov	 eax, DWORD PTR _type$1$[ebp]
  0014f	e9 1c ff ff ff	 jmp	 $LL4@Load
$LN11@Load:

; 213  : 			}
; 214  : 			else if ( type == 2 ) // Schedule

  00154	83 f8 02	 cmp	 eax, 2
  00157	0f 85 d0 00 00
	00		 jne	 $LN14@Load

; 215  : 			{
; 216  : 				Token = GetToken();

  0015d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 217  : 
; 218  : 				if ( strcmp("end", TokenString) == 0 )

  00162	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00167	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0016c	0f 1f 40 00	 npad	 4
$LL318@Load:
  00170	8a 10		 mov	 dl, BYTE PTR [eax]
  00172	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00174	75 1a		 jne	 SHORT $LN319@Load
  00176	84 d2		 test	 dl, dl
  00178	74 12		 je	 SHORT $LN320@Load
  0017a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0017d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00180	75 0e		 jne	 SHORT $LN319@Load
  00182	83 c0 02	 add	 eax, 2
  00185	83 c1 02	 add	 ecx, 2
  00188	84 d2		 test	 dl, dl
  0018a	75 e4		 jne	 SHORT $LL318@Load
$LN320@Load:
  0018c	33 c0		 xor	 eax, eax
  0018e	eb 05		 jmp	 SHORT $LN321@Load
$LN319@Load:
  00190	1b c0		 sbb	 eax, eax
  00192	83 c8 01	 or	 eax, 1
$LN321@Load:
  00195	85 c0		 test	 eax, eax
  00197	0f 84 8a 01 00
	00		 je	 $LN299@Load

; 219  : 				{
; 220  : 					break;
; 221  : 				}
; 222  : 				
; 223  : 				CHAOSCASTLE_START_TIME Schedule;
; 224  : 
; 225  : 				Schedule.m_iHour = (int)TokenNumber;

  0019d	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA
  001a5	89 75 f0	 mov	 DWORD PTR _Schedule$1[ebp], esi

; 226  : 
; 227  : 				Token = GetToken();

  001a8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 228  : 				Schedule.m_iMinute = (int)TokenNumber;

  001ad	f3 0f 2c 3d 00
	00 00 00	 cvttss2si edi, DWORD PTR ?TokenNumber@@3MA
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  001b5	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  001b8	8d 4d f0	 lea	 ecx, DWORD PTR _Schedule$1[ebp]
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 228  : 				Schedule.m_iMinute = (int)TokenNumber;

  001bb	89 7d f4	 mov	 DWORD PTR _Schedule$1[ebp+4], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  001be	3b c8		 cmp	 ecx, eax
  001c0	73 42		 jae	 SHORT $LN76@Load
  001c2	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001c4	8d 55 f0	 lea	 edx, DWORD PTR _Schedule$1[ebp]
  001c7	3b ca		 cmp	 ecx, edx
  001c9	77 39		 ja	 SHORT $LN76@Load

; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  001cb	8b f2		 mov	 esi, edx
  001cd	2b f1		 sub	 esi, ecx
  001cf	c1 fe 03	 sar	 esi, 3

; 1278 : 			if (this->_Mylast() == this->_Myend())

  001d2	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  001d5	75 09		 jne	 SHORT $LN78@Load

; 1279 : 				_Reserve(1);

  001d7	6a 01		 push	 1
  001d9	8b cb		 mov	 ecx, ebx
  001db	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Reserve
$LN78@Load:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  001e0	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  001e3	85 d2		 test	 edx, edx
  001e5	74 0e		 je	 SHORT $LN198@Load
  001e7	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001e9	8b 04 f1	 mov	 eax, DWORD PTR [ecx+esi*8]
  001ec	89 02		 mov	 DWORD PTR [edx], eax
  001ee	8b 44 f1 04	 mov	 eax, DWORD PTR [ecx+esi*8+4]
  001f2	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN198@Load:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1283 : 			++this->_Mylast();

  001f5	83 43 04 08	 add	 DWORD PTR [ebx+4], 8

; 1284 : 			}
; 1285 : 		else

  001f9	8b 7d f8	 mov	 edi, DWORD PTR _this$1$[ebp]
  001fc	8b 45 fc	 mov	 eax, DWORD PTR _type$1$[ebp]
  001ff	e9 6c fe ff ff	 jmp	 $LL4@Load
$LN76@Load:

; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  00204	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
  00207	75 09		 jne	 SHORT $LN79@Load

; 1288 : 				_Reserve(1);

  00209	6a 01		 push	 1
  0020b	8b cb		 mov	 ecx, ebx
  0020d	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@IAEXI@Z ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::_Reserve
$LN79@Load:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00212	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00215	85 c0		 test	 eax, eax
  00217	74 05		 je	 SHORT $LN279@Load
  00219	89 30		 mov	 DWORD PTR [eax], esi
  0021b	89 78 04	 mov	 DWORD PTR [eax+4], edi
$LN279@Load:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  0021e	83 43 04 08	 add	 DWORD PTR [ebx+4], 8

; 1293 : 			}
; 1294 : 		}

  00222	8b 7d f8	 mov	 edi, DWORD PTR _this$1$[ebp]
  00225	8b 45 fc	 mov	 eax, DWORD PTR _type$1$[ebp]
  00228	e9 43 fe ff ff	 jmp	 $LL4@Load
$LN14@Load:
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 232  : 			else if ( type == 3 ) // ItemDropProb

  0022d	83 f8 03	 cmp	 eax, 3
  00230	75 6b		 jne	 SHORT $LN17@Load

; 233  : 			{
; 234  : 				Token = GetToken();

  00232	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 235  : 
; 236  : 				if ( strcmp("end", TokenString) == 0 )

  00237	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0023c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL322@Load:
  00241	8a 10		 mov	 dl, BYTE PTR [eax]
  00243	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00245	75 1a		 jne	 SHORT $LN323@Load
  00247	84 d2		 test	 dl, dl
  00249	74 12		 je	 SHORT $LN324@Load
  0024b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0024e	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00251	75 0e		 jne	 SHORT $LN323@Load
  00253	83 c0 02	 add	 eax, 2
  00256	83 c1 02	 add	 ecx, 2
  00259	84 d2		 test	 dl, dl
  0025b	75 e4		 jne	 SHORT $LL322@Load
$LN324@Load:
  0025d	33 c0		 xor	 eax, eax
  0025f	eb 05		 jmp	 SHORT $LN325@Load
$LN323@Load:
  00261	1b c0		 sbb	 eax, eax
  00263	83 c8 01	 or	 eax, 1
$LN325@Load:
  00266	85 c0		 test	 eax, eax
  00268	0f 84 b9 00 00
	00		 je	 $LN299@Load

; 237  : 				{
; 238  : 					break;
; 239  : 				}
; 240  : 		
; 241  : 				g_iChaosCastle_OffLineGiftRate = (int)TokenNumber;

  0026e	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA

; 242  : 				g_iChaosCastle_OffLineGiftRate %= 10000;

  00276	b8 53 74 24 97	 mov	 eax, -1759218605	; 97247453H
  0027b	f7 e9		 imul	 ecx
  0027d	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  00280	8b c2		 mov	 eax, edx
  00282	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00285	03 c2		 add	 eax, edx
  00287	69 c0 10 27 00
	00		 imul	 eax, eax, 10000
  0028d	03 c8		 add	 ecx, eax
  0028f	8b 45 fc	 mov	 eax, DWORD PTR _type$1$[ebp]
  00292	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_iChaosCastle_OffLineGiftRate@@3HA, ecx ; g_iChaosCastle_OffLineGiftRate
  00298	e9 d3 fd ff ff	 jmp	 $LL4@Load
$LN17@Load:

; 243  : 			}
; 244  : 			else if ( type == 4 )

  0029d	83 f8 04	 cmp	 eax, 4
  002a0	0f 85 ca fd ff
	ff		 jne	 $LL4@Load

; 245  : 			{
; 246  : 				Token = GetToken();

  002a6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 247  : 
; 248  : 				if ( strcmp("end", TokenString) == 0 )

  002ab	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  002b0	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL326@Load:
  002b5	8a 10		 mov	 dl, BYTE PTR [eax]
  002b7	3a 11		 cmp	 dl, BYTE PTR [ecx]
  002b9	75 1a		 jne	 SHORT $LN327@Load
  002bb	84 d2		 test	 dl, dl
  002bd	74 12		 je	 SHORT $LN328@Load
  002bf	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  002c2	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  002c5	75 0e		 jne	 SHORT $LN327@Load
  002c7	83 c0 02	 add	 eax, 2
  002ca	83 c1 02	 add	 ecx, 2
  002cd	84 d2		 test	 dl, dl
  002cf	75 e4		 jne	 SHORT $LL326@Load
$LN328@Load:
  002d1	33 c0		 xor	 eax, eax
  002d3	eb 05		 jmp	 SHORT $LN329@Load
$LN327@Load:
  002d5	1b c0		 sbb	 eax, eax
  002d7	83 c8 01	 or	 eax, 1
$LN329@Load:
  002da	85 c0		 test	 eax, eax
  002dc	74 49		 je	 SHORT $LN299@Load

; 249  : 				{
; 250  : 					break;
; 251  : 				}
; 252  : 
; 253  : 				int iFloor = (int)TokenNumber;

  002de	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA

; 254  : 
; 255  : 				if( CC_FLOOR_RANGE(iFloor) )

  002e6	85 f6		 test	 esi, esi
  002e8	78 30		 js	 SHORT $LN22@Load
  002ea	33 c0		 xor	 eax, eax
  002ec	83 fe 06	 cmp	 esi, 6
  002ef	0f 9e c0	 setle	 al
  002f2	85 c0		 test	 eax, eax
  002f4	74 24		 je	 SHORT $LN22@Load

; 256  : 				{
; 257  : 					Token = GetToken();

  002f6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 258  : 					m_stChaosCastleData[iFloor].m_iCC_REWARD_MULTIPLY = TokenNumber;

  002fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?TokenNumber@@3MA
  00303	69 c6 68 08 00
	00		 imul	 eax, esi, 2152
  00309	f3 0f 11 84 38
	90 08 00 00	 movss	 DWORD PTR [eax+edi+2192], xmm0

; 259  : 				}
; 260  : 				else

  00312	8b 45 fc	 mov	 eax, DWORD PTR _type$1$[ebp]
  00315	e9 56 fd ff ff	 jmp	 $LL4@Load
$LN22@Load:

; 261  : 				{
; 262  : 					Token = GetToken();

  0031a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 263  : 				}
; 264  : 			}
; 265  : 		}

  0031f	8b 45 fc	 mov	 eax, DWORD PTR _type$1$[ebp]
  00322	e9 49 fd ff ff	 jmp	 $LL4@Load
$LN299@Load:

; 166  : 
; 167  : 	while ( true )
; 168  : 	{
; 169  : 		Token = GetToken();

  00327	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 170  : 
; 171  : 		if ( Token == 2 )

  0032c	83 f8 02	 cmp	 eax, 2
  0032f	0f 85 2b fd ff
	ff		 jne	 $LL2@Load
  00335	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
$LN304@Load:

; 266  : 	}
; 267  : 
; 268  : 	fclose(SMDFile);

  00338	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0033e	e8 00 00 00 00	 call	 _fclose

; 269  : 
; 270  : 	LogAdd("%s file load!", filename);

  00343	56		 push	 esi
  00344	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  00349	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0034f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00352	5b		 pop	 ebx
  00353	5f		 pop	 edi
  00354	5e		 pop	 esi

; 271  : }

  00355	8b e5		 mov	 esp, ebp
  00357	5d		 pop	 ebp
  00358	c2 04 00	 ret	 4
?Load@CChaosCastle@@QAEXPAD@Z ENDP			; CChaosCastle::Load
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?Init@CChaosCastle@@QAEX_N@Z
_TEXT	SEGMENT
tv858 = -12						; size = 4
tv860 = -8						; size = 4
tv851 = -4						; size = 4
tv856 = 8						; size = 4
_bEVENT_ENABLE$ = 8					; size = 1
?Init@CChaosCastle@@QAEX_N@Z PROC			; CChaosCastle::Init, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	this->m_bCC_EVENT_ENABLE = bEVENT_ENABLE;

  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _bEVENT_ENABLE$[ebp]
  00007	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	8b f9		 mov	 edi, ecx

; 96   : 
; 97   : 	for ( int i=0;i<MAX_CHAOSCASTLE_LEVEL;i++)

  0000f	33 f6		 xor	 esi, esi
  00011	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LL4@Init:

; 98   : 	{
; 99   : 		this->SetState(i, CC_STATE_CLOSED);

  00014	6a 01		 push	 1
  00016	56		 push	 esi
  00017	8b cf		 mov	 ecx, edi
  00019	e8 00 00 00 00	 call	 ?SetState@CChaosCastle@@QAEXHH@Z ; CChaosCastle::SetState
  0001e	46		 inc	 esi
  0001f	83 fe 07	 cmp	 esi, 7
  00022	7c f0		 jl	 SHORT $LL4@Init

; 100  : 	}
; 101  : 
; 102  : 	for ( int iTRAP_STEP = 0; iTRAP_STEP<MAX_CC_TRAP_STEP;iTRAP_STEP++)

  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_iChaosCastle_GroundAxis@@3PAHA
  00029	8b 35 08 00 00
	00		 mov	 esi, DWORD PTR ?g_iChaosCastle_GroundAxis@@3PAHA+8
  0002f	8b 3d 0c 00 00
	00		 mov	 edi, DWORD PTR ?g_iChaosCastle_GroundAxis@@3PAHA+12
  00035	8d 04 30	 lea	 eax, DWORD PTR [eax+esi]
  00038	99		 cdq
  00039	2b c2		 sub	 eax, edx
  0003b	8b c8		 mov	 ecx, eax
  0003d	a1 04 00 00 00	 mov	 eax, DWORD PTR ?g_iChaosCastle_GroundAxis@@3PAHA+4
  00042	03 c7		 add	 eax, edi
  00044	d1 f9		 sar	 ecx, 1
  00046	99		 cdq
  00047	2b c2		 sub	 eax, edx
  00049	89 4d f8	 mov	 DWORD PTR tv860[ebp], ecx
  0004c	d1 f8		 sar	 eax, 1
  0004e	ba 00 00 00 00	 mov	 edx, OFFSET ?g_iChaosCastle_DamageAxis@@3PAY03HA
  00053	89 45 f4	 mov	 DWORD PTR tv858[ebp], eax
  00056	89 55 08	 mov	 DWORD PTR tv856[ebp], edx
  00059	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@Init:

; 103  : 	{
; 104  : 		g_rtPOINT_FRAME[0].left = (::g_iChaosCastle_GroundAxis[2] + ::g_iChaosCastle_GroundAxis[0]) / 2 + 1;

  00060	8d 59 01	 lea	 ebx, DWORD PTR [ecx+1]

; 105  : 		g_rtPOINT_FRAME[0].top = g_iChaosCastle_GroundAxis[1];
; 106  : 		g_rtPOINT_FRAME[0].right = ::g_iChaosCastle_GroundAxis[2];

  00063	89 35 08 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+8, esi
  00069	89 1d 00 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_FRAME@@3PAUtagRECT@@A, ebx
  0006f	8b 1d 04 00 00
	00		 mov	 ebx, DWORD PTR ?g_iChaosCastle_GroundAxis@@3PAHA+4
  00075	89 1d 04 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+4, ebx

; 107  : 		g_rtPOINT_FRAME[0].bottom = (::g_iChaosCastle_GroundAxis[3] + ::g_iChaosCastle_GroundAxis[1] ) / 2 ;
; 108  : 
; 109  : 		g_rtPOINT_FRAME[1].left = (::g_iChaosCastle_GroundAxis[2] + ::g_iChaosCastle_GroundAxis[0]) / 2 + 1;

  0007b	8d 59 01	 lea	 ebx, DWORD PTR [ecx+1]
  0007e	89 1d 10 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+16, ebx

; 110  : 		g_rtPOINT_FRAME[1].top = (::g_iChaosCastle_GroundAxis[3] + ::g_iChaosCastle_GroundAxis[1] ) / 2 + 1;

  00084	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
  00087	89 1d 14 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+20, ebx

; 111  : 		g_rtPOINT_FRAME[1].right = g_iChaosCastle_GroundAxis[2];
; 112  : 		g_rtPOINT_FRAME[1].bottom = ::g_iChaosCastle_GroundAxis[3];
; 113  : 		
; 114  : 		g_rtPOINT_FRAME[2].left = ::g_iChaosCastle_GroundAxis[0];

  0008d	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?g_iChaosCastle_GroundAxis@@3PAHA
  00093	a3 0c 00 00 00	 mov	 DWORD PTR ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+12, eax
  00098	89 35 18 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+24, esi

; 115  : 		g_rtPOINT_FRAME[2].top = (::g_iChaosCastle_GroundAxis[3] + ::g_iChaosCastle_GroundAxis[1] ) / 2 + 1;

  0009e	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 116  : 		g_rtPOINT_FRAME[2].right = (::g_iChaosCastle_GroundAxis[2] + ::g_iChaosCastle_GroundAxis[0] ) / 2 ;
; 117  : 		g_rtPOINT_FRAME[2].bottom = ::g_iChaosCastle_GroundAxis[3];
; 118  : 
; 119  : 		g_rtPOINT_FRAME[3].left = ::g_iChaosCastle_GroundAxis[0];
; 120  : 		g_rtPOINT_FRAME[3].top = ::g_iChaosCastle_GroundAxis[1];
; 121  : 		g_rtPOINT_FRAME[3].right = (::g_iChaosCastle_GroundAxis[2] + ::g_iChaosCastle_GroundAxis[0] ) / 2;
; 122  : 		g_rtPOINT_FRAME[3].bottom = (::g_iChaosCastle_GroundAxis[3] + ::g_iChaosCastle_GroundAxis[1] ) / 2;

  000a1	a3 3c 00 00 00	 mov	 DWORD PTR ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+60, eax

; 123  : 
; 124  : 
; 125  : 
; 126  : 
; 127  : 		g_rtPOINT_TRAP[0].left = (::g_iChaosCastle_DamageAxis[iTRAP_STEP][2] + ::g_iChaosCastle_DamageAxis[iTRAP_STEP][0]) / 2 + 1;

  000a6	8b 02		 mov	 eax, DWORD PTR [edx]
  000a8	89 3d 1c 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+28, edi
  000ae	89 1d 20 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+32, ebx
  000b4	89 3d 2c 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+44, edi
  000ba	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  000bd	03 c7		 add	 eax, edi
  000bf	89 1d 30 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+48, ebx
  000c5	8b 1d 04 00 00
	00		 mov	 ebx, DWORD PTR ?g_iChaosCastle_GroundAxis@@3PAHA+4
  000cb	89 35 24 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+36, esi
  000d1	89 0d 28 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+40, ecx
  000d7	89 1d 34 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+52, ebx
  000dd	89 0d 38 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_FRAME@@3PAUtagRECT@@A+56, ecx
  000e3	8b c0		 mov	 eax, eax
  000e5	85 c0		 test	 eax, eax
  000e7	79 03		 jns	 SHORT $LN18@Init
  000e9	83 c0 01	 add	 eax, 1
$LN18@Init:
  000ec	d1 f8		 sar	 eax, 1

; 128  : 		g_rtPOINT_TRAP[0].top = ::g_iChaosCastle_DamageAxis[iTRAP_STEP][1];
; 129  : 		g_rtPOINT_TRAP[0].right = ::g_iChaosCastle_DamageAxis[iTRAP_STEP][2];
; 130  : 		g_rtPOINT_TRAP[0].bottom = (::g_iChaosCastle_DamageAxis[iTRAP_STEP][3] + ::g_iChaosCastle_DamageAxis[iTRAP_STEP][1]) / 2;

  000ee	8b 72 0c	 mov	 esi, DWORD PTR [edx+12]
  000f1	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  000f4	8b 5a 04	 mov	 ebx, DWORD PTR [edx+4]
  000f7	89 45 fc	 mov	 DWORD PTR tv851[ebp], eax
  000fa	89 3d 08 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+8, edi

; 131  : 
; 132  : 		g_rtPOINT_TRAP[1].left = (::g_iChaosCastle_DamageAxis[iTRAP_STEP][2] + ::g_iChaosCastle_DamageAxis[iTRAP_STEP][0]) / 2 + 1;
; 133  : 		g_rtPOINT_TRAP[1].top = (::g_iChaosCastle_DamageAxis[iTRAP_STEP][3] + ::g_iChaosCastle_DamageAxis[iTRAP_STEP][1] ) / 2 + 1;
; 134  : 		g_rtPOINT_TRAP[1].right = g_iChaosCastle_DamageAxis[iTRAP_STEP][2];

  00100	89 3d 18 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+24, edi

; 135  : 		g_rtPOINT_TRAP[1].bottom = ::g_iChaosCastle_DamageAxis[iTRAP_STEP][3];
; 136  : 
; 137  : 		g_rtPOINT_TRAP[2].left = ::g_iChaosCastle_DamageAxis[iTRAP_STEP][0];

  00106	8b 7d 08	 mov	 edi, DWORD PTR tv856[ebp]
  00109	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
  0010c	99		 cdq
  0010d	2b c2		 sub	 eax, edx
  0010f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_TRAP@@3PAUtagRECT@@A, ecx
  00115	d1 f8		 sar	 eax, 1
  00117	8b 17		 mov	 edx, DWORD PTR [edi]
  00119	89 0d 10 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+16, ecx
  0011f	89 15 20 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+32, edx
  00125	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]

; 138  : 		g_rtPOINT_TRAP[2].top = (::g_iChaosCastle_DamageAxis[iTRAP_STEP][3] + ::g_iChaosCastle_DamageAxis[iTRAP_STEP][1] ) / 2 + 1;
; 139  : 		g_rtPOINT_TRAP[2].right = (::g_iChaosCastle_DamageAxis[iTRAP_STEP][2] + ::g_iChaosCastle_DamageAxis[iTRAP_STEP][0] ) / 2;
; 140  : 		g_rtPOINT_TRAP[2].bottom = ::g_iChaosCastle_DamageAxis[iTRAP_STEP][3];
; 141  : 
; 142  : 		g_rtPOINT_TRAP[3].left = ::g_iChaosCastle_DamageAxis[iTRAP_STEP][0];

  00128	89 15 30 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+48, edx
  0012e	8b d7		 mov	 edx, edi
  00130	89 0d 14 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+20, ecx
  00136	8b 3d 0c 00 00
	00		 mov	 edi, DWORD PTR ?g_iChaosCastle_GroundAxis@@3PAHA+12
  0013c	83 c2 10	 add	 edx, 16			; 00000010H
  0013f	89 0d 24 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+36, ecx
  00145	8b 4d fc	 mov	 ecx, DWORD PTR tv851[ebp]
  00148	a3 0c 00 00 00	 mov	 DWORD PTR ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+12, eax
  0014d	89 35 1c 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+28, esi
  00153	89 0d 28 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+40, ecx
  00159	89 35 2c 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+44, esi
  0015f	8b 35 08 00 00
	00		 mov	 esi, DWORD PTR ?g_iChaosCastle_GroundAxis@@3PAHA+8

; 143  : 		g_rtPOINT_TRAP[3].top = ::g_iChaosCastle_DamageAxis[iTRAP_STEP][1];
; 144  : 		g_rtPOINT_TRAP[3].right = (::g_iChaosCastle_DamageAxis[iTRAP_STEP][2] + ::g_iChaosCastle_DamageAxis[iTRAP_STEP][0] ) / 2;

  00165	89 0d 38 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+56, ecx
  0016b	8b 4d f8	 mov	 ecx, DWORD PTR tv860[ebp]

; 145  : 		g_rtPOINT_TRAP[3].bottom = (::g_iChaosCastle_DamageAxis[iTRAP_STEP][3] + ::g_iChaosCastle_DamageAxis[iTRAP_STEP][1] ) / 2;

  0016e	a3 3c 00 00 00	 mov	 DWORD PTR ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+60, eax
  00173	8b 45 f4	 mov	 eax, DWORD PTR tv858[ebp]
  00176	89 1d 04 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+4, ebx
  0017c	89 1d 34 00 00
	00		 mov	 DWORD PTR ?g_rtPOINT_TRAP@@3PAUtagRECT@@A+52, ebx
  00182	89 55 08	 mov	 DWORD PTR tv856[ebp], edx
  00185	81 fa 40 00 00
	00		 cmp	 edx, OFFSET ?g_iChaosCastle_DamageAxis@@3PAY03HA+64
  0018b	0f 8c cf fe ff
	ff		 jl	 $LL7@Init
  00191	5f		 pop	 edi
  00192	5e		 pop	 esi
  00193	5b		 pop	 ebx

; 146  : 	}
; 147  : }

  00194	8b e5		 mov	 esp, ebp
  00196	5d		 pop	 ebp
  00197	c2 04 00	 ret	 4
?Init@CChaosCastle@@QAEX_N@Z ENDP			; CChaosCastle::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?Run@CChaosCastle@@QAEXXZ
_TEXT	SEGMENT
?Run@CChaosCastle@@QAEXXZ PROC				; CChaosCastle::Run, COMDAT
; _this$ = ecx

; 65   : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 66   : 	if ( this->m_bCC_EVENT_ENABLE != FALSE )

  00003	83 7b 04 00	 cmp	 DWORD PTR [ebx+4], 0
  00007	74 3f		 je	 SHORT $LN3@Run

; 67   : 	{
; 68   : 		for ( int i=0;i<MAX_CHAOSCASTLE_LEVEL;i++)

  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	33 f6		 xor	 esi, esi
  0000d	8d 7b 2c	 lea	 edi, DWORD PTR [ebx+44]
$LL4@Run:

; 69   : 		{
; 70   : 			switch ( this->m_stChaosCastleData[i].m_iCC_STATE )

  00010	8b 07		 mov	 eax, DWORD PTR [edi]
  00012	83 f8 03	 cmp	 eax, 3
  00015	77 23		 ja	 SHORT $LN2@Run
  00017	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN18@Run[eax*4]
$LN9@Run:

; 71   : 			{
; 72   : 				case CC_STATE_NONE:
; 73   : 					this->ProcState_None(i);
; 74   : 					break;
; 75   : 
; 76   : 				case CC_STATE_CLOSED:
; 77   : 					this->ProcState_Closed(i);

  0001e	56		 push	 esi
  0001f	8b cb		 mov	 ecx, ebx
  00021	e8 00 00 00 00	 call	 ?ProcState_Closed@CChaosCastle@@IAEXH@Z ; CChaosCastle::ProcState_Closed

; 78   : 					break;

  00026	eb 12		 jmp	 SHORT $LN2@Run
$LN10@Run:

; 79   : 
; 80   : 				case CC_STATE_PLAYING:
; 81   : 					this->ProcState_Playing(i);

  00028	56		 push	 esi
  00029	8b cb		 mov	 ecx, ebx
  0002b	e8 00 00 00 00	 call	 ?ProcState_Playing@CChaosCastle@@IAEXH@Z ; CChaosCastle::ProcState_Playing

; 82   : 					break;

  00030	eb 08		 jmp	 SHORT $LN2@Run
$LN11@Run:

; 83   : 
; 84   : 				case CC_STATE_PLAYEND:
; 85   : 					this->ProcState_PlayEnd(i);

  00032	56		 push	 esi
  00033	8b cb		 mov	 ecx, ebx
  00035	e8 00 00 00 00	 call	 ?ProcState_PlayEnd@CChaosCastle@@IAEXH@Z ; CChaosCastle::ProcState_PlayEnd
$LN2@Run:

; 67   : 	{
; 68   : 		for ( int i=0;i<MAX_CHAOSCASTLE_LEVEL;i++)

  0003a	46		 inc	 esi
  0003b	81 c7 68 08 00
	00		 add	 edi, 2152		; 00000868H
  00041	83 fe 07	 cmp	 esi, 7
  00044	7c ca		 jl	 SHORT $LL4@Run
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
$LN3@Run:
  00048	5b		 pop	 ebx

; 86   : 					break;
; 87   : 			}
; 88   : 		}
; 89   : 	}
; 90   : }

  00049	c3		 ret	 0
  0004a	66 90		 npad	 2
$LN18@Run:
  0004c	00 00 00 00	 DD	 $LN2@Run
  00050	00 00 00 00	 DD	 $LN9@Run
  00054	00 00 00 00	 DD	 $LN10@Run
  00058	00 00 00 00	 DD	 $LN11@Run
?Run@CChaosCastle@@QAEXXZ ENDP				; CChaosCastle::Run
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ??1CChaosCastle@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CChaosCastle@@UAE@XZ PROC				; CChaosCastle::~CChaosCastle, COMDAT
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CChaosCastle@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 60   : }

  00025	68 00 00 00 00	 push	 OFFSET ??1_CHAOSCASTLE_DATA@@QAE@XZ
  0002a	6a 07		 push	 7
  0002c	68 68 08 00 00	 push	 2152			; 00000868H
  00031	8d 46 2c	 lea	 eax, DWORD PTR [esi+44]
  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CChaosCastle@@6B@
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00040	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00043	85 c9		 test	 ecx, ecx
  00045	74 6a		 je	 SHORT $LN10@CChaosCast

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00047	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0004a	2b c1		 sub	 eax, ecx
  0004c	c1 f8 03	 sar	 eax, 3
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  0004f	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00054	76 05		 jbe	 SHORT $LN77@CChaosCast
  00056	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN122@CChaosCast:
$LN77@CChaosCast:

; 101  : 	const size_t _User_size = _Count * _Sz;

  0005b	c1 e0 03	 shl	 eax, 3

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0005e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00063	72 2e		 jb	 SHORT $LN78@CChaosCast

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00065	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00068	74 05		 je	 SHORT $LN79@CChaosCast
  0006a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN123@CChaosCast:
$LN79@CChaosCast:

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0006f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00072	3b c1		 cmp	 eax, ecx
  00074	72 05		 jb	 SHORT $LN80@CChaosCast
  00076	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN124@CChaosCast:
$LN80@CChaosCast:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0007b	2b c8		 sub	 ecx, eax
  0007d	83 f9 04	 cmp	 ecx, 4
  00080	73 05		 jae	 SHORT $LN81@CChaosCast
  00082	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN125@CChaosCast:
$LN81@CChaosCast:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00087	83 f9 23	 cmp	 ecx, 35			; 00000023H
  0008a	76 05		 jbe	 SHORT $LN82@CChaosCast
  0008c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN126@CChaosCast:
$LN82@CChaosCast:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00091	8b c8		 mov	 ecx, eax
$LN78@CChaosCast:

; 138  : 	::operator delete(_Ptr);

  00093	51		 push	 ecx
  00094	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00099	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  000a0	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1663 : 			this->_Mylast() = pointer();

  000a3	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 1664 : 			this->_Myend() = pointer();

  000aa	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
$LN10@CChaosCast:
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 60   : }

  000b1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bb	59		 pop	 ecx
  000bc	5e		 pop	 esi
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
$LN121@CChaosCast:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CChaosCastle@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CChaosCastle@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CChaosCastle@@UAE@XZ ENDP				; CChaosCastle::~CChaosCastle
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ??0CChaosCastle@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CChaosCastle@@QAE@XZ PROC				; CChaosCastle::CChaosCastle, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CChaosCastle@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx
  00028	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx
  0002b	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CChaosCastle@@6B@
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00031	c7 43 20 00 00
	00 00		 mov	 DWORD PTR [ebx+32], 0

; 481  : 		_Mylast = pointer();

  00038	c7 43 24 00 00
	00 00		 mov	 DWORD PTR [ebx+36], 0

; 482  : 		_Myend = pointer();

  0003f	c7 43 28 00 00
	00 00		 mov	 DWORD PTR [ebx+40], 0
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 32   : {

  00046	68 00 00 00 00	 push	 OFFSET ??1_CHAOSCASTLE_DATA@@QAE@XZ
  0004b	68 00 00 00 00	 push	 OFFSET ??0_CHAOSCASTLE_DATA@@QAE@XZ
  00050	6a 07		 push	 7
  00052	68 68 08 00 00	 push	 2152			; 00000868H
  00057	8d 43 2c	 lea	 eax, DWORD PTR [ebx+44]
  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  00067	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0006b	8d 73 30	 lea	 esi, DWORD PTR [ebx+48]

; 33   : 	this->m_bCC_EVENT_ENABLE = FALSE;

  0006e	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 34   : 	this->m_iCC_TIME_MIN_OPEN = 10;
; 35   : 	this->m_iCC_NORMAL_ITEM_DROP = 100;
; 36   : 	this->m_iCC_EXCEL_ITEM_DROP = 1200;
; 37   : 	this->m_iCC_MONSTER_REGEN = 0;
; 38   : 
; 39   : 	for ( int i=0;i<MAX_CHAOSCASTLE_LEVEL;i++)

  00075	33 ff		 xor	 edi, edi
  00077	c7 43 08 0a 00
	00 00		 mov	 DWORD PTR [ebx+8], 10	; 0000000aH
  0007e	c7 43 14 64 00
	00 00		 mov	 DWORD PTR [ebx+20], 100	; 00000064H
  00085	c7 43 18 b0 04
	00 00		 mov	 DWORD PTR [ebx+24], 1200 ; 000004b0H
  0008c	c7 43 1c 00 00
	00 00		 mov	 DWORD PTR [ebx+28], 0
$LL4@CChaosCast:

; 40   : 	{
; 41   : 		this->m_stChaosCastleData[i].m_iCC_STATE = CC_STATE_NONE;
; 42   : 		this->m_stChaosCastleData[i].m_iMapNumber = GetMap(i);

  00093	57		 push	 edi
  00094	8b cb		 mov	 ecx, ebx
  00096	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0
  0009d	e8 00 00 00 00	 call	 ?GetMap@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetMap

; 43   : 		this->m_stChaosCastleData[i].m_iChaosCastleIndex = i;
; 44   : 		this->m_stChaosCastleData[i].m_iCC_REMAIN_MSEC = -1;
; 45   : 		this->m_stChaosCastleData[i].m_iCC_TICK_COUNT = -1;
; 46   : 		this->m_stChaosCastleData[i].m_iCC_REWARD_MULTIPLY = 1.0f;
; 47   : 		this->ClearChaosCastleData(i);

  000a2	57		 push	 edi
  000a3	8b cb		 mov	 ecx, ebx
  000a5	89 06		 mov	 DWORD PTR [esi], eax
  000a7	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  000aa	c7 46 0c ff ff
	ff ff		 mov	 DWORD PTR [esi+12], -1
  000b1	c7 46 10 ff ff
	ff ff		 mov	 DWORD PTR [esi+16], -1
  000b8	c7 86 60 08 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+2144], 1065353216 ; 3f800000H
  000c2	e8 00 00 00 00	 call	 ?ClearChaosCastleData@CChaosCastle@@IAEXH@Z ; CChaosCastle::ClearChaosCastleData
  000c7	47		 inc	 edi
  000c8	8d b6 68 08 00
	00		 lea	 esi, DWORD PTR [esi+2152]
  000ce	83 ff 07	 cmp	 edi, 7
  000d1	7c c0		 jl	 SHORT $LL4@CChaosCast
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  000d3	6a 00		 push	 0
  000d5	e8 00 00 00 00	 call	 __time64
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp

; 50   : 	srand((DWORD)time(NULL));

  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _srand
  000e0	83 c4 08	 add	 esp, 8

; 51   : }

  000e3	8b c3		 mov	 eax, ebx
  000e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ef	59		 pop	 ecx
  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CChaosCastle@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 20	 add	 ecx, 32			; 00000020H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@UCHAOSCASTLE_START_TIME@@V?$allocator@UCHAOSCASTLE_START_TIME@@@std@@@std@@QAE@XZ ; std::vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >::~vector<CHAOSCASTLE_START_TIME,std::allocator<CHAOSCASTLE_START_TIME> >
__unwindfunclet$??0CChaosCastle@@QAE@XZ$1:
  0000b	68 00 00 00 00	 push	 OFFSET ??1_CHAOSCASTLE_DATA@@QAE@XZ
  00010	6a 07		 push	 7
  00012	68 68 08 00 00	 push	 2152			; 00000868H
  00017	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 c0 2c	 add	 eax, 44			; 0000002cH
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00023	c3		 ret	 0
__ehhandler$??0CChaosCastle@@QAE@XZ:
  00024	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00028	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002b	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CChaosCastle@@QAE@XZ
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CChaosCastle@@QAE@XZ ENDP				; CChaosCastle::CChaosCastle
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??1_CHAOSCASTLE_DATA@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
??1_CHAOSCASTLE_DATA@@QAE@XZ PROC			; _CHAOSCASTLE_DATA::~_CHAOSCASTLE_DATA, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  00004	8b 81 5c 08 00
	00		 mov	 eax, DWORD PTR [ecx+2140]
  0000a	56		 push	 esi
  0000b	8d b1 5c 08 00
	00		 lea	 esi, DWORD PTR [ecx+2140]

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();
; 718  : 		}
; 719  : 
; 720  : 	~_Tree_comp_alloc() _NOEXCEPT
; 721  : 		{	// destroy head node
; 722  : 		_Freeheadnode(_Myhead());
; 723  : 		}
; 724  : 
; 725  : 	void _Copy_alloc(const _Alty& _Al)
; 726  : 		{	// replace old allocator
; 727  : 		_Pocca(_Getal(), _Al);
; 728  : 		}
; 729  : 
; 730  : 	void _Move_alloc(_Alty& _Al)
; 731  : 		{	// replace old allocator
; 732  : 		_Pocma(_Getal(), _Al);
; 733  : 		}
; 734  : 
; 735  : 	void _Swap_alloc(_Myt& _Right)
; 736  : 		{	// swap allocators
; 737  : 		_Pocs(_Getal(), _Right._Getal());
; 738  : 		}
; 739  : 
; 740  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 741  : 	void _Construct()
; 742  : 		{	// construct head node, proxy
; 743  : 		_Myhead() = _Buyheadnode();
; 744  : 		_TRY_BEGIN
; 745  : 		_Alloc_proxy();
; 746  : 		_CATCH_ALL
; 747  : 		_Freeheadnode(_Myhead());
; 748  : 		_RERAISE;
; 749  : 		_CATCH_END
; 750  : 		}
; 751  : 
; 752  : 	~_Tree_comp_alloc() _NOEXCEPT
; 753  : 		{	// destroy head node, proxy
; 754  : 		_Freeheadnode(_Myhead());
; 755  : 		_Free_proxy();
; 756  : 		}
; 757  : 
; 758  : 	void _Copy_alloc(const _Alty& _Al)
; 759  : 		{	// replace old allocator
; 760  : 		_Free_proxy();
; 761  : 		_Pocca(_Getal(), _Al);
; 762  : 		_Alloc_proxy();
; 763  : 		}
; 764  : 
; 765  : 	void _Move_alloc(_Alty& _Al)
; 766  : 		{	// replace old allocator
; 767  : 		_Free_proxy();
; 768  : 		_Pocma(_Getal(), _Al);
; 769  : 		_Alloc_proxy();
; 770  : 		}
; 771  : 
; 772  : 	void _Swap_alloc(_Myt& _Right)
; 773  : 		{	// swap allocators
; 774  : 		_Pocs(_Getal(), _Right._Getal());
; 775  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 776  : 		}
; 777  : 
; 778  : 	void _Alloc_proxy()
; 779  : 		{	// construct proxy
; 780  : 		typename _Alty::template rebind<_Container_proxy>::other
; 781  : 			_Alproxy(_Getal());
; 782  : 		_Myproxy() = _Alproxy.allocate(1);
; 783  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 784  : 		_Myproxy()->_Mycont = &_Get_data();
; 785  : 		}
; 786  : 
; 787  : 	void _Free_proxy()
; 788  : 		{	// destroy proxy
; 789  : 		typename _Alty::template rebind<_Container_proxy>::other
; 790  : 			_Alproxy(_Getal());
; 791  : 		_Orphan_all();
; 792  : 		_Alproxy.destroy(_Myproxy());
; 793  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 794  : 		_Myproxy() = 0;
; 795  : 		}
; 796  : 
; 797  : 	_Iterator_base12 **_Getpfirst() const
; 798  : 		{	// get address of iterator chain
; 799  : 		return (_Get_data()._Getpfirst());
; 800  : 		}
; 801  : 
; 802  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 803  : 		{	// return reference to _Myproxy
; 804  : 		return (_Get_data()._Myproxy);
; 805  : 		}
; 806  : 
; 807  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 808  : 		{	// return const reference to _Myproxy
; 809  : 		return (_Get_data()._Myproxy);
; 810  : 		}
; 811  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 812  : 
; 813  : 	void _Orphan_all()
; 814  : 		{	// orphan all iterators
; 815  : 		_Get_data()._Orphan_all();
; 816  : 		}
; 817  : 
; 818  : 	void _Swap_all(_Myt& _Right)
; 819  : 		{	// swap all iterators
; 820  : 		_Get_data()._Swap_all(_Right._Get_data());
; 821  : 		}
; 822  : 
; 823  : 	_Nodeptr _Buyheadnode()
; 824  : 		{	// get head node using current allocator
; 825  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 826  : 
; 827  : 		_TRY_BEGIN
; 828  : 		_Getal().construct(
; 829  : 			_STD addressof(_Left(_Pnode)), _Pnode);
; 830  : 		_Getal().construct(
; 831  : 			_STD addressof(_Parent(_Pnode)), _Pnode);
; 832  : 		_Getal().construct(
; 833  : 			_STD addressof(_Right(_Pnode)), _Pnode);
; 834  : 		_CATCH_ALL
; 835  : 		_Getal().deallocate(_Pnode, 1);
; 836  : 		_RERAISE;
; 837  : 		_CATCH_END
; 838  : 
; 839  : 		_Color(_Pnode) = _Black;
; 840  : 		_Isnil(_Pnode) = true;
; 841  : 		return (_Pnode);
; 842  : 		}
; 843  : 
; 844  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 845  : 		{	// free head node using current allocator
; 846  : 		_Getal().destroy(
; 847  : 			_STD addressof(_Left(_Pnode)));
; 848  : 		_Getal().destroy(
; 849  : 			_STD addressof(_Parent(_Pnode)));
; 850  : 		_Getal().destroy(
; 851  : 			_STD addressof(_Right(_Pnode)));
; 852  : 		_Getal().deallocate(_Pnode, 1);
; 853  : 		}
; 854  : 
; 855  : 	_Nodeptr _Buynode0()
; 856  : 		{	// allocate a non-value node
; 857  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		_Getal().construct(
; 861  : 			_STD addressof(_Left(_Pnode)), _Myhead());
; 862  : 		_Getal().construct(
; 863  : 			_STD addressof(_Parent(_Pnode)), _Myhead());
; 864  : 		_Getal().construct(
; 865  : 			_STD addressof(_Right(_Pnode)), _Myhead());
; 866  : 		_CATCH_ALL
; 867  : 		_Getal().deallocate(_Pnode, 1);
; 868  : 		_RERAISE;
; 869  : 		_CATCH_END
; 870  : 
; 871  : 		return (_Pnode);
; 872  : 		}
; 873  : 
; 874  : 	void _Freenode0(_Nodeptr _Pnode)
; 875  : 		{	// free non-value node using current allocator
; 876  : 		_Getal().destroy(
; 877  : 			_STD addressof(_Left(_Pnode)));
; 878  : 		_Getal().destroy(
; 879  : 			_STD addressof(_Parent(_Pnode)));
; 880  : 		_Getal().destroy(
; 881  : 			_STD addressof(_Right(_Pnode)));
; 882  : 		_Getal().deallocate(_Pnode, 1);
; 883  : 		}
; 884  : 
; 885  : 	template<class... _Valty>
; 886  : 		_Nodeptr _Buynode(_Valty&&... _Val)
; 887  : 		{	// allocate a node with defaults and set links and value
; 888  : 		_Nodeptr _Pnode = _Buynode0();
; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;
; 891  : 		this->_Isnil(_Pnode) = false;
; 892  : 
; 893  : 		_TRY_BEGIN
; 894  : 		this->_Getal().construct(
; 895  : 			_STD addressof(_Myval(_Pnode)),
; 896  : 				_STD forward<_Valty>(_Val)...);
; 897  : 		_CATCH_ALL
; 898  : 		_Freenode0(_Pnode);
; 899  : 		_RERAISE;
; 900  : 		_CATCH_END
; 901  : 
; 902  : 		return (_Pnode);
; 903  : 		}
; 904  : 
; 905  : 
; 906  : 	key_compare& _Getcomp() _NOEXCEPT
; 907  : 		{	// return reference to ordering predicate
; 908  : 		return (_Mypair._Get_first());
; 909  : 		}
; 910  : 
; 911  : 	const key_compare& _Getcomp() const _NOEXCEPT
; 912  : 		{	// return const reference to ordering predicate
; 913  : 		return (_Mypair._Get_first());
; 914  : 		}
; 915  : 
; 916  : 	_Alty& _Getal() _NOEXCEPT
; 917  : 		{	// return reference to allocator
; 918  : 		return (_Mypair._Get_second()._Get_first());
; 919  : 		}
; 920  : 
; 921  : 	const _Alty& _Getal() const _NOEXCEPT
; 922  : 		{	// return const reference to allocator
; 923  : 		return (_Mypair._Get_second()._Get_first());
; 924  : 		}
; 925  : 
; 926  : 	_Tree_val<_Val_types>& _Get_data() _NOEXCEPT
; 927  : 		{	// return reference to _Tree_val
; 928  : 		return (_Mypair._Get_second()._Get_second());
; 929  : 		}
; 930  : 
; 931  : 	const _Tree_val<_Val_types>& _Get_data() const _NOEXCEPT
; 932  : 		{	// return const reference to _Tree_val
; 933  : 		return (_Mypair._Get_second()._Get_second());
; 934  : 		}
; 935  : 
; 936  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 937  : 		{	// return reference to _Myhead
; 938  : 		return (_Get_data()._Myhead);
; 939  : 		}
; 940  : 
; 941  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 942  : 		{	// return const reference to _Myhead
; 943  : 		return (_Get_data()._Myhead);
; 944  : 		}
; 945  : 
; 946  : 	size_type& _Mysize() _NOEXCEPT
; 947  : 		{	// return reference to _Mysize
; 948  : 		return (_Get_data()._Mysize);
; 949  : 		}
; 950  : 
; 951  : 	const size_type& _Mysize() const _NOEXCEPT
; 952  : 		{	// return const reference to _Mysize
; 953  : 		return (_Get_data()._Mysize);
; 954  : 		}
; 955  : 
; 956  : private:
; 957  : 	_Compressed_pair<key_compare,
; 958  : 		_Compressed_pair<_Alty, _Tree_val<_Val_types> > > _Mypair;
; 959  : 	};
; 960  : 
; 961  : 		// TEMPLATE CLASS _Tree
; 962  : template<class _Traits>
; 963  : 	class _Tree
; 964  : 		: public _Tree_comp_alloc<_Traits>
; 965  : 	{	// ordered red-black tree for map/multimap/set/multiset
; 966  : public:
; 967  : 	typedef _Tree<_Traits> _Myt;
; 968  : 	typedef _Tree_comp_alloc<_Traits> _Mybase;
; 969  : 
; 970  : 	typedef typename _Traits::key_type key_type;
; 971  : 	typedef typename _Traits::value_compare value_compare;
; 972  : 	enum
; 973  : 		{	// get multi parameter
; 974  : 		_Multi = _Traits::_Multi};
; 975  : 
; 976  : 	typedef typename _Mybase::_Node _Node;
; 977  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 978  : 	typedef typename _Mybase::_Alty _Alty;
; 979  : 
; 980  : 	typedef typename _Mybase::key_compare key_compare;
; 981  : 	typedef typename _Mybase::allocator_type allocator_type;
; 982  : 
; 983  : 	typedef typename _Mybase::value_type value_type;
; 984  : 	typedef typename _Mybase::size_type size_type;
; 985  : 	typedef typename _Mybase::difference_type difference_type;
; 986  : 	typedef typename _Mybase::pointer pointer;
; 987  : 	typedef typename _Mybase::const_pointer const_pointer;
; 988  : 	typedef typename _Mybase::reference reference;
; 989  : 	typedef typename _Mybase::const_reference const_reference;
; 990  : 
; 991  : 	typedef typename _Mybase::const_iterator const_iterator;
; 992  : 	typedef typename _If<is_same<key_type, value_type>::value,
; 993  : 		typename _Mybase::const_iterator,
; 994  : 		typename _Mybase::iterator>::type iterator;
; 995  : 
; 996  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 997  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 998  : 
; 999  : 	typedef pair<iterator, bool> _Pairib;
; 1000 : 	typedef pair<iterator, iterator> _Pairii;
; 1001 : 	typedef pair<const_iterator, const_iterator> _Paircc;
; 1002 : 
; 1003 : 	struct _Copy_tag
; 1004 : 		{	// signals copying
; 1005 : 		};
; 1006 : 	struct _Move_tag
; 1007 : 		{	// signals moving
; 1008 : 		};
; 1009 : 
; 1010 : 	_Tree(const key_compare& _Parg,
; 1011 : 		const allocator_type& _Al)
; 1012 : 		: _Mybase(_Parg, _Al)
; 1013 : 		{	// construct empty tree
; 1014 : 		}
; 1015 : 
; 1016 : 	_Tree(const _Myt& _Right, const allocator_type& _Al)
; 1017 : 		: _Mybase(_Right.key_comp(), _Al)
; 1018 : 		{	// construct tree by copying _Right, allocator
; 1019 : 		_TRY_BEGIN
; 1020 : 		_Copy(_Right, _Copy_tag());
; 1021 : 		_CATCH_ALL
; 1022 : 		_Tidy();
; 1023 : 		_RERAISE;
; 1024 : 		_CATCH_END
; 1025 : 		}
; 1026 : 
; 1027 : 	_Tree(_Myt&& _Right)
; 1028 : 		: _Mybase(_Right.key_comp(), _STD move(_Right._Getal()))
; 1029 : 		{	// construct tree by moving _Right
; 1030 : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1031 : 		}
; 1032 : 
; 1033 : 	_Tree(_Myt&& _Right, const allocator_type& _Al)
; 1034 : 		: _Mybase(_Right.key_comp(), _Al)
; 1035 : 		{	// construct tree by moving _Right, allocator
; 1036 : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 1037 : 		}
; 1038 : 
; 1039 : 	_Myt& operator=(_Myt&& _Right)
; 1040 : 		{	// assign by moving _Right
; 1041 : 		if (this != &_Right)
; 1042 : 			{	// different, move it
; 1043 : 			clear();
; 1044 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1045 : 				&& this->_Getal() != _Right._Getal())
; 1046 : 				this->_Move_alloc(_Right._Getal());
; 1047 : 
; 1048 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1049 : 			}
; 1050 : 		return (*this);
; 1051 : 		}
; 1052 : 
; 1053 : 	void _Assign_rv(_Myt&& _Right, true_type)
; 1054 : 		{	// move from _Right, stealing its contents
; 1055 : 		this->_Swap_all(_Right);
; 1056 : 		_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1057 : 		_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1058 : 		_STD swap(this->_Mysize(), _Right._Mysize());
; 1059 : 		}
; 1060 : 
; 1061 : 	void _Assign_rv(_Myt&& _Right, false_type)
; 1062 : 		{	// move from _Right, possibly moving its contents
; 1063 : 		if (get_allocator() == _Right.get_allocator())
; 1064 : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1065 : 		else
; 1066 : 			_Copy(_Right, _Move_tag());
; 1067 : 		}
; 1068 : 
; 1069 : 	void _Assign_rv(_Myt&& _Right)
; 1070 : 		{	// assign by moving _Right
; 1071 : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 1072 : 			typename _Alty::propagate_on_container_move_assignment());
; 1073 : 		}
; 1074 : 
; 1075 : 
; 1076 : 	_Pairib insert(value_type&& _Val)
; 1077 : 		{	// try to insert node with value _Val, favoring right side
; 1078 : 		return (_Insert_nohint(false,
; 1079 : 			_STD forward<value_type>(_Val), _Nil()));
; 1080 : 		}
; 1081 : 
; 1082 : 	iterator insert(const_iterator _Where, value_type&& _Val)
; 1083 : 		{	// try to insert node with value _Val using _Where as a hint
; 1084 : 		return (_Insert_hint(_Where,
; 1085 : 			_STD forward<value_type>(_Val), _Nil()));
; 1086 : 		}
; 1087 : 
; 1088 : 	template<class _Valty>
; 1089 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1090 : 			_Pairib>::type
; 1091 : 		insert(_Valty&& _Val)
; 1092 : 		{	// try to insert node with value _Val, favoring right side
; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1094 : 		return (_Insert_nohint(false,
; 1095 : 			this->_Myval(_Newnode), _Newnode));
; 1096 : 		}
; 1097 : 
; 1098 : 	template<class _Valty>
; 1099 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1100 : 			iterator>::type
; 1101 : 		insert(const_iterator _Where, _Valty&& _Val)
; 1102 : 		{	// try to insert node with value _Val using _Where as a hint
; 1103 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1104 : 		return (_Insert_hint(_Where,
; 1105 : 			this->_Myval(_Newnode), _Newnode));
; 1106 : 		}
; 1107 : 
; 1108 : 	template<class... _Valty>
; 1109 : 		_Pairib emplace(_Valty&&... _Val)
; 1110 : 		{	// try to insert value_type(_Val...), favoring right side
; 1111 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1112 : 		return (_Insert_nohint(false,
; 1113 : 			this->_Myval(_Newnode), _Newnode));
; 1114 : 		}
; 1115 : 
; 1116 : 	template<class... _Valty>
; 1117 : 		iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
; 1118 : 		{	// insert value_type(_Val...) at _Where
; 1119 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1120 : 		return (_Insert_hint(_Where,
; 1121 : 			this->_Myval(_Newnode), _Newnode));
; 1122 : 		}
; 1123 : 
; 1124 : 
; 1125 : 	~_Tree() _NOEXCEPT
; 1126 : 		{	// destroy tree
; 1127 : 		_Tidy();
; 1128 : 		}
; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2116 : 
; 2117 : 		if (_Wherenode == _Root())
; 2118 : 			_Root() = _Pnode;
; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;
; 2125 : 		this->_Parent(_Wherenode) = _Pnode;
; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2146 : 
; 2147 : 		if (_Wherenode == _Root())
; 2148 : 			_Root() = _Pnode;
; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;
; 2155 : 		this->_Parent(_Wherenode) = _Pnode;
; 2156 : 		}
; 2157 : 
; 2158 : 	template<class _Other>
; 2159 : 		_Nodeptr _Ubound(const _Other& _Keyval) const
; 2160 : 		{	// find leftmost node greater than _Keyval
; 2161 : 		_Nodeptr _Pnode = _Root();
; 2162 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2163 : 
; 2164 : 		while (!this->_Isnil(_Pnode))
; 2165 : 			if (_Compare(_Keyval, this->_Key(_Pnode)))
; 2166 : 				{	// _Pnode greater than _Keyval, remember it
; 2167 : 				_Wherenode = _Pnode;
; 2168 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2169 : 				}
; 2170 : 			else
; 2171 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2172 : 
; 2173 : 		return (_Wherenode);	// return best remembered candidate
; 2174 : 		}
; 2175 : 
; 2176 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2177 : 	void _Orphan_ptr(_Nodeptr _Ptr)
; 2178 : 		{	// orphan iterators with specified node pointers
; 2179 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2180 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
; 2181 : 		if (_Pnext != 0)
; 2182 : 			while (*_Pnext != 0)
; 2183 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 2184 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2185 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2186 : 				else
; 2187 : 					{	// orphan the iterator
; 2188 : 					(*_Pnext)->_Clrcont();
; 2189 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2190 : 					}
; 2191 : 		}
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2193 : 
; 2194 : 	void _Tidy()
; 2195 : 		{	// free all storage
; 2196 : 		erase(begin(), end());

  00011	50		 push	 eax
  00012	ff 30		 push	 DWORD PTR [eax]
  00014	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  00017	8b ce		 mov	 ecx, esi
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  0001f	ff 36		 push	 DWORD PTR [esi]
  00021	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00026	83 c4 04	 add	 esp, 4
  00029	5e		 pop	 esi
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??1_CHAOSCASTLE_DATA@@QAE@XZ ENDP			; _CHAOSCASTLE_DATA::~_CHAOSCASTLE_DATA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0_CHAOSCASTLE_DATA@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
_this$ = -4						; size = 4
??0_CHAOSCASTLE_DATA@@QAE@XZ PROC			; _CHAOSCASTLE_DATA::_CHAOSCASTLE_DATA, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	ba 46 00 00 00	 mov	 edx, 70			; 00000046H
  0000d	89 7d fc	 mov	 DWORD PTR _this$[ebp], edi
  00010	8d 47 3c	 lea	 eax, DWORD PTR [edi+60]
  00013	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL5@CHAOSCASTL:
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.h

; 172  : 		this->m_iIndex = -1;

  00020	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  00026	8d 40 14	 lea	 eax, DWORD PTR [eax+20]

; 173  : 		this->m_iEXP = 0;

  00029	c7 40 f0 00 00
	00 00		 mov	 DWORD PTR [eax-16], 0

; 174  : 		this->m_iScore = 0;

  00030	c7 40 f4 00 00
	00 00		 mov	 DWORD PTR [eax-12], 0

; 175  : 		this->m_iUserState = 0;

  00037	c7 40 f8 00 00
	00 00		 mov	 DWORD PTR [eax-8], 0

; 176  : 		this->m_bSendQuitMsg = false;

  0003e	c6 40 fc 00	 mov	 BYTE PTR [eax-4], 0
  00042	83 ea 01	 sub	 edx, 1
  00045	75 d9		 jne	 SHORT $LL5@CHAOSCASTL
  00047	8d b7 5c 08 00
	00		 lea	 esi, DWORD PTR [edi+2140]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 717  : 		_Myhead() = _Buyheadnode();

  0004d	8b ce		 mov	 ecx, esi

; 567  : 		this->_Myhead = 0;

  0004f	89 16		 mov	 DWORD PTR [esi], edx
  00051	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi

; 568  : 		this->_Mysize = 0;

  00054	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 717  : 		_Myhead() = _Buyheadnode();

  00057	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buyheadnode
  0005c	89 06		 mov	 DWORD PTR [esi], eax
  0005e	8b c7		 mov	 eax, edi
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
??0_CHAOSCASTLE_DATA@@QAE@XZ ENDP			; _CHAOSCASTLE_DATA::_CHAOSCASTLE_DATA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.h
;	COMDAT ?Clear@_CHAOSCASTLE_DATA@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?Clear@_CHAOSCASTLE_DATA@@QAEXXZ PROC			; _CHAOSCASTLE_DATA::Clear, COMDAT
; _this$ = ecx

; 218  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Clear@_CHAOSCASTLE_DATA@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b d1		 mov	 edx, ecx

; 219  : 		this->m_iMISSION_SUCCESS = -1;
; 220  : 		this->m_iCC_NOTIFY_COUNT = -1;
; 221  : 		this->m_bCC_MSG_BEFORE_ENTER = false;
; 222  : 		this->m_bCC_MSG_BEFORE_PLAY = false;
; 223  : 		this->m_bCC_MSG_BEFORE_END = false;
; 224  : 		this->m_bCC_MSG_BEFORE_QUIT = false;
; 225  : 		this->m_bCC_CAN_ENTER = false;
; 226  : 		this->m_bCC_CAN_PARTY = false;
; 227  : 		this->m_bCC_PLAY_START = false;
; 228  : 		this->m_iCC_ENTERED_USER = 0;
; 229  : 		this->m_iCC_FIRST_USER_COUNT = 0;
; 230  : 		this->m_iCC_FIRST_MONSTER_COUNT = 0;
; 231  : 		this->m_lCC_CURRENT_MONSTER_COUNT = 0;
; 232  : 		this->m_iCC_TRAP_STATUS = 0;
; 233  : 		this->m_iCC_TRAP_OLD_STATUS = 0;
; 234  : 
; 235  : 		for ( int iMON = 0;iMON < MAX_CHAOSCASTLE_MONSTER ; iMON++)
; 236  : 		{
; 237  : 			this->m_lCC_MONSTER_COUNT[iMON] = -1;

  00027	83 c8 ff	 or	 eax, -1
  0002a	c7 42 0c ff ff
	ff ff		 mov	 DWORD PTR [edx+12], -1
  00031	c7 42 18 ff ff
	ff ff		 mov	 DWORD PTR [edx+24], -1
  00038	8d ba b4 05 00
	00		 lea	 edi, DWORD PTR [edx+1460]
  0003e	c7 42 1f 00 00
	00 00		 mov	 DWORD PTR [edx+31], 0
  00045	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0004a	66 c7 42 1c 00
	00		 mov	 WORD PTR [edx+28], 0
  00050	c6 42 1e 00	 mov	 BYTE PTR [edx+30], 0
  00054	c7 42 24 00 00
	00 00		 mov	 DWORD PTR [edx+36], 0
  0005b	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0
  00062	c7 42 2c 00 00
	00 00		 mov	 DWORD PTR [edx+44], 0
  00069	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0
  00070	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0
  00077	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], 0
  0007e	f3 ab		 rep stosd

; 238  : 		}
; 239  : 
; 240  : 		for ( int iFALL = 0; iFALL < MAX_CHAOSCASTLE_USER ; iFALL ++)

  00080	8d ba 44 07 00
	00		 lea	 edi, DWORD PTR [edx+1860]

; 241  : 		{
; 242  : 			this->m_lFallUser[iFALL] = -1;

  00086	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0008b	0b c0		 or	 eax, eax
  0008d	f3 ab		 rep stosd

; 243  : 		}
; 244  : 
; 245  : 		this->m_mapMonsterItemList.clear();

  0008f	8d ba 5c 08 00
	00		 lea	 edi, DWORD PTR [edx+2140]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1477 : 		_Erase(_Root());

  00095	8b 07		 mov	 eax, DWORD PTR [edi]
  00097	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0009e	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;

  000a1	8b f3		 mov	 esi, ebx

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  000a3	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  000a7	75 24		 jne	 SHORT $LN32@Clear
  000a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL33@Clear:

; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));

  000b0	ff 76 08	 push	 DWORD PTR [esi+8]
  000b3	8b cf		 mov	 ecx, edi
  000b5	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Erase

; 2065 : 			_Pnode = this->_Left(_Pnode);

  000ba	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  000bc	53		 push	 ebx
  000bd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c2	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  000c5	8b de		 mov	 ebx, esi
  000c7	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000cb	74 e3		 je	 SHORT $LL33@Clear
$LN32@Clear:

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  000cd	8b 07		 mov	 eax, DWORD PTR [edi]

; 1478 : 		_Root() = this->_Myhead();

  000cf	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1479 : 		_Lmost() = this->_Myhead();

  000d2	8b 07		 mov	 eax, DWORD PTR [edi]
  000d4	89 00		 mov	 DWORD PTR [eax], eax

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  000d6	8b 07		 mov	 eax, DWORD PTR [edi]

; 1480 : 		_Rmost() = this->_Myhead();

  000d8	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1481 : 		this->_Mysize() = 0;

  000db	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.h

; 246  : 	};	// line : 408

  000e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ec	59		 pop	 ecx
  000ed	5f		 pop	 edi
  000ee	5e		 pop	 esi
  000ef	5b		 pop	 ebx
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clear@_CHAOSCASTLE_DATA@@QAEXXZ$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$?Clear@_CHAOSCASTLE_DATA@@QAEXXZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clear@_CHAOSCASTLE_DATA@@QAEXXZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clear@_CHAOSCASTLE_DATA@@QAEXXZ ENDP			; _CHAOSCASTLE_DATA::Clear
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??1?$map@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
??1?$map@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@@std@@QAE@XZ PROC ; std::map<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> > >::~map<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  00007	8b 06		 mov	 eax, DWORD PTR [esi]

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();
; 718  : 		}
; 719  : 
; 720  : 	~_Tree_comp_alloc() _NOEXCEPT
; 721  : 		{	// destroy head node
; 722  : 		_Freeheadnode(_Myhead());
; 723  : 		}
; 724  : 
; 725  : 	void _Copy_alloc(const _Alty& _Al)
; 726  : 		{	// replace old allocator
; 727  : 		_Pocca(_Getal(), _Al);
; 728  : 		}
; 729  : 
; 730  : 	void _Move_alloc(_Alty& _Al)
; 731  : 		{	// replace old allocator
; 732  : 		_Pocma(_Getal(), _Al);
; 733  : 		}
; 734  : 
; 735  : 	void _Swap_alloc(_Myt& _Right)
; 736  : 		{	// swap allocators
; 737  : 		_Pocs(_Getal(), _Right._Getal());
; 738  : 		}
; 739  : 
; 740  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 741  : 	void _Construct()
; 742  : 		{	// construct head node, proxy
; 743  : 		_Myhead() = _Buyheadnode();
; 744  : 		_TRY_BEGIN
; 745  : 		_Alloc_proxy();
; 746  : 		_CATCH_ALL
; 747  : 		_Freeheadnode(_Myhead());
; 748  : 		_RERAISE;
; 749  : 		_CATCH_END
; 750  : 		}
; 751  : 
; 752  : 	~_Tree_comp_alloc() _NOEXCEPT
; 753  : 		{	// destroy head node, proxy
; 754  : 		_Freeheadnode(_Myhead());
; 755  : 		_Free_proxy();
; 756  : 		}
; 757  : 
; 758  : 	void _Copy_alloc(const _Alty& _Al)
; 759  : 		{	// replace old allocator
; 760  : 		_Free_proxy();
; 761  : 		_Pocca(_Getal(), _Al);
; 762  : 		_Alloc_proxy();
; 763  : 		}
; 764  : 
; 765  : 	void _Move_alloc(_Alty& _Al)
; 766  : 		{	// replace old allocator
; 767  : 		_Free_proxy();
; 768  : 		_Pocma(_Getal(), _Al);
; 769  : 		_Alloc_proxy();
; 770  : 		}
; 771  : 
; 772  : 	void _Swap_alloc(_Myt& _Right)
; 773  : 		{	// swap allocators
; 774  : 		_Pocs(_Getal(), _Right._Getal());
; 775  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 776  : 		}
; 777  : 
; 778  : 	void _Alloc_proxy()
; 779  : 		{	// construct proxy
; 780  : 		typename _Alty::template rebind<_Container_proxy>::other
; 781  : 			_Alproxy(_Getal());
; 782  : 		_Myproxy() = _Alproxy.allocate(1);
; 783  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 784  : 		_Myproxy()->_Mycont = &_Get_data();
; 785  : 		}
; 786  : 
; 787  : 	void _Free_proxy()
; 788  : 		{	// destroy proxy
; 789  : 		typename _Alty::template rebind<_Container_proxy>::other
; 790  : 			_Alproxy(_Getal());
; 791  : 		_Orphan_all();
; 792  : 		_Alproxy.destroy(_Myproxy());
; 793  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 794  : 		_Myproxy() = 0;
; 795  : 		}
; 796  : 
; 797  : 	_Iterator_base12 **_Getpfirst() const
; 798  : 		{	// get address of iterator chain
; 799  : 		return (_Get_data()._Getpfirst());
; 800  : 		}
; 801  : 
; 802  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 803  : 		{	// return reference to _Myproxy
; 804  : 		return (_Get_data()._Myproxy);
; 805  : 		}
; 806  : 
; 807  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 808  : 		{	// return const reference to _Myproxy
; 809  : 		return (_Get_data()._Myproxy);
; 810  : 		}
; 811  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 812  : 
; 813  : 	void _Orphan_all()
; 814  : 		{	// orphan all iterators
; 815  : 		_Get_data()._Orphan_all();
; 816  : 		}
; 817  : 
; 818  : 	void _Swap_all(_Myt& _Right)
; 819  : 		{	// swap all iterators
; 820  : 		_Get_data()._Swap_all(_Right._Get_data());
; 821  : 		}
; 822  : 
; 823  : 	_Nodeptr _Buyheadnode()
; 824  : 		{	// get head node using current allocator
; 825  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 826  : 
; 827  : 		_TRY_BEGIN
; 828  : 		_Getal().construct(
; 829  : 			_STD addressof(_Left(_Pnode)), _Pnode);
; 830  : 		_Getal().construct(
; 831  : 			_STD addressof(_Parent(_Pnode)), _Pnode);
; 832  : 		_Getal().construct(
; 833  : 			_STD addressof(_Right(_Pnode)), _Pnode);
; 834  : 		_CATCH_ALL
; 835  : 		_Getal().deallocate(_Pnode, 1);
; 836  : 		_RERAISE;
; 837  : 		_CATCH_END
; 838  : 
; 839  : 		_Color(_Pnode) = _Black;
; 840  : 		_Isnil(_Pnode) = true;
; 841  : 		return (_Pnode);
; 842  : 		}
; 843  : 
; 844  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 845  : 		{	// free head node using current allocator
; 846  : 		_Getal().destroy(
; 847  : 			_STD addressof(_Left(_Pnode)));
; 848  : 		_Getal().destroy(
; 849  : 			_STD addressof(_Parent(_Pnode)));
; 850  : 		_Getal().destroy(
; 851  : 			_STD addressof(_Right(_Pnode)));
; 852  : 		_Getal().deallocate(_Pnode, 1);
; 853  : 		}
; 854  : 
; 855  : 	_Nodeptr _Buynode0()
; 856  : 		{	// allocate a non-value node
; 857  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		_Getal().construct(
; 861  : 			_STD addressof(_Left(_Pnode)), _Myhead());
; 862  : 		_Getal().construct(
; 863  : 			_STD addressof(_Parent(_Pnode)), _Myhead());
; 864  : 		_Getal().construct(
; 865  : 			_STD addressof(_Right(_Pnode)), _Myhead());
; 866  : 		_CATCH_ALL
; 867  : 		_Getal().deallocate(_Pnode, 1);
; 868  : 		_RERAISE;
; 869  : 		_CATCH_END
; 870  : 
; 871  : 		return (_Pnode);
; 872  : 		}
; 873  : 
; 874  : 	void _Freenode0(_Nodeptr _Pnode)
; 875  : 		{	// free non-value node using current allocator
; 876  : 		_Getal().destroy(
; 877  : 			_STD addressof(_Left(_Pnode)));
; 878  : 		_Getal().destroy(
; 879  : 			_STD addressof(_Parent(_Pnode)));
; 880  : 		_Getal().destroy(
; 881  : 			_STD addressof(_Right(_Pnode)));
; 882  : 		_Getal().deallocate(_Pnode, 1);
; 883  : 		}
; 884  : 
; 885  : 	template<class... _Valty>
; 886  : 		_Nodeptr _Buynode(_Valty&&... _Val)
; 887  : 		{	// allocate a node with defaults and set links and value
; 888  : 		_Nodeptr _Pnode = _Buynode0();
; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;
; 891  : 		this->_Isnil(_Pnode) = false;
; 892  : 
; 893  : 		_TRY_BEGIN
; 894  : 		this->_Getal().construct(
; 895  : 			_STD addressof(_Myval(_Pnode)),
; 896  : 				_STD forward<_Valty>(_Val)...);
; 897  : 		_CATCH_ALL
; 898  : 		_Freenode0(_Pnode);
; 899  : 		_RERAISE;
; 900  : 		_CATCH_END
; 901  : 
; 902  : 		return (_Pnode);
; 903  : 		}
; 904  : 
; 905  : 
; 906  : 	key_compare& _Getcomp() _NOEXCEPT
; 907  : 		{	// return reference to ordering predicate
; 908  : 		return (_Mypair._Get_first());
; 909  : 		}
; 910  : 
; 911  : 	const key_compare& _Getcomp() const _NOEXCEPT
; 912  : 		{	// return const reference to ordering predicate
; 913  : 		return (_Mypair._Get_first());
; 914  : 		}
; 915  : 
; 916  : 	_Alty& _Getal() _NOEXCEPT
; 917  : 		{	// return reference to allocator
; 918  : 		return (_Mypair._Get_second()._Get_first());
; 919  : 		}
; 920  : 
; 921  : 	const _Alty& _Getal() const _NOEXCEPT
; 922  : 		{	// return const reference to allocator
; 923  : 		return (_Mypair._Get_second()._Get_first());
; 924  : 		}
; 925  : 
; 926  : 	_Tree_val<_Val_types>& _Get_data() _NOEXCEPT
; 927  : 		{	// return reference to _Tree_val
; 928  : 		return (_Mypair._Get_second()._Get_second());
; 929  : 		}
; 930  : 
; 931  : 	const _Tree_val<_Val_types>& _Get_data() const _NOEXCEPT
; 932  : 		{	// return const reference to _Tree_val
; 933  : 		return (_Mypair._Get_second()._Get_second());
; 934  : 		}
; 935  : 
; 936  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 937  : 		{	// return reference to _Myhead
; 938  : 		return (_Get_data()._Myhead);
; 939  : 		}
; 940  : 
; 941  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 942  : 		{	// return const reference to _Myhead
; 943  : 		return (_Get_data()._Myhead);
; 944  : 		}
; 945  : 
; 946  : 	size_type& _Mysize() _NOEXCEPT
; 947  : 		{	// return reference to _Mysize
; 948  : 		return (_Get_data()._Mysize);
; 949  : 		}
; 950  : 
; 951  : 	const size_type& _Mysize() const _NOEXCEPT
; 952  : 		{	// return const reference to _Mysize
; 953  : 		return (_Get_data()._Mysize);
; 954  : 		}
; 955  : 
; 956  : private:
; 957  : 	_Compressed_pair<key_compare,
; 958  : 		_Compressed_pair<_Alty, _Tree_val<_Val_types> > > _Mypair;
; 959  : 	};
; 960  : 
; 961  : 		// TEMPLATE CLASS _Tree
; 962  : template<class _Traits>
; 963  : 	class _Tree
; 964  : 		: public _Tree_comp_alloc<_Traits>
; 965  : 	{	// ordered red-black tree for map/multimap/set/multiset
; 966  : public:
; 967  : 	typedef _Tree<_Traits> _Myt;
; 968  : 	typedef _Tree_comp_alloc<_Traits> _Mybase;
; 969  : 
; 970  : 	typedef typename _Traits::key_type key_type;
; 971  : 	typedef typename _Traits::value_compare value_compare;
; 972  : 	enum
; 973  : 		{	// get multi parameter
; 974  : 		_Multi = _Traits::_Multi};
; 975  : 
; 976  : 	typedef typename _Mybase::_Node _Node;
; 977  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 978  : 	typedef typename _Mybase::_Alty _Alty;
; 979  : 
; 980  : 	typedef typename _Mybase::key_compare key_compare;
; 981  : 	typedef typename _Mybase::allocator_type allocator_type;
; 982  : 
; 983  : 	typedef typename _Mybase::value_type value_type;
; 984  : 	typedef typename _Mybase::size_type size_type;
; 985  : 	typedef typename _Mybase::difference_type difference_type;
; 986  : 	typedef typename _Mybase::pointer pointer;
; 987  : 	typedef typename _Mybase::const_pointer const_pointer;
; 988  : 	typedef typename _Mybase::reference reference;
; 989  : 	typedef typename _Mybase::const_reference const_reference;
; 990  : 
; 991  : 	typedef typename _Mybase::const_iterator const_iterator;
; 992  : 	typedef typename _If<is_same<key_type, value_type>::value,
; 993  : 		typename _Mybase::const_iterator,
; 994  : 		typename _Mybase::iterator>::type iterator;
; 995  : 
; 996  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 997  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 998  : 
; 999  : 	typedef pair<iterator, bool> _Pairib;
; 1000 : 	typedef pair<iterator, iterator> _Pairii;
; 1001 : 	typedef pair<const_iterator, const_iterator> _Paircc;
; 1002 : 
; 1003 : 	struct _Copy_tag
; 1004 : 		{	// signals copying
; 1005 : 		};
; 1006 : 	struct _Move_tag
; 1007 : 		{	// signals moving
; 1008 : 		};
; 1009 : 
; 1010 : 	_Tree(const key_compare& _Parg,
; 1011 : 		const allocator_type& _Al)
; 1012 : 		: _Mybase(_Parg, _Al)
; 1013 : 		{	// construct empty tree
; 1014 : 		}
; 1015 : 
; 1016 : 	_Tree(const _Myt& _Right, const allocator_type& _Al)
; 1017 : 		: _Mybase(_Right.key_comp(), _Al)
; 1018 : 		{	// construct tree by copying _Right, allocator
; 1019 : 		_TRY_BEGIN
; 1020 : 		_Copy(_Right, _Copy_tag());
; 1021 : 		_CATCH_ALL
; 1022 : 		_Tidy();
; 1023 : 		_RERAISE;
; 1024 : 		_CATCH_END
; 1025 : 		}
; 1026 : 
; 1027 : 	_Tree(_Myt&& _Right)
; 1028 : 		: _Mybase(_Right.key_comp(), _STD move(_Right._Getal()))
; 1029 : 		{	// construct tree by moving _Right
; 1030 : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1031 : 		}
; 1032 : 
; 1033 : 	_Tree(_Myt&& _Right, const allocator_type& _Al)
; 1034 : 		: _Mybase(_Right.key_comp(), _Al)
; 1035 : 		{	// construct tree by moving _Right, allocator
; 1036 : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 1037 : 		}
; 1038 : 
; 1039 : 	_Myt& operator=(_Myt&& _Right)
; 1040 : 		{	// assign by moving _Right
; 1041 : 		if (this != &_Right)
; 1042 : 			{	// different, move it
; 1043 : 			clear();
; 1044 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1045 : 				&& this->_Getal() != _Right._Getal())
; 1046 : 				this->_Move_alloc(_Right._Getal());
; 1047 : 
; 1048 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1049 : 			}
; 1050 : 		return (*this);
; 1051 : 		}
; 1052 : 
; 1053 : 	void _Assign_rv(_Myt&& _Right, true_type)
; 1054 : 		{	// move from _Right, stealing its contents
; 1055 : 		this->_Swap_all(_Right);
; 1056 : 		_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1057 : 		_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1058 : 		_STD swap(this->_Mysize(), _Right._Mysize());
; 1059 : 		}
; 1060 : 
; 1061 : 	void _Assign_rv(_Myt&& _Right, false_type)
; 1062 : 		{	// move from _Right, possibly moving its contents
; 1063 : 		if (get_allocator() == _Right.get_allocator())
; 1064 : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1065 : 		else
; 1066 : 			_Copy(_Right, _Move_tag());
; 1067 : 		}
; 1068 : 
; 1069 : 	void _Assign_rv(_Myt&& _Right)
; 1070 : 		{	// assign by moving _Right
; 1071 : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 1072 : 			typename _Alty::propagate_on_container_move_assignment());
; 1073 : 		}
; 1074 : 
; 1075 : 
; 1076 : 	_Pairib insert(value_type&& _Val)
; 1077 : 		{	// try to insert node with value _Val, favoring right side
; 1078 : 		return (_Insert_nohint(false,
; 1079 : 			_STD forward<value_type>(_Val), _Nil()));
; 1080 : 		}
; 1081 : 
; 1082 : 	iterator insert(const_iterator _Where, value_type&& _Val)
; 1083 : 		{	// try to insert node with value _Val using _Where as a hint
; 1084 : 		return (_Insert_hint(_Where,
; 1085 : 			_STD forward<value_type>(_Val), _Nil()));
; 1086 : 		}
; 1087 : 
; 1088 : 	template<class _Valty>
; 1089 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1090 : 			_Pairib>::type
; 1091 : 		insert(_Valty&& _Val)
; 1092 : 		{	// try to insert node with value _Val, favoring right side
; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1094 : 		return (_Insert_nohint(false,
; 1095 : 			this->_Myval(_Newnode), _Newnode));
; 1096 : 		}
; 1097 : 
; 1098 : 	template<class _Valty>
; 1099 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1100 : 			iterator>::type
; 1101 : 		insert(const_iterator _Where, _Valty&& _Val)
; 1102 : 		{	// try to insert node with value _Val using _Where as a hint
; 1103 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1104 : 		return (_Insert_hint(_Where,
; 1105 : 			this->_Myval(_Newnode), _Newnode));
; 1106 : 		}
; 1107 : 
; 1108 : 	template<class... _Valty>
; 1109 : 		_Pairib emplace(_Valty&&... _Val)
; 1110 : 		{	// try to insert value_type(_Val...), favoring right side
; 1111 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1112 : 		return (_Insert_nohint(false,
; 1113 : 			this->_Myval(_Newnode), _Newnode));
; 1114 : 		}
; 1115 : 
; 1116 : 	template<class... _Valty>
; 1117 : 		iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
; 1118 : 		{	// insert value_type(_Val...) at _Where
; 1119 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1120 : 		return (_Insert_hint(_Where,
; 1121 : 			this->_Myval(_Newnode), _Newnode));
; 1122 : 		}
; 1123 : 
; 1124 : 
; 1125 : 	~_Tree() _NOEXCEPT
; 1126 : 		{	// destroy tree
; 1127 : 		_Tidy();
; 1128 : 		}
; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2116 : 
; 2117 : 		if (_Wherenode == _Root())
; 2118 : 			_Root() = _Pnode;
; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;
; 2125 : 		this->_Parent(_Wherenode) = _Pnode;
; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2146 : 
; 2147 : 		if (_Wherenode == _Root())
; 2148 : 			_Root() = _Pnode;
; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;
; 2155 : 		this->_Parent(_Wherenode) = _Pnode;
; 2156 : 		}
; 2157 : 
; 2158 : 	template<class _Other>
; 2159 : 		_Nodeptr _Ubound(const _Other& _Keyval) const
; 2160 : 		{	// find leftmost node greater than _Keyval
; 2161 : 		_Nodeptr _Pnode = _Root();
; 2162 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2163 : 
; 2164 : 		while (!this->_Isnil(_Pnode))
; 2165 : 			if (_Compare(_Keyval, this->_Key(_Pnode)))
; 2166 : 				{	// _Pnode greater than _Keyval, remember it
; 2167 : 				_Wherenode = _Pnode;
; 2168 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2169 : 				}
; 2170 : 			else
; 2171 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2172 : 
; 2173 : 		return (_Wherenode);	// return best remembered candidate
; 2174 : 		}
; 2175 : 
; 2176 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2177 : 	void _Orphan_ptr(_Nodeptr _Ptr)
; 2178 : 		{	// orphan iterators with specified node pointers
; 2179 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2180 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
; 2181 : 		if (_Pnext != 0)
; 2182 : 			while (*_Pnext != 0)
; 2183 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 2184 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2185 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2186 : 				else
; 2187 : 					{	// orphan the iterator
; 2188 : 					(*_Pnext)->_Clrcont();
; 2189 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2190 : 					}
; 2191 : 		}
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2193 : 
; 2194 : 	void _Tidy()
; 2195 : 		{	// free all storage
; 2196 : 		erase(begin(), end());

  00009	50		 push	 eax
  0000a	ff 30		 push	 DWORD PTR [eax]
  0000c	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	5e		 pop	 esi
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$map@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> > >::~map<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??0?$map@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$map@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@@std@@QAE@XZ PROC ; std::map<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> > >::map<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> > >, COMDAT
; _this$ = ecx

; 100  : 		{	// construct empty map from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  00017	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buyheadnode
  0001c	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 101  : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??0?$map@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> > >::map<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBEABHPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBEABHPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Key, COMDAT
; _this$ = ecx

; 2205 : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2207 : 		}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?_Key@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBEABHPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Key
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Kfn@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBEABHABU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBEABHABU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Kfn, COMDAT
; _this$ = ecx

; 2200 : 		{	// get key from value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2201 : 		return (_Traits::_Kfn(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 2202 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Kfn@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBEABHABU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Kfn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 2195 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 43   : 		: _Ptr(_Pnode)

  00004	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2196 : 		erase(begin(), end());

  00006	50		 push	 eax
  00007	ff 30		 push	 DWORD PTR [eax]
  00009	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::erase

; 2197 : 		}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 2139 : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2146 : 
; 2147 : 		if (_Wherenode == _Root())

  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 2148 : 			_Root() = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2155 : 		this->_Parent(_Wherenode) = _Pnode;

  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi

; 2156 : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2155 : 		this->_Parent(_Wherenode) = _Pnode;

  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi

; 2156 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2155 : 		this->_Parent(_Wherenode) = _Pnode;

  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi

; 2156 : 		}

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Root, COMDAT
; _this$ = ecx

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 04	 add	 eax, 4

; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}

  00005	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Root
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}

  00005	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Rmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 2109 : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi

; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]

; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2116 : 
; 2117 : 		if (_Wherenode == _Root())

  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 2118 : 			_Root() = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0002a	89 16		 mov	 DWORD PTR [esi], edx

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi

; 2126 : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0003d	89 16		 mov	 DWORD PTR [esi], edx

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi

; 2126 : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0004a	89 16		 mov	 DWORD PTR [esi], edx

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi

; 2126 : 		}

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 2105 : 		return (this->_Left(this->_Myhead()));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2106 : 		}

  00002	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Lmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Compare@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBE_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?_Compare@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBE_NABH0@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Compare, COMDAT
; _this$ = ecx

; 2074 : 		{	// compare key_type to key_type, with debug checks

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	8b 10		 mov	 edx, DWORD PTR [eax]
  0000b	33 c0		 xor	 eax, eax
  0000d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000f	0f 9c c0	 setl	 al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2076 : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?_Compare@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IBE_NABH0@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 2060 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	8b f7		 mov	 esi, edi

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 1d		 jne	 SHORT $LN3@Erase
$LL4@Erase:

; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));

  00013	ff 76 08	 push	 DWORD PTR [esi+8]
  00016	8b cb		 mov	 ecx, ebx
  00018	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Erase

; 2065 : 			_Pnode = this->_Left(_Pnode);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00028	8b fe		 mov	 edi, esi
  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e3		 je	 SHORT $LL4@Erase
$LN3@Erase:
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx

; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Newnode$ = 8						; size = 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Destroy_if_not_nil, COMDAT
; _this$ = ecx

; 1668 : 		{	// node exists, destroy it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Newnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1673 : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Destroy_if_not_nil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 19		 jne	 SHORT $LN91@lower_boun
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LL13@lower_boun:
  00013	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  00016	7d 05		 jge	 SHORT $LN15@lower_boun

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00018	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 2094 : 			else

  0001b	eb 04		 jmp	 SHORT $LN16@lower_boun
$LN15@lower_boun:

; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;

  0001d	8b d0		 mov	 edx, eax

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN16@lower_boun:

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00021	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00025	74 ec		 je	 SHORT $LL13@lower_boun
$LN91@lower_boun:

; 43   : 		: _Ptr(_Pnode)

  00027	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	89 10		 mov	 DWORD PTR [eax], edx

; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::lower_bound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::find, COMDAT
; _this$ = ecx

; 1485 : 		{	// find an element in mutable sequence that matches _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails

  00005	8b d0		 mov	 edx, eax
  00007	57		 push	 edi

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Keyval$[ebp]
  0000b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00012	75 18		 jne	 SHORT $LN18@find
  00014	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00015	8b 37		 mov	 esi, DWORD PTR [edi]
$LL17@find:
  00017	39 71 10	 cmp	 DWORD PTR [ecx+16], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  0001a	7d 05		 jge	 SHORT $LN19@find

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  0001c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 2094 : 			else

  0001f	eb 04		 jmp	 SHORT $LN20@find
$LN19@find:

; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;

  00021	8b d1		 mov	 edx, ecx

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  00023	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN20@find:

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00025	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00029	74 ec		 je	 SHORT $LL17@find
  0002b	5e		 pop	 esi
$LN18@find:

; 334  : 		return (this->_Ptr == _Right._Ptr);

  0002c	3b d0		 cmp	 edx, eax

; 1487 : 		return (_Where == end()

  0002e	74 11		 je	 SHORT $LN3@find
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00030	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00032	3b 4a 10	 cmp	 ecx, DWORD PTR [edx+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1487 : 		return (_Where == end()

  00035	7c 0a		 jl	 SHORT $LN3@find
  00037	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003a	5f		 pop	 edi
  0003b	89 10		 mov	 DWORD PTR [eax], edx

; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN3@find:

; 1487 : 		return (_Where == end()

  00041	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00044	5f		 pop	 edi
  00045	89 01		 mov	 DWORD PTR [ecx], eax
  00047	8b c1		 mov	 eax, ecx

; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?clear@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::clear, COMDAT
; _this$ = ecx

; 1472 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?clear@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx

; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());

  00027	8b 07		 mov	 eax, DWORD PTR [edi]
  00029	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;

  0002c	8b f3		 mov	 esi, ebx

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  0002e	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  00032	75 1d		 jne	 SHORT $LN23@clear
$LL24@clear:

; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));

  00034	ff 76 08	 push	 DWORD PTR [esi+8]
  00037	8b cf		 mov	 ecx, edi
  00039	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Erase

; 2065 : 			_Pnode = this->_Left(_Pnode);

  0003e	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00040	53		 push	 ebx
  00041	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00046	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00049	8b de		 mov	 ebx, esi
  0004b	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004f	74 e3		 je	 SHORT $LL24@clear
$LN23@clear:

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00051	8b 07		 mov	 eax, DWORD PTR [edi]

; 1478 : 		_Root() = this->_Myhead();

  00053	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1479 : 		_Lmost() = this->_Myhead();

  00056	8b 07		 mov	 eax, DWORD PTR [edi]
  00058	89 00		 mov	 DWORD PTR [eax], eax

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0005a	8b 07		 mov	 eax, DWORD PTR [edi]

; 1480 : 		_Rmost() = this->_Myhead();

  0005c	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1481 : 		this->_Mysize() = 0;

  0005f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1482 : 		}

  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::clear
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::erase, COMDAT
; _this$ = ecx

; 1448 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00004	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]

; 1449 : 		if (_First == begin() && _Last == end())

  00007	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0000e	8b 37		 mov	 esi, DWORD PTR [edi]

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00010	3b 06		 cmp	 eax, DWORD PTR [esi]

; 1449 : 		if (_First == begin() && _Last == end())

  00012	75 1a		 jne	 SHORT $LN176@erase

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00014	3b d6		 cmp	 edx, esi

; 1449 : 		if (_First == begin() && _Last == end())

  00016	75 16		 jne	 SHORT $LN176@erase

; 1450 : 			{	// erase all
; 1451 : 			clear();

  00018	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::clear

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0001d	8b 07		 mov	 eax, DWORD PTR [edi]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi

; 43   : 		: _Ptr(_Pnode)

  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00026	89 08		 mov	 DWORD PTR [eax], ecx

; 1459 : 			}
; 1460 : 		}

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
$LN176@erase:

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  0002e	3b c2		 cmp	 eax, edx

; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)

  00030	74 5d		 je	 SHORT $LN3@erase
$LL2@erase:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00032	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0

; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;

  00036	8b c8		 mov	 ecx, eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00038	75 41		 jne	 SHORT $LN133@erase

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0003a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0003d	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00041	75 19		 jne	 SHORT $LN178@erase

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00043	8b 02		 mov	 eax, DWORD PTR [edx]

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00045	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00049	75 2d		 jne	 SHORT $LN188@erase
  0004b	0f 1f 44 00 00	 npad	 5
$LL144@erase:

; 615  : 			_Pnode = _Left(_Pnode);

  00050	8b d0		 mov	 edx, eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00052	8b 02		 mov	 eax, DWORD PTR [edx]

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00054	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00058	74 f6		 je	 SHORT $LL144@erase

; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else

  0005a	eb 1c		 jmp	 SHORT $LN188@erase
$LN178@erase:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0005c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0005f	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00063	75 13		 jne	 SHORT $LN188@erase
$LL128@erase:
  00065	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00068	75 0e		 jne	 SHORT $LN188@erase

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0006a	8b c2		 mov	 eax, edx
  0006c	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
  0006f	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00072	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00076	74 ed		 je	 SHORT $LL128@erase
$LN188@erase:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00078	89 55 0c	 mov	 DWORD PTR __First$[ebp], edx
$LN133@erase:

; 1457 : 				erase(_First++);

  0007b	51		 push	 ecx
  0007c	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0007f	8b cf		 mov	 ecx, edi
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::erase

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00087	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0008a	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]

; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)

  0008d	75 a3		 jne	 SHORT $LL2@erase
$LN3@erase:

; 43   : 		: _Ptr(_Pnode)

  0008f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	89 01		 mov	 DWORD PTR [ecx], eax

; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));

  00096	8b c1		 mov	 eax, ecx

; 1459 : 			}
; 1460 : 		}

  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv1162 = -8						; size = 4
tv1141 = -8						; size = 4
__Erasednode$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::erase, COMDAT
; _this$ = ecx

; 1263 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 1263 : 		{	// erase element at _Where

  0000b	8b d9		 mov	 ebx, ecx

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  0000d	89 45 fc	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);

  00011	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,std::_Iterator_base0>::operator++

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
  0001c	8b 31		 mov	 esi, DWORD PTR [ecx]

; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))

  0001e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00022	74 05		 je	 SHORT $LN5@erase

; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

  00024	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]

; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))

  00027	eb 1b		 jmp	 SHORT $LN694@erase
$LN5@erase:
  00029	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0002c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00030	74 04		 je	 SHORT $LN7@erase

; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

  00032	8b fe		 mov	 edi, esi

; 1285 : 		else

  00034	eb 0e		 jmp	 SHORT $LN694@erase
$LN7@erase:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  00036	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp]

; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

  00039	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]

; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)

  0003c	3b d1		 cmp	 edx, ecx
  0003e	0f 85 83 00 00
	00		 jne	 $LN9@erase
$LN694@erase:

; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))

  00044	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00048	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0004b	75 03		 jne	 SHORT $LN11@erase

; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

  0004d	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@erase:

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00050	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)

  00052	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00055	75 05		 jne	 SHORT $LN12@erase

; 1298 : 				_Root() = _Fixnode;	// link down from root

  00057	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

  0005a	eb 0b		 jmp	 SHORT $LN15@erase
$LN12@erase:
  0005c	39 0e		 cmp	 DWORD PTR [esi], ecx
  0005e	75 04		 jne	 SHORT $LN14@erase

; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  00060	89 3e		 mov	 DWORD PTR [esi], edi

; 1301 : 			else

  00062	eb 03		 jmp	 SHORT $LN15@erase
$LN14@erase:

; 1302 : 				this->_Right(_Fixnodeparent) =

  00064	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@erase:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00067	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)

  00069	39 08		 cmp	 DWORD PTR [eax], ecx
  0006b	75 22		 jne	 SHORT $LN16@erase

; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)

  0006d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00071	74 04		 je	 SHORT $LN42@erase
  00073	8b d6		 mov	 edx, esi
  00075	eb 16		 jmp	 SHORT $LN43@erase
$LN42@erase:

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00077	8b 07		 mov	 eax, DWORD PTR [edi]

; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  00079	8b d7		 mov	 edx, edi

; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  0007b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0007f	75 0a		 jne	 SHORT $LN166@erase
$LL165@erase:

; 615  : 			_Pnode = _Left(_Pnode);

  00081	8b d0		 mov	 edx, eax

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00083	8b 02		 mov	 eax, DWORD PTR [edx]

; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00085	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00089	74 f6		 je	 SHORT $LL165@erase
$LN166@erase:
  0008b	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN43@erase:

; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)

  0008d	89 10		 mov	 DWORD PTR [eax], edx
$LN16@erase:

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)

  00091	39 48 08	 cmp	 DWORD PTR [eax+8], ecx
  00094	0f 85 8b 00 00
	00		 jne	 $LN373@erase

; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0a		 je	 SHORT $LN44@erase
  000a0	8b d6		 mov	 edx, esi
  000a2	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else

  000a5	e9 7b 00 00 00	 jmp	 $LN373@erase
$LN44@erase:

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  000aa	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  000ad	8b d7		 mov	 edx, edi

; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  000af	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b3	75 0b		 jne	 SHORT $LN218@erase
$LL217@erase:

; 608  : 			_Pnode = _Right(_Pnode);

  000b5	8b d0		 mov	 edx, eax

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  000b7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  000ba	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000be	74 f5		 je	 SHORT $LL217@erase
$LN218@erase:
  000c0	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)

  000c2	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else

  000c5	eb 5e		 jmp	 SHORT $LN373@erase
$LN9@erase:

; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =

  000c7	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =

  000ca	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cc	89 02		 mov	 DWORD PTR [edx], eax

; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))

  000ce	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000d1	75 04		 jne	 SHORT $LN18@erase

; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  000d3	8b f2		 mov	 esi, edx

; 1324 : 			else

  000d5	eb 1a		 jmp	 SHORT $LN19@erase
$LN18@erase:

; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))

  000d7	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000db	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  000de	75 03		 jne	 SHORT $LN20@erase

; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  000e0	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@erase:

; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  000e3	89 3e		 mov	 DWORD PTR [esi], edi

; 1331 : 				this->_Right(_Pnode) =

  000e5	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000e8	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =

  000eb	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ee	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN19@erase:

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  000f1	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)

  000f3	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  000f6	75 05		 jne	 SHORT $LN21@erase

; 1338 : 				_Root() = _Pnode;	// link down from root

  000f8	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  000fb	eb 0e		 jmp	 SHORT $LN24@erase
$LN21@erase:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  000fd	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  00100	39 08		 cmp	 DWORD PTR [eax], ecx
  00102	75 04		 jne	 SHORT $LN23@erase

; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =

  00104	89 10		 mov	 DWORD PTR [eax], edx

; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else

  00106	eb 03		 jmp	 SHORT $LN24@erase
$LN23@erase:

; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =

  00108	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN24@erase:

; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =

  0010b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0010e	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00111	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00114	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]
  00117	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  0011a	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 54   : 	_Right = _Move(_Tmp);

  0011d	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00120	88 48 0c	 mov	 BYTE PTR [eax+12], cl
  00123	8b c8		 mov	 ecx, eax
$LN373@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)

  00125	80 79 0c 01	 cmp	 BYTE PTR [ecx+12], 1
  00129	0f 85 12 01 00
	00		 jne	 $LN25@erase

; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;

  0012f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00131	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00134	0f 84 03 01 00
	00		 je	 $LN3@erase
  0013a	66 0f 1f 44 00
	00		 npad	 6
$LL4@erase:
  00140	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00144	0f 85 f0 00 00
	00		 jne	 $LN697@erase

; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

  0014a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0014c	3b f9		 cmp	 edi, ecx
  0014e	75 70		 jne	 SHORT $LN26@erase

; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);

  00150	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1360 : 					if (this->_Color(_Pnode) == this->_Red)

  00153	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00157	75 13		 jne	 SHORT $LN28@erase

; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;

  00159	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);

  0015d	8b cb		 mov	 ecx, ebx
  0015f	56		 push	 esi
  00160	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  00164	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Lrotate

; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);

  00169	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN28@erase:

; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))

  0016c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00170	0f 85 7d 00 00
	00		 jne	 $LN698@erase

; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

  00176	8b 01		 mov	 eax, DWORD PTR [ecx]
  00178	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0017c	75 09		 jne	 SHORT $LN31@erase
  0017e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00181	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00185	74 68		 je	 SHORT $LN699@erase
$LN31@erase:

; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)

  00187	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0018a	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0018e	75 15		 jne	 SHORT $LN33@erase

; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

  00190	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);

  00192	51		 push	 ecx
  00193	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00197	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  0019b	8b cb		 mov	 ecx, ebx
  0019d	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Rrotate

; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);

  001a2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@erase:

; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  001a5	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  001a8	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;

  001ab	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

  001af	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 1390 : 						_Lrotate(_Fixnodeparent);

  001b2	8b cb		 mov	 ecx, ebx
  001b4	56		 push	 esi
  001b5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001b9	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Lrotate

; 1391 : 						break;	// tree now recolored/rebalanced

  001be	eb 7a		 jmp	 SHORT $LN697@erase
$LN26@erase:

; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)

  001c0	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001c4	75 12		 jne	 SHORT $LN34@erase

; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;

  001c6	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);

  001ca	8b cb		 mov	 ecx, ebx
  001cc	56		 push	 esi
  001cd	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  001d1	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Rrotate

; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);

  001d6	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN34@erase:

; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))

  001d8	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001dc	75 15		 jne	 SHORT $LN698@erase

; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

  001de	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001e1	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001e5	75 1e		 jne	 SHORT $LN37@erase
  001e7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001e9	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001ed	75 16		 jne	 SHORT $LN37@erase
$LN699@erase:

; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;

  001ef	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN698@erase:

; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;

  001f3	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1412 : 						_Fixnode = _Fixnodeparent;

  001f5	8b fe		 mov	 edi, esi
  001f7	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  001fa	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  001fd	0f 85 3d ff ff
	ff		 jne	 $LL4@erase

; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;

  00203	eb 35		 jmp	 SHORT $LN697@erase
$LN37@erase:

; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

  00205	8b 01		 mov	 eax, DWORD PTR [ecx]
  00207	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0020b	75 15		 jne	 SHORT $LN39@erase

; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

  0020d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);

  00210	51		 push	 ecx
  00211	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00215	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00219	8b cb		 mov	 ecx, ebx
  0021b	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Lrotate

; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);

  00220	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN39@erase:

; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  00222	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00225	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;

  00228	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

  0022c	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1427 : 						_Rrotate(_Fixnodeparent);

  0022e	8b cb		 mov	 ecx, ebx
  00230	56		 push	 esi
  00231	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00235	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Rrotate
$LN697@erase:
  0023a	8b 4d fc	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
$LN3@erase:

; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

  0023d	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00241	51		 push	 ecx
  00242	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1440 : 		if (0 < this->_Mysize())

  00247	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  0024a	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  0024d	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]

; 1440 : 		if (0 < this->_Mysize())

  00250	85 c0		 test	 eax, eax
  00252	74 04		 je	 SHORT $LN696@erase

; 1441 : 			--this->_Mysize();

  00254	48		 dec	 eax
  00255	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN696@erase:

; 43   : 		: _Ptr(_Pnode)

  00258	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0025b	5f		 pop	 edi
  0025c	5e		 pop	 esi
  0025d	5b		 pop	 ebx
  0025e	89 08		 mov	 DWORD PTR [eax], ecx

; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}

  00260	8b e5		 mov	 esp, ebp
  00262	5d		 pop	 ebp
  00263	c2 08 00	 ret	 8
?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::max_size, COMDAT
; _this$ = ecx

; 1212 : 		return (this->_Getal().max_size());

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 1213 : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::end, COMDAT
; _this$ = ecx

; 1156 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::begin, COMDAT
; _this$ = ecx

; 1146 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 43   : 		: _Ptr(_Pnode)

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
??1?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::~_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >, COMDAT
; _this$ = ecx

; 1126 : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 43   : 		: _Ptr(_Pnode)

  00007	8b 06		 mov	 eax, DWORD PTR [esi]

; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2116 : 
; 2117 : 		if (_Wherenode == _Root())
; 2118 : 			_Root() = _Pnode;
; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;
; 2125 : 		this->_Parent(_Wherenode) = _Pnode;
; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2146 : 
; 2147 : 		if (_Wherenode == _Root())
; 2148 : 			_Root() = _Pnode;
; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;
; 2155 : 		this->_Parent(_Wherenode) = _Pnode;
; 2156 : 		}
; 2157 : 
; 2158 : 	template<class _Other>
; 2159 : 		_Nodeptr _Ubound(const _Other& _Keyval) const
; 2160 : 		{	// find leftmost node greater than _Keyval
; 2161 : 		_Nodeptr _Pnode = _Root();
; 2162 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2163 : 
; 2164 : 		while (!this->_Isnil(_Pnode))
; 2165 : 			if (_Compare(_Keyval, this->_Key(_Pnode)))
; 2166 : 				{	// _Pnode greater than _Keyval, remember it
; 2167 : 				_Wherenode = _Pnode;
; 2168 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2169 : 				}
; 2170 : 			else
; 2171 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2172 : 
; 2173 : 		return (_Wherenode);	// return best remembered candidate
; 2174 : 		}
; 2175 : 
; 2176 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2177 : 	void _Orphan_ptr(_Nodeptr _Ptr)
; 2178 : 		{	// orphan iterators with specified node pointers
; 2179 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2180 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
; 2181 : 		if (_Pnext != 0)
; 2182 : 			while (*_Pnext != 0)
; 2183 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 2184 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2185 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2186 : 				else
; 2187 : 					{	// orphan the iterator
; 2188 : 					(*_Pnext)->_Clrcont();
; 2189 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2190 : 					}
; 2191 : 		}
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2193 : 
; 2194 : 	void _Tidy()
; 2195 : 		{	// free all storage
; 2196 : 		erase(begin(), end());

  00009	50		 push	 eax
  0000a	ff 30		 push	 DWORD PTR [eax]
  0000c	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1128 : 		}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::~_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >, COMDAT
; _this$ = ecx

; 1013 : 		{	// construct empty tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi

; 567  : 		this->_Myhead = 0;

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  00017	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buyheadnode
  0001c	89 06		 mov	 DWORD PTR [esi], eax

; 1014 : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??0?$_Tree@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Tree<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@H@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@H@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@H@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@H@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@H@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@H@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >::_Min, COMDAT

; 613  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 0c		 jne	 SHORT $LN15@Min
  0000e	66 90		 npad	 2
$LL2@Min:

; 615  : 			_Pnode = _Left(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]

; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00014	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00018	74 f6		 je	 SHORT $LL2@Min
$LN15@Min:

; 616  : 		return (_Pnode);

  0001a	8b c1		 mov	 eax, ecx

; 617  : 		}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >::_Max, COMDAT

; 606  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00009	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000d	75 0c		 jne	 SHORT $LN15@Max
  0000f	90		 npad	 1
$LL2@Max:

; 608  : 			_Pnode = _Right(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL2@Max
$LN15@Max:

; 609  : 		return (_Pnode);

  0001b	8b c1		 mov	 eax, ecx

; 610  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@2@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@2@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >::_Myval, COMDAT

; 601  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 602  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H

; 603  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@2@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >::_Right, COMDAT

; 596  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 598  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >::_Parent, COMDAT

; 591  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 593  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >::_Left, COMDAT

; 586  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 588  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >::_Isnil, COMDAT

; 581  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0d	 add	 eax, 13			; 0000000dH

; 583  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >::_Color, COMDAT

; 576  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 577  : 		return ((char&)_Pnode->_Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 578  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >, COMDAT
; _this$ = ecx

; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 568  : 		this->_Mysize = 0;
; 569  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MONSTER_ITEM_DROP> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEAAIXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Mysize, COMDAT
; _this$ = ecx

; 948  : 		return (_Get_data()._Mysize);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 949  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEAAIXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Myhead, COMDAT
; _this$ = ecx

; 943  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 944  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Myhead, COMDAT
; _this$ = ecx

; 938  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 939  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 933  : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 934  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 928  : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 929  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 923  : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 924  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 918  : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 919  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QBEABU?$less@H@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QBEABU?$less@H@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 913  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 914  : 		}

  00002	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QBEABU?$less@H@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@H@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@H@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 908  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 909  : 		}

  00002	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@H@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Freenode0, COMDAT
; _this$ = ecx

; 875  : 		{	// free non-value node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 883  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buynode0, COMDAT
; _this$ = ecx

; 856  : 		{	// allocate a non-value node

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00001	6a 1c		 push	 28			; 0000001cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 856  : 		{	// allocate a non-value node

  00003	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	8b d0		 mov	 edx, eax
  0000c	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0000f	85 d2		 test	 edx, edx
  00011	74 1e		 je	 SHORT $LN208@Buynode0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00015	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00018	89 02		 mov	 DWORD PTR [edx], eax
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 04		 je	 SHORT $LN126@Buynode0
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	89 01		 mov	 DWORD PTR [ecx], eax
$LN126@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00022	8d 4a 08	 lea	 ecx, DWORD PTR [edx+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00025	85 c9		 test	 ecx, ecx
  00027	74 04		 je	 SHORT $LN176@Buynode0
  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	89 01		 mov	 DWORD PTR [ecx], eax
$LN176@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 871  : 		return (_Pnode);

  0002d	8b c2		 mov	 eax, edx
  0002f	5e		 pop	 esi

; 872  : 		}

  00030	c3		 ret	 0
$LN208@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00031	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN210@Buynode0:
$LN207@Buynode0:
  00036	cc		 int	 3
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Freeheadnode, COMDAT
; _this$ = ecx

; 845  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 853  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buyheadnode, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00000	6a 1c		 push	 28			; 0000001cH
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0000a	85 c0		 test	 eax, eax
  0000c	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00012	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00015	89 00		 mov	 DWORD PTR [eax], eax
  00017	85 c9		 test	 ecx, ecx
  00019	74 02		 je	 SHORT $LN102@Buyheadnod
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
$LN102@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0001d	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00020	85 c9		 test	 ecx, ecx
  00022	74 02		 je	 SHORT $LN140@Buyheadnod
  00024	89 01		 mov	 DWORD PTR [ecx], eax
$LN140@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 839  : 		_Color(_Pnode) = _Black;

  00026	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 840  : 		_Isnil(_Pnode) = true;
; 841  : 		return (_Pnode);
; 842  : 		}

  0002c	c3		 ret	 0
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??1?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 723  : 		}

  00008	c3		 ret	 0
??1?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Construct, COMDAT
; _this$ = ecx

; 716  : 		{	// construct head node

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 717  : 		_Myhead() = _Buyheadnode();

  00003	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buyheadnode
  00008	89 06		 mov	 DWORD PTR [esi], eax
  0000a	5e		 pop	 esi

; 718  : 		}

  0000b	c3		 ret	 0
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >, COMDAT
; _this$ = ecx

; 703  : 		{	// construct from comparator, allocator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 567  : 		this->_Myhead = 0;

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00009	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  00010	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Buyheadnode
  00015	89 06		 mov	 DWORD PTR [esi], eax

; 704  : 		_Construct();
; 705  : 		}

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 08 00	 ret	 8
??0?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Min, COMDAT

; 696  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]

; 582  : 		return ((char&)_Pnode->_Isnil);

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 0c		 jne	 SHORT $LN17@Min
  0000e	66 90		 npad	 2
$LL4@Min:

; 615  : 			_Pnode = _Left(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00014	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00018	74 f6		 je	 SHORT $LL4@Min
$LN17@Min:

; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  0001a	8b c1		 mov	 eax, ecx

; 698  : 		}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Max, COMDAT

; 691  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]

; 582  : 		return ((char&)_Pnode->_Isnil);

  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00009	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000d	75 0c		 jne	 SHORT $LN17@Max
  0000f	90		 npad	 1
$LL4@Max:

; 608  : 			_Pnode = _Right(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL4@Max
$LN17@Max:

; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  0001b	8b c1		 mov	 eax, ecx

; 693  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@2@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@2@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Myval, COMDAT

; 686  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 602  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H

; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHU_MONSTER_ITEM_DROP@@@2@PAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Right, COMDAT

; 681  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Parent, COMDAT

; 676  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Left, COMDAT

; 671  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 673  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Isnil, COMDAT

; 666  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0d	 add	 eax, 13			; 0000000dH

; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Color, COMDAT

; 661  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 577  : 		return ((char&)_Pnode->_Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_MONSTER_ITEM_DROP@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MONSTER_ITEM_DROP,std::less<int>,std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >,0> >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 		}

  00003	5d		 pop	 ebp

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> >::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> >::allocate
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> >::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> >::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 06		 jne	 SHORT $LN4@allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN4@allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  00010	81 f9 49 92 24
	09		 cmp	 ecx, 153391689		; 09249249H
  00016	77 45		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00018	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001f	2b c1		 sub	 eax, ecx
  00021	c1 e0 02	 shl	 eax, 2

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00024	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00029	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0002b	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  0002e	3b c8		 cmp	 ecx, eax
  00030	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00038	8b c8		 mov	 ecx, eax
  0003a	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0003d	85 c9		 test	 ecx, ecx
  0003f	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00041	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00044	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00047	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00054	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00057	85 c0		 test	 eax, eax
  00059	75 b1		 jne	 SHORT $LN12@allocate
  0005b	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  0005d	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00062	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00067	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0006c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00071	cc		 int	 3
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> >::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	81 fa 49 92 24
	09		 cmp	 edx, 153391689		; 09249249H
  0000f	77 3a		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00011	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]
  00018	2b c2		 sub	 eax, edx
  0001a	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00022	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00024	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00027	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00029	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0002c	3b c1		 cmp	 eax, ecx
  0002e	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00030	2b c8		 sub	 ecx, eax
  00032	83 f9 04	 cmp	 ecx, 4
  00035	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00037	83 f9 23	 cmp	 ecx, 35			; 00000023H
  0003a	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0003c	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00044	83 c4 04	 add	 esp, 4

; 639  : 		}

  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0005a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0005f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  00064	cc		 int	 3
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_MONSTER_ITEM_DROP>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBHU_MONSTER_ITEM_DROP@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >::allocator<std::pair<int const ,_MONSTER_ITEM_DROP> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.h
;	COMDAT ?Clear@_CHAOSCASTLE_USER@@QAEXXZ
_TEXT	SEGMENT
?Clear@_CHAOSCASTLE_USER@@QAEXXZ PROC			; _CHAOSCASTLE_USER::Clear, COMDAT
; _this$ = ecx

; 172  : 		this->m_iIndex = -1;

  00000	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 173  : 		this->m_iEXP = 0;

  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 174  : 		this->m_iScore = 0;

  0000d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 175  : 		this->m_iUserState = 0;

  00014	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 176  : 		this->m_bSendQuitMsg = false;

  0001b	c6 41 10 00	 mov	 BYTE PTR [ecx+16], 0

; 177  : 	};	// line : 348

  0001f	c3		 ret	 0
?Clear@_CHAOSCASTLE_USER@@QAEXXZ ENDP			; _CHAOSCASTLE_USER::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.h
;	COMDAT ??0_CHAOSCASTLE_USER@@QAE@XZ
_TEXT	SEGMENT
??0_CHAOSCASTLE_USER@@QAE@XZ PROC			; _CHAOSCASTLE_USER::_CHAOSCASTLE_USER, COMDAT
; _this$ = ecx

; 169  : 
; 170  : 	void Clear()	// line :342
; 171  : 	{
; 172  : 		this->m_iIndex = -1;

  00000	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 166  : 	{
; 167  : 		this->Clear();
; 168  : 	};	// line : 340

  00006	8b c1		 mov	 eax, ecx

; 173  : 		this->m_iEXP = 0;

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 174  : 		this->m_iScore = 0;

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 175  : 		this->m_iUserState = 0;

  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 176  : 		this->m_bSendQuitMsg = false;

  0001d	c6 41 10 00	 mov	 BYTE PTR [ecx+16], 0

; 166  : 	{
; 167  : 		this->Clear();
; 168  : 	};	// line : 340

  00021	c3		 ret	 0
??0_CHAOSCASTLE_USER@@QAE@XZ ENDP			; _CHAOSCASTLE_USER::_CHAOSCASTLE_USER
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.h
;	COMDAT ??0_MONSTER_ITEM_DROP@@QAE@XZ
_TEXT	SEGMENT
??0_MONSTER_ITEM_DROP@@QAE@XZ PROC			; _MONSTER_ITEM_DROP::_MONSTER_ITEM_DROP, COMDAT
; _this$ = ecx

; 150  : 	{
; 151  : 		this->m_iIndex = -1;

  00000	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 152  : 		this->m_iItemKind = -1;
; 153  : 	};	// line : 232

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
  0000f	c3		 ret	 0
??0_MONSTER_ITEM_DROP@@QAE@XZ ENDP			; _MONSTER_ITEM_DROP::_MONSTER_ITEM_DROP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??R?$less@H@std@@QBE_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@H@std@@QBE_NABH0@Z PROC			; std::less<int>::operator(), COMDAT
; _this$ = ecx

; 239  : 		{	// apply operator< to operands

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 240  : 		return (_Left < _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	8b 10		 mov	 edx, DWORD PTR [eax]
  0000b	33 c0		 xor	 eax, eax
  0000d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000f	0f 9c c0	 setl	 al

; 241  : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
??R?$less@H@std@@QBE_NABH0@Z ENDP			; std::less<int>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$_Move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAD@std@@YA$$QADAAD@Z PROC			; std::_Move<char &>, COMDAT

; 1257 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1258 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1259 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAD@std@@YA$$QADAAD@Z ENDP			; std::_Move<char &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT

; 51   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);
; 53   : 	_Left = _Move(_Right);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  00009	53		 push	 ebx
  0000a	8a 01		 mov	 al, BYTE PTR [ecx]
  0000c	8a 1a		 mov	 bl, BYTE PTR [edx]
  0000e	88 02		 mov	 BYTE PTR [edx], al

; 54   : 	_Right = _Move(_Tmp);

  00010	88 19		 mov	 BYTE PTR [ecx], bl
  00012	5b		 pop	 ebx

; 55   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
tv65 = -4						; size = 4
__Xx$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 316  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 746  :         return (float)sqrt(_X);

  0000e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00011	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  00016	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath

; 317  : 	return (_CSTD sqrtf(_Xx));

  0001a	f3 0f 11 44 24
	04		 movss	 DWORD PTR tv65[esp+8], xmm0
  00020	d9 44 24 04	 fld	 DWORD PTR tv65[esp+8]

; 318  : 	}

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ PROC ; std::_Iterator_base0::_Getcont, COMDAT
; _this$ = ecx

; 59   : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 60   : 		}

  00002	c3		 ret	 0
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ENDP ; std::_Iterator_base0::_Getcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv68 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 745  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]

; 746  :         return (float)sqrt(_X);

  0000e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00011	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  00016	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0001a	f3 0f 11 44 24
	04		 movss	 DWORD PTR tv68[esp+8], xmm0
  00020	d9 44 24 04	 fld	 DWORD PTR tv68[esp+8]

; 747  :     }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 534  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  :         }

  00003	5d		 pop	 ebp

; 535  :             return _time64(_Time);

  00004	e9 00 00 00 00	 jmp	 __time64
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);
; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 1459 :     #pragma warning(pop)
; 1460 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaoscastle.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
