; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\GuildMatch.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0GuildMatch@@QAE@XZ				; GuildMatch::GuildMatch
PUBLIC	??1GuildMatch@@UAE@XZ				; GuildMatch::~GuildMatch
PUBLIC	?CGReqOfferList@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_OFFERLIST@@@Z ; GuildMatch::CGReqOfferList
PUBLIC	?CGReqOfferListByFilter@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_OFFERLISTFILTER@@@Z ; GuildMatch::CGReqOfferListByFilter
PUBLIC	?DGAnsOfferList@GuildMatch@@QAEXPAE@Z		; GuildMatch::DGAnsOfferList
PUBLIC	?CGReqOfferCreate@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_OFFERCREATE@@@Z ; GuildMatch::CGReqOfferCreate
PUBLIC	?DGAnsOfferCreate@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_OFFERCREATE@@@Z ; GuildMatch::DGAnsOfferCreate
PUBLIC	?CGReqOfferDelete@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_OFFERDELETE@@@Z ; GuildMatch::CGReqOfferDelete
PUBLIC	?DGAnsOfferDelete@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_OFFERDELETE@@@Z ; GuildMatch::DGAnsOfferDelete
PUBLIC	?CGReqJoinReq@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_JOINREQ@@@Z ; GuildMatch::CGReqJoinReq
PUBLIC	?DGAnsJoinReq@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_JOINREQ@@@Z ; GuildMatch::DGAnsJoinReq
PUBLIC	?CGReqJoinReqDelete@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_JOINREQDELETE@@@Z ; GuildMatch::CGReqJoinReqDelete
PUBLIC	?DGAnsJoinReqDelete@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_OFFERDELETE@@@Z ; GuildMatch::DGAnsJoinReqDelete
PUBLIC	?CGReqJoinReqAnswer@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_REQUESTANSWER@@@Z ; GuildMatch::CGReqJoinReqAnswer
PUBLIC	?DGAnsJoinReqAnswer@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_REQUESTANSWER@@@Z ; GuildMatch::DGAnsJoinReqAnswer
PUBLIC	?CGReqJoinReqList@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_REQUESTLIST@@@Z ; GuildMatch::CGReqJoinReqList
PUBLIC	?DGAnsJoinReqList@GuildMatch@@QAEXPAE@Z		; GuildMatch::DGAnsJoinReqList
PUBLIC	?CGReqJoinReqStatus@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_JOINREQSTATUS@@@Z ; GuildMatch::CGReqJoinReqStatus
PUBLIC	?DGAnsJoinReqStatus@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_JOINREQSTATUS@@@Z ; GuildMatch::DGAnsJoinReqStatus
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@I@Z ; std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::deallocate
PUBLIC	??_GGuildMatch@@UAEPAXI@Z			; GuildMatch::`scalar deleting destructor'
PUBLIC	??_7GuildMatch@@6B@				; GuildMatch::`vftable'
PUBLIC	?g_GuildMatch@@3VGuildMatch@@A			; g_GuildMatch
PUBLIC	??_R4GuildMatch@@6B@				; GuildMatch::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVGuildMatch@@@8				; GuildMatch `RTTI Type Descriptor'
PUBLIC	??_R3GuildMatch@@8				; GuildMatch::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2GuildMatch@@8				; GuildMatch::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@GuildMatch@@8			; GuildMatch::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	?AddMember@CGuildClass@@QAEPAU_GUILD_INFO_STRUCT@@PAD0HHHH@Z:PROC ; CGuildClass::AddMember
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GCGuildViewportNowPaint@@YAXHPADPAEH@Z:PROC	; GCGuildViewportNowPaint
EXTRN	??_EGuildMatch@@UAEPAXI@Z:PROC			; GuildMatch::`vector deleting destructor'
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	?Guild@@3VCGuildClass@@A:BYTE			; Guild
EXTRN	?gGameServerCode@@3FA:WORD			; gGameServerCode
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?g_GuildMatch@@3VGuildMatch@@A DB 010H DUP (?)		; g_GuildMatch
_BSS	ENDS
CRT$XCU	SEGMENT
?g_GuildMatch$initializer$@@3P6AXXZA DD FLAT:??__Eg_GuildMatch@@YAXXZ ; g_GuildMatch$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@GuildMatch@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GuildMatch@@8 DD FLAT:??_R0?AVGuildMatch@@@8 ; GuildMatch::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GuildMatch@@8
rdata$r	ENDS
;	COMDAT ??_R2GuildMatch@@8
rdata$r	SEGMENT
??_R2GuildMatch@@8 DD FLAT:??_R1A@?0A@EA@GuildMatch@@8	; GuildMatch::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3GuildMatch@@8
rdata$r	SEGMENT
??_R3GuildMatch@@8 DD 00H				; GuildMatch::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2GuildMatch@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGuildMatch@@@8
data$r	SEGMENT
??_R0?AVGuildMatch@@@8 DD FLAT:??_7type_info@@6B@	; GuildMatch `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGuildMatch@@', 00H
data$r	ENDS
;	COMDAT ??_R4GuildMatch@@6B@
rdata$r	SEGMENT
??_R4GuildMatch@@6B@ DD 00H				; GuildMatch::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVGuildMatch@@@8
	DD	FLAT:??_R3GuildMatch@@8
rdata$r	ENDS
;	COMDAT ??_7GuildMatch@@6B@
CONST	SEGMENT
??_7GuildMatch@@6B@ DD FLAT:??_R4GuildMatch@@6B@	; GuildMatch::`vftable'
	DD	FLAT:??_EGuildMatch@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@QAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@QAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@@Z PROC ; std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO>::destroy<GUILDMATCH_GCANS_OFFERLIST_INFO>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@QAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@@Z ENDP ; std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO>::destroy<GUILDMATCH_GCANS_OFFERLIST_INFO>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@?$allocator_traits@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@SAXAAV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@1@PAUGUILDMATCH_GCANS_OFFERLIST_INFO@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@?$allocator_traits@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@SAXAAV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@1@PAUGUILDMATCH_GCANS_OFFERLIST_INFO@@@Z PROC ; std::allocator_traits<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::destroy<GUILDMATCH_GCANS_OFFERLIST_INFO>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@?$allocator_traits@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@SAXAAV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@1@PAUGUILDMATCH_GCANS_OFFERLIST_INFO@@@Z ENDP ; std::allocator_traits<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::destroy<GUILDMATCH_GCANS_OFFERLIST_INFO>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@YAPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@YAPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<GUILDMATCH_GCANS_OFFERLIST_INFO>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@YAPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<GUILDMATCH_GCANS_OFFERLIST_INFO>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@@Z PROC ; std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::destroy<GUILDMATCH_GCANS_OFFERLIST_INFO>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@@Z ENDP ; std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::destroy<GUILDMATCH_GCANS_OFFERLIST_INFO>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@YAPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@YAPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@AAU1@@Z PROC ; std::addressof<GUILDMATCH_GCANS_OFFERLIST_INFO>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@YAPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@AAU1@@Z ENDP ; std::addressof<GUILDMATCH_GCANS_OFFERLIST_INFO>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@YAXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@0AAU?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@YAXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@0AAU?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >, COMDAT

; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@YAXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@0AAU?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UGUILDMATCH_GCANS_OFFERLIST_INFO@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUGUILDMATCH_GCANS_OFFERLIST_INFO@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UGUILDMATCH_GCANS_OFFERLIST_INFO@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUGUILDMATCH_GCANS_OFFERLIST_INFO@@0@Z PROC ; std::_Ptr_cat<GUILDMATCH_GCANS_OFFERLIST_INFO,GUILDMATCH_GCANS_OFFERLIST_INFO>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UGUILDMATCH_GCANS_OFFERLIST_INFO@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUGUILDMATCH_GCANS_OFFERLIST_INFO@@0@Z ENDP ; std::_Ptr_cat<GUILDMATCH_GCANS_OFFERLIST_INFO,GUILDMATCH_GCANS_OFFERLIST_INFO>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@YAABV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@YAABV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@0@ABV10@@Z PROC ; std::forward<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@YAABV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@YAXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@0AAU?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@YAXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@0AAU?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@YAXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@0AAU?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >,std::_Vector_val<std::_Simple_types<GUILDMATCH_GCANS_OFFERLIST_INFO> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >,std::_Vector_val<std::_Simple_types<GUILDMATCH_GCANS_OFFERLIST_INFO> >,1><std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >,std::_Vector_val<std::_Simple_types<GUILDMATCH_GCANS_OFFERLIST_INFO> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >,std::_Vector_val<std::_Simple_types<GUILDMATCH_GCANS_OFFERLIST_INFO> >,1><std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_GuildMatch@@YAXXZ
text$yd	SEGMENT
??__Fg_GuildMatch@@YAXXZ PROC				; `dynamic atexit destructor for 'g_GuildMatch'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_GuildMatch@@3VGuildMatch@@A ; g_GuildMatch
  00005	e9 00 00 00 00	 jmp	 ??1GuildMatch@@UAE@XZ	; GuildMatch::~GuildMatch
??__Fg_GuildMatch@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_GuildMatch''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ??__Eg_GuildMatch@@YAXXZ
text$di	SEGMENT
??__Eg_GuildMatch@@YAXXZ PROC				; `dynamic initializer for 'g_GuildMatch'', COMDAT

; 9    : GuildMatch g_GuildMatch;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_GuildMatch@@3VGuildMatch@@A ; g_GuildMatch
  00005	e8 00 00 00 00	 call	 ??0GuildMatch@@QAE@XZ	; GuildMatch::GuildMatch
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_GuildMatch@@YAXXZ ; `dynamic atexit destructor for 'g_GuildMatch''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_GuildMatch@@YAXXZ ENDP				; `dynamic initializer for 'g_GuildMatch''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GGuildMatch@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GGuildMatch@@UAEPAXI@Z PROC				; GuildMatch::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1GuildMatch@@UAE@XZ	; GuildMatch::~GuildMatch
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 10		 push	 16			; 00000010H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GGuildMatch@@UAEPAXI@Z ENDP				; GuildMatch::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@IAEXXZ PROC ; std::vector<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 33		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 31 0c c3 30	 mov	 eax, 818089009		; 30c30c31H
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	c1 fa 04	 sar	 edx, 4
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@I@Z ; std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00035	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0003c	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0003d	c3		 ret	 0
?_Tidy@?$vector@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@IAEXXZ ENDP ; std::vector<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@IAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@IAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@0@Z PROC ; std::vector<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@IAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@0@Z ENDP ; std::vector<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAE@XZ PROC ; std::vector<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::~vector<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 33		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 31 0c c3 30	 mov	 eax, 818089009		; 30c30c31H
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	c1 fa 04	 sar	 edx, 4
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@I@Z ; std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00035	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0003c	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0003d	c3		 ret	 0
??1?$vector@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAE@XZ ENDP ; std::vector<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::~vector<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAE@XZ PROC ; std::vector<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::vector<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAE@XZ ENDP ; std::vector<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::vector<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >,std::_Vector_val<std::_Simple_types<GUILDMATCH_GCANS_OFFERLIST_INFO> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >,std::_Vector_val<std::_Simple_types<GUILDMATCH_GCANS_OFFERLIST_INFO> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >,std::_Vector_val<std::_Simple_types<GUILDMATCH_GCANS_OFFERLIST_INFO> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >,std::_Vector_val<std::_Simple_types<GUILDMATCH_GCANS_OFFERLIST_INFO> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<GUILDMATCH_GCANS_OFFERLIST_INFO> >::_Vector_val<std::_Simple_types<GUILDMATCH_GCANS_OFFERLIST_INFO> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<GUILDMATCH_GCANS_OFFERLIST_INFO> >::_Vector_val<std::_Simple_types<GUILDMATCH_GCANS_OFFERLIST_INFO> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAEAAPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAEAAPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAEAAPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAEAAPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAEAAPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAEAAPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAEAAPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAEAAPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAEAAPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAE@ABV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAE@ABV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >::_Vector_alloc<std::_Vec_base_types<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@UGUILDMATCH_GCANS_OFFERLIST_INFO@@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@@std@@QAE@ABV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >::_Vector_alloc<std::_Vec_base_types<GUILDMATCH_GCANS_OFFERLIST_INFO,std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@I@Z PROC ; std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 139  : 	}
; 140  : 
; 141  : 		// TEMPLATE FUNCTION _Construct
; 142  : template<class _Ty1,
; 143  : 	class _Ty2> inline
; 144  : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 145  : 	{	// construct object at _Ptr with value _Val
; 146  : 	void *_Vptr = _Ptr;
; 147  : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 148  : 	}
; 149  : 
; 150  : template<class _Ty1> inline
; 151  : 	void _Construct(_Ty1 *_Ptr)
; 152  : 	{	// construct object at _Ptr with default value
; 153  : 	void *_Vptr = _Ptr;
; 154  : 
; 155  : 	::new (_Vptr) _Ty1();
; 156  : 	}
; 157  : 
; 158  : 		// TEMPLATE FUNCTION _Destroy
; 159  : template<class _Ty> inline
; 160  : 	void _Destroy(_Ty *_Ptr)
; 161  : 	{	// destroy object at _Ptr
; 162  : 	_Ptr->~_Ty();
; 163  : 	}
; 164  : 
; 165  : 		// TEMPLATE FUNCTION _Destroy_range
; 166  : template<class _Alloc> inline
; 167  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 168  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 169  : 		_Nonscalar_ptr_iterator_tag)
; 170  : 	{	// destroy [_First, _Last), arbitrary type
; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d c3 30 0c 03	 cmp	 eax, 51130563		; 030c30c3H
  0000e	77 31		 ja	 SHORT $LN16@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	6b c0 54	 imul	 eax, eax, 84

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN7@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN18@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN19@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN20@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN21@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN7@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 909  : 		_Mybase::deallocate(_Ptr, _Count);
; 910  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN16@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  0005a	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAE@ABV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAE@ABV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAE@ABV?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@QAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@QAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@I@Z PROC ; std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d c3 30 0c 03	 cmp	 eax, 51130563		; 030c30c3H
  0000e	77 31		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	6b c0 54	 imul	 eax, eax, 84

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 639  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005a	cc		 int	 3
?deallocate@?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@QAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@I@Z ENDP ; std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@QAE@ABV01@@Z PROC ; std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO>::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO>::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@QAE@XZ PROC ; std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO>::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@QAE@XZ ENDP ; std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO>::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?DGAnsJoinReqStatus@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_JOINREQSTATUS@@@Z
_TEXT	SEGMENT
_lpInfo$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_lpData$ = 8						; size = 4
?DGAnsJoinReqStatus@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_JOINREQSTATUS@@@Z PROC ; GuildMatch::DGAnsJoinReqStatus, COMDAT
; _this$ = ecx

; 506  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpData$[ebp]

; 507  : 	if(		!OBJMAX_RANGE(lpData->UserIndex) 
; 508  : 		||	gObj[lpData->UserIndex].Connected != PLAYER_PLAYING )

  00014	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00017	85 d2		 test	 edx, edx
  00019	0f 88 89 00 00
	00		 js	 $LN3@DGAnsJoinR
  0001f	33 c0		 xor	 eax, eax
  00021	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00027	0f 9e c0	 setle	 al
  0002a	85 c0		 test	 eax, eax
  0002c	74 7a		 je	 SHORT $LN3@DGAnsJoinR
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00033	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00039	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  0003e	75 68		 jne	 SHORT $LN3@DGAnsJoinR

; 509  : 	{
; 510  : 		return;
; 511  : 	}
; 512  : 	// ----
; 513  : 	GUILDMATCH_GCANS_JOINREQSTATUS lpInfo = { 0 };
; 514  : 	lpInfo.h.c			= 0xC1;
; 515  : 	lpInfo.h.headcode	= 0xED;
; 516  : 	lpInfo.h.subcode	= 0x08;
; 517  : 	lpInfo.h.size		= sizeof(GUILDMATCH_GCANS_JOINREQSTATUS);
; 518  : 	lpInfo.Unknown14	= 0x18;
; 519  : 	lpInfo.Unknown23	= 0x0B;
; 520  : 	// ----
; 521  : 	if( lpData->Result != 1 )

  00040	83 7e 08 01	 cmp	 DWORD PTR [esi+8], 1
  00044	0f 57 c0	 xorps	 xmm0, xmm0
  00047	0f 11 45 e1	 movups	 XMMWORD PTR _lpInfo$[ebp+1], xmm0
  0004b	66 c7 45 f9 00
	00		 mov	 WORD PTR _lpInfo$[ebp+25], 0
  00051	66 0f d6 45 f1	 movq	 QWORD PTR _lpInfo$[ebp+17], xmm0
  00056	c6 45 fb 00	 mov	 BYTE PTR _lpInfo$[ebp+27], 0
  0005a	c7 45 e0 c1 1c
	ed 08		 mov	 DWORD PTR _lpInfo$[ebp], 149757121 ; 08ed1cc1H
  00061	c6 45 ee 18	 mov	 BYTE PTR _lpInfo$[ebp+14], 24 ; 00000018H
  00065	c6 45 f7 0b	 mov	 BYTE PTR _lpInfo$[ebp+23], 11 ; 0000000bH

; 524  : 		DataSend(lpData->UserIndex, (LPBYTE)&lpInfo, sizeof(GUILDMATCH_GCANS_JOINREQSTATUS));

  00069	6a 1c		 push	 28			; 0000001cH
  0006b	74 09		 je	 SHORT $LN4@DGAnsJoinR

; 522  : 	{
; 523  : 		lpInfo.Status = -2;

  0006d	c7 45 f8 fe ff
	ff ff		 mov	 DWORD PTR _lpInfo$[ebp+24], -2 ; fffffffeH

; 525  : 		return;

  00074	eb 25		 jmp	 SHORT $LN8@DGAnsJoinR
$LN4@DGAnsJoinR:

; 526  : 	}
; 527  : 	// ----
; 528  : 	lpInfo.Status = 0;
; 529  : 	memcpy(lpInfo.GuildMaster, lpData->GuildMaster, 10);

  00076	66 8b 46 14	 mov	 ax, WORD PTR [esi+20]
  0007a	f3 0f 7e 46 0c	 movq	 xmm0, QWORD PTR [esi+12]
  0007f	66 89 45 ec	 mov	 WORD PTR _lpInfo$[ebp+12], ax

; 530  : 	memcpy(lpInfo.GuildName, lpData->GuildName, 8);

  00083	8b 46 17	 mov	 eax, DWORD PTR [esi+23]
  00086	89 45 ef	 mov	 DWORD PTR _lpInfo$[ebp+15], eax
  00089	8b 46 1b	 mov	 eax, DWORD PTR [esi+27]
  0008c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _lpInfo$[ebp+24], 0
  00093	66 0f d6 45 e4	 movq	 QWORD PTR _lpInfo$[ebp+4], xmm0
  00098	89 45 f3	 mov	 DWORD PTR _lpInfo$[ebp+19], eax
$LN8@DGAnsJoinR:

; 531  : 	DataSend(lpData->UserIndex, (LPBYTE)&lpInfo, sizeof(GUILDMATCH_GCANS_JOINREQSTATUS));

  0009b	8d 45 e0	 lea	 eax, DWORD PTR _lpInfo$[ebp]
  0009e	50		 push	 eax
  0009f	52		 push	 edx
  000a0	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@DGAnsJoinR:

; 532  : }

  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ab	33 cd		 xor	 ecx, ebp
  000ad	5e		 pop	 esi
  000ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 04 00	 ret	 4
?DGAnsJoinReqStatus@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_JOINREQSTATUS@@@Z ENDP ; GuildMatch::DGAnsJoinReqStatus
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?CGReqJoinReqStatus@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_JOINREQSTATUS@@@Z
_TEXT	SEGMENT
_lpRequest$ = -56					; size = 52
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
_lpData$ = 12						; size = 4
?CGReqJoinReqStatus@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_JOINREQSTATUS@@@Z PROC ; GuildMatch::CGReqJoinReqStatus, COMDAT
; _this$ = ecx

; 487  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _UserIndex$[ebp]

; 488  : 	if(		!OBJMAX_RANGE(UserIndex) 
; 489  : 		||	gObj[UserIndex].Connected != PLAYER_PLAYING )

  00014	85 f6		 test	 esi, esi
  00016	78 5f		 js	 SHORT $LN3@CGReqJoinR
  00018	33 c0		 xor	 eax, eax
  0001a	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  00020	0f 9e c0	 setle	 al
  00023	85 c0		 test	 eax, eax
  00025	74 50		 je	 SHORT $LN3@CGReqJoinR
  00027	57		 push	 edi
  00028	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  0002e	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00034	83 7f 04 03	 cmp	 DWORD PTR [edi+4], 3
  00038	75 3c		 jne	 SHORT $LN7@CGReqJoinR

; 490  : 	{
; 491  : 		return;
; 492  : 	}
; 493  : 	// ----
; 494  : 	GUILDMATCH_GDREQ_JOINREQSTATUS lpRequest = { 0 };

  0003a	6a 33		 push	 51			; 00000033H
  0003c	8d 45 c9	 lea	 eax, DWORD PTR _lpRequest$[ebp+1]
  0003f	6a 00		 push	 0
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _memset

; 495  : 	lpRequest.h.c			= 0xC1;

  00047	c7 45 c8 c1 34
	ed 08		 mov	 DWORD PTR _lpRequest$[ebp], 149763265 ; 08ed34c1H
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 496  : 	lpRequest.h.headcode	= 0xED;
; 497  : 	lpRequest.h.subcode		= 0x08;
; 498  : 	lpRequest.h.size		= sizeof(GUILDMATCH_GDREQ_JOINREQSTATUS);
; 499  : 	lpRequest.UserIndex		= UserIndex;

  00051	89 75 cc	 mov	 DWORD PTR _lpRequest$[ebp+4], esi

; 500  : 	memcpy(lpRequest.Sender, gObj[UserIndex].Name, 10);
; 501  : 	cDBSMng.Send((PCHAR)&lpRequest, sizeof(GUILDMATCH_GDREQ_JOINREQSTATUS));

  00054	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00059	f3 0f 7e 47 5d	 movq	 xmm0, QWORD PTR [edi+93]
  0005e	66 0f d6 45 d0	 movq	 QWORD PTR _lpRequest$[ebp+8], xmm0
  00063	66 8b 47 65	 mov	 ax, WORD PTR [edi+101]
  00067	66 89 45 d8	 mov	 WORD PTR _lpRequest$[ebp+16], ax
  0006b	8d 45 c8	 lea	 eax, DWORD PTR _lpRequest$[ebp]
  0006e	6a 34		 push	 52			; 00000034H
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN7@CGReqJoinR:
  00076	5f		 pop	 edi
$LN3@CGReqJoinR:

; 502  : }

  00077	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007a	33 cd		 xor	 ecx, ebp
  0007c	5e		 pop	 esi
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
?CGReqJoinReqStatus@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_JOINREQSTATUS@@@Z ENDP ; GuildMatch::CGReqJoinReqStatus
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?DGAnsJoinReqList@GuildMatch@@QAEXPAE@Z
_TEXT	SEGMENT
tv362 = -1312						; size = 4
tv358 = -1308						; size = 4
tv359 = -1304						; size = 4
_lpAnswer$ = -1300					; size = 1296
__$ArrayPad$ = -4					; size = 4
_lpData$ = 8						; size = 4
?DGAnsJoinReqList@GuildMatch@@QAEXPAE@Z PROC		; GuildMatch::DGAnsJoinReqList, COMDAT
; _this$ = ecx

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 05 00
	00		 sub	 esp, 1312		; 00000520H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _lpData$[ebp]

; 457  : 	GUILDMATCH_DGANS_REQUESTLIST_COUNT* lpRecvCount = (GUILDMATCH_DGANS_REQUESTLIST_COUNT*)lpData;
; 458  : 	// ----
; 459  : 	if(		!OBJMAX_RANGE(lpRecvCount->UserIndex) 
; 460  : 		||	gObj[lpRecvCount->UserIndex].Connected != PLAYER_PLAYING )

  00018	8b 77 05	 mov	 esi, DWORD PTR [edi+5]
  0001b	89 b5 e0 fa ff
	ff		 mov	 DWORD PTR tv362[ebp], esi
  00021	85 f6		 test	 esi, esi
  00023	0f 88 e4 00 00
	00		 js	 $LN6@DGAnsJoinR
  00029	33 c0		 xor	 eax, eax
  0002b	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  00031	0f 9e c0	 setle	 al
  00034	85 c0		 test	 eax, eax
  00036	0f 84 d1 00 00
	00		 je	 $LN6@DGAnsJoinR
  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00041	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  00047	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  0004c	0f 85 bb 00 00
	00		 jne	 $LN6@DGAnsJoinR

; 461  : 	{
; 462  : 		return;
; 463  : 	}
; 464  : 	// ----
; 465  : 	GUILDMATCH_GCANS_REQUESTLIST_COUNT lpAnswer = { 0 };

  00052	68 0f 05 00 00	 push	 1295			; 0000050fH
  00057	8d 85 ed fa ff
	ff		 lea	 eax, DWORD PTR _lpAnswer$[ebp+1]
  0005d	6a 00		 push	 0
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _memset

; 466  : 	lpAnswer.h.c			= 0xC2;
; 467  : 	lpAnswer.h.headcode		= 0xED;
; 468  : 	lpAnswer.h.subcode		= 0x07;
; 469  : 	lpAnswer.h.sizeH		= SET_NUMBERH(sizeof(lpAnswer));
; 470  : 	lpAnswer.h.sizeL		= SET_NUMBERL(sizeof(lpAnswer));
; 471  : 	lpAnswer.RequestCount	= lpRecvCount->Count;

  00065	8b 47 09	 mov	 eax, DWORD PTR [edi+9]
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH

; 472  : 	// ----
; 473  : 	GUILDMATCH_DGANS_REQUESTLIST_INFO* lpRecvInfo = (GUILDMATCH_DGANS_REQUESTLIST_INFO*)&lpData[sizeof(GUILDMATCH_DGANS_REQUESTLIST_COUNT)];

  0006b	83 c7 0d	 add	 edi, 13			; 0000000dH
  0006e	66 c7 85 ec fa
	ff ff c2 05	 mov	 WORD PTR _lpAnswer$[ebp], 1474 ; 000005c2H

; 474  : 	// ----
; 475  : 	for( int i = 0; i < lpAnswer.RequestCount; i++ )

  00077	33 d2		 xor	 edx, edx
  00079	66 c7 85 ef fa
	ff ff ed 07	 mov	 WORD PTR _lpAnswer$[ebp+3], 2029 ; 000007edH
  00082	c6 85 ee fa ff
	ff 10		 mov	 BYTE PTR _lpAnswer$[ebp+2], 16 ; 00000010H
  00089	89 85 f4 fa ff
	ff		 mov	 DWORD PTR _lpAnswer$[ebp+8], eax
  0008f	85 c0		 test	 eax, eax
  00091	7e 65		 jle	 SHORT $LN3@DGAnsJoinR
  00093	8d 85 fb fa ff
	ff		 lea	 eax, DWORD PTR _lpAnswer$[ebp+15]
  00099	2b c7		 sub	 eax, edi
  0009b	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  0009e	53		 push	 ebx
  0009f	89 85 e8 fa ff
	ff		 mov	 DWORD PTR tv359[ebp], eax
  000a5	8d 9d f0 fa ff
	ff		 lea	 ebx, DWORD PTR _lpAnswer$[ebp+4]
  000ab	2b df		 sub	 ebx, edi
  000ad	8d 85 fc fa ff
	ff		 lea	 eax, DWORD PTR _lpAnswer$[ebp+16]
  000b3	2b c7		 sub	 eax, edi
  000b5	8b bd e8 fa ff
	ff		 mov	 edi, DWORD PTR tv359[ebp]
  000bb	8b f0		 mov	 esi, eax
  000bd	0f 1f 00	 npad	 3
$LL4@DGAnsJoinR:

; 476  : 	{
; 477  : 		memcpy(lpAnswer.m_RequestList[i].Character, lpRecvInfo[i].Character, 10);

  000c0	66 8b 41 fc	 mov	 ax, WORD PTR [ecx-4]
  000c4	8d 49 10	 lea	 ecx, DWORD PTR [ecx+16]
  000c7	f3 0f 7e 41 e4	 movq	 xmm0, QWORD PTR [ecx-28]
  000cc	42		 inc	 edx
  000cd	66 0f d6 44 0b
	f0		 movq	 QWORD PTR [ebx+ecx-16], xmm0
  000d3	66 89 44 0b f8	 mov	 WORD PTR [ebx+ecx-8], ax

; 478  : 		lpAnswer.m_RequestList[i].Class = lpRecvInfo[i].Class / 16; //wrong...

  000d8	8a 41 ef	 mov	 al, BYTE PTR [ecx-17]
  000db	c0 e8 04	 shr	 al, 4
  000de	88 44 0f f0	 mov	 BYTE PTR [edi+ecx-16], al

; 479  : 		lpAnswer.m_RequestList[i].Level = lpRecvInfo[i].Level;

  000e2	8b 41 f0	 mov	 eax, DWORD PTR [ecx-16]
  000e5	89 44 0e f0	 mov	 DWORD PTR [esi+ecx-16], eax
  000e9	3b 95 f4 fa ff
	ff		 cmp	 edx, DWORD PTR _lpAnswer$[ebp+8]
  000ef	7c cf		 jl	 SHORT $LL4@DGAnsJoinR
  000f1	8b b5 e0 fa ff
	ff		 mov	 esi, DWORD PTR tv362[ebp]
  000f7	5b		 pop	 ebx
$LN3@DGAnsJoinR:

; 480  : 	}
; 481  : 	// ----
; 482  : 	DataSend(lpRecvCount->UserIndex, (LPBYTE)&lpAnswer, sizeof(lpAnswer));

  000f8	68 10 05 00 00	 push	 1296			; 00000510H
  000fd	8d 85 ec fa ff
	ff		 lea	 eax, DWORD PTR _lpAnswer$[ebp]
  00103	50		 push	 eax
  00104	56		 push	 esi
  00105	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@DGAnsJoinR:

; 483  : }

  0010d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00110	5f		 pop	 edi
  00111	33 cd		 xor	 ecx, ebp
  00113	5e		 pop	 esi
  00114	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c2 04 00	 ret	 4
?DGAnsJoinReqList@GuildMatch@@QAEXPAE@Z ENDP		; GuildMatch::DGAnsJoinReqList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?CGReqJoinReqList@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_REQUESTLIST@@@Z
_TEXT	SEGMENT
_lpRequest$ = -24					; size = 19
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
_lpData$ = 12						; size = 4
?CGReqJoinReqList@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_REQUESTLIST@@@Z PROC ; GuildMatch::CGReqJoinReqList, COMDAT
; _this$ = ecx

; 437  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 55 08	 mov	 edx, DWORD PTR _UserIndex$[ebp]

; 438  : 	if(		!OBJMAX_RANGE(UserIndex) 
; 439  : 		||	gObj[UserIndex].Connected != PLAYER_PLAYING )

  00013	85 d2		 test	 edx, edx
  00015	78 5c		 js	 SHORT $LN3@CGReqJoinR
  00017	33 c0		 xor	 eax, eax
  00019	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  0001f	0f 9e c0	 setle	 al
  00022	85 c0		 test	 eax, eax
  00024	74 4d		 je	 SHORT $LN3@CGReqJoinR
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002b	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00031	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  00036	75 3b		 jne	 SHORT $LN3@CGReqJoinR

; 440  : 	{
; 441  : 		return;
; 442  : 	}
; 443  : 	// ----
; 444  : 	GUILDMATCH_GDREQ_REQUESTLIST lpRequest = { 0 };

  00038	0f 57 c0	 xorps	 xmm0, xmm0
  0003b	66 c7 45 f9 00
	00		 mov	 WORD PTR _lpRequest$[ebp+17], 0
  00041	0f 11 45 e9	 movups	 XMMWORD PTR _lpRequest$[ebp+1], xmm0

; 445  : 	lpRequest.h.c			= 0xC1;

  00045	c7 45 e8 c1 13
	ed 07		 mov	 DWORD PTR _lpRequest$[ebp], 132977601 ; 07ed13c1H

; 446  : 	lpRequest.h.headcode	= 0xED;
; 447  : 	lpRequest.h.subcode		= 0x07;
; 448  : 	lpRequest.h.size		= sizeof(GUILDMATCH_GDREQ_REQUESTLIST);
; 449  : 	lpRequest.UserIndex		= UserIndex;

  0004c	89 55 ec	 mov	 DWORD PTR _lpRequest$[ebp+4], edx

; 450  : 	memcpy(lpRequest.GuildMaster, gObj[UserIndex].Name, 10);

  0004f	f3 0f 7e 44 01
	5d		 movq	 xmm0, QWORD PTR [ecx+eax+93]
  00055	66 0f d6 45 f0	 movq	 QWORD PTR _lpRequest$[ebp+8], xmm0
  0005a	66 8b 44 01 65	 mov	 ax, WORD PTR [ecx+eax+101]

; 451  : 	cDBSMng.Send((PCHAR)&lpRequest, sizeof(GUILDMATCH_GDREQ_REQUESTLIST));

  0005f	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00064	66 89 45 f8	 mov	 WORD PTR _lpRequest$[ebp+16], ax
  00068	8d 45 e8	 lea	 eax, DWORD PTR _lpRequest$[ebp]
  0006b	6a 13		 push	 19			; 00000013H
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@CGReqJoinR:

; 452  : }

  00073	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00076	33 cd		 xor	 ecx, ebp
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
?CGReqJoinReqList@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_REQUESTLIST@@@Z ENDP ; GuildMatch::CGReqJoinReqList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?DGAnsJoinReqAnswer@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_REQUESTANSWER@@@Z
_TEXT	SEGMENT
tv308 = -36						; size = 4
_lpData$GSCopy$1$ = -32					; size = 4
_lpAnswer$ = -28					; size = 24
__$ArrayPad$ = -4					; size = 4
_lpData$ = 8						; size = 4
?DGAnsJoinReqAnswer@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_REQUESTANSWER@@@Z PROC ; GuildMatch::DGAnsJoinReqAnswer, COMDAT
; _this$ = ecx

; 368  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _lpData$[ebp]
  00014	89 5d e0	 mov	 DWORD PTR _lpData$GSCopy$1$[ebp], ebx

; 369  : 	if(		!OBJMAX_RANGE(lpData->UserIndex)
; 370  : 		||	gObj[lpData->UserIndex].Connected != PLAYER_PLAYING )

  00017	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0001a	85 c9		 test	 ecx, ecx
  0001c	0f 88 fd 01 00
	00		 js	 $LN6@DGAnsJoinR
  00022	33 c0		 xor	 eax, eax
  00024	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  0002a	0f 9e c0	 setle	 al
  0002d	85 c0		 test	 eax, eax
  0002f	0f 84 ea 01 00
	00		 je	 $LN6@DGAnsJoinR
  00035	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048
  0003b	57		 push	 edi
  0003c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00042	83 7c 38 04 03	 cmp	 DWORD PTR [eax+edi+4], 3
  00047	0f 85 d1 01 00
	00		 jne	 $LN32@DGAnsJoinR

; 371  : 	{
; 372  : 		return;
; 373  : 	}
; 374  : 	// ----
; 375  : 	GUILDMATCH_GCANS_REQUESTANSWER lpAnswer = { 0 };
; 376  : 	lpAnswer.h.c			= 0xC1;
; 377  : 	lpAnswer.h.headcode		= 0xED;
; 378  : 	lpAnswer.h.subcode		= 0x06;
; 379  : 	lpAnswer.h.size			= sizeof(GUILDMATCH_GCANS_REQUESTANSWER);
; 380  : 	lpAnswer.Type			= lpData->Type;

  0004d	8b 53 13	 mov	 edx, DWORD PTR [ebx+19]

; 381  : 	memcpy(lpAnswer.Character, lpData->Character, 10);

  00050	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  00053	89 45 dc	 mov	 DWORD PTR tv308[ebp], eax
  00056	0f 57 c0	 xorps	 xmm0, xmm0
  00059	c7 45 f5 00 00
	00 00		 mov	 DWORD PTR _lpAnswer$[ebp+17], 0
  00060	66 c7 45 f9 00
	00		 mov	 WORD PTR _lpAnswer$[ebp+21], 0
  00066	c6 45 fb 00	 mov	 BYTE PTR _lpAnswer$[ebp+23], 0
  0006a	0f 11 45 e5	 movups	 XMMWORD PTR _lpAnswer$[ebp+1], xmm0
  0006e	c7 45 e4 c1 18
	ed 06		 mov	 DWORD PTR _lpAnswer$[ebp], 116201665 ; 06ed18c1H
  00075	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00079	66 8b 40 08	 mov	 ax, WORD PTR [eax+8]
  0007d	89 55 f4	 mov	 DWORD PTR _lpAnswer$[ebp+16], edx
  00080	66 0f d6 45 e8	 movq	 QWORD PTR _lpAnswer$[ebp+4], xmm0
  00085	66 89 45 f0	 mov	 WORD PTR _lpAnswer$[ebp+12], ax

; 382  : 	// ----
; 383  : 	if( lpData->Type == 0 )

  00089	85 d2		 test	 edx, edx
  0008b	75 2e		 jne	 SHORT $LN7@DGAnsJoinR

; 384  : 	{
; 385  : 		if( lpData->Result == -1 )

  0008d	83 7b 17 ff	 cmp	 DWORD PTR [ebx+23], -1

; 386  : 		{
; 387  : 			lpAnswer.Type = -1;
; 388  : 			DataSend(lpData->UserIndex, (LPBYTE)&lpAnswer, sizeof(GUILDMATCH_GCANS_REQUESTANSWER));

  00091	8d 45 e4	 lea	 eax, DWORD PTR _lpAnswer$[ebp]
  00094	6a 18		 push	 24			; 00000018H
  00096	50		 push	 eax
  00097	51		 push	 ecx
  00098	75 44		 jne	 SHORT $LN9@DGAnsJoinR
  0009a	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _lpAnswer$[ebp+16], -1
  000a1	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a9	5f		 pop	 edi
  000aa	5b		 pop	 ebx

; 432  : 	}
; 433  : }

  000ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ae	33 cd		 xor	 ecx, ebp
  000b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 04 00	 ret	 4
$LN7@DGAnsJoinR:

; 389  : 			return;
; 390  : 		}
; 391  : 		// ----
; 392  : 		DataSend(lpData->UserIndex, (LPBYTE)&lpAnswer, sizeof(GUILDMATCH_GCANS_REQUESTANSWER));
; 393  : 	}
; 394  : 	else if( lpData->Type == 1 )

  000bb	83 fa 01	 cmp	 edx, 1
  000be	0f 85 5a 01 00
	00		 jne	 $LN32@DGAnsJoinR

; 395  : 	{
; 396  : 		if( lpData->Result == -1 )

  000c4	8b 43 17	 mov	 eax, DWORD PTR [ebx+23]
  000c7	83 f8 ff	 cmp	 eax, -1
  000ca	74 04		 je	 SHORT $LN34@DGAnsJoinR

; 397  : 		{
; 398  : 			lpAnswer.Type = -1;
; 399  : 			DataSend(lpData->UserIndex, (LPBYTE)&lpAnswer, sizeof(GUILDMATCH_GCANS_REQUESTANSWER));
; 400  : 			return;
; 401  : 		}
; 402  : 		// ----
; 403  : 		if( lpData->Result == 0 ) //User already in guild

  000cc	85 c0		 test	 eax, eax
  000ce	75 28		 jne	 SHORT $LN12@DGAnsJoinR
$LN34@DGAnsJoinR:

; 404  : 		{
; 405  : 			lpAnswer.Type = -1;
; 406  : 			DataSend(lpData->UserIndex, (LPBYTE)&lpAnswer, sizeof(GUILDMATCH_GCANS_REQUESTANSWER));

  000d0	6a 18		 push	 24			; 00000018H
  000d2	8d 45 e4	 lea	 eax, DWORD PTR _lpAnswer$[ebp]
  000d5	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _lpAnswer$[ebp+16], -1
  000dc	50		 push	 eax
  000dd	51		 push	 ecx
$LN9@DGAnsJoinR:
  000de	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000e3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e6	5f		 pop	 edi
  000e7	5b		 pop	 ebx

; 432  : 	}
; 433  : }

  000e8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000eb	33 cd		 xor	 ecx, ebp
  000ed	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 04 00	 ret	 4
$LN12@DGAnsJoinR:
  000f8	56		 push	 esi

; 407  : 			return;
; 408  : 		}
; 409  : 		// ----
; 410  : 		for( int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++ )

  000f9	bb 04 29 00 00	 mov	 ebx, 10500		; 00002904H
  000fe	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
$LL4@DGAnsJoinR:

; 411  : 		{
; 412  : 			if( gObj[i].Name != NULL && !strcmp(lpData->Character, gObj[i].Name) )

  00103	83 c7 5d	 add	 edi, 93			; 0000005dH
  00106	03 fe		 add	 edi, esi
  00108	0f 84 22 01 00
	00		 je	 $LN31@DGAnsJoinR
  0010e	8b 4d dc	 mov	 ecx, DWORD PTR tv308[ebp]
  00111	8b c7		 mov	 eax, edi
$LL25@DGAnsJoinR:
  00113	8a 11		 mov	 dl, BYTE PTR [ecx]
  00115	3a 10		 cmp	 dl, BYTE PTR [eax]
  00117	75 1a		 jne	 SHORT $LN26@DGAnsJoinR
  00119	84 d2		 test	 dl, dl
  0011b	74 12		 je	 SHORT $LN27@DGAnsJoinR
  0011d	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00120	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00123	75 0e		 jne	 SHORT $LN26@DGAnsJoinR
  00125	83 c1 02	 add	 ecx, 2
  00128	83 c0 02	 add	 eax, 2
  0012b	84 d2		 test	 dl, dl
  0012d	75 e4		 jne	 SHORT $LL25@DGAnsJoinR
$LN27@DGAnsJoinR:
  0012f	33 c0		 xor	 eax, eax
  00131	eb 05		 jmp	 SHORT $LN28@DGAnsJoinR
$LN26@DGAnsJoinR:
  00133	1b c0		 sbb	 eax, eax
  00135	83 c8 01	 or	 eax, 1
$LN28@DGAnsJoinR:
  00138	85 c0		 test	 eax, eax
  0013a	0f 85 f0 00 00
	00		 jne	 $LN31@DGAnsJoinR

; 413  : 			{
; 414  : 				if( gObj[i].Connected == PLAYER_PLAYING )

  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00145	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  0014a	0f 85 e0 00 00
	00		 jne	 $LN31@DGAnsJoinR

; 415  : 				{
; 416  : 					_GUILD_INFO_STRUCT* lpGuild = Guild.AddMember(gObj[lpData->UserIndex].lpGuild->Name, gObj[i].Name, i, -1, 0, gGameServerCode / 20);

  00150	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode
  00157	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0015c	f7 e9		 imul	 ecx
  0015e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00164	c1 fa 03	 sar	 edx, 3
  00167	8b c2		 mov	 eax, edx
  00169	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0016c	03 c2		 add	 eax, edx
  0016e	50		 push	 eax
  0016f	6a 00		 push	 0
  00171	6a ff		 push	 -1
  00173	53		 push	 ebx
  00174	57		 push	 edi
  00175	8b 7d e0	 mov	 edi, DWORD PTR _lpData$GSCopy$1$[ebp]
  00178	69 47 04 40 27
	00 00		 imul	 eax, DWORD PTR [edi+4], 10048
  0017f	8b 84 08 18 06
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1560]
  00186	b9 00 00 00 00	 mov	 ecx, OFFSET ?Guild@@3VCGuildClass@@A ; Guild
  0018b	83 c0 04	 add	 eax, 4
  0018e	50		 push	 eax
  0018f	e8 00 00 00 00	 call	 ?AddMember@CGuildClass@@QAEPAU_GUILD_INFO_STRUCT@@PAD0HHHH@Z ; CGuildClass::AddMember
  00194	8b c8		 mov	 ecx, eax

; 417  : 					// ----
; 418  : 					if( lpGuild != NULL )

  00196	85 c9		 test	 ecx, ecx
  00198	0f 84 95 00 00
	00		 je	 $LN2@DGAnsJoinR

; 419  : 					{
; 420  : 						gObj[i].lpGuild = lpGuild;

  0019e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001a3	69 d3 40 27 00
	00		 imul	 edx, ebx, 10048

; 421  : 						gObj[i].GuildStatus = 0;
; 422  : 						gObj[i].GuildNumber = lpGuild->Number;
; 423  : 						gObj[i].iGuildUnionTimeStamp = 0;
; 424  : 						GCGuildViewportNowPaint(i, gObj[lpData->UserIndex].lpGuild->Name, gObj[i].lpGuild->Mark, FALSE);

  001a9	6a 00		 push	 0
  001ab	89 8c 02 18 06
	00 00		 mov	 DWORD PTR [edx+eax+1560], ecx
  001b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001b7	c7 84 02 28 06
	00 00 00 00 00
	00		 mov	 DWORD PTR [edx+eax+1576], 0
  001c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001c7	8b 09		 mov	 ecx, DWORD PTR [ecx]
  001c9	89 8c 02 14 06
	00 00		 mov	 DWORD PTR [edx+eax+1556], ecx
  001d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001d5	c7 84 02 2c 06
	00 00 00 00 00
	00		 mov	 DWORD PTR [edx+eax+1580], 0
  001e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001e6	8b 84 0a 18 06
	00 00		 mov	 eax, DWORD PTR [edx+ecx+1560]
  001ed	83 c0 0d	 add	 eax, 13			; 0000000dH
  001f0	50		 push	 eax
  001f1	69 47 04 40 27
	00 00		 imul	 eax, DWORD PTR [edi+4], 10048
  001f8	8b 84 08 18 06
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1560]
  001ff	83 c0 04	 add	 eax, 4
  00202	50		 push	 eax
  00203	53		 push	 ebx
  00204	e8 00 00 00 00	 call	 ?GCGuildViewportNowPaint@@YAXHPADPAEH@Z ; GCGuildViewportNowPaint
  00209	83 c4 10	 add	 esp, 16			; 00000010H
$LN24@DGAnsJoinR:

; 425  : 						break;
; 426  : 					}
; 427  : 				}
; 428  : 			}
; 429  : 		}
; 430  : 		// ----
; 431  : 		DataSend(lpData->UserIndex, (LPBYTE)&lpAnswer, sizeof(GUILDMATCH_GCANS_REQUESTANSWER));

  0020c	6a 18		 push	 24			; 00000018H
  0020e	8d 45 e4	 lea	 eax, DWORD PTR _lpAnswer$[ebp]
  00211	50		 push	 eax
  00212	ff 77 04	 push	 DWORD PTR [edi+4]
  00215	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0021a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021d	5e		 pop	 esi
$LN32@DGAnsJoinR:
  0021e	5f		 pop	 edi
$LN6@DGAnsJoinR:

; 432  : 	}
; 433  : }

  0021f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00222	33 cd		 xor	 ecx, ebp
  00224	5b		 pop	 ebx
  00225	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022a	8b e5		 mov	 esp, ebp
  0022c	5d		 pop	 ebp
  0022d	c2 04 00	 ret	 4
$LN31@DGAnsJoinR:
  00230	8b 7d e0	 mov	 edi, DWORD PTR _lpData$GSCopy$1$[ebp]
$LN2@DGAnsJoinR:

; 407  : 			return;
; 408  : 		}
; 409  : 		// ----
; 410  : 		for( int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++ )

  00233	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00239	43		 inc	 ebx
  0023a	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  00240	7d ca		 jge	 SHORT $LN24@DGAnsJoinR
  00242	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00248	e9 b6 fe ff ff	 jmp	 $LL4@DGAnsJoinR
?DGAnsJoinReqAnswer@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_REQUESTANSWER@@@Z ENDP ; GuildMatch::DGAnsJoinReqAnswer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?CGReqJoinReqAnswer@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_REQUESTANSWER@@@Z
_TEXT	SEGMENT
_lpRequest$ = -36					; size = 32
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
_lpData$ = 12						; size = 4
?CGReqJoinReqAnswer@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_REQUESTANSWER@@@Z PROC ; GuildMatch::CGReqJoinReqAnswer, COMDAT
; _this$ = ecx

; 347  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 55 08	 mov	 edx, DWORD PTR _UserIndex$[ebp]
  00013	56		 push	 esi
  00014	8b 75 0c	 mov	 esi, DWORD PTR _lpData$[ebp]

; 348  : 	if(		!OBJMAX_RANGE(UserIndex) 
; 349  : 		||	gObj[UserIndex].Connected != PLAYER_PLAYING )

  00017	85 d2		 test	 edx, edx
  00019	0f 88 82 00 00
	00		 js	 $LN3@CGReqJoinR
  0001f	33 c0		 xor	 eax, eax
  00021	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00027	0f 9e c0	 setle	 al
  0002a	85 c0		 test	 eax, eax
  0002c	74 73		 je	 SHORT $LN3@CGReqJoinR
  0002e	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00034	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003a	83 79 04 03	 cmp	 DWORD PTR [ecx+4], 3
  0003e	75 61		 jne	 SHORT $LN3@CGReqJoinR

; 350  : 	{
; 351  : 		return;
; 352  : 	}
; 353  : 	// ----
; 354  : 	GUILDMATCH_GDREQ_REQUESTANSWER lpRequest = { 0 };
; 355  : 	lpRequest.h.c			= 0xC1;
; 356  : 	lpRequest.h.headcode	= 0xED;
; 357  : 	lpRequest.h.subcode		= 0x06;
; 358  : 	lpRequest.h.size		= sizeof(GUILDMATCH_GDREQ_REQUESTANSWER);
; 359  : 	lpRequest.UserIndex		= UserIndex;
; 360  : 	lpRequest.Type			= lpData->Result;

  00040	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00043	0f 57 c0	 xorps	 xmm0, xmm0
  00046	0f 11 45 dd	 movups	 XMMWORD PTR _lpRequest$[ebp+1], xmm0
  0004a	c7 45 f5 00 00
	00 00		 mov	 DWORD PTR _lpRequest$[ebp+25], 0
  00051	66 0f d6 45 ed	 movq	 QWORD PTR _lpRequest$[ebp+17], xmm0

; 361  : 	memcpy(lpRequest.Character, lpData->Character, 10);

  00056	f3 0f 7e 46 08	 movq	 xmm0, QWORD PTR [esi+8]
  0005b	66 c7 45 f9 00
	00		 mov	 WORD PTR _lpRequest$[ebp+29], 0
  00061	c6 45 fb 00	 mov	 BYTE PTR _lpRequest$[ebp+31], 0
  00065	89 45 f8	 mov	 DWORD PTR _lpRequest$[ebp+28], eax
  00068	66 8b 46 10	 mov	 ax, WORD PTR [esi+16]
  0006c	66 89 45 ec	 mov	 WORD PTR _lpRequest$[ebp+16], ax
  00070	c7 45 dc c1 20
	ed 06		 mov	 DWORD PTR _lpRequest$[ebp], 116203713 ; 06ed20c1H
  00077	89 55 e0	 mov	 DWORD PTR _lpRequest$[ebp+4], edx
  0007a	66 0f d6 45 e4	 movq	 QWORD PTR _lpRequest$[ebp+8], xmm0

; 362  : 	memcpy(lpRequest.Guild, gObj[UserIndex].lpGuild->Name, 8);

  0007f	8b 89 18 06 00
	00		 mov	 ecx, DWORD PTR [ecx+1560]

; 363  : 	cDBSMng.Send((PCHAR)&lpRequest, sizeof(GUILDMATCH_GDREQ_REQUESTANSWER));

  00085	6a 20		 push	 32			; 00000020H
  00087	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0008a	89 45 ef	 mov	 DWORD PTR _lpRequest$[ebp+19], eax
  0008d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00090	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00095	89 45 f3	 mov	 DWORD PTR _lpRequest$[ebp+23], eax
  00098	8d 45 dc	 lea	 eax, DWORD PTR _lpRequest$[ebp]
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@CGReqJoinR:

; 364  : }

  000a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a4	33 cd		 xor	 ecx, ebp
  000a6	5e		 pop	 esi
  000a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 08 00	 ret	 8
?CGReqJoinReqAnswer@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_REQUESTANSWER@@@Z ENDP ; GuildMatch::CGReqJoinReqAnswer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?DGAnsJoinReqDelete@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_OFFERDELETE@@@Z
_TEXT	SEGMENT
_lpAnswer$ = -8						; size = 8
_lpData$ = 8						; size = 4
?DGAnsJoinReqDelete@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_OFFERDELETE@@@Z PROC ; GuildMatch::DGAnsJoinReqDelete, COMDAT
; _this$ = ecx

; 326  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 327  : 	if(		!OBJMAX_RANGE(lpData->UserIndex) 
; 328  : 		||	gObj[lpData->UserIndex].Connected != PLAYER_PLAYING )

  00007	8b 75 08	 mov	 esi, DWORD PTR _lpData$[ebp]
  0000a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000d	85 d2		 test	 edx, edx
  0000f	78 49		 js	 SHORT $LN3@DGAnsJoinR
  00011	33 c0		 xor	 eax, eax
  00013	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00019	0f 9e c0	 setle	 al
  0001c	85 c0		 test	 eax, eax
  0001e	74 3a		 je	 SHORT $LN3@DGAnsJoinR
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00025	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  0002b	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  00030	75 28		 jne	 SHORT $LN3@DGAnsJoinR

; 329  : 	{
; 330  : 		return;
; 331  : 	}
; 332  : 	// ----
; 333  : 	GUILDMATCH_GCANS_JOINREQDELETE lpAnswer = { 0 };

  00032	33 c0		 xor	 eax, eax

; 334  : 	lpAnswer.h.c			= 0xC1;
; 335  : 	lpAnswer.h.headcode		= 0xED;
; 336  : 	lpAnswer.h.subcode		= 0x05;
; 337  : 	lpAnswer.h.size			= sizeof(GUILDMATCH_GCANS_JOINREQDELETE);
; 338  : 	// ----
; 339  : 	if( lpData->Result == 1 )

  00034	83 7e 08 01	 cmp	 DWORD PTR [esi+8], 1
  00038	89 45 f9	 mov	 DWORD PTR _lpAnswer$[ebp+1], eax
  0003b	66 89 45 fd	 mov	 WORD PTR _lpAnswer$[ebp+5], ax
  0003f	88 45 ff	 mov	 BYTE PTR _lpAnswer$[ebp+7], al
  00042	c7 45 f8 c1 08
	ed 05		 mov	 DWORD PTR _lpAnswer$[ebp], 99420353 ; 05ed08c1H
  00049	75 0f		 jne	 SHORT $LN3@DGAnsJoinR

; 340  : 	{
; 341  : 		DataSend(lpData->UserIndex, (LPBYTE)&lpAnswer, sizeof(GUILDMATCH_GCANS_JOINREQDELETE));

  0004b	6a 08		 push	 8
  0004d	8d 45 f8	 lea	 eax, DWORD PTR _lpAnswer$[ebp]
  00050	50		 push	 eax
  00051	52		 push	 edx
  00052	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@DGAnsJoinR:
  0005a	5e		 pop	 esi

; 342  : 	}
; 343  : }

  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
?DGAnsJoinReqDelete@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_OFFERDELETE@@@Z ENDP ; GuildMatch::DGAnsJoinReqDelete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?CGReqJoinReqDelete@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_JOINREQDELETE@@@Z
_TEXT	SEGMENT
_lpRequest$ = -56					; size = 52
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
_lpData$ = 12						; size = 4
?CGReqJoinReqDelete@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_JOINREQDELETE@@@Z PROC ; GuildMatch::CGReqJoinReqDelete, COMDAT
; _this$ = ecx

; 307  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _UserIndex$[ebp]

; 308  : 	if(		!OBJMAX_RANGE(UserIndex) 
; 309  : 		||	gObj[UserIndex].Connected != PLAYER_PLAYING )

  00014	85 f6		 test	 esi, esi
  00016	78 5f		 js	 SHORT $LN3@CGReqJoinR
  00018	33 c0		 xor	 eax, eax
  0001a	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  00020	0f 9e c0	 setle	 al
  00023	85 c0		 test	 eax, eax
  00025	74 50		 je	 SHORT $LN3@CGReqJoinR
  00027	57		 push	 edi
  00028	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  0002e	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00034	83 7f 04 03	 cmp	 DWORD PTR [edi+4], 3
  00038	75 3c		 jne	 SHORT $LN7@CGReqJoinR

; 310  : 	{
; 311  : 		return;
; 312  : 	}
; 313  : 	// ----
; 314  : 	GUILDMATCH_GDREQ_JOINREQSTATUS lpRequest = { 0 };

  0003a	6a 33		 push	 51			; 00000033H
  0003c	8d 45 c9	 lea	 eax, DWORD PTR _lpRequest$[ebp+1]
  0003f	6a 00		 push	 0
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _memset

; 315  : 	lpRequest.h.c			= 0xC1;

  00047	c7 45 c8 c1 34
	ed 05		 mov	 DWORD PTR _lpRequest$[ebp], 99431617 ; 05ed34c1H
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 316  : 	lpRequest.h.headcode	= 0xED;
; 317  : 	lpRequest.h.subcode		= 0x05;
; 318  : 	lpRequest.h.size		= sizeof(GUILDMATCH_GDREQ_JOINREQSTATUS);
; 319  : 	lpRequest.UserIndex		= UserIndex;

  00051	89 75 cc	 mov	 DWORD PTR _lpRequest$[ebp+4], esi

; 320  : 	memcpy(lpRequest.Sender, gObj[UserIndex].Name, 10);
; 321  : 	cDBSMng.Send((PCHAR)&lpRequest, sizeof(GUILDMATCH_GDREQ_JOINREQSTATUS));

  00054	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00059	f3 0f 7e 47 5d	 movq	 xmm0, QWORD PTR [edi+93]
  0005e	66 0f d6 45 d0	 movq	 QWORD PTR _lpRequest$[ebp+8], xmm0
  00063	66 8b 47 65	 mov	 ax, WORD PTR [edi+101]
  00067	66 89 45 d8	 mov	 WORD PTR _lpRequest$[ebp+16], ax
  0006b	8d 45 c8	 lea	 eax, DWORD PTR _lpRequest$[ebp]
  0006e	6a 34		 push	 52			; 00000034H
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN7@CGReqJoinR:
  00076	5f		 pop	 edi
$LN3@CGReqJoinR:

; 322  : }

  00077	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007a	33 cd		 xor	 ecx, ebp
  0007c	5e		 pop	 esi
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
?CGReqJoinReqDelete@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_JOINREQDELETE@@@Z ENDP ; GuildMatch::CGReqJoinReqDelete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?DGAnsJoinReq@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_JOINREQ@@@Z
_TEXT	SEGMENT
_lpNotification$1 = -16					; size = 8
_lpAnswer$ = -8						; size = 8
_lpData$ = 8						; size = 4
?DGAnsJoinReq@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_JOINREQ@@@Z PROC ; GuildMatch::DGAnsJoinReq, COMDAT
; _this$ = ecx

; 268  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 269  : 	if(		!OBJMAX_RANGE(lpData->UserIndex) 
; 270  : 		||	gObj[lpData->UserIndex].Connected != PLAYER_PLAYING )

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _lpData$[ebp]
  0000a	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0000d	85 d2		 test	 edx, edx
  0000f	0f 88 e6 00 00
	00		 js	 $LN18@DGAnsJoinR
  00015	33 c0		 xor	 eax, eax
  00017	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  0001d	0f 9e c0	 setle	 al
  00020	85 c0		 test	 eax, eax
  00022	0f 84 d3 00 00
	00		 je	 $LN18@DGAnsJoinR
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002d	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00033	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  00038	0f 85 bd 00 00
	00		 jne	 $LN18@DGAnsJoinR

; 271  : 	{
; 272  : 		return;
; 273  : 	}
; 274  : 	// ----
; 275  : 	GUILDMATCH_GCANS_JOINREQ lpAnswer = { 0 };

  0003e	33 c0		 xor	 eax, eax
  00040	89 45 f9	 mov	 DWORD PTR _lpAnswer$[ebp+1], eax

; 276  : 	lpAnswer.h.c		= 0xC1;
; 277  : 	lpAnswer.h.headcode	= 0xED;
; 278  : 	lpAnswer.h.subcode	= 0x04;
; 279  : 	lpAnswer.h.size		= sizeof(GUILDMATCH_GCANS_JOINREQ);
; 280  : 	lpAnswer.Result		= lpData->Result;

  00043	8b 43 13	 mov	 eax, DWORD PTR [ebx+19]
  00046	89 45 fc	 mov	 DWORD PTR _lpAnswer$[ebp+4], eax

; 281  : 	DataSend(lpData->UserIndex, (LPBYTE)&lpAnswer, sizeof(GUILDMATCH_GCANS_JOINREQ));

  00049	8d 45 f8	 lea	 eax, DWORD PTR _lpAnswer$[ebp]
  0004c	6a 08		 push	 8
  0004e	50		 push	 eax
  0004f	52		 push	 edx
  00050	c7 45 f8 c1 08
	ed 04		 mov	 DWORD PTR _lpAnswer$[ebp], 82643137 ; 04ed08c1H
  00057	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 282  : 	// ----
; 283  : 	if( lpData->Result == 0 )

  0005f	83 7b 13 00	 cmp	 DWORD PTR [ebx+19], 0
  00063	0f 85 92 00 00
	00		 jne	 $LN18@DGAnsJoinR

; 284  : 	{
; 285  : 		for( int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++ )

  00069	56		 push	 esi
  0006a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00070	57		 push	 edi
  00071	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  00076	81 c6 5d dd 49
	06		 add	 esi, 105504093		; 0649dd5dH
  0007c	0f 1f 40 00	 npad	 4
$LL4@DGAnsJoinR:

; 286  : 		{
; 287  : 			if( gObj[i].Name != NULL && !strcmp(lpData->Recipient, gObj[i].Name) )

  00080	85 f6		 test	 esi, esi
  00082	74 3b		 je	 SHORT $LN2@DGAnsJoinR
  00084	8b c6		 mov	 eax, esi
  00086	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00089	0f 1f 80 00 00
	00 00		 npad	 7
$LL19@DGAnsJoinR:
  00090	8a 11		 mov	 dl, BYTE PTR [ecx]
  00092	3a 10		 cmp	 dl, BYTE PTR [eax]
  00094	75 1a		 jne	 SHORT $LN20@DGAnsJoinR
  00096	84 d2		 test	 dl, dl
  00098	74 12		 je	 SHORT $LN21@DGAnsJoinR
  0009a	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0009d	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  000a0	75 0e		 jne	 SHORT $LN20@DGAnsJoinR
  000a2	83 c1 02	 add	 ecx, 2
  000a5	83 c0 02	 add	 eax, 2
  000a8	84 d2		 test	 dl, dl
  000aa	75 e4		 jne	 SHORT $LL19@DGAnsJoinR
$LN21@DGAnsJoinR:
  000ac	33 c0		 xor	 eax, eax
  000ae	eb 05		 jmp	 SHORT $LN22@DGAnsJoinR
$LN20@DGAnsJoinR:
  000b0	1b c0		 sbb	 eax, eax
  000b2	83 c8 01	 or	 eax, 1
$LN22@DGAnsJoinR:
  000b5	85 c0		 test	 eax, eax
  000b7	75 06		 jne	 SHORT $LN2@DGAnsJoinR

; 288  : 			{
; 289  : 				if( gObj[i].Connected == PLAYER_PLAYING )

  000b9	83 7e a7 03	 cmp	 DWORD PTR [esi-89], 3
  000bd	74 18		 je	 SHORT $LN14@DGAnsJoinR
$LN2@DGAnsJoinR:

; 284  : 	{
; 285  : 		for( int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++ )

  000bf	47		 inc	 edi
  000c0	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  000c6	81 ff ec 2c 00
	00		 cmp	 edi, 11500		; 00002cecH
  000cc	7c b2		 jl	 SHORT $LL4@DGAnsJoinR
  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
  000d0	5b		 pop	 ebx

; 297  : 					break;
; 298  : 				}
; 299  : 			}
; 300  : 		}
; 301  : 	}
; 302  : 	
; 303  : }

  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 04 00	 ret	 4
$LN14@DGAnsJoinR:

; 290  : 				{
; 291  : 					GUILDMATCH_GCSET_JOINNOTIFICATION lpNotification = { 0 };

  000d7	33 c0		 xor	 eax, eax
  000d9	89 45 f1	 mov	 DWORD PTR _lpNotification$1[ebp+1], eax
  000dc	66 89 45 f5	 mov	 WORD PTR _lpNotification$1[ebp+5], ax
  000e0	88 45 f7	 mov	 BYTE PTR _lpNotification$1[ebp+7], al

; 292  : 					lpNotification.h.c			= 0xC1;
; 293  : 					lpNotification.h.headcode	= 0xED;
; 294  : 					lpNotification.h.subcode	= 0x10;
; 295  : 					lpNotification.h.size		= sizeof(GUILDMATCH_GCSET_JOINNOTIFICATION);
; 296  : 					DataSend(i, (LPBYTE)&lpNotification, sizeof(GUILDMATCH_GCSET_JOINNOTIFICATION));

  000e3	8d 45 f0	 lea	 eax, DWORD PTR _lpNotification$1[ebp]
  000e6	6a 08		 push	 8
  000e8	50		 push	 eax
  000e9	57		 push	 edi
  000ea	c7 45 f0 c1 08
	ed 10		 mov	 DWORD PTR _lpNotification$1[ebp], 283969729 ; 10ed08c1H
  000f1	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
$LN18@DGAnsJoinR:
  000fb	5b		 pop	 ebx

; 297  : 					break;
; 298  : 				}
; 299  : 			}
; 300  : 		}
; 301  : 	}
; 302  : 	
; 303  : }

  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 04 00	 ret	 4
?DGAnsJoinReq@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_JOINREQ@@@Z ENDP ; GuildMatch::DGAnsJoinReq
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?CGReqJoinReq@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_JOINREQ@@@Z
_TEXT	SEGMENT
_lpAnswer$1 = -68					; size = 8
_lpRequest$ = -60					; size = 56
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
_lpData$ = 12						; size = 4
?CGReqJoinReq@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_JOINREQ@@@Z PROC ; GuildMatch::CGReqJoinReq, COMDAT
; _this$ = ecx

; 236  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _lpData$[ebp]
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _UserIndex$[ebp]

; 237  : 	if(		!OBJMAX_RANGE(UserIndex) 
; 238  : 		||	gObj[UserIndex].Connected != PLAYER_PLAYING )

  00018	85 f6		 test	 esi, esi
  0001a	0f 88 ab 00 00
	00		 js	 $LN3@CGReqJoinR
  00020	33 c0		 xor	 eax, eax
  00022	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  00028	0f 9e c0	 setle	 al
  0002b	85 c0		 test	 eax, eax
  0002d	0f 84 98 00 00
	00		 je	 $LN3@CGReqJoinR
  00033	57		 push	 edi
  00034	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  0003a	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00040	83 7f 04 03	 cmp	 DWORD PTR [edi+4], 3
  00044	0f 85 80 00 00
	00		 jne	 $LN8@CGReqJoinR

; 239  : 	{
; 240  : 		return;
; 241  : 	}
; 242  : 	// ----
; 243  : 	if( gObj[UserIndex].GuildNumber > 0 )

  0004a	83 bf 14 06 00
	00 00		 cmp	 DWORD PTR [edi+1556], 0
  00051	7e 35		 jle	 SHORT $LN4@CGReqJoinR

; 244  : 	{
; 245  : 		GUILDMATCH_GCANS_JOINREQ lpAnswer = { 0 };

  00053	33 c0		 xor	 eax, eax
  00055	89 45 bd	 mov	 DWORD PTR _lpAnswer$1[ebp+1], eax

; 246  : 		lpAnswer.h.c		= 0xC1;
; 247  : 		lpAnswer.h.headcode	= 0xED;
; 248  : 		lpAnswer.h.subcode	= 0x04;
; 249  : 		lpAnswer.h.size		= sizeof(GUILDMATCH_GCANS_JOINREQ);
; 250  : 		lpAnswer.Result		= -3;
; 251  : 		DataSend(UserIndex, (LPBYTE)&lpAnswer, sizeof(GUILDMATCH_GCANS_JOINREQ));

  00058	8d 45 bc	 lea	 eax, DWORD PTR _lpAnswer$1[ebp]
  0005b	6a 08		 push	 8
  0005d	50		 push	 eax
  0005e	56		 push	 esi
  0005f	c7 45 bc c1 08
	ed 04		 mov	 DWORD PTR _lpAnswer$1[ebp], 82643137 ; 04ed08c1H
  00066	c7 45 c0 fd ff
	ff ff		 mov	 DWORD PTR _lpAnswer$1[ebp+4], -3 ; fffffffdH
  0006d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx

; 264  : }

  00078	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007b	33 cd		 xor	 ecx, ebp
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
$LN4@CGReqJoinR:

; 252  : 		return;
; 253  : 	}
; 254  : 	// ----
; 255  : 	GUILDMATCH_GDREQ_JOINREQ lpRequest = { 0 };

  00088	6a 37		 push	 55			; 00000037H
  0008a	8d 45 c5	 lea	 eax, DWORD PTR _lpRequest$[ebp+1]
  0008d	6a 00		 push	 0
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 _memset

; 256  : 	lpRequest.h.c			= 0xC1;

  00095	c7 45 c4 c1 38
	ed 04		 mov	 DWORD PTR _lpRequest$[ebp], 82655425 ; 04ed38c1H
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 257  : 	lpRequest.h.headcode	= 0xED;
; 258  : 	lpRequest.h.subcode		= 0x04;
; 259  : 	lpRequest.h.size		= sizeof(GUILDMATCH_GDREQ_JOINREQ);
; 260  : 	lpRequest.UserIndex		= UserIndex;

  0009f	89 75 c8	 mov	 DWORD PTR _lpRequest$[ebp+4], esi

; 261  : 	memcpy(lpRequest.Sender, gObj[UserIndex].Name, 10);
; 262  : 	lpRequest.OfferNumber	= lpData->OfferNumber;
; 263  : 	cDBSMng.Send((PCHAR)&lpRequest, sizeof(GUILDMATCH_GDREQ_JOINREQ));

  000a2	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  000a7	f3 0f 7e 47 5d	 movq	 xmm0, QWORD PTR [edi+93]
  000ac	66 0f d6 45 cc	 movq	 QWORD PTR _lpRequest$[ebp+8], xmm0
  000b1	66 8b 47 65	 mov	 ax, WORD PTR [edi+101]
  000b5	66 89 45 d4	 mov	 WORD PTR _lpRequest$[ebp+16], ax
  000b9	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000bc	89 45 f8	 mov	 DWORD PTR _lpRequest$[ebp+52], eax
  000bf	8d 45 c4	 lea	 eax, DWORD PTR _lpRequest$[ebp]
  000c2	6a 38		 push	 56			; 00000038H
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN8@CGReqJoinR:
  000ca	5f		 pop	 edi
$LN3@CGReqJoinR:

; 264  : }

  000cb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ce	5e		 pop	 esi
  000cf	33 cd		 xor	 ecx, ebp
  000d1	5b		 pop	 ebx
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 08 00	 ret	 8
?CGReqJoinReq@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_JOINREQ@@@Z ENDP ; GuildMatch::CGReqJoinReq
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?DGAnsOfferDelete@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_OFFERDELETE@@@Z
_TEXT	SEGMENT
_lpAnswer$ = -8						; size = 8
_lpData$ = 8						; size = 4
?DGAnsOfferDelete@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_OFFERDELETE@@@Z PROC ; GuildMatch::DGAnsOfferDelete, COMDAT
; _this$ = ecx

; 200  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 201  : 	if(		!OBJMAX_RANGE(lpData->UserIndex) 
; 202  : 		||	gObj[lpData->UserIndex].Connected != PLAYER_PLAYING )

  00007	8b 75 08	 mov	 esi, DWORD PTR _lpData$[ebp]
  0000a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000d	85 d2		 test	 edx, edx
  0000f	78 61		 js	 SHORT $LN3@DGAnsOffer
  00011	33 c0		 xor	 eax, eax
  00013	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00019	0f 9e c0	 setle	 al
  0001c	85 c0		 test	 eax, eax
  0001e	74 52		 je	 SHORT $LN3@DGAnsOffer
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00025	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  0002b	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  00030	75 40		 jne	 SHORT $LN3@DGAnsOffer

; 203  : 	{
; 204  : 		return;
; 205  : 	}
; 206  : 	// ----
; 207  : 	GUILDMATCH_GDREQ_OFFERLIST lpRequest = { 0 };
; 208  : 	lpRequest.h.c			= 0xC1;
; 209  : 	lpRequest.h.headcode	= 0xED;
; 210  : 	lpRequest.h.subcode		= 0x00;
; 211  : 	lpRequest.h.size		= sizeof(GUILDMATCH_GDREQ_OFFERLIST);
; 212  : 	lpRequest.CurrentPage	= 1;
; 213  : 	lpRequest.UserIndex		= lpData->UserIndex;
; 214  : 	// ----
; 215  : 	GUILDMATCH_CGANS_OFFERDELETE lpAnswer = { 0 };
; 216  : 	lpAnswer.h.c		= 0xC1;
; 217  : 	lpAnswer.h.headcode	= 0xED;
; 218  : 	lpAnswer.h.subcode	= 0x03;
; 219  : 	lpAnswer.h.size		= sizeof(GUILDMATCH_CGANS_OFFERDELETE);
; 220  : 	// ----
; 221  : 	if( lpData->Result == 0 )

  00032	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00035	33 c0		 xor	 eax, eax
  00037	89 45 f9	 mov	 DWORD PTR _lpAnswer$[ebp+1], eax
  0003a	66 89 45 fd	 mov	 WORD PTR _lpAnswer$[ebp+5], ax
  0003e	88 45 ff	 mov	 BYTE PTR _lpAnswer$[ebp+7], al
  00041	c7 45 f8 c1 08
	ed 03		 mov	 DWORD PTR _lpAnswer$[ebp], 65865921 ; 03ed08c1H
  00048	85 c9		 test	 ecx, ecx
  0004a	75 09		 jne	 SHORT $LN4@DGAnsOffer

; 222  : 	{
; 223  : 		lpAnswer.Result = -3;

  0004c	c7 45 fc fd ff
	ff ff		 mov	 DWORD PTR _lpAnswer$[ebp+4], -3 ; fffffffdH
  00053	eb 0e		 jmp	 SHORT $LN6@DGAnsOffer
$LN4@DGAnsOffer:

; 224  : 	}
; 225  : 	else if( lpData->Result == 1 )

  00055	8b 45 fc	 mov	 eax, DWORD PTR _lpAnswer$[ebp+4]
  00058	33 f6		 xor	 esi, esi
  0005a	83 f9 01	 cmp	 ecx, 1
  0005d	0f 44 c6	 cmove	 eax, esi
  00060	89 45 fc	 mov	 DWORD PTR _lpAnswer$[ebp+4], eax
$LN6@DGAnsOffer:

; 226  : 	{
; 227  : 		lpAnswer.Result = 0;
; 228  : 		//cDBSMng.Send((PCHAR)&lpRequest, sizeof(lpRequest));
; 229  : 	}
; 230  : 	// ----
; 231  : 	DataSend(lpData->UserIndex, (LPBYTE)&lpAnswer, sizeof(GUILDMATCH_CGANS_OFFERDELETE));

  00063	6a 08		 push	 8
  00065	8d 45 f8	 lea	 eax, DWORD PTR _lpAnswer$[ebp]
  00068	50		 push	 eax
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@DGAnsOffer:
  00072	5e		 pop	 esi

; 232  : }

  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
?DGAnsOfferDelete@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_OFFERDELETE@@@Z ENDP ; GuildMatch::DGAnsOfferDelete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?CGReqOfferDelete@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_OFFERDELETE@@@Z
_TEXT	SEGMENT
_lpRequest$ = -24					; size = 19
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
_lpData$ = 12						; size = 4
?CGReqOfferDelete@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_OFFERDELETE@@@Z PROC ; GuildMatch::CGReqOfferDelete, COMDAT
; _this$ = ecx

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 55 08	 mov	 edx, DWORD PTR _UserIndex$[ebp]

; 177  : 	if(		!OBJMAX_RANGE(UserIndex) 
; 178  : 		||	gObj[UserIndex].Connected != PLAYER_PLAYING )

  00013	85 d2		 test	 edx, edx
  00015	78 69		 js	 SHORT $LN3@CGReqOffer
  00017	33 c0		 xor	 eax, eax
  00019	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  0001f	0f 9e c0	 setle	 al
  00022	85 c0		 test	 eax, eax
  00024	74 5a		 je	 SHORT $LN3@CGReqOffer
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002b	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00031	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  00036	75 48		 jne	 SHORT $LN3@CGReqOffer

; 179  : 	{
; 180  : 		return;
; 181  : 	}
; 182  : 	// ----
; 183  : 	if( gObj[UserIndex].GuildStatus != G_MASTER )

  00038	81 bc 01 28 06
	00 00 80 00 00
	00		 cmp	 DWORD PTR [ecx+eax+1576], 128 ; 00000080H
  00043	75 3b		 jne	 SHORT $LN3@CGReqOffer

; 184  : 	{
; 185  : 		return;
; 186  : 	}
; 187  : 	// ----
; 188  : 	GUILDMATCH_GDREQ_OFFERDELETE lpRequest = { 0 };

  00045	0f 57 c0	 xorps	 xmm0, xmm0
  00048	66 c7 45 f9 00
	00		 mov	 WORD PTR _lpRequest$[ebp+17], 0
  0004e	0f 11 45 e9	 movups	 XMMWORD PTR _lpRequest$[ebp+1], xmm0

; 189  : 	lpRequest.h.c			= 0xC1;

  00052	c7 45 e8 c1 13
	ed 03		 mov	 DWORD PTR _lpRequest$[ebp], 65868737 ; 03ed13c1H

; 190  : 	lpRequest.h.headcode	= 0xED;
; 191  : 	lpRequest.h.subcode		= 0x03;
; 192  : 	lpRequest.h.size		= sizeof(GUILDMATCH_GDREQ_OFFERDELETE);
; 193  : 	memcpy(lpRequest.GuildMaster, gObj[UserIndex].Name, 10);

  00059	f3 0f 7e 44 01
	5d		 movq	 xmm0, QWORD PTR [ecx+eax+93]
  0005f	66 0f d6 45 ec	 movq	 QWORD PTR _lpRequest$[ebp+4], xmm0
  00064	66 8b 44 01 65	 mov	 ax, WORD PTR [ecx+eax+101]

; 194  : 	lpRequest.UserIndex		= UserIndex;
; 195  : 	cDBSMng.Send((PCHAR)&lpRequest, sizeof(GUILDMATCH_GDREQ_OFFERDELETE));

  00069	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0006e	66 89 45 f4	 mov	 WORD PTR _lpRequest$[ebp+12], ax
  00072	8d 45 e8	 lea	 eax, DWORD PTR _lpRequest$[ebp]
  00075	6a 13		 push	 19			; 00000013H
  00077	50		 push	 eax
  00078	89 55 f7	 mov	 DWORD PTR _lpRequest$[ebp+15], edx
  0007b	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@CGReqOffer:

; 196  : }

  00080	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00083	33 cd		 xor	 ecx, ebp
  00085	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
?CGReqOfferDelete@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_OFFERDELETE@@@Z ENDP ; GuildMatch::CGReqOfferDelete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?DGAnsOfferCreate@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_OFFERCREATE@@@Z
_TEXT	SEGMENT
_lpAnswer$ = -24					; size = 8
_lpRequest$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_lpData$ = 8						; size = 4
?DGAnsOfferCreate@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_OFFERCREATE@@@Z PROC ; GuildMatch::DGAnsOfferCreate, COMDAT
; _this$ = ecx

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpData$[ebp]

; 150  : 	if(		!OBJMAX_RANGE(lpData->UserIndex) 
; 151  : 		||	gObj[lpData->UserIndex].Connected != PLAYER_PLAYING )

  00014	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00017	85 d2		 test	 edx, edx
  00019	78 74		 js	 SHORT $LN3@DGAnsOffer
  0001b	33 c0		 xor	 eax, eax
  0001d	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00023	0f 9e c0	 setle	 al
  00026	85 c0		 test	 eax, eax
  00028	74 65		 je	 SHORT $LN3@DGAnsOffer
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002f	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00035	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  0003a	75 53		 jne	 SHORT $LN3@DGAnsOffer

; 152  : 	{
; 153  : 		return;
; 154  : 	}
; 155  : 	// ----
; 156  : 	GUILDMATCH_GDREQ_OFFERLIST lpRequest = { 0 };

  0003c	0f 57 c0	 xorps	 xmm0, xmm0
  0003f	66 c7 45 f9 00
	00		 mov	 WORD PTR _lpRequest$[ebp+9], 0
  00045	66 0f d6 45 f1	 movq	 QWORD PTR _lpRequest$[ebp+1], xmm0

; 157  : 	lpRequest.h.c			= 0xC1;
; 158  : 	lpRequest.h.headcode	= 0xED;
; 159  : 	lpRequest.h.subcode		= 0x00;
; 160  : 	lpRequest.h.size		= sizeof(GUILDMATCH_GDREQ_OFFERLIST);
; 161  : 	lpRequest.CurrentPage	= 1;
; 162  : 	lpRequest.UserIndex		= lpData->UserIndex;
; 163  : 	cDBSMng.Send((PCHAR)&lpRequest, sizeof(lpRequest));

  0004a	8d 45 f0	 lea	 eax, DWORD PTR _lpRequest$[ebp]
  0004d	6a 0c		 push	 12			; 0000000cH
  0004f	c6 45 fb 00	 mov	 BYTE PTR _lpRequest$[ebp+11], 0
  00053	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00058	50		 push	 eax
  00059	c7 45 f0 c1 0c
	ed 00		 mov	 DWORD PTR _lpRequest$[ebp], 15535297 ; 00ed0cc1H
  00060	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _lpRequest$[ebp+8], 1
  00067	89 55 f4	 mov	 DWORD PTR _lpRequest$[ebp+4], edx
  0006a	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 164  : 	// ----
; 165  : 	GUILDMATCH_GCANS_OFFERCREATE lpAnswer = { 0 };

  0006f	33 c0		 xor	 eax, eax
  00071	89 45 e9	 mov	 DWORD PTR _lpAnswer$[ebp+1], eax

; 166  : 	lpAnswer.h.c		= 0xC1;
; 167  : 	lpAnswer.h.headcode	= 0xED;
; 168  : 	lpAnswer.h.subcode	= 0x02;
; 169  : 	lpAnswer.h.size		= sizeof(GUILDMATCH_GCANS_OFFERCREATE);
; 170  : 	lpAnswer.Result		= 0;

  00074	89 45 ec	 mov	 DWORD PTR _lpAnswer$[ebp+4], eax

; 171  : 	DataSend(lpData->UserIndex, (LPBYTE)&lpAnswer, sizeof(GUILDMATCH_GCANS_OFFERCREATE));

  00077	8d 45 e8	 lea	 eax, DWORD PTR _lpAnswer$[ebp]
  0007a	6a 08		 push	 8
  0007c	50		 push	 eax
  0007d	ff 76 04	 push	 DWORD PTR [esi+4]
  00080	c7 45 e8 c1 08
	ed 02		 mov	 DWORD PTR _lpAnswer$[ebp], 49088705 ; 02ed08c1H
  00087	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@DGAnsOffer:

; 172  : }

  0008f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00092	33 cd		 xor	 ecx, ebp
  00094	5e		 pop	 esi
  00095	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
?DGAnsOfferCreate@GuildMatch@@QAEXPAUGUILDMATCH_DGANS_OFFERCREATE@@@Z ENDP ; GuildMatch::DGAnsOfferCreate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?CGReqOfferCreate@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_OFFERCREATE@@@Z
_TEXT	SEGMENT
_lpRequest$ = -68					; size = 63
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
_lpData$ = 12						; size = 4
?CGReqOfferCreate@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_OFFERCREATE@@@Z PROC ; GuildMatch::CGReqOfferCreate, COMDAT
; _this$ = ecx

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _lpData$[ebp]
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _UserIndex$[ebp]

; 122  : 	if(		!OBJMAX_RANGE(UserIndex) 
; 123  : 		||	gObj[UserIndex].Connected != PLAYER_PLAYING )

  00018	85 f6		 test	 esi, esi
  0001a	0f 88 9e 00 00
	00		 js	 $LN3@CGReqOffer
  00020	33 c0		 xor	 eax, eax
  00022	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  00028	0f 9e c0	 setle	 al
  0002b	85 c0		 test	 eax, eax
  0002d	0f 84 8b 00 00
	00		 je	 $LN3@CGReqOffer
  00033	57		 push	 edi
  00034	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  0003a	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00040	83 7f 04 03	 cmp	 DWORD PTR [edi+4], 3
  00044	75 77		 jne	 SHORT $LN8@CGReqOffer

; 124  : 	{
; 125  : 		return;
; 126  : 	}
; 127  : 	// ----
; 128  : 	if( gObj[UserIndex].GuildStatus != G_MASTER )

  00046	81 bf 28 06 00
	00 80 00 00 00	 cmp	 DWORD PTR [edi+1576], 128 ; 00000080H
  00050	75 6b		 jne	 SHORT $LN8@CGReqOffer

; 129  : 	{
; 130  : 		return;
; 131  : 	}
; 132  : 	// ----
; 133  : 	GUILDMATCH_GDREQ_OFFERCREATE lpRequest = { 0 };

  00052	6a 3e		 push	 62			; 0000003eH
  00054	8d 45 bd	 lea	 eax, DWORD PTR _lpRequest$[ebp+1]
  00057	6a 00		 push	 0
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _memset

; 134  : 	lpRequest.h.c			= 0xC1;
; 135  : 	lpRequest.h.headcode	= 0xED;
; 136  : 	lpRequest.h.subcode		= 0x02;
; 137  : 	lpRequest.h.size		= sizeof(GUILDMATCH_GDREQ_OFFERCREATE);
; 138  : 	lpRequest.UserIndex		= UserIndex;
; 139  : 	memcpy(lpRequest.Title, lpData->Title, 40);

  0005f	0f 10 43 04	 movups	 xmm0, XMMWORD PTR [ebx+4]
  00063	c7 45 bc c1 3f
	ed 02		 mov	 DWORD PTR _lpRequest$[ebp], 49102785 ; 02ed3fc1H
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006d	89 75 c0	 mov	 DWORD PTR _lpRequest$[ebp+4], esi

; 140  : 	memcpy(lpRequest.GuildMaster, gObj[UserIndex].Name, 10);
; 141  : 	lpRequest.GuildInterests = lpData->GuildInterests;
; 142  : 	lpRequest.GuildReqLevel	= lpData->GuildReqLevel;
; 143  : 	lpRequest.GuildReqClass = lpData->GuildReqClass;	
; 144  : 	cDBSMng.Send((PCHAR)&lpRequest, sizeof(GUILDMATCH_GDREQ_OFFERCREATE));

  00070	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00075	0f 11 45 c4	 movups	 XMMWORD PTR _lpRequest$[ebp+8], xmm0
  00079	0f 10 43 14	 movups	 xmm0, XMMWORD PTR [ebx+20]
  0007d	6a 3f		 push	 63			; 0000003fH
  0007f	0f 11 45 d4	 movups	 XMMWORD PTR _lpRequest$[ebp+24], xmm0
  00083	f3 0f 7e 43 24	 movq	 xmm0, QWORD PTR [ebx+36]
  00088	66 0f d6 45 e4	 movq	 QWORD PTR _lpRequest$[ebp+40], xmm0
  0008d	f3 0f 7e 47 5d	 movq	 xmm0, QWORD PTR [edi+93]
  00092	66 0f d6 45 ed	 movq	 QWORD PTR _lpRequest$[ebp+49], xmm0
  00097	66 8b 47 65	 mov	 ax, WORD PTR [edi+101]
  0009b	66 89 45 f5	 mov	 WORD PTR _lpRequest$[ebp+57], ax
  0009f	0f b6 43 2d	 movzx	 eax, BYTE PTR [ebx+45]
  000a3	88 45 f8	 mov	 BYTE PTR _lpRequest$[ebp+60], al
  000a6	0f b6 43 2e	 movzx	 eax, BYTE PTR [ebx+46]
  000aa	88 45 f9	 mov	 BYTE PTR _lpRequest$[ebp+61], al
  000ad	0f b6 43 2f	 movzx	 eax, BYTE PTR [ebx+47]
  000b1	88 45 fa	 mov	 BYTE PTR _lpRequest$[ebp+62], al
  000b4	8d 45 bc	 lea	 eax, DWORD PTR _lpRequest$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN8@CGReqOffer:
  000bd	5f		 pop	 edi
$LN3@CGReqOffer:

; 145  : }

  000be	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c1	5e		 pop	 esi
  000c2	33 cd		 xor	 ecx, ebp
  000c4	5b		 pop	 ebx
  000c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 08 00	 ret	 8
?CGReqOfferCreate@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_OFFERCREATE@@@Z ENDP ; GuildMatch::CGReqOfferCreate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?DGAnsOfferList@GuildMatch@@QAEXPAE@Z
_TEXT	SEGMENT
_lpAnswerInfo$1 = -904					; size = 84
tv732 = -820						; size = 4
_Offset$1$ = -816					; size = 4
_lpAnswerCount$1$ = -816				; size = 4
_lpAnswerCount$ = -812					; size = 24
_Buffer$ = -788						; size = 781
__$ArrayPad$ = -4					; size = 4
_lpData$ = 8						; size = 4
?DGAnsOfferList@GuildMatch@@QAEXPAE@Z PROC		; GuildMatch::DGAnsOfferList, COMDAT
; _this$ = ecx

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 03 00
	00		 sub	 esp, 904		; 00000388H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _lpData$[ebp]
  00017	57		 push	 edi

; 65   : 	GUILDMATCH_DGANS_OFFERLIST_COUNT* lpRecvCount = (GUILDMATCH_DGANS_OFFERLIST_COUNT*)lpData;
; 66   : 	// ----
; 67   : 	if(		!OBJMAX_RANGE(lpRecvCount->UserIndex) 
; 68   : 		||	gObj[lpRecvCount->UserIndex].Connected != PLAYER_PLAYING )

  00018	8b 7e 05	 mov	 edi, DWORD PTR [esi+5]
  0001b	89 bd cc fc ff
	ff		 mov	 DWORD PTR tv732[ebp], edi
  00021	85 ff		 test	 edi, edi
  00023	0f 88 1b 02 00
	00		 js	 $LN6@DGAnsOffer
  00029	33 c0		 xor	 eax, eax
  0002b	81 ff eb 2c 00
	00		 cmp	 edi, 11499		; 00002cebH
  00031	0f 9e c0	 setle	 al
  00034	85 c0		 test	 eax, eax
  00036	0f 84 08 02 00
	00		 je	 $LN6@DGAnsOffer
  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00041	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048
  00047	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  0004c	0f 85 f2 01 00
	00		 jne	 $LN6@DGAnsOffer

; 69   : 	{
; 70   : 		return;
; 71   : 	}
; 72   : 	// ----
; 73   : 	GUILDMATCH_GCANS_OFFERLIST_COUNT lpAnswerCount = { 0 };
; 74   : 	lpAnswerCount.h.c			= 0xC2;
; 75   : 	lpAnswerCount.h.headcode	= 0xED;
; 76   : 	lpAnswerCount.h.subcode		= 0x00;
; 77   : 	lpAnswerCount.h.sizeH		= SET_NUMBERH(sizeof(GUILDMATCH_GCANS_OFFERLIST_COUNT));
; 78   : 	lpAnswerCount.h.sizeL		= SET_NUMBERL(sizeof(GUILDMATCH_GCANS_OFFERLIST_COUNT));
; 79   : 	lpAnswerCount.CurrentPage	= lpRecvCount->CurrentPage;

  00052	8b 46 09	 mov	 eax, DWORD PTR [esi+9]
  00055	0f 57 c0	 xorps	 xmm0, xmm0
  00058	0f 11 85 d5 fc
	ff ff		 movups	 XMMWORD PTR _lpAnswerCount$[ebp+1], xmm0
  0005f	89 85 dc fc ff
	ff		 mov	 DWORD PTR _lpAnswerCount$[ebp+8], eax

; 80   : 	lpAnswerCount.MaxPage		= lpRecvCount->MaxPage;

  00065	8b 46 0d	 mov	 eax, DWORD PTR [esi+13]
  00068	89 85 e0 fc ff
	ff		 mov	 DWORD PTR _lpAnswerCount$[ebp+12], eax

; 81   : 	lpAnswerCount.OfferCount	= lpRecvCount->OfferCount;

  0006e	8b 46 11	 mov	 eax, DWORD PTR [esi+17]
  00071	c7 85 e5 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _lpAnswerCount$[ebp+17], 0
  0007b	66 c7 85 e9 fc
	ff ff 00 00	 mov	 WORD PTR _lpAnswerCount$[ebp+21], 0
  00084	c6 85 eb fc ff
	ff 00		 mov	 BYTE PTR _lpAnswerCount$[ebp+23], 0
  0008b	66 c7 85 d4 fc
	ff ff c2 00	 mov	 WORD PTR _lpAnswerCount$[ebp], 194 ; 000000c2H
  00094	66 c7 85 d7 fc
	ff ff ed 00	 mov	 WORD PTR _lpAnswerCount$[ebp+3], 237 ; 000000edH
  0009d	c6 85 d6 fc ff
	ff 18		 mov	 BYTE PTR _lpAnswerCount$[ebp+2], 24 ; 00000018H
  000a4	89 85 d0 fc ff
	ff		 mov	 DWORD PTR _lpAnswerCount$1$[ebp], eax
  000aa	89 85 e4 fc ff
	ff		 mov	 DWORD PTR _lpAnswerCount$[ebp+16], eax
  000b0	53		 push	 ebx

; 82   : 	int Offset = sizeof(GUILDMATCH_GCANS_OFFERLIST_COUNT);

  000b1	bb 18 00 00 00	 mov	 ebx, 24			; 00000018H

; 83   : 	// ----
; 84   : 	if( lpAnswerCount.OfferCount <= 0 )

  000b6	85 c0		 test	 eax, eax
  000b8	7f 0c		 jg	 SHORT $LN7@DGAnsOffer

; 85   : 	{
; 86   : 		DataSend(lpRecvCount->UserIndex, (LPBYTE)&lpAnswerCount, Offset);

  000ba	53		 push	 ebx
  000bb	8d 85 d4 fc ff
	ff		 lea	 eax, DWORD PTR _lpAnswerCount$[ebp]

; 87   : 		return;

  000c1	e9 73 01 00 00	 jmp	 $LN16@DGAnsOffer
$LN7@DGAnsOffer:

; 88   : 	}
; 89   : 	// ----
; 90   : 	GUILDMATCH_DGANS_OFFERLIST_INFO* lpRecvInfo	= (GUILDMATCH_DGANS_OFFERLIST_INFO*)&lpData[sizeof(GUILDMATCH_DGANS_OFFERLIST_COUNT)];
; 91   : 	const int Size = sizeof(GUILDMATCH_GCANS_OFFERLIST_COUNT) + sizeof(GUILDMATCH_GCANS_OFFERLIST_INFO) * GUILD_MATCH_MAX_PAGELINE;
; 92   : 	BYTE Buffer[Size + 1] = { 0 };

  000c6	68 0c 03 00 00	 push	 780			; 0000030cH
  000cb	8d 85 ed fc ff
	ff		 lea	 eax, DWORD PTR _Buffer$[ebp+1]
  000d1	6a 00		 push	 0
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 _memset
  000d9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 93   : 	// ----
; 94   : 	for( int i = 0; i < lpAnswerCount.OfferCount; i++ )

  000dc	83 7e 11 00	 cmp	 DWORD PTR [esi+17], 0
  000e0	0f 8e 1d 01 00
	00		 jle	 $LN3@DGAnsOffer
  000e6	8b bd d0 fc ff
	ff		 mov	 edi, DWORD PTR _lpAnswerCount$1$[ebp]
  000ec	83 c6 38	 add	 esi, 56			; 00000038H
  000ef	6b df 54	 imul	 ebx, edi, 84
  000f2	83 c3 18	 add	 ebx, 24			; 00000018H
  000f5	89 9d d0 fc ff
	ff		 mov	 DWORD PTR _Offset$1$[ebp], ebx
  000fb	8d 9d 04 fd ff
	ff		 lea	 ebx, DWORD PTR _Buffer$[ebp+24]
$LL4@DGAnsOffer:

; 95   : 	{
; 96   : 		GUILDMATCH_GCANS_OFFERLIST_INFO lpAnswerInfo = { 0 };
; 97   : 		// ----
; 98   : 		memcpy(lpAnswerInfo.Title, lpRecvInfo[i].Title, sizeof(lpAnswerInfo.Title));
; 99   : 		memcpy(lpAnswerInfo.GuildMaster, lpRecvInfo[i].GuildMaster, sizeof(lpAnswerInfo.GuildMaster));

  00101	6a 53		 push	 83			; 00000053H
  00103	8d 85 79 fc ff
	ff		 lea	 eax, DWORD PTR _lpAnswerInfo$1[ebp+1]
  00109	6a 00		 push	 0
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 _memset
  00111	66 8b 46 fd	 mov	 ax, WORD PTR [esi-3]

; 100  : 		memcpy(lpAnswerInfo.GuildName, lpRecvInfo[i].GuildName, sizeof(lpAnswerInfo.GuildName));
; 101  : 		lpAnswerInfo.GuildMemberCount = lpRecvInfo[i].GuildMemberCount;
; 102  : 		lpAnswerInfo.GuildMasterClass = lpRecvInfo[i].GuildMasterClass / 16; //wrong...
; 103  : 		lpAnswerInfo.GuildInterests = lpRecvInfo[i].GuildInterests;
; 104  : 		lpAnswerInfo.GuildReqLevel = lpRecvInfo[i].GuildReqLevel;
; 105  : 		lpAnswerInfo.GuildReqClass = lpRecvInfo[i].GuildReqClass;
; 106  : 		lpAnswerInfo.GuildMasterLevel = lpRecvInfo[i].GuildMasterLevel;
; 107  : 		lpAnswerInfo.GuildGensClass = lpRecvInfo[i].GuildGensClass;
; 108  : 		lpAnswerInfo.OfferNumber = lpRecvInfo[i].OfferNumber;
; 109  : 		memcpy(&Buffer[Offset], (LPBYTE)&lpAnswerInfo, sizeof(GUILDMATCH_GCANS_OFFERLIST_INFO));
; 110  : 		Offset += sizeof(GUILDMATCH_GCANS_OFFERLIST_INFO);

  00115	8d 5b 54	 lea	 ebx, DWORD PTR [ebx+84]
  00118	f3 0f 7e 46 ed	 movq	 xmm0, QWORD PTR [esi-19]
  0011d	8d 76 3a	 lea	 esi, DWORD PTR [esi+58]
  00120	0f 10 4e a3	 movups	 xmm1, XMMWORD PTR [esi-93]
  00124	66 89 85 a9 fc
	ff ff		 mov	 WORD PTR _lpAnswerInfo$1[ebp+49], ax
  0012b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012e	0f b6 46 c5	 movzx	 eax, BYTE PTR [esi-59]
  00132	88 85 ab fc ff
	ff		 mov	 BYTE PTR _lpAnswerInfo$1[ebp+51], al
  00138	0f b6 46 ce	 movzx	 eax, BYTE PTR [esi-50]
  0013c	88 85 b4 fc ff
	ff		 mov	 BYTE PTR _lpAnswerInfo$1[ebp+60], al
  00142	0f b6 46 cf	 movzx	 eax, BYTE PTR [esi-49]
  00146	88 85 b5 fc ff
	ff		 mov	 BYTE PTR _lpAnswerInfo$1[ebp+61], al
  0014c	0f b6 46 d0	 movzx	 eax, BYTE PTR [esi-48]
  00150	66 0f d6 85 88
	fc ff ff	 movq	 QWORD PTR _lpAnswerInfo$1[ebp+16], xmm0
  00158	f3 0f 7e 46 bb	 movq	 xmm0, QWORD PTR [esi-69]
  0015d	c0 e8 04	 shr	 al, 4
  00160	88 85 b6 fc ff
	ff		 mov	 BYTE PTR _lpAnswerInfo$1[ebp+62], al
  00166	0f b6 46 d1	 movzx	 eax, BYTE PTR [esi-47]
  0016a	66 0f d6 85 a1
	fc ff ff	 movq	 QWORD PTR _lpAnswerInfo$1[ebp+41], xmm0
  00172	f3 0f 7e 46 c6	 movq	 xmm0, QWORD PTR [esi-58]
  00177	88 85 b7 fc ff
	ff		 mov	 BYTE PTR _lpAnswerInfo$1[ebp+63], al
  0017d	0f b6 46 d2	 movzx	 eax, BYTE PTR [esi-46]
  00181	66 0f d6 85 ac
	fc ff ff	 movq	 QWORD PTR _lpAnswerInfo$1[ebp+52], xmm0
  00189	88 85 b8 fc ff
	ff		 mov	 BYTE PTR _lpAnswerInfo$1[ebp+64], al
  0018f	0f b6 46 d3	 movzx	 eax, BYTE PTR [esi-45]
  00193	88 85 b9 fc ff
	ff		 mov	 BYTE PTR _lpAnswerInfo$1[ebp+65], al
  00199	8b 46 d4	 mov	 eax, DWORD PTR [esi-44]
  0019c	89 85 bc fc ff
	ff		 mov	 DWORD PTR _lpAnswerInfo$1[ebp+68], eax
  001a2	0f b6 46 d8	 movzx	 eax, BYTE PTR [esi-40]
  001a6	88 85 c8 fc ff
	ff		 mov	 BYTE PTR _lpAnswerInfo$1[ebp+80], al
  001ac	8b 46 d9	 mov	 eax, DWORD PTR [esi-39]
  001af	89 85 c4 fc ff
	ff		 mov	 DWORD PTR _lpAnswerInfo$1[ebp+76], eax
  001b5	8b 85 c8 fc ff
	ff		 mov	 eax, DWORD PTR _lpAnswerInfo$1[ebp+80]
  001bb	0f 10 85 88 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _lpAnswerInfo$1[ebp+16]
  001c2	0f 11 4b ac	 movups	 XMMWORD PTR [ebx-84], xmm1
  001c6	0f 11 43 bc	 movups	 XMMWORD PTR [ebx-68], xmm0
  001ca	0f 10 85 98 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _lpAnswerInfo$1[ebp+32]
  001d1	0f 11 43 cc	 movups	 XMMWORD PTR [ebx-52], xmm0
  001d5	0f 10 85 a8 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _lpAnswerInfo$1[ebp+48]
  001dc	0f 11 43 dc	 movups	 XMMWORD PTR [ebx-36], xmm0
  001e0	0f 10 85 b8 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _lpAnswerInfo$1[ebp+64]
  001e7	0f 11 43 ec	 movups	 XMMWORD PTR [ebx-20], xmm0
  001eb	89 43 fc	 mov	 DWORD PTR [ebx-4], eax
  001ee	83 ef 01	 sub	 edi, 1
  001f1	0f 85 0a ff ff
	ff		 jne	 $LL4@DGAnsOffer
  001f7	8b 9d d0 fc ff
	ff		 mov	 ebx, DWORD PTR _Offset$1$[ebp]
  001fd	8b bd cc fc ff
	ff		 mov	 edi, DWORD PTR tv732[ebp]
$LN3@DGAnsOffer:

; 111  : 	}
; 112  : 	// ----
; 113  : 	lpAnswerCount.h.sizeH = SET_NUMBERH(Offset);

  00203	8b c3		 mov	 eax, ebx

; 114  : 	lpAnswerCount.h.sizeL = SET_NUMBERL(Offset);

  00205	88 9d d6 fc ff
	ff		 mov	 BYTE PTR _lpAnswerCount$[ebp+2], bl
  0020b	c1 e8 08	 shr	 eax, 8
  0020e	88 85 d5 fc ff
	ff		 mov	 BYTE PTR _lpAnswerCount$[ebp+1], al

; 115  : 	memcpy(Buffer, (LPBYTE)&lpAnswerCount, sizeof(GUILDMATCH_GCANS_OFFERLIST_COUNT));
; 116  : 	DataSend(lpRecvCount->UserIndex, Buffer, Offset);

  00214	8d 85 ec fc ff
	ff		 lea	 eax, DWORD PTR _Buffer$[ebp]
  0021a	0f 10 85 d4 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _lpAnswerCount$[ebp]
  00221	53		 push	 ebx
  00222	0f 11 85 ec fc
	ff ff		 movups	 XMMWORD PTR _Buffer$[ebp], xmm0
  00229	f3 0f 7e 85 e4
	fc ff ff	 movq	 xmm0, QWORD PTR _lpAnswerCount$[ebp+16]
  00231	66 0f d6 85 fc
	fc ff ff	 movq	 QWORD PTR _Buffer$[ebp+16], xmm0
$LN16@DGAnsOffer:
  00239	50		 push	 eax
  0023a	57		 push	 edi
  0023b	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00240	83 c4 0c	 add	 esp, 12			; 0000000cH
  00243	5b		 pop	 ebx
$LN6@DGAnsOffer:

; 117  : }

  00244	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00247	5f		 pop	 edi
  00248	33 cd		 xor	 ecx, ebp
  0024a	5e		 pop	 esi
  0024b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00250	8b e5		 mov	 esp, ebp
  00252	5d		 pop	 ebp
  00253	c2 04 00	 ret	 4
?DGAnsOfferList@GuildMatch@@QAEXPAE@Z ENDP		; GuildMatch::DGAnsOfferList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?CGReqOfferListByFilter@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_OFFERLISTFILTER@@@Z
_TEXT	SEGMENT
_lpRequest$ = -28					; size = 23
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
_lpData$ = 12						; size = 4
?CGReqOfferListByFilter@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_OFFERLISTFILTER@@@Z PROC ; GuildMatch::CGReqOfferListByFilter, COMDAT
; _this$ = ecx

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 55 08	 mov	 edx, DWORD PTR _UserIndex$[ebp]
  00013	56		 push	 esi
  00014	8b 75 0c	 mov	 esi, DWORD PTR _lpData$[ebp]

; 45   : 	if(		!OBJMAX_RANGE(UserIndex) 
; 46   : 		||	gObj[UserIndex].Connected != PLAYER_PLAYING )

  00017	85 d2		 test	 edx, edx
  00019	78 6d		 js	 SHORT $LN3@CGReqOffer
  0001b	33 c0		 xor	 eax, eax
  0001d	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00023	0f 9e c0	 setle	 al
  00026	85 c0		 test	 eax, eax
  00028	74 5e		 je	 SHORT $LN3@CGReqOffer
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002f	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00035	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  0003a	75 4c		 jne	 SHORT $LN3@CGReqOffer

; 47   : 	{
; 48   : 		return;
; 49   : 	}
; 50   : 	// ----
; 51   : 	GUILDMATCH_GDREQ_OFFERLISTFILTER lpRequest = { 0 };
; 52   : 	lpRequest.h.c			= 0xC1;
; 53   : 	lpRequest.h.headcode	= 0xED;
; 54   : 	lpRequest.h.subcode		= 0x01;
; 55   : 	lpRequest.h.size		= sizeof(GUILDMATCH_GDREQ_OFFERLISTFILTER);
; 56   : 	lpRequest.CurrentPage	= lpData->CurrentPage;

  0003c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003f	0f 57 c0	 xorps	 xmm0, xmm0
  00042	0f 11 45 e5	 movups	 XMMWORD PTR _lpRequest$[ebp+1], xmm0

; 57   : 	lpRequest.UserIndex		= UserIndex;
; 58   : 	memcpy(lpRequest.KeyWord, lpData->KeyWord, sizeof(lpRequest.KeyWord));
; 59   : 	cDBSMng.Send((PCHAR)&lpRequest, sizeof(lpRequest));

  00046	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0004b	89 45 ec	 mov	 DWORD PTR _lpRequest$[ebp+8], eax
  0004e	f3 0f 7e 46 08	 movq	 xmm0, QWORD PTR [esi+8]
  00053	66 8b 46 10	 mov	 ax, WORD PTR [esi+16]
  00057	c7 45 f5 00 00
	00 00		 mov	 DWORD PTR _lpRequest$[ebp+17], 0
  0005e	66 c7 45 f9 00
	00		 mov	 WORD PTR _lpRequest$[ebp+21], 0
  00064	66 89 45 f8	 mov	 WORD PTR _lpRequest$[ebp+20], ax
  00068	8a 46 12	 mov	 al, BYTE PTR [esi+18]
  0006b	88 45 fa	 mov	 BYTE PTR _lpRequest$[ebp+22], al
  0006e	8d 45 e4	 lea	 eax, DWORD PTR _lpRequest$[ebp]
  00071	6a 17		 push	 23			; 00000017H
  00073	50		 push	 eax
  00074	c7 45 e4 c1 17
	ed 01		 mov	 DWORD PTR _lpRequest$[ebp], 32315329 ; 01ed17c1H
  0007b	89 55 e8	 mov	 DWORD PTR _lpRequest$[ebp+4], edx
  0007e	66 0f d6 45 f0	 movq	 QWORD PTR _lpRequest$[ebp+12], xmm0
  00083	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@CGReqOffer:

; 60   : }

  00088	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008b	33 cd		 xor	 ecx, ebp
  0008d	5e		 pop	 esi
  0008e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 08 00	 ret	 8
?CGReqOfferListByFilter@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_OFFERLISTFILTER@@@Z ENDP ; GuildMatch::CGReqOfferListByFilter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?CGReqOfferList@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_OFFERLIST@@@Z
_TEXT	SEGMENT
_lpRequest$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
_lpData$ = 12						; size = 4
?CGReqOfferList@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_OFFERLIST@@@Z PROC ; GuildMatch::CGReqOfferList, COMDAT
; _this$ = ecx

; 25   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 55 08	 mov	 edx, DWORD PTR _UserIndex$[ebp]
  00013	56		 push	 esi
  00014	8b 75 0c	 mov	 esi, DWORD PTR _lpData$[ebp]

; 26   : 	if(		!OBJMAX_RANGE(UserIndex) 
; 27   : 		||	gObj[UserIndex].Connected != PLAYER_PLAYING )

  00017	85 d2		 test	 edx, edx
  00019	78 53		 js	 SHORT $LN3@CGReqOffer
  0001b	33 c0		 xor	 eax, eax
  0001d	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00023	0f 9e c0	 setle	 al
  00026	85 c0		 test	 eax, eax
  00028	74 44		 je	 SHORT $LN3@CGReqOffer
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002f	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00035	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  0003a	75 32		 jne	 SHORT $LN3@CGReqOffer

; 28   : 	{
; 29   : 		return;
; 30   : 	}
; 31   : 	// ----
; 32   : 	GUILDMATCH_GDREQ_OFFERLIST lpRequest = { 0 };
; 33   : 	lpRequest.h.c			= 0xC1;
; 34   : 	lpRequest.h.headcode	= 0xED;
; 35   : 	lpRequest.h.subcode		= 0x00;
; 36   : 	lpRequest.h.size		= sizeof(GUILDMATCH_GDREQ_OFFERLIST);
; 37   : 	lpRequest.CurrentPage	= lpData->CurrentPage;

  0003c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003f	0f 57 c0	 xorps	 xmm0, xmm0
  00042	66 0f d6 45 f1	 movq	 QWORD PTR _lpRequest$[ebp+1], xmm0

; 38   : 	lpRequest.UserIndex		= UserIndex;
; 39   : 	cDBSMng.Send((PCHAR)&lpRequest, sizeof(lpRequest));

  00047	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0004c	66 c7 45 f9 00
	00		 mov	 WORD PTR _lpRequest$[ebp+9], 0
  00052	c6 45 fb 00	 mov	 BYTE PTR _lpRequest$[ebp+11], 0
  00056	89 45 f8	 mov	 DWORD PTR _lpRequest$[ebp+8], eax
  00059	8d 45 f0	 lea	 eax, DWORD PTR _lpRequest$[ebp]
  0005c	6a 0c		 push	 12			; 0000000cH
  0005e	50		 push	 eax
  0005f	c7 45 f0 c1 0c
	ed 00		 mov	 DWORD PTR _lpRequest$[ebp], 15535297 ; 00ed0cc1H
  00066	89 55 f4	 mov	 DWORD PTR _lpRequest$[ebp+4], edx
  00069	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN3@CGReqOffer:

; 40   : }

  0006e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00071	33 cd		 xor	 ecx, ebp
  00073	5e		 pop	 esi
  00074	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 08 00	 ret	 8
?CGReqOfferList@GuildMatch@@QAEXHPAUGUILDMATCH_CGREQ_OFFERLIST@@@Z ENDP ; GuildMatch::CGReqOfferList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ??1GuildMatch@@UAE@XZ
_TEXT	SEGMENT
??1GuildMatch@@UAE@XZ PROC				; GuildMatch::~GuildMatch, COMDAT
; _this$ = ecx

; 19   : {

  00000	56		 push	 esi

; 21   : }

  00001	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7GuildMatch@@6B@
  0000a	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  0000b	8b 3e		 mov	 edi, DWORD PTR [esi]
  0000d	85 ff		 test	 edi, edi
  0000f	74 33		 je	 SHORT $LN7@GuildMatch

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00011	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00014	b8 31 0c c3 30	 mov	 eax, 818089009		; 30c30c31H
  00019	2b cf		 sub	 ecx, edi
  0001b	f7 e9		 imul	 ecx
  0001d	8b ce		 mov	 ecx, esi
  0001f	c1 fa 04	 sar	 edx, 4
  00022	8b c2		 mov	 eax, edx
  00024	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00027	03 c2		 add	 eax, edx
  00029	50		 push	 eax
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UGUILDMATCH_GCANS_OFFERLIST_INFO@@@std@@@std@@QAEXPAUGUILDMATCH_GCANS_OFFERLIST_INFO@@I@Z ; std::_Wrap_alloc<std::allocator<GUILDMATCH_GCANS_OFFERLIST_INFO> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  00030	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00036	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  0003d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN7@GuildMatch:
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp

; 21   : }

  00046	c3		 ret	 0
??1GuildMatch@@UAE@XZ ENDP				; GuildMatch::~GuildMatch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ??0GuildMatch@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0GuildMatch@@QAE@XZ PROC				; GuildMatch::GuildMatch, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7GuildMatch@@6B@

; 15   : }

  0000a	8b c1		 mov	 eax, ecx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 481  : 		_Mylast = pointer();

  00016	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 482  : 		_Myend = pointer();

  0001d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp

; 15   : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0GuildMatch@@QAE@XZ ENDP				; GuildMatch::GuildMatch
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 534  : // -------------------------------------------------------------------------------

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildmatch.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 534  : // -------------------------------------------------------------------------------

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
