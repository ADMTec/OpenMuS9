; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\MultiAttackHackCheck.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CMultiAttackHackCheck@@QAE@XZ		; CMultiAttackHackCheck::CMultiAttackHackCheck
PUBLIC	??1CMultiAttackHackCheck@@UAE@XZ		; CMultiAttackHackCheck::~CMultiAttackHackCheck
PUBLIC	?Init@CMultiAttackHackCheck@@QAEXXZ		; CMultiAttackHackCheck::Init
PUBLIC	?Insert@CMultiAttackHackCheck@@QAEHHEE@Z	; CMultiAttackHackCheck::Insert
PUBLIC	?CheckPenetrationSkill@CMultiAttackHackCheck@@QAEHHEE@Z ; CMultiAttackHackCheck::CheckPenetrationSkill
PUBLIC	?CheckFireScreamSkill@CMultiAttackHackCheck@@QAEHHEE@Z ; CMultiAttackHackCheck::CheckFireScreamSkill
PUBLIC	??_GCMultiAttackHackCheck@@UAEPAXI@Z		; CMultiAttackHackCheck::`scalar deleting destructor'
PUBLIC	??_7CMultiAttackHackCheck@@6B@			; CMultiAttackHackCheck::`vftable'
PUBLIC	??_R4CMultiAttackHackCheck@@6B@			; CMultiAttackHackCheck::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMultiAttackHackCheck@@@8		; CMultiAttackHackCheck `RTTI Type Descriptor'
PUBLIC	??_R3CMultiAttackHackCheck@@8			; CMultiAttackHackCheck::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMultiAttackHackCheck@@8			; CMultiAttackHackCheck::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMultiAttackHackCheck@@8		; CMultiAttackHackCheck::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	??_ECMultiAttackHackCheck@@UAEPAXI@Z:PROC	; CMultiAttackHackCheck::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A:BYTE ; g_SkillAdditionInfo
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@CMultiAttackHackCheck@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMultiAttackHackCheck@@8 DD FLAT:??_R0?AVCMultiAttackHackCheck@@@8 ; CMultiAttackHackCheck::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMultiAttackHackCheck@@8
rdata$r	ENDS
;	COMDAT ??_R2CMultiAttackHackCheck@@8
rdata$r	SEGMENT
??_R2CMultiAttackHackCheck@@8 DD FLAT:??_R1A@?0A@EA@CMultiAttackHackCheck@@8 ; CMultiAttackHackCheck::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMultiAttackHackCheck@@8
rdata$r	SEGMENT
??_R3CMultiAttackHackCheck@@8 DD 00H			; CMultiAttackHackCheck::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMultiAttackHackCheck@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMultiAttackHackCheck@@@8
data$r	SEGMENT
??_R0?AVCMultiAttackHackCheck@@@8 DD FLAT:??_7type_info@@6B@ ; CMultiAttackHackCheck `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMultiAttackHackCheck@@', 00H
data$r	ENDS
;	COMDAT ??_R4CMultiAttackHackCheck@@6B@
rdata$r	SEGMENT
??_R4CMultiAttackHackCheck@@6B@ DD 00H			; CMultiAttackHackCheck::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMultiAttackHackCheck@@@8
	DD	FLAT:??_R3CMultiAttackHackCheck@@8
rdata$r	ENDS
;	COMDAT ??_7CMultiAttackHackCheck@@6B@
CONST	SEGMENT
??_7CMultiAttackHackCheck@@6B@ DD FLAT:??_R4CMultiAttackHackCheck@@6B@ ; CMultiAttackHackCheck::`vftable'
	DD	FLAT:??_ECMultiAttackHackCheck@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\skilladditioninfo.h
;	COMDAT ?GetCheckFireScreamSkill@CSkillAdditionInfo@@QAEHXZ
_TEXT	SEGMENT
?GetCheckFireScreamSkill@CSkillAdditionInfo@@QAEHXZ PROC ; CSkillAdditionInfo::GetCheckFireScreamSkill, COMDAT
; _this$ = ecx

; 45   : 	BOOL GetCheckFireScreamSkill(){return this->m_bCheckFireScreamSerial;}

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	c3		 ret	 0
?GetCheckFireScreamSkill@CSkillAdditionInfo@@QAEHXZ ENDP ; CSkillAdditionInfo::GetCheckFireScreamSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\skilladditioninfo.h
;	COMDAT ?GetFireScreamSerialInitCount@CSkillAdditionInfo@@QAEHXZ
_TEXT	SEGMENT
?GetFireScreamSerialInitCount@CSkillAdditionInfo@@QAEHXZ PROC ; CSkillAdditionInfo::GetFireScreamSerialInitCount, COMDAT
; _this$ = ecx

; 43   : 	int GetFireScreamSerialInitCount(){return this->m_iFireScreamSerialInitCount;}

  00000	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00003	c3		 ret	 0
?GetFireScreamSerialInitCount@CSkillAdditionInfo@@QAEHXZ ENDP ; CSkillAdditionInfo::GetFireScreamSerialInitCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\skilladditioninfo.h
;	COMDAT ?GetFireScreamMaxAttackCountSameSerial@CSkillAdditionInfo@@QAEHXZ
_TEXT	SEGMENT
?GetFireScreamMaxAttackCountSameSerial@CSkillAdditionInfo@@QAEHXZ PROC ; CSkillAdditionInfo::GetFireScreamMaxAttackCountSameSerial, COMDAT
; _this$ = ecx

; 41   : 	int GetFireScreamMaxAttackCountSameSerial(){return this->m_iFireScreamMaxAttackCountSameSerial;}

  00000	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00003	c3		 ret	 0
?GetFireScreamMaxAttackCountSameSerial@CSkillAdditionInfo@@QAEHXZ ENDP ; CSkillAdditionInfo::GetFireScreamMaxAttackCountSameSerial
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCMultiAttackHackCheck@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMultiAttackHackCheck@@UAEPAXI@Z PROC		; CMultiAttackHackCheck::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMultiAttackHackCheck@@UAE@XZ ; CMultiAttackHackCheck::~CMultiAttackHackCheck
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 58 28 00 00	 push	 10328			; 00002858H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCMultiAttackHackCheck@@UAEPAXI@Z ENDP		; CMultiAttackHackCheck::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\multiattackhackcheck.cpp
;	COMDAT ?CheckFireScreamSkill@CMultiAttackHackCheck@@QAEHHEE@Z
_TEXT	SEGMENT
_iTargetIndex$ = 8					; size = 4
_btSkillNum$ = 12					; size = 1
tv362 = 16						; size = 4
_btSerial$ = 16						; size = 1
?CheckFireScreamSkill@CMultiAttackHackCheck@@QAEHHEE@Z PROC ; CMultiAttackHackCheck::CheckFireScreamSkill, COMDAT
; _this$ = ecx

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 140  : 	if ( g_SkillAdditionInfo.GetCheckFireScreamSkill() == FALSE )

  00003	83 3d 30 00 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+48, 0
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	75 0a		 jne	 SHORT $LN5@CheckFireS

; 141  : 		return TRUE;

  0000f	b8 01 00 00 00	 mov	 eax, 1
  00014	5f		 pop	 edi

; 167  : }

  00015	5d		 pop	 ebp
  00016	c2 0c 00	 ret	 12			; 0000000cH
$LN5@CheckFireS:
  00019	53		 push	 ebx

; 142  : 
; 143  : 	if ( btSerial > g_SkillAdditionInfo.GetFireScreamSerialInitCount() )

  0001a	0f b6 5d 10	 movzx	 ebx, BYTE PTR _btSerial$[ebp]
  0001e	89 5d 10	 mov	 DWORD PTR tv362[ebp], ebx
  00021	3b 1d 2c 00 00
	00		 cmp	 ebx, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+44
  00027	7e 05		 jle	 SHORT $LN6@CheckFireS

; 144  : 		this->Init();

  00029	e8 00 00 00 00	 call	 ?Init@CMultiAttackHackCheck@@QAEXXZ ; CMultiAttackHackCheck::Init
$LN6@CheckFireS:

; 145  : 
; 146  : 	for ( int iCount = 0 ; iCount < MAX_MULTI_ATTACK_INFO ; iCount++)

  0002e	8d 4b 0a	 lea	 ecx, DWORD PTR [ebx+10]
  00031	33 d2		 xor	 edx, edx
  00033	8b 5d 08	 mov	 ebx, DWORD PTR _iTargetIndex$[ebp]
  00036	03 cf		 add	 ecx, edi
  00038	56		 push	 esi
  00039	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  0003c	0f 1f 40 00	 npad	 4
$LL4@CheckFireS:

; 147  : 	{
; 148  : 		if ( this->m_Table[iCount].number == iTargetIndex )

  00040	0f bf 06	 movsx	 eax, WORD PTR [esi]
  00043	3b c3		 cmp	 eax, ebx
  00045	75 0d		 jne	 SHORT $LN2@CheckFireS

; 149  : 		{
; 150  : 			this->m_Table[iCount].Serial[btSerial]+=1;

  00047	fe 01		 inc	 BYTE PTR [ecx]

; 151  : 
; 152  : 			if ( this->m_Table[iCount].Serial[btSerial] > g_SkillAdditionInfo.GetFireScreamMaxAttackCountSameSerial() )

  00049	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  0004c	3b 05 28 00 00
	00		 cmp	 eax, DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+40
  00052	7f 48		 jg	 SHORT $LN18@CheckFireS
$LN2@CheckFireS:

; 145  : 
; 146  : 	for ( int iCount = 0 ; iCount < MAX_MULTI_ATTACK_INFO ; iCount++)

  00054	42		 inc	 edx
  00055	81 c6 02 01 00
	00		 add	 esi, 258		; 00000102H
  0005b	81 c1 02 01 00
	00		 add	 ecx, 258		; 00000102H
  00061	83 fa 28	 cmp	 edx, 40			; 00000028H
  00064	7c da		 jl	 SHORT $LL4@CheckFireS

; 155  : 			}
; 156  : 		}
; 157  : 	}
; 158  : 
; 159  : 	this->m_Table[this->m_iCount].number = iTargetIndex;

  00066	69 47 04 02 01
	00 00		 imul	 eax, DWORD PTR [edi+4], 258
  0006d	66 89 5c 38 08	 mov	 WORD PTR [eax+edi+8], bx

; 160  : 	this->m_Table[this->m_iCount].Serial[btSerial]+=1;

  00072	69 47 04 02 01
	00 00		 imul	 eax, DWORD PTR [edi+4], 258
  00079	03 45 10	 add	 eax, DWORD PTR tv362[ebp]
  0007c	fe 44 38 0a	 inc	 BYTE PTR [eax+edi+10]

; 161  : 	this->m_iCount++;

  00080	ff 47 04	 inc	 DWORD PTR [edi+4]

; 162  : 
; 163  : 	if ( this->m_iCount >= MAX_MULTI_ATTACK_INFO )

  00083	83 7f 04 28	 cmp	 DWORD PTR [edi+4], 40	; 00000028H
  00087	7c 07		 jl	 SHORT $LN9@CheckFireS

; 164  : 		this->m_iCount = 0;

  00089	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
$LN9@CheckFireS:
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx

; 165  : 
; 166  : 	return TRUE;

  00092	b8 01 00 00 00	 mov	 eax, 1
  00097	5f		 pop	 edi

; 167  : }

  00098	5d		 pop	 ebp
  00099	c2 0c 00	 ret	 12			; 0000000cH
$LN18@CheckFireS:
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx

; 153  : 			{
; 154  : 				return FALSE;

  0009e	33 c0		 xor	 eax, eax
  000a0	5f		 pop	 edi

; 167  : }

  000a1	5d		 pop	 ebp
  000a2	c2 0c 00	 ret	 12			; 0000000cH
?CheckFireScreamSkill@CMultiAttackHackCheck@@QAEHHEE@Z ENDP ; CMultiAttackHackCheck::CheckFireScreamSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\multiattackhackcheck.cpp
;	COMDAT ?CheckPenetrationSkill@CMultiAttackHackCheck@@QAEHHEE@Z
_TEXT	SEGMENT
_aTargetIndex$ = 8					; size = 4
tv389 = 12						; size = 4
_skillnum$ = 12						; size = 1
_serial$ = 16						; size = 1
?CheckPenetrationSkill@CMultiAttackHackCheck@@QAEHHEE@Z PROC ; CMultiAttackHackCheck::CheckPenetrationSkill, COMDAT
; _this$ = ecx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 94   : 	if ( skillnum != 52 )

  00003	80 7d 0c 34	 cmp	 BYTE PTR _skillnum$[ebp], 52 ; 00000034H
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	74 0a		 je	 SHORT $LN5@CheckPenet

; 95   : 	{
; 96   : 		return TRUE;

  0000c	b8 01 00 00 00	 mov	 eax, 1
  00011	5f		 pop	 edi

; 133  : }

  00012	5d		 pop	 ebp
  00013	c2 0c 00	 ret	 12			; 0000000cH
$LN5@CheckPenet:

; 97   : 	}
; 98   : 
; 99   : 	if ( serial == 10 )

  00016	8a 55 10	 mov	 dl, BYTE PTR _serial$[ebp]
  00019	80 fa 0a	 cmp	 dl, 10			; 0000000aH
  0001c	75 08		 jne	 SHORT $LN6@CheckPenet

; 100  : 	{
; 101  : 		this->Init();

  0001e	e8 00 00 00 00	 call	 ?Init@CMultiAttackHackCheck@@QAEXXZ ; CMultiAttackHackCheck::Init
  00023	8a 55 10	 mov	 dl, BYTE PTR _serial$[ebp]
$LN6@CheckPenet:

; 102  : 	}
; 103  : 
; 104  : 	for ( int i=0;i<MAX_MULTI_ATTACK_INFO;i++)

  00026	8b 4d 08	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  00029	b8 f8 ff ff ff	 mov	 eax, -8			; fffffff8H
  0002e	53		 push	 ebx
  0002f	33 db		 xor	 ebx, ebx
  00031	2b c7		 sub	 eax, edi
  00033	56		 push	 esi
  00034	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00037	89 45 0c	 mov	 DWORD PTR tv389[ebp], eax
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL4@CheckPenet:

; 105  : 	{
; 106  : 		if ( this->m_Table[i].number == aTargetIndex )

  00040	0f bf 06	 movsx	 eax, WORD PTR [esi]
  00043	3b c1		 cmp	 eax, ecx
  00045	75 38		 jne	 SHORT $LN2@CheckPenet

; 107  : 		{
; 108  : 			if ( serial == 10 && this->m_Table[i].Serial[serial] != 0 )

  00047	80 fa 0a	 cmp	 dl, 10			; 0000000aH
  0004a	75 1f		 jne	 SHORT $LN8@CheckPenet
  0004c	80 7e 0c 00	 cmp	 BYTE PTR [esi+12], 0
  00050	74 19		 je	 SHORT $LN8@CheckPenet

; 109  : 			{
; 110  : 				memset(this->m_Table[i].Serial , 0, MULTI_ATTACK_SERIAL_SIZE);

  00052	68 ff 00 00 00	 push	 255			; 000000ffH
  00057	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  0005a	6a 00		 push	 0
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 _memset
  00062	8a 55 10	 mov	 dl, BYTE PTR _serial$[ebp]
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH
  00068	8b 4d 08	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
$LN8@CheckPenet:

; 111  : 			}
; 112  : 			
; 113  : 			this->m_Table[i].Serial[serial]++;

  0006b	0f b6 c2	 movzx	 eax, dl
  0006e	03 45 0c	 add	 eax, DWORD PTR tv389[ebp]
  00071	03 c6		 add	 eax, esi
  00073	fe 44 38 0a	 inc	 BYTE PTR [eax+edi+10]
  00077	8a 44 38 0a	 mov	 al, BYTE PTR [eax+edi+10]

; 114  : 
; 115  : 			if ( this->m_Table[i].Serial[serial] > 1 )

  0007b	3c 01		 cmp	 al, 1
  0007d	77 44		 ja	 SHORT $LN13@CheckPenet
$LN2@CheckPenet:

; 102  : 	}
; 103  : 
; 104  : 	for ( int i=0;i<MAX_MULTI_ATTACK_INFO;i++)

  0007f	43		 inc	 ebx
  00080	81 c6 02 01 00
	00		 add	 esi, 258		; 00000102H
  00086	83 fb 28	 cmp	 ebx, 40			; 00000028H
  00089	7c b5		 jl	 SHORT $LL4@CheckPenet

; 118  : 			}
; 119  : 		}
; 120  : 	}
; 121  : 
; 122  : 	this->m_Table[this->m_iCount].number = aTargetIndex;

  0008b	69 47 04 02 01
	00 00		 imul	 eax, DWORD PTR [edi+4], 258
  00092	66 89 4c 38 08	 mov	 WORD PTR [eax+edi+8], cx

; 123  : 	this->m_Table[this->m_iCount].Serial[serial]++;

  00097	69 4f 04 02 01
	00 00		 imul	 ecx, DWORD PTR [edi+4], 258
  0009e	0f b6 c2	 movzx	 eax, dl
  000a1	03 cf		 add	 ecx, edi
  000a3	fe 44 08 0a	 inc	 BYTE PTR [eax+ecx+10]

; 124  : 	this->m_iCount++;

  000a7	ff 47 04	 inc	 DWORD PTR [edi+4]

; 125  : 
; 126  : 
; 127  : 	if ( this->m_iCount >= MAX_MULTI_ATTACK_INFO )

  000aa	83 7f 04 28	 cmp	 DWORD PTR [edi+4], 40	; 00000028H
  000ae	7c 07		 jl	 SHORT $LN10@CheckPenet

; 128  : 	{
; 129  : 		this->m_iCount = 0;

  000b0	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
$LN10@CheckPenet:
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx

; 130  : 	}
; 131  : 
; 132  : 	return TRUE;

  000b9	b8 01 00 00 00	 mov	 eax, 1
  000be	5f		 pop	 edi

; 133  : }

  000bf	5d		 pop	 ebp
  000c0	c2 0c 00	 ret	 12			; 0000000cH
$LN13@CheckPenet:
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx

; 116  : 			{
; 117  : 				return FALSE;

  000c5	33 c0		 xor	 eax, eax
  000c7	5f		 pop	 edi

; 133  : }

  000c8	5d		 pop	 ebp
  000c9	c2 0c 00	 ret	 12			; 0000000cH
?CheckPenetrationSkill@CMultiAttackHackCheck@@QAEHHEE@Z ENDP ; CMultiAttackHackCheck::CheckPenetrationSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\multiattackhackcheck.cpp
;	COMDAT ?Insert@CMultiAttackHackCheck@@QAEHHEE@Z
_TEXT	SEGMENT
tv428 = -4						; size = 4
_aTargetIndex$ = 8					; size = 4
_skillnum$ = 12						; size = 1
_serial$ = 16						; size = 1
?Insert@CMultiAttackHackCheck@@QAEHHEE@Z PROC		; CMultiAttackHackCheck::Insert, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 41   : 	if ( gObj[aTargetIndex].Type == OBJ_MONSTER )

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  0000f	69 d1 40 27 00
	00		 imul	 edx, ecx, 10048
  00015	80 7c 02 50 02	 cmp	 BYTE PTR [edx+eax+80], 2
  0001a	75 0c		 jne	 SHORT $LN5@Insert
$LN26@Insert:

; 42   : 	{
; 43   : 		return TRUE;

  0001c	b8 01 00 00 00	 mov	 eax, 1
  00021	5b		 pop	 ebx

; 87   : }

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert:

; 44   : 	}
; 45   : 
; 46   : 	if ( skillnum == 12 )

  00028	80 7d 0c 0c	 cmp	 BYTE PTR _skillnum$[ebp], 12 ; 0000000cH
  0002c	74 ee		 je	 SHORT $LN26@Insert

; 47   : 	{
; 48   : 		return TRUE;
; 49   : 	}
; 50   : 
; 51   : 	for ( int i=0;i<MAX_MULTI_ATTACK_INFO;i++)

  0002e	56		 push	 esi
  0002f	57		 push	 edi
  00030	b8 f8 ff ff ff	 mov	 eax, -8			; fffffff8H
  00035	8d 73 08	 lea	 esi, DWORD PTR [ebx+8]
  00038	33 ff		 xor	 edi, edi
  0003a	2b c3		 sub	 eax, ebx
  0003c	89 45 fc	 mov	 DWORD PTR tv428[ebp], eax
  0003f	90		 npad	 1
$LL4@Insert:

; 52   : 	{
; 53   : 		if ( this->m_Table[i].number == aTargetIndex )

  00040	0f bf 06	 movsx	 eax, WORD PTR [esi]

; 54   : 		{
; 55   : 			if ( serial == (BYTE)-1  && this->m_Table[i].Serial[serial]  != 0 )

  00043	8a 55 10	 mov	 dl, BYTE PTR _serial$[ebp]
  00046	3b c1		 cmp	 eax, ecx
  00048	75 3e		 jne	 SHORT $LN2@Insert
  0004a	80 fa ff	 cmp	 dl, 255			; 000000ffH
  0004d	75 1f		 jne	 SHORT $LN8@Insert
  0004f	80 be 01 01 00
	00 00		 cmp	 BYTE PTR [esi+257], 0
  00056	74 16		 je	 SHORT $LN8@Insert

; 56   : 			{
; 57   : 				memset(this->m_Table[i].Serial, 0, MULTI_ATTACK_SERIAL_SIZE);

  00058	68 ff 00 00 00	 push	 255			; 000000ffH
  0005d	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  00060	6a 00		 push	 0
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 _memset
  00068	8a 55 10	 mov	 dl, BYTE PTR _serial$[ebp]
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@Insert:

; 58   : 			}
; 59   : 
; 60   : 			this->m_Table[i].Serial[serial]++;

  0006e	0f b6 c2	 movzx	 eax, dl
  00071	03 45 fc	 add	 eax, DWORD PTR tv428[ebp]
  00074	03 c6		 add	 eax, esi
  00076	8a 4c 18 0a	 mov	 cl, BYTE PTR [eax+ebx+10]
  0007a	fe c1		 inc	 cl
  0007c	88 4c 18 0a	 mov	 BYTE PTR [eax+ebx+10], cl

; 61   : 
; 62   : 			if ( skillnum == 9 )
; 63   : 			{
; 64   : 				if ( this->m_Table[i].Serial[serial] > 6 )
; 65   : 				{
; 66   : 					return FALSE;
; 67   : 				}
; 68   : 			}
; 69   : 			else if ( this->m_Table[i].Serial[serial] > 6 )

  00080	80 f9 06	 cmp	 cl, 6
  00083	77 49		 ja	 SHORT $LN17@Insert
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
$LN2@Insert:

; 47   : 	{
; 48   : 		return TRUE;
; 49   : 	}
; 50   : 
; 51   : 	for ( int i=0;i<MAX_MULTI_ATTACK_INFO;i++)

  00088	47		 inc	 edi
  00089	81 c6 02 01 00
	00		 add	 esi, 258		; 00000102H
  0008f	83 ff 28	 cmp	 edi, 40			; 00000028H
  00092	7c ac		 jl	 SHORT $LL4@Insert

; 72   : 			}
; 73   : 		}
; 74   : 	}
; 75   : 
; 76   : 	this->m_Table[this->m_iCount].number = aTargetIndex;

  00094	69 43 04 02 01
	00 00		 imul	 eax, DWORD PTR [ebx+4], 258
  0009b	66 89 4c 18 08	 mov	 WORD PTR [eax+ebx+8], cx

; 77   : 	this->m_Table[this->m_iCount].Serial[serial]++;

  000a0	69 4b 04 02 01
	00 00		 imul	 ecx, DWORD PTR [ebx+4], 258
  000a7	0f b6 c2	 movzx	 eax, dl
  000aa	03 cb		 add	 ecx, ebx
  000ac	fe 44 08 0a	 inc	 BYTE PTR [eax+ecx+10]

; 78   : 	this->m_iCount++;

  000b0	ff 43 04	 inc	 DWORD PTR [ebx+4]

; 79   : 
; 80   : 
; 81   : 	if ( this->m_iCount >= MAX_MULTI_ATTACK_INFO )

  000b3	83 7b 04 28	 cmp	 DWORD PTR [ebx+4], 40	; 00000028H
  000b7	7c 07		 jl	 SHORT $LN13@Insert

; 82   : 	{
; 83   : 		this->m_iCount = 0;

  000b9	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
$LN13@Insert:
  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi

; 84   : 	}
; 85   : 
; 86   : 	return TRUE;

  000c2	b8 01 00 00 00	 mov	 eax, 1
  000c7	5b		 pop	 ebx

; 87   : }

  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 0c 00	 ret	 12			; 0000000cH
$LN17@Insert:
  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi

; 70   : 			{
; 71   : 				return FALSE;

  000d0	33 c0		 xor	 eax, eax
  000d2	5b		 pop	 ebx

; 87   : }

  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 0c 00	 ret	 12			; 0000000cH
?Insert@CMultiAttackHackCheck@@QAEHHEE@Z ENDP		; CMultiAttackHackCheck::Insert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\multiattackhackcheck.cpp
;	COMDAT ?Init@CMultiAttackHackCheck@@QAEXXZ
_TEXT	SEGMENT
?Init@CMultiAttackHackCheck@@QAEXXZ PROC		; CMultiAttackHackCheck::Init, COMDAT
; _this$ = ecx

; 26   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 27   : 	this->m_iCount = 0;

  00003	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000a	8d 71 0a	 lea	 esi, DWORD PTR [ecx+10]
  0000d	bf 28 00 00 00	 mov	 edi, 40			; 00000028H
  00012	83 cb ff	 or	 ebx, -1
$LL4@Init:

; 28   : 
; 29   : 	for ( int i=0;i<MAX_MULTI_ATTACK_INFO;i++)
; 30   : 	{
; 31   : 		this->m_Table[i].number = -1;
; 32   : 		memset(this->m_Table[i].Serial, 0, sizeof(this->m_Table[i].Serial));

  00015	68 ff 00 00 00	 push	 255			; 000000ffH
  0001a	6a 00		 push	 0
  0001c	56		 push	 esi
  0001d	66 89 5e fe	 mov	 WORD PTR [esi-2], bx
  00021	e8 00 00 00 00	 call	 _memset
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	81 c6 02 01 00
	00		 add	 esi, 258		; 00000102H
  0002f	83 ef 01	 sub	 edi, 1
  00032	75 e1		 jne	 SHORT $LL4@Init

; 33   : 	}
; 34   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	c3		 ret	 0
?Init@CMultiAttackHackCheck@@QAEXXZ ENDP		; CMultiAttackHackCheck::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\multiattackhackcheck.cpp
;	COMDAT ??1CMultiAttackHackCheck@@UAE@XZ
_TEXT	SEGMENT
??1CMultiAttackHackCheck@@UAE@XZ PROC			; CMultiAttackHackCheck::~CMultiAttackHackCheck, COMDAT
; _this$ = ecx

; 21   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMultiAttackHackCheck@@6B@

; 22   : 	return;
; 23   : }

  00006	c3		 ret	 0
??1CMultiAttackHackCheck@@UAE@XZ ENDP			; CMultiAttackHackCheck::~CMultiAttackHackCheck
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\multiattackhackcheck.cpp
;	COMDAT ??0CMultiAttackHackCheck@@QAE@XZ
_TEXT	SEGMENT
??0CMultiAttackHackCheck@@QAE@XZ PROC			; CMultiAttackHackCheck::CMultiAttackHackCheck, COMDAT
; _this$ = ecx

; 14   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CMultiAttackHackCheck@@6B@

; 15   : 	this->Init();

  00009	e8 00 00 00 00	 call	 ?Init@CMultiAttackHackCheck@@QAEXXZ ; CMultiAttackHackCheck::Init

; 16   : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0CMultiAttackHackCheck@@QAE@XZ ENDP			; CMultiAttackHackCheck::CMultiAttackHackCheck
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\multiattackhackcheck.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\multiattackhackcheck.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 168  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
