; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\BuffEffect.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CBuffEffect@@QAE@XZ				; CBuffEffect::CBuffEffect
PUBLIC	??1CBuffEffect@@UAE@XZ				; CBuffEffect::~CBuffEffect
PUBLIC	?SetBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CBuffEffect::SetBuffEffect
PUBLIC	?ClearBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CBuffEffect::ClearBuffEffect
PUBLIC	?SetActiveBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CBuffEffect::SetActiveBuffEffect
PUBLIC	?GiveDamageEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@H@Z ; CBuffEffect::GiveDamageEffect
PUBLIC	?PoisonEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@E@Z ; CBuffEffect::PoisonEffect
PUBLIC	?AbsorbHP@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@H@Z	; CBuffEffect::AbsorbHP
PUBLIC	?SetPrevEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@@Z ; CBuffEffect::SetPrevEffect
PUBLIC	?SetNextEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@@Z ; CBuffEffect::SetNextEffect
PUBLIC	?ClearAllBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@@Z ; CBuffEffect::ClearAllBuffEffect
PUBLIC	??_GCBuffEffect@@UAEPAXI@Z			; CBuffEffect::`scalar deleting destructor'
PUBLIC	??_7CBuffEffect@@6B@				; CBuffEffect::`vftable'
PUBLIC	?g_BuffEffect@@3VCBuffEffect@@A			; g_BuffEffect
PUBLIC	??_R4CBuffEffect@@6B@				; CBuffEffect::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBuffEffect@@@8				; CBuffEffect `RTTI Type Descriptor'
PUBLIC	??_R3CBuffEffect@@8				; CBuffEffect::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBuffEffect@@8				; CBuffEffect::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBuffEffect@@8			; CBuffEffect::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3dcccccd
PUBLIC	__real@4059000000000000
PUBLIC	__real@42200000
PUBLIC	__real@42c80000
PUBLIC	__real@c059000000000000
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GCReFillSend@@YAXHGEEG@Z:PROC			; GCReFillSend
EXTRN	?GCManaSend@@YAXHFEEG@Z:PROC			; GCManaSend
EXTRN	?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z:PROC ; gObjLifeCheck
EXTRN	??_ECBuffEffect@@UAEPAXI@Z:PROC			; CBuffEffect::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_BuffEffect@@3VCBuffEffect@@A DD 01H DUP (?)		; g_BuffEffect
_BSS	ENDS
CRT$XCU	SEGMENT
?g_BuffEffect$initializer$@@3P6AXXZA DD FLAT:??__Eg_BuffEffect@@YAXXZ ; g_BuffEffect$initializer$
CRT$XCU	ENDS
;	COMDAT __real@c059000000000000
CONST	SEGMENT
__real@c059000000000000 DQ 0c059000000000000r	; -100
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CBuffEffect@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBuffEffect@@8 DD FLAT:??_R0?AVCBuffEffect@@@8 ; CBuffEffect::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBuffEffect@@8
rdata$r	ENDS
;	COMDAT ??_R2CBuffEffect@@8
rdata$r	SEGMENT
??_R2CBuffEffect@@8 DD FLAT:??_R1A@?0A@EA@CBuffEffect@@8 ; CBuffEffect::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBuffEffect@@8
rdata$r	SEGMENT
??_R3CBuffEffect@@8 DD 00H				; CBuffEffect::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBuffEffect@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBuffEffect@@@8
data$r	SEGMENT
??_R0?AVCBuffEffect@@@8 DD FLAT:??_7type_info@@6B@	; CBuffEffect `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBuffEffect@@', 00H
data$r	ENDS
;	COMDAT ??_R4CBuffEffect@@6B@
rdata$r	SEGMENT
??_R4CBuffEffect@@6B@ DD 00H				; CBuffEffect::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBuffEffect@@@8
	DD	FLAT:??_R3CBuffEffect@@8
rdata$r	ENDS
;	COMDAT ??_7CBuffEffect@@6B@
CONST	SEGMENT
??_7CBuffEffect@@6B@ DD FLAT:??_R4CBuffEffect@@6B@	; CBuffEffect::`vftable'
	DD	FLAT:??_ECBuffEffect@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_BuffEffect@@YAXXZ
text$yd	SEGMENT
??__Fg_BuffEffect@@YAXXZ PROC				; `dynamic atexit destructor for 'g_BuffEffect'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffect@@3VCBuffEffect@@A ; g_BuffEffect
  00005	e9 00 00 00 00	 jmp	 ??1CBuffEffect@@UAE@XZ	; CBuffEffect::~CBuffEffect
??__Fg_BuffEffect@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_BuffEffect''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffect.cpp
;	COMDAT ??__Eg_BuffEffect@@YAXXZ
text$di	SEGMENT
??__Eg_BuffEffect@@YAXXZ PROC				; `dynamic initializer for 'g_BuffEffect'', COMDAT

; 6    : CBuffEffect g_BuffEffect;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffect@@3VCBuffEffect@@A ; g_BuffEffect
  00005	e8 00 00 00 00	 call	 ??0CBuffEffect@@QAE@XZ	; CBuffEffect::CBuffEffect
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_BuffEffect@@YAXXZ ; `dynamic atexit destructor for 'g_BuffEffect''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_BuffEffect@@YAXXZ ENDP				; `dynamic initializer for 'g_BuffEffect''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCBuffEffect@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCBuffEffect@@UAEPAXI@Z PROC				; CBuffEffect::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CBuffEffect@@UAE@XZ	; CBuffEffect::~CBuffEffect
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 04		 push	 4
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCBuffEffect@@UAEPAXI@Z ENDP				; CBuffEffect::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffect.cpp
;	COMDAT ?ClearAllBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?ClearAllBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CBuffEffect::ClearAllBuffEffect, COMDAT
; _this$ = ecx

; 558  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 559  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  00012	8d b3 e0 01 00
	00		 lea	 esi, DWORD PTR [ebx+480]
$LL4@ClearAllBu:

; 560  : 	{
; 561  : 		if( !lpObj->pEffectInfo[i].btEffectNum )

  00018	80 7e f8 00	 cmp	 BYTE PTR [esi-8], 0
  0001c	74 21		 je	 SHORT $LN2@ClearAllBu

; 562  : 			continue;
; 563  : 
; 564  : 		ClearBuffEffect(lpObj,lpObj->pEffectInfo[i].btEffectType1, lpObj->pEffectInfo[i].iEffectValue1);

  0001e	ff 36		 push	 DWORD PTR [esi]
  00020	0f b6 46 fa	 movzx	 eax, BYTE PTR [esi-6]
  00024	50		 push	 eax
  00025	53		 push	 ebx
  00026	e8 00 00 00 00	 call	 ?ClearBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CBuffEffect::ClearBuffEffect

; 565  : 		ClearBuffEffect(lpObj,lpObj->pEffectInfo[i].btEffectType2, lpObj->pEffectInfo[i].iEffectValue2);

  0002b	ff 76 04	 push	 DWORD PTR [esi+4]
  0002e	0f b6 46 fb	 movzx	 eax, BYTE PTR [esi-5]
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00035	50		 push	 eax
  00036	53		 push	 ebx
  00037	e8 00 00 00 00	 call	 ?ClearBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CBuffEffect::ClearBuffEffect
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN2@ClearAllBu:

; 559  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  0003f	83 c6 1c	 add	 esi, 28			; 0000001cH
  00042	83 ef 01	 sub	 edi, 1
  00045	75 d1		 jne	 SHORT $LL4@ClearAllBu
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx

; 566  : 	}
; 567  : }

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
?ClearAllBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CBuffEffect::ClearAllBuffEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffect.cpp
;	COMDAT ?SetNextEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?SetNextEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CBuffEffect::SetNextEffect, COMDAT
; _this$ = ecx

; 502  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 503  : 	if( lpObj == NULL )

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00008	8b d1		 mov	 edx, ecx
  0000a	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
  0000d	85 db		 test	 ebx, ebx
  0000f	74 74		 je	 SHORT $LN3@SetNextEff

; 504  : 		return;
; 505  : 
; 506  : 	int BuffCount = 0;
; 507  : 
; 508  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8d b3 da 01 00
	00		 lea	 esi, DWORD PTR [ebx+474]
  00019	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  0001e	66 90		 npad	 2
$LL4@SetNextEff:

; 509  : 	{
; 510  : 		if( !lpObj->pEffectInfo[i].btEffectNum )

  00020	80 7e fe 00	 cmp	 BYTE PTR [esi-2], 0
  00024	74 52		 je	 SHORT $LN2@SetNextEff

; 511  : 			continue;
; 512  : 
; 513  : 		switch ( lpObj->pEffectInfo[i].btEffectType1 )

  00026	8a 0e		 mov	 cl, BYTE PTR [esi]
  00028	0f b6 c1	 movzx	 eax, cl
  0002b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002e	83 f8 43	 cmp	 eax, 67			; 00000043H
  00031	77 0e		 ja	 SHORT $LN12@SetNextEff
  00033	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN20@SetNextEff[eax]
  0003a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN23@SetNextEff[eax*4]
$LN12@SetNextEff:

; 514  :         {
; 515  : 		case ADD_OPTION_LIFE:
; 516  : 		case ADD_OPTION_MANA:
; 517  : 		case ADD_OPTION_STRENGTH:
; 518  : 		case ADD_OPTION_DEXTERITY:
; 519  : 		case ADD_OPTION_VITALITY:
; 520  : 		case ADD_OPTION_ENERGY:
; 521  : 		case ADD_OPTION_LEADERSHIP:
; 522  : 		case ADD_OPTION_REFLECT:
; 523  : 		case ADD_OPTION_LEVEL_BP:
; 524  : 		case ADD_OPTION_LEVEL_SD:
; 525  : 		case ADD_OPTION_BP:
; 526  : 		case ADD_OPTION_SD:
; 527  : 			break;
; 528  : 		default:
; 529  : 			BuffCount++;
; 530  : 			SetBuffEffect(lpObj, lpObj->pEffectInfo[i].btEffectType1, lpObj->pEffectInfo[i].iEffectValue1);

  00041	ff 76 06	 push	 DWORD PTR [esi+6]
  00044	51		 push	 ecx
  00045	53		 push	 ebx
  00046	8b ca		 mov	 ecx, edx
  00048	e8 00 00 00 00	 call	 ?SetBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CBuffEffect::SetBuffEffect
  0004d	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN5@SetNextEff:

; 531  :             break;
; 532  :         }
; 533  : 		
; 534  : 		switch ( lpObj->pEffectInfo[i].btEffectType2 )

  00050	8a 4e 01	 mov	 cl, BYTE PTR [esi+1]
  00053	0f b6 c1	 movzx	 eax, cl
  00056	83 c0 fc	 add	 eax, -4			; fffffffcH
  00059	83 f8 43	 cmp	 eax, 67			; 00000043H
  0005c	77 0e		 ja	 SHORT $LN14@SetNextEff
  0005e	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN21@SetNextEff[eax]
  00065	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN24@SetNextEff[eax*4]
$LN14@SetNextEff:

; 535  : 		{
; 536  : 		case ADD_OPTION_LIFE:
; 537  : 		case ADD_OPTION_MANA:
; 538  : 		case ADD_OPTION_STRENGTH:
; 539  : 		case ADD_OPTION_DEXTERITY:
; 540  : 		case ADD_OPTION_VITALITY:
; 541  : 		case ADD_OPTION_ENERGY:
; 542  : 		case ADD_OPTION_LEADERSHIP:
; 543  : 		case ADD_OPTION_REFLECT:
; 544  : 		case ADD_OPTION_LEVEL_BP:
; 545  : 		case ADD_OPTION_LEVEL_SD:
; 546  : 		case ADD_OPTION_BP:
; 547  : 		case ADD_OPTION_SD:
; 548  : 			break;
; 549  : 		default:
; 550  : 			BuffCount++;
; 551  : 			SetBuffEffect(lpObj, lpObj->pEffectInfo[i].btEffectType2, lpObj->pEffectInfo[i].iEffectValue2);

  0006c	ff 76 0a	 push	 DWORD PTR [esi+10]
  0006f	51		 push	 ecx
  00070	53		 push	 ebx
  00071	8b ca		 mov	 ecx, edx
  00073	e8 00 00 00 00	 call	 ?SetBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CBuffEffect::SetBuffEffect
$LN2@SetNextEff:

; 504  : 		return;
; 505  : 
; 506  : 	int BuffCount = 0;
; 507  : 
; 508  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  00078	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  0007b	83 c6 1c	 add	 esi, 28			; 0000001cH
  0007e	83 ef 01	 sub	 edi, 1
  00081	75 9d		 jne	 SHORT $LL4@SetNextEff
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
$LN3@SetNextEff:
  00085	5b		 pop	 ebx

; 552  : 			break;
; 553  :         }
; 554  : 	}
; 555  : }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
$LN23@SetNextEff:
  0008c	00 00 00 00	 DD	 $LN5@SetNextEff
  00090	00 00 00 00	 DD	 $LN12@SetNextEff
$LN20@SetNextEff:
  00094	00		 DB	 0
  00095	00		 DB	 0
  00096	01		 DB	 1
  00097	01		 DB	 1
  00098	01		 DB	 1
  00099	00		 DB	 0
  0009a	00		 DB	 0
  0009b	00		 DB	 0
  0009c	00		 DB	 0
  0009d	00		 DB	 0
  0009e	01		 DB	 1
  0009f	01		 DB	 1
  000a0	01		 DB	 1
  000a1	01		 DB	 1
  000a2	01		 DB	 1
  000a3	01		 DB	 1
  000a4	01		 DB	 1
  000a5	01		 DB	 1
  000a6	01		 DB	 1
  000a7	01		 DB	 1
  000a8	00		 DB	 0
  000a9	01		 DB	 1
  000aa	01		 DB	 1
  000ab	01		 DB	 1
  000ac	01		 DB	 1
  000ad	01		 DB	 1
  000ae	01		 DB	 1
  000af	01		 DB	 1
  000b0	01		 DB	 1
  000b1	01		 DB	 1
  000b2	01		 DB	 1
  000b3	01		 DB	 1
  000b4	01		 DB	 1
  000b5	01		 DB	 1
  000b6	01		 DB	 1
  000b7	01		 DB	 1
  000b8	01		 DB	 1
  000b9	01		 DB	 1
  000ba	01		 DB	 1
  000bb	01		 DB	 1
  000bc	01		 DB	 1
  000bd	01		 DB	 1
  000be	01		 DB	 1
  000bf	01		 DB	 1
  000c0	01		 DB	 1
  000c1	01		 DB	 1
  000c2	01		 DB	 1
  000c3	01		 DB	 1
  000c4	01		 DB	 1
  000c5	01		 DB	 1
  000c6	01		 DB	 1
  000c7	01		 DB	 1
  000c8	01		 DB	 1
  000c9	01		 DB	 1
  000ca	01		 DB	 1
  000cb	01		 DB	 1
  000cc	01		 DB	 1
  000cd	01		 DB	 1
  000ce	01		 DB	 1
  000cf	01		 DB	 1
  000d0	01		 DB	 1
  000d1	01		 DB	 1
  000d2	00		 DB	 0
  000d3	00		 DB	 0
  000d4	01		 DB	 1
  000d5	01		 DB	 1
  000d6	00		 DB	 0
  000d7	00		 DB	 0
$LN24@SetNextEff:
  000d8	00 00 00 00	 DD	 $LN2@SetNextEff
  000dc	00 00 00 00	 DD	 $LN14@SetNextEff
$LN21@SetNextEff:
  000e0	00		 DB	 0
  000e1	00		 DB	 0
  000e2	01		 DB	 1
  000e3	01		 DB	 1
  000e4	01		 DB	 1
  000e5	00		 DB	 0
  000e6	00		 DB	 0
  000e7	00		 DB	 0
  000e8	00		 DB	 0
  000e9	00		 DB	 0
  000ea	01		 DB	 1
  000eb	01		 DB	 1
  000ec	01		 DB	 1
  000ed	01		 DB	 1
  000ee	01		 DB	 1
  000ef	01		 DB	 1
  000f0	01		 DB	 1
  000f1	01		 DB	 1
  000f2	01		 DB	 1
  000f3	01		 DB	 1
  000f4	00		 DB	 0
  000f5	01		 DB	 1
  000f6	01		 DB	 1
  000f7	01		 DB	 1
  000f8	01		 DB	 1
  000f9	01		 DB	 1
  000fa	01		 DB	 1
  000fb	01		 DB	 1
  000fc	01		 DB	 1
  000fd	01		 DB	 1
  000fe	01		 DB	 1
  000ff	01		 DB	 1
  00100	01		 DB	 1
  00101	01		 DB	 1
  00102	01		 DB	 1
  00103	01		 DB	 1
  00104	01		 DB	 1
  00105	01		 DB	 1
  00106	01		 DB	 1
  00107	01		 DB	 1
  00108	01		 DB	 1
  00109	01		 DB	 1
  0010a	01		 DB	 1
  0010b	01		 DB	 1
  0010c	01		 DB	 1
  0010d	01		 DB	 1
  0010e	01		 DB	 1
  0010f	01		 DB	 1
  00110	01		 DB	 1
  00111	01		 DB	 1
  00112	01		 DB	 1
  00113	01		 DB	 1
  00114	01		 DB	 1
  00115	01		 DB	 1
  00116	01		 DB	 1
  00117	01		 DB	 1
  00118	01		 DB	 1
  00119	01		 DB	 1
  0011a	01		 DB	 1
  0011b	01		 DB	 1
  0011c	01		 DB	 1
  0011d	01		 DB	 1
  0011e	00		 DB	 0
  0011f	00		 DB	 0
  00120	01		 DB	 1
  00121	01		 DB	 1
  00122	00		 DB	 0
  00123	00		 DB	 0
?SetNextEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CBuffEffect::SetNextEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffect.cpp
;	COMDAT ?SetPrevEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?SetPrevEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CBuffEffect::SetPrevEffect, COMDAT
; _this$ = ecx

; 446  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 447  : 	if( lpObj == NULL )

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00008	8b d1		 mov	 edx, ecx
  0000a	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
  0000d	85 db		 test	 ebx, ebx
  0000f	74 74		 je	 SHORT $LN3@SetPrevEff

; 448  : 		return;
; 449  : 
; 450  : 	int BuffCount = 0;
; 451  : 
; 452  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8d b3 da 01 00
	00		 lea	 esi, DWORD PTR [ebx+474]
  00019	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  0001e	66 90		 npad	 2
$LL4@SetPrevEff:

; 453  : 	{
; 454  : 		if( !lpObj->pEffectInfo[i].btEffectNum )

  00020	80 7e fe 00	 cmp	 BYTE PTR [esi-2], 0
  00024	74 52		 je	 SHORT $LN2@SetPrevEff

; 455  : 			continue;
; 456  : 
; 457  : 		switch ( lpObj->pEffectInfo[i].btEffectType1 )

  00026	8a 0e		 mov	 cl, BYTE PTR [esi]
  00028	0f b6 c1	 movzx	 eax, cl
  0002b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002e	83 f8 43	 cmp	 eax, 67			; 00000043H
  00031	77 1d		 ja	 SHORT $LN12@SetPrevEff
  00033	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN20@SetPrevEff[eax]
  0003a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN23@SetPrevEff[eax*4]
$LN11@SetPrevEff:

; 458  :         {
; 459  : 		case ADD_OPTION_LIFE:
; 460  : 		case ADD_OPTION_MANA:
; 461  : 		case ADD_OPTION_STRENGTH:
; 462  : 		case ADD_OPTION_DEXTERITY:
; 463  : 		case ADD_OPTION_VITALITY:
; 464  : 		case ADD_OPTION_ENERGY:
; 465  : 		case ADD_OPTION_LEADERSHIP:
; 466  : 		case ADD_OPTION_REFLECT:
; 467  : 		case ADD_OPTION_LEVEL_BP:
; 468  : 		case ADD_OPTION_LEVEL_SD:
; 469  : 		case ADD_OPTION_BP:
; 470  : 		case ADD_OPTION_SD:
; 471  : 			BuffCount++;
; 472  : 			SetBuffEffect(lpObj, lpObj->pEffectInfo[i].btEffectType1, lpObj->pEffectInfo[i].iEffectValue1);

  00041	ff 76 06	 push	 DWORD PTR [esi+6]
  00044	51		 push	 ecx
  00045	53		 push	 ebx
  00046	8b ca		 mov	 ecx, edx
  00048	e8 00 00 00 00	 call	 ?SetBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CBuffEffect::SetBuffEffect
  0004d	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN12@SetPrevEff:

; 473  :             break;
; 474  :           default:
; 475  :             break;
; 476  :         }
; 477  : 		
; 478  : 		switch ( lpObj->pEffectInfo[i].btEffectType2 )

  00050	8a 4e 01	 mov	 cl, BYTE PTR [esi+1]
  00053	0f b6 c1	 movzx	 eax, cl
  00056	83 c0 fc	 add	 eax, -4			; fffffffcH
  00059	83 f8 43	 cmp	 eax, 67			; 00000043H
  0005c	77 1a		 ja	 SHORT $LN2@SetPrevEff
  0005e	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN21@SetPrevEff[eax]
  00065	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN24@SetPrevEff[eax*4]
$LN13@SetPrevEff:

; 479  : 		{
; 480  : 		case ADD_OPTION_LIFE:
; 481  : 		case ADD_OPTION_MANA:
; 482  : 		case ADD_OPTION_STRENGTH:
; 483  : 		case ADD_OPTION_DEXTERITY:
; 484  : 		case ADD_OPTION_VITALITY:
; 485  : 		case ADD_OPTION_ENERGY:
; 486  : 		case ADD_OPTION_LEADERSHIP:
; 487  : 		case ADD_OPTION_REFLECT:
; 488  : 		case ADD_OPTION_LEVEL_BP:
; 489  : 		case ADD_OPTION_LEVEL_SD:
; 490  : 		case ADD_OPTION_BP:
; 491  : 		case ADD_OPTION_SD:
; 492  : 			BuffCount++;
; 493  : 			SetBuffEffect(lpObj, lpObj->pEffectInfo[i].btEffectType2, lpObj->pEffectInfo[i].iEffectValue2);

  0006c	ff 76 0a	 push	 DWORD PTR [esi+10]
  0006f	51		 push	 ecx
  00070	53		 push	 ebx
  00071	8b ca		 mov	 ecx, edx
  00073	e8 00 00 00 00	 call	 ?SetBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CBuffEffect::SetBuffEffect
$LN2@SetPrevEff:

; 448  : 		return;
; 449  : 
; 450  : 	int BuffCount = 0;
; 451  : 
; 452  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  00078	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  0007b	83 c6 1c	 add	 esi, 28			; 0000001cH
  0007e	83 ef 01	 sub	 edi, 1
  00081	75 9d		 jne	 SHORT $LL4@SetPrevEff
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
$LN3@SetPrevEff:
  00085	5b		 pop	 ebx

; 494  : 			break;
; 495  : 		default:
; 496  : 			break;
; 497  :         }
; 498  : 	}
; 499  : }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
$LN23@SetPrevEff:
  0008c	00 00 00 00	 DD	 $LN11@SetPrevEff
  00090	00 00 00 00	 DD	 $LN12@SetPrevEff
$LN20@SetPrevEff:
  00094	00		 DB	 0
  00095	00		 DB	 0
  00096	01		 DB	 1
  00097	01		 DB	 1
  00098	01		 DB	 1
  00099	00		 DB	 0
  0009a	00		 DB	 0
  0009b	00		 DB	 0
  0009c	00		 DB	 0
  0009d	00		 DB	 0
  0009e	01		 DB	 1
  0009f	01		 DB	 1
  000a0	01		 DB	 1
  000a1	01		 DB	 1
  000a2	01		 DB	 1
  000a3	01		 DB	 1
  000a4	01		 DB	 1
  000a5	01		 DB	 1
  000a6	01		 DB	 1
  000a7	01		 DB	 1
  000a8	00		 DB	 0
  000a9	01		 DB	 1
  000aa	01		 DB	 1
  000ab	01		 DB	 1
  000ac	01		 DB	 1
  000ad	01		 DB	 1
  000ae	01		 DB	 1
  000af	01		 DB	 1
  000b0	01		 DB	 1
  000b1	01		 DB	 1
  000b2	01		 DB	 1
  000b3	01		 DB	 1
  000b4	01		 DB	 1
  000b5	01		 DB	 1
  000b6	01		 DB	 1
  000b7	01		 DB	 1
  000b8	01		 DB	 1
  000b9	01		 DB	 1
  000ba	01		 DB	 1
  000bb	01		 DB	 1
  000bc	01		 DB	 1
  000bd	01		 DB	 1
  000be	01		 DB	 1
  000bf	01		 DB	 1
  000c0	01		 DB	 1
  000c1	01		 DB	 1
  000c2	01		 DB	 1
  000c3	01		 DB	 1
  000c4	01		 DB	 1
  000c5	01		 DB	 1
  000c6	01		 DB	 1
  000c7	01		 DB	 1
  000c8	01		 DB	 1
  000c9	01		 DB	 1
  000ca	01		 DB	 1
  000cb	01		 DB	 1
  000cc	01		 DB	 1
  000cd	01		 DB	 1
  000ce	01		 DB	 1
  000cf	01		 DB	 1
  000d0	01		 DB	 1
  000d1	01		 DB	 1
  000d2	00		 DB	 0
  000d3	00		 DB	 0
  000d4	01		 DB	 1
  000d5	01		 DB	 1
  000d6	00		 DB	 0
  000d7	00		 DB	 0
$LN24@SetPrevEff:
  000d8	00 00 00 00	 DD	 $LN13@SetPrevEff
  000dc	00 00 00 00	 DD	 $LN2@SetPrevEff
$LN21@SetPrevEff:
  000e0	00		 DB	 0
  000e1	00		 DB	 0
  000e2	01		 DB	 1
  000e3	01		 DB	 1
  000e4	01		 DB	 1
  000e5	00		 DB	 0
  000e6	00		 DB	 0
  000e7	00		 DB	 0
  000e8	00		 DB	 0
  000e9	00		 DB	 0
  000ea	01		 DB	 1
  000eb	01		 DB	 1
  000ec	01		 DB	 1
  000ed	01		 DB	 1
  000ee	01		 DB	 1
  000ef	01		 DB	 1
  000f0	01		 DB	 1
  000f1	01		 DB	 1
  000f2	01		 DB	 1
  000f3	01		 DB	 1
  000f4	00		 DB	 0
  000f5	01		 DB	 1
  000f6	01		 DB	 1
  000f7	01		 DB	 1
  000f8	01		 DB	 1
  000f9	01		 DB	 1
  000fa	01		 DB	 1
  000fb	01		 DB	 1
  000fc	01		 DB	 1
  000fd	01		 DB	 1
  000fe	01		 DB	 1
  000ff	01		 DB	 1
  00100	01		 DB	 1
  00101	01		 DB	 1
  00102	01		 DB	 1
  00103	01		 DB	 1
  00104	01		 DB	 1
  00105	01		 DB	 1
  00106	01		 DB	 1
  00107	01		 DB	 1
  00108	01		 DB	 1
  00109	01		 DB	 1
  0010a	01		 DB	 1
  0010b	01		 DB	 1
  0010c	01		 DB	 1
  0010d	01		 DB	 1
  0010e	01		 DB	 1
  0010f	01		 DB	 1
  00110	01		 DB	 1
  00111	01		 DB	 1
  00112	01		 DB	 1
  00113	01		 DB	 1
  00114	01		 DB	 1
  00115	01		 DB	 1
  00116	01		 DB	 1
  00117	01		 DB	 1
  00118	01		 DB	 1
  00119	01		 DB	 1
  0011a	01		 DB	 1
  0011b	01		 DB	 1
  0011c	01		 DB	 1
  0011d	01		 DB	 1
  0011e	00		 DB	 0
  0011f	00		 DB	 0
  00120	01		 DB	 1
  00121	01		 DB	 1
  00122	00		 DB	 0
  00123	00		 DB	 0
?SetPrevEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CBuffEffect::SetPrevEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffect.cpp
;	COMDAT ?AbsorbHP@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
tv307 = 12						; size = 4
_iREDUCE_HP$ = 12					; size = 4
?AbsorbHP@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@H@Z PROC	; CBuffEffect::AbsorbHP, COMDAT
; _this$ = ecx

; 390  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 391  : 	int ReduceHP = 0;
; 392  : 	int ReduceShield = 0;
; 393  : 
; 394  : 	ReduceHP = iREDUCE_HP;
; 395  : 	ReduceShield = ReduceHP;
; 396  : 
; 397  : 	if( lpObj->Live == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _iREDUCE_HP$[ebp]
  0000b	80 7e 51 00	 cmp	 BYTE PTR [esi+81], 0
  0000f	0f 84 41 01 00
	00		 je	 $LN9@AbsorbHP

; 398  : 	{
; 399  : 		return;
; 400  : 	}
; 401  : 	
; 402  : 	if( lpObj->lpAttackObj != NULL &&
; 403  : 		lpObj->Type == OBJ_USER &&

  00015	8b 86 b4 05 00
	00		 mov	 eax, DWORD PTR [esi+1460]
  0001b	53		 push	 ebx
  0001c	85 c0		 test	 eax, eax
  0001e	0f 84 e0 00 00
	00		 je	 $LN3@AbsorbHP
  00024	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  00028	0f 85 d6 00 00
	00		 jne	 $LN3@AbsorbHP
  0002e	80 78 50 01	 cmp	 BYTE PTR [eax+80], 1
  00032	0f 85 cc 00 00
	00		 jne	 $LN3@AbsorbHP

; 411  : 			lpObj->Life -= ReduceHP;

  00038	f3 0f 10 86 d8
	00 00 00	 movss	 xmm0, DWORD PTR [esi+216]
  00040	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00045	6b cf 5a	 imul	 ecx, edi, 90
  00048	f7 e9		 imul	 ecx
  0004a	8b 8e 2c 01 00
	00		 mov	 ecx, DWORD PTR [esi+300]
  00050	8b c1		 mov	 eax, ecx
  00052	c1 fa 05	 sar	 edx, 5
  00055	8b da		 mov	 ebx, edx
  00057	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0005a	03 da		 add	 ebx, edx
  0005c	2b c3		 sub	 eax, ebx
  0005e	2b fb		 sub	 edi, ebx
  00060	85 c0		 test	 eax, eax
  00062	7e 08		 jle	 SHORT $LN5@AbsorbHP

; 404  : 		lpObj->lpAttackObj->Type == OBJ_USER )
; 405  : 	{
; 406  : 		ReduceShield = ReduceHP * 90 / 100;
; 407  : 		ReduceHP -= ReduceShield;
; 408  : 		if( lpObj->iShield - ReduceShield > 0 )
; 409  : 		{
; 410  : 			lpObj->iShield -= ReduceShield;

  00064	89 86 2c 01 00
	00		 mov	 DWORD PTR [esi+300], eax

; 412  : 		}
; 413  : 		else

  0006a	eb 10		 jmp	 SHORT $LN12@AbsorbHP
$LN5@AbsorbHP:

; 414  : 		{
; 415  : 			ReduceHP = ReduceHP + (ReduceShield - lpObj->iShield);

  0006c	2b d9		 sub	 ebx, ecx

; 416  : 			ReduceShield = lpObj->iShield;
; 417  : 			lpObj->Life -= ReduceHP;
; 418  : 			lpObj->iShield = 0;

  0006e	c7 86 2c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+300], 0
  00078	03 fb		 add	 edi, ebx
  0007a	8b d9		 mov	 ebx, ecx
$LN12@AbsorbHP:

; 419  : 		}
; 420  : 
; 421  : 		lpObj->lpAttackObj->Life += ReduceHP;

  0007c	8b 86 b4 05 00
	00		 mov	 eax, DWORD PTR [esi+1460]
  00082	66 0f 6e cf	 movd	 xmm1, edi
  00086	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00089	f3 0f 5c c1	 subss	 xmm0, xmm1
  0008d	f3 0f 11 86 d8
	00 00 00	 movss	 DWORD PTR [esi+216], xmm0
  00095	f3 0f 10 80 d8
	00 00 00	 movss	 xmm0, DWORD PTR [eax+216]
  0009d	f3 0f 58 c1	 addss	 xmm0, xmm1
  000a1	f3 0f 11 80 d8
	00 00 00	 movss	 DWORD PTR [eax+216], xmm0

; 422  : 
; 423  : 		if( lpObj->lpAttackObj->Life > (lpObj->lpAttackObj->MaxLife + lpObj->lpAttackObj->AddLife) )

  000a9	8b 86 b4 05 00
	00		 mov	 eax, DWORD PTR [esi+1460]
  000af	66 0f 6e 88 24
	01 00 00	 movd	 xmm1, DWORD PTR [eax+292]
  000b7	f3 0f 10 80 d8
	00 00 00	 movss	 xmm0, DWORD PTR [eax+216]
  000bf	0f 5b c9	 cvtdq2ps xmm1, xmm1
  000c2	f3 0f 58 88 dc
	00 00 00	 addss	 xmm1, DWORD PTR [eax+220]
  000ca	0f 2f c1	 comiss	 xmm0, xmm1
  000cd	76 08		 jbe	 SHORT $LN7@AbsorbHP

; 424  : 			lpObj->lpAttackObj->Life = (lpObj->lpAttackObj->MaxLife + lpObj->lpAttackObj->AddLife);

  000cf	f3 0f 11 88 d8
	00 00 00	 movss	 DWORD PTR [eax+216], xmm1
$LN7@AbsorbHP:

; 425  : 
; 426  : 		GCReFillSend(lpObj->lpAttackObj->m_Index, (WORD)lpObj->lpAttackObj->Life, -1, 0, lpObj->lpAttackObj->iShield);

  000d7	8b 8e b4 05 00
	00		 mov	 ecx, DWORD PTR [esi+1460]
  000dd	0f b7 81 2c 01
	00 00		 movzx	 eax, WORD PTR [ecx+300]
  000e4	50		 push	 eax
  000e5	f3 0f 2c 81 d8
	00 00 00	 cvttss2si eax, DWORD PTR [ecx+216]
  000ed	6a 00		 push	 0
  000ef	68 ff 00 00 00	 push	 255			; 000000ffH
  000f4	0f b7 c0	 movzx	 eax, ax
  000f7	50		 push	 eax
  000f8	ff 31		 push	 DWORD PTR [ecx]
  000fa	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend
  000ff	83 c4 14	 add	 esp, 20			; 00000014H

; 427  : 	}
; 428  : 	else

  00102	eb 1d		 jmp	 SHORT $LN4@AbsorbHP
$LN3@AbsorbHP:

; 429  : 	{
; 430  : 		ReduceShield = 0;
; 431  : 		lpObj->Life -= ReduceHP;

  00104	f3 0f 10 8e d8
	00 00 00	 movss	 xmm1, DWORD PTR [esi+216]
  0010c	33 db		 xor	 ebx, ebx
  0010e	66 0f 6e c7	 movd	 xmm0, edi
  00112	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00115	f3 0f 5c c8	 subss	 xmm1, xmm0
  00119	f3 0f 11 8e d8
	00 00 00	 movss	 DWORD PTR [esi+216], xmm1
$LN4@AbsorbHP:

; 432  : 	}
; 433  : 
; 434  : 	if( lpObj->Life < 0.0f)

  00121	0f 57 c0	 xorps	 xmm0, xmm0
  00124	0f 2f 86 d8 00
	00 00		 comiss	 xmm0, DWORD PTR [esi+216]
  0012b	76 0a		 jbe	 SHORT $LN8@AbsorbHP

; 435  : 	{
; 436  : 		lpObj->Life = 0;

  0012d	c7 86 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+216], 0
$LN8@AbsorbHP:

; 437  : 	}
; 438  : 
; 439  : 	if( lpObj->lpAttackObj != NULL )

  00137	8b 86 b4 05 00
	00		 mov	 eax, DWORD PTR [esi+1460]
  0013d	85 c0		 test	 eax, eax
  0013f	74 14		 je	 SHORT $LN11@AbsorbHP

; 440  : 	{
; 441  : 		gObjLifeCheck(lpObj,lpObj->lpAttackObj,ReduceHP,3,0,0,0,ReduceShield);

  00141	53		 push	 ebx
  00142	6a 00		 push	 0
  00144	6a 00		 push	 0
  00146	6a 00		 push	 0
  00148	6a 03		 push	 3
  0014a	57		 push	 edi
  0014b	50		 push	 eax
  0014c	56		 push	 esi
  0014d	e8 00 00 00 00	 call	 ?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z ; gObjLifeCheck
  00152	83 c4 20	 add	 esp, 32			; 00000020H
$LN11@AbsorbHP:
  00155	5b		 pop	 ebx
$LN9@AbsorbHP:
  00156	5f		 pop	 edi
  00157	5e		 pop	 esi

; 442  : 	}	
; 443  : }

  00158	5d		 pop	 ebp
  00159	c2 08 00	 ret	 8
?AbsorbHP@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP	; CBuffEffect::AbsorbHP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffect.cpp
;	COMDAT ?PoisonEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@E@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_PoisonRate$ = 12					; size = 1
?PoisonEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@E@Z PROC ; CBuffEffect::PoisonEffect, COMDAT
; _this$ = ecx

; 354  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 355  : 	int DecreaseHealthPoint = 0;
; 356  : 	int DecreaseShiledPoint = 0;
; 357  : 
; 358  : 	DecreaseHealthPoint = (int)(PoisonRate * lpObj->Life / 100.0);

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _PoisonRate$[ebp]
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	66 0f 6e c0	 movd	 xmm0, eax
  00010	f3 0f 10 89 d8
	00 00 00	 movss	 xmm1, DWORD PTR [ecx+216]
  00018	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 359  : 	DecreaseShiledPoint = DecreaseHealthPoint;
; 360  : 
; 361  : 	if(lpObj->lpAttackObj != 0 && lpObj->Type == OBJ_USER && lpObj->lpAttackObj->Type == OBJ_USER)

  0001b	8b 91 b4 05 00
	00		 mov	 edx, DWORD PTR [ecx+1460]
  00021	57		 push	 edi
  00022	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00026	0f 5a c0	 cvtps2pd xmm0, xmm0
  00029	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4059000000000000
  00031	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00035	8b d8		 mov	 ebx, eax
  00037	85 d2		 test	 edx, edx
  00039	74 34		 je	 SHORT $LN2@PoisonEffe
  0003b	80 79 50 01	 cmp	 BYTE PTR [ecx+80], 1
  0003f	75 2e		 jne	 SHORT $LN2@PoisonEffe
  00041	80 7a 50 01	 cmp	 BYTE PTR [edx+80], 1
  00045	75 28		 jne	 SHORT $LN2@PoisonEffe

; 362  : 	{
; 363  : 		if(lpObj->iShield-DecreaseShiledPoint > 0)

  00047	8b b9 2c 01 00
	00		 mov	 edi, DWORD PTR [ecx+300]
  0004d	8b f7		 mov	 esi, edi
  0004f	2b f0		 sub	 esi, eax
  00051	85 f6		 test	 esi, esi
  00053	7e 0a		 jle	 SHORT $LN4@PoisonEffe

; 364  : 		{
; 365  : 			lpObj->iShield -= DecreaseShiledPoint;

  00055	89 b1 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], esi

; 366  : 			DecreaseHealthPoint = 0;

  0005b	33 c0		 xor	 eax, eax

; 367  : 		}
; 368  : 		else

  0005d	eb 25		 jmp	 SHORT $LN3@PoisonEffe
$LN4@PoisonEffe:

; 369  : 		{
; 370  : 			DecreaseHealthPoint = DecreaseShiledPoint - lpObj->iShield;

  0005f	2b c7		 sub	 eax, edi

; 371  : 			DecreaseShiledPoint = lpObj->iShield;
; 372  : 			lpObj->Life -= DecreaseHealthPoint;
; 373  : 			lpObj->iShield = 0;

  00061	c7 81 2c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+300], 0
  0006b	8b df		 mov	 ebx, edi

; 374  : 		}
; 375  : 	}
; 376  : 	else

  0006d	eb 02		 jmp	 SHORT $LN9@PoisonEffe
$LN2@PoisonEffe:

; 379  : 		DecreaseShiledPoint = 0;

  0006f	33 db		 xor	 ebx, ebx
$LN9@PoisonEffe:
  00071	66 0f 6e c0	 movd	 xmm0, eax

; 377  : 	{
; 378  : 		lpObj->Life -= DecreaseHealthPoint;

  00075	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00078	f3 0f 5c c8	 subss	 xmm1, xmm0
  0007c	f3 0f 11 89 d8
	00 00 00	 movss	 DWORD PTR [ecx+216], xmm1
$LN3@PoisonEffe:

; 380  : 	}
; 381  : 	
; 382  : 	if(lpObj->Life < 0.0f)

  00084	0f 57 c0	 xorps	 xmm0, xmm0
  00087	0f 2f 81 d8 00
	00 00		 comiss	 xmm0, DWORD PTR [ecx+216]
  0008e	76 0a		 jbe	 SHORT $LN6@PoisonEffe

; 383  : 		lpObj->Life = 0.0f;

  00090	c7 81 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+216], 0
$LN6@PoisonEffe:

; 384  : 
; 385  : 	if(lpObj->lpAttackObj != 0)

  0009a	85 d2		 test	 edx, edx
  0009c	74 14		 je	 SHORT $LN7@PoisonEffe

; 386  : 		gObjLifeCheck(lpObj, lpObj->lpAttackObj, DecreaseHealthPoint, 2, 0, 0, 1, DecreaseShiledPoint);

  0009e	53		 push	 ebx
  0009f	6a 01		 push	 1
  000a1	6a 00		 push	 0
  000a3	6a 00		 push	 0
  000a5	6a 02		 push	 2
  000a7	50		 push	 eax
  000a8	52		 push	 edx
  000a9	51		 push	 ecx
  000aa	e8 00 00 00 00	 call	 ?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z ; gObjLifeCheck
  000af	83 c4 20	 add	 esp, 32			; 00000020H
$LN7@PoisonEffe:
  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx

; 387  : }

  000b5	5d		 pop	 ebp
  000b6	c2 08 00	 ret	 8
?PoisonEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@E@Z ENDP ; CBuffEffect::PoisonEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffect.cpp
;	COMDAT ?GiveDamageEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_Damage$ = 12						; size = 4
?GiveDamageEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CBuffEffect::GiveDamageEffect, COMDAT
; _this$ = ecx

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 313  : 	int DecreaseHealthPoint = 0;
; 314  : 	int DecreaseShiledPoint = 0;
; 315  : 
; 316  : 	DecreaseHealthPoint = Damage;
; 317  : 	DecreaseShiledPoint = DecreaseHealthPoint;
; 318  : 
; 319  : 	if( !lpObj->Live )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _Damage$[ebp]
  0000b	80 7e 51 00	 cmp	 BYTE PTR [esi+81], 0
  0000f	0f 84 a5 00 00
	00		 je	 $LN8@GiveDamage

; 320  : 		return;
; 321  : 
; 322  : 	if(lpObj->lpAttackObj != 0 && lpObj->Type == OBJ_USER && lpObj->lpAttackObj->Type == OBJ_USER)

  00015	53		 push	 ebx
  00016	8b 9e b4 05 00
	00		 mov	 ebx, DWORD PTR [esi+1460]
  0001c	85 db		 test	 ebx, ebx
  0001e	74 52		 je	 SHORT $LN3@GiveDamage
  00020	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  00024	75 4c		 jne	 SHORT $LN3@GiveDamage
  00026	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  0002a	75 46		 jne	 SHORT $LN3@GiveDamage

; 330  : 			lpObj->Life -= DecreaseHealthPoint;

  0002c	f3 0f 10 8e d8
	00 00 00	 movss	 xmm1, DWORD PTR [esi+216]
  00034	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00039	6b cf 5a	 imul	 ecx, edi, 90
  0003c	f7 e9		 imul	 ecx
  0003e	c1 fa 05	 sar	 edx, 5
  00041	8b c2		 mov	 eax, edx
  00043	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00046	03 c2		 add	 eax, edx
  00048	8b 96 2c 01 00
	00		 mov	 edx, DWORD PTR [esi+300]
  0004e	8b ca		 mov	 ecx, edx
  00050	2b f8		 sub	 edi, eax
  00052	2b c8		 sub	 ecx, eax
  00054	85 c9		 test	 ecx, ecx
  00056	7e 08		 jle	 SHORT $LN5@GiveDamage

; 323  : 	{
; 324  : 		DecreaseShiledPoint = 90 * DecreaseHealthPoint / 100;
; 325  : 		DecreaseHealthPoint -= DecreaseShiledPoint;
; 326  : 
; 327  : 		if(lpObj->iShield-DecreaseShiledPoint > 0)
; 328  : 		{
; 329  : 			lpObj->iShield -= DecreaseShiledPoint;

  00058	89 8e 2c 01 00
	00		 mov	 DWORD PTR [esi+300], ecx

; 331  : 		}
; 332  : 		else

  0005e	eb 1c		 jmp	 SHORT $LN11@GiveDamage
$LN5@GiveDamage:

; 333  : 		{
; 334  : 			DecreaseHealthPoint += DecreaseShiledPoint - lpObj->iShield;

  00060	2b c2		 sub	 eax, edx

; 335  : 			DecreaseShiledPoint = lpObj->iShield;
; 336  : 			lpObj->Life -= DecreaseHealthPoint;
; 337  : 			lpObj->iShield = 0;

  00062	c7 86 2c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+300], 0
  0006c	03 f8		 add	 edi, eax
  0006e	8b c2		 mov	 eax, edx

; 338  : 		}
; 339  : 	}
; 340  : 	else

  00070	eb 0a		 jmp	 SHORT $LN11@GiveDamage
$LN3@GiveDamage:

; 341  : 	{
; 342  : 		DecreaseShiledPoint = 0;
; 343  : 		lpObj->Life -= DecreaseHealthPoint;

  00072	f3 0f 10 8e d8
	00 00 00	 movss	 xmm1, DWORD PTR [esi+216]
  0007a	33 c0		 xor	 eax, eax
$LN11@GiveDamage:
  0007c	66 0f 6e c7	 movd	 xmm0, edi
  00080	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00083	f3 0f 5c c8	 subss	 xmm1, xmm0
  00087	0f 57 c0	 xorps	 xmm0, xmm0

; 344  : 	}
; 345  : 
; 346  : 	if(lpObj->Life < 0.0f)

  0008a	0f 2f c1	 comiss	 xmm0, xmm1
  0008d	f3 0f 11 8e d8
	00 00 00	 movss	 DWORD PTR [esi+216], xmm1
  00095	76 0a		 jbe	 SHORT $LN7@GiveDamage

; 347  : 		lpObj->Life = 0.0f;

  00097	c7 86 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+216], 0
$LN7@GiveDamage:

; 348  : 
; 349  : 	if(lpObj->lpAttackObj != 0)

  000a1	85 db		 test	 ebx, ebx
  000a3	74 14		 je	 SHORT $LN10@GiveDamage

; 350  : 		gObjLifeCheck(lpObj, lpObj->lpAttackObj, DecreaseHealthPoint, 3, 0, 0, 0, DecreaseShiledPoint);

  000a5	50		 push	 eax
  000a6	6a 00		 push	 0
  000a8	6a 00		 push	 0
  000aa	6a 00		 push	 0
  000ac	6a 03		 push	 3
  000ae	57		 push	 edi
  000af	53		 push	 ebx
  000b0	56		 push	 esi
  000b1	e8 00 00 00 00	 call	 ?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z ; gObjLifeCheck
  000b6	83 c4 20	 add	 esp, 32			; 00000020H
$LN10@GiveDamage:
  000b9	5b		 pop	 ebx
$LN8@GiveDamage:
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi

; 351  : }

  000bc	5d		 pop	 ebp
  000bd	c2 08 00	 ret	 8
?GiveDamageEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CBuffEffect::GiveDamageEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffect.cpp
;	COMDAT ?SetActiveBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_EffectType$ = 12					; size = 1
_EffectValue$ = 16					; size = 4
?SetActiveBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z PROC ; CBuffEffect::SetActiveBuffEffect, COMDAT
; _this$ = ecx

; 293  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  : 	if( EffectType <= 0 )

  00003	8a 45 0c	 mov	 al, BYTE PTR _EffectType$[ebp]
  00006	84 c0		 test	 al, al
  00008	74 3b		 je	 SHORT $LN2@SetActiveB

; 295  : 		return;
; 296  : 
; 297  : 	switch( EffectType )

  0000a	0f b6 c0	 movzx	 eax, al
  0000d	83 e8 12	 sub	 eax, 18			; 00000012H
  00010	74 28		 je	 SHORT $LN5@SetActiveB
  00012	83 e8 01	 sub	 eax, 1
  00015	74 14		 je	 SHORT $LN6@SetActiveB
  00017	83 e8 55	 sub	 eax, 85			; 00000055H
  0001a	75 29		 jne	 SHORT $LN2@SetActiveB

; 304  : 		break;
; 305  : 	case BUFF_ABSORB_EFFECT:
; 306  : 		AbsorbHP(lpObj,EffectValue);

  0001c	ff 75 10	 push	 DWORD PTR _EffectValue$[ebp]
  0001f	ff 75 08	 push	 DWORD PTR _lpObj$[ebp]
  00022	e8 00 00 00 00	 call	 ?AbsorbHP@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@H@Z ; CBuffEffect::AbsorbHP

; 307  : 		break;
; 308  : 	}
; 309  : }

  00027	5d		 pop	 ebp
  00028	c2 0c 00	 ret	 12			; 0000000cH
$LN6@SetActiveB:

; 301  : 		break;
; 302  : 	case BUFF_POISON_EFFECT:
; 303  : 		PoisonEffect(lpObj,EffectValue);

  0002b	ff 75 10	 push	 DWORD PTR _EffectValue$[ebp]
  0002e	ff 75 08	 push	 DWORD PTR _lpObj$[ebp]
  00031	e8 00 00 00 00	 call	 ?PoisonEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@E@Z ; CBuffEffect::PoisonEffect

; 307  : 		break;
; 308  : 	}
; 309  : }

  00036	5d		 pop	 ebp
  00037	c2 0c 00	 ret	 12			; 0000000cH
$LN5@SetActiveB:

; 298  : 	{
; 299  : 	case BUFF_DAMAGE_EFFECT:
; 300  : 		GiveDamageEffect(lpObj,EffectValue);

  0003a	ff 75 10	 push	 DWORD PTR _EffectValue$[ebp]
  0003d	ff 75 08	 push	 DWORD PTR _lpObj$[ebp]
  00040	e8 00 00 00 00	 call	 ?GiveDamageEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@H@Z ; CBuffEffect::GiveDamageEffect
$LN2@SetActiveB:

; 307  : 		break;
; 308  : 	}
; 309  : }

  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
?SetActiveBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ENDP ; CBuffEffect::SetActiveBuffEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffect.cpp
;	COMDAT ?ClearBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_EffectType$ = 12					; size = 1
_EffectValue$ = 16					; size = 4
?ClearBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z PROC ; CBuffEffect::ClearBuffEffect, COMDAT
; _this$ = ecx

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 157  : 	if( lpObj == NULL || EffectType < 0 )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	0f 84 b5 04 00
	00		 je	 $LN35@ClearBuffE

; 158  : 		return;
; 159  : 
; 160  : 	if( lpObj->Connected < 3 )

  0000f	83 7e 04 03	 cmp	 DWORD PTR [esi+4], 3
  00013	0f 8c ab 04 00
	00		 jl	 $LN35@ClearBuffE

; 161  : 		return;
; 162  : 
; 163  : 	switch( EffectType )

  00019	0f b6 45 0c	 movzx	 eax, BYTE PTR _EffectType$[ebp]
  0001d	48		 dec	 eax
  0001e	83 f8 4a	 cmp	 eax, 74			; 0000004aH
  00021	0f 87 9d 04 00
	00		 ja	 $LN35@ClearBuffE
  00027	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN52@ClearBuffE[eax]
  0002e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN56@ClearBuffE[eax*4]
$LN7@ClearBuffE:

; 164  : 	{
; 165  : 	case ADD_OPTION_SPEED:
; 166  : 		lpObj->m_AttackSpeed -= EffectValue;

  00035	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  00038	29 86 6c 06 00
	00		 sub	 DWORD PTR [esi+1644], eax

; 167  : 		lpObj->m_MagicSpeed -= EffectValue;

  0003e	29 86 70 06 00
	00		 sub	 DWORD PTR [esi+1648], eax
  00044	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
$LN8@ClearBuffE:

; 168  : 		break;
; 169  : 	case ADD_OPTION_DEFENSE:
; 170  : 		lpObj->m_Defense -= EffectValue;

  00049	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  0004c	29 86 74 06 00
	00		 sub	 DWORD PTR [esi+1652], eax

; 171  : 		lpObj->m_MagicDefense -= EffectValue;

  00052	29 86 78 06 00
	00		 sub	 DWORD PTR [esi+1656], eax
  00058	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  00059	5d		 pop	 ebp
  0005a	c2 0c 00	 ret	 12			; 0000000cH
$LN9@ClearBuffE:

; 172  : 		break;
; 173  : 	case ADD_OPTION_LIFE:
; 174  : 		lpObj->AddLife -= EffectValue;

  0005d	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  00060	29 86 24 01 00
	00		 sub	 DWORD PTR [esi+292], eax

; 175  : 		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  00066	66 8b 86 34 01
	00 00		 mov	 ax, WORD PTR [esi+308]
  0006d	66 03 86 30 01
	00 00		 add	 ax, WORD PTR [esi+304]

; 176  :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);
; 177  : 		break;

  00074	e9 e3 03 00 00	 jmp	 $LN53@ClearBuffE
$LN10@ClearBuffE:

; 178  : 	case ADD_OPTION_MANA:
; 179  : 		lpObj->AddMana -= EffectValue;

  00079	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  0007c	29 86 28 01 00
	00		 sub	 DWORD PTR [esi+296], eax

; 180  : 		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  00082	66 8b 86 0c 01
	00 00		 mov	 ax, WORD PTR [esi+268]
  00089	66 03 86 08 01
	00 00		 add	 ax, WORD PTR [esi+264]

; 181  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);
; 182  : 		break;

  00090	e9 5f 03 00 00	 jmp	 $LN54@ClearBuffE
$LN11@ClearBuffE:

; 183  : 	case ADD_OPTION_STRENGTH:
; 184  : 		lpObj->AddStrength -= EffectValue;

  00095	66 8b 45 10	 mov	 ax, WORD PTR _EffectValue$[ebp]
  00099	66 29 86 fc 00
	00 00		 sub	 WORD PTR [esi+252], ax
  000a0	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  000a1	5d		 pop	 ebp
  000a2	c2 0c 00	 ret	 12			; 0000000cH
$LN12@ClearBuffE:

; 185  : 		break;
; 186  : 	case ADD_OPTION_DEXTERITY:
; 187  : 		lpObj->AddDexterity -= EffectValue;

  000a5	66 8b 45 10	 mov	 ax, WORD PTR _EffectValue$[ebp]
  000a9	66 29 86 fe 00
	00 00		 sub	 WORD PTR [esi+254], ax
  000b0	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  000b1	5d		 pop	 ebp
  000b2	c2 0c 00	 ret	 12			; 0000000cH
$LN13@ClearBuffE:

; 188  : 		break;
; 189  : 	case ADD_OPTION_VITALITY:
; 190  : 		lpObj->AddVitality -= EffectValue;

  000b5	66 8b 45 10	 mov	 ax, WORD PTR _EffectValue$[ebp]
  000b9	66 29 86 00 01
	00 00		 sub	 WORD PTR [esi+256], ax
  000c0	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  000c1	5d		 pop	 ebp
  000c2	c2 0c 00	 ret	 12			; 0000000cH
$LN14@ClearBuffE:

; 191  : 		break;
; 192  : 	case ADD_OPTION_ENERGY:
; 193  : 		lpObj->AddEnergy -= EffectValue;

  000c5	66 8b 45 10	 mov	 ax, WORD PTR _EffectValue$[ebp]
  000c9	66 29 86 02 01
	00 00		 sub	 WORD PTR [esi+258], ax
  000d0	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  000d1	5d		 pop	 ebp
  000d2	c2 0c 00	 ret	 12			; 0000000cH
$LN15@ClearBuffE:

; 194  : 		break;
; 195  : 	case ADD_OPTION_LEADERSHIP:
; 196  : 		lpObj->AddLeadership -= EffectValue;

  000d5	66 8b 45 10	 mov	 ax, WORD PTR _EffectValue$[ebp]
  000d9	66 29 86 f6 00
	00 00		 sub	 WORD PTR [esi+246], ax
  000e0	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  000e1	5d		 pop	 ebp
  000e2	c2 0c 00	 ret	 12			; 0000000cH
$LN17@ClearBuffE:

; 197  : 		break;
; 198  : 	case ADD_OPTION_WIZARD_DEFENSE:
; 199  : //        lpObj->m_nSoulBarrierDefence -= EffectValue;
; 200  :         break;
; 201  : 	case ADD_OPTION_MAGIC_DEFENSE:
; 202  : 		lpObj->m_MagicDefense -= EffectValue;

  000e5	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  000e8	29 86 78 06 00
	00		 sub	 DWORD PTR [esi+1656], eax
  000ee	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  000ef	5d		 pop	 ebp
  000f0	c2 0c 00	 ret	 12			; 0000000cH
$LN18@ClearBuffE:

; 203  : 		break;
; 204  : 	case ADD_OPTION_REFLECT:
; 205  : 		lpObj->DamageReflect -= EffectValue;

  000f3	8a 45 10	 mov	 al, BYTE PTR _EffectValue$[ebp]
  000f6	28 86 49 01 00
	00		 sub	 BYTE PTR [esi+329], al
  000fc	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  000fd	5d		 pop	 ebp
  000fe	c2 0c 00	 ret	 12			; 0000000cH
$LN19@ClearBuffE:

; 206  : 		break;
; 207  : 	case SUB_OPTION_ATTACK_RATE:
; 208  : 		lpObj->m_AttackRating += EffectValue;

  00101	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  00104	01 86 68 06 00
	00		 add	 DWORD PTR [esi+1640], eax
  0010a	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  0010b	5d		 pop	 ebp
  0010c	c2 0c 00	 ret	 12			; 0000000cH
$LN21@ClearBuffE:

; 209  : 		break;
; 210  : 	case ADD_OPTION_WIZARD_DEFENSE_DURATION:
; 211  : //		lpObj->m_nSoulBarrierManaRate = 0;
; 212  : 		break;
; 213  : 	case ADD_OPTION_CRITICAL_DAMAGE:
; 214  : 		lpObj->m_CriticalDamage -= EffectValue;

  0010f	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  00112	29 86 9c 06 00
	00		 sub	 DWORD PTR [esi+1692], eax
  00118	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  00119	5d		 pop	 ebp
  0011a	c2 0c 00	 ret	 12			; 0000000cH
$LN22@ClearBuffE:

; 215  : 		break;
; 216  : 	case ADD_OPTION_EXCELLENT_DAMAGE:
; 217  : 		lpObj->m_ExcelentDamage -= EffectValue;

  0011d	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  00120	29 86 a0 06 00
	00		 sub	 DWORD PTR [esi+1696], eax
  00126	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  00127	5d		 pop	 ebp
  00128	c2 0c 00	 ret	 12			; 0000000cH
$LN23@ClearBuffE:
  0012b	66 0f 6e 45 10	 movd	 xmm0, DWORD PTR _EffectValue$[ebp]

; 218  : 		break;
; 219  : 	case ADD_OPTION_BERSERKMANA:
; 220  :         lpObj->AddMana -= (int)(EffectValue * lpObj->MaxMana / 100.0);

  00130	f3 0f 10 8e f0
	00 00 00	 movss	 xmm1, DWORD PTR [esi+240]
  00138	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0013b	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0013f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00142	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@c059000000000000
  0014a	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0014e	01 86 28 01 00
	00		 add	 DWORD PTR [esi+296], eax
  00154	66 0f 6e 86 28
	01 00 00	 movd	 xmm0, DWORD PTR [esi+296]

; 221  : 		lpObj->Mana = ((lpObj->AddMana + lpObj->MaxMana) <= lpObj->Mana) ? lpObj->Mana : (lpObj->AddMana + lpObj->MaxMana);

  0015c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0015f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00163	f3 0f 10 8e ec
	00 00 00	 movss	 xmm1, DWORD PTR [esi+236]
  0016b	0f 2f c8	 comiss	 xmm1, xmm0
  0016e	73 03		 jae	 SHORT $LN38@ClearBuffE
  00170	0f 28 c8	 movaps	 xmm1, xmm0
$LN38@ClearBuffE:

; 222  : 
; 223  :         GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  00173	66 8b 86 0c 01
	00 00		 mov	 ax, WORD PTR [esi+268]
  0017a	66 03 86 08 01
	00 00		 add	 ax, WORD PTR [esi+264]
  00181	0f b7 c0	 movzx	 eax, ax
  00184	50		 push	 eax
  00185	f3 0f 2c c0	 cvttss2si eax, xmm0
  00189	6a 00		 push	 0
  0018b	68 fe 00 00 00	 push	 254			; 000000feH
  00190	f3 0f 11 8e ec
	00 00 00	 movss	 DWORD PTR [esi+236], xmm1
  00198	50		 push	 eax
  00199	ff 36		 push	 DWORD PTR [esi]
  0019b	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHFEEG@Z	; GCManaSend

; 224  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  001a0	0f b7 86 04 01
	00 00		 movzx	 eax, WORD PTR [esi+260]
  001a7	50		 push	 eax
  001a8	f3 0f 2c 86 ec
	00 00 00	 cvttss2si eax, DWORD PTR [esi+236]
  001b0	6a 00		 push	 0
  001b2	68 ff 00 00 00	 push	 255			; 000000ffH
  001b7	50		 push	 eax
  001b8	ff 36		 push	 DWORD PTR [esi]
  001ba	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHFEEG@Z	; GCManaSend
  001bf	83 c4 28	 add	 esp, 40			; 00000028H
  001c2	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  001c3	5d		 pop	 ebp
  001c4	c2 0c 00	 ret	 12			; 0000000cH
$LN24@ClearBuffE:
  001c7	66 0f 6e 45 10	 movd	 xmm0, DWORD PTR _EffectValue$[ebp]

; 225  :         break;
; 226  : 	case ADD_OPTION_BERSERKLIFE:
; 227  : 		{
; 228  : 			float fAddLife = 0;
; 229  : 			float fPer = (((float)(40.0f) - (float)(EffectValue))/100.0f);

  001cc	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42200000
  001d4	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001d7	f3 0f 5c d0	 subss	 xmm2, xmm0

; 230  : 
; 231  : 			fPer = (fPer > 0.1f)?fPer:0.1f;

  001db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  001e3	f3 0f 5e 15 00
	00 00 00	 divss	 xmm2, DWORD PTR __real@42c80000
  001eb	0f 2f d0	 comiss	 xmm2, xmm0
  001ee	77 03		 ja	 SHORT $LN40@ClearBuffE
  001f0	0f 28 d0	 movaps	 xmm2, xmm0
$LN40@ClearBuffE:

; 232  : 			fAddLife = fPer * lpObj->MaxLife;

  001f3	f3 0f 10 8e dc
	00 00 00	 movss	 xmm1, DWORD PTR [esi+220]
  001fb	0f 28 c1	 movaps	 xmm0, xmm1
  001fe	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 233  : 
; 234  : 			lpObj->AddLife += (int)((float)(fAddLife));
; 235  : 			lpObj->Life = ( (float)(lpObj->Life) < ( (float)(lpObj->AddLife) + (float)(lpObj->MaxLife) ) )?( (float)(lpObj->Life) ):( ( (float)(lpObj->AddLife) + (float)(lpObj->MaxLife) ) );

  00202	f3 0f 10 96 d8
	00 00 00	 movss	 xmm2, DWORD PTR [esi+216]
  0020a	f3 0f 2c c0	 cvttss2si eax, xmm0
  0020e	01 86 24 01 00
	00		 add	 DWORD PTR [esi+292], eax
  00214	66 0f 6e 86 24
	01 00 00	 movd	 xmm0, DWORD PTR [esi+292]
  0021c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0021f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00223	0f 2f c2	 comiss	 xmm0, xmm2
  00226	77 03		 ja	 SHORT $LN42@ClearBuffE
  00228	0f 28 d0	 movaps	 xmm2, xmm0
$LN42@ClearBuffE:

; 236  : 
; 237  : 			GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  0022b	66 8b 86 34 01
	00 00		 mov	 ax, WORD PTR [esi+308]
  00232	66 03 86 30 01
	00 00		 add	 ax, WORD PTR [esi+304]
  00239	0f b7 c0	 movzx	 eax, ax
  0023c	50		 push	 eax
  0023d	f3 0f 2c c0	 cvttss2si eax, xmm0
  00241	6a 00		 push	 0
  00243	68 fe 00 00 00	 push	 254			; 000000feH
  00248	f3 0f 11 96 d8
	00 00 00	 movss	 DWORD PTR [esi+216], xmm2
  00250	50		 push	 eax
  00251	ff 36		 push	 DWORD PTR [esi]
  00253	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend

; 238  : 			GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);

  00258	0f b7 86 2c 01
	00 00		 movzx	 eax, WORD PTR [esi+300]
  0025f	50		 push	 eax
  00260	f3 0f 2c 86 d8
	00 00 00	 cvttss2si eax, DWORD PTR [esi+216]
  00268	6a 00		 push	 0
  0026a	68 ff 00 00 00	 push	 255			; 000000ffH
  0026f	50		 push	 eax
  00270	ff 36		 push	 DWORD PTR [esi]
  00272	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend
  00277	83 c4 28	 add	 esp, 40			; 00000028H
  0027a	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  0027b	5d		 pop	 ebp
  0027c	c2 0c 00	 ret	 12			; 0000000cH
$LN25@ClearBuffE:

; 239  : 		}
; 240  : 		break;
; 241  : 	case ADD_OPTION_MAGICDAMAGEMIN:
; 242  : 		lpObj->m_MagicDamageMin -= EffectValue;

  0027f	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  00282	29 86 48 06 00
	00		 sub	 DWORD PTR [esi+1608], eax
  00288	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  00289	5d		 pop	 ebp
  0028a	c2 0c 00	 ret	 12			; 0000000cH
$LN26@ClearBuffE:

; 243  : 		break;
; 244  : 	case ADD_OPTION_MAGICDAMAGEMAX:
; 245  : 		lpObj->m_MagicDamageMax -= EffectValue;

  0028d	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  00290	29 86 4c 06 00
	00		 sub	 DWORD PTR [esi+1612], eax

; 246  : 		lpObj->m_MPSkillOpt.MpsExpWizardryCrit = 0;

  00296	c7 86 d4 07 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+2004], 0
  002a0	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  002a1	5d		 pop	 ebp
  002a2	c2 0c 00	 ret	 12			; 0000000cH
$LN27@ClearBuffE:

; 247  : 		break;
; 248  : 	case ADD_OPTION_XMASATTACK:
; 249  : 		lpObj->m_AttackDamageMaxLeft -= EffectValue;

  002a5	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  002a8	29 86 58 06 00
	00		 sub	 DWORD PTR [esi+1624], eax
  002ae	29 86 5c 06 00
	00		 sub	 DWORD PTR [esi+1628], eax
  002b4	29 86 60 06 00
	00		 sub	 DWORD PTR [esi+1632], eax
  002ba	29 86 64 06 00
	00		 sub	 DWORD PTR [esi+1636], eax

; 250  : 		lpObj->m_AttackDamageMinLeft -= EffectValue;
; 251  : 		lpObj->m_AttackDamageMaxRight -= EffectValue;
; 252  : 		lpObj->m_AttackDamageMinRight -= EffectValue;
; 253  : 		lpObj->m_MagicDamageMin -= EffectValue;

  002c0	29 86 48 06 00
	00		 sub	 DWORD PTR [esi+1608], eax

; 254  : 		lpObj->m_MagicDamageMax -= EffectValue;

  002c6	29 86 4c 06 00
	00		 sub	 DWORD PTR [esi+1612], eax

; 255  : 		lpObj->m_CurseDamageMin -= EffectValue;

  002cc	29 86 84 06 00
	00		 sub	 DWORD PTR [esi+1668], eax

; 256  : 		lpObj->m_CurseDamageMax -= EffectValue;

  002d2	29 86 88 06 00
	00		 sub	 DWORD PTR [esi+1672], eax
  002d8	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  002d9	5d		 pop	 ebp
  002da	c2 0c 00	 ret	 12			; 0000000cH
$LN28@ClearBuffE:

; 257  : 		break;
; 258  : 	case ADD_OPTION_XMASDEFENSE:
; 259  : 		lpObj->m_Defense -= EffectValue;

  002dd	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  002e0	29 86 74 06 00
	00		 sub	 DWORD PTR [esi+1652], eax
  002e6	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  002e7	5d		 pop	 ebp
  002e8	c2 0c 00	 ret	 12			; 0000000cH
$LN29@ClearBuffE:

; 260  : 		break;
; 261  : 	case ADD_OPTION_LEVEL_BP:
; 262  : 		lpObj->AddBP -= EffectValue * (lpObj->MasterLevel + lpObj->Level);

  002eb	0f bf 86 96 00
	00 00		 movsx	 eax, WORD PTR [esi+150]
  002f2	0f bf 8e a8 00
	00 00		 movsx	 ecx, WORD PTR [esi+168]
  002f9	66 0f 6e 86 28
	01 00 00	 movd	 xmm0, DWORD PTR [esi+296]
  00301	03 c8		 add	 ecx, eax
  00303	0f af 4d 10	 imul	 ecx, DWORD PTR _EffectValue$[ebp]

; 263  : 		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  00307	66 8b 86 08 01
	00 00		 mov	 ax, WORD PTR [esi+264]
  0030e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00311	29 8e 0c 01 00
	00		 sub	 DWORD PTR [esi+268], ecx
  00317	66 03 86 0c 01
	00 00		 add	 ax, WORD PTR [esi+268]
  0031e	0f b7 c0	 movzx	 eax, ax
  00321	f3 0f 58 86 f0
	00 00 00	 addss	 xmm0, DWORD PTR [esi+240]
  00329	50		 push	 eax
  0032a	6a 00		 push	 0
  0032c	68 fe 00 00 00	 push	 254			; 000000feH
  00331	f3 0f 2c c0	 cvttss2si eax, xmm0
  00335	50		 push	 eax
  00336	ff 36		 push	 DWORD PTR [esi]
  00338	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHFEEG@Z	; GCManaSend

; 264  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  0033d	0f b7 86 04 01
	00 00		 movzx	 eax, WORD PTR [esi+260]
  00344	50		 push	 eax
  00345	f3 0f 2c 86 ec
	00 00 00	 cvttss2si eax, DWORD PTR [esi+236]
  0034d	6a 00		 push	 0
  0034f	68 ff 00 00 00	 push	 255			; 000000ffH
  00354	50		 push	 eax
  00355	ff 36		 push	 DWORD PTR [esi]
  00357	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHFEEG@Z	; GCManaSend
  0035c	83 c4 28	 add	 esp, 40			; 00000028H
  0035f	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  00360	5d		 pop	 ebp
  00361	c2 0c 00	 ret	 12			; 0000000cH
$LN30@ClearBuffE:

; 265  : 		break;
; 266  : 	case ADD_OPTION_LEVEL_SD:
; 267  : 		lpObj->iAddShield -= EffectValue * (lpObj->MasterLevel + lpObj->Level);

  00364	0f bf 86 96 00
	00 00		 movsx	 eax, WORD PTR [esi+150]
  0036b	0f bf 8e a8 00
	00 00		 movsx	 ecx, WORD PTR [esi+168]
  00372	66 0f 6e 86 24
	01 00 00	 movd	 xmm0, DWORD PTR [esi+292]
  0037a	03 c8		 add	 ecx, eax
  0037c	0f af 4d 10	 imul	 ecx, DWORD PTR _EffectValue$[ebp]

; 268  : 		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  00380	66 8b 86 30 01
	00 00		 mov	 ax, WORD PTR [esi+304]
  00387	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0038a	29 8e 34 01 00
	00		 sub	 DWORD PTR [esi+308], ecx
  00390	66 03 86 34 01
	00 00		 add	 ax, WORD PTR [esi+308]
  00397	0f b7 c0	 movzx	 eax, ax
  0039a	f3 0f 58 86 dc
	00 00 00	 addss	 xmm0, DWORD PTR [esi+220]
  003a2	50		 push	 eax
  003a3	6a 00		 push	 0
  003a5	68 fe 00 00 00	 push	 254			; 000000feH
  003aa	f3 0f 2c c0	 cvttss2si eax, xmm0
  003ae	50		 push	 eax
  003af	ff 36		 push	 DWORD PTR [esi]
  003b1	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend

; 269  :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);

  003b6	0f b7 86 2c 01
	00 00		 movzx	 eax, WORD PTR [esi+300]
  003bd	50		 push	 eax
  003be	f3 0f 2c 86 d8
	00 00 00	 cvttss2si eax, DWORD PTR [esi+216]
  003c6	6a 00		 push	 0
  003c8	68 ff 00 00 00	 push	 255			; 000000ffH
  003cd	50		 push	 eax
  003ce	ff 36		 push	 DWORD PTR [esi]
  003d0	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend
  003d5	83 c4 28	 add	 esp, 40			; 00000028H
  003d8	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  003d9	5d		 pop	 ebp
  003da	c2 0c 00	 ret	 12			; 0000000cH
$LN31@ClearBuffE:

; 270  : 		break;
; 271  : 	case ADD_OPTION_BP:
; 272  : 		lpObj->AddBP -= EffectValue;

  003dd	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  003e0	29 86 0c 01 00
	00		 sub	 DWORD PTR [esi+268], eax

; 273  : 		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  003e6	66 8b 86 08 01
	00 00		 mov	 ax, WORD PTR [esi+264]
  003ed	66 03 86 0c 01
	00 00		 add	 ax, WORD PTR [esi+268]
$LN54@ClearBuffE:
  003f4	66 0f 6e 86 28
	01 00 00	 movd	 xmm0, DWORD PTR [esi+296]
  003fc	0f 5b c0	 cvtdq2ps xmm0, xmm0
  003ff	0f b7 c0	 movzx	 eax, ax
  00402	50		 push	 eax
  00403	6a 00		 push	 0
  00405	68 fe 00 00 00	 push	 254			; 000000feH
  0040a	f3 0f 58 86 f0
	00 00 00	 addss	 xmm0, DWORD PTR [esi+240]
  00412	f3 0f 2c c0	 cvttss2si eax, xmm0
  00416	50		 push	 eax
  00417	ff 36		 push	 DWORD PTR [esi]
  00419	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHFEEG@Z	; GCManaSend

; 274  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  0041e	0f b7 86 04 01
	00 00		 movzx	 eax, WORD PTR [esi+260]
  00425	50		 push	 eax
  00426	f3 0f 2c 86 ec
	00 00 00	 cvttss2si eax, DWORD PTR [esi+236]
  0042e	6a 00		 push	 0
  00430	68 ff 00 00 00	 push	 255			; 000000ffH
  00435	50		 push	 eax
  00436	ff 36		 push	 DWORD PTR [esi]
  00438	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHFEEG@Z	; GCManaSend
  0043d	83 c4 28	 add	 esp, 40			; 00000028H
  00440	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  00441	5d		 pop	 ebp
  00442	c2 0c 00	 ret	 12			; 0000000cH
$LN32@ClearBuffE:

; 275  : 		break;
; 276  : 	case ADD_OPTION_SD:
; 277  : 		lpObj->iAddShield -= EffectValue;

  00445	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  00448	29 86 34 01 00
	00		 sub	 DWORD PTR [esi+308], eax

; 278  : 		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  0044e	66 8b 86 30 01
	00 00		 mov	 ax, WORD PTR [esi+304]
  00455	66 03 86 34 01
	00 00		 add	 ax, WORD PTR [esi+308]
$LN53@ClearBuffE:
  0045c	66 0f 6e 86 24
	01 00 00	 movd	 xmm0, DWORD PTR [esi+292]
  00464	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00467	0f b7 c0	 movzx	 eax, ax
  0046a	50		 push	 eax
  0046b	6a 00		 push	 0
  0046d	68 fe 00 00 00	 push	 254			; 000000feH
  00472	f3 0f 58 86 dc
	00 00 00	 addss	 xmm0, DWORD PTR [esi+220]
  0047a	f3 0f 2c c0	 cvttss2si eax, xmm0
  0047e	50		 push	 eax
  0047f	ff 36		 push	 DWORD PTR [esi]
  00481	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend

; 279  :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);

  00486	0f b7 86 2c 01
	00 00		 movzx	 eax, WORD PTR [esi+300]
  0048d	50		 push	 eax
  0048e	f3 0f 2c 86 d8
	00 00 00	 cvttss2si eax, DWORD PTR [esi+216]
  00496	6a 00		 push	 0
  00498	68 ff 00 00 00	 push	 255			; 000000ffH
  0049d	50		 push	 eax
  0049e	ff 36		 push	 DWORD PTR [esi]
  004a0	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend
  004a5	83 c4 28	 add	 esp, 40			; 00000028H
  004a8	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  004a9	5d		 pop	 ebp
  004aa	c2 0c 00	 ret	 12			; 0000000cH
$LN33@ClearBuffE:

; 280  : 		break;
; 281  : 	case ADD_OPTION_SUCCESSFULBLOCKING:
; 282  : 		lpObj->m_SuccessfulBlocking -= EffectValue;

  004ad	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  004b0	29 86 7c 06 00
	00		 sub	 DWORD PTR [esi+1660], eax
  004b6	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  004b7	5d		 pop	 ebp
  004b8	c2 0c 00	 ret	 12			; 0000000cH
$LN34@ClearBuffE:

; 283  : 		break;
; 284  : 	case SUB_OPTION_SUCCESSFULBLOCKING:
; 285  :         lpObj->m_SuccessfulBlocking += EffectValue;

  004bb	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  004be	01 86 7c 06 00
	00		 add	 DWORD PTR [esi+1660], eax
$LN35@ClearBuffE:
  004c4	5e		 pop	 esi

; 286  :         break;
; 287  : 	default:
; 288  : 		return;
; 289  : 	}
; 290  : }

  004c5	5d		 pop	 ebp
  004c6	c2 0c 00	 ret	 12			; 0000000cH
  004c9	0f 1f 00	 npad	 3
$LN56@ClearBuffE:
  004cc	00 00 00 00	 DD	 $LN7@ClearBuffE
  004d0	00 00 00 00	 DD	 $LN8@ClearBuffE
  004d4	00 00 00 00	 DD	 $LN9@ClearBuffE
  004d8	00 00 00 00	 DD	 $LN10@ClearBuffE
  004dc	00 00 00 00	 DD	 $LN11@ClearBuffE
  004e0	00 00 00 00	 DD	 $LN12@ClearBuffE
  004e4	00 00 00 00	 DD	 $LN13@ClearBuffE
  004e8	00 00 00 00	 DD	 $LN14@ClearBuffE
  004ec	00 00 00 00	 DD	 $LN15@ClearBuffE
  004f0	00 00 00 00	 DD	 $LN35@ClearBuffE
  004f4	00 00 00 00	 DD	 $LN17@ClearBuffE
  004f8	00 00 00 00	 DD	 $LN18@ClearBuffE
  004fc	00 00 00 00	 DD	 $LN19@ClearBuffE
  00500	00 00 00 00	 DD	 $LN23@ClearBuffE
  00504	00 00 00 00	 DD	 $LN24@ClearBuffE
  00508	00 00 00 00	 DD	 $LN25@ClearBuffE
  0050c	00 00 00 00	 DD	 $LN26@ClearBuffE
  00510	00 00 00 00	 DD	 $LN21@ClearBuffE
  00514	00 00 00 00	 DD	 $LN22@ClearBuffE
  00518	00 00 00 00	 DD	 $LN27@ClearBuffE
  0051c	00 00 00 00	 DD	 $LN28@ClearBuffE
  00520	00 00 00 00	 DD	 $LN29@ClearBuffE
  00524	00 00 00 00	 DD	 $LN30@ClearBuffE
  00528	00 00 00 00	 DD	 $LN32@ClearBuffE
  0052c	00 00 00 00	 DD	 $LN31@ClearBuffE
  00530	00 00 00 00	 DD	 $LN33@ClearBuffE
  00534	00 00 00 00	 DD	 $LN34@ClearBuffE
  00538	00 00 00 00	 DD	 $LN35@ClearBuffE
$LN52@ClearBuffE:
  0053c	00		 DB	 0
  0053d	1b		 DB	 27			; 0000001bH
  0053e	01		 DB	 1
  0053f	02		 DB	 2
  00540	03		 DB	 3
  00541	1b		 DB	 27			; 0000001bH
  00542	1b		 DB	 27			; 0000001bH
  00543	1b		 DB	 27			; 0000001bH
  00544	04		 DB	 4
  00545	05		 DB	 5
  00546	06		 DB	 6
  00547	07		 DB	 7
  00548	08		 DB	 8
  00549	1b		 DB	 27			; 0000001bH
  0054a	1b		 DB	 27			; 0000001bH
  0054b	1b		 DB	 27			; 0000001bH
  0054c	1b		 DB	 27			; 0000001bH
  0054d	1b		 DB	 27			; 0000001bH
  0054e	1b		 DB	 27			; 0000001bH
  0054f	1b		 DB	 27			; 0000001bH
  00550	09		 DB	 9
  00551	0a		 DB	 10			; 0000000aH
  00552	1b		 DB	 27			; 0000001bH
  00553	0b		 DB	 11			; 0000000bH
  00554	1b		 DB	 27			; 0000001bH
  00555	0c		 DB	 12			; 0000000cH
  00556	1b		 DB	 27			; 0000001bH
  00557	09		 DB	 9
  00558	1b		 DB	 27			; 0000001bH
  00559	1b		 DB	 27			; 0000001bH
  0055a	0d		 DB	 13			; 0000000dH
  0055b	0e		 DB	 14			; 0000000eH
  0055c	0f		 DB	 15			; 0000000fH
  0055d	10		 DB	 16			; 00000010H
  0055e	1b		 DB	 27			; 0000001bH
  0055f	1b		 DB	 27			; 0000001bH
  00560	1b		 DB	 27			; 0000001bH
  00561	1b		 DB	 27			; 0000001bH
  00562	1b		 DB	 27			; 0000001bH
  00563	1b		 DB	 27			; 0000001bH
  00564	1b		 DB	 27			; 0000001bH
  00565	1b		 DB	 27			; 0000001bH
  00566	1b		 DB	 27			; 0000001bH
  00567	1b		 DB	 27			; 0000001bH
  00568	1b		 DB	 27			; 0000001bH
  00569	1b		 DB	 27			; 0000001bH
  0056a	1b		 DB	 27			; 0000001bH
  0056b	1b		 DB	 27			; 0000001bH
  0056c	1b		 DB	 27			; 0000001bH
  0056d	1b		 DB	 27			; 0000001bH
  0056e	1b		 DB	 27			; 0000001bH
  0056f	1b		 DB	 27			; 0000001bH
  00570	1b		 DB	 27			; 0000001bH
  00571	1b		 DB	 27			; 0000001bH
  00572	11		 DB	 17			; 00000011H
  00573	12		 DB	 18			; 00000012H
  00574	13		 DB	 19			; 00000013H
  00575	14		 DB	 20			; 00000014H
  00576	1b		 DB	 27			; 0000001bH
  00577	1b		 DB	 27			; 0000001bH
  00578	1b		 DB	 27			; 0000001bH
  00579	1b		 DB	 27			; 0000001bH
  0057a	1b		 DB	 27			; 0000001bH
  0057b	1b		 DB	 27			; 0000001bH
  0057c	1b		 DB	 27			; 0000001bH
  0057d	15		 DB	 21			; 00000015H
  0057e	16		 DB	 22			; 00000016H
  0057f	1b		 DB	 27			; 0000001bH
  00580	1b		 DB	 27			; 0000001bH
  00581	17		 DB	 23			; 00000017H
  00582	18		 DB	 24			; 00000018H
  00583	1b		 DB	 27			; 0000001bH
  00584	1b		 DB	 27			; 0000001bH
  00585	19		 DB	 25			; 00000019H
  00586	1a		 DB	 26			; 0000001aH
?ClearBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ENDP ; CBuffEffect::ClearBuffEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffect.cpp
;	COMDAT ?SetBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_EffectType$ = 12					; size = 1
_EffectValue$ = 16					; size = 4
?SetBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z PROC ; CBuffEffect::SetBuffEffect, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 20   : 
; 21   : 	if( lpObj == NULL || EffectType < 0 )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	0f 84 53 04 00
	00		 je	 $LN35@SetBuffEff

; 22   : 		return;
; 23   : 
; 24   : 	if( lpObj->Connected < 3 )

  0000f	83 7e 04 03	 cmp	 DWORD PTR [esi+4], 3
  00013	0f 8c 49 04 00
	00		 jl	 $LN35@SetBuffEff

; 25   : 		return;
; 26   : 
; 27   : 	switch( EffectType )

  00019	0f b6 45 0c	 movzx	 eax, BYTE PTR _EffectType$[ebp]
  0001d	48		 dec	 eax
  0001e	83 f8 4a	 cmp	 eax, 74			; 0000004aH
  00021	0f 87 3b 04 00
	00		 ja	 $LN35@SetBuffEff
  00027	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN51@SetBuffEff[eax]
  0002e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN56@SetBuffEff[eax*4]
$LN7@SetBuffEff:

; 28   : 	{
; 29   : 	case ADD_OPTION_SPEED:
; 30   : 		lpObj->m_AttackSpeed += EffectValue;

  00035	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  00038	01 86 6c 06 00
	00		 add	 DWORD PTR [esi+1644], eax

; 31   : 		lpObj->m_MagicSpeed += EffectValue;

  0003e	01 86 70 06 00
	00		 add	 DWORD PTR [esi+1648], eax
  00044	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
$LN8@SetBuffEff:

; 32   : 		break;
; 33   : 	case ADD_OPTION_DEFENSE:
; 34   : 		lpObj->m_Defense += EffectValue;

  00049	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  0004c	01 86 74 06 00
	00		 add	 DWORD PTR [esi+1652], eax

; 35   : 		lpObj->m_MagicDefense += EffectValue;

  00052	01 86 78 06 00
	00		 add	 DWORD PTR [esi+1656], eax
  00058	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  00059	5d		 pop	 ebp
  0005a	c2 0c 00	 ret	 12			; 0000000cH
$LN9@SetBuffEff:

; 36   : 		break;
; 37   : 	case ADD_OPTION_LIFE:
; 38   : 		lpObj->AddLife += EffectValue;

  0005d	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  00060	01 86 24 01 00
	00		 add	 DWORD PTR [esi+292], eax

; 39   : 		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  00066	66 8b 86 34 01
	00 00		 mov	 ax, WORD PTR [esi+308]
  0006d	66 03 86 30 01
	00 00		 add	 ax, WORD PTR [esi+304]
$LN52@SetBuffEff:
  00074	66 0f 6e 86 24
	01 00 00	 movd	 xmm0, DWORD PTR [esi+292]
  0007c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0007f	0f b7 c0	 movzx	 eax, ax
  00082	50		 push	 eax
  00083	6a 00		 push	 0
  00085	68 fe 00 00 00	 push	 254			; 000000feH
  0008a	f3 0f 58 86 dc
	00 00 00	 addss	 xmm0, DWORD PTR [esi+220]
  00092	f3 0f 2c c0	 cvttss2si eax, xmm0
  00096	50		 push	 eax
  00097	ff 36		 push	 DWORD PTR [esi]
  00099	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend

; 40   :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);

  0009e	0f b7 86 2c 01
	00 00		 movzx	 eax, WORD PTR [esi+300]
  000a5	50		 push	 eax
  000a6	f3 0f 2c 86 d8
	00 00 00	 cvttss2si eax, DWORD PTR [esi+216]
  000ae	6a 00		 push	 0
  000b0	68 ff 00 00 00	 push	 255			; 000000ffH
  000b5	50		 push	 eax
  000b6	ff 36		 push	 DWORD PTR [esi]
  000b8	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend
  000bd	83 c4 28	 add	 esp, 40			; 00000028H
  000c0	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  000c1	5d		 pop	 ebp
  000c2	c2 0c 00	 ret	 12			; 0000000cH
$LN10@SetBuffEff:

; 41   : 		break;
; 42   : 	case ADD_OPTION_MANA:
; 43   : 		lpObj->AddMana += EffectValue;

  000c5	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  000c8	01 86 28 01 00
	00		 add	 DWORD PTR [esi+296], eax

; 44   : 		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  000ce	66 8b 86 0c 01
	00 00		 mov	 ax, WORD PTR [esi+268]
  000d5	66 03 86 08 01
	00 00		 add	 ax, WORD PTR [esi+264]
$LN54@SetBuffEff:
  000dc	66 0f 6e 86 28
	01 00 00	 movd	 xmm0, DWORD PTR [esi+296]
  000e4	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000e7	0f b7 c0	 movzx	 eax, ax
  000ea	50		 push	 eax
  000eb	6a 00		 push	 0
  000ed	68 fe 00 00 00	 push	 254			; 000000feH
  000f2	f3 0f 58 86 f0
	00 00 00	 addss	 xmm0, DWORD PTR [esi+240]
  000fa	f3 0f 2c c0	 cvttss2si eax, xmm0
  000fe	50		 push	 eax
  000ff	ff 36		 push	 DWORD PTR [esi]
  00101	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHFEEG@Z	; GCManaSend

; 45   :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  00106	0f b7 86 04 01
	00 00		 movzx	 eax, WORD PTR [esi+260]
  0010d	50		 push	 eax
  0010e	f3 0f 2c 86 ec
	00 00 00	 cvttss2si eax, DWORD PTR [esi+236]
  00116	6a 00		 push	 0
  00118	68 ff 00 00 00	 push	 255			; 000000ffH
  0011d	50		 push	 eax
  0011e	ff 36		 push	 DWORD PTR [esi]
  00120	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHFEEG@Z	; GCManaSend
  00125	83 c4 28	 add	 esp, 40			; 00000028H
  00128	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  00129	5d		 pop	 ebp
  0012a	c2 0c 00	 ret	 12			; 0000000cH
$LN11@SetBuffEff:

; 46   : 		break;
; 47   : 	case ADD_OPTION_STRENGTH:
; 48   : 		lpObj->AddStrength += EffectValue;

  0012d	66 8b 45 10	 mov	 ax, WORD PTR _EffectValue$[ebp]
  00131	66 01 86 fc 00
	00 00		 add	 WORD PTR [esi+252], ax
  00138	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  00139	5d		 pop	 ebp
  0013a	c2 0c 00	 ret	 12			; 0000000cH
$LN12@SetBuffEff:

; 49   : 		break;
; 50   : 	case ADD_OPTION_DEXTERITY:
; 51   : 		lpObj->AddDexterity += EffectValue;

  0013d	66 8b 45 10	 mov	 ax, WORD PTR _EffectValue$[ebp]
  00141	66 01 86 fe 00
	00 00		 add	 WORD PTR [esi+254], ax
  00148	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  00149	5d		 pop	 ebp
  0014a	c2 0c 00	 ret	 12			; 0000000cH
$LN13@SetBuffEff:

; 52   : 		break;
; 53   : 	case ADD_OPTION_VITALITY:
; 54   : 		lpObj->AddVitality += EffectValue;

  0014d	66 8b 45 10	 mov	 ax, WORD PTR _EffectValue$[ebp]
  00151	66 01 86 00 01
	00 00		 add	 WORD PTR [esi+256], ax
  00158	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  00159	5d		 pop	 ebp
  0015a	c2 0c 00	 ret	 12			; 0000000cH
$LN14@SetBuffEff:

; 55   : 		break;
; 56   : 	case ADD_OPTION_ENERGY:
; 57   : 		lpObj->AddEnergy += EffectValue;

  0015d	66 8b 45 10	 mov	 ax, WORD PTR _EffectValue$[ebp]
  00161	66 01 86 02 01
	00 00		 add	 WORD PTR [esi+258], ax
  00168	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  00169	5d		 pop	 ebp
  0016a	c2 0c 00	 ret	 12			; 0000000cH
$LN15@SetBuffEff:

; 58   : 		break;
; 59   : 	case ADD_OPTION_LEADERSHIP:
; 60   : 		lpObj->AddLeadership += EffectValue;

  0016d	66 8b 45 10	 mov	 ax, WORD PTR _EffectValue$[ebp]
  00171	66 01 86 f6 00
	00 00		 add	 WORD PTR [esi+246], ax
  00178	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  00179	5d		 pop	 ebp
  0017a	c2 0c 00	 ret	 12			; 0000000cH
$LN17@SetBuffEff:

; 61   : 		break;
; 62   : 	case ADD_OPTION_WIZARD_DEFENSE:
; 63   : //        lpObj->m_nSoulBarrierDefence = EffectValue;
; 64   :         break;
; 65   : 	case ADD_OPTION_MAGIC_DEFENSE:
; 66   : 		lpObj->m_MagicDefense += EffectValue;

  0017d	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  00180	01 86 78 06 00
	00		 add	 DWORD PTR [esi+1656], eax
  00186	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  00187	5d		 pop	 ebp
  00188	c2 0c 00	 ret	 12			; 0000000cH
$LN18@SetBuffEff:

; 67   : 		break;
; 68   : 	case ADD_OPTION_REFLECT:
; 69   : 		lpObj->DamageReflect += EffectValue;

  0018b	8a 45 10	 mov	 al, BYTE PTR _EffectValue$[ebp]
  0018e	00 86 49 01 00
	00		 add	 BYTE PTR [esi+329], al
  00194	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  00195	5d		 pop	 ebp
  00196	c2 0c 00	 ret	 12			; 0000000cH
$LN19@SetBuffEff:

; 70   : 		break;
; 71   : 	case SUB_OPTION_ATTACK_RATE:
; 72   : 		lpObj->m_AttackRating -= EffectValue;

  00199	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  0019c	29 86 68 06 00
	00		 sub	 DWORD PTR [esi+1640], eax
  001a2	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  001a3	5d		 pop	 ebp
  001a4	c2 0c 00	 ret	 12			; 0000000cH
$LN21@SetBuffEff:

; 73   : 		break;
; 74   : 	case ADD_OPTION_WIZARD_DEFENSE_DURATION:
; 75   : //		lpObj->m_nSoulBarrierManaRate = EffectValue;
; 76   : 		break;
; 77   : 	case ADD_OPTION_CRITICAL_DAMAGE:
; 78   : 		lpObj->m_CriticalDamage += EffectValue;

  001a7	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  001aa	01 86 9c 06 00
	00		 add	 DWORD PTR [esi+1692], eax
  001b0	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  001b1	5d		 pop	 ebp
  001b2	c2 0c 00	 ret	 12			; 0000000cH
$LN22@SetBuffEff:

; 79   : 		break;
; 80   : 	case ADD_OPTION_EXCELLENT_DAMAGE:
; 81   : 		lpObj->m_ExcelentDamage += EffectValue;

  001b5	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  001b8	01 86 a0 06 00
	00		 add	 DWORD PTR [esi+1696], eax
  001be	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  001bf	5d		 pop	 ebp
  001c0	c2 0c 00	 ret	 12			; 0000000cH
$LN23@SetBuffEff:
  001c3	66 0f 6e 45 10	 movd	 xmm0, DWORD PTR _EffectValue$[ebp]

; 82   : 		break;
; 83   : 	case ADD_OPTION_BERSERKMANA:
; 84   :         lpObj->AddMana += (int)(EffectValue * lpObj->MaxMana / 100.0);

  001c8	f3 0f 10 8e f0
	00 00 00	 movss	 xmm1, DWORD PTR [esi+240]
  001d0	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001d3	f3 0f 59 c1	 mulss	 xmm0, xmm1
  001d7	0f 5a c0	 cvtps2pd xmm0, xmm0
  001da	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4059000000000000
  001e2	f2 0f 2c c0	 cvttsd2si eax, xmm0
  001e6	01 86 28 01 00
	00		 add	 DWORD PTR [esi+296], eax
  001ec	66 0f 6e 86 28
	01 00 00	 movd	 xmm0, DWORD PTR [esi+296]

; 85   :         GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  001f4	66 8b 86 0c 01
	00 00		 mov	 ax, WORD PTR [esi+268]
  001fb	66 03 86 08 01
	00 00		 add	 ax, WORD PTR [esi+264]
  00202	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00205	0f b7 c0	 movzx	 eax, ax
  00208	50		 push	 eax
  00209	6a 00		 push	 0
  0020b	68 fe 00 00 00	 push	 254			; 000000feH
  00210	f3 0f 58 c1	 addss	 xmm0, xmm1
  00214	f3 0f 2c c0	 cvttss2si eax, xmm0
  00218	50		 push	 eax
  00219	ff 36		 push	 DWORD PTR [esi]
  0021b	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHFEEG@Z	; GCManaSend

; 86   :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  00220	0f b7 86 04 01
	00 00		 movzx	 eax, WORD PTR [esi+260]
  00227	50		 push	 eax
  00228	f3 0f 2c 86 ec
	00 00 00	 cvttss2si eax, DWORD PTR [esi+236]
  00230	6a 00		 push	 0
  00232	68 ff 00 00 00	 push	 255			; 000000ffH
  00237	50		 push	 eax
  00238	ff 36		 push	 DWORD PTR [esi]
  0023a	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHFEEG@Z	; GCManaSend
  0023f	83 c4 28	 add	 esp, 40			; 00000028H
  00242	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  00243	5d		 pop	 ebp
  00244	c2 0c 00	 ret	 12			; 0000000cH
$LN24@SetBuffEff:
  00247	66 0f 6e 45 10	 movd	 xmm0, DWORD PTR _EffectValue$[ebp]

; 87   :         break;
; 88   : 	case ADD_OPTION_BERSERKLIFE:
; 89   : 		{
; 90   : 			float fAddLife = 0;
; 91   : 			float fPer = (((float)(40.0f) - (float)(EffectValue))/100.0f);

  0024c	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42200000
  00254	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00257	f3 0f 5c d0	 subss	 xmm2, xmm0

; 92   : 
; 93   : 			fPer = (fPer > 0.1f)?fPer:0.1f;

  0025b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00263	f3 0f 5e 15 00
	00 00 00	 divss	 xmm2, DWORD PTR __real@42c80000
  0026b	0f 2f d0	 comiss	 xmm2, xmm0
  0026e	77 03		 ja	 SHORT $LN39@SetBuffEff
  00270	0f 28 d0	 movaps	 xmm2, xmm0
$LN39@SetBuffEff:

; 94   : 			fAddLife = fPer * lpObj->MaxLife;

  00273	f3 0f 10 8e dc
	00 00 00	 movss	 xmm1, DWORD PTR [esi+220]
  0027b	0f 28 c1	 movaps	 xmm0, xmm1
  0027e	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 95   : 
; 96   : 			lpObj->AddLife -= (int)((float)(fAddLife));
; 97   : 			lpObj->Life = ( (float)(lpObj->Life) < ( (float)(lpObj->AddLife) + (float)(lpObj->MaxLife) ) )?( (float)(lpObj->Life) ):( ( (float)(lpObj->AddLife) + (float)(lpObj->MaxLife) ) );

  00282	f3 0f 10 96 d8
	00 00 00	 movss	 xmm2, DWORD PTR [esi+216]
  0028a	f3 0f 2c c0	 cvttss2si eax, xmm0
  0028e	29 86 24 01 00
	00		 sub	 DWORD PTR [esi+292], eax
  00294	66 0f 6e 86 24
	01 00 00	 movd	 xmm0, DWORD PTR [esi+292]
  0029c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0029f	f3 0f 58 c1	 addss	 xmm0, xmm1
  002a3	0f 2f c2	 comiss	 xmm0, xmm2
  002a6	77 03		 ja	 SHORT $LN41@SetBuffEff
  002a8	0f 28 d0	 movaps	 xmm2, xmm0
$LN41@SetBuffEff:

; 98   : 
; 99   : 			GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  002ab	66 8b 86 34 01
	00 00		 mov	 ax, WORD PTR [esi+308]
  002b2	66 03 86 30 01
	00 00		 add	 ax, WORD PTR [esi+304]
  002b9	0f b7 c0	 movzx	 eax, ax
  002bc	50		 push	 eax
  002bd	f3 0f 2c c0	 cvttss2si eax, xmm0
  002c1	6a 00		 push	 0
  002c3	68 fe 00 00 00	 push	 254			; 000000feH
  002c8	f3 0f 11 96 d8
	00 00 00	 movss	 DWORD PTR [esi+216], xmm2
  002d0	50		 push	 eax
  002d1	ff 36		 push	 DWORD PTR [esi]
  002d3	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend

; 100  : 			GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);

  002d8	0f b7 86 2c 01
	00 00		 movzx	 eax, WORD PTR [esi+300]
  002df	50		 push	 eax
  002e0	f3 0f 2c 86 d8
	00 00 00	 cvttss2si eax, DWORD PTR [esi+216]
  002e8	6a 00		 push	 0
  002ea	68 ff 00 00 00	 push	 255			; 000000ffH
  002ef	50		 push	 eax
  002f0	ff 36		 push	 DWORD PTR [esi]
  002f2	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend
  002f7	83 c4 28	 add	 esp, 40			; 00000028H
  002fa	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  002fb	5d		 pop	 ebp
  002fc	c2 0c 00	 ret	 12			; 0000000cH
$LN25@SetBuffEff:

; 101  : 		}
; 102  : 		break;
; 103  : 	case ADD_OPTION_MAGICDAMAGEMIN:
; 104  : 		lpObj->m_MagicDamageMin += EffectValue;

  002ff	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  00302	01 86 48 06 00
	00		 add	 DWORD PTR [esi+1608], eax
  00308	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  00309	5d		 pop	 ebp
  0030a	c2 0c 00	 ret	 12			; 0000000cH
$LN26@SetBuffEff:

; 105  : 		break;
; 106  : 	case ADD_OPTION_MAGICDAMAGEMAX:
; 107  : 		lpObj->m_MagicDamageMax += EffectValue;

  0030d	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  00310	01 86 4c 06 00
	00		 add	 DWORD PTR [esi+1612], eax
  00316	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  00317	5d		 pop	 ebp
  00318	c2 0c 00	 ret	 12			; 0000000cH
$LN27@SetBuffEff:

; 108  : 		break;
; 109  : 	case ADD_OPTION_XMASATTACK:
; 110  : 		lpObj->m_AttackDamageMaxLeft += EffectValue;

  0031b	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  0031e	01 86 58 06 00
	00		 add	 DWORD PTR [esi+1624], eax
  00324	01 86 5c 06 00
	00		 add	 DWORD PTR [esi+1628], eax
  0032a	01 86 60 06 00
	00		 add	 DWORD PTR [esi+1632], eax
  00330	01 86 64 06 00
	00		 add	 DWORD PTR [esi+1636], eax

; 111  : 		lpObj->m_AttackDamageMinLeft += EffectValue;
; 112  : 		lpObj->m_AttackDamageMaxRight += EffectValue;
; 113  : 		lpObj->m_AttackDamageMinRight += EffectValue;
; 114  : 		lpObj->m_MagicDamageMin += EffectValue;

  00336	01 86 48 06 00
	00		 add	 DWORD PTR [esi+1608], eax

; 115  : 		lpObj->m_MagicDamageMax += EffectValue;

  0033c	01 86 4c 06 00
	00		 add	 DWORD PTR [esi+1612], eax

; 116  : 		lpObj->m_CurseDamageMin += EffectValue;

  00342	01 86 84 06 00
	00		 add	 DWORD PTR [esi+1668], eax

; 117  : 		lpObj->m_CurseDamageMax += EffectValue;

  00348	01 86 88 06 00
	00		 add	 DWORD PTR [esi+1672], eax
  0034e	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  0034f	5d		 pop	 ebp
  00350	c2 0c 00	 ret	 12			; 0000000cH
$LN28@SetBuffEff:

; 118  : 		break;
; 119  : 	case ADD_OPTION_XMASDEFENSE:
; 120  : 		lpObj->m_Defense += EffectValue;

  00353	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  00356	01 86 74 06 00
	00		 add	 DWORD PTR [esi+1652], eax
  0035c	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  0035d	5d		 pop	 ebp
  0035e	c2 0c 00	 ret	 12			; 0000000cH
$LN29@SetBuffEff:

; 121  : 		break;
; 122  : 	case ADD_OPTION_LEVEL_BP:
; 123  : 		lpObj->AddBP += EffectValue * (lpObj->MasterLevel + lpObj->Level);

  00361	0f bf 86 96 00
	00 00		 movsx	 eax, WORD PTR [esi+150]
  00368	0f bf 8e a8 00
	00 00		 movsx	 ecx, WORD PTR [esi+168]
  0036f	03 c8		 add	 ecx, eax

; 124  : 		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  00371	66 8b 86 08 01
	00 00		 mov	 ax, WORD PTR [esi+264]
  00378	0f af 4d 10	 imul	 ecx, DWORD PTR _EffectValue$[ebp]
  0037c	01 8e 0c 01 00
	00		 add	 DWORD PTR [esi+268], ecx
  00382	66 03 86 0c 01
	00 00		 add	 ax, WORD PTR [esi+268]

; 125  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);
; 126  : 		break;

  00389	e9 4e fd ff ff	 jmp	 $LN54@SetBuffEff
$LN30@SetBuffEff:

; 127  : 	case ADD_OPTION_LEVEL_SD:
; 128  : 		lpObj->iAddShield += EffectValue * (lpObj->MasterLevel + lpObj->Level);

  0038e	0f bf 86 96 00
	00 00		 movsx	 eax, WORD PTR [esi+150]
  00395	0f bf 8e a8 00
	00 00		 movsx	 ecx, WORD PTR [esi+168]
  0039c	03 c8		 add	 ecx, eax

; 129  : 		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  0039e	66 8b 86 30 01
	00 00		 mov	 ax, WORD PTR [esi+304]
  003a5	0f af 4d 10	 imul	 ecx, DWORD PTR _EffectValue$[ebp]
  003a9	01 8e 34 01 00
	00		 add	 DWORD PTR [esi+308], ecx
  003af	66 03 86 34 01
	00 00		 add	 ax, WORD PTR [esi+308]

; 130  :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);
; 131  : 		break;

  003b6	e9 b9 fc ff ff	 jmp	 $LN52@SetBuffEff
$LN31@SetBuffEff:
  003bb	66 0f 6e 86 28
	01 00 00	 movd	 xmm0, DWORD PTR [esi+296]

; 132  : 	case ADD_OPTION_BP:
; 133  : 		lpObj->AddBP += EffectValue;

  003c3	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  003c6	01 86 0c 01 00
	00		 add	 DWORD PTR [esi+268], eax

; 134  : 		GCManaSend(lpObj->m_Index,(int)(lpObj->AddMana + lpObj->MaxMana),0xFEu,0,lpObj->AddBP + lpObj->MaxBP);

  003cc	66 8b 86 08 01
	00 00		 mov	 ax, WORD PTR [esi+264]
  003d3	66 03 86 0c 01
	00 00		 add	 ax, WORD PTR [esi+268]
  003da	0f 5b c0	 cvtdq2ps xmm0, xmm0
  003dd	0f b7 c0	 movzx	 eax, ax
  003e0	50		 push	 eax
  003e1	6a 00		 push	 0
  003e3	68 fe 00 00 00	 push	 254			; 000000feH
  003e8	f3 0f 58 86 f0
	00 00 00	 addss	 xmm0, DWORD PTR [esi+240]
  003f0	f3 0f 2c c0	 cvttss2si eax, xmm0
  003f4	50		 push	 eax
  003f5	ff 36		 push	 DWORD PTR [esi]
  003f7	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHFEEG@Z	; GCManaSend

; 135  :         GCManaSend(lpObj->m_Index, (int)lpObj->Mana, 0xFFu, 0, lpObj->BP);

  003fc	0f b7 86 04 01
	00 00		 movzx	 eax, WORD PTR [esi+260]
  00403	50		 push	 eax
  00404	f3 0f 2c 86 ec
	00 00 00	 cvttss2si eax, DWORD PTR [esi+236]
  0040c	6a 00		 push	 0
  0040e	68 ff 00 00 00	 push	 255			; 000000ffH
  00413	50		 push	 eax
  00414	ff 36		 push	 DWORD PTR [esi]
  00416	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHFEEG@Z	; GCManaSend
  0041b	83 c4 28	 add	 esp, 40			; 00000028H
  0041e	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  0041f	5d		 pop	 ebp
  00420	c2 0c 00	 ret	 12			; 0000000cH
$LN32@SetBuffEff:

; 136  : 		break;
; 137  : 	case ADD_OPTION_SD:
; 138  : 		lpObj->iAddShield += EffectValue;

  00423	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  00426	01 86 34 01 00
	00		 add	 DWORD PTR [esi+308], eax

; 139  : 		GCReFillSend(lpObj->m_Index,(int)(lpObj->AddLife + lpObj->MaxLife),0xFEu,0,lpObj->iAddShield + lpObj->iMaxShield);

  0042c	66 8b 86 30 01
	00 00		 mov	 ax, WORD PTR [esi+304]
  00433	66 03 86 34 01
	00 00		 add	 ax, WORD PTR [esi+308]

; 140  :         GCReFillSend(lpObj->m_Index, (int)lpObj->Life, 0xFFu, 0, lpObj->iShield);
; 141  : 		break;

  0043a	e9 35 fc ff ff	 jmp	 $LN52@SetBuffEff
$LN33@SetBuffEff:

; 142  : 	case ADD_OPTION_SUCCESSFULBLOCKING:
; 143  : 		lpObj->m_SuccessfulBlocking += EffectValue;

  0043f	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  00442	01 86 7c 06 00
	00		 add	 DWORD PTR [esi+1660], eax
  00448	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  00449	5d		 pop	 ebp
  0044a	c2 0c 00	 ret	 12			; 0000000cH
$LN34@SetBuffEff:

; 144  : 		break;
; 145  : 	case SUB_OPTION_SUCCESSFULBLOCKING:
; 146  :         lpObj->m_SuccessfulBlocking -= EffectValue;

  0044d	8b 45 10	 mov	 eax, DWORD PTR _EffectValue$[ebp]
  00450	29 86 7c 06 00
	00		 sub	 DWORD PTR [esi+1660], eax

; 147  :         if ( lpObj->m_SuccessfulBlocking < 0 )

  00456	79 0a		 jns	 SHORT $LN35@SetBuffEff

; 148  :           lpObj->m_SuccessfulBlocking = 0;

  00458	c7 86 7c 06 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1660], 0
$LN35@SetBuffEff:
  00462	5e		 pop	 esi

; 149  :         break;
; 150  : 	default:
; 151  : 		return;
; 152  : 	}
; 153  : }

  00463	5d		 pop	 ebp
  00464	c2 0c 00	 ret	 12			; 0000000cH
  00467	90		 npad	 1
$LN56@SetBuffEff:
  00468	00 00 00 00	 DD	 $LN7@SetBuffEff
  0046c	00 00 00 00	 DD	 $LN8@SetBuffEff
  00470	00 00 00 00	 DD	 $LN9@SetBuffEff
  00474	00 00 00 00	 DD	 $LN10@SetBuffEff
  00478	00 00 00 00	 DD	 $LN11@SetBuffEff
  0047c	00 00 00 00	 DD	 $LN12@SetBuffEff
  00480	00 00 00 00	 DD	 $LN13@SetBuffEff
  00484	00 00 00 00	 DD	 $LN14@SetBuffEff
  00488	00 00 00 00	 DD	 $LN15@SetBuffEff
  0048c	00 00 00 00	 DD	 $LN35@SetBuffEff
  00490	00 00 00 00	 DD	 $LN17@SetBuffEff
  00494	00 00 00 00	 DD	 $LN18@SetBuffEff
  00498	00 00 00 00	 DD	 $LN19@SetBuffEff
  0049c	00 00 00 00	 DD	 $LN23@SetBuffEff
  004a0	00 00 00 00	 DD	 $LN24@SetBuffEff
  004a4	00 00 00 00	 DD	 $LN25@SetBuffEff
  004a8	00 00 00 00	 DD	 $LN26@SetBuffEff
  004ac	00 00 00 00	 DD	 $LN21@SetBuffEff
  004b0	00 00 00 00	 DD	 $LN22@SetBuffEff
  004b4	00 00 00 00	 DD	 $LN27@SetBuffEff
  004b8	00 00 00 00	 DD	 $LN28@SetBuffEff
  004bc	00 00 00 00	 DD	 $LN29@SetBuffEff
  004c0	00 00 00 00	 DD	 $LN30@SetBuffEff
  004c4	00 00 00 00	 DD	 $LN32@SetBuffEff
  004c8	00 00 00 00	 DD	 $LN31@SetBuffEff
  004cc	00 00 00 00	 DD	 $LN33@SetBuffEff
  004d0	00 00 00 00	 DD	 $LN34@SetBuffEff
  004d4	00 00 00 00	 DD	 $LN35@SetBuffEff
$LN51@SetBuffEff:
  004d8	00		 DB	 0
  004d9	1b		 DB	 27			; 0000001bH
  004da	01		 DB	 1
  004db	02		 DB	 2
  004dc	03		 DB	 3
  004dd	1b		 DB	 27			; 0000001bH
  004de	1b		 DB	 27			; 0000001bH
  004df	1b		 DB	 27			; 0000001bH
  004e0	04		 DB	 4
  004e1	05		 DB	 5
  004e2	06		 DB	 6
  004e3	07		 DB	 7
  004e4	08		 DB	 8
  004e5	1b		 DB	 27			; 0000001bH
  004e6	1b		 DB	 27			; 0000001bH
  004e7	1b		 DB	 27			; 0000001bH
  004e8	1b		 DB	 27			; 0000001bH
  004e9	1b		 DB	 27			; 0000001bH
  004ea	1b		 DB	 27			; 0000001bH
  004eb	1b		 DB	 27			; 0000001bH
  004ec	09		 DB	 9
  004ed	0a		 DB	 10			; 0000000aH
  004ee	1b		 DB	 27			; 0000001bH
  004ef	0b		 DB	 11			; 0000000bH
  004f0	1b		 DB	 27			; 0000001bH
  004f1	0c		 DB	 12			; 0000000cH
  004f2	1b		 DB	 27			; 0000001bH
  004f3	09		 DB	 9
  004f4	1b		 DB	 27			; 0000001bH
  004f5	1b		 DB	 27			; 0000001bH
  004f6	0d		 DB	 13			; 0000000dH
  004f7	0e		 DB	 14			; 0000000eH
  004f8	0f		 DB	 15			; 0000000fH
  004f9	10		 DB	 16			; 00000010H
  004fa	1b		 DB	 27			; 0000001bH
  004fb	1b		 DB	 27			; 0000001bH
  004fc	1b		 DB	 27			; 0000001bH
  004fd	1b		 DB	 27			; 0000001bH
  004fe	1b		 DB	 27			; 0000001bH
  004ff	1b		 DB	 27			; 0000001bH
  00500	1b		 DB	 27			; 0000001bH
  00501	1b		 DB	 27			; 0000001bH
  00502	1b		 DB	 27			; 0000001bH
  00503	1b		 DB	 27			; 0000001bH
  00504	1b		 DB	 27			; 0000001bH
  00505	1b		 DB	 27			; 0000001bH
  00506	1b		 DB	 27			; 0000001bH
  00507	1b		 DB	 27			; 0000001bH
  00508	1b		 DB	 27			; 0000001bH
  00509	1b		 DB	 27			; 0000001bH
  0050a	1b		 DB	 27			; 0000001bH
  0050b	1b		 DB	 27			; 0000001bH
  0050c	1b		 DB	 27			; 0000001bH
  0050d	1b		 DB	 27			; 0000001bH
  0050e	11		 DB	 17			; 00000011H
  0050f	12		 DB	 18			; 00000012H
  00510	13		 DB	 19			; 00000013H
  00511	14		 DB	 20			; 00000014H
  00512	1b		 DB	 27			; 0000001bH
  00513	1b		 DB	 27			; 0000001bH
  00514	1b		 DB	 27			; 0000001bH
  00515	1b		 DB	 27			; 0000001bH
  00516	1b		 DB	 27			; 0000001bH
  00517	1b		 DB	 27			; 0000001bH
  00518	1b		 DB	 27			; 0000001bH
  00519	15		 DB	 21			; 00000015H
  0051a	16		 DB	 22			; 00000016H
  0051b	1b		 DB	 27			; 0000001bH
  0051c	1b		 DB	 27			; 0000001bH
  0051d	17		 DB	 23			; 00000017H
  0051e	18		 DB	 24			; 00000018H
  0051f	1b		 DB	 27			; 0000001bH
  00520	1b		 DB	 27			; 0000001bH
  00521	19		 DB	 25			; 00000019H
  00522	1a		 DB	 26			; 0000001aH
?SetBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ENDP ; CBuffEffect::SetBuffEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffect.cpp
;	COMDAT ??1CBuffEffect@@UAE@XZ
_TEXT	SEGMENT
??1CBuffEffect@@UAE@XZ PROC				; CBuffEffect::~CBuffEffect, COMDAT
; _this$ = ecx

; 14   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CBuffEffect@@6B@

; 15   : 
; 16   : }

  00006	c3		 ret	 0
??1CBuffEffect@@UAE@XZ ENDP				; CBuffEffect::~CBuffEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffect.cpp
;	COMDAT ??0CBuffEffect@@QAE@XZ
_TEXT	SEGMENT
??0CBuffEffect@@QAE@XZ PROC				; CBuffEffect::CBuffEffect, COMDAT
; _this$ = ecx

; 9    : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CBuffEffect@@6B@

; 10   : 
; 11   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0CBuffEffect@@QAE@XZ ENDP				; CBuffEffect::CBuffEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffect.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffect.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 568  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
