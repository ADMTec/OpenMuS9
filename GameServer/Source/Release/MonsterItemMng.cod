; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\MonsterItemMng.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CMonsterItemMng@@QAE@XZ			; CMonsterItemMng::CMonsterItemMng
PUBLIC	??1CMonsterItemMng@@UAE@XZ			; CMonsterItemMng::~CMonsterItemMng
PUBLIC	?Init@CMonsterItemMng@@QAEXXZ			; CMonsterItemMng::Init
PUBLIC	?Clear@CMonsterItemMng@@QAEXXZ			; CMonsterItemMng::Clear
PUBLIC	?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z	; CMonsterItemMng::InsertItem
PUBLIC	?GetItem@CMonsterItemMng@@QAEPAVCItem@@H@Z	; CMonsterItemMng::GetItem
PUBLIC	?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z	; CMonsterItemMng::gObjGiveItemSearch
PUBLIC	??_GCMonsterItemMng@@UAEPAXI@Z			; CMonsterItemMng::`scalar deleting destructor'
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??_7CMonsterItemMng@@6B@			; CMonsterItemMng::`vftable'
PUBLIC	?g_MonsterItemMng@@3VCMonsterItemMng@@A		; g_MonsterItemMng
PUBLIC	??_C@_0BD@PNGGBLBH@MonsterItemMng?4cpp?$AA@	; `string'
PUBLIC	??_C@_0CJ@BKDFKMDM@error?9L3?5?3?5Monster?5Level?5Overflo@ ; `string'
PUBLIC	??_R4CMonsterItemMng@@6B@			; CMonsterItemMng::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMonsterItemMng@@@8			; CMonsterItemMng `RTTI Type Descriptor'
PUBLIC	??_R3CMonsterItemMng@@8				; CMonsterItemMng::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMonsterItemMng@@8				; CMonsterItemMng::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMonsterItemMng@@8		; CMonsterItemMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@42c80000
PUBLIC	__xmm@00000003000000020000000100000000
PUBLIC	__xmm@00000004000000040000000400000004
PUBLIC	__xmm@00000007000000070000000700000007
PUBLIC	__xmm@00000010000000100000001000000010
PUBLIC	__xmm@00000015000000150000001500000015
PUBLIC	__xmm@0000002e0000002d0000002c00000023
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	_rand:PROC
EXTRN	??0CItem@@QAE@XZ:PROC				; CItem::CItem
EXTRN	?Convert@CItem@@QAEXHEEEEEEPAEEE@Z:PROC		; CItem::Convert
EXTRN	?zzzItemLevel@@YAHHHH@Z:PROC			; zzzItemLevel
EXTRN	?GetLevelItem@@YAHHHH@Z:PROC			; GetLevelItem
EXTRN	??_ECMonsterItemMng@@UAEPAXI@Z:PROC		; CMonsterItemMng::`vector deleting destructor'
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z:PROC ; CMonsterAttr::GetAttr
EXTRN	?IsCashItem@@YAHH@Z:PROC			; IsCashItem
EXTRN	?IsCashSpecialItem@@YAHH@Z:PROC			; IsCashSpecialItem
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?g_MaxItemIndexOfEachItemType@@3PAHA:BYTE	; g_MaxItemIndexOfEachItemType
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?gDevilSquareEvent@@3HA:DWORD			; gDevilSquareEvent
EXTRN	?gMAttr@@3VCMonsterAttr@@A:BYTE			; gMAttr
EXTRN	?gEyesOfDevilSquareDropRate@@3HA:DWORD		; gEyesOfDevilSquareDropRate
EXTRN	?gKeyOfDevilSquareDropRate@@3HA:DWORD		; gKeyOfDevilSquareDropRate
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_MonsterItemMng@@3VCMonsterItemMng@@A DB 08d4H DUP (?) ; g_MonsterItemMng
_BSS	ENDS
CRT$XCU	SEGMENT
?g_MonsterItemMng$initializer$@@3P6AXXZA DD FLAT:??__Eg_MonsterItemMng@@YAXXZ ; g_MonsterItemMng$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@0000002e0000002d0000002c00000023
CONST	SEGMENT
__xmm@0000002e0000002d0000002c00000023 DB '#', 00H, 00H, 00H, ',', 00H, 00H
	DB	00H, '-', 00H, 00H, 00H, '.', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000015000000150000001500000015
CONST	SEGMENT
__xmm@00000015000000150000001500000015 DB 015H, 00H, 00H, 00H, 015H, 00H, 00H
	DB	00H, 015H, 00H, 00H, 00H, 015H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000100000001000000010
CONST	SEGMENT
__xmm@00000010000000100000001000000010 DB 010H, 00H, 00H, 00H, 010H, 00H, 00H
	DB	00H, 010H, 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000007000000070000000700000007
CONST	SEGMENT
__xmm@00000007000000070000000700000007 DB 07H, 00H, 00H, 00H, 07H, 00H, 00H
	DB	00H, 07H, 00H, 00H, 00H, 07H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000004000000040000000400000004
CONST	SEGMENT
__xmm@00000004000000040000000400000004 DB 04H, 00H, 00H, 00H, 04H, 00H, 00H
	DB	00H, 04H, 00H, 00H, 00H, 04H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000003000000020000000100000000
CONST	SEGMENT
__xmm@00000003000000020000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 03H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CMonsterItemMng@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMonsterItemMng@@8 DD FLAT:??_R0?AVCMonsterItemMng@@@8 ; CMonsterItemMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMonsterItemMng@@8
rdata$r	ENDS
;	COMDAT ??_R2CMonsterItemMng@@8
rdata$r	SEGMENT
??_R2CMonsterItemMng@@8 DD FLAT:??_R1A@?0A@EA@CMonsterItemMng@@8 ; CMonsterItemMng::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMonsterItemMng@@8
rdata$r	SEGMENT
??_R3CMonsterItemMng@@8 DD 00H				; CMonsterItemMng::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMonsterItemMng@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMonsterItemMng@@@8
data$r	SEGMENT
??_R0?AVCMonsterItemMng@@@8 DD FLAT:??_7type_info@@6B@	; CMonsterItemMng `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMonsterItemMng@@', 00H
data$r	ENDS
;	COMDAT ??_R4CMonsterItemMng@@6B@
rdata$r	SEGMENT
??_R4CMonsterItemMng@@6B@ DD 00H			; CMonsterItemMng::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMonsterItemMng@@@8
	DD	FLAT:??_R3CMonsterItemMng@@8
rdata$r	ENDS
;	COMDAT ??_C@_0CJ@BKDFKMDM@error?9L3?5?3?5Monster?5Level?5Overflo@
CONST	SEGMENT
??_C@_0CJ@BKDFKMDM@error?9L3?5?3?5Monster?5Level?5Overflo@ DB 'error-L3 :'
	DB	' Monster Level Overflow~ %s %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PNGGBLBH@MonsterItemMng?4cpp?$AA@
CONST	SEGMENT
??_C@_0BD@PNGGBLBH@MonsterItemMng?4cpp?$AA@ DB 'MonsterItemMng.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CMonsterItemMng@@6B@
CONST	SEGMENT
??_7CMonsterItemMng@@6B@ DD FLAT:??_R4CMonsterItemMng@@6B@ ; CMonsterItemMng::`vftable'
	DD	FLAT:??_ECMonsterItemMng@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Init@CMonsterItemMng@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@CMonsterItemMng@@QAEXXZ$0
__ehfuncinfo$?Init@CMonsterItemMng@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Init@CMonsterItemMng@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_MonsterItemMng@@YAXXZ
text$yd	SEGMENT
??__Fg_MonsterItemMng@@YAXXZ PROC			; `dynamic atexit destructor for 'g_MonsterItemMng'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MonsterItemMng@@3VCMonsterItemMng@@A ; g_MonsterItemMng
  00005	e9 00 00 00 00	 jmp	 ??1CMonsterItemMng@@UAE@XZ ; CMonsterItemMng::~CMonsterItemMng
??__Fg_MonsterItemMng@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_MonsterItemMng''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmng.cpp
;	COMDAT ??__Eg_MonsterItemMng@@YAXXZ
text$di	SEGMENT
??__Eg_MonsterItemMng@@YAXXZ PROC			; `dynamic initializer for 'g_MonsterItemMng'', COMDAT

; 11   : CMonsterItemMng g_MonsterItemMng;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MonsterItemMng@@3VCMonsterItemMng@@A ; g_MonsterItemMng
  00005	e8 00 00 00 00	 call	 ??0CMonsterItemMng@@QAE@XZ ; CMonsterItemMng::CMonsterItemMng
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_MonsterItemMng@@YAXXZ ; `dynamic atexit destructor for 'g_MonsterItemMng''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_MonsterItemMng@@YAXXZ ENDP			; `dynamic initializer for 'g_MonsterItemMng''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCMonsterItemMng@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMonsterItemMng@@UAEPAXI@Z PROC			; CMonsterItemMng::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMonsterItemMng@@UAE@XZ ; CMonsterItemMng::~CMonsterItemMng
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 d4 08 00 00	 push	 2260			; 000008d4H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCMonsterItemMng@@UAEPAXI@Z ENDP			; CMonsterItemMng::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmng.cpp
;	COMDAT ?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z
_TEXT	SEGMENT
_bCheckDevil$1$ = -104					; size = 4
tv1131 = -104						; size = 4
_this$GSCopy$1$ = -100					; size = 4
_incount$1$ = -96					; size = 4
_BallTable$ = -92					; size = 88
__$ArrayPad$ = -4					; size = 4
_monsterlevel$ = 8					; size = 4
_maxlevel$ = 12						; size = 4
?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z PROC	; CMonsterItemMng::gObjGiveItemSearch, COMDAT
; _this$ = ecx

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _monsterlevel$[ebp]
  00014	89 4d 9c	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx

; 143  : 	int result;
; 144  : 	int incount = 0;

  00017	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _incount$1$[ebp], 0

; 145  : 	int type;
; 146  : 	int index;
; 147  : 
; 148  : 	if ( monsterlevel > MAX_LEVEL_MONSTER-1 )

  0001e	81 fb f9 00 00
	00		 cmp	 ebx, 249		; 000000f9H
  00024	7e 29		 jle	 SHORT $LN4@gObjGiveIt

; 149  : 	{
; 150  : 		LogAdd("error-L3 : Monster Level Overflow~ %s %d", __FILE__, __LINE__ );

  00026	68 96 00 00 00	 push	 150			; 00000096H
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PNGGBLBH@MonsterItemMng?4cpp?$AA@
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@BKDFKMDM@error?9L3?5?3?5Monster?5Level?5Overflo@
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003e	5b		 pop	 ebx

; 436  : 		{
; 437  : 			return;
; 438  : 		}
; 439  : 		
; 440  : 	}
; 441  : }

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00042	33 cd		 xor	 ecx, ebp
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
$LN4@gObjGiveIt:
  0004f	0f 28 15 00 00
	00 00		 movaps	 xmm2, XMMWORD PTR __xmm@00000003000000020000000100000000
  00056	0f 28 c2	 movaps	 xmm0, xmm2

; 151  : 		return;
; 152  : 	}
; 153  : 
; 154  : 	int BallTable[22];
; 155  : 
; 156  : 	BallTable[0] = 7;
; 157  : 	BallTable[1] = 8;
; 158  : 	BallTable[2] = 9;
; 159  : 	BallTable[3] = 10;
; 160  : 	BallTable[4] = 11;
; 161  : 	BallTable[5] = 12;
; 162  : 	BallTable[6] = 13;
; 163  : 	BallTable[7] = 14;
; 164  : 	BallTable[8] = 16;
; 165  : 	BallTable[9] = 17;
; 166  : 	BallTable[10] = 18;
; 167  : 	BallTable[11] = 19;
; 168  : 	BallTable[12] = 21;
; 169  : 	BallTable[13] = 22;
; 170  : 	BallTable[14] = 23;
; 171  : 	BallTable[15] = 24;
; 172  : 	BallTable[16] = 35;
; 173  : 	BallTable[17] = 44;
; 174  : 	BallTable[18] = 45;
; 175  : 	BallTable[19] = 46;
; 176  : 	BallTable[20] = 47;

  00059	c7 45 f4 2f 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+80], 47 ; 0000002fH
  00060	66 0f fe 05 00
	00 00 00	 paddd	 xmm0, XMMWORD PTR __xmm@00000007000000070000000700000007
  00068	0f 28 da	 movaps	 xmm3, xmm2
  0006b	0f 11 45 a4	 movups	 XMMWORD PTR _BallTable$[ebp], xmm0
  0006f	56		 push	 esi
  00070	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000004000000040000000400000004
  00077	66 0f fe c2	 paddd	 xmm0, xmm2

; 177  : 	BallTable[21] = 48;

  0007b	c7 45 f8 30 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+84], 48 ; 00000030H
  00082	66 0f fe 05 00
	00 00 00	 paddd	 xmm0, XMMWORD PTR __xmm@00000007000000070000000700000007
  0008a	0f 11 45 b4	 movups	 XMMWORD PTR _BallTable$[ebp+16], xmm0
  0008e	57		 push	 edi
  0008f	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000010000000100000001000000010
  00096	66 0f fe c3	 paddd	 xmm0, xmm3
  0009a	0f 11 45 c4	 movups	 XMMWORD PTR _BallTable$[ebp+32], xmm0
  0009e	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000015000000150000001500000015
  000a5	66 0f fe c3	 paddd	 xmm0, xmm3
  000a9	0f 11 45 d4	 movups	 XMMWORD PTR _BallTable$[ebp+48], xmm0
  000ad	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@0000002e0000002d0000002c00000023
  000b4	0f 11 45 e4	 movups	 XMMWORD PTR _BallTable$[ebp+64], xmm0
$LN192@gObjGiveIt:
  000b8	be 16 00 00 00	 mov	 esi, 22			; 00000016H
  000bd	0f 1f 00	 npad	 3
$LL2@gObjGiveIt:

; 178  : 
; 179  : 
; 180  : 	while ( true )
; 181  : 	{
; 182  : 		if ( (rand() % 20) ==  0 ) 

  000c0	e8 00 00 00 00	 call	 _rand
  000c5	99		 cdq
  000c6	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  000cb	f7 f9		 idiv	 ecx
  000cd	85 d2		 test	 edx, edx
  000cf	75 44		 jne	 SHORT $LN5@gObjGiveIt

; 183  : 		{
; 184  : 			if ( (rand() % 2)	!= 0 )

  000d1	e8 00 00 00 00	 call	 _rand
  000d6	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000db	79 05		 jns	 SHORT $LN196@gObjGiveIt
  000dd	48		 dec	 eax
  000de	83 c8 fe	 or	 eax, -2			; fffffffeH
  000e1	40		 inc	 eax
$LN196@gObjGiveIt:
  000e2	74 1b		 je	 SHORT $LN7@gObjGiveIt

; 185  : 			{
; 186  : 				type = MAX_TYPE_ITEMS-1;

  000e4	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH

; 187  : 				index = rand() % (g_MaxItemIndexOfEachItemType[type]+1);

  000e9	e8 00 00 00 00	 call	 _rand
  000ee	8b 0d 3c 00 00
	00		 mov	 ecx, DWORD PTR ?g_MaxItemIndexOfEachItemType@@3PAHA+60
  000f4	41		 inc	 ecx
  000f5	99		 cdq
  000f6	f7 f9		 idiv	 ecx
  000f8	8b f2		 mov	 esi, edx

; 188  : 			}
; 189  : 			else

  000fa	e9 d8 00 00 00	 jmp	 $LN19@gObjGiveIt
$LN7@gObjGiveIt:

; 190  : 			{
; 191  : 				type = 12;

  000ff	bf 0c 00 00 00	 mov	 edi, 12			; 0000000cH

; 192  : 				index = BallTable[rand() % 22];

  00104	e8 00 00 00 00	 call	 _rand
  00109	99		 cdq
  0010a	f7 fe		 idiv	 esi
  0010c	8b 74 95 a4	 mov	 esi, DWORD PTR _BallTable$[ebp+edx*4]

; 193  : 			}
; 194  : 		}
; 195  : 		else

  00110	e9 c2 00 00 00	 jmp	 $LN19@gObjGiveIt
$LN5@gObjGiveIt:

; 196  : 		{
; 197  : 			type = rand() % MAX_TYPE_ITEMS;

  00115	e8 00 00 00 00	 call	 _rand
  0011a	8b f8		 mov	 edi, eax
  0011c	81 e7 0f 00 00
	80		 and	 edi, -2147483633	; 8000000fH
  00122	79 05		 jns	 SHORT $LN197@gObjGiveIt
  00124	4f		 dec	 edi
  00125	83 cf f0	 or	 edi, -16		; fffffff0H
  00128	47		 inc	 edi
$LN197@gObjGiveIt:

; 198  : 			int iMaxItemIndex = g_MaxItemIndexOfEachItemType[type]+1;

  00129	8b 34 bd 00 00
	00 00		 mov	 esi, DWORD PTR ?g_MaxItemIndexOfEachItemType@@3PAHA[edi*4]
  00130	46		 inc	 esi

; 199  : 			index = rand() % iMaxItemIndex;

  00131	e8 00 00 00 00	 call	 _rand
  00136	99		 cdq
  00137	f7 fe		 idiv	 esi
  00139	8b f2		 mov	 esi, edx

; 200  : 
; 201  : 			if ( type == 15 || (type == 12 && index != 15 ) )

  0013b	83 ff 0f	 cmp	 edi, 15			; 0000000fH
  0013e	0f 84 74 ff ff
	ff		 je	 $LN192@gObjGiveIt
  00144	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  00147	75 0e		 jne	 SHORT $LN9@gObjGiveIt
  00149	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  0014c	0f 85 66 ff ff
	ff		 jne	 $LN192@gObjGiveIt

; 202  : 			{
; 203  : 				continue;
; 204  : 			}
; 205  : 		}
; 206  : 
; 207  : 		if ( type == 13 && index == 3 )

  00152	e9 80 00 00 00	 jmp	 $LN19@gObjGiveIt
$LN9@gObjGiveIt:
  00157	83 ff 0d	 cmp	 edi, 13			; 0000000dH
  0015a	75 40		 jne	 SHORT $LN12@gObjGiveIt
  0015c	83 fe 03	 cmp	 esi, 3
  0015f	0f 84 53 ff ff
	ff		 je	 $LN192@gObjGiveIt

; 208  : 		{
; 209  : 			continue;
; 210  : 		}
; 211  : 
; 212  : 		if ( (type == 13 && index == 32)
; 213  :           || (type == 13 && index == 33)
; 214  :           || (type == 13 && index == 34)
; 215  :           || (type == 13 && index == 35)
; 216  :           || (type == 13 && index == 36)
; 217  :           || (type == 13 && index == 37) )

  00165	83 fe 20	 cmp	 esi, 32			; 00000020H
  00168	0f 84 4a ff ff
	ff		 je	 $LN192@gObjGiveIt
  0016e	83 fe 21	 cmp	 esi, 33			; 00000021H
  00171	0f 84 41 ff ff
	ff		 je	 $LN192@gObjGiveIt
  00177	83 fe 22	 cmp	 esi, 34			; 00000022H
  0017a	0f 84 38 ff ff
	ff		 je	 $LN192@gObjGiveIt
  00180	83 fe 23	 cmp	 esi, 35			; 00000023H
  00183	0f 84 2f ff ff
	ff		 je	 $LN192@gObjGiveIt
  00189	83 fe 24	 cmp	 esi, 36			; 00000024H
  0018c	0f 84 26 ff ff
	ff		 je	 $LN192@gObjGiveIt
  00192	83 fe 25	 cmp	 esi, 37			; 00000025H
  00195	75 40		 jne	 SHORT $LN19@gObjGiveIt

; 218  : 		{
; 219  : 			continue;

  00197	e9 1c ff ff ff	 jmp	 $LN192@gObjGiveIt
$LN12@gObjGiveIt:

; 220  : 		}
; 221  : 
; 222  :         if ( (type == 14 && index == 35)
; 223  :           || (type == 14 && index == 36)
; 224  :           || (type == 14 && index == 37)
; 225  :           || (type == 14 && index == 38)
; 226  :           || (type == 14 && index == 39)
; 227  :           || (type == 14 && index == 40) )

  0019c	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  0019f	75 36		 jne	 SHORT $LN19@gObjGiveIt
  001a1	83 fe 23	 cmp	 esi, 35			; 00000023H
  001a4	0f 84 0e ff ff
	ff		 je	 $LN192@gObjGiveIt
  001aa	83 fe 24	 cmp	 esi, 36			; 00000024H
  001ad	0f 84 05 ff ff
	ff		 je	 $LN192@gObjGiveIt
  001b3	83 fe 25	 cmp	 esi, 37			; 00000025H
  001b6	0f 84 fc fe ff
	ff		 je	 $LN192@gObjGiveIt
  001bc	83 fe 26	 cmp	 esi, 38			; 00000026H
  001bf	0f 84 f3 fe ff
	ff		 je	 $LN192@gObjGiveIt
  001c5	83 fe 27	 cmp	 esi, 39			; 00000027H
  001c8	0f 84 ea fe ff
	ff		 je	 $LN192@gObjGiveIt
  001ce	83 fe 28	 cmp	 esi, 40			; 00000028H
  001d1	0f 84 e1 fe ff
	ff		 je	 $LN192@gObjGiveIt
$LN19@gObjGiveIt:

; 228  : 		{
; 229  : 			continue;
; 230  : 		}
; 231  : 
; 232  :         if ( IsCashItem(ITEMGET(type, index)) == TRUE )

  001d7	8b c7		 mov	 eax, edi
  001d9	c1 e0 09	 shl	 eax, 9
  001dc	03 c6		 add	 eax, esi
  001de	50		 push	 eax
  001df	89 45 98	 mov	 DWORD PTR tv1131[ebp], eax
  001e2	e8 00 00 00 00	 call	 ?IsCashItem@@YAHH@Z	; IsCashItem
  001e7	83 c4 04	 add	 esp, 4
  001ea	83 f8 01	 cmp	 eax, 1
  001ed	0f 84 c5 fe ff
	ff		 je	 $LN192@gObjGiveIt

; 233  : 		{
; 234  : 			continue;
; 235  : 		}
; 236  : 
; 237  : 		if ( IsCashSpecialItem(ITEMGET(type,index)) == TRUE )

  001f3	ff 75 98	 push	 DWORD PTR tv1131[ebp]
  001f6	e8 00 00 00 00	 call	 ?IsCashSpecialItem@@YAHH@Z ; IsCashSpecialItem
  001fb	83 c4 04	 add	 esp, 4
  001fe	83 f8 01	 cmp	 eax, 1
  00201	0f 84 b1 fe ff
	ff		 je	 $LN192@gObjGiveIt

; 238  : 		{
; 239  : 			continue;
; 240  : 		}
; 241  : 
; 242  : 		if ( (type == 14 && index == 45) ||
; 243  : 			 (type == 14 && index == 46) ||
; 244  : 			 (type == 14 && index == 47) ||
; 245  : 			 (type == 14 && index == 48) ||
; 246  : 			 (type == 14 && index == 49) ||

  00207	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  0020a	75 62		 jne	 SHORT $LN28@gObjGiveIt
  0020c	83 fe 2d	 cmp	 esi, 45			; 0000002dH
  0020f	0f 84 a3 fe ff
	ff		 je	 $LN192@gObjGiveIt
  00215	83 fe 2e	 cmp	 esi, 46			; 0000002eH
  00218	0f 84 9a fe ff
	ff		 je	 $LN192@gObjGiveIt
  0021e	83 fe 2f	 cmp	 esi, 47			; 0000002fH
  00221	0f 84 91 fe ff
	ff		 je	 $LN192@gObjGiveIt
  00227	83 fe 30	 cmp	 esi, 48			; 00000030H
  0022a	0f 84 88 fe ff
	ff		 je	 $LN192@gObjGiveIt
  00230	83 fe 31	 cmp	 esi, 49			; 00000031H
  00233	0f 84 7f fe ff
	ff		 je	 $LN192@gObjGiveIt
  00239	83 fe 32	 cmp	 esi, 50			; 00000032H
  0023c	0f 84 76 fe ff
	ff		 je	 $LN192@gObjGiveIt

; 253  : 		{
; 254  : 			continue;
; 255  : 		}
; 256  :         
; 257  : 		if ( (type == 13 && index < 8) || 
; 258  : 			( (type == 14) && (index == 9 || index == 10 ||	index == 13 || index == 14 || index ==16 || index == 17 || index == 18 || index == 22 ) ) ||
; 259  : 			(type == 12 && index == 15) || 
; 260  : 			(type == 13 && index == 14) || 

  00242	83 fe 09	 cmp	 esi, 9
  00245	74 6d		 je	 SHORT $LN38@gObjGiveIt
  00247	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  0024a	74 68		 je	 SHORT $LN38@gObjGiveIt
  0024c	83 fe 0d	 cmp	 esi, 13			; 0000000dH
  0024f	74 63		 je	 SHORT $LN38@gObjGiveIt
  00251	3b f7		 cmp	 esi, edi
  00253	74 5f		 je	 SHORT $LN38@gObjGiveIt
  00255	83 fe 10	 cmp	 esi, 16			; 00000010H
  00258	74 5a		 je	 SHORT $LN38@gObjGiveIt
  0025a	83 fe 11	 cmp	 esi, 17			; 00000011H
  0025d	74 55		 je	 SHORT $LN38@gObjGiveIt
  0025f	83 fe 12	 cmp	 esi, 18			; 00000012H
  00262	74 50		 je	 SHORT $LN38@gObjGiveIt
  00264	83 fe 16	 cmp	 esi, 22			; 00000016H
  00267	74 4b		 je	 SHORT $LN38@gObjGiveIt
  00269	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  0026c	eb 44		 jmp	 SHORT $LN198@gObjGiveIt
$LN28@gObjGiveIt:

; 247  : 			 (type == 14 && index == 50) )
; 248  : 		{
; 249  : 			continue;
; 250  : 		}
; 251  : 
; 252  : 		if ( (type == 13 && index == 41) )

  0026e	83 ff 0d	 cmp	 edi, 13			; 0000000dH
  00271	75 37		 jne	 SHORT $LN40@gObjGiveIt
  00273	83 fe 29	 cmp	 esi, 41			; 00000029H
  00276	0f 84 3c fe ff
	ff		 je	 $LN192@gObjGiveIt

; 253  : 		{
; 254  : 			continue;
; 255  : 		}
; 256  :         
; 257  : 		if ( (type == 13 && index < 8) || 
; 258  : 			( (type == 14) && (index == 9 || index == 10 ||	index == 13 || index == 14 || index ==16 || index == 17 || index == 18 || index == 22 ) ) ||
; 259  : 			(type == 12 && index == 15) || 
; 260  : 			(type == 13 && index == 14) || 

  0027c	83 fe 08	 cmp	 esi, 8
  0027f	7c 33		 jl	 SHORT $LN38@gObjGiveIt
  00281	83 fe 0e	 cmp	 esi, 14			; 0000000eH
  00284	74 2e		 je	 SHORT $LN38@gObjGiveIt
$LN36@gObjGiveIt:

; 377  : 		{
; 378  : 			result = GetLevelItem(type, index, monsterlevel);

  00286	53		 push	 ebx
  00287	56		 push	 esi
  00288	57		 push	 edi
  00289	e8 00 00 00 00	 call	 ?GetLevelItem@@YAHHHH@Z	; GetLevelItem
  0028e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 379  : 
; 380  : 			if ( result >= 0 )

  00291	85 c0		 test	 eax, eax
  00293	0f 88 9d 01 00
	00		 js	 $LN91@gObjGiveIt

; 381  : 			{
; 382  : 				if ( (type == 13 && index == 10) || (type == 12 && index == 11 ) )

  00299	83 ff 0d	 cmp	 edi, 13			; 0000000dH
  0029c	0f 85 3c 01 00
	00		 jne	 $LN78@gObjGiveIt
  002a2	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  002a5	e9 3c 01 00 00	 jmp	 $LN202@gObjGiveIt
$LN40@gObjGiveIt:

; 253  : 		{
; 254  : 			continue;
; 255  : 		}
; 256  :         
; 257  : 		if ( (type == 13 && index < 8) || 
; 258  : 			( (type == 14) && (index == 9 || index == 10 ||	index == 13 || index == 14 || index ==16 || index == 17 || index == 18 || index == 22 ) ) ||
; 259  : 			(type == 12 && index == 15) || 
; 260  : 			(type == 13 && index == 14) || 

  002aa	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  002ad	75 d7		 jne	 SHORT $LN36@gObjGiveIt
  002af	83 fe 0f	 cmp	 esi, 15			; 0000000fH
$LN198@gObjGiveIt:
  002b2	75 d2		 jne	 SHORT $LN36@gObjGiveIt
$LN38@gObjGiveIt:

; 261  : 			(type == 14 && index == 31 ) )
; 262  : 		{
; 263  : 			int perc = rand() % 11;

  002b4	e8 00 00 00 00	 call	 _rand
  002b9	99		 cdq
  002ba	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  002bf	f7 f9		 idiv	 ecx

; 264  : 			BOOL bCheckDevil = FALSE;

  002c1	33 c0		 xor	 eax, eax
  002c3	89 45 98	 mov	 DWORD PTR _bCheckDevil$1$[ebp], eax

; 265  : 
; 266  : 			if ( type == 12 && index == 15 )

  002c6	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  002c9	75 48		 jne	 SHORT $LN45@gObjGiveIt
  002cb	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  002ce	0f 85 a0 00 00
	00		 jne	 $LN51@gObjGiveIt

; 267  : 			{
; 268  : 				if ( monsterlevel >= 13 && monsterlevel <= 66 )

  002d4	8d 43 f3	 lea	 eax, DWORD PTR [ebx-13]
  002d7	83 f8 35	 cmp	 eax, 53			; 00000035H
  002da	0f 87 56 01 00
	00		 ja	 $LN91@gObjGiveIt

; 269  : 				{
; 270  : 					perc = rand() % 7 ;

  002e0	e8 00 00 00 00	 call	 _rand
  002e5	99		 cdq
  002e6	b9 07 00 00 00	 mov	 ecx, 7
  002eb	f7 f9		 idiv	 ecx

; 271  : 					
; 272  : 					if ( perc < 3 )

  002ed	83 fa 03	 cmp	 edx, 3
  002f0	7d 7f		 jge	 SHORT $LN169@gObjGiveIt
$LN53@gObjGiveIt:

; 362  : 				else if ( zzzItemLevel(type, index, monsterlevel ) == TRUE )

  002f2	53		 push	 ebx
  002f3	56		 push	 esi
  002f4	57		 push	 edi
  002f5	e8 00 00 00 00	 call	 ?zzzItemLevel@@YAHHHH@Z	; zzzItemLevel
  002fa	83 c4 0c	 add	 esp, 12			; 0000000cH
  002fd	83 f8 01	 cmp	 eax, 1
  00300	0f 85 30 01 00
	00		 jne	 $LN91@gObjGiveIt

; 363  : 				{
; 364  : 					if ( this->InsertItem(monsterlevel, type, index, 0, 0, 0, 0) != (BYTE)-1 )

  00306	6a 00		 push	 0
  00308	6a 00		 push	 0
  0030a	6a 00		 push	 0
  0030c	6a 00		 push	 0

; 365  : 					{
; 366  : 						incount++;
; 367  : 
; 368  : 						if ( incount > MAX_ITEM_IN_MONSTER -1 )
; 369  : 						{
; 370  : 							return;
; 371  : 						}
; 372  : 					}
; 373  : 				}
; 374  : 			}
; 375  : 		}
; 376  : 		else

  0030e	e9 05 01 00 00	 jmp	 $LN201@gObjGiveIt
$LN45@gObjGiveIt:

; 273  : 					{
; 274  : 						perc = 0;
; 275  : 					}
; 276  : 				}
; 277  : 				else
; 278  : 				{
; 279  : 					perc = 1;
; 280  : 				}
; 281  : 			}
; 282  : 
; 283  : 			if ( type == 14 && index == 17 )

  00313	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  00316	75 5c		 jne	 SHORT $LN51@gObjGiveIt
  00318	83 fe 11	 cmp	 esi, 17			; 00000011H
  0031b	75 31		 jne	 SHORT $LN164@gObjGiveIt

; 284  : 			{
; 285  : 				if ( gEyesOfDevilSquareDropRate <= 0 )

  0031d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gEyesOfDevilSquareDropRate@@3HA ; gEyesOfDevilSquareDropRate
  00322	b9 01 00 00 00	 mov	 ecx, 1
  00327	85 c0		 test	 eax, eax
  00329	0f 4e c1	 cmovle	 eax, ecx
  0032c	a3 00 00 00 00	 mov	 DWORD PTR ?gEyesOfDevilSquareDropRate@@3HA, eax ; gEyesOfDevilSquareDropRate

; 286  : 				{
; 287  : 					gEyesOfDevilSquareDropRate = 1;
; 288  : 				}
; 289  : 
; 290  : 				perc = rand() % gEyesOfDevilSquareDropRate;

  00331	e8 00 00 00 00	 call	 _rand
  00336	99		 cdq
  00337	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?gEyesOfDevilSquareDropRate@@3HA ; gEyesOfDevilSquareDropRate

; 291  : 				bCheckDevil = 1;
; 292  : 
; 293  : 				if ( gDevilSquareEvent == 0 )

  0033d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDevilSquareEvent@@3HA, 0 ; gDevilSquareEvent
  00344	8d 47 f3	 lea	 eax, DWORD PTR [edi-13]
  00347	75 2b		 jne	 SHORT $LN51@gObjGiveIt

; 294  : 				{
; 295  : 					perc = 1;
; 296  : 				}
; 297  : 			}
; 298  : 
; 299  : 			if ( type == 14 && index == 18 )

  00349	e9 e8 00 00 00	 jmp	 $LN91@gObjGiveIt
$LN164@gObjGiveIt:
  0034e	83 fe 12	 cmp	 esi, 18			; 00000012H
  00351	75 21		 jne	 SHORT $LN51@gObjGiveIt

; 300  : 			{
; 301  : 				perc = rand() % gKeyOfDevilSquareDropRate;

  00353	e8 00 00 00 00	 call	 _rand
  00358	99		 cdq
  00359	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?gKeyOfDevilSquareDropRate@@3HA ; gKeyOfDevilSquareDropRate

; 302  : 				bCheckDevil = 1;
; 303  : 
; 304  : 				if ( gDevilSquareEvent == 0 )

  0035f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDevilSquareEvent@@3HA, 0 ; gDevilSquareEvent
  00366	8d 46 ef	 lea	 eax, DWORD PTR [esi-17]
  00369	0f 84 c7 00 00
	00		 je	 $LN91@gObjGiveIt
  0036f	eb 03		 jmp	 SHORT $LN51@gObjGiveIt
$LN169@gObjGiveIt:
  00371	8b 45 98	 mov	 eax, DWORD PTR _bCheckDevil$1$[ebp]
$LN51@gObjGiveIt:

; 305  : 				{
; 306  : 					perc = 1;
; 307  : 				}
; 308  : 
; 309  : 			}
; 310  : 
; 311  : 			if ( perc == 0 )

  00374	85 d2		 test	 edx, edx
  00376	0f 85 ba 00 00
	00		 jne	 $LN91@gObjGiveIt

; 312  : 			{
; 313  : 				if ( bCheckDevil == 1 )

  0037c	83 f8 01	 cmp	 eax, 1
  0037f	0f 85 6d ff ff
	ff		 jne	 $LN53@gObjGiveIt

; 314  : 				{
; 315  : 					int devilitemlevel = 0;
; 316  : 
; 317  : 					if ( (rand() % 5) != 0 )

  00385	e8 00 00 00 00	 call	 _rand
  0038a	99		 cdq
  0038b	b9 05 00 00 00	 mov	 ecx, 5
  00390	f7 f9		 idiv	 ecx
  00392	85 d2		 test	 edx, edx
  00394	0f 84 9c 00 00
	00		 je	 $LN91@gObjGiveIt

; 318  : 					{
; 319  : 						if ( monsterlevel < 3 )

  0039a	83 fb 03	 cmp	 ebx, 3
  0039d	0f 8c 93 00 00
	00		 jl	 $LN91@gObjGiveIt

; 320  : 						{
; 321  : 							devilitemlevel = 0;
; 322  : 						}
; 323  : 						else if ( monsterlevel < 36 ) 

  003a3	83 fb 24	 cmp	 ebx, 36			; 00000024H
  003a6	7d 05		 jge	 SHORT $LN58@gObjGiveIt

; 324  : 						{
; 325  : 							devilitemlevel = 1;

  003a8	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  003ab	eb 64		 jmp	 SHORT $LN87@gObjGiveIt
$LN58@gObjGiveIt:

; 326  : 						}
; 327  : 						else if ( monsterlevel < 47 )

  003ad	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  003b0	7d 07		 jge	 SHORT $LN60@gObjGiveIt

; 328  : 						{
; 329  : 							devilitemlevel = 2;

  003b2	b8 02 00 00 00	 mov	 eax, 2
  003b7	eb 58		 jmp	 SHORT $LN87@gObjGiveIt
$LN60@gObjGiveIt:

; 330  : 						}
; 331  : 						else if ( monsterlevel < 60 )

  003b9	83 fb 3c	 cmp	 ebx, 60			; 0000003cH
  003bc	7d 07		 jge	 SHORT $LN62@gObjGiveIt

; 332  : 						{
; 333  : 							devilitemlevel = 3;

  003be	b8 03 00 00 00	 mov	 eax, 3
  003c3	eb 4c		 jmp	 SHORT $LN87@gObjGiveIt
$LN62@gObjGiveIt:

; 334  : 						}
; 335  : 						else if ( monsterlevel < 70 )

  003c5	83 fb 46	 cmp	 ebx, 70			; 00000046H
  003c8	7d 07		 jge	 SHORT $LN64@gObjGiveIt

; 336  : 						{
; 337  : 							devilitemlevel = 4;

  003ca	b8 04 00 00 00	 mov	 eax, 4
  003cf	eb 40		 jmp	 SHORT $LN87@gObjGiveIt
$LN64@gObjGiveIt:

; 338  : 						}
; 339  : 						else if ( monsterlevel < 80 )

  003d1	33 c0		 xor	 eax, eax
  003d3	83 fb 50	 cmp	 ebx, 80			; 00000050H
  003d6	0f 9d c0	 setge	 al
  003d9	83 c0 05	 add	 eax, 5

; 340  : 						{
; 341  : 							devilitemlevel = 5;
; 342  : 						}
; 343  : 						else 
; 344  : 						{
; 345  : 							devilitemlevel = 6;
; 346  : 						}
; 347  : 
; 348  : 						if ( devilitemlevel != 0 )
; 349  : 						{
; 350  : 							if ( this->InsertItem(monsterlevel, type, index, devilitemlevel, 0, 0, 0) != 0xFF )
; 351  : 							{
; 352  : 								incount++;
; 353  : 
; 354  : 								if ( incount > MAX_ITEM_IN_MONSTER -1 )
; 355  : 								{
; 356  : 									return;
; 357  : 								}
; 358  : 							}
; 359  : 						}
; 360  : 					}
; 361  : 				}

  003dc	eb 33		 jmp	 SHORT $LN87@gObjGiveIt
$LN78@gObjGiveIt:

; 381  : 			{
; 382  : 				if ( (type == 13 && index == 10) || (type == 12 && index == 11 ) )

  003de	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  003e1	75 05		 jne	 SHORT $LN75@gObjGiveIt
  003e3	83 fe 0b	 cmp	 esi, 11			; 0000000bH
$LN202@gObjGiveIt:
  003e6	74 29		 je	 SHORT $LN87@gObjGiveIt
$LN75@gObjGiveIt:

; 383  : 				{
; 384  : 					if ( this->InsertItem(monsterlevel, type, index, result, 0,0,0) != 0xFF )
; 385  : 					{
; 386  : 						incount++;
; 387  : 
; 388  : 						if ( incount > MAX_ITEM_IN_MONSTER -1 )
; 389  : 						{
; 390  : 							return;
; 391  : 						}
; 392  : 					}
; 393  : 				}
; 394  : 				else if ( result <= maxlevel )

  003e8	8b 4d 0c	 mov	 ecx, DWORD PTR _maxlevel$[ebp]
  003eb	3b c1		 cmp	 eax, ecx
  003ed	7f 47		 jg	 SHORT $LN91@gObjGiveIt

; 395  : 				{
; 396  : 					if ( type == 12 )

  003ef	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  003f2	75 07		 jne	 SHORT $LN166@gObjGiveIt

; 397  : 					{
; 398  : 						if ( index != 11 )

  003f4	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  003f7	74 18		 je	 SHORT $LN87@gObjGiveIt

; 399  : 						{
; 400  : 							result = 0;

  003f9	33 c0		 xor	 eax, eax
$LN166@gObjGiveIt:

; 401  : 						}
; 402  : 					}
; 403  : 
; 404  : 					if ( type == 12 && index == 11 )
; 405  : 					{
; 406  : 
; 407  : 					}
; 408  : 					else
; 409  : 					{
; 410  : 						if ( result > maxlevel )

  003fb	3b c1		 cmp	 eax, ecx
  003fd	0f 4f c1	 cmovg	 eax, ecx

; 411  : 						{
; 412  : 							result = maxlevel;
; 413  : 						}
; 414  : 					}
; 415  : 
; 416  : 					if ( (type == 4 && index == 7) || (type == 4 && index == 15) )

  00400	83 ff 04	 cmp	 edi, 4
  00403	75 0c		 jne	 SHORT $LN87@gObjGiveIt
  00405	83 fe 07	 cmp	 esi, 7
  00408	74 05		 je	 SHORT $LN88@gObjGiveIt
  0040a	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  0040d	75 02		 jne	 SHORT $LN87@gObjGiveIt
$LN88@gObjGiveIt:

; 417  : 					{
; 418  : 						result = 0;

  0040f	33 c0		 xor	 eax, eax
$LN87@gObjGiveIt:

; 419  : 					}
; 420  : 				
; 421  : 
; 422  : 					if ( this->InsertItem(monsterlevel, type, index,result, 0,0,0) != (BYTE)-1 )

  00411	6a 00		 push	 0
  00413	6a 00		 push	 0
  00415	6a 00		 push	 0
  00417	50		 push	 eax
$LN201@gObjGiveIt:
  00418	8b 4d 9c	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0041b	56		 push	 esi
  0041c	57		 push	 edi
  0041d	53		 push	 ebx
  0041e	e8 00 00 00 00	 call	 ?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z ; CMonsterItemMng::InsertItem
  00423	3c ff		 cmp	 al, 255			; 000000ffH
  00425	74 0f		 je	 SHORT $LN91@gObjGiveIt

; 423  : 					{
; 424  : 						incount++;

  00427	8b 75 a0	 mov	 esi, DWORD PTR _incount$1$[ebp]
  0042a	46		 inc	 esi
  0042b	89 75 a0	 mov	 DWORD PTR _incount$1$[ebp], esi

; 425  : 
; 426  : 						if ( incount > MAX_ITEM_IN_MONSTER-1 )

  0042e	81 fe e7 03 00
	00		 cmp	 esi, 999		; 000003e7H
  00434	7f 19		 jg	 SHORT $LN194@gObjGiveIt
$LN91@gObjGiveIt:

; 427  : 						{
; 428  : 							return;
; 429  : 						}
; 430  : 					}
; 431  : 				}
; 432  : 			}
; 433  : 		}
; 434  : 		
; 435  : 		if ( this->m_iMonsterInvenItemCount[monsterlevel] >= MAX_ITEM_IN_MONSTER )

  00436	8b 45 9c	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00439	be 16 00 00 00	 mov	 esi, 22			; 00000016H
  0043e	81 bc 98 ec 03
	00 00 e8 03 00
	00		 cmp	 DWORD PTR [eax+ebx*4+1004], 1000 ; 000003e8H
  00449	0f 8c 71 fc ff
	ff		 jl	 $LL2@gObjGiveIt
$LN194@gObjGiveIt:

; 436  : 		{
; 437  : 			return;
; 438  : 		}
; 439  : 		
; 440  : 	}
; 441  : }

  0044f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00452	5f		 pop	 edi
  00453	5e		 pop	 esi
  00454	33 cd		 xor	 ecx, ebp
  00456	5b		 pop	 ebx
  00457	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0045c	8b e5		 mov	 esp, ebp
  0045e	5d		 pop	 ebp
  0045f	c2 08 00	 ret	 8
?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z ENDP	; CMonsterItemMng::gObjGiveItemSearch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmng.cpp
;	COMDAT ?GetItem@CMonsterItemMng@@QAEPAVCItem@@H@Z
_TEXT	SEGMENT
_monsterlevel$ = 8					; size = 4
?GetItem@CMonsterItemMng@@QAEPAVCItem@@H@Z PROC		; CMonsterItemMng::GetItem, COMDAT
; _this$ = ecx

; 124  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 125  : 	if ( monsterlevel > MAX_LEVEL_MONSTER || monsterlevel < 0 )

  00004	8b 75 08	 mov	 esi, DWORD PTR _monsterlevel$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	81 fe fa 00 00
	00		 cmp	 esi, 250		; 000000faH
  00010	77 2e		 ja	 SHORT $LN3@GetItem

; 128  : 	}
; 129  : 
; 130  : 	int itemcount = this->m_iMonsterInvenItemCount[monsterlevel];

  00012	53		 push	 ebx
  00013	8b 9c b7 ec 03
	00 00		 mov	 ebx, DWORD PTR [edi+esi*4+1004]

; 131  : 
; 132  : 	if ( itemcount <= 0 )

  0001a	85 db		 test	 ebx, ebx
  0001c	7f 09		 jg	 SHORT $LN4@GetItem

; 133  : 	{
; 134  : 		return NULL;

  0001e	5b		 pop	 ebx
  0001f	5f		 pop	 edi
  00020	33 c0		 xor	 eax, eax
  00022	5e		 pop	 esi

; 139  : }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
$LN4@GetItem:

; 135  : 	}
; 136  : 
; 137  : 	int itemindex = rand() % itemcount;

  00027	e8 00 00 00 00	 call	 _rand
  0002c	99		 cdq
  0002d	f7 fb		 idiv	 ebx
  0002f	5b		 pop	 ebx

; 138  : 	return &this->m_MonsterInvenItems[monsterlevel][itemindex];

  00030	69 c2 d4 00 00
	00		 imul	 eax, edx, 212
  00036	03 44 b7 04	 add	 eax, DWORD PTR [edi+esi*4+4]
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi

; 139  : }

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
$LN3@GetItem:
  00040	5f		 pop	 edi

; 126  : 	{
; 127  : 		return NULL;

  00041	33 c0		 xor	 eax, eax
  00043	5e		 pop	 esi

; 139  : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?GetItem@CMonsterItemMng@@QAEPAVCItem@@H@Z ENDP		; CMonsterItemMng::GetItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmng.cpp
;	COMDAT ?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_itemcount$1$ = 8					; size = 4
_monsterlevel$ = 8					; size = 4
_type$ = 12						; size = 4
_index$ = 16						; size = 4
_itemlevel$ = 20					; size = 4
_op1$ = 24						; size = 4
_op2$ = 28						; size = 4
_op3$ = 32						; size = 4
?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z PROC		; CMonsterItemMng::InsertItem, COMDAT
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 90   : 	if ( monsterlevel > MAX_LEVEL_MONSTER || monsterlevel < 0 )

  00005	8b 7d 08	 mov	 edi, DWORD PTR _monsterlevel$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	81 ff fa 00 00
	00		 cmp	 edi, 250		; 000000faH
  00013	0f 87 9f 00 00
	00		 ja	 $LN3@InsertItem

; 93   : 	}
; 94   : 
; 95   : 	int itemcount = this->m_iMonsterInvenItemCount[monsterlevel];

  00019	8b 8c b8 ec 03
	00 00		 mov	 ecx, DWORD PTR [eax+edi*4+1004]
  00020	89 4d 08	 mov	 DWORD PTR _itemcount$1$[ebp], ecx

; 96   : 
; 97   : 	if ( itemcount >= MAX_ITEM_IN_MONSTER )

  00023	81 f9 e8 03 00
	00		 cmp	 ecx, 1000		; 000003e8H
  00029	0f 8d 89 00 00
	00		 jge	 $LN3@InsertItem

; 98   : 	{
; 99   : 		return -1;
; 100  : 	}
; 101  : 
; 102  : 	CItem * item = &this->m_MonsterInvenItems[monsterlevel][itemcount];
; 103  : 	int item_type = (type * MAX_SUBTYPE_ITEMS) + index;
; 104  : 	item->m_Level = itemlevel;
; 105  : 	item->Convert(item_type, op1, op2, op3, 0, 0,0,0,-1, CURRENT_DB_VERSION);

  0002f	53		 push	 ebx
  00030	6a 03		 push	 3
  00032	68 ff 00 00 00	 push	 255			; 000000ffH
  00037	6a 00		 push	 0
  00039	6a 00		 push	 0
  0003b	69 d9 d4 00 00
	00		 imul	 ebx, ecx, 212
  00041	6a 00		 push	 0
  00043	6a 00		 push	 0
  00045	ff 75 20	 push	 DWORD PTR _op3$[ebp]
  00048	03 5c b8 04	 add	 ebx, DWORD PTR [eax+edi*4+4]
  0004c	66 8b 45 14	 mov	 ax, WORD PTR _itemlevel$[ebp]
  00050	8b cb		 mov	 ecx, ebx
  00052	ff 75 1c	 push	 DWORD PTR _op2$[ebp]
  00055	ff 75 18	 push	 DWORD PTR _op1$[ebp]
  00058	66 89 43 08	 mov	 WORD PTR [ebx+8], ax
  0005c	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  0005f	c1 e0 09	 shl	 eax, 9
  00062	03 45 10	 add	 eax, DWORD PTR _index$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert

; 106  : 
; 107  : 	if ( type == 13 && index == 10 )

  0006b	83 7d 0c 0d	 cmp	 DWORD PTR _type$[ebp], 13 ; 0000000dH
  0006f	75 29		 jne	 SHORT $LN5@InsertItem
  00071	83 7d 10 0a	 cmp	 DWORD PTR _index$[ebp], 10 ; 0000000aH
  00075	75 23		 jne	 SHORT $LN5@InsertItem

; 108  : 	{
; 109  : 		int rd = rand() % 100;

  00077	e8 00 00 00 00	 call	 _rand
  0007c	99		 cdq
  0007d	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00082	f7 f9		 idiv	 ecx
  00084	66 0f 6e c2	 movd	 xmm0, edx

; 110  : 		item->m_Durability = rd + 100.0f;

  00088	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0008b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@42c80000
  00093	f3 0f 11 43 24	 movss	 DWORD PTR [ebx+36], xmm0

; 111  : 	}
; 112  : 	else

  00098	eb 06		 jmp	 SHORT $LN6@InsertItem
$LN5@InsertItem:

; 113  : 	{
; 114  : 		item->m_Durability = item->m_BaseDurability;

  0009a	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  0009d	89 43 24	 mov	 DWORD PTR [ebx+36], eax
$LN6@InsertItem:

; 115  : 	}
; 116  : 
; 117  : 	itemcount++;
; 118  : 	this->m_iMonsterInvenItemCount[monsterlevel] = itemcount;

  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000a3	8b 45 08	 mov	 eax, DWORD PTR _itemcount$1$[ebp]
  000a6	40		 inc	 eax
  000a7	5b		 pop	 ebx
  000a8	89 84 b9 ec 03
	00 00		 mov	 DWORD PTR [ecx+edi*4+1004], eax

; 119  : 	return 0;

  000af	32 c0		 xor	 al, al
  000b1	5f		 pop	 edi

; 120  : }

  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 1c 00	 ret	 28			; 0000001cH
$LN3@InsertItem:

; 91   : 	{
; 92   : 		return -1;

  000b8	0c ff		 or	 al, 255			; 000000ffH
  000ba	5f		 pop	 edi

; 120  : }

  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 1c 00	 ret	 28			; 0000001cH
?InsertItem@CMonsterItemMng@@QAEEHHHHHHH@Z ENDP		; CMonsterItemMng::InsertItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmng.cpp
;	COMDAT ?Clear@CMonsterItemMng@@QAEXXZ
_TEXT	SEGMENT
?Clear@CMonsterItemMng@@QAEXXZ PROC			; CMonsterItemMng::Clear, COMDAT
; _this$ = ecx

; 76   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 77   : 	memset(this->m_iMonsterInvenItemCount, 0, sizeof(this->m_iMonsterInvenItemCount));

  00004	68 e8 03 00 00	 push	 1000			; 000003e8H
  00009	6a 00		 push	 0
  0000b	8d 86 ec 03 00
	00		 lea	 eax, DWORD PTR [esi+1004]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _memset
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	bf fa 00 00 00	 mov	 edi, 250		; 000000faH
  0001f	83 c6 04	 add	 esi, 4
$LL4@Clear:

; 80   : 	{
; 81   : 		if( this->m_MonsterInvenItems[i] != NULL ) //Memleak 2

  00022	8b 06		 mov	 eax, DWORD PTR [esi]
  00024	85 c0		 test	 eax, eax
  00026	74 09		 je	 SHORT $LN2@Clear

; 82   : 		{
; 83   : 			delete[] this->m_MonsterInvenItems[i];

  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002e	83 c4 04	 add	 esp, 4
$LN2@Clear:

; 78   : 
; 79   : 	for ( int i =0 ; i< MAX_LEVEL_MONSTER ; i++ )

  00031	83 c6 04	 add	 esi, 4
  00034	83 ef 01	 sub	 edi, 1
  00037	75 e9		 jne	 SHORT $LL4@Clear

; 84   : 		}
; 85   : 	}
; 86   : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	c3		 ret	 0
?Clear@CMonsterItemMng@@QAEXXZ ENDP			; CMonsterItemMng::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmng.cpp
;	COMDAT ?Init@CMonsterItemMng@@QAEXXZ
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$1$ = -24						; size = 4
tv341 = -20						; size = 4
tv337 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Init@CMonsterItemMng@@QAEXXZ PROC			; CMonsterItemMng::Init, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Init@CMonsterItemMng@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 e8	 mov	 DWORD PTR _this$1$[ebp], esi

; 28   : 	memset(this->m_iMonsterInvenItemCount, 0, sizeof(this->m_iMonsterInvenItemCount));

  0002d	68 e8 03 00 00	 push	 1000			; 000003e8H
  00032	8d 86 ec 03 00
	00		 lea	 eax, DWORD PTR [esi+1004]
  00038	6a 00		 push	 0
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _memset
  00040	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00043	c7 45 ec fa 00
	00 00		 mov	 DWORD PTR tv341[ebp], 250 ; 000000faH
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004d	89 45 f0	 mov	 DWORD PTR tv337[ebp], eax
$LL4@Init:

; 29   : 
; 30   : 	int i;
; 31   : 
; 32   : 	for( i = 0; i < MAX_LEVEL_MONSTER; i++ )
; 33   : 	{
; 34   : 		if( this->m_MonsterInvenItems[i] != NULL ) //Memleak 1

  00050	8b 00		 mov	 eax, DWORD PTR [eax]
  00052	85 c0		 test	 eax, eax
  00054	74 09		 je	 SHORT $LN8@Init

; 35   : 		{
; 36   : 			delete[] this->m_MonsterInvenItems[i];

  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0005c	83 c4 04	 add	 esp, 4
$LN8@Init:

; 37   : 		}
; 38   : 
; 39   : 		this->m_MonsterInvenItems[i] = new CItem[MAX_ITEM_IN_MONSTER];

  0005f	68 20 3c 03 00	 push	 212000			; 00033c20H
  00064	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00069	8b d8		 mov	 ebx, eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 5d e4	 mov	 DWORD PTR $T2[ebp], ebx
  00071	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00078	85 db		 test	 ebx, ebx
  0007a	74 1b		 je	 SHORT $LN12@Init
  0007c	8b f3		 mov	 esi, ebx
  0007e	bf e8 03 00 00	 mov	 edi, 1000		; 000003e8H
$LL17@Init:
  00083	8b ce		 mov	 ecx, esi
  00085	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem
  0008a	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  00090	83 ef 01	 sub	 edi, 1
  00093	75 ee		 jne	 SHORT $LL17@Init
  00095	eb 02		 jmp	 SHORT $LN13@Init
$LN12@Init:
  00097	33 db		 xor	 ebx, ebx
$LN13@Init:
  00099	8b 45 f0	 mov	 eax, DWORD PTR tv337[ebp]
  0009c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a3	89 18		 mov	 DWORD PTR [eax], ebx
  000a5	83 c0 04	 add	 eax, 4
  000a8	83 6d ec 01	 sub	 DWORD PTR tv341[ebp], 1
  000ac	89 45 f0	 mov	 DWORD PTR tv337[ebp], eax
  000af	75 9f		 jne	 SHORT $LL4@Init

; 40   : 	}
; 41   : 
; 42   : 	LPMONSTER_ATTRIBUTE lpm;
; 43   : 
; 44   : 	for ( i = 0; i< MAX_MONSTER_TYPE ; i++ )

  000b1	33 f6		 xor	 esi, esi
$LL7@Init:

; 45   : 	{
; 46   : 		lpm = gMAttr.GetAttr(i);

  000b3	56		 push	 esi
  000b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMAttr@@3VCMonsterAttr@@A ; gMAttr
  000b9	e8 00 00 00 00	 call	 ?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z ; CMonsterAttr::GetAttr
  000be	8b f8		 mov	 edi, eax

; 47   : 
; 48   : 		if ( lpm != NULL )

  000c0	85 ff		 test	 edi, edi
  000c2	74 31		 je	 SHORT $LN5@Init

; 49   : 		{
; 50   : 			strcpy( this->MonsterName, lpm->m_Name);

  000c4	8b 5d e8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  000c7	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  000ca	8b d3		 mov	 edx, ebx
  000cc	2b d1		 sub	 edx, ecx
  000ce	66 90		 npad	 2
$LL14@Init:
  000d0	8a 01		 mov	 al, BYTE PTR [ecx]
  000d2	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000d5	88 84 0a d3 07
	00 00		 mov	 BYTE PTR [edx+ecx+2003], al
  000dc	84 c0		 test	 al, al
  000de	75 f0		 jne	 SHORT $LL14@Init

; 51   : 
; 52   : 			if ( lpm->m_Level != 0 )

  000e0	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  000e3	85 c0		 test	 eax, eax
  000e5	74 0e		 je	 SHORT $LN5@Init

; 53   : 			{
; 54   : 				this->gObjGiveItemSearch(lpm->m_Level, lpm->m_MaxItemLevel);

  000e7	ff b7 ac 00 00
	00		 push	 DWORD PTR [edi+172]
  000ed	8b cb		 mov	 ecx, ebx
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 ?gObjGiveItemSearch@CMonsterItemMng@@QAEXHH@Z ; CMonsterItemMng::gObjGiveItemSearch
$LN5@Init:

; 40   : 	}
; 41   : 
; 42   : 	LPMONSTER_ATTRIBUTE lpm;
; 43   : 
; 44   : 	for ( i = 0; i< MAX_MONSTER_TYPE ; i++ )

  000f5	46		 inc	 esi
  000f6	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  000fc	7c b5		 jl	 SHORT $LL7@Init

; 55   : 			}
; 56   : 		}
; 57   : 	}
; 58   : 
; 59   : 	/*for(i = 0; i < MAX_LEVEL_MONSTER; i++)
; 60   : 	{
; 61   : 		char szTmp[256];
; 62   : 		sprintf(szTmp,"Info\\MonsterDrop%d.txt",i);
; 63   : 		FILE* File = fopen(szTmp,"w+");
; 64   : 
; 65   : 		for(int n = 0; n < m_iMonsterInvenItemCount[i]; n++)
; 66   : 		{
; 67   : 			fprintf(File,"%d %d	%d\r\n",m_MonsterInvenItems[i][n].m_Type/512,m_MonsterInvenItems[i][n].m_Type%512,m_MonsterInvenItems[i][n].m_Level);
; 68   : 		}
; 69   : 
; 70   : 		fclose(File);
; 71   : 	}*/
; 72   : }

  000fe	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00101	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00108	59		 pop	 ecx
  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
  0010b	5b		 pop	 ebx
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Init@CMonsterItemMng@@QAEXXZ$0:
  00000	68 20 3c 03 00	 push	 212000			; 00033c20H
  00005	8b 45 e4	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__ehhandler$?Init@CMonsterItemMng@@QAEXXZ:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Init@CMonsterItemMng@@QAEXXZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Init@CMonsterItemMng@@QAEXXZ ENDP			; CMonsterItemMng::Init
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmng.cpp
;	COMDAT ??1CMonsterItemMng@@UAE@XZ
_TEXT	SEGMENT
??1CMonsterItemMng@@UAE@XZ PROC				; CMonsterItemMng::~CMonsterItemMng, COMDAT
; _this$ = ecx

; 21   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMonsterItemMng@@6B@

; 22   : 	this->Clear();

  00006	e9 00 00 00 00	 jmp	 ?Clear@CMonsterItemMng@@QAEXXZ ; CMonsterItemMng::Clear
??1CMonsterItemMng@@UAE@XZ ENDP				; CMonsterItemMng::~CMonsterItemMng
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmng.cpp
;	COMDAT ??0CMonsterItemMng@@QAE@XZ
_TEXT	SEGMENT
??0CMonsterItemMng@@QAE@XZ PROC				; CMonsterItemMng::CMonsterItemMng, COMDAT
; _this$ = ecx

; 15   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMonsterItemMng@@6B@

; 16   : 	return;
; 17   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0CMonsterItemMng@@QAE@XZ ENDP				; CMonsterItemMng::CMonsterItemMng
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmng.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmng.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
