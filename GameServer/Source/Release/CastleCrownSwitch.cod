; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\CastleCrownSwitch.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CCastleCrownSwitch@@QAE@XZ			; CCastleCrownSwitch::CCastleCrownSwitch
PUBLIC	??1CCastleCrownSwitch@@UAE@XZ			; CCastleCrownSwitch::~CCastleCrownSwitch
PUBLIC	?CastleCrownSwitchAct@CCastleCrownSwitch@@QAEXH@Z ; CCastleCrownSwitch::CastleCrownSwitchAct
PUBLIC	??_GCCastleCrownSwitch@@UAEPAXI@Z		; CCastleCrownSwitch::`scalar deleting destructor'
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??_7CCastleCrownSwitch@@6B@			; CCastleCrownSwitch::`vftable'
PUBLIC	?g_CsNPC_CastleCrownSwitch@@3VCCastleCrownSwitch@@A ; g_CsNPC_CastleCrownSwitch
PUBLIC	??_C@_0FD@POFOJJJE@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Push?5Cast@ ; `string'
PUBLIC	??_R4CCastleCrownSwitch@@6B@			; CCastleCrownSwitch::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCastleCrownSwitch@@@8			; CCastleCrownSwitch `RTTI Type Descriptor'
PUBLIC	??_R3CCastleCrownSwitch@@8			; CCastleCrownSwitch::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCastleCrownSwitch@@8			; CCastleCrownSwitch::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCastleCrownSwitch@@8		; CCastleCrownSwitch::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	??_ECCastleCrownSwitch@@UAEPAXI@Z:PROC		; CCastleCrownSwitch::`vector deleting destructor'
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?GCAnsCsAccessSwitchState@@YAXHHHE@Z:PROC	; GCAnsCsAccessSwitchState
EXTRN	?NotifyCrownState@CCastleSiege@@QAEXE@Z:PROC	; CCastleSiege::NotifyCrownState
EXTRN	?GetRegCrownAvailable@CCastleSiege@@QAEHXZ:PROC	; CCastleSiege::GetRegCrownAvailable
EXTRN	?SetRegCrownAvailable@CCastleSiege@@QAEXH@Z:PROC ; CCastleSiege::SetRegCrownAvailable
EXTRN	?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z:PROC ; CCastleSiege::GetCrownSwitchUserIndex
EXTRN	?ResetCrownSwitchUserIndex@CCastleSiege@@QAEXH@Z:PROC ; CCastleSiege::ResetCrownSwitchUserIndex
EXTRN	?NotifyCrownSwitchInfo@CCastleSiege@@QAEXH@Z:PROC ; CCastleSiege::NotifyCrownSwitchInfo
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?g_CsNPC_CastleCrownSwitch@@3VCCastleCrownSwitch@@A DD 01H DUP (?) ; g_CsNPC_CastleCrownSwitch
_BSS	ENDS
CRT$XCU	SEGMENT
?g_CsNPC_CastleCrownSwitch$initializer$@@3P6AXXZA DD FLAT:??__Eg_CsNPC_CastleCrownSwitch@@YAXXZ ; g_CsNPC_CastleCrownSwitch$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CCastleCrownSwitch@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCastleCrownSwitch@@8 DD FLAT:??_R0?AVCCastleCrownSwitch@@@8 ; CCastleCrownSwitch::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCastleCrownSwitch@@8
rdata$r	ENDS
;	COMDAT ??_R2CCastleCrownSwitch@@8
rdata$r	SEGMENT
??_R2CCastleCrownSwitch@@8 DD FLAT:??_R1A@?0A@EA@CCastleCrownSwitch@@8 ; CCastleCrownSwitch::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCastleCrownSwitch@@8
rdata$r	SEGMENT
??_R3CCastleCrownSwitch@@8 DD 00H			; CCastleCrownSwitch::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCastleCrownSwitch@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCastleCrownSwitch@@@8
data$r	SEGMENT
??_R0?AVCCastleCrownSwitch@@@8 DD FLAT:??_7type_info@@6B@ ; CCastleCrownSwitch `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCastleCrownSwitch@@', 00H
data$r	ENDS
;	COMDAT ??_R4CCastleCrownSwitch@@6B@
rdata$r	SEGMENT
??_R4CCastleCrownSwitch@@6B@ DD 00H			; CCastleCrownSwitch::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCastleCrownSwitch@@@8
	DD	FLAT:??_R3CCastleCrownSwitch@@8
rdata$r	ENDS
;	COMDAT ??_C@_0FD@POFOJJJE@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Push?5Cast@
CONST	SEGMENT
??_C@_0FD@POFOJJJE@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Push?5Cast@ DB '['
	DB	'CastleSiege] [%s][%s] Push Castle Crown Switch Canceled (GUIL'
	DB	'D:%s) - CS X:%d/Y:%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CCastleCrownSwitch@@6B@
CONST	SEGMENT
??_7CCastleCrownSwitch@@6B@ DD FLAT:??_R4CCastleCrownSwitch@@6B@ ; CCastleCrownSwitch::`vftable'
	DD	FLAT:??_ECCastleCrownSwitch@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_CsNPC_CastleCrownSwitch@@YAXXZ
text$yd	SEGMENT
??__Fg_CsNPC_CastleCrownSwitch@@YAXXZ PROC		; `dynamic atexit destructor for 'g_CsNPC_CastleCrownSwitch'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_CastleCrownSwitch@@3VCCastleCrownSwitch@@A ; g_CsNPC_CastleCrownSwitch
  00005	e9 00 00 00 00	 jmp	 ??1CCastleCrownSwitch@@UAE@XZ ; CCastleCrownSwitch::~CCastleCrownSwitch
??__Fg_CsNPC_CastleCrownSwitch@@YAXXZ ENDP		; `dynamic atexit destructor for 'g_CsNPC_CastleCrownSwitch''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\castlecrownswitch.cpp
;	COMDAT ??__Eg_CsNPC_CastleCrownSwitch@@YAXXZ
text$di	SEGMENT
??__Eg_CsNPC_CastleCrownSwitch@@YAXXZ PROC		; `dynamic initializer for 'g_CsNPC_CastleCrownSwitch'', COMDAT

; 16   : CCastleCrownSwitch g_CsNPC_CastleCrownSwitch;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_CastleCrownSwitch@@3VCCastleCrownSwitch@@A ; g_CsNPC_CastleCrownSwitch
  00005	e8 00 00 00 00	 call	 ??0CCastleCrownSwitch@@QAE@XZ ; CCastleCrownSwitch::CCastleCrownSwitch
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CsNPC_CastleCrownSwitch@@YAXXZ ; `dynamic atexit destructor for 'g_CsNPC_CastleCrownSwitch''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CsNPC_CastleCrownSwitch@@YAXXZ ENDP		; `dynamic initializer for 'g_CsNPC_CastleCrownSwitch''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCCastleCrownSwitch@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCastleCrownSwitch@@UAEPAXI@Z PROC			; CCastleCrownSwitch::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCastleCrownSwitch@@UAE@XZ ; CCastleCrownSwitch::~CCastleCrownSwitch
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 04		 push	 4
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCCastleCrownSwitch@@UAEPAXI@Z ENDP			; CCastleCrownSwitch::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\castlecrownswitch.cpp
;	COMDAT ?CastleCrownSwitchAct@CCastleCrownSwitch@@QAEXH@Z
_TEXT	SEGMENT
_lpObj$1$ = 8						; size = 4
_iIndex$ = 8						; size = 4
?CastleCrownSwitchAct@CCastleCrownSwitch@@QAEXH@Z PROC	; CCastleCrownSwitch::CastleCrownSwitchAct, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 33   : 	if ( !gObjIsConnected(iIndex))

  00004	8b 7d 08	 mov	 edi, DWORD PTR _iIndex$[ebp]
  00007	57		 push	 edi
  00008	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	0f 84 41 02 00
	00		 je	 $LN4@CastleCrow

; 34   : 		return;
; 35   : 
; 36   : 	if ( gObj[iIndex].Type != OBJ_NPC ||

  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001d	53		 push	 ebx
  0001e	69 df 40 27 00
	00		 imul	 ebx, edi, 10048
  00024	80 7c 03 50 03	 cmp	 BYTE PTR [ebx+eax+80], 3
  00029	0f 85 29 02 00
	00		 jne	 $LN19@CastleCrow
  0002f	0f b7 8c 03 90
	00 00 00	 movzx	 ecx, WORD PTR [ebx+eax+144]
  00037	b8 d9 00 00 00	 mov	 eax, 217		; 000000d9H
  0003c	66 3b c8	 cmp	 cx, ax
  0003f	0f 82 13 02 00
	00		 jb	 $LN19@CastleCrow
  00045	b8 da 00 00 00	 mov	 eax, 218		; 000000daH
  0004a	66 3b c1	 cmp	 ax, cx
  0004d	1b c0		 sbb	 eax, eax
  0004f	83 c0 01	 add	 eax, 1
  00052	0f 84 00 02 00
	00		 je	 $LN19@CastleCrow

; 37   : 		((gObj[iIndex].Class < 217 )?FALSE:(gObj[iIndex].Class > 219-1 )?FALSE:TRUE)==FALSE )
; 38   : 		return;
; 39   : 
; 40   : 	if ( !gObjIsConnected(g_CastleSiege.GetCrownSwitchUserIndex(gObj[iIndex].Class)) )

  00058	51		 push	 ecx
  00059	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0005e	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00069	83 c4 04	 add	 esp, 4

; 41   : 	{
; 42   : 		g_CastleSiege.ResetCrownSwitchUserIndex(gObj[iIndex].Class);

  0006c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00071	85 c0		 test	 eax, eax
  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00078	75 41		 jne	 SHORT $LN5@CastleCrow
  0007a	0f b7 84 03 90
	00 00 00	 movzx	 eax, WORD PTR [ebx+eax+144]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ?ResetCrownSwitchUserIndex@CCastleSiege@@QAEXH@Z ; CCastleSiege::ResetCrownSwitchUserIndex

; 43   : 
; 44   : 		if ( g_CastleSiege.GetRegCrownAvailable() == 1 )

  00088	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0008d	e8 00 00 00 00	 call	 ?GetRegCrownAvailable@CCastleSiege@@QAEHXZ ; CCastleSiege::GetRegCrownAvailable
  00092	83 f8 01	 cmp	 eax, 1
  00095	0f 85 bd 01 00
	00		 jne	 $LN19@CastleCrow

; 45   : 		{
; 46   : 			g_CastleSiege.SetRegCrownAvailable(FALSE);

  0009b	6a 00		 push	 0
  0009d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000a2	e8 00 00 00 00	 call	 ?SetRegCrownAvailable@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetRegCrownAvailable
  000a7	5b		 pop	 ebx
  000a8	5f		 pop	 edi

; 47   : 			g_CastleSiege.NotifyCrownState(1);

  000a9	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _iIndex$[ebp], 1
  000b0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege

; 103  : 		}
; 104  : 	}
; 105  : }

  000b5	5d		 pop	 ebp

; 47   : 			g_CastleSiege.NotifyCrownState(1);

  000b6	e9 00 00 00 00	 jmp	 ?NotifyCrownState@CCastleSiege@@QAEXE@Z ; CCastleSiege::NotifyCrownState
$LN5@CastleCrow:

; 48   : 		}
; 49   : 
; 50   : 		return;
; 51   : 	}
; 52   : 	
; 53   : 	LPOBJ lpObj= &gObj[iIndex];

  000bb	03 c3		 add	 eax, ebx
  000bd	89 45 08	 mov	 DWORD PTR _lpObj$1$[ebp], eax
  000c0	56		 push	 esi

; 54   : 	LPOBJ lpUserObj = &gObj[g_CastleSiege.GetCrownSwitchUserIndex(gObj[iIndex].Class)];

  000c1	0f b7 80 90 00
	00 00		 movzx	 eax, WORD PTR [eax+144]
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  000ce	69 f0 40 27 00
	00		 imul	 esi, eax, 10048

; 55   : 	g_CastleSiege.NotifyCrownSwitchInfo(iIndex);

  000d4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000d9	57		 push	 edi
  000da	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e0	e8 00 00 00 00	 call	 ?NotifyCrownSwitchInfo@CCastleSiege@@QAEXH@Z ; CCastleSiege::NotifyCrownSwitchInfo

; 56   : 
; 57   : 	if ( lpUserObj->MapNumber == MAP_INDEX_CASTLESIEGE &&

  000e5	80 be 23 01 00
	00 1e		 cmp	 BYTE PTR [esi+291], 30	; 0000001eH
  000ec	0f 85 6c 01 00
	00		 jne	 $LN7@CastleCrow
  000f2	80 be 5a 20 00
	00 02		 cmp	 BYTE PTR [esi+8282], 2
  000f9	0f 82 5f 01 00
	00		 jb	 $LN7@CastleCrow

; 58   : 		 lpUserObj->m_btCsJoinSide >= 2 )
; 59   : 	{
; 60   : 		if ( abs(lpObj->Y - lpUserObj->Y) <= 3 &&

  000ff	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
  00102	0f b6 8e 21 01
	00 00		 movzx	 ecx, BYTE PTR [esi+289]
  00109	0f b6 87 21 01
	00 00		 movzx	 eax, BYTE PTR [edi+289]
  00110	2b c1		 sub	 eax, ecx
  00112	99		 cdq
  00113	33 c2		 xor	 eax, edx
  00115	2b c2		 sub	 eax, edx
  00117	83 f8 03	 cmp	 eax, 3
  0011a	0f 8f bb 00 00
	00		 jg	 $LN9@CastleCrow
  00120	0f b6 8e 20 01
	00 00		 movzx	 ecx, BYTE PTR [esi+288]
  00127	0f b6 87 20 01
	00 00		 movzx	 eax, BYTE PTR [edi+288]
  0012e	2b c1		 sub	 eax, ecx
  00130	99		 cdq
  00131	33 c2		 xor	 eax, edx
  00133	2b c2		 sub	 eax, edx
  00135	83 f8 03	 cmp	 eax, 3
  00138	0f 8f 9d 00 00
	00		 jg	 $LN9@CastleCrow

; 61   : 			 abs(lpObj->X - lpUserObj->X) <= 3 )
; 62   : 		{
; 63   : 			int iCrownIndex1 = g_CastleSiege.GetCrownSwitchUserIndex(217);

  0013e	68 d9 00 00 00	 push	 217			; 000000d9H
  00143	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00148	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex

; 64   : 			int iCrownIndex2 = g_CastleSiege.GetCrownSwitchUserIndex(218);

  0014d	68 da 00 00 00	 push	 218			; 000000daH
  00152	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00157	8b f8		 mov	 edi, eax
  00159	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex

; 65   : 
; 66   : 			if (gObjIsConnected(iCrownIndex1) && gObjIsConnected(iCrownIndex2) )

  0015e	57		 push	 edi
  0015f	8b f0		 mov	 esi, eax
  00161	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00166	83 c4 04	 add	 esp, 4
  00169	85 c0		 test	 eax, eax
  0016b	0f 84 e6 00 00
	00		 je	 $LN20@CastleCrow
  00171	56		 push	 esi
  00172	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00177	83 c4 04	 add	 esp, 4
  0017a	85 c0		 test	 eax, eax
  0017c	0f 84 d5 00 00
	00		 je	 $LN20@CastleCrow

; 67   : 			{
; 68   : 				if ( gObj[iCrownIndex1].m_btCsJoinSide == gObj[iCrownIndex2].m_btCsJoinSide )

  00182	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00188	69 c7 40 27 00
	00		 imul	 eax, edi, 10048
  0018e	69 d6 40 27 00
	00		 imul	 edx, esi, 10048
  00194	8a 84 08 5a 20
	00 00		 mov	 al, BYTE PTR [eax+ecx+8282]
  0019b	3a 84 0a 5a 20
	00 00		 cmp	 al, BYTE PTR [edx+ecx+8282]
  001a2	0f 85 af 00 00
	00		 jne	 $LN20@CastleCrow

; 69   : 				{
; 70   : 					if ( g_CastleSiege.GetRegCrownAvailable() == 0 )

  001a8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  001ad	e8 00 00 00 00	 call	 ?GetRegCrownAvailable@CCastleSiege@@QAEHXZ ; CCastleSiege::GetRegCrownAvailable
  001b2	85 c0		 test	 eax, eax
  001b4	0f 85 9d 00 00
	00		 jne	 $LN20@CastleCrow

; 71   : 					{
; 72   : 						g_CastleSiege.SetRegCrownAvailable(TRUE);

  001ba	6a 01		 push	 1
  001bc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  001c1	e8 00 00 00 00	 call	 ?SetRegCrownAvailable@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetRegCrownAvailable
  001c6	5e		 pop	 esi
  001c7	5b		 pop	 ebx
  001c8	5f		 pop	 edi

; 73   : 						g_CastleSiege.NotifyCrownState(0);

  001c9	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _iIndex$[ebp], 0
  001d0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege

; 103  : 		}
; 104  : 	}
; 105  : }

  001d5	5d		 pop	 ebp

; 73   : 						g_CastleSiege.NotifyCrownState(0);

  001d6	e9 00 00 00 00	 jmp	 ?NotifyCrownState@CCastleSiege@@QAEXE@Z ; CCastleSiege::NotifyCrownState
$LN9@CastleCrow:

; 74   : 					}
; 75   : 				}
; 76   : 			}
; 77   : 		}
; 78   : 		else
; 79   : 		{
; 80   : 			GCAnsCsAccessSwitchState(lpUserObj->m_Index, lpObj->m_Index, -1, 0);

  001db	6a 00		 push	 0
  001dd	6a ff		 push	 -1
  001df	ff 37		 push	 DWORD PTR [edi]
  001e1	ff 36		 push	 DWORD PTR [esi]
  001e3	e8 00 00 00 00	 call	 ?GCAnsCsAccessSwitchState@@YAXHHHE@Z ; GCAnsCsAccessSwitchState

; 81   : 			g_CastleSiege.ResetCrownSwitchUserIndex(gObj[iIndex].Class);

  001e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ed	83 c4 10	 add	 esp, 16			; 00000010H
  001f0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  001f5	0f b7 84 03 90
	00 00 00	 movzx	 eax, WORD PTR [ebx+eax+144]
  001fd	50		 push	 eax
  001fe	e8 00 00 00 00	 call	 ?ResetCrownSwitchUserIndex@CCastleSiege@@QAEXH@Z ; CCastleSiege::ResetCrownSwitchUserIndex

; 82   : 
; 83   : 			if ( g_CastleSiege.GetRegCrownAvailable() == 1 )

  00203	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00208	e8 00 00 00 00	 call	 ?GetRegCrownAvailable@CCastleSiege@@QAEHXZ ; CCastleSiege::GetRegCrownAvailable
  0020d	83 f8 01	 cmp	 eax, 1
  00210	75 18		 jne	 SHORT $LN14@CastleCrow

; 84   : 			{
; 85   : 				g_CastleSiege.SetRegCrownAvailable(FALSE);

  00212	6a 00		 push	 0
  00214	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00219	e8 00 00 00 00	 call	 ?SetRegCrownAvailable@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetRegCrownAvailable

; 86   : 				g_CastleSiege.NotifyCrownState(1);

  0021e	6a 01		 push	 1
  00220	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00225	e8 00 00 00 00	 call	 ?NotifyCrownState@CCastleSiege@@QAEXE@Z ; CCastleSiege::NotifyCrownState
$LN14@CastleCrow:

; 87   : 			}
; 88   : 
; 89   : 			LogAddTD("[CastleSiege] [%s][%s] Push Castle Crown Switch Canceled (GUILD:%s) - CS X:%d/Y:%d",

  0022a	0f b6 87 21 01
	00 00		 movzx	 eax, BYTE PTR [edi+289]
  00231	50		 push	 eax
  00232	0f b6 87 20 01
	00 00		 movzx	 eax, BYTE PTR [edi+288]
  00239	50		 push	 eax
  0023a	8d 86 1c 06 00
	00		 lea	 eax, DWORD PTR [esi+1564]
  00240	50		 push	 eax
  00241	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00244	50		 push	 eax
  00245	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00248	50		 push	 eax
  00249	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@POFOJJJE@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Push?5Cast@
  0024e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00254	83 c4 18	 add	 esp, 24			; 00000018H
$LN20@CastleCrow:
  00257	5e		 pop	 esi
$LN19@CastleCrow:
  00258	5b		 pop	 ebx
$LN4@CastleCrow:
  00259	5f		 pop	 edi

; 103  : 		}
; 104  : 	}
; 105  : }

  0025a	5d		 pop	 ebp
  0025b	c2 04 00	 ret	 4
$LN7@CastleCrow:

; 90   : 				lpUserObj->AccountID, lpUserObj->Name, lpUserObj->GuildName, lpObj->X, lpObj->Y);
; 91   : 		}
; 92   : 	}
; 93   : 	else
; 94   : 	{
; 95   : 		GCAnsCsAccessSwitchState(lpUserObj->m_Index, lpObj->m_Index, -1, 0);

  0025e	8b 45 08	 mov	 eax, DWORD PTR _lpObj$1$[ebp]
  00261	6a 00		 push	 0
  00263	6a ff		 push	 -1
  00265	ff 30		 push	 DWORD PTR [eax]
  00267	ff 36		 push	 DWORD PTR [esi]
  00269	e8 00 00 00 00	 call	 ?GCAnsCsAccessSwitchState@@YAXHHHE@Z ; GCAnsCsAccessSwitchState

; 96   : 
; 97   : 		g_CastleSiege.ResetCrownSwitchUserIndex(gObj[iIndex].Class);

  0026e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00273	83 c4 10	 add	 esp, 16			; 00000010H
  00276	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0027b	0f b7 84 03 90
	00 00 00	 movzx	 eax, WORD PTR [ebx+eax+144]
  00283	50		 push	 eax
  00284	e8 00 00 00 00	 call	 ?ResetCrownSwitchUserIndex@CCastleSiege@@QAEXH@Z ; CCastleSiege::ResetCrownSwitchUserIndex

; 98   : 
; 99   : 		if ( g_CastleSiege.GetRegCrownAvailable() == 1 )

  00289	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0028e	e8 00 00 00 00	 call	 ?GetRegCrownAvailable@CCastleSiege@@QAEHXZ ; CCastleSiege::GetRegCrownAvailable
  00293	83 f8 01	 cmp	 eax, 1
  00296	75 bf		 jne	 SHORT $LN20@CastleCrow

; 100  : 		{
; 101  : 			g_CastleSiege.SetRegCrownAvailable(FALSE);

  00298	6a 00		 push	 0
  0029a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0029f	e8 00 00 00 00	 call	 ?SetRegCrownAvailable@CCastleSiege@@QAEXH@Z ; CCastleSiege::SetRegCrownAvailable
  002a4	5e		 pop	 esi
  002a5	5b		 pop	 ebx
  002a6	5f		 pop	 edi

; 102  : 			g_CastleSiege.NotifyCrownState(1);

  002a7	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _iIndex$[ebp], 1
  002ae	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege

; 103  : 		}
; 104  : 	}
; 105  : }

  002b3	5d		 pop	 ebp

; 102  : 			g_CastleSiege.NotifyCrownState(1);

  002b4	e9 00 00 00 00	 jmp	 ?NotifyCrownState@CCastleSiege@@QAEXE@Z ; CCastleSiege::NotifyCrownState
?CastleCrownSwitchAct@CCastleCrownSwitch@@QAEXH@Z ENDP	; CCastleCrownSwitch::CastleCrownSwitchAct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\castlecrownswitch.cpp
;	COMDAT ??1CCastleCrownSwitch@@UAE@XZ
_TEXT	SEGMENT
??1CCastleCrownSwitch@@UAE@XZ PROC			; CCastleCrownSwitch::~CCastleCrownSwitch, COMDAT
; _this$ = ecx

; 27   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCastleCrownSwitch@@6B@

; 28   : 	return;
; 29   : }

  00006	c3		 ret	 0
??1CCastleCrownSwitch@@UAE@XZ ENDP			; CCastleCrownSwitch::~CCastleCrownSwitch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\castlecrownswitch.cpp
;	COMDAT ??0CCastleCrownSwitch@@QAE@XZ
_TEXT	SEGMENT
??0CCastleCrownSwitch@@QAE@XZ PROC			; CCastleCrownSwitch::CCastleCrownSwitch, COMDAT
; _this$ = ecx

; 22   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCastleCrownSwitch@@6B@

; 23   : 	return;
; 24   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0CCastleCrownSwitch@@QAE@XZ ENDP			; CCastleCrownSwitch::CCastleCrownSwitch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\castlecrownswitch.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\castlecrownswitch.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 108  : #endif

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
