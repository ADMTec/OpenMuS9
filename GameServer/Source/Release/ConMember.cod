; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\ConMember.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?compare@?$char_traits@D@std@@SAHPBD0I@Z	; std::char_traits<char>::compare
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??0CConMember@@QAE@XZ				; CConMember::CConMember
PUBLIC	??1CConMember@@UAE@XZ				; CConMember::~CConMember
PUBLIC	?Init@CConMember@@QAEXXZ			; CConMember::Init
PUBLIC	?IsMember@CConMember@@QAEHPAD@Z			; CConMember::IsMember
PUBLIC	?Load@CConMember@@QAEXPAD@Z			; CConMember::Load
PUBLIC	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buyheadnode
PUBLIC	?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buynode0
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::erase
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::erase
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::find
PUBLIC	?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Destroy_if_not_nil
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Erase
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Rrotate
PUBLIC	??_GCConMember@@UAEPAXI@Z			; CConMember::`scalar deleting destructor'
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,std::_Iterator_base0>::operator++
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,std::_Iterator_base0>::operator--
PUBLIC	??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@XZ ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int>
PUBLIC	??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Lbound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buynode<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> >
PUBLIC	??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Insert_nohint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>
PUBLIC	??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_7CConMember@@6B@				; CConMember::`vftable'
PUBLIC	?ConMember@@3VCConMember@@A			; ConMember
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0CD@IKIIAFKL@?$FLConnectMember?$FN?5Loaded?5?$CFd?5accoun@ ; `string'
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CConMember@@6B@				; CConMember::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCConMember@@@8				; CConMember `RTTI Type Descriptor'
PUBLIC	??_R3CConMember@@8				; CConMember::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CConMember@@8				; CConMember::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CConMember@@8			; CConMember::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	_memmove:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_atof:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	??_ECConMember@@UAEPAXI@Z:PROC			; CConMember::`vector deleting destructor'
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?ConMember@@3VCConMember@@A DB 0cH DUP (?)		; ConMember
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
_BSS	ENDS
CRT$XCU	SEGMENT
?ConMember$initializer$@@3P6AXXZA DD FLAT:??__EConMember@@YAXXZ ; ConMember$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CConMember@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CConMember@@8 DD FLAT:??_R0?AVCConMember@@@8 ; CConMember::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CConMember@@8
rdata$r	ENDS
;	COMDAT ??_R2CConMember@@8
rdata$r	SEGMENT
??_R2CConMember@@8 DD FLAT:??_R1A@?0A@EA@CConMember@@8	; CConMember::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CConMember@@8
rdata$r	SEGMENT
??_R3CConMember@@8 DD 00H				; CConMember::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CConMember@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCConMember@@@8
data$r	SEGMENT
??_R0?AVCConMember@@@8 DD FLAT:??_7type_info@@6B@	; CConMember `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCConMember@@', 00H
data$r	ENDS
;	COMDAT ??_R4CConMember@@6B@
rdata$r	SEGMENT
??_R4CConMember@@6B@ DD 00H				; CConMember::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCConMember@@@8
	DD	FLAT:??_R3CConMember@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@IKIIAFKL@?$FLConnectMember?$FN?5Loaded?5?$CFd?5accoun@
CONST	SEGMENT
??_C@_0CD@IKIIAFKL@?$FLConnectMember?$FN?5Loaded?5?$CFd?5accoun@ DB '[Con'
	DB	'nectMember] Loaded %d accounts', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CConMember@@6B@
CONST	SEGMENT
??_7CConMember@@6B@ DD FLAT:??_R4CConMember@@6B@	; CConMember::`vftable'
	DD	FLAT:??_ECConMember@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z$104 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z$0
__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z DD 00H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z$104
__ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z$12
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z$39
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z$85
	DD	0ffffffffH
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z$0
__ehfuncinfo$??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$10
__ehfuncinfo$??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$2
__ehfuncinfo$?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$13
__ehfuncinfo$?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@0@Z$16
__ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z$0
__ehfuncinfo$??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@CConMember@@QAEXPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@CConMember@@QAEXPAD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Load@CConMember@@QAEXPAD@Z$1
__ehfuncinfo$?Load@CConMember@@QAEXPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Load@CConMember@@QAEXPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?IsMember@CConMember@@QAEHPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IsMember@CConMember@@QAEHPAD@Z$0
__ehfuncinfo$?IsMember@CConMember@@QAEHPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?IsMember@CConMember@@QAEHPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Init@CConMember@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@CConMember@@QAEXXZ$0
__ehfuncinfo$?Init@CConMember@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Init@CConMember@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CConMember@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CConMember@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CConMember@@UAE@XZ$1
__ehfuncinfo$??1CConMember@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CConMember@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$129 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$128 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$128
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$129
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> >, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 24		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  0000c	8b 75 0c	 mov	 esi, DWORD PTR _<_Args_0>$[ebp]
  0000f	8b cf		 mov	 ecx, edi

; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)
; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)
; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow
; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)
; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do
; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())
; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00011	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00018	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  0001f	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00020	c6 07 00	 mov	 BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  00023	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  00028	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0002b	89 47 18	 mov	 DWORD PTR [edi+24], eax
  0002e	5e		 pop	 esi
$LN3@construct:
  0002f	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 656  : 		}

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > > &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > > >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode_if_nil@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@PAU21@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z
_TEXT	SEGMENT
__Node$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Buynode_if_nil@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@PAU21@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buynode_if_nil<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> &>, COMDAT
; _this$ = ecx

; 1657 : 		{	// node exists, just return it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1658 : 		return (_Node);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Node$[ebp]

; 1659 : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
??$_Buynode_if_nil@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@PAU21@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buynode_if_nil<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@1@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@1@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> >, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 24		 je	 SHORT $LN8@construct
  0000b	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  0000c	8b 75 10	 mov	 esi, DWORD PTR _<_Args_0>$[ebp]
  0000f	8b cf		 mov	 ecx, edi

; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)
; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)
; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow
; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)
; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do
; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())
; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00011	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00018	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  0001f	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00020	c6 07 00	 mov	 BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  00023	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  00028	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0002b	89 47 18	 mov	 DWORD PTR [edi+24], eax
  0002e	5e		 pop	 esi
$LN8@construct:
  0002f	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 774  : 		}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@1@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> >::construct<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> * &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> >::construct<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> >::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> ><std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >, COMDAT
; _this$ = ecx

; 628  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> >::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> ><std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > ><std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >, COMDAT
; _this$ = ecx

; 869  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > ><std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> >::destroy<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> >::destroy<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >, COMDAT
; _this$ = ecx

; 661  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 722  : 		return (_Get_data()._Myres);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]

; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)
; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)
; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow
; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)
; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do
; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00007	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0000d	72 0b		 jb	 SHORT $LN16@destroy

; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  0000f	40		 inc	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	50		 push	 eax
  00013	ff 36		 push	 DWORD PTR [esi]
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN16@destroy:

; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  0001a	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00021	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00028	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0002c	72 0a		 jb	 SHORT $LN116@destroy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00031	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 663  : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN116@destroy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00038	c6 06 00	 mov	 BYTE PTR [esi], 0
  0003b	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 663  : 		}

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > > &,bool,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 146  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > > &,bool,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >,bool,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 146  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >,bool,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
__Node$ = 24						; size = 4
??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@1@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>, COMDAT
; _this$ = ecx

; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 1856 : 		if (max_size() - 1 <= this->_Mysize())

  00008	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0000b	3d 5c 74 d1 05	 cmp	 eax, 97612892		; 05d1745cH
  00010	72 36		 jb	 SHORT $LN5@Insert_at

; 602  : 		return ((reference)_Pnode->_Myval);

  00012	8b 7d 18	 mov	 edi, DWORD PTR __Node$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00015	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 602  : 		return ((reference)_Pnode->_Myval);

  00018	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  0001b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0001e	72 0b		 jb	 SHORT $LN94@Insert_at

; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  00020	40		 inc	 eax
  00021	8b ce		 mov	 ecx, esi
  00023	50		 push	 eax
  00024	ff 36		 push	 DWORD PTR [esi]
  00026	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN94@Insert_at:

; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  0002b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 506  : 			? _STD addressof(*this->_Bx._Ptr)
; 507  : 			: this->_Bx._Buf);
; 508  : 		}
; 509  : 
; 510  : 	const value_type *_Myptr() const
; 511  : 		{	// determine current pointer to buffer for nonmutable string
; 512  : 		return (this->_BUF_SIZE <= this->_Myres
; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}
; 516  : 
; 517  : 	union _Bxty
; 518  : 		{	// storage for small buffer or pointer to larger one
; 519  : 		value_type _Buf[_BUF_SIZE];
; 520  : 		pointer _Ptr;
; 521  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 522  : 		} _Bx;
; 523  : 
; 524  : 	size_type _Mysize;	// current length of string
; 525  : 	size_type _Myres;	// current storage reserved for string
; 526  : 	};
; 527  : 
; 528  : 		// TEMPLATE CLASS _String_alloc
; 529  : template<class _Alloc_types>
; 530  : 	class _String_alloc
; 531  : 	{	// base class for basic_string to hold allocator
; 532  : public:
; 533  : 	typedef _String_alloc<_Alloc_types> _Myt;
; 534  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 535  : 	typedef typename _Alloc_types::_Alty _Alty;
; 536  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 537  : 
; 538  : 	typedef typename _Val_types::value_type value_type;
; 539  : 	typedef typename _Val_types::size_type size_type;
; 540  : 	typedef typename _Val_types::difference_type difference_type;
; 541  : 	typedef typename _Val_types::pointer pointer;
; 542  : 	typedef typename _Val_types::const_pointer const_pointer;
; 543  : 	typedef typename _Val_types::reference reference;
; 544  : 	typedef typename _Val_types::const_reference const_reference;
; 545  : 
; 546  : 	typedef _String_iterator<_String_val<_Val_types> > iterator;
; 547  : 	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;
; 548  : 
; 549  : 	enum
; 550  : 		{	// length of internal buffer, [1, 16]
; 551  : 		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
; 552  : 		};
; 553  : 
; 554  : 	enum
; 555  : 		{	// roundup mask for allocated buffers, [0, 15]
; 556  : 		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
; 557  : 		};
; 558  : 
; 559  : 	value_type *_Myptr()
; 560  : 		{	// determine current pointer to buffer for mutable string
; 561  : 		return (_Get_data()._Myptr());
; 562  : 		}
; 563  : 
; 564  : 	const value_type *_Myptr() const
; 565  : 		{	// determine current pointer to buffer for nonmutable string
; 566  : 		return (_Get_data()._Myptr());
; 567  : 		}
; 568  : 
; 569  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 570  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 571  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 572  : 		{	// construct allocator from _Al
; 573  : 		}
; 574  : 
; 575  : 	_String_alloc(_Alloc&& _Al)
; 576  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 577  : 		{	// construct allocator from _Al
; 578  : 		}
; 579  : 
; 580  : 	void _Copy_alloc(const _Alty& _Al)
; 581  : 		{	// replace old allocator
; 582  : 		_Pocca(_Getal(), _Al);
; 583  : 		}
; 584  : 
; 585  : 	void _Move_alloc(_Alty& _Al)
; 586  : 		{	// replace old allocator
; 587  : 		_Pocma(_Getal(), _Al);
; 588  : 		}
; 589  : 
; 590  : 	void _Swap_alloc(_Myt& _Right)
; 591  : 		{	// swap allocators
; 592  : 		_Pocs(_Getal(), _Right._Getal());
; 593  : 		}
; 594  : 
; 595  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 596  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 597  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 598  : 		{	// construct allocator from _Al
; 599  : 		_Alloc_proxy();
; 600  : 		}
; 601  : 
; 602  : 	_String_alloc(_Alloc&& _Al)
; 603  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 604  : 		{	// construct allocator from _Al
; 605  : 		_Alloc_proxy();
; 606  : 		}
; 607  : 
; 608  : 	~_String_alloc() _NOEXCEPT
; 609  : 		{	// destroy the object
; 610  : 		_Free_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Copy_alloc(const _Alty& _Al)
; 614  : 		{	// replace old allocator
; 615  : 		_Free_proxy();
; 616  : 		_Pocca(_Getal(), _Al);
; 617  : 		_Alloc_proxy();
; 618  : 		}
; 619  : 
; 620  : 	void _Move_alloc(_Alty& _Al)
; 621  : 		{	// replace old allocator
; 622  : 		_Free_proxy();
; 623  : 		_Pocma(_Getal(), _Al);
; 624  : 		_Alloc_proxy();
; 625  : 		}
; 626  : 
; 627  : 	void _Swap_alloc(_Myt& _Right)
; 628  : 		{	// swap allocators
; 629  : 		_Pocs(_Getal(), _Right._Getal());
; 630  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 631  : 		}
; 632  : 
; 633  : 	void _Alloc_proxy()
; 634  : 		{	// construct proxy
; 635  : 		typename _Alty::template rebind<_Container_proxy>::other
; 636  : 			_Alproxy(_Getal());
; 637  : 		_Myproxy() = _Alproxy.allocate(1);
; 638  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 639  : 		_Myproxy()->_Mycont = &_Get_data();
; 640  : 		}
; 641  : 
; 642  : 	void _Free_proxy()
; 643  : 		{	// destroy proxy
; 644  : 		typename _Alty::template rebind<_Container_proxy>::other
; 645  : 			_Alproxy(_Getal());
; 646  : 		_Orphan_all();
; 647  : 		_Alproxy.destroy(_Myproxy());
; 648  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 649  : 		_Myproxy() = 0;
; 650  : 		}
; 651  : 
; 652  : 	_Iterator_base12 **_Getpfirst() const
; 653  : 		{	// get address of iterator chain
; 654  : 		return (_Get_data()._Getpfirst());
; 655  : 		}
; 656  : 
; 657  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 658  : 		{	// return reference to _Myproxy
; 659  : 		return (_Get_data()._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 663  : 		{	// return const reference to _Myproxy
; 664  : 		return (_Get_data()._Myproxy);
; 665  : 		}
; 666  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 667  : 
; 668  : 	void _Orphan_all()
; 669  : 		{	// orphan all iterators
; 670  : 		_Get_data()._Orphan_all();
; 671  : 		}
; 672  : 
; 673  : 	void _Swap_all(_Myt& _Right)
; 674  : 		{	// swap all iterators
; 675  : 		_Get_data()._Swap_all(_Right._Get_data());
; 676  : 		}
; 677  : 
; 678  : 	_Alty& _Getal() _NOEXCEPT
; 679  : 		{	// return reference to allocator
; 680  : 		return (_Mypair._Get_first());
; 681  : 		}
; 682  : 
; 683  : 	const _Alty& _Getal() const _NOEXCEPT
; 684  : 		{	// return const reference to allocator
; 685  : 		return (_Mypair._Get_first());
; 686  : 		}
; 687  : 
; 688  : 	_String_val<_Val_types>& _Get_data() _NOEXCEPT
; 689  : 		{	// return reference to _String_val
; 690  : 		return (_Mypair._Get_second());
; 691  : 		}
; 692  : 
; 693  : 	const _String_val<_Val_types>& _Get_data() const _NOEXCEPT
; 694  : 		{	// return const reference to _String_val
; 695  : 		return (_Mypair._Get_second());
; 696  : 		}
; 697  : 
; 698  : 	typedef typename _String_val<_Val_types>::_Bxty _Bxty;
; 699  : 
; 700  : 	_Bxty& _Bx() _NOEXCEPT
; 701  : 		{	// return reference to _Bx
; 702  : 		return (_Get_data()._Bx);
; 703  : 		}
; 704  : 
; 705  : 	const _Bxty& _Bx() const _NOEXCEPT
; 706  : 		{	// return const reference to _Bx
; 707  : 		return (_Get_data()._Bx);
; 708  : 		}
; 709  : 
; 710  : 	size_type& _Mysize() _NOEXCEPT
; 711  : 		{	// return reference to _Mysize
; 712  : 		return (_Get_data()._Mysize);
; 713  : 		}
; 714  : 
; 715  : 	const size_type& _Mysize() const _NOEXCEPT
; 716  : 		{	// return const reference to _Mysize
; 717  : 		return (_Get_data()._Mysize);
; 718  : 		}
; 719  : 
; 720  : 	size_type& _Myres() _NOEXCEPT
; 721  : 		{	// return reference to _Myres
; 722  : 		return (_Get_data()._Myres);
; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00039	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0003d	0f 82 75 01 00
	00		 jb	 $LN194@Insert_at
  00043	e9 6e 01 00 00	 jmp	 $LN860@Insert_at
$LN5@Insert_at:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1865 : 		_Newnode->_Parent = _Wherenode;

  00048	8b 5d 18	 mov	 ebx, DWORD PTR __Node$[ebp]
  0004b	40		 inc	 eax
  0004c	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0004f	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00052	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())

  00055	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00057	3b c1		 cmp	 eax, ecx
  00059	75 0e		 jne	 SHORT $LN6@Insert_at

; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;

  0005b	89 59 04	 mov	 DWORD PTR [ecx+4], ebx

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0005e	8b 07		 mov	 eax, DWORD PTR [edi]

; 1870 : 			_Lmost() = _Newnode;

  00060	89 18		 mov	 DWORD PTR [eax], ebx

; 1871 : 			_Rmost() = _Newnode;

  00062	8b 07		 mov	 eax, DWORD PTR [edi]
  00064	89 58 08	 mov	 DWORD PTR [eax+8], ebx
  00067	eb 1f		 jmp	 SHORT $LN11@Insert_at
$LN6@Insert_at:

; 1872 : 			}
; 1873 : 		else if (_Addleft)

  00069	80 7d 0c 00	 cmp	 BYTE PTR __Addleft$[ebp], 0
  0006d	74 0c		 je	 SHORT $LN8@Insert_at

; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;

  0006f	89 18		 mov	 DWORD PTR [eax], ebx

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00071	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1876 : 			if (_Wherenode == _Lmost())

  00073	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00075	75 11		 jne	 SHORT $LN11@Insert_at

; 1877 : 				_Lmost() = _Newnode;

  00077	89 19		 mov	 DWORD PTR [ecx], ebx

; 1878 : 			}
; 1879 : 		else

  00079	eb 0d		 jmp	 SHORT $LN11@Insert_at
$LN8@Insert_at:

; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;

  0007b	89 58 08	 mov	 DWORD PTR [eax+8], ebx

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0007e	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1882 : 			if (_Wherenode == _Rmost())

  00080	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00083	75 03		 jne	 SHORT $LN11@Insert_at

; 1883 : 				_Rmost() = _Newnode;

  00085	89 59 08	 mov	 DWORD PTR [ecx+8], ebx
$LN11@Insert_at:

; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00088	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008b	8b f3		 mov	 esi, ebx
  0008d	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00091	0f 85 0a 01 00
	00		 jne	 $LN3@Insert_at
$LL2@Insert_at:

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00097	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0009a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  0009d	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0009f	3b c1		 cmp	 eax, ecx
  000a1	75 74		 jne	 SHORT $LN12@Insert_at

; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =

  000a3	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)

  000a6	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  000aa	74 71		 je	 SHORT $LN859@Insert_at

; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  000ac	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  000af	75 0a		 jne	 SHORT $LN16@Insert_at

; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);

  000b1	8b f0		 mov	 esi, eax

; 1906 : 						_Lrotate(_Pnode);

  000b3	8b cf		 mov	 ecx, edi
  000b5	56		 push	 esi
  000b6	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Lrotate
$LN16@Insert_at:

; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =

  000bb	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000be	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  000c2	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000c8	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  000cc	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  000d2	8b 11		 mov	 edx, DWORD PTR [ecx]

; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  000d4	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000d7	89 01		 mov	 DWORD PTR [ecx], eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  000d9	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  000dc	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000e0	75 03		 jne	 SHORT $LN506@Insert_at

; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  000e2	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN506@Insert_at:

; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  000e5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000e8	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  000eb	8b 07		 mov	 eax, DWORD PTR [edi]

; 2146 : 
; 2147 : 		if (_Wherenode == _Root())

  000ed	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  000f0	75 0b		 jne	 SHORT $LN507@Insert_at

; 2148 : 			_Root() = _Pnode;

  000f2	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  000f5	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  000f8	e9 94 00 00 00	 jmp	 $LN858@Insert_at
$LN507@Insert_at:

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  000fd	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00100	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00103	75 0b		 jne	 SHORT $LN509@Insert_at

; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00105	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  00108	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  0010b	e9 81 00 00 00	 jmp	 $LN858@Insert_at
$LN509@Insert_at:

; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  00110	89 10		 mov	 DWORD PTR [eax], edx

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  00112	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  00115	eb 7a		 jmp	 SHORT $LN858@Insert_at
$LN12@Insert_at:

; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)

  00117	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011b	75 1a		 jne	 SHORT $LN17@Insert_at
$LN859@Insert_at:

; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  0011d	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1922 : 					this->_Color(_Wherenode) = this->_Black;

  00121	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  00125	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00128	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0012b	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  0012f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00132	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 1926 : 					}
; 1927 : 				else

  00135	eb 5d		 jmp	 SHORT $LN18@Insert_at
$LN17@Insert_at:

; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  00137	3b 30		 cmp	 esi, DWORD PTR [eax]
  00139	75 0a		 jne	 SHORT $LN19@Insert_at

; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);

  0013b	8b f0		 mov	 esi, eax

; 1932 : 						_Rrotate(_Pnode);

  0013d	8b cf		 mov	 ecx, edi
  0013f	56		 push	 esi
  00140	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Rrotate
$LN19@Insert_at:

; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =

  00145	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00148	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  0014c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0014f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00152	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  00156	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00159	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  0015c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]

; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0015f	8b 02		 mov	 eax, DWORD PTR [edx]
  00161	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00164	8b 02		 mov	 eax, DWORD PTR [edx]

; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  00166	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0016a	75 03		 jne	 SHORT $LN705@Insert_at

; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  0016c	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN705@Insert_at:

; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0016f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00172	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00175	8b 07		 mov	 eax, DWORD PTR [edi]

; 2116 : 
; 2117 : 		if (_Wherenode == _Root())

  00177	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0017a	75 05		 jne	 SHORT $LN706@Insert_at

; 2118 : 			_Root() = _Pnode;

  0017c	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  0017f	eb 0e		 jmp	 SHORT $LN709@Insert_at
$LN706@Insert_at:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00181	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00184	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00186	75 04		 jne	 SHORT $LN708@Insert_at

; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  00188	89 10		 mov	 DWORD PTR [eax], edx

; 2121 : 		else

  0018a	eb 03		 jmp	 SHORT $LN709@Insert_at
$LN708@Insert_at:

; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0018c	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN709@Insert_at:

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0018f	89 0a		 mov	 DWORD PTR [edx], ecx
$LN858@Insert_at:

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  00191	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN18@Insert_at:

; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00194	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00197	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0019b	0f 84 f6 fe ff
	ff		 je	 $LL2@Insert_at
$LN3@Insert_at:

; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  001a1	8b 07		 mov	 eax, DWORD PTR [edi]
  001a3	5f		 pop	 edi
  001a4	5e		 pop	 esi
  001a5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001a8	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 43   : 		: _Ptr(_Pnode)

  001ac	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001af	89 18		 mov	 DWORD PTR [eax], ebx
  001b1	5b		 pop	 ebx

; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}

  001b2	5d		 pop	 ebp
  001b3	c2 14 00	 ret	 20			; 00000014H
$LN860@Insert_at:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  001b6	8b 36		 mov	 esi, DWORD PTR [esi]
$LN194@Insert_at:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  001b8	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  001b9	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  001bc	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001c1	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1859 : 			_Xlength_error("map/set<T> too long");

  001c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  001c9	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN862@Insert_at:
$LN857@Insert_at:
  001ce	cc		 int	 3
??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@1@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@0@AAU10@@Z PROC ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@YAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@0@AAU10@@Z ENDP ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> >, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 24		 je	 SHORT $LN13@construct
  0000b	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  0000c	8b 75 0c	 mov	 esi, DWORD PTR _<_Args_0>$[ebp]
  0000f	8b cf		 mov	 ecx, edi

; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)
; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)
; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow
; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)
; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do
; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())
; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00011	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00018	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  0001f	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00020	c6 07 00	 mov	 BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  00023	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  00028	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0002b	89 47 18	 mov	 DWORD PTR [edi+24], eax
  0002e	5e		 pop	 esi
$LN13@construct:
  0002f	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 919  : 		}

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::construct<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> * &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::construct<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> * &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1><std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 568  : 		this->_Mysize = 0;

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  0000f	c2 08 00	 ret	 8
??$?0ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1><std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@YAABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@YAABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@0@ABV10@@Z PROC ; std::forward<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@YAABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABU10@@Z PROC ; std::forward<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABU10@@Z ENDP ; std::forward<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::destroy<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::destroy<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z PROC ; std::forward<std::_One_then_variadic_args_t>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z ENDP ; std::forward<std::_One_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@1@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@1@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >, COMDAT

; 779  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 722  : 		return (_Get_data()._Myres);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Ptr$[ebp]

; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)
; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)
; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow
; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)
; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do
; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00007	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0000d	72 0b		 jb	 SHORT $LN18@destroy

; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  0000f	40		 inc	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	50		 push	 eax
  00013	ff 36		 push	 DWORD PTR [esi]
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN18@destroy:

; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  0001a	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00021	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00028	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0002c	72 08		 jb	 SHORT $LN118@destroy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00031	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 781  : 		}

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN118@destroy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00036	c6 06 00	 mov	 BYTE PTR [esi], 0
  00039	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 781  : 		}

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@1@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@0@AAU10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@0@AAU10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@0@AAU10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z
_TEXT	SEGMENT
tv1156 = -36						; size = 4
__Wherenode$1$ = -32					; size = 4
__Addleft$2 = -28					; size = 1
_this$ = -24						; size = 4
__Trynode$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
$T3 = 12						; size = 4
__Where$4 = 12						; size = 4
__Leftish$ = 12						; size = 1
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 4
??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Insert_nohint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>, COMDAT
; _this$ = ecx

; 1799 : 		{	// try to insert node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d1		 mov	 edx, ecx
  0002d	89 55 e8	 mov	 DWORD PTR _this$[ebp], edx

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00030	8b 12		 mov	 edx, DWORD PTR [edx]

; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty

  00032	b0 01		 mov	 al, 1
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  0003b	89 55 dc	 mov	 DWORD PTR tv1156[ebp], edx

; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();

  0003e	89 55 e0	 mov	 DWORD PTR __Wherenode$1$[ebp], edx
  00041	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty

  00044	88 45 e4	 mov	 BYTE PTR __Addleft$2[ebp], al
$LN516@Insert_noh:

; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))

  00047	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0004b	89 4d ec	 mov	 DWORD PTR __Trynode$1$[ebp], ecx
  0004e	0f 85 5e 01 00
	00		 jne	 $LN3@Insert_noh

; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;

  00054	89 4d e0	 mov	 DWORD PTR __Wherenode$1$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

  00057	83 c1 10	 add	 ecx, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1808 : 			if (_Leftish)

  0005a	80 7d 0c 00	 cmp	 BYTE PTR __Leftish$[ebp], 0
  0005e	0f 84 9f 00 00
	00		 je	 $LN5@Insert_noh
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1750 : 		return (this->_Mysize());

  00064	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  00067	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1750 : 		return (this->_Mysize());

  0006b	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  0006e	72 04		 jb	 SHORT $LN105@Insert_noh
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00070	8b 30		 mov	 esi, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  00072	eb 02		 jmp	 SHORT $LN106@Insert_noh
$LN105@Insert_noh:
  00074	8b f0		 mov	 esi, eax
$LN106@Insert_noh:
  00076	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));

  0007a	8b 79 10	 mov	 edi, DWORD PTR [ecx+16]

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  0007d	72 02		 jb	 SHORT $LN171@Insert_noh
  0007f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN171@Insert_noh:

; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,

  00081	3b fb		 cmp	 edi, ebx
  00083	8b d3		 mov	 edx, ebx
  00085	0f 42 d7	 cmovb	 edx, edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 517  : 		return (_Count == 0 ? 0

  00088	85 d2		 test	 edx, edx
  0008a	74 55		 je	 SHORT $LN128@Insert_noh
  0008c	83 ea 04	 sub	 edx, 4
  0008f	72 11		 jb	 SHORT $LN502@Insert_noh
$LL503@Insert_noh:
  00091	8b 01		 mov	 eax, DWORD PTR [ecx]
  00093	3b 06		 cmp	 eax, DWORD PTR [esi]
  00095	75 10		 jne	 SHORT $LN501@Insert_noh
  00097	83 c1 04	 add	 ecx, 4
  0009a	83 c6 04	 add	 esi, 4
  0009d	83 ea 04	 sub	 edx, 4
  000a0	73 ef		 jae	 SHORT $LL503@Insert_noh
$LN502@Insert_noh:
  000a2	83 fa fc	 cmp	 edx, -4			; fffffffcH
  000a5	74 34		 je	 SHORT $LN500@Insert_noh
$LN501@Insert_noh:
  000a7	8a 01		 mov	 al, BYTE PTR [ecx]
  000a9	3a 06		 cmp	 al, BYTE PTR [esi]
  000ab	75 27		 jne	 SHORT $LN504@Insert_noh
  000ad	83 fa fd	 cmp	 edx, -3			; fffffffdH
  000b0	74 29		 je	 SHORT $LN500@Insert_noh
  000b2	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  000b5	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  000b8	75 1a		 jne	 SHORT $LN504@Insert_noh
  000ba	83 fa fe	 cmp	 edx, -2			; fffffffeH
  000bd	74 1c		 je	 SHORT $LN500@Insert_noh
  000bf	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  000c2	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  000c5	75 0d		 jne	 SHORT $LN504@Insert_noh
  000c7	83 fa ff	 cmp	 edx, -1
  000ca	74 0f		 je	 SHORT $LN500@Insert_noh
  000cc	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  000cf	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  000d2	74 07		 je	 SHORT $LN500@Insert_noh
$LN504@Insert_noh:
  000d4	1b c0		 sbb	 eax, eax
  000d6	83 c8 01	 or	 eax, 1
  000d9	eb 02		 jmp	 SHORT $LN505@Insert_noh
$LN500@Insert_noh:
  000db	33 c0		 xor	 eax, eax
$LN505@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1

  000dd	85 c0		 test	 eax, eax
  000df	75 1a		 jne	 SHORT $LN518@Insert_noh
$LN128@Insert_noh:
  000e1	3b fb		 cmp	 edi, ebx
  000e3	73 0d		 jae	 SHORT $LN126@Insert_noh
  000e5	83 c8 ff	 or	 eax, -1

; 2489 : 	return (_Left.compare(_Right) < 0);

  000e8	85 c0		 test	 eax, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),

  000ea	0f 99 c0	 setns	 al

; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else

  000ed	e9 a3 00 00 00	 jmp	 $LN514@Insert_noh
$LN126@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1

  000f2	33 c0		 xor	 eax, eax
  000f4	3b fb		 cmp	 edi, ebx
  000f6	0f 95 c0	 setne	 al

; 2489 : 	return (_Left.compare(_Right) < 0);

  000f9	85 c0		 test	 eax, eax
$LN518@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),

  000fb	0f 99 c0	 setns	 al

; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else

  000fe	e9 92 00 00 00	 jmp	 $LN514@Insert_noh
$LN5@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  00103	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1750 : 		return (this->_Mysize());

  00107	8b 59 10	 mov	 ebx, DWORD PTR [ecx+16]

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  0010a	72 02		 jb	 SHORT $LN236@Insert_noh
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  0010c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN236@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));

  0010e	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  00111	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));

  00115	8b 78 10	 mov	 edi, DWORD PTR [eax+16]

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  00118	72 04		 jb	 SHORT $LN300@Insert_noh
  0011a	8b 30		 mov	 esi, DWORD PTR [eax]
  0011c	eb 02		 jmp	 SHORT $LN301@Insert_noh
$LN300@Insert_noh:
  0011e	8b f0		 mov	 esi, eax
$LN301@Insert_noh:

; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,

  00120	3b fb		 cmp	 edi, ebx
  00122	8b d3		 mov	 edx, ebx
  00124	0f 42 d7	 cmovb	 edx, edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 517  : 		return (_Count == 0 ? 0

  00127	85 d2		 test	 edx, edx
  00129	74 55		 je	 SHORT $LN258@Insert_noh
  0012b	83 ea 04	 sub	 edx, 4
  0012e	72 11		 jb	 SHORT $LN508@Insert_noh
$LL509@Insert_noh:
  00130	8b 06		 mov	 eax, DWORD PTR [esi]
  00132	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00134	75 10		 jne	 SHORT $LN507@Insert_noh
  00136	83 c6 04	 add	 esi, 4
  00139	83 c1 04	 add	 ecx, 4
  0013c	83 ea 04	 sub	 edx, 4
  0013f	73 ef		 jae	 SHORT $LL509@Insert_noh
$LN508@Insert_noh:
  00141	83 fa fc	 cmp	 edx, -4			; fffffffcH
  00144	74 34		 je	 SHORT $LN506@Insert_noh
$LN507@Insert_noh:
  00146	8a 06		 mov	 al, BYTE PTR [esi]
  00148	3a 01		 cmp	 al, BYTE PTR [ecx]
  0014a	75 27		 jne	 SHORT $LN510@Insert_noh
  0014c	83 fa fd	 cmp	 edx, -3			; fffffffdH
  0014f	74 29		 je	 SHORT $LN506@Insert_noh
  00151	8a 46 01	 mov	 al, BYTE PTR [esi+1]
  00154	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00157	75 1a		 jne	 SHORT $LN510@Insert_noh
  00159	83 fa fe	 cmp	 edx, -2			; fffffffeH
  0015c	74 1c		 je	 SHORT $LN506@Insert_noh
  0015e	8a 46 02	 mov	 al, BYTE PTR [esi+2]
  00161	3a 41 02	 cmp	 al, BYTE PTR [ecx+2]
  00164	75 0d		 jne	 SHORT $LN510@Insert_noh
  00166	83 fa ff	 cmp	 edx, -1
  00169	74 0f		 je	 SHORT $LN506@Insert_noh
  0016b	8a 46 03	 mov	 al, BYTE PTR [esi+3]
  0016e	3a 41 03	 cmp	 al, BYTE PTR [ecx+3]
  00171	74 07		 je	 SHORT $LN506@Insert_noh
$LN510@Insert_noh:
  00173	1b c0		 sbb	 eax, eax
  00175	83 c8 01	 or	 eax, 1
  00178	eb 02		 jmp	 SHORT $LN511@Insert_noh
$LN506@Insert_noh:
  0017a	33 c0		 xor	 eax, eax
$LN511@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1

  0017c	85 c0		 test	 eax, eax
  0017e	75 12		 jne	 SHORT $LN515@Insert_noh
$LN258@Insert_noh:
  00180	3b fb		 cmp	 edi, ebx
  00182	73 05		 jae	 SHORT $LN256@Insert_noh
  00184	83 c8 ff	 or	 eax, -1
  00187	eb 07		 jmp	 SHORT $LN257@Insert_noh
$LN256@Insert_noh:
  00189	33 c0		 xor	 eax, eax
  0018b	3b fb		 cmp	 edi, ebx
  0018d	0f 95 c0	 setne	 al
$LN257@Insert_noh:

; 2489 : 	return (_Left.compare(_Right) < 0);

  00190	85 c0		 test	 eax, eax
$LN515@Insert_noh:
  00192	0f 98 c0	 sets	 al
$LN514@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)

  00195	8b 4d ec	 mov	 ecx, DWORD PTR __Trynode$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00198	88 45 e4	 mov	 BYTE PTR __Addleft$2[ebp], al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2104 : 		}

  0019b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)

  0019f	84 c0		 test	 al, al
  001a1	74 07		 je	 SHORT $LN16@Insert_noh
  001a3	8b 09		 mov	 ecx, DWORD PTR [ecx]
  001a5	e9 9d fe ff ff	 jmp	 $LN516@Insert_noh
$LN16@Insert_noh:
  001aa	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}

  001ad	e9 95 fe ff ff	 jmp	 $LN516@Insert_noh
$LN3@Insert_noh:

; 43   : 		: _Ptr(_Pnode)

  001b2	8b 5d e0	 mov	 ebx, DWORD PTR __Wherenode$1$[ebp]
  001b5	8b f3		 mov	 esi, ebx
  001b7	89 75 0c	 mov	 DWORD PTR __Where$4[ebp], esi

; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)

  001ba	84 c0		 test	 al, al
  001bc	74 47		 je	 SHORT $LN12@Insert_noh

; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  001be	8b 45 dc	 mov	 eax, DWORD PTR tv1156[ebp]
  001c1	3b 18		 cmp	 ebx, DWORD PTR [eax]

; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())

  001c3	75 35		 jne	 SHORT $LN11@Insert_noh

; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,

  001c5	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  001c8	8b 7d 10	 mov	 edi, DWORD PTR __Val$[ebp]
  001cb	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001ce	57		 push	 edi
  001cf	53		 push	 ebx
  001d0	6a 01		 push	 1
$LN519@Insert_noh:
  001d2	8d 45 0c	 lea	 eax, DWORD PTR $T3[ebp]
  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@1@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Insert_at<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  001db	8b 08		 mov	 ecx, DWORD PTR [eax]
  001dd	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001e0	89 08		 mov	 DWORD PTR [eax], ecx

; 144  : 				second(_STD forward<_Other2>(_Val2))

  001e2	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1849 : 		}

  001e6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001f0	59		 pop	 ecx
  001f1	5f		 pop	 edi
  001f2	5e		 pop	 esi
  001f3	5b		 pop	 ebx
  001f4	8b e5		 mov	 esp, ebp
  001f6	5d		 pop	 ebp
  001f7	c2 10 00	 ret	 16			; 00000010H
$LN11@Insert_noh:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);

  001fa	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$4[ebp]
  001fd	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,std::_Iterator_base0>::operator--
  00202	8b 75 0c	 mov	 esi, DWORD PTR __Where$4[ebp]
$LN12@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

  00205	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  00208	8b 7d 10	 mov	 edi, DWORD PTR __Val$[ebp]

; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right

  0020b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  0020f	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00213	72 04		 jb	 SHORT $LN459@Insert_noh
  00215	8b 07		 mov	 eax, DWORD PTR [edi]
  00217	eb 02		 jmp	 SHORT $LN460@Insert_noh
$LN459@Insert_noh:
  00219	8b c7		 mov	 eax, edi
$LN460@Insert_noh:

; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));

  0021b	ff 77 10	 push	 DWORD PTR [edi+16]
  0021e	50		 push	 eax
  0021f	ff 71 10	 push	 DWORD PTR [ecx+16]
  00222	6a 00		 push	 0
  00224	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  00229	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2104 : 		}

  0022c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  00230	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2489 : 	return (_Left.compare(_Right) < 0);

  00233	85 c0		 test	 eax, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

  00235	79 07		 jns	 SHORT $LN13@Insert_noh

; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  00237	57		 push	 edi
  00238	53		 push	 ebx
  00239	ff 75 e4	 push	 DWORD PTR __Addleft$2[ebp]
  0023c	eb 94		 jmp	 SHORT $LN519@Insert_noh
$LN13@Insert_noh:

; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);

  0023e	e8 00 00 00 00	 call	 ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Destroy_if_not_nil
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00243	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00246	89 30		 mov	 DWORD PTR [eax], esi

; 144  : 				second(_STD forward<_Other2>(_Val2))

  00248	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1849 : 		}

  0024c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0024f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00256	59		 pop	 ecx
  00257	5f		 pop	 edi
  00258	5e		 pop	 esi
  00259	5b		 pop	 ebx
  0025a	8b e5		 mov	 esp, ebp
  0025c	5d		 pop	 ebp
  0025d	c2 10 00	 ret	 16			; 00000010H
__catch$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z$0:

; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);

  00260	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  00263	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00266	e8 00 00 00 00	 call	 ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Destroy_if_not_nil

; 1847 : 		_RERAISE;

  0026b	6a 00		 push	 0
  0026d	6a 00		 push	 0
  0026f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN520@Insert_noh:
$LN513@Insert_noh:
  00274	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z$12:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z$39:
  00006	e8 00 00 00 00	 call	 ___std_terminate
  0000b	c3		 ret	 0
__unwindfunclet$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z$85:
  0000c	e8 00 00 00 00	 call	 ___std_terminate
  00011	c3		 ret	 0
__ehhandler$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Insert_nohint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buynode<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> >, COMDAT
; _this$ = ecx

; 887  : 		{	// allocate a node with defaults and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 888  : 		_Nodeptr _Pnode = _Buynode0();

  00005	e8 00 00 00 00	 call	 ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buynode0
  0000a	8b f8		 mov	 edi, eax

; 602  : 		return ((reference)_Pnode->_Myval);

  0000c	8d 5f 10	 lea	 ebx, DWORD PTR [edi+16]

; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;

  0000f	66 c7 47 0c 00
	00		 mov	 WORD PTR [edi+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00015	85 db		 test	 ebx, ebx
  00017	74 26		 je	 SHORT $LN50@Buynode
  00019	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  0001a	8b 75 08	 mov	 esi, DWORD PTR _<_Val_0>$[ebp]
  0001d	8b cb		 mov	 ecx, ebx

; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)
; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)
; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow
; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)
; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do
; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())
; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  0001f	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH

; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00026	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  0002d	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0002e	c6 03 00	 mov	 BYTE PTR [ebx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  00031	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  00036	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00039	89 43 18	 mov	 DWORD PTR [ebx+24], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 902  : 		return (_Pnode);

  0003c	8b c7		 mov	 eax, edi
  0003e	5e		 pop	 esi
$LN50@Buynode:
  0003f	5f		 pop	 edi
  00040	5b		 pop	 ebx

; 903  : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buynode<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@YA$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@YA$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@0@AAU10@@Z PROC ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@YA$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@0@AAU10@@Z ENDP ; std::forward<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@H@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@H@std@@YA$$QAHAAH@Z PROC			; std::forward<int>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@H@std@@YA$$QAHAAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::construct<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> * &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::construct<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z PROC ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0>::_Kfn<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>, COMDAT

; 61   : 		{	// extract key from element value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 62   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 63   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z ENDP ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0>::_Kfn<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAU21@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
_<_Val2_1>$ = 20					; size = 4
??$?0ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAU21@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z PROC ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>,1>::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>,1><std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::_One_then_variadic_args_t,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 568  : 		this->_Mysize = 0;

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  0000f	c2 10 00	 ret	 16			; 00000010H
??$?0ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAU21@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z ENDP ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>,1>::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>,1><std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::_One_then_variadic_args_t,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::destroy<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::destroy<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2488 : 	{	// test if string < string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}
; 516  : 
; 517  : 	union _Bxty
; 518  : 		{	// storage for small buffer or pointer to larger one
; 519  : 		value_type _Buf[_BUF_SIZE];
; 520  : 		pointer _Ptr;
; 521  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 522  : 		} _Bx;
; 523  : 
; 524  : 	size_type _Mysize;	// current length of string
; 525  : 	size_type _Myres;	// current storage reserved for string
; 526  : 	};
; 527  : 
; 528  : 		// TEMPLATE CLASS _String_alloc
; 529  : template<class _Alloc_types>
; 530  : 	class _String_alloc
; 531  : 	{	// base class for basic_string to hold allocator
; 532  : public:
; 533  : 	typedef _String_alloc<_Alloc_types> _Myt;
; 534  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 535  : 	typedef typename _Alloc_types::_Alty _Alty;
; 536  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 537  : 
; 538  : 	typedef typename _Val_types::value_type value_type;
; 539  : 	typedef typename _Val_types::size_type size_type;
; 540  : 	typedef typename _Val_types::difference_type difference_type;
; 541  : 	typedef typename _Val_types::pointer pointer;
; 542  : 	typedef typename _Val_types::const_pointer const_pointer;
; 543  : 	typedef typename _Val_types::reference reference;
; 544  : 	typedef typename _Val_types::const_reference const_reference;
; 545  : 
; 546  : 	typedef _String_iterator<_String_val<_Val_types> > iterator;
; 547  : 	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;
; 548  : 
; 549  : 	enum
; 550  : 		{	// length of internal buffer, [1, 16]
; 551  : 		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
; 552  : 		};
; 553  : 
; 554  : 	enum
; 555  : 		{	// roundup mask for allocated buffers, [0, 15]
; 556  : 		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
; 557  : 		};
; 558  : 
; 559  : 	value_type *_Myptr()
; 560  : 		{	// determine current pointer to buffer for mutable string
; 561  : 		return (_Get_data()._Myptr());
; 562  : 		}
; 563  : 
; 564  : 	const value_type *_Myptr() const
; 565  : 		{	// determine current pointer to buffer for nonmutable string
; 566  : 		return (_Get_data()._Myptr());
; 567  : 		}
; 568  : 
; 569  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 570  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 571  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 572  : 		{	// construct allocator from _Al
; 573  : 		}
; 574  : 
; 575  : 	_String_alloc(_Alloc&& _Al)
; 576  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 577  : 		{	// construct allocator from _Al
; 578  : 		}
; 579  : 
; 580  : 	void _Copy_alloc(const _Alty& _Al)
; 581  : 		{	// replace old allocator
; 582  : 		_Pocca(_Getal(), _Al);
; 583  : 		}
; 584  : 
; 585  : 	void _Move_alloc(_Alty& _Al)
; 586  : 		{	// replace old allocator
; 587  : 		_Pocma(_Getal(), _Al);
; 588  : 		}
; 589  : 
; 590  : 	void _Swap_alloc(_Myt& _Right)
; 591  : 		{	// swap allocators
; 592  : 		_Pocs(_Getal(), _Right._Getal());
; 593  : 		}
; 594  : 
; 595  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 596  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 597  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 598  : 		{	// construct allocator from _Al
; 599  : 		_Alloc_proxy();
; 600  : 		}
; 601  : 
; 602  : 	_String_alloc(_Alloc&& _Al)
; 603  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 604  : 		{	// construct allocator from _Al
; 605  : 		_Alloc_proxy();
; 606  : 		}
; 607  : 
; 608  : 	~_String_alloc() _NOEXCEPT
; 609  : 		{	// destroy the object
; 610  : 		_Free_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Copy_alloc(const _Alty& _Al)
; 614  : 		{	// replace old allocator
; 615  : 		_Free_proxy();
; 616  : 		_Pocca(_Getal(), _Al);
; 617  : 		_Alloc_proxy();
; 618  : 		}
; 619  : 
; 620  : 	void _Move_alloc(_Alty& _Al)
; 621  : 		{	// replace old allocator
; 622  : 		_Free_proxy();
; 623  : 		_Pocma(_Getal(), _Al);
; 624  : 		_Alloc_proxy();
; 625  : 		}
; 626  : 
; 627  : 	void _Swap_alloc(_Myt& _Right)
; 628  : 		{	// swap allocators
; 629  : 		_Pocs(_Getal(), _Right._Getal());
; 630  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 631  : 		}
; 632  : 
; 633  : 	void _Alloc_proxy()
; 634  : 		{	// construct proxy
; 635  : 		typename _Alty::template rebind<_Container_proxy>::other
; 636  : 			_Alproxy(_Getal());
; 637  : 		_Myproxy() = _Alproxy.allocate(1);
; 638  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 639  : 		_Myproxy()->_Mycont = &_Get_data();
; 640  : 		}
; 641  : 
; 642  : 	void _Free_proxy()
; 643  : 		{	// destroy proxy
; 644  : 		typename _Alty::template rebind<_Container_proxy>::other
; 645  : 			_Alproxy(_Getal());
; 646  : 		_Orphan_all();
; 647  : 		_Alproxy.destroy(_Myproxy());
; 648  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 649  : 		_Myproxy() = 0;
; 650  : 		}
; 651  : 
; 652  : 	_Iterator_base12 **_Getpfirst() const
; 653  : 		{	// get address of iterator chain
; 654  : 		return (_Get_data()._Getpfirst());
; 655  : 		}
; 656  : 
; 657  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 658  : 		{	// return reference to _Myproxy
; 659  : 		return (_Get_data()._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 663  : 		{	// return const reference to _Myproxy
; 664  : 		return (_Get_data()._Myproxy);
; 665  : 		}
; 666  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 667  : 
; 668  : 	void _Orphan_all()
; 669  : 		{	// orphan all iterators
; 670  : 		_Get_data()._Orphan_all();
; 671  : 		}
; 672  : 
; 673  : 	void _Swap_all(_Myt& _Right)
; 674  : 		{	// swap all iterators
; 675  : 		_Get_data()._Swap_all(_Right._Get_data());
; 676  : 		}
; 677  : 
; 678  : 	_Alty& _Getal() _NOEXCEPT
; 679  : 		{	// return reference to allocator
; 680  : 		return (_Mypair._Get_first());
; 681  : 		}
; 682  : 
; 683  : 	const _Alty& _Getal() const _NOEXCEPT
; 684  : 		{	// return const reference to allocator
; 685  : 		return (_Mypair._Get_first());
; 686  : 		}
; 687  : 
; 688  : 	_String_val<_Val_types>& _Get_data() _NOEXCEPT
; 689  : 		{	// return reference to _String_val
; 690  : 		return (_Mypair._Get_second());
; 691  : 		}
; 692  : 
; 693  : 	const _String_val<_Val_types>& _Get_data() const _NOEXCEPT
; 694  : 		{	// return const reference to _String_val
; 695  : 		return (_Mypair._Get_second());
; 696  : 		}
; 697  : 
; 698  : 	typedef typename _String_val<_Val_types>::_Bxty _Bxty;
; 699  : 
; 700  : 	_Bxty& _Bx() _NOEXCEPT
; 701  : 		{	// return reference to _Bx
; 702  : 		return (_Get_data()._Bx);
; 703  : 		}
; 704  : 
; 705  : 	const _Bxty& _Bx() const _NOEXCEPT
; 706  : 		{	// return const reference to _Bx
; 707  : 		return (_Get_data()._Bx);
; 708  : 		}
; 709  : 
; 710  : 	size_type& _Mysize() _NOEXCEPT
; 711  : 		{	// return reference to _Mysize
; 712  : 		return (_Get_data()._Mysize);
; 713  : 		}
; 714  : 
; 715  : 	const size_type& _Mysize() const _NOEXCEPT
; 716  : 		{	// return const reference to _Mysize
; 717  : 		return (_Get_data()._Mysize);
; 718  : 		}
; 719  : 
; 720  : 	size_type& _Myres() _NOEXCEPT
; 721  : 		{	// return reference to _Myres
; 722  : 		return (_Get_data()._Myres);
; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());

  00022	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]

; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right

  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  0002c	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}
; 516  : 
; 517  : 	union _Bxty
; 518  : 		{	// storage for small buffer or pointer to larger one
; 519  : 		value_type _Buf[_BUF_SIZE];
; 520  : 		pointer _Ptr;
; 521  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 522  : 		} _Bx;
; 523  : 
; 524  : 	size_type _Mysize;	// current length of string
; 525  : 	size_type _Myres;	// current storage reserved for string
; 526  : 	};
; 527  : 
; 528  : 		// TEMPLATE CLASS _String_alloc
; 529  : template<class _Alloc_types>
; 530  : 	class _String_alloc
; 531  : 	{	// base class for basic_string to hold allocator
; 532  : public:
; 533  : 	typedef _String_alloc<_Alloc_types> _Myt;
; 534  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 535  : 	typedef typename _Alloc_types::_Alty _Alty;
; 536  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 537  : 
; 538  : 	typedef typename _Val_types::value_type value_type;
; 539  : 	typedef typename _Val_types::size_type size_type;
; 540  : 	typedef typename _Val_types::difference_type difference_type;
; 541  : 	typedef typename _Val_types::pointer pointer;
; 542  : 	typedef typename _Val_types::const_pointer const_pointer;
; 543  : 	typedef typename _Val_types::reference reference;
; 544  : 	typedef typename _Val_types::const_reference const_reference;
; 545  : 
; 546  : 	typedef _String_iterator<_String_val<_Val_types> > iterator;
; 547  : 	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;
; 548  : 
; 549  : 	enum
; 550  : 		{	// length of internal buffer, [1, 16]
; 551  : 		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
; 552  : 		};
; 553  : 
; 554  : 	enum
; 555  : 		{	// roundup mask for allocated buffers, [0, 15]
; 556  : 		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
; 557  : 		};
; 558  : 
; 559  : 	value_type *_Myptr()
; 560  : 		{	// determine current pointer to buffer for mutable string
; 561  : 		return (_Get_data()._Myptr());
; 562  : 		}
; 563  : 
; 564  : 	const value_type *_Myptr() const
; 565  : 		{	// determine current pointer to buffer for nonmutable string
; 566  : 		return (_Get_data()._Myptr());
; 567  : 		}
; 568  : 
; 569  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 570  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 571  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 572  : 		{	// construct allocator from _Al
; 573  : 		}
; 574  : 
; 575  : 	_String_alloc(_Alloc&& _Al)
; 576  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 577  : 		{	// construct allocator from _Al
; 578  : 		}
; 579  : 
; 580  : 	void _Copy_alloc(const _Alty& _Al)
; 581  : 		{	// replace old allocator
; 582  : 		_Pocca(_Getal(), _Al);
; 583  : 		}
; 584  : 
; 585  : 	void _Move_alloc(_Alty& _Al)
; 586  : 		{	// replace old allocator
; 587  : 		_Pocma(_Getal(), _Al);
; 588  : 		}
; 589  : 
; 590  : 	void _Swap_alloc(_Myt& _Right)
; 591  : 		{	// swap allocators
; 592  : 		_Pocs(_Getal(), _Right._Getal());
; 593  : 		}
; 594  : 
; 595  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 596  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 597  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 598  : 		{	// construct allocator from _Al
; 599  : 		_Alloc_proxy();
; 600  : 		}
; 601  : 
; 602  : 	_String_alloc(_Alloc&& _Al)
; 603  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 604  : 		{	// construct allocator from _Al
; 605  : 		_Alloc_proxy();
; 606  : 		}
; 607  : 
; 608  : 	~_String_alloc() _NOEXCEPT
; 609  : 		{	// destroy the object
; 610  : 		_Free_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Copy_alloc(const _Alty& _Al)
; 614  : 		{	// replace old allocator
; 615  : 		_Free_proxy();
; 616  : 		_Pocca(_Getal(), _Al);
; 617  : 		_Alloc_proxy();
; 618  : 		}
; 619  : 
; 620  : 	void _Move_alloc(_Alty& _Al)
; 621  : 		{	// replace old allocator
; 622  : 		_Free_proxy();
; 623  : 		_Pocma(_Getal(), _Al);
; 624  : 		_Alloc_proxy();
; 625  : 		}
; 626  : 
; 627  : 	void _Swap_alloc(_Myt& _Right)
; 628  : 		{	// swap allocators
; 629  : 		_Pocs(_Getal(), _Right._Getal());
; 630  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 631  : 		}
; 632  : 
; 633  : 	void _Alloc_proxy()
; 634  : 		{	// construct proxy
; 635  : 		typename _Alty::template rebind<_Container_proxy>::other
; 636  : 			_Alproxy(_Getal());
; 637  : 		_Myproxy() = _Alproxy.allocate(1);
; 638  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 639  : 		_Myproxy()->_Mycont = &_Get_data();
; 640  : 		}
; 641  : 
; 642  : 	void _Free_proxy()
; 643  : 		{	// destroy proxy
; 644  : 		typename _Alty::template rebind<_Container_proxy>::other
; 645  : 			_Alproxy(_Getal());
; 646  : 		_Orphan_all();
; 647  : 		_Alproxy.destroy(_Myproxy());
; 648  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 649  : 		_Myproxy() = 0;
; 650  : 		}
; 651  : 
; 652  : 	_Iterator_base12 **_Getpfirst() const
; 653  : 		{	// get address of iterator chain
; 654  : 		return (_Get_data()._Getpfirst());
; 655  : 		}
; 656  : 
; 657  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 658  : 		{	// return reference to _Myproxy
; 659  : 		return (_Get_data()._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 663  : 		{	// return const reference to _Myproxy
; 664  : 		return (_Get_data()._Myproxy);
; 665  : 		}
; 666  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 667  : 
; 668  : 	void _Orphan_all()
; 669  : 		{	// orphan all iterators
; 670  : 		_Get_data()._Orphan_all();
; 671  : 		}
; 672  : 
; 673  : 	void _Swap_all(_Myt& _Right)
; 674  : 		{	// swap all iterators
; 675  : 		_Get_data()._Swap_all(_Right._Get_data());
; 676  : 		}
; 677  : 
; 678  : 	_Alty& _Getal() _NOEXCEPT
; 679  : 		{	// return reference to allocator
; 680  : 		return (_Mypair._Get_first());
; 681  : 		}
; 682  : 
; 683  : 	const _Alty& _Getal() const _NOEXCEPT
; 684  : 		{	// return const reference to allocator
; 685  : 		return (_Mypair._Get_first());
; 686  : 		}
; 687  : 
; 688  : 	_String_val<_Val_types>& _Get_data() _NOEXCEPT
; 689  : 		{	// return reference to _String_val
; 690  : 		return (_Mypair._Get_second());
; 691  : 		}
; 692  : 
; 693  : 	const _String_val<_Val_types>& _Get_data() const _NOEXCEPT
; 694  : 		{	// return const reference to _String_val
; 695  : 		return (_Mypair._Get_second());
; 696  : 		}
; 697  : 
; 698  : 	typedef typename _String_val<_Val_types>::_Bxty _Bxty;
; 699  : 
; 700  : 	_Bxty& _Bx() _NOEXCEPT
; 701  : 		{	// return reference to _Bx
; 702  : 		return (_Get_data()._Bx);
; 703  : 		}
; 704  : 
; 705  : 	const _Bxty& _Bx() const _NOEXCEPT
; 706  : 		{	// return const reference to _Bx
; 707  : 		return (_Get_data()._Bx);
; 708  : 		}
; 709  : 
; 710  : 	size_type& _Mysize() _NOEXCEPT
; 711  : 		{	// return reference to _Mysize
; 712  : 		return (_Get_data()._Mysize);
; 713  : 		}
; 714  : 
; 715  : 	const size_type& _Mysize() const _NOEXCEPT
; 716  : 		{	// return const reference to _Mysize
; 717  : 		return (_Get_data()._Mysize);
; 718  : 		}
; 719  : 
; 720  : 	size_type& _Myres() _NOEXCEPT
; 721  : 		{	// return reference to _Myres
; 722  : 		return (_Get_data()._Myres);
; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());

  00030	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  00033	72 02		 jb	 SHORT $LN29@operator
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00035	8b 00		 mov	 eax, DWORD PTR [eax]
$LN29@operator:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));

  00037	51		 push	 ecx
  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0003b	50		 push	 eax
  0003c	ff 71 10	 push	 DWORD PTR [ecx+16]
  0003f	6a 00		 push	 0
  00041	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare

; 2489 : 	return (_Left.compare(_Right) < 0);

  00046	33 c9		 xor	 ecx, ecx
  00048	85 c0		 test	 eax, eax
  0004a	0f 98 c0	 sets	 al

; 2490 : 	}

  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Wherenode$1$ = -20					; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Lbound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 2087 : 		{	// find leftmost node not less than _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00028	8b 19		 mov	 ebx, DWORD PTR [ecx]
  0002a	89 5d ec	 mov	 DWORD PTR __Wherenode$1$[ebp], ebx

; 2088 : 		_Nodeptr _Pnode = _Root();

  0002d	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00030	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00034	0f 85 b4 00 00
	00		 jne	 $LN189@Lbound
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  0003a	8b 55 08	 mov	 edx, DWORD PTR __Keyval$[ebp]

; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}
; 516  : 
; 517  : 	union _Bxty
; 518  : 		{	// storage for small buffer or pointer to larger one
; 519  : 		value_type _Buf[_BUF_SIZE];
; 520  : 		pointer _Ptr;
; 521  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 522  : 		} _Bx;
; 523  : 
; 524  : 	size_type _Mysize;	// current length of string
; 525  : 	size_type _Myres;	// current storage reserved for string
; 526  : 	};
; 527  : 
; 528  : 		// TEMPLATE CLASS _String_alloc
; 529  : template<class _Alloc_types>
; 530  : 	class _String_alloc
; 531  : 	{	// base class for basic_string to hold allocator
; 532  : public:
; 533  : 	typedef _String_alloc<_Alloc_types> _Myt;
; 534  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 535  : 	typedef typename _Alloc_types::_Alty _Alty;
; 536  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 537  : 
; 538  : 	typedef typename _Val_types::value_type value_type;
; 539  : 	typedef typename _Val_types::size_type size_type;
; 540  : 	typedef typename _Val_types::difference_type difference_type;
; 541  : 	typedef typename _Val_types::pointer pointer;
; 542  : 	typedef typename _Val_types::const_pointer const_pointer;
; 543  : 	typedef typename _Val_types::reference reference;
; 544  : 	typedef typename _Val_types::const_reference const_reference;
; 545  : 
; 546  : 	typedef _String_iterator<_String_val<_Val_types> > iterator;
; 547  : 	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;
; 548  : 
; 549  : 	enum
; 550  : 		{	// length of internal buffer, [1, 16]
; 551  : 		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
; 552  : 		};
; 553  : 
; 554  : 	enum
; 555  : 		{	// roundup mask for allocated buffers, [0, 15]
; 556  : 		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
; 557  : 		};
; 558  : 
; 559  : 	value_type *_Myptr()
; 560  : 		{	// determine current pointer to buffer for mutable string
; 561  : 		return (_Get_data()._Myptr());
; 562  : 		}
; 563  : 
; 564  : 	const value_type *_Myptr() const
; 565  : 		{	// determine current pointer to buffer for nonmutable string
; 566  : 		return (_Get_data()._Myptr());
; 567  : 		}
; 568  : 
; 569  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 570  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 571  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 572  : 		{	// construct allocator from _Al
; 573  : 		}
; 574  : 
; 575  : 	_String_alloc(_Alloc&& _Al)
; 576  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 577  : 		{	// construct allocator from _Al
; 578  : 		}
; 579  : 
; 580  : 	void _Copy_alloc(const _Alty& _Al)
; 581  : 		{	// replace old allocator
; 582  : 		_Pocca(_Getal(), _Al);
; 583  : 		}
; 584  : 
; 585  : 	void _Move_alloc(_Alty& _Al)
; 586  : 		{	// replace old allocator
; 587  : 		_Pocma(_Getal(), _Al);
; 588  : 		}
; 589  : 
; 590  : 	void _Swap_alloc(_Myt& _Right)
; 591  : 		{	// swap allocators
; 592  : 		_Pocs(_Getal(), _Right._Getal());
; 593  : 		}
; 594  : 
; 595  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 596  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 597  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 598  : 		{	// construct allocator from _Al
; 599  : 		_Alloc_proxy();
; 600  : 		}
; 601  : 
; 602  : 	_String_alloc(_Alloc&& _Al)
; 603  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 604  : 		{	// construct allocator from _Al
; 605  : 		_Alloc_proxy();
; 606  : 		}
; 607  : 
; 608  : 	~_String_alloc() _NOEXCEPT
; 609  : 		{	// destroy the object
; 610  : 		_Free_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Copy_alloc(const _Alty& _Al)
; 614  : 		{	// replace old allocator
; 615  : 		_Free_proxy();
; 616  : 		_Pocca(_Getal(), _Al);
; 617  : 		_Alloc_proxy();
; 618  : 		}
; 619  : 
; 620  : 	void _Move_alloc(_Alty& _Al)
; 621  : 		{	// replace old allocator
; 622  : 		_Free_proxy();
; 623  : 		_Pocma(_Getal(), _Al);
; 624  : 		_Alloc_proxy();
; 625  : 		}
; 626  : 
; 627  : 	void _Swap_alloc(_Myt& _Right)
; 628  : 		{	// swap allocators
; 629  : 		_Pocs(_Getal(), _Right._Getal());
; 630  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 631  : 		}
; 632  : 
; 633  : 	void _Alloc_proxy()
; 634  : 		{	// construct proxy
; 635  : 		typename _Alty::template rebind<_Container_proxy>::other
; 636  : 			_Alproxy(_Getal());
; 637  : 		_Myproxy() = _Alproxy.allocate(1);
; 638  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 639  : 		_Myproxy()->_Mycont = &_Get_data();
; 640  : 		}
; 641  : 
; 642  : 	void _Free_proxy()
; 643  : 		{	// destroy proxy
; 644  : 		typename _Alty::template rebind<_Container_proxy>::other
; 645  : 			_Alproxy(_Getal());
; 646  : 		_Orphan_all();
; 647  : 		_Alproxy.destroy(_Myproxy());
; 648  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 649  : 		_Myproxy() = 0;
; 650  : 		}
; 651  : 
; 652  : 	_Iterator_base12 **_Getpfirst() const
; 653  : 		{	// get address of iterator chain
; 654  : 		return (_Get_data()._Getpfirst());
; 655  : 		}
; 656  : 
; 657  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 658  : 		{	// return reference to _Myproxy
; 659  : 		return (_Get_data()._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 663  : 		{	// return const reference to _Myproxy
; 664  : 		return (_Get_data()._Myproxy);
; 665  : 		}
; 666  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 667  : 
; 668  : 	void _Orphan_all()
; 669  : 		{	// orphan all iterators
; 670  : 		_Get_data()._Orphan_all();
; 671  : 		}
; 672  : 
; 673  : 	void _Swap_all(_Myt& _Right)
; 674  : 		{	// swap all iterators
; 675  : 		_Get_data()._Swap_all(_Right._Get_data());
; 676  : 		}
; 677  : 
; 678  : 	_Alty& _Getal() _NOEXCEPT
; 679  : 		{	// return reference to allocator
; 680  : 		return (_Mypair._Get_first());
; 681  : 		}
; 682  : 
; 683  : 	const _Alty& _Getal() const _NOEXCEPT
; 684  : 		{	// return const reference to allocator
; 685  : 		return (_Mypair._Get_first());
; 686  : 		}
; 687  : 
; 688  : 	_String_val<_Val_types>& _Get_data() _NOEXCEPT
; 689  : 		{	// return reference to _String_val
; 690  : 		return (_Mypair._Get_second());
; 691  : 		}
; 692  : 
; 693  : 	const _String_val<_Val_types>& _Get_data() const _NOEXCEPT
; 694  : 		{	// return const reference to _String_val
; 695  : 		return (_Mypair._Get_second());
; 696  : 		}
; 697  : 
; 698  : 	typedef typename _String_val<_Val_types>::_Bxty _Bxty;
; 699  : 
; 700  : 	_Bxty& _Bx() _NOEXCEPT
; 701  : 		{	// return reference to _Bx
; 702  : 		return (_Get_data()._Bx);
; 703  : 		}
; 704  : 
; 705  : 	const _Bxty& _Bx() const _NOEXCEPT
; 706  : 		{	// return const reference to _Bx
; 707  : 		return (_Get_data()._Bx);
; 708  : 		}
; 709  : 
; 710  : 	size_type& _Mysize() _NOEXCEPT
; 711  : 		{	// return reference to _Mysize
; 712  : 		return (_Get_data()._Mysize);
; 713  : 		}
; 714  : 
; 715  : 	const size_type& _Mysize() const _NOEXCEPT
; 716  : 		{	// return const reference to _Mysize
; 717  : 		return (_Get_data()._Mysize);
; 718  : 		}
; 719  : 
; 720  : 	size_type& _Myres() _NOEXCEPT
; 721  : 		{	// return reference to _Myres
; 722  : 		return (_Get_data()._Myres);
; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());

  0003d	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00040	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
$LL2@Lbound:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

  00043	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  00046	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H
  0004a	72 04		 jb	 SHORT $LN88@Lbound
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  0004c	8b 32		 mov	 esi, DWORD PTR [edx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  0004e	eb 02		 jmp	 SHORT $LN89@Lbound
$LN88@Lbound:
  00050	8b f2		 mov	 esi, edx
$LN89@Lbound:
  00052	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));

  00056	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  00059	72 02		 jb	 SHORT $LN154@Lbound
  0005b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN154@Lbound:

; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,

  0005d	3b d9		 cmp	 ebx, ecx
  0005f	8b d1		 mov	 edx, ecx
  00061	0f 42 d3	 cmovb	 edx, ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 517  : 		return (_Count == 0 ? 0

  00064	85 d2		 test	 edx, edx
  00066	74 5b		 je	 SHORT $LN111@Lbound
  00068	83 ea 04	 sub	 edx, 4
  0006b	72 14		 jb	 SHORT $LN185@Lbound
  0006d	0f 1f 00	 npad	 3
$LL186@Lbound:
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  00074	75 10		 jne	 SHORT $LN184@Lbound
  00076	83 c0 04	 add	 eax, 4
  00079	83 c6 04	 add	 esi, 4
  0007c	83 ea 04	 sub	 edx, 4
  0007f	73 ef		 jae	 SHORT $LL186@Lbound
$LN185@Lbound:
  00081	83 fa fc	 cmp	 edx, -4			; fffffffcH
  00084	74 34		 je	 SHORT $LN183@Lbound
$LN184@Lbound:
  00086	8a 08		 mov	 cl, BYTE PTR [eax]
  00088	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0008a	75 27		 jne	 SHORT $LN187@Lbound
  0008c	83 fa fd	 cmp	 edx, -3			; fffffffdH
  0008f	74 29		 je	 SHORT $LN183@Lbound
  00091	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00094	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00097	75 1a		 jne	 SHORT $LN187@Lbound
  00099	83 fa fe	 cmp	 edx, -2			; fffffffeH
  0009c	74 1c		 je	 SHORT $LN183@Lbound
  0009e	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  000a1	3a 4e 02	 cmp	 cl, BYTE PTR [esi+2]
  000a4	75 0d		 jne	 SHORT $LN187@Lbound
  000a6	83 fa ff	 cmp	 edx, -1
  000a9	74 0f		 je	 SHORT $LN183@Lbound
  000ab	8a 40 03	 mov	 al, BYTE PTR [eax+3]
  000ae	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  000b1	74 07		 je	 SHORT $LN183@Lbound
$LN187@Lbound:
  000b3	1b c0		 sbb	 eax, eax
  000b5	83 c8 01	 or	 eax, 1
  000b8	eb 02		 jmp	 SHORT $LN188@Lbound
$LN183@Lbound:
  000ba	33 c0		 xor	 eax, eax
$LN188@Lbound:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1

  000bc	8b 4d f0	 mov	 ecx, DWORD PTR $T2[ebp]
  000bf	85 c0		 test	 eax, eax
  000c1	75 0d		 jne	 SHORT $LN192@Lbound
$LN111@Lbound:
  000c3	3b d9		 cmp	 ebx, ecx
  000c5	72 14		 jb	 SHORT $LN182@Lbound
  000c7	33 c0		 xor	 eax, eax
  000c9	3b d9		 cmp	 ebx, ecx
  000cb	0f 95 c0	 setne	 al

; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());
; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)
; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)
; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow
; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)
; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do
; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())
; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;
; 2242 : 		_Eos(_Newsize);
; 2243 : 		}
; 2244 : 
; 2245 : 	[[noreturn]] void _Xlen() const
; 2246 : 		{	// report a length_error
; 2247 : 		_Xlength_error("string too long");
; 2248 : 		}
; 2249 : 
; 2250 : 	[[noreturn]] void _Xran() const
; 2251 : 		{	// report an out_of_range error
; 2252 : 		_Xout_of_range("invalid string position");
; 2253 : 		}
; 2254 : 	};
; 2255 : 
; 2256 : 		// STATIC npos OBJECT
; 2257 : template<class _Elem,
; 2258 : 	class _Traits,
; 2259 : 	class _Alloc>
; 2260 : 	_PGLOBAL const typename basic_string<_Elem, _Traits, _Alloc>::size_type
; 2261 : 		basic_string<_Elem, _Traits, _Alloc>::npos =
; 2262 : 			(typename basic_string<_Elem, _Traits, _Alloc>::size_type)(-1);
; 2263 : 
; 2264 : 		// basic_string TEMPLATE OPERATORS
; 2265 : 
; 2266 : template<class _Elem,
; 2267 : 	class _Traits,
; 2268 : 	class _Alloc> inline
; 2269 : 	void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2270 : 		basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2271 : 			_NOEXCEPT_OP(_NOEXCEPT_OP(_Left.swap(_Right)))
; 2272 : 	{	// swap _Left and _Right strings
; 2273 : 	_Left.swap(_Right);
; 2274 : 	}
; 2275 : 
; 2276 : template<class _Elem,
; 2277 : 	class _Traits,
; 2278 : 	class _Alloc> inline
; 2279 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2280 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2281 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2282 : 	{	// return string + string
; 2283 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2284 : 	_Ans.reserve(_Left.size() + _Right.size());
; 2285 : 	_Ans += _Left;
; 2286 : 	_Ans += _Right;
; 2287 : 	return (_Ans);
; 2288 : 	}
; 2289 : 
; 2290 : template<class _Elem,
; 2291 : 	class _Traits,
; 2292 : 	class _Alloc> inline
; 2293 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2294 : 		const _Elem *_Left,
; 2295 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2296 : 	{	// return NTCS + string
; 2297 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2298 : 	_Ans.reserve(_Traits::length(_Left) + _Right.size());
; 2299 : 	_Ans += _Left;
; 2300 : 	_Ans += _Right;
; 2301 : 	return (_Ans);
; 2302 : 	}
; 2303 : 
; 2304 : template<class _Elem,
; 2305 : 	class _Traits,
; 2306 : 	class _Alloc> inline
; 2307 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2308 : 		const _Elem _Left,
; 2309 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2310 : 	{	// return character + string
; 2311 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2312 : 	_Ans.reserve(1 + _Right.size());
; 2313 : 	_Ans += _Left;
; 2314 : 	_Ans += _Right;
; 2315 : 	return (_Ans);
; 2316 : 	}
; 2317 : 
; 2318 : template<class _Elem,
; 2319 : 	class _Traits,
; 2320 : 	class _Alloc> inline
; 2321 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2322 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2323 : 		const _Elem *_Right)
; 2324 : 	{	// return string + NTCS
; 2325 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2326 : 	_Ans.reserve(_Left.size() + _Traits::length(_Right));
; 2327 : 	_Ans += _Left;
; 2328 : 	_Ans += _Right;
; 2329 : 	return (_Ans);
; 2330 : 	}
; 2331 : 
; 2332 : template<class _Elem,
; 2333 : 	class _Traits,
; 2334 : 	class _Alloc> inline
; 2335 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2336 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2337 : 		const _Elem _Right)
; 2338 : 	{	// return string + character
; 2339 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2340 : 	_Ans.reserve(_Left.size() + 1);
; 2341 : 	_Ans += _Left;
; 2342 : 	_Ans += _Right;
; 2343 : 	return (_Ans);
; 2344 : 	}
; 2345 : 
; 2346 : template<class _Elem,
; 2347 : 	class _Traits,
; 2348 : 	class _Alloc> inline
; 2349 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2350 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2351 : 		basic_string<_Elem, _Traits, _Alloc>&& _Right)
; 2352 : 	{	// return string + string
; 2353 : 	return (_STD move(_Right.insert(0, _Left)));
; 2354 : 	}
; 2355 : 
; 2356 : template<class _Elem,
; 2357 : 	class _Traits,
; 2358 : 	class _Alloc> inline
; 2359 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2360 : 		basic_string<_Elem, _Traits, _Alloc>&& _Left,
; 2361 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2362 : 	{	// return string + string
; 2363 : 	return (_STD move(_Left.append(_Right)));
; 2364 : 	}
; 2365 : 
; 2366 : template<class _Elem,
; 2367 : 	class _Traits,
; 2368 : 	class _Alloc> inline
; 2369 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2370 : 		basic_string<_Elem, _Traits, _Alloc>&& _Left,
; 2371 : 		basic_string<_Elem, _Traits, _Alloc>&& _Right)
; 2372 : 	{	// return string + string
; 2373 : 	if (_Right.size() <= _Left.capacity() - _Left.size()
; 2374 : 		|| _Right.capacity() - _Right.size() < _Left.size())
; 2375 : 		return (_STD move(_Left.append(_Right)));
; 2376 : 	else
; 2377 : 		return (_STD move(_Right.insert(0, _Left)));
; 2378 : 	}
; 2379 : 
; 2380 : template<class _Elem,
; 2381 : 	class _Traits,
; 2382 : 	class _Alloc> inline
; 2383 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2384 : 		const _Elem *_Left,
; 2385 : 		basic_string<_Elem, _Traits, _Alloc>&& _Right)
; 2386 : 	{	// return NTCS + string
; 2387 : 	return (_STD move(_Right.insert(0, _Left)));
; 2388 : 	}
; 2389 : 
; 2390 : template<class _Elem,
; 2391 : 	class _Traits,
; 2392 : 	class _Alloc> inline
; 2393 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2394 : 		const _Elem _Left,
; 2395 : 		basic_string<_Elem, _Traits, _Alloc>&& _Right)
; 2396 : 	{	// return character + string
; 2397 : 	typedef typename basic_string<_Elem, _Traits, _Alloc>::size_type
; 2398 : 		size_type;
; 2399 : 	return (_STD move(_Right.insert((size_type)0, (size_type)1, _Left)));
; 2400 : 	}
; 2401 : 
; 2402 : template<class _Elem,
; 2403 : 	class _Traits,
; 2404 : 	class _Alloc> inline
; 2405 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2406 : 		basic_string<_Elem, _Traits, _Alloc>&& _Left,
; 2407 : 		const _Elem *_Right)
; 2408 : 	{	// return string + NTCS
; 2409 : 	return (_STD move(_Left.append(_Right)));
; 2410 : 	}
; 2411 : 
; 2412 : template<class _Elem,
; 2413 : 	class _Traits,
; 2414 : 	class _Alloc> inline
; 2415 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2416 : 		basic_string<_Elem, _Traits, _Alloc>&& _Left,
; 2417 : 		const _Elem _Right)
; 2418 : 	{	// return string + character
; 2419 : 	return (_STD move(_Left.append(1, _Right)));
; 2420 : 	}
; 2421 : 
; 2422 : template<class _Elem,
; 2423 : 	class _Traits,
; 2424 : 	class _Alloc> inline
; 2425 : 	bool operator==(
; 2426 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2427 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2428 : 	{	// test for string equality
; 2429 : 	return (_Left.compare(_Right) == 0);
; 2430 : 	}
; 2431 : 
; 2432 : template<class _Elem,
; 2433 : 	class _Traits,
; 2434 : 	class _Alloc> inline
; 2435 : 	bool operator==(
; 2436 : 		const _Elem * _Left,
; 2437 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2438 : 	{	// test for NTCS vs. string equality
; 2439 : 	return (_Right.compare(_Left) == 0);
; 2440 : 	}
; 2441 : 
; 2442 : template<class _Elem,
; 2443 : 	class _Traits,
; 2444 : 	class _Alloc> inline
; 2445 : 	bool operator==(
; 2446 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2447 : 		const _Elem *_Right)
; 2448 : 	{	// test for string vs. NTCS equality
; 2449 : 	return (_Left.compare(_Right) == 0);
; 2450 : 	}
; 2451 : 
; 2452 : template<class _Elem,
; 2453 : 	class _Traits,
; 2454 : 	class _Alloc> inline
; 2455 : 	bool operator!=(
; 2456 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2457 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2458 : 	{	// test for string inequality
; 2459 : 	return (!(_Left == _Right));
; 2460 : 	}
; 2461 : 
; 2462 : template<class _Elem,
; 2463 : 	class _Traits,
; 2464 : 	class _Alloc> inline
; 2465 : 	bool operator!=(
; 2466 : 		const _Elem *_Left,
; 2467 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2468 : 	{	// test for NTCS vs. string inequality
; 2469 : 	return (!(_Left == _Right));
; 2470 : 	}
; 2471 : 
; 2472 : template<class _Elem,
; 2473 : 	class _Traits,
; 2474 : 	class _Alloc> inline
; 2475 : 	bool operator!=(
; 2476 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2477 : 		const _Elem *_Right)
; 2478 : 	{	// test for string vs. NTCS inequality
; 2479 : 	return (!(_Left == _Right));
; 2480 : 	}
; 2481 : 
; 2482 : template<class _Elem,
; 2483 : 	class _Traits,
; 2484 : 	class _Alloc> inline
; 2485 : 	bool operator<(
; 2486 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2487 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2488 : 	{	// test if string < string
; 2489 : 	return (_Left.compare(_Right) < 0);

  000ce	85 c0		 test	 eax, eax
$LN192@Lbound:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  000d0	78 09		 js	 SHORT $LN182@Lbound

; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;

  000d2	8b df		 mov	 ebx, edi

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  000d4	8b 3f		 mov	 edi, DWORD PTR [edi]
  000d6	89 5d ec	 mov	 DWORD PTR __Wherenode$1$[ebp], ebx
  000d9	eb 06		 jmp	 SHORT $LN5@Lbound
$LN182@Lbound:

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  000db	8b 7f 08	 mov	 edi, DWORD PTR [edi+8]
  000de	8b 5d ec	 mov	 ebx, DWORD PTR __Wherenode$1$[ebp]
$LN5@Lbound:

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  000e1	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000e5	8b 55 08	 mov	 edx, DWORD PTR __Keyval$[ebp]
  000e8	0f 84 55 ff ff
	ff		 je	 $LL2@Lbound
$LN189@Lbound:

; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate

  000ee	8b c3		 mov	 eax, ebx

; 2101 : 		}

  000f0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fa	59		 pop	 ecx
  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$10:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Lbound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >, COMDAT
; _this$ = ecx

; 924  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 722  : 		return (_Get_data()._Myres);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]

; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)
; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)
; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow
; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)
; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do
; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00007	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0000d	72 0b		 jb	 SHORT $LN20@destroy

; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  0000f	40		 inc	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	50		 push	 eax
  00013	ff 36		 push	 DWORD PTR [esi]
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN20@destroy:

; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  0001a	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00021	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00028	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0002c	72 0a		 jb	 SHORT $LN120@destroy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00031	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 926  : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN120@destroy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00038	c6 06 00	 mov	 BYTE PTR [esi], 0
  0003b	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 926  : 		}

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@0@AAU10@@Z PROC ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@0@AAU10@@Z ENDP ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$insert@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::insert<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> >, COMDAT
; _this$ = ecx

; 1092 : 		{	// try to insert node with value _Val, favoring right side

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  00004	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00007	8b f9		 mov	 edi, ecx
  00009	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buynode<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> >

; 1094 : 		return (_Insert_nohint(false,

  0000e	50		 push	 eax

; 602  : 		return ((reference)_Pnode->_Myval);

  0000f	83 c0 10	 add	 eax, 16			; 00000010H

; 1094 : 		return (_Insert_nohint(false,

  00012	8b cf		 mov	 ecx, edi
  00014	50		 push	 eax
  00015	6a 00		 push	 0
  00017	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Insert_nohint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00022	5f		 pop	 edi

; 1095 : 			this->_Myval(_Newnode), _Newnode));
; 1096 : 		}

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??$insert@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::insert<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HX@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HX@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int><std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,void>, COMDAT
; _this$ = ecx

; 158  : 		{	// construct from moved compatible pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 158  : 		{	// construct from moved compatible pair

  00008	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  0000a	56		 push	 esi

; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)
; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)
; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow
; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)
; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do
; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())
; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  0000b	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00012	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00019	c6 07 00	 mov	 BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  0001c	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  00021	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00024	89 47 18	 mov	 DWORD PTR [edi+24], eax

; 159  : 		}

  00027	8b c7		 mov	 eax, edi
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HX@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int><std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HX@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAH@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HX@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAH@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int><std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  00004	ff 75 08	 push	 DWORD PTR __Val1$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 145  : 		{	// construct from moved values

  00007	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00009	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00010	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00017	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  0001a	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0001f	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00022	8b 00		 mov	 eax, DWORD PTR [eax]
  00024	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 146  : 		}

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HX@?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAH@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int><std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@XZ PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int>, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H
  00009	72 09		 jb	 SHORT $LN9@pair

; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  0000b	40		 inc	 eax
  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN9@pair:

; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00014	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 506  : 			? _STD addressof(*this->_Bx._Ptr)
; 507  : 			: this->_Bx._Buf);
; 508  : 		}
; 509  : 
; 510  : 	const value_type *_Myptr() const
; 511  : 		{	// determine current pointer to buffer for nonmutable string
; 512  : 		return (this->_BUF_SIZE <= this->_Myres
; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}
; 516  : 
; 517  : 	union _Bxty
; 518  : 		{	// storage for small buffer or pointer to larger one
; 519  : 		value_type _Buf[_BUF_SIZE];
; 520  : 		pointer _Ptr;
; 521  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 522  : 		} _Bx;
; 523  : 
; 524  : 	size_type _Mysize;	// current length of string
; 525  : 	size_type _Myres;	// current storage reserved for string
; 526  : 	};
; 527  : 
; 528  : 		// TEMPLATE CLASS _String_alloc
; 529  : template<class _Alloc_types>
; 530  : 	class _String_alloc
; 531  : 	{	// base class for basic_string to hold allocator
; 532  : public:
; 533  : 	typedef _String_alloc<_Alloc_types> _Myt;
; 534  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 535  : 	typedef typename _Alloc_types::_Alty _Alty;
; 536  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 537  : 
; 538  : 	typedef typename _Val_types::value_type value_type;
; 539  : 	typedef typename _Val_types::size_type size_type;
; 540  : 	typedef typename _Val_types::difference_type difference_type;
; 541  : 	typedef typename _Val_types::pointer pointer;
; 542  : 	typedef typename _Val_types::const_pointer const_pointer;
; 543  : 	typedef typename _Val_types::reference reference;
; 544  : 	typedef typename _Val_types::const_reference const_reference;
; 545  : 
; 546  : 	typedef _String_iterator<_String_val<_Val_types> > iterator;
; 547  : 	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;
; 548  : 
; 549  : 	enum
; 550  : 		{	// length of internal buffer, [1, 16]
; 551  : 		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
; 552  : 		};
; 553  : 
; 554  : 	enum
; 555  : 		{	// roundup mask for allocated buffers, [0, 15]
; 556  : 		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
; 557  : 		};
; 558  : 
; 559  : 	value_type *_Myptr()
; 560  : 		{	// determine current pointer to buffer for mutable string
; 561  : 		return (_Get_data()._Myptr());
; 562  : 		}
; 563  : 
; 564  : 	const value_type *_Myptr() const
; 565  : 		{	// determine current pointer to buffer for nonmutable string
; 566  : 		return (_Get_data()._Myptr());
; 567  : 		}
; 568  : 
; 569  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 570  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 571  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 572  : 		{	// construct allocator from _Al
; 573  : 		}
; 574  : 
; 575  : 	_String_alloc(_Alloc&& _Al)
; 576  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 577  : 		{	// construct allocator from _Al
; 578  : 		}
; 579  : 
; 580  : 	void _Copy_alloc(const _Alty& _Al)
; 581  : 		{	// replace old allocator
; 582  : 		_Pocca(_Getal(), _Al);
; 583  : 		}
; 584  : 
; 585  : 	void _Move_alloc(_Alty& _Al)
; 586  : 		{	// replace old allocator
; 587  : 		_Pocma(_Getal(), _Al);
; 588  : 		}
; 589  : 
; 590  : 	void _Swap_alloc(_Myt& _Right)
; 591  : 		{	// swap allocators
; 592  : 		_Pocs(_Getal(), _Right._Getal());
; 593  : 		}
; 594  : 
; 595  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 596  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 597  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 598  : 		{	// construct allocator from _Al
; 599  : 		_Alloc_proxy();
; 600  : 		}
; 601  : 
; 602  : 	_String_alloc(_Alloc&& _Al)
; 603  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 604  : 		{	// construct allocator from _Al
; 605  : 		_Alloc_proxy();
; 606  : 		}
; 607  : 
; 608  : 	~_String_alloc() _NOEXCEPT
; 609  : 		{	// destroy the object
; 610  : 		_Free_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Copy_alloc(const _Alty& _Al)
; 614  : 		{	// replace old allocator
; 615  : 		_Free_proxy();
; 616  : 		_Pocca(_Getal(), _Al);
; 617  : 		_Alloc_proxy();
; 618  : 		}
; 619  : 
; 620  : 	void _Move_alloc(_Alty& _Al)
; 621  : 		{	// replace old allocator
; 622  : 		_Free_proxy();
; 623  : 		_Pocma(_Getal(), _Al);
; 624  : 		_Alloc_proxy();
; 625  : 		}
; 626  : 
; 627  : 	void _Swap_alloc(_Myt& _Right)
; 628  : 		{	// swap allocators
; 629  : 		_Pocs(_Getal(), _Right._Getal());
; 630  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 631  : 		}
; 632  : 
; 633  : 	void _Alloc_proxy()
; 634  : 		{	// construct proxy
; 635  : 		typename _Alty::template rebind<_Container_proxy>::other
; 636  : 			_Alproxy(_Getal());
; 637  : 		_Myproxy() = _Alproxy.allocate(1);
; 638  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 639  : 		_Myproxy()->_Mycont = &_Get_data();
; 640  : 		}
; 641  : 
; 642  : 	void _Free_proxy()
; 643  : 		{	// destroy proxy
; 644  : 		typename _Alty::template rebind<_Container_proxy>::other
; 645  : 			_Alproxy(_Getal());
; 646  : 		_Orphan_all();
; 647  : 		_Alproxy.destroy(_Myproxy());
; 648  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 649  : 		_Myproxy() = 0;
; 650  : 		}
; 651  : 
; 652  : 	_Iterator_base12 **_Getpfirst() const
; 653  : 		{	// get address of iterator chain
; 654  : 		return (_Get_data()._Getpfirst());
; 655  : 		}
; 656  : 
; 657  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 658  : 		{	// return reference to _Myproxy
; 659  : 		return (_Get_data()._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 663  : 		{	// return const reference to _Myproxy
; 664  : 		return (_Get_data()._Myproxy);
; 665  : 		}
; 666  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 667  : 
; 668  : 	void _Orphan_all()
; 669  : 		{	// orphan all iterators
; 670  : 		_Get_data()._Orphan_all();
; 671  : 		}
; 672  : 
; 673  : 	void _Swap_all(_Myt& _Right)
; 674  : 		{	// swap all iterators
; 675  : 		_Get_data()._Swap_all(_Right._Get_data());
; 676  : 		}
; 677  : 
; 678  : 	_Alty& _Getal() _NOEXCEPT
; 679  : 		{	// return reference to allocator
; 680  : 		return (_Mypair._Get_first());
; 681  : 		}
; 682  : 
; 683  : 	const _Alty& _Getal() const _NOEXCEPT
; 684  : 		{	// return const reference to allocator
; 685  : 		return (_Mypair._Get_first());
; 686  : 		}
; 687  : 
; 688  : 	_String_val<_Val_types>& _Get_data() _NOEXCEPT
; 689  : 		{	// return reference to _String_val
; 690  : 		return (_Mypair._Get_second());
; 691  : 		}
; 692  : 
; 693  : 	const _String_val<_Val_types>& _Get_data() const _NOEXCEPT
; 694  : 		{	// return const reference to _String_val
; 695  : 		return (_Mypair._Get_second());
; 696  : 		}
; 697  : 
; 698  : 	typedef typename _String_val<_Val_types>::_Bxty _Bxty;
; 699  : 
; 700  : 	_Bxty& _Bx() _NOEXCEPT
; 701  : 		{	// return reference to _Bx
; 702  : 		return (_Get_data()._Bx);
; 703  : 		}
; 704  : 
; 705  : 	const _Bxty& _Bx() const _NOEXCEPT
; 706  : 		{	// return const reference to _Bx
; 707  : 		return (_Get_data()._Bx);
; 708  : 		}
; 709  : 
; 710  : 	size_type& _Mysize() _NOEXCEPT
; 711  : 		{	// return reference to _Mysize
; 712  : 		return (_Get_data()._Mysize);
; 713  : 		}
; 714  : 
; 715  : 	const size_type& _Mysize() const _NOEXCEPT
; 716  : 		{	// return const reference to _Mysize
; 717  : 		return (_Get_data()._Mysize);
; 718  : 		}
; 719  : 
; 720  : 	size_type& _Myres() _NOEXCEPT
; 721  : 		{	// return reference to _Myres
; 722  : 		return (_Get_data()._Myres);
; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  0001b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00022	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00026	72 07		 jb	 SHORT $LN109@pair
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0002b	c6 00 00	 mov	 BYTE PTR [eax], 0
  0002e	c3		 ret	 0
$LN109@pair:
  0002f	c6 06 00	 mov	 BYTE PTR [esi], 0
  00032	5e		 pop	 esi
  00033	c3		 ret	 0
??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@XZ ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ??_G?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAEPAXI@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00006	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00009	83 f8 10	 cmp	 eax, 16			; 00000010H
  0000c	72 09		 jb	 SHORT $LN13@scalar

; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  0000e	40		 inc	 eax
  0000f	50		 push	 eax
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN13@scalar:

; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00017	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 506  : 			? _STD addressof(*this->_Bx._Ptr)
; 507  : 			: this->_Bx._Buf);
; 508  : 		}
; 509  : 
; 510  : 	const value_type *_Myptr() const
; 511  : 		{	// determine current pointer to buffer for nonmutable string
; 512  : 		return (this->_BUF_SIZE <= this->_Myres
; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}
; 516  : 
; 517  : 	union _Bxty
; 518  : 		{	// storage for small buffer or pointer to larger one
; 519  : 		value_type _Buf[_BUF_SIZE];
; 520  : 		pointer _Ptr;
; 521  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 522  : 		} _Bx;
; 523  : 
; 524  : 	size_type _Mysize;	// current length of string
; 525  : 	size_type _Myres;	// current storage reserved for string
; 526  : 	};
; 527  : 
; 528  : 		// TEMPLATE CLASS _String_alloc
; 529  : template<class _Alloc_types>
; 530  : 	class _String_alloc
; 531  : 	{	// base class for basic_string to hold allocator
; 532  : public:
; 533  : 	typedef _String_alloc<_Alloc_types> _Myt;
; 534  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 535  : 	typedef typename _Alloc_types::_Alty _Alty;
; 536  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 537  : 
; 538  : 	typedef typename _Val_types::value_type value_type;
; 539  : 	typedef typename _Val_types::size_type size_type;
; 540  : 	typedef typename _Val_types::difference_type difference_type;
; 541  : 	typedef typename _Val_types::pointer pointer;
; 542  : 	typedef typename _Val_types::const_pointer const_pointer;
; 543  : 	typedef typename _Val_types::reference reference;
; 544  : 	typedef typename _Val_types::const_reference const_reference;
; 545  : 
; 546  : 	typedef _String_iterator<_String_val<_Val_types> > iterator;
; 547  : 	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;
; 548  : 
; 549  : 	enum
; 550  : 		{	// length of internal buffer, [1, 16]
; 551  : 		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
; 552  : 		};
; 553  : 
; 554  : 	enum
; 555  : 		{	// roundup mask for allocated buffers, [0, 15]
; 556  : 		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
; 557  : 		};
; 558  : 
; 559  : 	value_type *_Myptr()
; 560  : 		{	// determine current pointer to buffer for mutable string
; 561  : 		return (_Get_data()._Myptr());
; 562  : 		}
; 563  : 
; 564  : 	const value_type *_Myptr() const
; 565  : 		{	// determine current pointer to buffer for nonmutable string
; 566  : 		return (_Get_data()._Myptr());
; 567  : 		}
; 568  : 
; 569  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 570  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 571  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 572  : 		{	// construct allocator from _Al
; 573  : 		}
; 574  : 
; 575  : 	_String_alloc(_Alloc&& _Al)
; 576  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 577  : 		{	// construct allocator from _Al
; 578  : 		}
; 579  : 
; 580  : 	void _Copy_alloc(const _Alty& _Al)
; 581  : 		{	// replace old allocator
; 582  : 		_Pocca(_Getal(), _Al);
; 583  : 		}
; 584  : 
; 585  : 	void _Move_alloc(_Alty& _Al)
; 586  : 		{	// replace old allocator
; 587  : 		_Pocma(_Getal(), _Al);
; 588  : 		}
; 589  : 
; 590  : 	void _Swap_alloc(_Myt& _Right)
; 591  : 		{	// swap allocators
; 592  : 		_Pocs(_Getal(), _Right._Getal());
; 593  : 		}
; 594  : 
; 595  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 596  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 597  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 598  : 		{	// construct allocator from _Al
; 599  : 		_Alloc_proxy();
; 600  : 		}
; 601  : 
; 602  : 	_String_alloc(_Alloc&& _Al)
; 603  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 604  : 		{	// construct allocator from _Al
; 605  : 		_Alloc_proxy();
; 606  : 		}
; 607  : 
; 608  : 	~_String_alloc() _NOEXCEPT
; 609  : 		{	// destroy the object
; 610  : 		_Free_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Copy_alloc(const _Alty& _Al)
; 614  : 		{	// replace old allocator
; 615  : 		_Free_proxy();
; 616  : 		_Pocca(_Getal(), _Al);
; 617  : 		_Alloc_proxy();
; 618  : 		}
; 619  : 
; 620  : 	void _Move_alloc(_Alty& _Al)
; 621  : 		{	// replace old allocator
; 622  : 		_Free_proxy();
; 623  : 		_Pocma(_Getal(), _Al);
; 624  : 		_Alloc_proxy();
; 625  : 		}
; 626  : 
; 627  : 	void _Swap_alloc(_Myt& _Right)
; 628  : 		{	// swap allocators
; 629  : 		_Pocs(_Getal(), _Right._Getal());
; 630  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 631  : 		}
; 632  : 
; 633  : 	void _Alloc_proxy()
; 634  : 		{	// construct proxy
; 635  : 		typename _Alty::template rebind<_Container_proxy>::other
; 636  : 			_Alproxy(_Getal());
; 637  : 		_Myproxy() = _Alproxy.allocate(1);
; 638  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 639  : 		_Myproxy()->_Mycont = &_Get_data();
; 640  : 		}
; 641  : 
; 642  : 	void _Free_proxy()
; 643  : 		{	// destroy proxy
; 644  : 		typename _Alty::template rebind<_Container_proxy>::other
; 645  : 			_Alproxy(_Getal());
; 646  : 		_Orphan_all();
; 647  : 		_Alproxy.destroy(_Myproxy());
; 648  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 649  : 		_Myproxy() = 0;
; 650  : 		}
; 651  : 
; 652  : 	_Iterator_base12 **_Getpfirst() const
; 653  : 		{	// get address of iterator chain
; 654  : 		return (_Get_data()._Getpfirst());
; 655  : 		}
; 656  : 
; 657  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 658  : 		{	// return reference to _Myproxy
; 659  : 		return (_Get_data()._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 663  : 		{	// return const reference to _Myproxy
; 664  : 		return (_Get_data()._Myproxy);
; 665  : 		}
; 666  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 667  : 
; 668  : 	void _Orphan_all()
; 669  : 		{	// orphan all iterators
; 670  : 		_Get_data()._Orphan_all();
; 671  : 		}
; 672  : 
; 673  : 	void _Swap_all(_Myt& _Right)
; 674  : 		{	// swap all iterators
; 675  : 		_Get_data()._Swap_all(_Right._Get_data());
; 676  : 		}
; 677  : 
; 678  : 	_Alty& _Getal() _NOEXCEPT
; 679  : 		{	// return reference to allocator
; 680  : 		return (_Mypair._Get_first());
; 681  : 		}
; 682  : 
; 683  : 	const _Alty& _Getal() const _NOEXCEPT
; 684  : 		{	// return const reference to allocator
; 685  : 		return (_Mypair._Get_first());
; 686  : 		}
; 687  : 
; 688  : 	_String_val<_Val_types>& _Get_data() _NOEXCEPT
; 689  : 		{	// return reference to _String_val
; 690  : 		return (_Mypair._Get_second());
; 691  : 		}
; 692  : 
; 693  : 	const _String_val<_Val_types>& _Get_data() const _NOEXCEPT
; 694  : 		{	// return const reference to _String_val
; 695  : 		return (_Mypair._Get_second());
; 696  : 		}
; 697  : 
; 698  : 	typedef typename _String_val<_Val_types>::_Bxty _Bxty;
; 699  : 
; 700  : 	_Bxty& _Bx() _NOEXCEPT
; 701  : 		{	// return reference to _Bx
; 702  : 		return (_Get_data()._Bx);
; 703  : 		}
; 704  : 
; 705  : 	const _Bxty& _Bx() const _NOEXCEPT
; 706  : 		{	// return const reference to _Bx
; 707  : 		return (_Get_data()._Bx);
; 708  : 		}
; 709  : 
; 710  : 	size_type& _Mysize() _NOEXCEPT
; 711  : 		{	// return reference to _Mysize
; 712  : 		return (_Get_data()._Mysize);
; 713  : 		}
; 714  : 
; 715  : 	const size_type& _Mysize() const _NOEXCEPT
; 716  : 		{	// return const reference to _Mysize
; 717  : 		return (_Get_data()._Mysize);
; 718  : 		}
; 719  : 
; 720  : 	size_type& _Myres() _NOEXCEPT
; 721  : 		{	// return reference to _Myres
; 722  : 		return (_Get_data()._Myres);
; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  0001e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00025	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00029	72 04		 jb	 SHORT $LN113@scalar
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  0002b	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  0002d	eb 02		 jmp	 SHORT $LN114@scalar
$LN113@scalar:
  0002f	8b c6		 mov	 eax, esi
$LN114@scalar:
  00031	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00035	c6 00 00	 mov	 BYTE PTR [eax], 0
  00038	74 0b		 je	 SHORT $LN124@scalar
  0003a	6a 1c		 push	 28			; 0000001cH
  0003c	56		 push	 esi
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00042	83 c4 08	 add	 esp, 8
$LN124@scalar:
  00045	8b c6		 mov	 eax, esi
  00047	5e		 pop	 esi
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
??_G?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAEPAXI@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@XZ PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H
  00009	72 09		 jb	 SHORT $LN9@pair

; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  0000b	40		 inc	 eax
  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN9@pair:

; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00014	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 506  : 			? _STD addressof(*this->_Bx._Ptr)
; 507  : 			: this->_Bx._Buf);
; 508  : 		}
; 509  : 
; 510  : 	const value_type *_Myptr() const
; 511  : 		{	// determine current pointer to buffer for nonmutable string
; 512  : 		return (this->_BUF_SIZE <= this->_Myres
; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}
; 516  : 
; 517  : 	union _Bxty
; 518  : 		{	// storage for small buffer or pointer to larger one
; 519  : 		value_type _Buf[_BUF_SIZE];
; 520  : 		pointer _Ptr;
; 521  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 522  : 		} _Bx;
; 523  : 
; 524  : 	size_type _Mysize;	// current length of string
; 525  : 	size_type _Myres;	// current storage reserved for string
; 526  : 	};
; 527  : 
; 528  : 		// TEMPLATE CLASS _String_alloc
; 529  : template<class _Alloc_types>
; 530  : 	class _String_alloc
; 531  : 	{	// base class for basic_string to hold allocator
; 532  : public:
; 533  : 	typedef _String_alloc<_Alloc_types> _Myt;
; 534  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 535  : 	typedef typename _Alloc_types::_Alty _Alty;
; 536  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 537  : 
; 538  : 	typedef typename _Val_types::value_type value_type;
; 539  : 	typedef typename _Val_types::size_type size_type;
; 540  : 	typedef typename _Val_types::difference_type difference_type;
; 541  : 	typedef typename _Val_types::pointer pointer;
; 542  : 	typedef typename _Val_types::const_pointer const_pointer;
; 543  : 	typedef typename _Val_types::reference reference;
; 544  : 	typedef typename _Val_types::const_reference const_reference;
; 545  : 
; 546  : 	typedef _String_iterator<_String_val<_Val_types> > iterator;
; 547  : 	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;
; 548  : 
; 549  : 	enum
; 550  : 		{	// length of internal buffer, [1, 16]
; 551  : 		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
; 552  : 		};
; 553  : 
; 554  : 	enum
; 555  : 		{	// roundup mask for allocated buffers, [0, 15]
; 556  : 		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
; 557  : 		};
; 558  : 
; 559  : 	value_type *_Myptr()
; 560  : 		{	// determine current pointer to buffer for mutable string
; 561  : 		return (_Get_data()._Myptr());
; 562  : 		}
; 563  : 
; 564  : 	const value_type *_Myptr() const
; 565  : 		{	// determine current pointer to buffer for nonmutable string
; 566  : 		return (_Get_data()._Myptr());
; 567  : 		}
; 568  : 
; 569  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 570  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 571  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 572  : 		{	// construct allocator from _Al
; 573  : 		}
; 574  : 
; 575  : 	_String_alloc(_Alloc&& _Al)
; 576  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 577  : 		{	// construct allocator from _Al
; 578  : 		}
; 579  : 
; 580  : 	void _Copy_alloc(const _Alty& _Al)
; 581  : 		{	// replace old allocator
; 582  : 		_Pocca(_Getal(), _Al);
; 583  : 		}
; 584  : 
; 585  : 	void _Move_alloc(_Alty& _Al)
; 586  : 		{	// replace old allocator
; 587  : 		_Pocma(_Getal(), _Al);
; 588  : 		}
; 589  : 
; 590  : 	void _Swap_alloc(_Myt& _Right)
; 591  : 		{	// swap allocators
; 592  : 		_Pocs(_Getal(), _Right._Getal());
; 593  : 		}
; 594  : 
; 595  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 596  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 597  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 598  : 		{	// construct allocator from _Al
; 599  : 		_Alloc_proxy();
; 600  : 		}
; 601  : 
; 602  : 	_String_alloc(_Alloc&& _Al)
; 603  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 604  : 		{	// construct allocator from _Al
; 605  : 		_Alloc_proxy();
; 606  : 		}
; 607  : 
; 608  : 	~_String_alloc() _NOEXCEPT
; 609  : 		{	// destroy the object
; 610  : 		_Free_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Copy_alloc(const _Alty& _Al)
; 614  : 		{	// replace old allocator
; 615  : 		_Free_proxy();
; 616  : 		_Pocca(_Getal(), _Al);
; 617  : 		_Alloc_proxy();
; 618  : 		}
; 619  : 
; 620  : 	void _Move_alloc(_Alty& _Al)
; 621  : 		{	// replace old allocator
; 622  : 		_Free_proxy();
; 623  : 		_Pocma(_Getal(), _Al);
; 624  : 		_Alloc_proxy();
; 625  : 		}
; 626  : 
; 627  : 	void _Swap_alloc(_Myt& _Right)
; 628  : 		{	// swap allocators
; 629  : 		_Pocs(_Getal(), _Right._Getal());
; 630  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 631  : 		}
; 632  : 
; 633  : 	void _Alloc_proxy()
; 634  : 		{	// construct proxy
; 635  : 		typename _Alty::template rebind<_Container_proxy>::other
; 636  : 			_Alproxy(_Getal());
; 637  : 		_Myproxy() = _Alproxy.allocate(1);
; 638  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 639  : 		_Myproxy()->_Mycont = &_Get_data();
; 640  : 		}
; 641  : 
; 642  : 	void _Free_proxy()
; 643  : 		{	// destroy proxy
; 644  : 		typename _Alty::template rebind<_Container_proxy>::other
; 645  : 			_Alproxy(_Getal());
; 646  : 		_Orphan_all();
; 647  : 		_Alproxy.destroy(_Myproxy());
; 648  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 649  : 		_Myproxy() = 0;
; 650  : 		}
; 651  : 
; 652  : 	_Iterator_base12 **_Getpfirst() const
; 653  : 		{	// get address of iterator chain
; 654  : 		return (_Get_data()._Getpfirst());
; 655  : 		}
; 656  : 
; 657  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 658  : 		{	// return reference to _Myproxy
; 659  : 		return (_Get_data()._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 663  : 		{	// return const reference to _Myproxy
; 664  : 		return (_Get_data()._Myproxy);
; 665  : 		}
; 666  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 667  : 
; 668  : 	void _Orphan_all()
; 669  : 		{	// orphan all iterators
; 670  : 		_Get_data()._Orphan_all();
; 671  : 		}
; 672  : 
; 673  : 	void _Swap_all(_Myt& _Right)
; 674  : 		{	// swap all iterators
; 675  : 		_Get_data()._Swap_all(_Right._Get_data());
; 676  : 		}
; 677  : 
; 678  : 	_Alty& _Getal() _NOEXCEPT
; 679  : 		{	// return reference to allocator
; 680  : 		return (_Mypair._Get_first());
; 681  : 		}
; 682  : 
; 683  : 	const _Alty& _Getal() const _NOEXCEPT
; 684  : 		{	// return const reference to allocator
; 685  : 		return (_Mypair._Get_first());
; 686  : 		}
; 687  : 
; 688  : 	_String_val<_Val_types>& _Get_data() _NOEXCEPT
; 689  : 		{	// return reference to _String_val
; 690  : 		return (_Mypair._Get_second());
; 691  : 		}
; 692  : 
; 693  : 	const _String_val<_Val_types>& _Get_data() const _NOEXCEPT
; 694  : 		{	// return const reference to _String_val
; 695  : 		return (_Mypair._Get_second());
; 696  : 		}
; 697  : 
; 698  : 	typedef typename _String_val<_Val_types>::_Bxty _Bxty;
; 699  : 
; 700  : 	_Bxty& _Bx() _NOEXCEPT
; 701  : 		{	// return reference to _Bx
; 702  : 		return (_Get_data()._Bx);
; 703  : 		}
; 704  : 
; 705  : 	const _Bxty& _Bx() const _NOEXCEPT
; 706  : 		{	// return const reference to _Bx
; 707  : 		return (_Get_data()._Bx);
; 708  : 		}
; 709  : 
; 710  : 	size_type& _Mysize() _NOEXCEPT
; 711  : 		{	// return reference to _Mysize
; 712  : 		return (_Get_data()._Mysize);
; 713  : 		}
; 714  : 
; 715  : 	const size_type& _Mysize() const _NOEXCEPT
; 716  : 		{	// return const reference to _Mysize
; 717  : 		return (_Get_data()._Mysize);
; 718  : 		}
; 719  : 
; 720  : 	size_type& _Myres() _NOEXCEPT
; 721  : 		{	// return reference to _Myres
; 722  : 		return (_Get_data()._Myres);
; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  0001b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00022	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00026	72 07		 jb	 SHORT $LN109@pair
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0002b	c6 00 00	 mov	 BYTE PTR [eax], 0
  0002e	c3		 ret	 0
$LN109@pair:
  0002f	c6 06 00	 mov	 BYTE PTR [esi], 0
  00032	5e		 pop	 esi
  00033	c3		 ret	 0
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@XZ ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >::operator--, COMDAT
; _this$ = ecx

; 422  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 308  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,std::_Iterator_base0>::operator--

; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 425  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >, COMDAT
; _this$ = ecx

; 382  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 383  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >::operator!=, COMDAT
; _this$ = ecx

; 338  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 339  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 339  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 340  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >::operator==, COMDAT
; _this$ = ecx

; 322  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 335  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >::operator--, COMDAT
; _this$ = ecx

; 283  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,std::_Iterator_base0>::operator--

; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 312  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >::operator++, COMDAT
; _this$ = ecx

; 276  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 277  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 16		 mov	 DWORD PTR [esi], edx

; 271  : 		++(*(_Mybase *)this);

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,std::_Iterator_base0>::operator++

; 278  : 		++*this;
; 279  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 280  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >::operator++, COMDAT
; _this$ = ecx

; 256  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,std::_Iterator_base0>::operator++

; 272  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 273  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >, COMDAT
; _this$ = ecx

; 214  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 215  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 123  : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 124  : 		}

  00002	c3		 ret	 0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 84   : 		{	// predecrement

  00000	8b d1		 mov	 edx, ecx

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]

; 85   : 		if (_Mytree::_Isnil(_Ptr))

  00004	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00008	74 08		 je	 SHORT $LN4@operator

; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	89 02		 mov	 DWORD PTR [edx], eax

; 100  : 			}
; 101  : 		return (*this);

  0000f	8b c2		 mov	 eax, edx

; 102  : 		}

  00011	c3		 ret	 0
$LN4@operator:

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 08		 mov	 ecx, DWORD PTR [eax]

; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  00014	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00018	75 19		 jne	 SHORT $LN40@operator

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0001a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  0001d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00021	75 36		 jne	 SHORT $LN23@operator
$LL22@operator:

; 608  : 			_Pnode = _Right(_Pnode);

  00023	8b c8		 mov	 ecx, eax

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00025	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00028	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002c	74 f5		 je	 SHORT $LL22@operator

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

  0002e	89 0a		 mov	 DWORD PTR [edx], ecx

; 100  : 			}
; 101  : 		return (*this);

  00030	8b c2		 mov	 eax, edx

; 102  : 		}

  00032	c3		 ret	 0
$LN40@operator:

; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0003a	75 15		 jne	 SHORT $LN3@operator
  0003c	0f 1f 40 00	 npad	 4
$LL2@operator:
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00044	75 0b		 jne	 SHORT $LN3@operator

; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  00046	89 0a		 mov	 DWORD PTR [edx], ecx
  00048	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004b	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0004f	74 ef		 je	 SHORT $LL2@operator
$LN3@operator:

; 96   : 			if (_Mytree::_Isnil(_Ptr))

  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00057	75 02		 jne	 SHORT $LN47@operator
$LN23@operator:

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

  00059	89 0a		 mov	 DWORD PTR [edx], ecx
$LN47@operator:

; 100  : 			}
; 101  : 		return (*this);

  0005b	8b c2		 mov	 eax, edx

; 102  : 		}

  0005d	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,std::_Iterator_base0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 59   : 		{	// preincrement

  00000	8b d1		 mov	 edx, ecx

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]

; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00004	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00008	75 42		 jne	 SHORT $LN41@operator

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0000d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00011	75 1c		 jne	 SHORT $LN34@operator

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00013	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	75 0f		 jne	 SHORT $LN19@operator
  0001b	0f 1f 44 00 00	 npad	 5
$LL18@operator:

; 615  : 			_Pnode = _Left(_Pnode);

  00020	8b c8		 mov	 ecx, eax

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00022	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 f6		 je	 SHORT $LL18@operator
$LN19@operator:

; 63   : 			_Ptr = _Mytree::_Min(

  0002a	89 0a		 mov	 DWORD PTR [edx], ecx

; 72   : 			}
; 73   : 		return (*this);

  0002c	8b c2		 mov	 eax, edx

; 74   : 		}

  0002e	c3		 ret	 0
$LN34@operator:

; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0002f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00032	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00036	75 12		 jne	 SHORT $LN3@operator
$LL2@operator:
  00038	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0003a	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0003d	75 0b		 jne	 SHORT $LN3@operator

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0003f	89 02		 mov	 DWORD PTR [edx], eax
  00041	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00044	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00048	74 ee		 je	 SHORT $LL2@operator
$LN3@operator:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  0004a	89 02		 mov	 DWORD PTR [edx], eax
$LN41@operator:

; 72   : 			}
; 73   : 		return (*this);

  0004c	8b c2		 mov	 eax, edx

; 74   : 		}

  0004e	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FConMember@@YAXXZ
text$yd	SEGMENT
??__FConMember@@YAXXZ PROC				; `dynamic atexit destructor for 'ConMember'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ConMember@@3VCConMember@@A ; ConMember
  00005	e9 00 00 00 00	 jmp	 ??1CConMember@@UAE@XZ	; CConMember::~CConMember
??__FConMember@@YAXXZ ENDP				; `dynamic atexit destructor for 'ConMember''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp
;	COMDAT ??__EConMember@@YAXXZ
text$di	SEGMENT
??__EConMember@@YAXXZ PROC				; `dynamic initializer for 'ConMember'', COMDAT

; 13   : CConMember ConMember;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ConMember@@3VCConMember@@A ; ConMember
  00005	e8 00 00 00 00	 call	 ??0CConMember@@QAE@XZ	; CConMember::CConMember
  0000a	68 00 00 00 00	 push	 OFFSET ??__FConMember@@YAXXZ ; `dynamic atexit destructor for 'ConMember''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EConMember@@YAXXZ ENDP				; `dynamic initializer for 'ConMember''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCConMember@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCConMember@@UAEPAXI@Z PROC				; CConMember::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CConMember@@UAE@XZ	; CConMember::~CConMember
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 0c		 push	 12			; 0000000cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCConMember@@UAEPAXI@Z ENDP				; CConMember::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  00026	8b 06		 mov	 eax, DWORD PTR [esi]

; 1127 : 		_Tidy();
; 1128 : 		}
; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2116 : 
; 2117 : 		if (_Wherenode == _Root())
; 2118 : 			_Root() = _Pnode;
; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;
; 2125 : 		this->_Parent(_Wherenode) = _Pnode;
; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2146 : 
; 2147 : 		if (_Wherenode == _Root())
; 2148 : 			_Root() = _Pnode;
; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;
; 2155 : 		this->_Parent(_Wherenode) = _Pnode;
; 2156 : 		}
; 2157 : 
; 2158 : 	template<class _Other>
; 2159 : 		_Nodeptr _Ubound(const _Other& _Keyval) const
; 2160 : 		{	// find leftmost node greater than _Keyval
; 2161 : 		_Nodeptr _Pnode = _Root();
; 2162 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2163 : 
; 2164 : 		while (!this->_Isnil(_Pnode))
; 2165 : 			if (_Compare(_Keyval, this->_Key(_Pnode)))
; 2166 : 				{	// _Pnode greater than _Keyval, remember it
; 2167 : 				_Wherenode = _Pnode;
; 2168 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2169 : 				}
; 2170 : 			else
; 2171 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2172 : 
; 2173 : 		return (_Wherenode);	// return best remembered candidate
; 2174 : 		}
; 2175 : 
; 2176 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2177 : 	void _Orphan_ptr(_Nodeptr _Ptr)
; 2178 : 		{	// orphan iterators with specified node pointers
; 2179 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2180 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
; 2181 : 		if (_Pnext != 0)
; 2182 : 			while (*_Pnext != 0)
; 2183 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 2184 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2185 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2186 : 				else
; 2187 : 					{	// orphan the iterator
; 2188 : 					(*_Pnext)->_Clrcont();
; 2189 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2190 : 					}
; 2191 : 		}
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2193 : 
; 2194 : 	void _Tidy()
; 2195 : 		{	// free all storage
; 2196 : 		erase(begin(), end());

  00028	50		 push	 eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();
; 718  : 		}
; 719  : 
; 720  : 	~_Tree_comp_alloc() _NOEXCEPT
; 721  : 		{	// destroy head node
; 722  : 		_Freeheadnode(_Myhead());
; 723  : 		}
; 724  : 
; 725  : 	void _Copy_alloc(const _Alty& _Al)
; 726  : 		{	// replace old allocator
; 727  : 		_Pocca(_Getal(), _Al);
; 728  : 		}
; 729  : 
; 730  : 	void _Move_alloc(_Alty& _Al)
; 731  : 		{	// replace old allocator
; 732  : 		_Pocma(_Getal(), _Al);
; 733  : 		}
; 734  : 
; 735  : 	void _Swap_alloc(_Myt& _Right)
; 736  : 		{	// swap allocators
; 737  : 		_Pocs(_Getal(), _Right._Getal());
; 738  : 		}
; 739  : 
; 740  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 741  : 	void _Construct()
; 742  : 		{	// construct head node, proxy
; 743  : 		_Myhead() = _Buyheadnode();
; 744  : 		_TRY_BEGIN
; 745  : 		_Alloc_proxy();
; 746  : 		_CATCH_ALL
; 747  : 		_Freeheadnode(_Myhead());
; 748  : 		_RERAISE;
; 749  : 		_CATCH_END
; 750  : 		}
; 751  : 
; 752  : 	~_Tree_comp_alloc() _NOEXCEPT
; 753  : 		{	// destroy head node, proxy
; 754  : 		_Freeheadnode(_Myhead());
; 755  : 		_Free_proxy();
; 756  : 		}
; 757  : 
; 758  : 	void _Copy_alloc(const _Alty& _Al)
; 759  : 		{	// replace old allocator
; 760  : 		_Free_proxy();
; 761  : 		_Pocca(_Getal(), _Al);
; 762  : 		_Alloc_proxy();
; 763  : 		}
; 764  : 
; 765  : 	void _Move_alloc(_Alty& _Al)
; 766  : 		{	// replace old allocator
; 767  : 		_Free_proxy();
; 768  : 		_Pocma(_Getal(), _Al);
; 769  : 		_Alloc_proxy();
; 770  : 		}
; 771  : 
; 772  : 	void _Swap_alloc(_Myt& _Right)
; 773  : 		{	// swap allocators
; 774  : 		_Pocs(_Getal(), _Right._Getal());
; 775  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 776  : 		}
; 777  : 
; 778  : 	void _Alloc_proxy()
; 779  : 		{	// construct proxy
; 780  : 		typename _Alty::template rebind<_Container_proxy>::other
; 781  : 			_Alproxy(_Getal());
; 782  : 		_Myproxy() = _Alproxy.allocate(1);
; 783  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 784  : 		_Myproxy()->_Mycont = &_Get_data();
; 785  : 		}
; 786  : 
; 787  : 	void _Free_proxy()
; 788  : 		{	// destroy proxy
; 789  : 		typename _Alty::template rebind<_Container_proxy>::other
; 790  : 			_Alproxy(_Getal());
; 791  : 		_Orphan_all();
; 792  : 		_Alproxy.destroy(_Myproxy());
; 793  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 794  : 		_Myproxy() = 0;
; 795  : 		}
; 796  : 
; 797  : 	_Iterator_base12 **_Getpfirst() const
; 798  : 		{	// get address of iterator chain
; 799  : 		return (_Get_data()._Getpfirst());
; 800  : 		}
; 801  : 
; 802  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 803  : 		{	// return reference to _Myproxy
; 804  : 		return (_Get_data()._Myproxy);
; 805  : 		}
; 806  : 
; 807  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 808  : 		{	// return const reference to _Myproxy
; 809  : 		return (_Get_data()._Myproxy);
; 810  : 		}
; 811  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 812  : 
; 813  : 	void _Orphan_all()
; 814  : 		{	// orphan all iterators
; 815  : 		_Get_data()._Orphan_all();
; 816  : 		}
; 817  : 
; 818  : 	void _Swap_all(_Myt& _Right)
; 819  : 		{	// swap all iterators
; 820  : 		_Get_data()._Swap_all(_Right._Get_data());
; 821  : 		}
; 822  : 
; 823  : 	_Nodeptr _Buyheadnode()
; 824  : 		{	// get head node using current allocator
; 825  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 826  : 
; 827  : 		_TRY_BEGIN
; 828  : 		_Getal().construct(
; 829  : 			_STD addressof(_Left(_Pnode)), _Pnode);
; 830  : 		_Getal().construct(
; 831  : 			_STD addressof(_Parent(_Pnode)), _Pnode);
; 832  : 		_Getal().construct(
; 833  : 			_STD addressof(_Right(_Pnode)), _Pnode);
; 834  : 		_CATCH_ALL
; 835  : 		_Getal().deallocate(_Pnode, 1);
; 836  : 		_RERAISE;
; 837  : 		_CATCH_END
; 838  : 
; 839  : 		_Color(_Pnode) = _Black;
; 840  : 		_Isnil(_Pnode) = true;
; 841  : 		return (_Pnode);
; 842  : 		}
; 843  : 
; 844  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 845  : 		{	// free head node using current allocator
; 846  : 		_Getal().destroy(
; 847  : 			_STD addressof(_Left(_Pnode)));
; 848  : 		_Getal().destroy(
; 849  : 			_STD addressof(_Parent(_Pnode)));
; 850  : 		_Getal().destroy(
; 851  : 			_STD addressof(_Right(_Pnode)));
; 852  : 		_Getal().deallocate(_Pnode, 1);
; 853  : 		}
; 854  : 
; 855  : 	_Nodeptr _Buynode0()
; 856  : 		{	// allocate a non-value node
; 857  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		_Getal().construct(
; 861  : 			_STD addressof(_Left(_Pnode)), _Myhead());
; 862  : 		_Getal().construct(
; 863  : 			_STD addressof(_Parent(_Pnode)), _Myhead());
; 864  : 		_Getal().construct(
; 865  : 			_STD addressof(_Right(_Pnode)), _Myhead());
; 866  : 		_CATCH_ALL
; 867  : 		_Getal().deallocate(_Pnode, 1);
; 868  : 		_RERAISE;
; 869  : 		_CATCH_END
; 870  : 
; 871  : 		return (_Pnode);
; 872  : 		}
; 873  : 
; 874  : 	void _Freenode0(_Nodeptr _Pnode)
; 875  : 		{	// free non-value node using current allocator
; 876  : 		_Getal().destroy(
; 877  : 			_STD addressof(_Left(_Pnode)));
; 878  : 		_Getal().destroy(
; 879  : 			_STD addressof(_Parent(_Pnode)));
; 880  : 		_Getal().destroy(
; 881  : 			_STD addressof(_Right(_Pnode)));
; 882  : 		_Getal().deallocate(_Pnode, 1);
; 883  : 		}
; 884  : 
; 885  : 	template<class... _Valty>
; 886  : 		_Nodeptr _Buynode(_Valty&&... _Val)
; 887  : 		{	// allocate a node with defaults and set links and value
; 888  : 		_Nodeptr _Pnode = _Buynode0();
; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;
; 891  : 		this->_Isnil(_Pnode) = false;
; 892  : 
; 893  : 		_TRY_BEGIN
; 894  : 		this->_Getal().construct(
; 895  : 			_STD addressof(_Myval(_Pnode)),
; 896  : 				_STD forward<_Valty>(_Val)...);
; 897  : 		_CATCH_ALL
; 898  : 		_Freenode0(_Pnode);
; 899  : 		_RERAISE;
; 900  : 		_CATCH_END
; 901  : 
; 902  : 		return (_Pnode);
; 903  : 		}
; 904  : 
; 905  : 
; 906  : 	key_compare& _Getcomp() _NOEXCEPT
; 907  : 		{	// return reference to ordering predicate
; 908  : 		return (_Mypair._Get_first());
; 909  : 		}
; 910  : 
; 911  : 	const key_compare& _Getcomp() const _NOEXCEPT
; 912  : 		{	// return const reference to ordering predicate
; 913  : 		return (_Mypair._Get_first());
; 914  : 		}
; 915  : 
; 916  : 	_Alty& _Getal() _NOEXCEPT
; 917  : 		{	// return reference to allocator
; 918  : 		return (_Mypair._Get_second()._Get_first());
; 919  : 		}
; 920  : 
; 921  : 	const _Alty& _Getal() const _NOEXCEPT
; 922  : 		{	// return const reference to allocator
; 923  : 		return (_Mypair._Get_second()._Get_first());
; 924  : 		}
; 925  : 
; 926  : 	_Tree_val<_Val_types>& _Get_data() _NOEXCEPT
; 927  : 		{	// return reference to _Tree_val
; 928  : 		return (_Mypair._Get_second()._Get_second());
; 929  : 		}
; 930  : 
; 931  : 	const _Tree_val<_Val_types>& _Get_data() const _NOEXCEPT
; 932  : 		{	// return const reference to _Tree_val
; 933  : 		return (_Mypair._Get_second()._Get_second());
; 934  : 		}
; 935  : 
; 936  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 937  : 		{	// return reference to _Myhead
; 938  : 		return (_Get_data()._Myhead);
; 939  : 		}
; 940  : 
; 941  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 942  : 		{	// return const reference to _Myhead
; 943  : 		return (_Get_data()._Myhead);
; 944  : 		}
; 945  : 
; 946  : 	size_type& _Mysize() _NOEXCEPT
; 947  : 		{	// return reference to _Mysize
; 948  : 		return (_Get_data()._Mysize);
; 949  : 		}
; 950  : 
; 951  : 	const size_type& _Mysize() const _NOEXCEPT
; 952  : 		{	// return const reference to _Mysize
; 953  : 		return (_Get_data()._Mysize);
; 954  : 		}
; 955  : 
; 956  : private:
; 957  : 	_Compressed_pair<key_compare,
; 958  : 		_Compressed_pair<_Alty, _Tree_val<_Val_types> > > _Mypair;
; 959  : 	};
; 960  : 
; 961  : 		// TEMPLATE CLASS _Tree
; 962  : template<class _Traits>
; 963  : 	class _Tree
; 964  : 		: public _Tree_comp_alloc<_Traits>
; 965  : 	{	// ordered red-black tree for map/multimap/set/multiset
; 966  : public:
; 967  : 	typedef _Tree<_Traits> _Myt;
; 968  : 	typedef _Tree_comp_alloc<_Traits> _Mybase;
; 969  : 
; 970  : 	typedef typename _Traits::key_type key_type;
; 971  : 	typedef typename _Traits::value_compare value_compare;
; 972  : 	enum
; 973  : 		{	// get multi parameter
; 974  : 		_Multi = _Traits::_Multi};
; 975  : 
; 976  : 	typedef typename _Mybase::_Node _Node;
; 977  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 978  : 	typedef typename _Mybase::_Alty _Alty;
; 979  : 
; 980  : 	typedef typename _Mybase::key_compare key_compare;
; 981  : 	typedef typename _Mybase::allocator_type allocator_type;
; 982  : 
; 983  : 	typedef typename _Mybase::value_type value_type;
; 984  : 	typedef typename _Mybase::size_type size_type;
; 985  : 	typedef typename _Mybase::difference_type difference_type;
; 986  : 	typedef typename _Mybase::pointer pointer;
; 987  : 	typedef typename _Mybase::const_pointer const_pointer;
; 988  : 	typedef typename _Mybase::reference reference;
; 989  : 	typedef typename _Mybase::const_reference const_reference;
; 990  : 
; 991  : 	typedef typename _Mybase::const_iterator const_iterator;
; 992  : 	typedef typename _If<is_same<key_type, value_type>::value,
; 993  : 		typename _Mybase::const_iterator,
; 994  : 		typename _Mybase::iterator>::type iterator;
; 995  : 
; 996  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 997  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 998  : 
; 999  : 	typedef pair<iterator, bool> _Pairib;
; 1000 : 	typedef pair<iterator, iterator> _Pairii;
; 1001 : 	typedef pair<const_iterator, const_iterator> _Paircc;
; 1002 : 
; 1003 : 	struct _Copy_tag
; 1004 : 		{	// signals copying
; 1005 : 		};
; 1006 : 	struct _Move_tag
; 1007 : 		{	// signals moving
; 1008 : 		};
; 1009 : 
; 1010 : 	_Tree(const key_compare& _Parg,
; 1011 : 		const allocator_type& _Al)
; 1012 : 		: _Mybase(_Parg, _Al)
; 1013 : 		{	// construct empty tree
; 1014 : 		}
; 1015 : 
; 1016 : 	_Tree(const _Myt& _Right, const allocator_type& _Al)
; 1017 : 		: _Mybase(_Right.key_comp(), _Al)
; 1018 : 		{	// construct tree by copying _Right, allocator
; 1019 : 		_TRY_BEGIN
; 1020 : 		_Copy(_Right, _Copy_tag());
; 1021 : 		_CATCH_ALL
; 1022 : 		_Tidy();
; 1023 : 		_RERAISE;
; 1024 : 		_CATCH_END
; 1025 : 		}
; 1026 : 
; 1027 : 	_Tree(_Myt&& _Right)
; 1028 : 		: _Mybase(_Right.key_comp(), _STD move(_Right._Getal()))
; 1029 : 		{	// construct tree by moving _Right
; 1030 : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1031 : 		}
; 1032 : 
; 1033 : 	_Tree(_Myt&& _Right, const allocator_type& _Al)
; 1034 : 		: _Mybase(_Right.key_comp(), _Al)
; 1035 : 		{	// construct tree by moving _Right, allocator
; 1036 : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 1037 : 		}
; 1038 : 
; 1039 : 	_Myt& operator=(_Myt&& _Right)
; 1040 : 		{	// assign by moving _Right
; 1041 : 		if (this != &_Right)
; 1042 : 			{	// different, move it
; 1043 : 			clear();
; 1044 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1045 : 				&& this->_Getal() != _Right._Getal())
; 1046 : 				this->_Move_alloc(_Right._Getal());
; 1047 : 
; 1048 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1049 : 			}
; 1050 : 		return (*this);
; 1051 : 		}
; 1052 : 
; 1053 : 	void _Assign_rv(_Myt&& _Right, true_type)
; 1054 : 		{	// move from _Right, stealing its contents
; 1055 : 		this->_Swap_all(_Right);
; 1056 : 		_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1057 : 		_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1058 : 		_STD swap(this->_Mysize(), _Right._Mysize());
; 1059 : 		}
; 1060 : 
; 1061 : 	void _Assign_rv(_Myt&& _Right, false_type)
; 1062 : 		{	// move from _Right, possibly moving its contents
; 1063 : 		if (get_allocator() == _Right.get_allocator())
; 1064 : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1065 : 		else
; 1066 : 			_Copy(_Right, _Move_tag());
; 1067 : 		}
; 1068 : 
; 1069 : 	void _Assign_rv(_Myt&& _Right)
; 1070 : 		{	// assign by moving _Right
; 1071 : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 1072 : 			typename _Alty::propagate_on_container_move_assignment());
; 1073 : 		}
; 1074 : 
; 1075 : 
; 1076 : 	_Pairib insert(value_type&& _Val)
; 1077 : 		{	// try to insert node with value _Val, favoring right side
; 1078 : 		return (_Insert_nohint(false,
; 1079 : 			_STD forward<value_type>(_Val), _Nil()));
; 1080 : 		}
; 1081 : 
; 1082 : 	iterator insert(const_iterator _Where, value_type&& _Val)
; 1083 : 		{	// try to insert node with value _Val using _Where as a hint
; 1084 : 		return (_Insert_hint(_Where,
; 1085 : 			_STD forward<value_type>(_Val), _Nil()));
; 1086 : 		}
; 1087 : 
; 1088 : 	template<class _Valty>
; 1089 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1090 : 			_Pairib>::type
; 1091 : 		insert(_Valty&& _Val)
; 1092 : 		{	// try to insert node with value _Val, favoring right side
; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1094 : 		return (_Insert_nohint(false,
; 1095 : 			this->_Myval(_Newnode), _Newnode));
; 1096 : 		}
; 1097 : 
; 1098 : 	template<class _Valty>
; 1099 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1100 : 			iterator>::type
; 1101 : 		insert(const_iterator _Where, _Valty&& _Val)
; 1102 : 		{	// try to insert node with value _Val using _Where as a hint
; 1103 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1104 : 		return (_Insert_hint(_Where,
; 1105 : 			this->_Myval(_Newnode), _Newnode));
; 1106 : 		}
; 1107 : 
; 1108 : 	template<class... _Valty>
; 1109 : 		_Pairib emplace(_Valty&&... _Val)
; 1110 : 		{	// try to insert value_type(_Val...), favoring right side
; 1111 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1112 : 		return (_Insert_nohint(false,
; 1113 : 			this->_Myval(_Newnode), _Newnode));
; 1114 : 		}
; 1115 : 
; 1116 : 	template<class... _Valty>
; 1117 : 		iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
; 1118 : 		{	// insert value_type(_Val...) at _Where
; 1119 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1120 : 		return (_Insert_hint(_Where,
; 1121 : 			this->_Myval(_Newnode), _Newnode));
; 1122 : 		}
; 1123 : 
; 1124 : 
; 1125 : 	~_Tree() _NOEXCEPT
; 1126 : 		{	// destroy tree

  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1127 : 		_Tidy();
; 1128 : 		}
; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2116 : 
; 2117 : 		if (_Wherenode == _Root())
; 2118 : 			_Root() = _Pnode;
; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;
; 2125 : 		this->_Parent(_Wherenode) = _Pnode;
; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2146 : 
; 2147 : 		if (_Wherenode == _Root())
; 2148 : 			_Root() = _Pnode;
; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;
; 2155 : 		this->_Parent(_Wherenode) = _Pnode;
; 2156 : 		}
; 2157 : 
; 2158 : 	template<class _Other>
; 2159 : 		_Nodeptr _Ubound(const _Other& _Keyval) const
; 2160 : 		{	// find leftmost node greater than _Keyval
; 2161 : 		_Nodeptr _Pnode = _Root();
; 2162 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2163 : 
; 2164 : 		while (!this->_Isnil(_Pnode))
; 2165 : 			if (_Compare(_Keyval, this->_Key(_Pnode)))
; 2166 : 				{	// _Pnode greater than _Keyval, remember it
; 2167 : 				_Wherenode = _Pnode;
; 2168 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2169 : 				}
; 2170 : 			else
; 2171 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2172 : 
; 2173 : 		return (_Wherenode);	// return best remembered candidate
; 2174 : 		}
; 2175 : 
; 2176 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2177 : 	void _Orphan_ptr(_Nodeptr _Ptr)
; 2178 : 		{	// orphan iterators with specified node pointers
; 2179 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2180 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
; 2181 : 		if (_Pnext != 0)
; 2182 : 			while (*_Pnext != 0)
; 2183 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 2184 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2185 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2186 : 				else
; 2187 : 					{	// orphan the iterator
; 2188 : 					(*_Pnext)->_Clrcont();
; 2189 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2190 : 					}
; 2191 : 		}
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2193 : 
; 2194 : 	void _Tidy()
; 2195 : 		{	// free all storage
; 2196 : 		erase(begin(), end());

  00030	ff 30		 push	 DWORD PTR [eax]
  00032	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  0003b	ff 36		 push	 DWORD PTR [esi]
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00042	83 c4 04	 add	 esp, 4
  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	5e		 pop	 esi
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >, COMDAT
; _this$ = ecx

; 100  : 		{	// construct empty map from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  00017	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buyheadnode
  0001c	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 101  : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@@std@@QAE@XZ ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Key, COMDAT
; _this$ = ecx

; 2205 : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2207 : 		}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Key
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Kfn, COMDAT
; _this$ = ecx

; 2200 : 		{	// get key from value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2201 : 		return (_Traits::_Kfn(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 2202 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Kfn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 2195 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 43   : 		: _Ptr(_Pnode)

  00004	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2196 : 		erase(begin(), end());

  00006	50		 push	 eax
  00007	ff 30		 push	 DWORD PTR [eax]
  00009	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::erase

; 2197 : 		}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 2139 : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2146 : 
; 2147 : 		if (_Wherenode == _Root())

  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 2148 : 			_Root() = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2155 : 		this->_Parent(_Wherenode) = _Pnode;

  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi

; 2156 : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2155 : 		this->_Parent(_Wherenode) = _Pnode;

  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi

; 2156 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2155 : 		this->_Parent(_Wherenode) = _Pnode;

  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi

; 2156 : 		}

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Root, COMDAT
; _this$ = ecx

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 04	 add	 eax, 4

; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}

  00005	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Root
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}

  00005	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Rmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 2109 : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi

; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]

; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2116 : 
; 2117 : 		if (_Wherenode == _Root())

  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 2118 : 			_Root() = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0002a	89 16		 mov	 DWORD PTR [esi], edx

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi

; 2126 : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0003d	89 16		 mov	 DWORD PTR [esi], edx

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi

; 2126 : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0004a	89 16		 mov	 DWORD PTR [esi], edx

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi

; 2126 : 		}

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 2105 : 		return (this->_Left(this->_Myhead()));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2106 : 		}

  00002	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Lmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Compare, COMDAT
; _this$ = ecx

; 2074 : 		{	// compare key_type to key_type, with debug checks

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1750 : 		return (this->_Mysize());

  00022	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]

; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right

  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  0002c	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1750 : 		return (this->_Mysize());

  00030	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  00033	72 02		 jb	 SHORT $LN39@Compare
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00035	8b 00		 mov	 eax, DWORD PTR [eax]
$LN39@Compare:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));

  00037	51		 push	 ecx
  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0003b	50		 push	 eax
  0003c	ff 71 10	 push	 DWORD PTR [ecx+16]
  0003f	6a 00		 push	 0
  00041	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare

; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());
; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)
; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)
; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow
; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)
; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do
; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())
; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;
; 2242 : 		_Eos(_Newsize);
; 2243 : 		}
; 2244 : 
; 2245 : 	[[noreturn]] void _Xlen() const
; 2246 : 		{	// report a length_error
; 2247 : 		_Xlength_error("string too long");
; 2248 : 		}
; 2249 : 
; 2250 : 	[[noreturn]] void _Xran() const
; 2251 : 		{	// report an out_of_range error
; 2252 : 		_Xout_of_range("invalid string position");
; 2253 : 		}
; 2254 : 	};
; 2255 : 
; 2256 : 		// STATIC npos OBJECT
; 2257 : template<class _Elem,
; 2258 : 	class _Traits,
; 2259 : 	class _Alloc>
; 2260 : 	_PGLOBAL const typename basic_string<_Elem, _Traits, _Alloc>::size_type
; 2261 : 		basic_string<_Elem, _Traits, _Alloc>::npos =
; 2262 : 			(typename basic_string<_Elem, _Traits, _Alloc>::size_type)(-1);
; 2263 : 
; 2264 : 		// basic_string TEMPLATE OPERATORS
; 2265 : 
; 2266 : template<class _Elem,
; 2267 : 	class _Traits,
; 2268 : 	class _Alloc> inline
; 2269 : 	void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2270 : 		basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2271 : 			_NOEXCEPT_OP(_NOEXCEPT_OP(_Left.swap(_Right)))
; 2272 : 	{	// swap _Left and _Right strings
; 2273 : 	_Left.swap(_Right);
; 2274 : 	}
; 2275 : 
; 2276 : template<class _Elem,
; 2277 : 	class _Traits,
; 2278 : 	class _Alloc> inline
; 2279 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2280 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2281 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2282 : 	{	// return string + string
; 2283 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2284 : 	_Ans.reserve(_Left.size() + _Right.size());
; 2285 : 	_Ans += _Left;
; 2286 : 	_Ans += _Right;
; 2287 : 	return (_Ans);
; 2288 : 	}
; 2289 : 
; 2290 : template<class _Elem,
; 2291 : 	class _Traits,
; 2292 : 	class _Alloc> inline
; 2293 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2294 : 		const _Elem *_Left,
; 2295 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2296 : 	{	// return NTCS + string
; 2297 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2298 : 	_Ans.reserve(_Traits::length(_Left) + _Right.size());
; 2299 : 	_Ans += _Left;
; 2300 : 	_Ans += _Right;
; 2301 : 	return (_Ans);
; 2302 : 	}
; 2303 : 
; 2304 : template<class _Elem,
; 2305 : 	class _Traits,
; 2306 : 	class _Alloc> inline
; 2307 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2308 : 		const _Elem _Left,
; 2309 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2310 : 	{	// return character + string
; 2311 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2312 : 	_Ans.reserve(1 + _Right.size());
; 2313 : 	_Ans += _Left;
; 2314 : 	_Ans += _Right;
; 2315 : 	return (_Ans);
; 2316 : 	}
; 2317 : 
; 2318 : template<class _Elem,
; 2319 : 	class _Traits,
; 2320 : 	class _Alloc> inline
; 2321 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2322 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2323 : 		const _Elem *_Right)
; 2324 : 	{	// return string + NTCS
; 2325 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2326 : 	_Ans.reserve(_Left.size() + _Traits::length(_Right));
; 2327 : 	_Ans += _Left;
; 2328 : 	_Ans += _Right;
; 2329 : 	return (_Ans);
; 2330 : 	}
; 2331 : 
; 2332 : template<class _Elem,
; 2333 : 	class _Traits,
; 2334 : 	class _Alloc> inline
; 2335 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2336 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2337 : 		const _Elem _Right)
; 2338 : 	{	// return string + character
; 2339 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2340 : 	_Ans.reserve(_Left.size() + 1);
; 2341 : 	_Ans += _Left;
; 2342 : 	_Ans += _Right;
; 2343 : 	return (_Ans);
; 2344 : 	}
; 2345 : 
; 2346 : template<class _Elem,
; 2347 : 	class _Traits,
; 2348 : 	class _Alloc> inline
; 2349 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2350 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2351 : 		basic_string<_Elem, _Traits, _Alloc>&& _Right)
; 2352 : 	{	// return string + string
; 2353 : 	return (_STD move(_Right.insert(0, _Left)));
; 2354 : 	}
; 2355 : 
; 2356 : template<class _Elem,
; 2357 : 	class _Traits,
; 2358 : 	class _Alloc> inline
; 2359 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2360 : 		basic_string<_Elem, _Traits, _Alloc>&& _Left,
; 2361 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2362 : 	{	// return string + string
; 2363 : 	return (_STD move(_Left.append(_Right)));
; 2364 : 	}
; 2365 : 
; 2366 : template<class _Elem,
; 2367 : 	class _Traits,
; 2368 : 	class _Alloc> inline
; 2369 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2370 : 		basic_string<_Elem, _Traits, _Alloc>&& _Left,
; 2371 : 		basic_string<_Elem, _Traits, _Alloc>&& _Right)
; 2372 : 	{	// return string + string
; 2373 : 	if (_Right.size() <= _Left.capacity() - _Left.size()
; 2374 : 		|| _Right.capacity() - _Right.size() < _Left.size())
; 2375 : 		return (_STD move(_Left.append(_Right)));
; 2376 : 	else
; 2377 : 		return (_STD move(_Right.insert(0, _Left)));
; 2378 : 	}
; 2379 : 
; 2380 : template<class _Elem,
; 2381 : 	class _Traits,
; 2382 : 	class _Alloc> inline
; 2383 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2384 : 		const _Elem *_Left,
; 2385 : 		basic_string<_Elem, _Traits, _Alloc>&& _Right)
; 2386 : 	{	// return NTCS + string
; 2387 : 	return (_STD move(_Right.insert(0, _Left)));
; 2388 : 	}
; 2389 : 
; 2390 : template<class _Elem,
; 2391 : 	class _Traits,
; 2392 : 	class _Alloc> inline
; 2393 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2394 : 		const _Elem _Left,
; 2395 : 		basic_string<_Elem, _Traits, _Alloc>&& _Right)
; 2396 : 	{	// return character + string
; 2397 : 	typedef typename basic_string<_Elem, _Traits, _Alloc>::size_type
; 2398 : 		size_type;
; 2399 : 	return (_STD move(_Right.insert((size_type)0, (size_type)1, _Left)));
; 2400 : 	}
; 2401 : 
; 2402 : template<class _Elem,
; 2403 : 	class _Traits,
; 2404 : 	class _Alloc> inline
; 2405 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2406 : 		basic_string<_Elem, _Traits, _Alloc>&& _Left,
; 2407 : 		const _Elem *_Right)
; 2408 : 	{	// return string + NTCS
; 2409 : 	return (_STD move(_Left.append(_Right)));
; 2410 : 	}
; 2411 : 
; 2412 : template<class _Elem,
; 2413 : 	class _Traits,
; 2414 : 	class _Alloc> inline
; 2415 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2416 : 		basic_string<_Elem, _Traits, _Alloc>&& _Left,
; 2417 : 		const _Elem _Right)
; 2418 : 	{	// return string + character
; 2419 : 	return (_STD move(_Left.append(1, _Right)));
; 2420 : 	}
; 2421 : 
; 2422 : template<class _Elem,
; 2423 : 	class _Traits,
; 2424 : 	class _Alloc> inline
; 2425 : 	bool operator==(
; 2426 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2427 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2428 : 	{	// test for string equality
; 2429 : 	return (_Left.compare(_Right) == 0);
; 2430 : 	}
; 2431 : 
; 2432 : template<class _Elem,
; 2433 : 	class _Traits,
; 2434 : 	class _Alloc> inline
; 2435 : 	bool operator==(
; 2436 : 		const _Elem * _Left,
; 2437 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2438 : 	{	// test for NTCS vs. string equality
; 2439 : 	return (_Right.compare(_Left) == 0);
; 2440 : 	}
; 2441 : 
; 2442 : template<class _Elem,
; 2443 : 	class _Traits,
; 2444 : 	class _Alloc> inline
; 2445 : 	bool operator==(
; 2446 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2447 : 		const _Elem *_Right)
; 2448 : 	{	// test for string vs. NTCS equality
; 2449 : 	return (_Left.compare(_Right) == 0);
; 2450 : 	}
; 2451 : 
; 2452 : template<class _Elem,
; 2453 : 	class _Traits,
; 2454 : 	class _Alloc> inline
; 2455 : 	bool operator!=(
; 2456 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2457 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2458 : 	{	// test for string inequality
; 2459 : 	return (!(_Left == _Right));
; 2460 : 	}
; 2461 : 
; 2462 : template<class _Elem,
; 2463 : 	class _Traits,
; 2464 : 	class _Alloc> inline
; 2465 : 	bool operator!=(
; 2466 : 		const _Elem *_Left,
; 2467 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2468 : 	{	// test for NTCS vs. string inequality
; 2469 : 	return (!(_Left == _Right));
; 2470 : 	}
; 2471 : 
; 2472 : template<class _Elem,
; 2473 : 	class _Traits,
; 2474 : 	class _Alloc> inline
; 2475 : 	bool operator!=(
; 2476 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2477 : 		const _Elem *_Right)
; 2478 : 	{	// test for string vs. NTCS inequality
; 2479 : 	return (!(_Left == _Right));
; 2480 : 	}
; 2481 : 
; 2482 : template<class _Elem,
; 2483 : 	class _Traits,
; 2484 : 	class _Alloc> inline
; 2485 : 	bool operator<(
; 2486 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2487 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2488 : 	{	// test if string < string
; 2489 : 	return (_Left.compare(_Right) < 0);

  00046	33 c9		 xor	 ecx, ecx
  00048	85 c0		 test	 eax, eax
  0004a	0f 98 c0	 sets	 al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2076 : 		}

  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$2:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Compare
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 2060 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	57		 push	 edi
  0000b	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000e	8b fb		 mov	 edi, ebx

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00010	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  00014	0f 85 7f 00 00
	00		 jne	 $LN226@Erase
  0001a	56		 push	 esi
  0001b	0f 1f 44 00 00	 npad	 5
$LL4@Erase:

; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));

  00020	ff 77 08	 push	 DWORD PTR [edi+8]
  00023	8b c8		 mov	 ecx, eax
  00025	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  0002a	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 602  : 		return ((reference)_Pnode->_Myval);

  0002d	8d 73 10	 lea	 esi, DWORD PTR [ebx+16]

; 2065 : 			_Pnode = this->_Left(_Pnode);

  00030	8b 3f		 mov	 edi, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00032	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00035	72 32		 jb	 SHORT $LN137@Erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00037	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  00039	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  0003a	83 f9 ff	 cmp	 ecx, -1
  0003d	77 62		 ja	 SHORT $LN229@Erase

; 101  : 	const size_t _User_size = _Count * _Sz;
; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0003f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00045	72 19		 jb	 SHORT $LN132@Erase

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00047	a8 1f		 test	 al, 31			; 0000001fH
  00049	75 56		 jne	 SHORT $LN229@Erase

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0004b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004e	3b c8		 cmp	 ecx, eax
  00050	73 4f		 jae	 SHORT $LN229@Erase

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00052	2b c1		 sub	 eax, ecx
  00054	83 f8 04	 cmp	 eax, 4
  00057	72 48		 jb	 SHORT $LN229@Erase

; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00059	83 f8 23	 cmp	 eax, 35			; 00000023H
  0005c	77 43		 ja	 SHORT $LN229@Erase

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0005e	8b c1		 mov	 eax, ecx
$LN132@Erase:

; 138  : 	::operator delete(_Ptr);

  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00066	83 c4 04	 add	 esp, 4
$LN137@Erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00069	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 506  : 			? _STD addressof(*this->_Bx._Ptr)
; 507  : 			: this->_Bx._Buf);
; 508  : 		}
; 509  : 
; 510  : 	const value_type *_Myptr() const
; 511  : 		{	// determine current pointer to buffer for nonmutable string
; 512  : 		return (this->_BUF_SIZE <= this->_Myres
; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}
; 516  : 
; 517  : 	union _Bxty
; 518  : 		{	// storage for small buffer or pointer to larger one
; 519  : 		value_type _Buf[_BUF_SIZE];
; 520  : 		pointer _Ptr;
; 521  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 522  : 		} _Bx;
; 523  : 
; 524  : 	size_type _Mysize;	// current length of string
; 525  : 	size_type _Myres;	// current storage reserved for string
; 526  : 	};
; 527  : 
; 528  : 		// TEMPLATE CLASS _String_alloc
; 529  : template<class _Alloc_types>
; 530  : 	class _String_alloc
; 531  : 	{	// base class for basic_string to hold allocator
; 532  : public:
; 533  : 	typedef _String_alloc<_Alloc_types> _Myt;
; 534  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 535  : 	typedef typename _Alloc_types::_Alty _Alty;
; 536  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 537  : 
; 538  : 	typedef typename _Val_types::value_type value_type;
; 539  : 	typedef typename _Val_types::size_type size_type;
; 540  : 	typedef typename _Val_types::difference_type difference_type;
; 541  : 	typedef typename _Val_types::pointer pointer;
; 542  : 	typedef typename _Val_types::const_pointer const_pointer;
; 543  : 	typedef typename _Val_types::reference reference;
; 544  : 	typedef typename _Val_types::const_reference const_reference;
; 545  : 
; 546  : 	typedef _String_iterator<_String_val<_Val_types> > iterator;
; 547  : 	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;
; 548  : 
; 549  : 	enum
; 550  : 		{	// length of internal buffer, [1, 16]
; 551  : 		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
; 552  : 		};
; 553  : 
; 554  : 	enum
; 555  : 		{	// roundup mask for allocated buffers, [0, 15]
; 556  : 		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
; 557  : 		};
; 558  : 
; 559  : 	value_type *_Myptr()
; 560  : 		{	// determine current pointer to buffer for mutable string
; 561  : 		return (_Get_data()._Myptr());
; 562  : 		}
; 563  : 
; 564  : 	const value_type *_Myptr() const
; 565  : 		{	// determine current pointer to buffer for nonmutable string
; 566  : 		return (_Get_data()._Myptr());
; 567  : 		}
; 568  : 
; 569  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 570  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 571  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 572  : 		{	// construct allocator from _Al
; 573  : 		}
; 574  : 
; 575  : 	_String_alloc(_Alloc&& _Al)
; 576  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 577  : 		{	// construct allocator from _Al
; 578  : 		}
; 579  : 
; 580  : 	void _Copy_alloc(const _Alty& _Al)
; 581  : 		{	// replace old allocator
; 582  : 		_Pocca(_Getal(), _Al);
; 583  : 		}
; 584  : 
; 585  : 	void _Move_alloc(_Alty& _Al)
; 586  : 		{	// replace old allocator
; 587  : 		_Pocma(_Getal(), _Al);
; 588  : 		}
; 589  : 
; 590  : 	void _Swap_alloc(_Myt& _Right)
; 591  : 		{	// swap allocators
; 592  : 		_Pocs(_Getal(), _Right._Getal());
; 593  : 		}
; 594  : 
; 595  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 596  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 597  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 598  : 		{	// construct allocator from _Al
; 599  : 		_Alloc_proxy();
; 600  : 		}
; 601  : 
; 602  : 	_String_alloc(_Alloc&& _Al)
; 603  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 604  : 		{	// construct allocator from _Al
; 605  : 		_Alloc_proxy();
; 606  : 		}
; 607  : 
; 608  : 	~_String_alloc() _NOEXCEPT
; 609  : 		{	// destroy the object
; 610  : 		_Free_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Copy_alloc(const _Alty& _Al)
; 614  : 		{	// replace old allocator
; 615  : 		_Free_proxy();
; 616  : 		_Pocca(_Getal(), _Al);
; 617  : 		_Alloc_proxy();
; 618  : 		}
; 619  : 
; 620  : 	void _Move_alloc(_Alty& _Al)
; 621  : 		{	// replace old allocator
; 622  : 		_Free_proxy();
; 623  : 		_Pocma(_Getal(), _Al);
; 624  : 		_Alloc_proxy();
; 625  : 		}
; 626  : 
; 627  : 	void _Swap_alloc(_Myt& _Right)
; 628  : 		{	// swap allocators
; 629  : 		_Pocs(_Getal(), _Right._Getal());
; 630  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 631  : 		}
; 632  : 
; 633  : 	void _Alloc_proxy()
; 634  : 		{	// construct proxy
; 635  : 		typename _Alty::template rebind<_Container_proxy>::other
; 636  : 			_Alproxy(_Getal());
; 637  : 		_Myproxy() = _Alproxy.allocate(1);
; 638  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 639  : 		_Myproxy()->_Mycont = &_Get_data();
; 640  : 		}
; 641  : 
; 642  : 	void _Free_proxy()
; 643  : 		{	// destroy proxy
; 644  : 		typename _Alty::template rebind<_Container_proxy>::other
; 645  : 			_Alproxy(_Getal());
; 646  : 		_Orphan_all();
; 647  : 		_Alproxy.destroy(_Myproxy());
; 648  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 649  : 		_Myproxy() = 0;
; 650  : 		}
; 651  : 
; 652  : 	_Iterator_base12 **_Getpfirst() const
; 653  : 		{	// get address of iterator chain
; 654  : 		return (_Get_data()._Getpfirst());
; 655  : 		}
; 656  : 
; 657  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 658  : 		{	// return reference to _Myproxy
; 659  : 		return (_Get_data()._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 663  : 		{	// return const reference to _Myproxy
; 664  : 		return (_Get_data()._Myproxy);
; 665  : 		}
; 666  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 667  : 
; 668  : 	void _Orphan_all()
; 669  : 		{	// orphan all iterators
; 670  : 		_Get_data()._Orphan_all();
; 671  : 		}
; 672  : 
; 673  : 	void _Swap_all(_Myt& _Right)
; 674  : 		{	// swap all iterators
; 675  : 		_Get_data()._Swap_all(_Right._Get_data());
; 676  : 		}
; 677  : 
; 678  : 	_Alty& _Getal() _NOEXCEPT
; 679  : 		{	// return reference to allocator
; 680  : 		return (_Mypair._Get_first());
; 681  : 		}
; 682  : 
; 683  : 	const _Alty& _Getal() const _NOEXCEPT
; 684  : 		{	// return const reference to allocator
; 685  : 		return (_Mypair._Get_first());
; 686  : 		}
; 687  : 
; 688  : 	_String_val<_Val_types>& _Get_data() _NOEXCEPT
; 689  : 		{	// return reference to _String_val
; 690  : 		return (_Mypair._Get_second());
; 691  : 		}
; 692  : 
; 693  : 	const _String_val<_Val_types>& _Get_data() const _NOEXCEPT
; 694  : 		{	// return const reference to _String_val
; 695  : 		return (_Mypair._Get_second());
; 696  : 		}
; 697  : 
; 698  : 	typedef typename _String_val<_Val_types>::_Bxty _Bxty;
; 699  : 
; 700  : 	_Bxty& _Bx() _NOEXCEPT
; 701  : 		{	// return reference to _Bx
; 702  : 		return (_Get_data()._Bx);
; 703  : 		}
; 704  : 
; 705  : 	const _Bxty& _Bx() const _NOEXCEPT
; 706  : 		{	// return const reference to _Bx
; 707  : 		return (_Get_data()._Bx);
; 708  : 		}
; 709  : 
; 710  : 	size_type& _Mysize() _NOEXCEPT
; 711  : 		{	// return reference to _Mysize
; 712  : 		return (_Get_data()._Mysize);
; 713  : 		}
; 714  : 
; 715  : 	const size_type& _Mysize() const _NOEXCEPT
; 716  : 		{	// return const reference to _Mysize
; 717  : 		return (_Get_data()._Mysize);
; 718  : 		}
; 719  : 
; 720  : 	size_type& _Myres() _NOEXCEPT
; 721  : 		{	// return reference to _Myres
; 722  : 		return (_Get_data()._Myres);
; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00070	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00077	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0007b	72 02		 jb	 SHORT $LN171@Erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  0007d	8b 36		 mov	 esi, DWORD PTR [esi]
$LN171@Erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  0007f	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00080	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00083	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00088	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  0008b	8b df		 mov	 ebx, edi
  0008d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00091	75 05		 jne	 SHORT $LN227@Erase
  00093	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00096	eb 88		 jmp	 SHORT $LL4@Erase
$LN227@Erase:
  00098	5e		 pop	 esi
$LN226@Erase:
  00099	5f		 pop	 edi
  0009a	5b		 pop	 ebx

; 2071 : 		}

  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 04 00	 ret	 4
$LN229@Erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  000a1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN230@Erase:
$LN228@Erase:
  000a6	cc		 int	 3
?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z
_TEXT	SEGMENT
__Newnode$ = 8						; size = 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Destroy_if_not_nil, COMDAT
; _this$ = ecx

; 1668 : 		{	// node exists, destroy it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 602  : 		return ((reference)_Pnode->_Myval);

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Newnode$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00008	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 602  : 		return ((reference)_Pnode->_Myval);

  0000b	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  0000e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00011	72 0b		 jb	 SHORT $LN41@Destroy_if

; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  00013	40		 inc	 eax
  00014	8b ce		 mov	 ecx, esi
  00016	50		 push	 eax
  00017	ff 36		 push	 DWORD PTR [esi]
  00019	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN41@Destroy_if:

; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  0001e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 506  : 			? _STD addressof(*this->_Bx._Ptr)
; 507  : 			: this->_Bx._Buf);
; 508  : 		}
; 509  : 
; 510  : 	const value_type *_Myptr() const
; 511  : 		{	// determine current pointer to buffer for nonmutable string
; 512  : 		return (this->_BUF_SIZE <= this->_Myres
; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}
; 516  : 
; 517  : 	union _Bxty
; 518  : 		{	// storage for small buffer or pointer to larger one
; 519  : 		value_type _Buf[_BUF_SIZE];
; 520  : 		pointer _Ptr;
; 521  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 522  : 		} _Bx;
; 523  : 
; 524  : 	size_type _Mysize;	// current length of string
; 525  : 	size_type _Myres;	// current storage reserved for string
; 526  : 	};
; 527  : 
; 528  : 		// TEMPLATE CLASS _String_alloc
; 529  : template<class _Alloc_types>
; 530  : 	class _String_alloc
; 531  : 	{	// base class for basic_string to hold allocator
; 532  : public:
; 533  : 	typedef _String_alloc<_Alloc_types> _Myt;
; 534  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 535  : 	typedef typename _Alloc_types::_Alty _Alty;
; 536  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 537  : 
; 538  : 	typedef typename _Val_types::value_type value_type;
; 539  : 	typedef typename _Val_types::size_type size_type;
; 540  : 	typedef typename _Val_types::difference_type difference_type;
; 541  : 	typedef typename _Val_types::pointer pointer;
; 542  : 	typedef typename _Val_types::const_pointer const_pointer;
; 543  : 	typedef typename _Val_types::reference reference;
; 544  : 	typedef typename _Val_types::const_reference const_reference;
; 545  : 
; 546  : 	typedef _String_iterator<_String_val<_Val_types> > iterator;
; 547  : 	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;
; 548  : 
; 549  : 	enum
; 550  : 		{	// length of internal buffer, [1, 16]
; 551  : 		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
; 552  : 		};
; 553  : 
; 554  : 	enum
; 555  : 		{	// roundup mask for allocated buffers, [0, 15]
; 556  : 		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
; 557  : 		};
; 558  : 
; 559  : 	value_type *_Myptr()
; 560  : 		{	// determine current pointer to buffer for mutable string
; 561  : 		return (_Get_data()._Myptr());
; 562  : 		}
; 563  : 
; 564  : 	const value_type *_Myptr() const
; 565  : 		{	// determine current pointer to buffer for nonmutable string
; 566  : 		return (_Get_data()._Myptr());
; 567  : 		}
; 568  : 
; 569  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 570  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 571  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 572  : 		{	// construct allocator from _Al
; 573  : 		}
; 574  : 
; 575  : 	_String_alloc(_Alloc&& _Al)
; 576  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 577  : 		{	// construct allocator from _Al
; 578  : 		}
; 579  : 
; 580  : 	void _Copy_alloc(const _Alty& _Al)
; 581  : 		{	// replace old allocator
; 582  : 		_Pocca(_Getal(), _Al);
; 583  : 		}
; 584  : 
; 585  : 	void _Move_alloc(_Alty& _Al)
; 586  : 		{	// replace old allocator
; 587  : 		_Pocma(_Getal(), _Al);
; 588  : 		}
; 589  : 
; 590  : 	void _Swap_alloc(_Myt& _Right)
; 591  : 		{	// swap allocators
; 592  : 		_Pocs(_Getal(), _Right._Getal());
; 593  : 		}
; 594  : 
; 595  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 596  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 597  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 598  : 		{	// construct allocator from _Al
; 599  : 		_Alloc_proxy();
; 600  : 		}
; 601  : 
; 602  : 	_String_alloc(_Alloc&& _Al)
; 603  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 604  : 		{	// construct allocator from _Al
; 605  : 		_Alloc_proxy();
; 606  : 		}
; 607  : 
; 608  : 	~_String_alloc() _NOEXCEPT
; 609  : 		{	// destroy the object
; 610  : 		_Free_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Copy_alloc(const _Alty& _Al)
; 614  : 		{	// replace old allocator
; 615  : 		_Free_proxy();
; 616  : 		_Pocca(_Getal(), _Al);
; 617  : 		_Alloc_proxy();
; 618  : 		}
; 619  : 
; 620  : 	void _Move_alloc(_Alty& _Al)
; 621  : 		{	// replace old allocator
; 622  : 		_Free_proxy();
; 623  : 		_Pocma(_Getal(), _Al);
; 624  : 		_Alloc_proxy();
; 625  : 		}
; 626  : 
; 627  : 	void _Swap_alloc(_Myt& _Right)
; 628  : 		{	// swap allocators
; 629  : 		_Pocs(_Getal(), _Right._Getal());
; 630  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 631  : 		}
; 632  : 
; 633  : 	void _Alloc_proxy()
; 634  : 		{	// construct proxy
; 635  : 		typename _Alty::template rebind<_Container_proxy>::other
; 636  : 			_Alproxy(_Getal());
; 637  : 		_Myproxy() = _Alproxy.allocate(1);
; 638  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 639  : 		_Myproxy()->_Mycont = &_Get_data();
; 640  : 		}
; 641  : 
; 642  : 	void _Free_proxy()
; 643  : 		{	// destroy proxy
; 644  : 		typename _Alty::template rebind<_Container_proxy>::other
; 645  : 			_Alproxy(_Getal());
; 646  : 		_Orphan_all();
; 647  : 		_Alproxy.destroy(_Myproxy());
; 648  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 649  : 		_Myproxy() = 0;
; 650  : 		}
; 651  : 
; 652  : 	_Iterator_base12 **_Getpfirst() const
; 653  : 		{	// get address of iterator chain
; 654  : 		return (_Get_data()._Getpfirst());
; 655  : 		}
; 656  : 
; 657  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 658  : 		{	// return reference to _Myproxy
; 659  : 		return (_Get_data()._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 663  : 		{	// return const reference to _Myproxy
; 664  : 		return (_Get_data()._Myproxy);
; 665  : 		}
; 666  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 667  : 
; 668  : 	void _Orphan_all()
; 669  : 		{	// orphan all iterators
; 670  : 		_Get_data()._Orphan_all();
; 671  : 		}
; 672  : 
; 673  : 	void _Swap_all(_Myt& _Right)
; 674  : 		{	// swap all iterators
; 675  : 		_Get_data()._Swap_all(_Right._Get_data());
; 676  : 		}
; 677  : 
; 678  : 	_Alty& _Getal() _NOEXCEPT
; 679  : 		{	// return reference to allocator
; 680  : 		return (_Mypair._Get_first());
; 681  : 		}
; 682  : 
; 683  : 	const _Alty& _Getal() const _NOEXCEPT
; 684  : 		{	// return const reference to allocator
; 685  : 		return (_Mypair._Get_first());
; 686  : 		}
; 687  : 
; 688  : 	_String_val<_Val_types>& _Get_data() _NOEXCEPT
; 689  : 		{	// return reference to _String_val
; 690  : 		return (_Mypair._Get_second());
; 691  : 		}
; 692  : 
; 693  : 	const _String_val<_Val_types>& _Get_data() const _NOEXCEPT
; 694  : 		{	// return const reference to _String_val
; 695  : 		return (_Mypair._Get_second());
; 696  : 		}
; 697  : 
; 698  : 	typedef typename _String_val<_Val_types>::_Bxty _Bxty;
; 699  : 
; 700  : 	_Bxty& _Bx() _NOEXCEPT
; 701  : 		{	// return reference to _Bx
; 702  : 		return (_Get_data()._Bx);
; 703  : 		}
; 704  : 
; 705  : 	const _Bxty& _Bx() const _NOEXCEPT
; 706  : 		{	// return const reference to _Bx
; 707  : 		return (_Get_data()._Bx);
; 708  : 		}
; 709  : 
; 710  : 	size_type& _Mysize() _NOEXCEPT
; 711  : 		{	// return reference to _Mysize
; 712  : 		return (_Get_data()._Mysize);
; 713  : 		}
; 714  : 
; 715  : 	const size_type& _Mysize() const _NOEXCEPT
; 716  : 		{	// return const reference to _Mysize
; 717  : 		return (_Get_data()._Mysize);
; 718  : 		}
; 719  : 
; 720  : 	size_type& _Myres() _NOEXCEPT
; 721  : 		{	// return reference to _Myres
; 722  : 		return (_Get_data()._Myres);
; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00025	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  0002c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00030	72 02		 jb	 SHORT $LN141@Destroy_if
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00032	8b 36		 mov	 esi, DWORD PTR [esi]
$LN141@Destroy_if:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00034	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00035	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1673 : 		}

  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Destroy_if_not_nil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

  00003	ff 75 0c	 push	 DWORD PTR __Keyval$[ebp]
  00006	e8 00 00 00 00	 call	 ??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Lbound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 43   : 		: _Ptr(_Pnode)

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	89 01		 mov	 DWORD PTR [ecx], eax

; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

  00010	8b c1		 mov	 eax, ecx

; 1548 : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::lower_bound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
$T2 = 12						; size = 4
$T3 = 12						; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::find, COMDAT
; _this$ = ecx

; 1485 : 		{	// find an element in mutable sequence that matches _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx

; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

  00027	8b 5d 0c	 mov	 ebx, DWORD PTR __Keyval$[ebp]
  0002a	53		 push	 ebx
  0002b	e8 00 00 00 00	 call	 ??$_Lbound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Lbound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 43   : 		: _Ptr(_Pnode)

  00030	8b f0		 mov	 esi, eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00032	3b 37		 cmp	 esi, DWORD PTR [edi]

; 1487 : 		return (_Where == end()

  00034	74 2c		 je	 SHORT $LN3@find
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

  00036	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  00039	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}
; 516  : 
; 517  : 	union _Bxty
; 518  : 		{	// storage for small buffer or pointer to larger one
; 519  : 		value_type _Buf[_BUF_SIZE];
; 520  : 		pointer _Ptr;
; 521  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 522  : 		} _Bx;
; 523  : 
; 524  : 	size_type _Mysize;	// current length of string
; 525  : 	size_type _Myres;	// current storage reserved for string
; 526  : 	};
; 527  : 
; 528  : 		// TEMPLATE CLASS _String_alloc
; 529  : template<class _Alloc_types>
; 530  : 	class _String_alloc
; 531  : 	{	// base class for basic_string to hold allocator
; 532  : public:
; 533  : 	typedef _String_alloc<_Alloc_types> _Myt;
; 534  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 535  : 	typedef typename _Alloc_types::_Alty _Alty;
; 536  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 537  : 
; 538  : 	typedef typename _Val_types::value_type value_type;
; 539  : 	typedef typename _Val_types::size_type size_type;
; 540  : 	typedef typename _Val_types::difference_type difference_type;
; 541  : 	typedef typename _Val_types::pointer pointer;
; 542  : 	typedef typename _Val_types::const_pointer const_pointer;
; 543  : 	typedef typename _Val_types::reference reference;
; 544  : 	typedef typename _Val_types::const_reference const_reference;
; 545  : 
; 546  : 	typedef _String_iterator<_String_val<_Val_types> > iterator;
; 547  : 	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;
; 548  : 
; 549  : 	enum
; 550  : 		{	// length of internal buffer, [1, 16]
; 551  : 		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
; 552  : 		};
; 553  : 
; 554  : 	enum
; 555  : 		{	// roundup mask for allocated buffers, [0, 15]
; 556  : 		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
; 557  : 		};
; 558  : 
; 559  : 	value_type *_Myptr()
; 560  : 		{	// determine current pointer to buffer for mutable string
; 561  : 		return (_Get_data()._Myptr());
; 562  : 		}
; 563  : 
; 564  : 	const value_type *_Myptr() const
; 565  : 		{	// determine current pointer to buffer for nonmutable string
; 566  : 		return (_Get_data()._Myptr());
; 567  : 		}
; 568  : 
; 569  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 570  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 571  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 572  : 		{	// construct allocator from _Al
; 573  : 		}
; 574  : 
; 575  : 	_String_alloc(_Alloc&& _Al)
; 576  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 577  : 		{	// construct allocator from _Al
; 578  : 		}
; 579  : 
; 580  : 	void _Copy_alloc(const _Alty& _Al)
; 581  : 		{	// replace old allocator
; 582  : 		_Pocca(_Getal(), _Al);
; 583  : 		}
; 584  : 
; 585  : 	void _Move_alloc(_Alty& _Al)
; 586  : 		{	// replace old allocator
; 587  : 		_Pocma(_Getal(), _Al);
; 588  : 		}
; 589  : 
; 590  : 	void _Swap_alloc(_Myt& _Right)
; 591  : 		{	// swap allocators
; 592  : 		_Pocs(_Getal(), _Right._Getal());
; 593  : 		}
; 594  : 
; 595  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 596  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 597  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 598  : 		{	// construct allocator from _Al
; 599  : 		_Alloc_proxy();
; 600  : 		}
; 601  : 
; 602  : 	_String_alloc(_Alloc&& _Al)
; 603  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 604  : 		{	// construct allocator from _Al
; 605  : 		_Alloc_proxy();
; 606  : 		}
; 607  : 
; 608  : 	~_String_alloc() _NOEXCEPT
; 609  : 		{	// destroy the object
; 610  : 		_Free_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Copy_alloc(const _Alty& _Al)
; 614  : 		{	// replace old allocator
; 615  : 		_Free_proxy();
; 616  : 		_Pocca(_Getal(), _Al);
; 617  : 		_Alloc_proxy();
; 618  : 		}
; 619  : 
; 620  : 	void _Move_alloc(_Alty& _Al)
; 621  : 		{	// replace old allocator
; 622  : 		_Free_proxy();
; 623  : 		_Pocma(_Getal(), _Al);
; 624  : 		_Alloc_proxy();
; 625  : 		}
; 626  : 
; 627  : 	void _Swap_alloc(_Myt& _Right)
; 628  : 		{	// swap allocators
; 629  : 		_Pocs(_Getal(), _Right._Getal());
; 630  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 631  : 		}
; 632  : 
; 633  : 	void _Alloc_proxy()
; 634  : 		{	// construct proxy
; 635  : 		typename _Alty::template rebind<_Container_proxy>::other
; 636  : 			_Alproxy(_Getal());
; 637  : 		_Myproxy() = _Alproxy.allocate(1);
; 638  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 639  : 		_Myproxy()->_Mycont = &_Get_data();
; 640  : 		}
; 641  : 
; 642  : 	void _Free_proxy()
; 643  : 		{	// destroy proxy
; 644  : 		typename _Alty::template rebind<_Container_proxy>::other
; 645  : 			_Alproxy(_Getal());
; 646  : 		_Orphan_all();
; 647  : 		_Alproxy.destroy(_Myproxy());
; 648  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 649  : 		_Myproxy() = 0;
; 650  : 		}
; 651  : 
; 652  : 	_Iterator_base12 **_Getpfirst() const
; 653  : 		{	// get address of iterator chain
; 654  : 		return (_Get_data()._Getpfirst());
; 655  : 		}
; 656  : 
; 657  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 658  : 		{	// return reference to _Myproxy
; 659  : 		return (_Get_data()._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 663  : 		{	// return const reference to _Myproxy
; 664  : 		return (_Get_data()._Myproxy);
; 665  : 		}
; 666  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 667  : 
; 668  : 	void _Orphan_all()
; 669  : 		{	// orphan all iterators
; 670  : 		_Get_data()._Orphan_all();
; 671  : 		}
; 672  : 
; 673  : 	void _Swap_all(_Myt& _Right)
; 674  : 		{	// swap all iterators
; 675  : 		_Get_data()._Swap_all(_Right._Get_data());
; 676  : 		}
; 677  : 
; 678  : 	_Alty& _Getal() _NOEXCEPT
; 679  : 		{	// return reference to allocator
; 680  : 		return (_Mypair._Get_first());
; 681  : 		}
; 682  : 
; 683  : 	const _Alty& _Getal() const _NOEXCEPT
; 684  : 		{	// return const reference to allocator
; 685  : 		return (_Mypair._Get_first());
; 686  : 		}
; 687  : 
; 688  : 	_String_val<_Val_types>& _Get_data() _NOEXCEPT
; 689  : 		{	// return reference to _String_val
; 690  : 		return (_Mypair._Get_second());
; 691  : 		}
; 692  : 
; 693  : 	const _String_val<_Val_types>& _Get_data() const _NOEXCEPT
; 694  : 		{	// return const reference to _String_val
; 695  : 		return (_Mypair._Get_second());
; 696  : 		}
; 697  : 
; 698  : 	typedef typename _String_val<_Val_types>::_Bxty _Bxty;
; 699  : 
; 700  : 	_Bxty& _Bx() _NOEXCEPT
; 701  : 		{	// return reference to _Bx
; 702  : 		return (_Get_data()._Bx);
; 703  : 		}
; 704  : 
; 705  : 	const _Bxty& _Bx() const _NOEXCEPT
; 706  : 		{	// return const reference to _Bx
; 707  : 		return (_Get_data()._Bx);
; 708  : 		}
; 709  : 
; 710  : 	size_type& _Mysize() _NOEXCEPT
; 711  : 		{	// return reference to _Mysize
; 712  : 		return (_Get_data()._Mysize);
; 713  : 		}
; 714  : 
; 715  : 	const size_type& _Mysize() const _NOEXCEPT
; 716  : 		{	// return const reference to _Mysize
; 717  : 		return (_Get_data()._Mysize);
; 718  : 		}
; 719  : 
; 720  : 	size_type& _Myres() _NOEXCEPT
; 721  : 		{	// return reference to _Myres
; 722  : 		return (_Get_data()._Myres);
; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());

  0003d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]

; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right

  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  00047	72 02		 jb	 SHORT $LN106@find
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00049	8b 00		 mov	 eax, DWORD PTR [eax]
$LN106@find:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));

  0004b	51		 push	 ecx
  0004c	50		 push	 eax
  0004d	ff 73 10	 push	 DWORD PTR [ebx+16]
  00050	8b cb		 mov	 ecx, ebx
  00052	6a 00		 push	 0
  00054	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare

; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());
; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)
; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)
; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow
; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)
; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do
; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())
; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;
; 2242 : 		_Eos(_Newsize);
; 2243 : 		}
; 2244 : 
; 2245 : 	[[noreturn]] void _Xlen() const
; 2246 : 		{	// report a length_error
; 2247 : 		_Xlength_error("string too long");
; 2248 : 		}
; 2249 : 
; 2250 : 	[[noreturn]] void _Xran() const
; 2251 : 		{	// report an out_of_range error
; 2252 : 		_Xout_of_range("invalid string position");
; 2253 : 		}
; 2254 : 	};
; 2255 : 
; 2256 : 		// STATIC npos OBJECT
; 2257 : template<class _Elem,
; 2258 : 	class _Traits,
; 2259 : 	class _Alloc>
; 2260 : 	_PGLOBAL const typename basic_string<_Elem, _Traits, _Alloc>::size_type
; 2261 : 		basic_string<_Elem, _Traits, _Alloc>::npos =
; 2262 : 			(typename basic_string<_Elem, _Traits, _Alloc>::size_type)(-1);
; 2263 : 
; 2264 : 		// basic_string TEMPLATE OPERATORS
; 2265 : 
; 2266 : template<class _Elem,
; 2267 : 	class _Traits,
; 2268 : 	class _Alloc> inline
; 2269 : 	void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2270 : 		basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2271 : 			_NOEXCEPT_OP(_NOEXCEPT_OP(_Left.swap(_Right)))
; 2272 : 	{	// swap _Left and _Right strings
; 2273 : 	_Left.swap(_Right);
; 2274 : 	}
; 2275 : 
; 2276 : template<class _Elem,
; 2277 : 	class _Traits,
; 2278 : 	class _Alloc> inline
; 2279 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2280 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2281 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2282 : 	{	// return string + string
; 2283 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2284 : 	_Ans.reserve(_Left.size() + _Right.size());
; 2285 : 	_Ans += _Left;
; 2286 : 	_Ans += _Right;
; 2287 : 	return (_Ans);
; 2288 : 	}
; 2289 : 
; 2290 : template<class _Elem,
; 2291 : 	class _Traits,
; 2292 : 	class _Alloc> inline
; 2293 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2294 : 		const _Elem *_Left,
; 2295 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2296 : 	{	// return NTCS + string
; 2297 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2298 : 	_Ans.reserve(_Traits::length(_Left) + _Right.size());
; 2299 : 	_Ans += _Left;
; 2300 : 	_Ans += _Right;
; 2301 : 	return (_Ans);
; 2302 : 	}
; 2303 : 
; 2304 : template<class _Elem,
; 2305 : 	class _Traits,
; 2306 : 	class _Alloc> inline
; 2307 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2308 : 		const _Elem _Left,
; 2309 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2310 : 	{	// return character + string
; 2311 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2312 : 	_Ans.reserve(1 + _Right.size());
; 2313 : 	_Ans += _Left;
; 2314 : 	_Ans += _Right;
; 2315 : 	return (_Ans);
; 2316 : 	}
; 2317 : 
; 2318 : template<class _Elem,
; 2319 : 	class _Traits,
; 2320 : 	class _Alloc> inline
; 2321 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2322 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2323 : 		const _Elem *_Right)
; 2324 : 	{	// return string + NTCS
; 2325 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2326 : 	_Ans.reserve(_Left.size() + _Traits::length(_Right));
; 2327 : 	_Ans += _Left;
; 2328 : 	_Ans += _Right;
; 2329 : 	return (_Ans);
; 2330 : 	}
; 2331 : 
; 2332 : template<class _Elem,
; 2333 : 	class _Traits,
; 2334 : 	class _Alloc> inline
; 2335 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2336 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2337 : 		const _Elem _Right)
; 2338 : 	{	// return string + character
; 2339 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2340 : 	_Ans.reserve(_Left.size() + 1);
; 2341 : 	_Ans += _Left;
; 2342 : 	_Ans += _Right;
; 2343 : 	return (_Ans);
; 2344 : 	}
; 2345 : 
; 2346 : template<class _Elem,
; 2347 : 	class _Traits,
; 2348 : 	class _Alloc> inline
; 2349 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2350 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2351 : 		basic_string<_Elem, _Traits, _Alloc>&& _Right)
; 2352 : 	{	// return string + string
; 2353 : 	return (_STD move(_Right.insert(0, _Left)));
; 2354 : 	}
; 2355 : 
; 2356 : template<class _Elem,
; 2357 : 	class _Traits,
; 2358 : 	class _Alloc> inline
; 2359 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2360 : 		basic_string<_Elem, _Traits, _Alloc>&& _Left,
; 2361 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2362 : 	{	// return string + string
; 2363 : 	return (_STD move(_Left.append(_Right)));
; 2364 : 	}
; 2365 : 
; 2366 : template<class _Elem,
; 2367 : 	class _Traits,
; 2368 : 	class _Alloc> inline
; 2369 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2370 : 		basic_string<_Elem, _Traits, _Alloc>&& _Left,
; 2371 : 		basic_string<_Elem, _Traits, _Alloc>&& _Right)
; 2372 : 	{	// return string + string
; 2373 : 	if (_Right.size() <= _Left.capacity() - _Left.size()
; 2374 : 		|| _Right.capacity() - _Right.size() < _Left.size())
; 2375 : 		return (_STD move(_Left.append(_Right)));
; 2376 : 	else
; 2377 : 		return (_STD move(_Right.insert(0, _Left)));
; 2378 : 	}
; 2379 : 
; 2380 : template<class _Elem,
; 2381 : 	class _Traits,
; 2382 : 	class _Alloc> inline
; 2383 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2384 : 		const _Elem *_Left,
; 2385 : 		basic_string<_Elem, _Traits, _Alloc>&& _Right)
; 2386 : 	{	// return NTCS + string
; 2387 : 	return (_STD move(_Right.insert(0, _Left)));
; 2388 : 	}
; 2389 : 
; 2390 : template<class _Elem,
; 2391 : 	class _Traits,
; 2392 : 	class _Alloc> inline
; 2393 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2394 : 		const _Elem _Left,
; 2395 : 		basic_string<_Elem, _Traits, _Alloc>&& _Right)
; 2396 : 	{	// return character + string
; 2397 : 	typedef typename basic_string<_Elem, _Traits, _Alloc>::size_type
; 2398 : 		size_type;
; 2399 : 	return (_STD move(_Right.insert((size_type)0, (size_type)1, _Left)));
; 2400 : 	}
; 2401 : 
; 2402 : template<class _Elem,
; 2403 : 	class _Traits,
; 2404 : 	class _Alloc> inline
; 2405 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2406 : 		basic_string<_Elem, _Traits, _Alloc>&& _Left,
; 2407 : 		const _Elem *_Right)
; 2408 : 	{	// return string + NTCS
; 2409 : 	return (_STD move(_Left.append(_Right)));
; 2410 : 	}
; 2411 : 
; 2412 : template<class _Elem,
; 2413 : 	class _Traits,
; 2414 : 	class _Alloc> inline
; 2415 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2416 : 		basic_string<_Elem, _Traits, _Alloc>&& _Left,
; 2417 : 		const _Elem _Right)
; 2418 : 	{	// return string + character
; 2419 : 	return (_STD move(_Left.append(1, _Right)));
; 2420 : 	}
; 2421 : 
; 2422 : template<class _Elem,
; 2423 : 	class _Traits,
; 2424 : 	class _Alloc> inline
; 2425 : 	bool operator==(
; 2426 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2427 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2428 : 	{	// test for string equality
; 2429 : 	return (_Left.compare(_Right) == 0);
; 2430 : 	}
; 2431 : 
; 2432 : template<class _Elem,
; 2433 : 	class _Traits,
; 2434 : 	class _Alloc> inline
; 2435 : 	bool operator==(
; 2436 : 		const _Elem * _Left,
; 2437 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2438 : 	{	// test for NTCS vs. string equality
; 2439 : 	return (_Right.compare(_Left) == 0);
; 2440 : 	}
; 2441 : 
; 2442 : template<class _Elem,
; 2443 : 	class _Traits,
; 2444 : 	class _Alloc> inline
; 2445 : 	bool operator==(
; 2446 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2447 : 		const _Elem *_Right)
; 2448 : 	{	// test for string vs. NTCS equality
; 2449 : 	return (_Left.compare(_Right) == 0);
; 2450 : 	}
; 2451 : 
; 2452 : template<class _Elem,
; 2453 : 	class _Traits,
; 2454 : 	class _Alloc> inline
; 2455 : 	bool operator!=(
; 2456 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2457 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2458 : 	{	// test for string inequality
; 2459 : 	return (!(_Left == _Right));
; 2460 : 	}
; 2461 : 
; 2462 : template<class _Elem,
; 2463 : 	class _Traits,
; 2464 : 	class _Alloc> inline
; 2465 : 	bool operator!=(
; 2466 : 		const _Elem *_Left,
; 2467 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2468 : 	{	// test for NTCS vs. string inequality
; 2469 : 	return (!(_Left == _Right));
; 2470 : 	}
; 2471 : 
; 2472 : template<class _Elem,
; 2473 : 	class _Traits,
; 2474 : 	class _Alloc> inline
; 2475 : 	bool operator!=(
; 2476 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2477 : 		const _Elem *_Right)
; 2478 : 	{	// test for string vs. NTCS inequality
; 2479 : 	return (!(_Left == _Right));
; 2480 : 	}
; 2481 : 
; 2482 : template<class _Elem,
; 2483 : 	class _Traits,
; 2484 : 	class _Alloc> inline
; 2485 : 	bool operator<(
; 2486 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2487 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2488 : 	{	// test if string < string
; 2489 : 	return (_Left.compare(_Right) < 0);

  00059	85 c0		 test	 eax, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1487 : 		return (_Where == end()

  0005b	78 05		 js	 SHORT $LN3@find
  0005d	89 75 0c	 mov	 DWORD PTR $T2[ebp], esi
  00060	eb 05		 jmp	 SHORT $LN155@find
$LN3@find:

; 43   : 		: _Ptr(_Pnode)

  00062	8b 07		 mov	 eax, DWORD PTR [edi]
  00064	89 45 0c	 mov	 DWORD PTR $T3[ebp], eax
$LN155@find:

; 1487 : 		return (_Where == end()

  00067	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();
; 718  : 		}
; 719  : 
; 720  : 	~_Tree_comp_alloc() _NOEXCEPT
; 721  : 		{	// destroy head node
; 722  : 		_Freeheadnode(_Myhead());
; 723  : 		}
; 724  : 
; 725  : 	void _Copy_alloc(const _Alty& _Al)
; 726  : 		{	// replace old allocator
; 727  : 		_Pocca(_Getal(), _Al);
; 728  : 		}
; 729  : 
; 730  : 	void _Move_alloc(_Alty& _Al)
; 731  : 		{	// replace old allocator
; 732  : 		_Pocma(_Getal(), _Al);
; 733  : 		}
; 734  : 
; 735  : 	void _Swap_alloc(_Myt& _Right)
; 736  : 		{	// swap allocators
; 737  : 		_Pocs(_Getal(), _Right._Getal());
; 738  : 		}
; 739  : 
; 740  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 741  : 	void _Construct()
; 742  : 		{	// construct head node, proxy
; 743  : 		_Myhead() = _Buyheadnode();
; 744  : 		_TRY_BEGIN
; 745  : 		_Alloc_proxy();
; 746  : 		_CATCH_ALL
; 747  : 		_Freeheadnode(_Myhead());
; 748  : 		_RERAISE;
; 749  : 		_CATCH_END
; 750  : 		}
; 751  : 
; 752  : 	~_Tree_comp_alloc() _NOEXCEPT
; 753  : 		{	// destroy head node, proxy
; 754  : 		_Freeheadnode(_Myhead());
; 755  : 		_Free_proxy();
; 756  : 		}
; 757  : 
; 758  : 	void _Copy_alloc(const _Alty& _Al)
; 759  : 		{	// replace old allocator
; 760  : 		_Free_proxy();
; 761  : 		_Pocca(_Getal(), _Al);
; 762  : 		_Alloc_proxy();
; 763  : 		}
; 764  : 
; 765  : 	void _Move_alloc(_Alty& _Al)
; 766  : 		{	// replace old allocator
; 767  : 		_Free_proxy();
; 768  : 		_Pocma(_Getal(), _Al);
; 769  : 		_Alloc_proxy();
; 770  : 		}
; 771  : 
; 772  : 	void _Swap_alloc(_Myt& _Right)
; 773  : 		{	// swap allocators
; 774  : 		_Pocs(_Getal(), _Right._Getal());
; 775  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 776  : 		}
; 777  : 
; 778  : 	void _Alloc_proxy()
; 779  : 		{	// construct proxy
; 780  : 		typename _Alty::template rebind<_Container_proxy>::other
; 781  : 			_Alproxy(_Getal());
; 782  : 		_Myproxy() = _Alproxy.allocate(1);
; 783  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 784  : 		_Myproxy()->_Mycont = &_Get_data();
; 785  : 		}
; 786  : 
; 787  : 	void _Free_proxy()
; 788  : 		{	// destroy proxy
; 789  : 		typename _Alty::template rebind<_Container_proxy>::other
; 790  : 			_Alproxy(_Getal());
; 791  : 		_Orphan_all();
; 792  : 		_Alproxy.destroy(_Myproxy());
; 793  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 794  : 		_Myproxy() = 0;
; 795  : 		}
; 796  : 
; 797  : 	_Iterator_base12 **_Getpfirst() const
; 798  : 		{	// get address of iterator chain
; 799  : 		return (_Get_data()._Getpfirst());
; 800  : 		}
; 801  : 
; 802  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 803  : 		{	// return reference to _Myproxy
; 804  : 		return (_Get_data()._Myproxy);
; 805  : 		}
; 806  : 
; 807  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 808  : 		{	// return const reference to _Myproxy
; 809  : 		return (_Get_data()._Myproxy);
; 810  : 		}
; 811  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 812  : 
; 813  : 	void _Orphan_all()
; 814  : 		{	// orphan all iterators
; 815  : 		_Get_data()._Orphan_all();
; 816  : 		}
; 817  : 
; 818  : 	void _Swap_all(_Myt& _Right)
; 819  : 		{	// swap all iterators
; 820  : 		_Get_data()._Swap_all(_Right._Get_data());
; 821  : 		}
; 822  : 
; 823  : 	_Nodeptr _Buyheadnode()
; 824  : 		{	// get head node using current allocator
; 825  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 826  : 
; 827  : 		_TRY_BEGIN
; 828  : 		_Getal().construct(
; 829  : 			_STD addressof(_Left(_Pnode)), _Pnode);
; 830  : 		_Getal().construct(
; 831  : 			_STD addressof(_Parent(_Pnode)), _Pnode);
; 832  : 		_Getal().construct(
; 833  : 			_STD addressof(_Right(_Pnode)), _Pnode);
; 834  : 		_CATCH_ALL
; 835  : 		_Getal().deallocate(_Pnode, 1);
; 836  : 		_RERAISE;
; 837  : 		_CATCH_END
; 838  : 
; 839  : 		_Color(_Pnode) = _Black;
; 840  : 		_Isnil(_Pnode) = true;
; 841  : 		return (_Pnode);
; 842  : 		}
; 843  : 
; 844  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 845  : 		{	// free head node using current allocator
; 846  : 		_Getal().destroy(
; 847  : 			_STD addressof(_Left(_Pnode)));
; 848  : 		_Getal().destroy(
; 849  : 			_STD addressof(_Parent(_Pnode)));
; 850  : 		_Getal().destroy(
; 851  : 			_STD addressof(_Right(_Pnode)));
; 852  : 		_Getal().deallocate(_Pnode, 1);
; 853  : 		}
; 854  : 
; 855  : 	_Nodeptr _Buynode0()
; 856  : 		{	// allocate a non-value node
; 857  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		_Getal().construct(
; 861  : 			_STD addressof(_Left(_Pnode)), _Myhead());
; 862  : 		_Getal().construct(
; 863  : 			_STD addressof(_Parent(_Pnode)), _Myhead());
; 864  : 		_Getal().construct(
; 865  : 			_STD addressof(_Right(_Pnode)), _Myhead());
; 866  : 		_CATCH_ALL
; 867  : 		_Getal().deallocate(_Pnode, 1);
; 868  : 		_RERAISE;
; 869  : 		_CATCH_END
; 870  : 
; 871  : 		return (_Pnode);
; 872  : 		}
; 873  : 
; 874  : 	void _Freenode0(_Nodeptr _Pnode)
; 875  : 		{	// free non-value node using current allocator
; 876  : 		_Getal().destroy(
; 877  : 			_STD addressof(_Left(_Pnode)));
; 878  : 		_Getal().destroy(
; 879  : 			_STD addressof(_Parent(_Pnode)));
; 880  : 		_Getal().destroy(
; 881  : 			_STD addressof(_Right(_Pnode)));
; 882  : 		_Getal().deallocate(_Pnode, 1);
; 883  : 		}
; 884  : 
; 885  : 	template<class... _Valty>
; 886  : 		_Nodeptr _Buynode(_Valty&&... _Val)
; 887  : 		{	// allocate a node with defaults and set links and value
; 888  : 		_Nodeptr _Pnode = _Buynode0();
; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;
; 891  : 		this->_Isnil(_Pnode) = false;
; 892  : 
; 893  : 		_TRY_BEGIN
; 894  : 		this->_Getal().construct(
; 895  : 			_STD addressof(_Myval(_Pnode)),
; 896  : 				_STD forward<_Valty>(_Val)...);
; 897  : 		_CATCH_ALL
; 898  : 		_Freenode0(_Pnode);
; 899  : 		_RERAISE;
; 900  : 		_CATCH_END
; 901  : 
; 902  : 		return (_Pnode);
; 903  : 		}
; 904  : 
; 905  : 
; 906  : 	key_compare& _Getcomp() _NOEXCEPT
; 907  : 		{	// return reference to ordering predicate
; 908  : 		return (_Mypair._Get_first());
; 909  : 		}
; 910  : 
; 911  : 	const key_compare& _Getcomp() const _NOEXCEPT
; 912  : 		{	// return const reference to ordering predicate
; 913  : 		return (_Mypair._Get_first());
; 914  : 		}
; 915  : 
; 916  : 	_Alty& _Getal() _NOEXCEPT
; 917  : 		{	// return reference to allocator
; 918  : 		return (_Mypair._Get_second()._Get_first());
; 919  : 		}
; 920  : 
; 921  : 	const _Alty& _Getal() const _NOEXCEPT
; 922  : 		{	// return const reference to allocator
; 923  : 		return (_Mypair._Get_second()._Get_first());
; 924  : 		}
; 925  : 
; 926  : 	_Tree_val<_Val_types>& _Get_data() _NOEXCEPT
; 927  : 		{	// return reference to _Tree_val
; 928  : 		return (_Mypair._Get_second()._Get_second());
; 929  : 		}
; 930  : 
; 931  : 	const _Tree_val<_Val_types>& _Get_data() const _NOEXCEPT
; 932  : 		{	// return const reference to _Tree_val
; 933  : 		return (_Mypair._Get_second()._Get_second());
; 934  : 		}
; 935  : 
; 936  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 937  : 		{	// return reference to _Myhead
; 938  : 		return (_Get_data()._Myhead);
; 939  : 		}
; 940  : 
; 941  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 942  : 		{	// return const reference to _Myhead
; 943  : 		return (_Get_data()._Myhead);
; 944  : 		}
; 945  : 
; 946  : 	size_type& _Mysize() _NOEXCEPT
; 947  : 		{	// return reference to _Mysize
; 948  : 		return (_Get_data()._Mysize);
; 949  : 		}
; 950  : 
; 951  : 	const size_type& _Mysize() const _NOEXCEPT
; 952  : 		{	// return const reference to _Mysize
; 953  : 		return (_Get_data()._Mysize);
; 954  : 		}
; 955  : 
; 956  : private:
; 957  : 	_Compressed_pair<key_compare,
; 958  : 		_Compressed_pair<_Alty, _Tree_val<_Val_types> > > _Mypair;
; 959  : 	};
; 960  : 
; 961  : 		// TEMPLATE CLASS _Tree
; 962  : template<class _Traits>
; 963  : 	class _Tree
; 964  : 		: public _Tree_comp_alloc<_Traits>
; 965  : 	{	// ordered red-black tree for map/multimap/set/multiset
; 966  : public:
; 967  : 	typedef _Tree<_Traits> _Myt;
; 968  : 	typedef _Tree_comp_alloc<_Traits> _Mybase;
; 969  : 
; 970  : 	typedef typename _Traits::key_type key_type;
; 971  : 	typedef typename _Traits::value_compare value_compare;
; 972  : 	enum
; 973  : 		{	// get multi parameter
; 974  : 		_Multi = _Traits::_Multi};
; 975  : 
; 976  : 	typedef typename _Mybase::_Node _Node;
; 977  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 978  : 	typedef typename _Mybase::_Alty _Alty;
; 979  : 
; 980  : 	typedef typename _Mybase::key_compare key_compare;
; 981  : 	typedef typename _Mybase::allocator_type allocator_type;
; 982  : 
; 983  : 	typedef typename _Mybase::value_type value_type;
; 984  : 	typedef typename _Mybase::size_type size_type;
; 985  : 	typedef typename _Mybase::difference_type difference_type;
; 986  : 	typedef typename _Mybase::pointer pointer;
; 987  : 	typedef typename _Mybase::const_pointer const_pointer;
; 988  : 	typedef typename _Mybase::reference reference;
; 989  : 	typedef typename _Mybase::const_reference const_reference;
; 990  : 
; 991  : 	typedef typename _Mybase::const_iterator const_iterator;
; 992  : 	typedef typename _If<is_same<key_type, value_type>::value,
; 993  : 		typename _Mybase::const_iterator,
; 994  : 		typename _Mybase::iterator>::type iterator;
; 995  : 
; 996  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 997  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 998  : 
; 999  : 	typedef pair<iterator, bool> _Pairib;
; 1000 : 	typedef pair<iterator, iterator> _Pairii;
; 1001 : 	typedef pair<const_iterator, const_iterator> _Paircc;
; 1002 : 
; 1003 : 	struct _Copy_tag
; 1004 : 		{	// signals copying
; 1005 : 		};
; 1006 : 	struct _Move_tag
; 1007 : 		{	// signals moving
; 1008 : 		};
; 1009 : 
; 1010 : 	_Tree(const key_compare& _Parg,
; 1011 : 		const allocator_type& _Al)
; 1012 : 		: _Mybase(_Parg, _Al)
; 1013 : 		{	// construct empty tree
; 1014 : 		}
; 1015 : 
; 1016 : 	_Tree(const _Myt& _Right, const allocator_type& _Al)
; 1017 : 		: _Mybase(_Right.key_comp(), _Al)
; 1018 : 		{	// construct tree by copying _Right, allocator
; 1019 : 		_TRY_BEGIN
; 1020 : 		_Copy(_Right, _Copy_tag());
; 1021 : 		_CATCH_ALL
; 1022 : 		_Tidy();
; 1023 : 		_RERAISE;
; 1024 : 		_CATCH_END
; 1025 : 		}
; 1026 : 
; 1027 : 	_Tree(_Myt&& _Right)
; 1028 : 		: _Mybase(_Right.key_comp(), _STD move(_Right._Getal()))
; 1029 : 		{	// construct tree by moving _Right
; 1030 : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1031 : 		}
; 1032 : 
; 1033 : 	_Tree(_Myt&& _Right, const allocator_type& _Al)
; 1034 : 		: _Mybase(_Right.key_comp(), _Al)
; 1035 : 		{	// construct tree by moving _Right, allocator
; 1036 : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 1037 : 		}
; 1038 : 
; 1039 : 	_Myt& operator=(_Myt&& _Right)
; 1040 : 		{	// assign by moving _Right
; 1041 : 		if (this != &_Right)
; 1042 : 			{	// different, move it
; 1043 : 			clear();
; 1044 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1045 : 				&& this->_Getal() != _Right._Getal())
; 1046 : 				this->_Move_alloc(_Right._Getal());
; 1047 : 
; 1048 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1049 : 			}
; 1050 : 		return (*this);
; 1051 : 		}
; 1052 : 
; 1053 : 	void _Assign_rv(_Myt&& _Right, true_type)
; 1054 : 		{	// move from _Right, stealing its contents
; 1055 : 		this->_Swap_all(_Right);
; 1056 : 		_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1057 : 		_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1058 : 		_STD swap(this->_Mysize(), _Right._Mysize());
; 1059 : 		}
; 1060 : 
; 1061 : 	void _Assign_rv(_Myt&& _Right, false_type)
; 1062 : 		{	// move from _Right, possibly moving its contents
; 1063 : 		if (get_allocator() == _Right.get_allocator())
; 1064 : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1065 : 		else
; 1066 : 			_Copy(_Right, _Move_tag());
; 1067 : 		}
; 1068 : 
; 1069 : 	void _Assign_rv(_Myt&& _Right)
; 1070 : 		{	// assign by moving _Right
; 1071 : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 1072 : 			typename _Alty::propagate_on_container_move_assignment());
; 1073 : 		}
; 1074 : 
; 1075 : 
; 1076 : 	_Pairib insert(value_type&& _Val)
; 1077 : 		{	// try to insert node with value _Val, favoring right side
; 1078 : 		return (_Insert_nohint(false,
; 1079 : 			_STD forward<value_type>(_Val), _Nil()));
; 1080 : 		}
; 1081 : 
; 1082 : 	iterator insert(const_iterator _Where, value_type&& _Val)
; 1083 : 		{	// try to insert node with value _Val using _Where as a hint
; 1084 : 		return (_Insert_hint(_Where,
; 1085 : 			_STD forward<value_type>(_Val), _Nil()));
; 1086 : 		}
; 1087 : 
; 1088 : 	template<class _Valty>
; 1089 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1090 : 			_Pairib>::type
; 1091 : 		insert(_Valty&& _Val)
; 1092 : 		{	// try to insert node with value _Val, favoring right side
; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1094 : 		return (_Insert_nohint(false,
; 1095 : 			this->_Myval(_Newnode), _Newnode));
; 1096 : 		}
; 1097 : 
; 1098 : 	template<class _Valty>
; 1099 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1100 : 			iterator>::type
; 1101 : 		insert(const_iterator _Where, _Valty&& _Val)
; 1102 : 		{	// try to insert node with value _Val using _Where as a hint
; 1103 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1104 : 		return (_Insert_hint(_Where,
; 1105 : 			this->_Myval(_Newnode), _Newnode));
; 1106 : 		}
; 1107 : 
; 1108 : 	template<class... _Valty>
; 1109 : 		_Pairib emplace(_Valty&&... _Val)
; 1110 : 		{	// try to insert value_type(_Val...), favoring right side
; 1111 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1112 : 		return (_Insert_nohint(false,
; 1113 : 			this->_Myval(_Newnode), _Newnode));
; 1114 : 		}
; 1115 : 
; 1116 : 	template<class... _Valty>
; 1117 : 		iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
; 1118 : 		{	// insert value_type(_Val...) at _Where
; 1119 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1120 : 		return (_Insert_hint(_Where,
; 1121 : 			this->_Myval(_Newnode), _Newnode));
; 1122 : 		}
; 1123 : 
; 1124 : 
; 1125 : 	~_Tree() _NOEXCEPT
; 1126 : 		{	// destroy tree
; 1127 : 		_Tidy();
; 1128 : 		}
; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));

  0006a	8d 4d 0c	 lea	 ecx, DWORD PTR $T3[ebp]

; 1487 : 		return (_Where == end()

  0006d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0006f	89 08		 mov	 DWORD PTR [eax], ecx

; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}

  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$13:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::find
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::clear, COMDAT
; _this$ = ecx

; 1472 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());

  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	ff 70 04	 push	 DWORD PTR [eax+4]
  0002a	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Erase

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]

; 1478 : 		_Root() = this->_Myhead();

  00031	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1479 : 		_Lmost() = this->_Myhead();

  00034	8b 06		 mov	 eax, DWORD PTR [esi]
  00036	89 00		 mov	 DWORD PTR [eax], eax

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00038	8b 06		 mov	 eax, DWORD PTR [esi]

; 1480 : 		_Rmost() = this->_Myhead();

  0003a	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1481 : 		this->_Mysize() = 0;

  0003d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1482 : 		}

  00044	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00047	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004e	59		 pop	 ecx
  0004f	5e		 pop	 esi
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::clear
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::erase, COMDAT
; _this$ = ecx

; 1448 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00026	8b 17		 mov	 edx, DWORD PTR [edi]

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00028	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0002b	3b 02		 cmp	 eax, DWORD PTR [edx]

; 1449 : 		if (_First == begin() && _Last == end())

  0002d	75 44		 jne	 SHORT $LN299@erase

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  0002f	39 55 10	 cmp	 DWORD PTR __Last$[ebp], edx

; 1449 : 		if (_First == begin() && _Last == end())

  00032	75 3f		 jne	 SHORT $LN299@erase

; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());

  00034	ff 72 04	 push	 DWORD PTR [edx+4]
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Erase

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00043	8b 07		 mov	 eax, DWORD PTR [edi]

; 1478 : 		_Root() = this->_Myhead();

  00045	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1479 : 		_Lmost() = this->_Myhead();

  00048	8b 07		 mov	 eax, DWORD PTR [edi]
  0004a	89 00		 mov	 DWORD PTR [eax], eax

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0004c	8b 07		 mov	 eax, DWORD PTR [edi]

; 1480 : 		_Rmost() = this->_Myhead();

  0004e	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1481 : 		this->_Mysize() = 0;

  00051	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00058	8b 07		 mov	 eax, DWORD PTR [edi]

; 43   : 		: _Ptr(_Pnode)

  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0005f	89 08		 mov	 DWORD PTR [eax], ecx

; 1459 : 			}
; 1460 : 		}

  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	5f		 pop	 edi
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 0c 00	 ret	 12			; 0000000cH
$LN299@erase:

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00073	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]

; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)

  00076	74 58		 je	 SHORT $LN3@erase
$LL2@erase:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00078	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0

; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;

  0007c	8b c8		 mov	 ecx, eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))

  0007e	75 3c		 jne	 SHORT $LN256@erase

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00080	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  00083	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00087	75 14		 jne	 SHORT $LN301@erase

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00089	8b 02		 mov	 eax, DWORD PTR [edx]

; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  0008b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008f	75 28		 jne	 SHORT $LN252@erase
$LL267@erase:

; 615  : 			_Pnode = _Left(_Pnode);

  00091	8b d0		 mov	 edx, eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00093	8b 02		 mov	 eax, DWORD PTR [edx]

; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00095	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00099	74 f6		 je	 SHORT $LL267@erase

; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else

  0009b	eb 1c		 jmp	 SHORT $LN252@erase
$LN301@erase:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0009d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a0	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000a4	75 13		 jne	 SHORT $LN252@erase
$LL251@erase:
  000a6	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  000a9	75 0e		 jne	 SHORT $LN252@erase

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  000ab	8b c2		 mov	 eax, edx
  000ad	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
  000b0	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000b3	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000b7	74 ed		 je	 SHORT $LL251@erase
$LN252@erase:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  000b9	89 55 0c	 mov	 DWORD PTR __First$[ebp], edx
$LN256@erase:

; 1457 : 				erase(_First++);

  000bc	51		 push	 ecx
  000bd	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  000c0	8b cf		 mov	 ecx, edi
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::erase

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  000c8	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  000cb	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]

; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)

  000ce	75 a8		 jne	 SHORT $LL2@erase
$LN3@erase:

; 43   : 		: _Ptr(_Pnode)

  000d0	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000d3	89 01		 mov	 DWORD PTR [ecx], eax

; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));

  000d5	8b c1		 mov	 eax, ecx

; 1459 : 			}
; 1460 : 		}

  000d7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000da	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e1	59		 pop	 ecx
  000e2	5f		 pop	 edi
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@0@Z$16:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@0@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@0@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::erase
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv1488 = -8						; size = 4
tv1463 = -8						; size = 4
__Erasednode$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::erase, COMDAT
; _this$ = ecx

; 1263 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 1263 : 		{	// erase element at _Where

  0000b	8b d9		 mov	 ebx, ecx

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  0000d	89 45 fc	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);

  00011	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,std::_Iterator_base0>::operator++

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
  0001c	8b 31		 mov	 esi, DWORD PTR [ecx]

; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))

  0001e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00022	74 05		 je	 SHORT $LN5@erase

; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

  00024	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]

; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))

  00027	eb 1b		 jmp	 SHORT $LN845@erase
$LN5@erase:
  00029	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0002c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00030	74 04		 je	 SHORT $LN7@erase

; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

  00032	8b fe		 mov	 edi, esi

; 1285 : 		else

  00034	eb 0e		 jmp	 SHORT $LN845@erase
$LN7@erase:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  00036	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp]

; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

  00039	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]

; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)

  0003c	3b d1		 cmp	 edx, ecx
  0003e	0f 85 83 00 00
	00		 jne	 $LN9@erase
$LN845@erase:

; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))

  00044	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00048	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0004b	75 03		 jne	 SHORT $LN11@erase

; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

  0004d	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@erase:

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00050	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)

  00052	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00055	75 05		 jne	 SHORT $LN12@erase

; 1298 : 				_Root() = _Fixnode;	// link down from root

  00057	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

  0005a	eb 0b		 jmp	 SHORT $LN15@erase
$LN12@erase:
  0005c	39 0e		 cmp	 DWORD PTR [esi], ecx
  0005e	75 04		 jne	 SHORT $LN14@erase

; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  00060	89 3e		 mov	 DWORD PTR [esi], edi

; 1301 : 			else

  00062	eb 03		 jmp	 SHORT $LN15@erase
$LN14@erase:

; 1302 : 				this->_Right(_Fixnodeparent) =

  00064	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@erase:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00067	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)

  00069	39 08		 cmp	 DWORD PTR [eax], ecx
  0006b	75 22		 jne	 SHORT $LN16@erase

; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)

  0006d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00071	74 04		 je	 SHORT $LN42@erase
  00073	8b d6		 mov	 edx, esi
  00075	eb 16		 jmp	 SHORT $LN43@erase
$LN42@erase:

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00077	8b 07		 mov	 eax, DWORD PTR [edi]

; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  00079	8b d7		 mov	 edx, edi

; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  0007b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0007f	75 0a		 jne	 SHORT $LN166@erase
$LL165@erase:

; 615  : 			_Pnode = _Left(_Pnode);

  00081	8b d0		 mov	 edx, eax

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00083	8b 02		 mov	 eax, DWORD PTR [edx]

; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00085	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00089	74 f6		 je	 SHORT $LL165@erase
$LN166@erase:
  0008b	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN43@erase:

; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)

  0008d	89 10		 mov	 DWORD PTR [eax], edx
$LN16@erase:

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)

  00091	39 48 08	 cmp	 DWORD PTR [eax+8], ecx
  00094	0f 85 8b 00 00
	00		 jne	 $LN373@erase

; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0a		 je	 SHORT $LN44@erase
  000a0	8b d6		 mov	 edx, esi
  000a2	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else

  000a5	e9 7b 00 00 00	 jmp	 $LN373@erase
$LN44@erase:

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  000aa	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  000ad	8b d7		 mov	 edx, edi

; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  000af	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b3	75 0b		 jne	 SHORT $LN218@erase
$LL217@erase:

; 608  : 			_Pnode = _Right(_Pnode);

  000b5	8b d0		 mov	 edx, eax

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  000b7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  000ba	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000be	74 f5		 je	 SHORT $LL217@erase
$LN218@erase:
  000c0	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)

  000c2	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else

  000c5	eb 5e		 jmp	 SHORT $LN373@erase
$LN9@erase:

; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =

  000c7	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =

  000ca	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cc	89 02		 mov	 DWORD PTR [edx], eax

; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))

  000ce	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000d1	75 04		 jne	 SHORT $LN18@erase

; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  000d3	8b f2		 mov	 esi, edx

; 1324 : 			else

  000d5	eb 1a		 jmp	 SHORT $LN19@erase
$LN18@erase:

; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))

  000d7	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000db	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  000de	75 03		 jne	 SHORT $LN20@erase

; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  000e0	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@erase:

; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  000e3	89 3e		 mov	 DWORD PTR [esi], edi

; 1331 : 				this->_Right(_Pnode) =

  000e5	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000e8	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =

  000eb	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ee	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN19@erase:

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  000f1	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)

  000f3	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  000f6	75 05		 jne	 SHORT $LN21@erase

; 1338 : 				_Root() = _Pnode;	// link down from root

  000f8	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  000fb	eb 0e		 jmp	 SHORT $LN24@erase
$LN21@erase:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  000fd	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  00100	39 08		 cmp	 DWORD PTR [eax], ecx
  00102	75 04		 jne	 SHORT $LN23@erase

; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =

  00104	89 10		 mov	 DWORD PTR [eax], edx

; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else

  00106	eb 03		 jmp	 SHORT $LN24@erase
$LN23@erase:

; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =

  00108	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN24@erase:

; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =

  0010b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0010e	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00111	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00114	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]
  00117	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  0011a	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 54   : 	_Right = _Move(_Tmp);

  0011d	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00120	88 48 0c	 mov	 BYTE PTR [eax+12], cl
  00123	8b c8		 mov	 ecx, eax
$LN373@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)

  00125	80 79 0c 01	 cmp	 BYTE PTR [ecx+12], 1
  00129	0f 85 12 01 00
	00		 jne	 $LN25@erase

; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;

  0012f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00131	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00134	0f 84 03 01 00
	00		 je	 $LN3@erase
  0013a	66 0f 1f 44 00
	00		 npad	 6
$LL4@erase:
  00140	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00144	0f 85 f0 00 00
	00		 jne	 $LN847@erase

; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

  0014a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0014c	3b f9		 cmp	 edi, ecx
  0014e	75 70		 jne	 SHORT $LN26@erase

; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);

  00150	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1360 : 					if (this->_Color(_Pnode) == this->_Red)

  00153	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00157	75 13		 jne	 SHORT $LN28@erase

; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;

  00159	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);

  0015d	8b cb		 mov	 ecx, ebx
  0015f	56		 push	 esi
  00160	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  00164	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Lrotate

; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);

  00169	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN28@erase:

; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))

  0016c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00170	0f 85 7d 00 00
	00		 jne	 $LN849@erase

; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

  00176	8b 01		 mov	 eax, DWORD PTR [ecx]
  00178	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0017c	75 09		 jne	 SHORT $LN31@erase
  0017e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00181	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00185	74 68		 je	 SHORT $LN850@erase
$LN31@erase:

; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)

  00187	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0018a	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0018e	75 15		 jne	 SHORT $LN33@erase

; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

  00190	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);

  00192	51		 push	 ecx
  00193	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00197	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  0019b	8b cb		 mov	 ecx, ebx
  0019d	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Rrotate

; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);

  001a2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@erase:

; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  001a5	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  001a8	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;

  001ab	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

  001af	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 1390 : 						_Lrotate(_Fixnodeparent);

  001b2	8b cb		 mov	 ecx, ebx
  001b4	56		 push	 esi
  001b5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001b9	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Lrotate

; 1391 : 						break;	// tree now recolored/rebalanced

  001be	eb 7a		 jmp	 SHORT $LN847@erase
$LN26@erase:

; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)

  001c0	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001c4	75 12		 jne	 SHORT $LN34@erase

; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;

  001c6	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);

  001ca	8b cb		 mov	 ecx, ebx
  001cc	56		 push	 esi
  001cd	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  001d1	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Rrotate

; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);

  001d6	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN34@erase:

; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))

  001d8	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001dc	75 15		 jne	 SHORT $LN849@erase

; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

  001de	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001e1	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001e5	75 1e		 jne	 SHORT $LN37@erase
  001e7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001e9	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001ed	75 16		 jne	 SHORT $LN37@erase
$LN850@erase:

; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;

  001ef	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN849@erase:

; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;

  001f3	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1412 : 						_Fixnode = _Fixnodeparent;

  001f5	8b fe		 mov	 edi, esi
  001f7	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  001fa	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  001fd	0f 85 3d ff ff
	ff		 jne	 $LL4@erase

; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;

  00203	eb 35		 jmp	 SHORT $LN847@erase
$LN37@erase:

; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

  00205	8b 01		 mov	 eax, DWORD PTR [ecx]
  00207	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0020b	75 15		 jne	 SHORT $LN39@erase

; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

  0020d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);

  00210	51		 push	 ecx
  00211	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00215	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00219	8b cb		 mov	 ecx, ebx
  0021b	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Lrotate

; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);

  00220	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN39@erase:

; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  00222	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00225	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;

  00228	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

  0022c	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1427 : 						_Rrotate(_Fixnodeparent);

  0022e	8b cb		 mov	 ecx, ebx
  00230	56		 push	 esi
  00231	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00235	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Rrotate
$LN847@erase:
  0023a	8b 4d fc	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
$LN3@erase:

; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

  0023d	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00241	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 602  : 		return ((reference)_Pnode->_Myval);

  00244	8d 71 10	 lea	 esi, DWORD PTR [ecx+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00247	83 f8 10	 cmp	 eax, 16			; 00000010H
  0024a	72 37		 jb	 SHORT $LN717@erase

; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  0024c	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  0024f	8b 06		 mov	 eax, DWORD PTR [esi]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00251	83 f9 ff	 cmp	 ecx, -1
  00254	77 6b		 ja	 SHORT $LN851@erase

; 101  : 	const size_t _User_size = _Count * _Sz;
; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00256	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0025c	72 19		 jb	 SHORT $LN712@erase

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0025e	a8 1f		 test	 al, 31			; 0000001fH
  00260	75 64		 jne	 SHORT $LN853@erase

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00262	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00265	3b c8		 cmp	 ecx, eax
  00267	73 62		 jae	 SHORT $LN854@erase

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00269	2b c1		 sub	 eax, ecx
  0026b	83 f8 04	 cmp	 eax, 4
  0026e	72 60		 jb	 SHORT $LN855@erase

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00270	83 f8 23	 cmp	 eax, 35			; 00000023H
  00273	77 60		 ja	 SHORT $LN856@erase

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00275	8b c1		 mov	 eax, ecx
$LN712@erase:

; 138  : 	::operator delete(_Ptr);

  00277	50		 push	 eax
  00278	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0027d	8b 4d fc	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
  00280	83 c4 04	 add	 esp, 4
$LN717@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00283	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 506  : 			? _STD addressof(*this->_Bx._Ptr)
; 507  : 			: this->_Bx._Buf);
; 508  : 		}
; 509  : 
; 510  : 	const value_type *_Myptr() const
; 511  : 		{	// determine current pointer to buffer for nonmutable string
; 512  : 		return (this->_BUF_SIZE <= this->_Myres
; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}
; 516  : 
; 517  : 	union _Bxty
; 518  : 		{	// storage for small buffer or pointer to larger one
; 519  : 		value_type _Buf[_BUF_SIZE];
; 520  : 		pointer _Ptr;
; 521  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 522  : 		} _Bx;
; 523  : 
; 524  : 	size_type _Mysize;	// current length of string
; 525  : 	size_type _Myres;	// current storage reserved for string
; 526  : 	};
; 527  : 
; 528  : 		// TEMPLATE CLASS _String_alloc
; 529  : template<class _Alloc_types>
; 530  : 	class _String_alloc
; 531  : 	{	// base class for basic_string to hold allocator
; 532  : public:
; 533  : 	typedef _String_alloc<_Alloc_types> _Myt;
; 534  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 535  : 	typedef typename _Alloc_types::_Alty _Alty;
; 536  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 537  : 
; 538  : 	typedef typename _Val_types::value_type value_type;
; 539  : 	typedef typename _Val_types::size_type size_type;
; 540  : 	typedef typename _Val_types::difference_type difference_type;
; 541  : 	typedef typename _Val_types::pointer pointer;
; 542  : 	typedef typename _Val_types::const_pointer const_pointer;
; 543  : 	typedef typename _Val_types::reference reference;
; 544  : 	typedef typename _Val_types::const_reference const_reference;
; 545  : 
; 546  : 	typedef _String_iterator<_String_val<_Val_types> > iterator;
; 547  : 	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;
; 548  : 
; 549  : 	enum
; 550  : 		{	// length of internal buffer, [1, 16]
; 551  : 		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
; 552  : 		};
; 553  : 
; 554  : 	enum
; 555  : 		{	// roundup mask for allocated buffers, [0, 15]
; 556  : 		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
; 557  : 		};
; 558  : 
; 559  : 	value_type *_Myptr()
; 560  : 		{	// determine current pointer to buffer for mutable string
; 561  : 		return (_Get_data()._Myptr());
; 562  : 		}
; 563  : 
; 564  : 	const value_type *_Myptr() const
; 565  : 		{	// determine current pointer to buffer for nonmutable string
; 566  : 		return (_Get_data()._Myptr());
; 567  : 		}
; 568  : 
; 569  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 570  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 571  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 572  : 		{	// construct allocator from _Al
; 573  : 		}
; 574  : 
; 575  : 	_String_alloc(_Alloc&& _Al)
; 576  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 577  : 		{	// construct allocator from _Al
; 578  : 		}
; 579  : 
; 580  : 	void _Copy_alloc(const _Alty& _Al)
; 581  : 		{	// replace old allocator
; 582  : 		_Pocca(_Getal(), _Al);
; 583  : 		}
; 584  : 
; 585  : 	void _Move_alloc(_Alty& _Al)
; 586  : 		{	// replace old allocator
; 587  : 		_Pocma(_Getal(), _Al);
; 588  : 		}
; 589  : 
; 590  : 	void _Swap_alloc(_Myt& _Right)
; 591  : 		{	// swap allocators
; 592  : 		_Pocs(_Getal(), _Right._Getal());
; 593  : 		}
; 594  : 
; 595  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 596  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 597  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 598  : 		{	// construct allocator from _Al
; 599  : 		_Alloc_proxy();
; 600  : 		}
; 601  : 
; 602  : 	_String_alloc(_Alloc&& _Al)
; 603  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 604  : 		{	// construct allocator from _Al
; 605  : 		_Alloc_proxy();
; 606  : 		}
; 607  : 
; 608  : 	~_String_alloc() _NOEXCEPT
; 609  : 		{	// destroy the object
; 610  : 		_Free_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Copy_alloc(const _Alty& _Al)
; 614  : 		{	// replace old allocator
; 615  : 		_Free_proxy();
; 616  : 		_Pocca(_Getal(), _Al);
; 617  : 		_Alloc_proxy();
; 618  : 		}
; 619  : 
; 620  : 	void _Move_alloc(_Alty& _Al)
; 621  : 		{	// replace old allocator
; 622  : 		_Free_proxy();
; 623  : 		_Pocma(_Getal(), _Al);
; 624  : 		_Alloc_proxy();
; 625  : 		}
; 626  : 
; 627  : 	void _Swap_alloc(_Myt& _Right)
; 628  : 		{	// swap allocators
; 629  : 		_Pocs(_Getal(), _Right._Getal());
; 630  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 631  : 		}
; 632  : 
; 633  : 	void _Alloc_proxy()
; 634  : 		{	// construct proxy
; 635  : 		typename _Alty::template rebind<_Container_proxy>::other
; 636  : 			_Alproxy(_Getal());
; 637  : 		_Myproxy() = _Alproxy.allocate(1);
; 638  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 639  : 		_Myproxy()->_Mycont = &_Get_data();
; 640  : 		}
; 641  : 
; 642  : 	void _Free_proxy()
; 643  : 		{	// destroy proxy
; 644  : 		typename _Alty::template rebind<_Container_proxy>::other
; 645  : 			_Alproxy(_Getal());
; 646  : 		_Orphan_all();
; 647  : 		_Alproxy.destroy(_Myproxy());
; 648  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 649  : 		_Myproxy() = 0;
; 650  : 		}
; 651  : 
; 652  : 	_Iterator_base12 **_Getpfirst() const
; 653  : 		{	// get address of iterator chain
; 654  : 		return (_Get_data()._Getpfirst());
; 655  : 		}
; 656  : 
; 657  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 658  : 		{	// return reference to _Myproxy
; 659  : 		return (_Get_data()._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 663  : 		{	// return const reference to _Myproxy
; 664  : 		return (_Get_data()._Myproxy);
; 665  : 		}
; 666  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 667  : 
; 668  : 	void _Orphan_all()
; 669  : 		{	// orphan all iterators
; 670  : 		_Get_data()._Orphan_all();
; 671  : 		}
; 672  : 
; 673  : 	void _Swap_all(_Myt& _Right)
; 674  : 		{	// swap all iterators
; 675  : 		_Get_data()._Swap_all(_Right._Get_data());
; 676  : 		}
; 677  : 
; 678  : 	_Alty& _Getal() _NOEXCEPT
; 679  : 		{	// return reference to allocator
; 680  : 		return (_Mypair._Get_first());
; 681  : 		}
; 682  : 
; 683  : 	const _Alty& _Getal() const _NOEXCEPT
; 684  : 		{	// return const reference to allocator
; 685  : 		return (_Mypair._Get_first());
; 686  : 		}
; 687  : 
; 688  : 	_String_val<_Val_types>& _Get_data() _NOEXCEPT
; 689  : 		{	// return reference to _String_val
; 690  : 		return (_Mypair._Get_second());
; 691  : 		}
; 692  : 
; 693  : 	const _String_val<_Val_types>& _Get_data() const _NOEXCEPT
; 694  : 		{	// return const reference to _String_val
; 695  : 		return (_Mypair._Get_second());
; 696  : 		}
; 697  : 
; 698  : 	typedef typename _String_val<_Val_types>::_Bxty _Bxty;
; 699  : 
; 700  : 	_Bxty& _Bx() _NOEXCEPT
; 701  : 		{	// return reference to _Bx
; 702  : 		return (_Get_data()._Bx);
; 703  : 		}
; 704  : 
; 705  : 	const _Bxty& _Bx() const _NOEXCEPT
; 706  : 		{	// return const reference to _Bx
; 707  : 		return (_Get_data()._Bx);
; 708  : 		}
; 709  : 
; 710  : 	size_type& _Mysize() _NOEXCEPT
; 711  : 		{	// return reference to _Mysize
; 712  : 		return (_Get_data()._Mysize);
; 713  : 		}
; 714  : 
; 715  : 	const size_type& _Mysize() const _NOEXCEPT
; 716  : 		{	// return const reference to _Mysize
; 717  : 		return (_Get_data()._Mysize);
; 718  : 		}
; 719  : 
; 720  : 	size_type& _Myres() _NOEXCEPT
; 721  : 		{	// return reference to _Myres
; 722  : 		return (_Get_data()._Myres);
; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  0028a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00291	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00295	72 02		 jb	 SHORT $LN751@erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00297	8b 36		 mov	 esi, DWORD PTR [esi]
$LN751@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00299	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0029a	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  0029d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1440 : 		if (0 < this->_Mysize())

  002a2	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  002a5	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1440 : 		if (0 < this->_Mysize())

  002a8	85 c0		 test	 eax, eax
  002aa	74 04		 je	 SHORT $LN40@erase

; 1441 : 			--this->_Mysize();

  002ac	48		 dec	 eax
  002ad	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN40@erase:

; 43   : 		: _Ptr(_Pnode)

  002b0	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  002b3	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  002b6	5f		 pop	 edi
  002b7	5e		 pop	 esi
  002b8	89 08		 mov	 DWORD PTR [eax], ecx
  002ba	5b		 pop	 ebx

; 1445 : 		}

  002bb	8b e5		 mov	 esp, ebp
  002bd	5d		 pop	 ebp
  002be	c2 08 00	 ret	 8
$LN851@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  002c1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN857@erase:
$LN853@erase:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  002c6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN858@erase:
$LN854@erase:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  002cb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN859@erase:
$LN855@erase:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  002d0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN860@erase:
$LN856@erase:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  002d5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN861@erase:
$LN848@erase:
  002da	cc		 int	 3
?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::max_size, COMDAT
; _this$ = ecx

; 1212 : 		return (this->_Getal().max_size());

  00000	b8 5d 74 d1 05	 mov	 eax, 97612893		; 05d1745dH

; 1213 : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::size, COMDAT
; _this$ = ecx

; 1207 : 		return (this->_Mysize());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1208 : 		}

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::end, COMDAT
; _this$ = ecx

; 1156 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::begin, COMDAT
; _this$ = ecx

; 1146 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 43   : 		: _Ptr(_Pnode)

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::~_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >, COMDAT
; _this$ = ecx

; 1126 : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 43   : 		: _Ptr(_Pnode)

  00026	8b 06		 mov	 eax, DWORD PTR [esi]

; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2116 : 
; 2117 : 		if (_Wherenode == _Root())
; 2118 : 			_Root() = _Pnode;
; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;
; 2125 : 		this->_Parent(_Wherenode) = _Pnode;
; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2146 : 
; 2147 : 		if (_Wherenode == _Root())
; 2148 : 			_Root() = _Pnode;
; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;
; 2155 : 		this->_Parent(_Wherenode) = _Pnode;
; 2156 : 		}
; 2157 : 
; 2158 : 	template<class _Other>
; 2159 : 		_Nodeptr _Ubound(const _Other& _Keyval) const
; 2160 : 		{	// find leftmost node greater than _Keyval
; 2161 : 		_Nodeptr _Pnode = _Root();
; 2162 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2163 : 
; 2164 : 		while (!this->_Isnil(_Pnode))
; 2165 : 			if (_Compare(_Keyval, this->_Key(_Pnode)))
; 2166 : 				{	// _Pnode greater than _Keyval, remember it
; 2167 : 				_Wherenode = _Pnode;
; 2168 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2169 : 				}
; 2170 : 			else
; 2171 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2172 : 
; 2173 : 		return (_Wherenode);	// return best remembered candidate
; 2174 : 		}
; 2175 : 
; 2176 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2177 : 	void _Orphan_ptr(_Nodeptr _Ptr)
; 2178 : 		{	// orphan iterators with specified node pointers
; 2179 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2180 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
; 2181 : 		if (_Pnext != 0)
; 2182 : 			while (*_Pnext != 0)
; 2183 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 2184 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2185 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2186 : 				else
; 2187 : 					{	// orphan the iterator
; 2188 : 					(*_Pnext)->_Clrcont();
; 2189 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2190 : 					}
; 2191 : 		}
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2193 : 
; 2194 : 	void _Tidy()
; 2195 : 		{	// free all storage
; 2196 : 		erase(begin(), end());

  00028	50		 push	 eax
  00029	ff 30		 push	 DWORD PTR [eax]
  0002b	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00034	ff 36		 push	 DWORD PTR [esi]
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1128 : 		}

  0003e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00041	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00048	59		 pop	 ecx
  00049	5e		 pop	 esi
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::~_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >, COMDAT
; _this$ = ecx

; 1013 : 		{	// construct empty tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi

; 567  : 		this->_Myhead = 0;

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  00017	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buyheadnode
  0001c	89 06		 mov	 DWORD PTR [esi], eax

; 1014 : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Min, COMDAT

; 613  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 0c		 jne	 SHORT $LN15@Min
  0000e	66 90		 npad	 2
$LL2@Min:

; 615  : 			_Pnode = _Left(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]

; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00014	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00018	74 f6		 je	 SHORT $LL2@Min
$LN15@Min:

; 616  : 		return (_Pnode);

  0001a	8b c1		 mov	 eax, ecx

; 617  : 		}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Max, COMDAT

; 606  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00009	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000d	75 0c		 jne	 SHORT $LN15@Max
  0000f	90		 npad	 1
$LL2@Max:

; 608  : 			_Pnode = _Right(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL2@Max
$LN15@Max:

; 609  : 		return (_Pnode);

  0001b	8b c1		 mov	 eax, ecx

; 610  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Myval, COMDAT

; 601  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 602  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H

; 603  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Right, COMDAT

; 596  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 598  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Parent, COMDAT

; 591  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 593  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Left, COMDAT

; 586  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 588  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Isnil, COMDAT

; 581  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0d	 add	 eax, 13			; 0000000dH

; 583  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Color, COMDAT

; 576  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 577  : 		return ((char&)_Pnode->_Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 578  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >, COMDAT
; _this$ = ecx

; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 568  : 		this->_Mysize = 0;
; 569  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z PROC ; std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::operator(), COMDAT
; _this$ = ecx

; 239  : 		{	// apply operator< to operands

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1750 : 		return (this->_Mysize());

  00022	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]

; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right

  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  0002c	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1750 : 		return (this->_Mysize());

  00030	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  00033	72 02		 jb	 SHORT $LN31@operator
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00035	8b 00		 mov	 eax, DWORD PTR [eax]
$LN31@operator:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));

  00037	51		 push	 ecx
  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0003b	50		 push	 eax
  0003c	ff 71 10	 push	 DWORD PTR [ecx+16]
  0003f	6a 00		 push	 0
  00041	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare

; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());
; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)
; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)
; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow
; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)
; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do
; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())
; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;
; 2242 : 		_Eos(_Newsize);
; 2243 : 		}
; 2244 : 
; 2245 : 	[[noreturn]] void _Xlen() const
; 2246 : 		{	// report a length_error
; 2247 : 		_Xlength_error("string too long");
; 2248 : 		}
; 2249 : 
; 2250 : 	[[noreturn]] void _Xran() const
; 2251 : 		{	// report an out_of_range error
; 2252 : 		_Xout_of_range("invalid string position");
; 2253 : 		}
; 2254 : 	};
; 2255 : 
; 2256 : 		// STATIC npos OBJECT
; 2257 : template<class _Elem,
; 2258 : 	class _Traits,
; 2259 : 	class _Alloc>
; 2260 : 	_PGLOBAL const typename basic_string<_Elem, _Traits, _Alloc>::size_type
; 2261 : 		basic_string<_Elem, _Traits, _Alloc>::npos =
; 2262 : 			(typename basic_string<_Elem, _Traits, _Alloc>::size_type)(-1);
; 2263 : 
; 2264 : 		// basic_string TEMPLATE OPERATORS
; 2265 : 
; 2266 : template<class _Elem,
; 2267 : 	class _Traits,
; 2268 : 	class _Alloc> inline
; 2269 : 	void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2270 : 		basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2271 : 			_NOEXCEPT_OP(_NOEXCEPT_OP(_Left.swap(_Right)))
; 2272 : 	{	// swap _Left and _Right strings
; 2273 : 	_Left.swap(_Right);
; 2274 : 	}
; 2275 : 
; 2276 : template<class _Elem,
; 2277 : 	class _Traits,
; 2278 : 	class _Alloc> inline
; 2279 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2280 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2281 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2282 : 	{	// return string + string
; 2283 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2284 : 	_Ans.reserve(_Left.size() + _Right.size());
; 2285 : 	_Ans += _Left;
; 2286 : 	_Ans += _Right;
; 2287 : 	return (_Ans);
; 2288 : 	}
; 2289 : 
; 2290 : template<class _Elem,
; 2291 : 	class _Traits,
; 2292 : 	class _Alloc> inline
; 2293 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2294 : 		const _Elem *_Left,
; 2295 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2296 : 	{	// return NTCS + string
; 2297 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2298 : 	_Ans.reserve(_Traits::length(_Left) + _Right.size());
; 2299 : 	_Ans += _Left;
; 2300 : 	_Ans += _Right;
; 2301 : 	return (_Ans);
; 2302 : 	}
; 2303 : 
; 2304 : template<class _Elem,
; 2305 : 	class _Traits,
; 2306 : 	class _Alloc> inline
; 2307 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2308 : 		const _Elem _Left,
; 2309 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2310 : 	{	// return character + string
; 2311 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2312 : 	_Ans.reserve(1 + _Right.size());
; 2313 : 	_Ans += _Left;
; 2314 : 	_Ans += _Right;
; 2315 : 	return (_Ans);
; 2316 : 	}
; 2317 : 
; 2318 : template<class _Elem,
; 2319 : 	class _Traits,
; 2320 : 	class _Alloc> inline
; 2321 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2322 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2323 : 		const _Elem *_Right)
; 2324 : 	{	// return string + NTCS
; 2325 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2326 : 	_Ans.reserve(_Left.size() + _Traits::length(_Right));
; 2327 : 	_Ans += _Left;
; 2328 : 	_Ans += _Right;
; 2329 : 	return (_Ans);
; 2330 : 	}
; 2331 : 
; 2332 : template<class _Elem,
; 2333 : 	class _Traits,
; 2334 : 	class _Alloc> inline
; 2335 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2336 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2337 : 		const _Elem _Right)
; 2338 : 	{	// return string + character
; 2339 : 	basic_string<_Elem, _Traits, _Alloc> _Ans;
; 2340 : 	_Ans.reserve(_Left.size() + 1);
; 2341 : 	_Ans += _Left;
; 2342 : 	_Ans += _Right;
; 2343 : 	return (_Ans);
; 2344 : 	}
; 2345 : 
; 2346 : template<class _Elem,
; 2347 : 	class _Traits,
; 2348 : 	class _Alloc> inline
; 2349 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2350 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2351 : 		basic_string<_Elem, _Traits, _Alloc>&& _Right)
; 2352 : 	{	// return string + string
; 2353 : 	return (_STD move(_Right.insert(0, _Left)));
; 2354 : 	}
; 2355 : 
; 2356 : template<class _Elem,
; 2357 : 	class _Traits,
; 2358 : 	class _Alloc> inline
; 2359 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2360 : 		basic_string<_Elem, _Traits, _Alloc>&& _Left,
; 2361 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2362 : 	{	// return string + string
; 2363 : 	return (_STD move(_Left.append(_Right)));
; 2364 : 	}
; 2365 : 
; 2366 : template<class _Elem,
; 2367 : 	class _Traits,
; 2368 : 	class _Alloc> inline
; 2369 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2370 : 		basic_string<_Elem, _Traits, _Alloc>&& _Left,
; 2371 : 		basic_string<_Elem, _Traits, _Alloc>&& _Right)
; 2372 : 	{	// return string + string
; 2373 : 	if (_Right.size() <= _Left.capacity() - _Left.size()
; 2374 : 		|| _Right.capacity() - _Right.size() < _Left.size())
; 2375 : 		return (_STD move(_Left.append(_Right)));
; 2376 : 	else
; 2377 : 		return (_STD move(_Right.insert(0, _Left)));
; 2378 : 	}
; 2379 : 
; 2380 : template<class _Elem,
; 2381 : 	class _Traits,
; 2382 : 	class _Alloc> inline
; 2383 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2384 : 		const _Elem *_Left,
; 2385 : 		basic_string<_Elem, _Traits, _Alloc>&& _Right)
; 2386 : 	{	// return NTCS + string
; 2387 : 	return (_STD move(_Right.insert(0, _Left)));
; 2388 : 	}
; 2389 : 
; 2390 : template<class _Elem,
; 2391 : 	class _Traits,
; 2392 : 	class _Alloc> inline
; 2393 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2394 : 		const _Elem _Left,
; 2395 : 		basic_string<_Elem, _Traits, _Alloc>&& _Right)
; 2396 : 	{	// return character + string
; 2397 : 	typedef typename basic_string<_Elem, _Traits, _Alloc>::size_type
; 2398 : 		size_type;
; 2399 : 	return (_STD move(_Right.insert((size_type)0, (size_type)1, _Left)));
; 2400 : 	}
; 2401 : 
; 2402 : template<class _Elem,
; 2403 : 	class _Traits,
; 2404 : 	class _Alloc> inline
; 2405 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2406 : 		basic_string<_Elem, _Traits, _Alloc>&& _Left,
; 2407 : 		const _Elem *_Right)
; 2408 : 	{	// return string + NTCS
; 2409 : 	return (_STD move(_Left.append(_Right)));
; 2410 : 	}
; 2411 : 
; 2412 : template<class _Elem,
; 2413 : 	class _Traits,
; 2414 : 	class _Alloc> inline
; 2415 : 	basic_string<_Elem, _Traits, _Alloc> operator+(
; 2416 : 		basic_string<_Elem, _Traits, _Alloc>&& _Left,
; 2417 : 		const _Elem _Right)
; 2418 : 	{	// return string + character
; 2419 : 	return (_STD move(_Left.append(1, _Right)));
; 2420 : 	}
; 2421 : 
; 2422 : template<class _Elem,
; 2423 : 	class _Traits,
; 2424 : 	class _Alloc> inline
; 2425 : 	bool operator==(
; 2426 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2427 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2428 : 	{	// test for string equality
; 2429 : 	return (_Left.compare(_Right) == 0);
; 2430 : 	}
; 2431 : 
; 2432 : template<class _Elem,
; 2433 : 	class _Traits,
; 2434 : 	class _Alloc> inline
; 2435 : 	bool operator==(
; 2436 : 		const _Elem * _Left,
; 2437 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2438 : 	{	// test for NTCS vs. string equality
; 2439 : 	return (_Right.compare(_Left) == 0);
; 2440 : 	}
; 2441 : 
; 2442 : template<class _Elem,
; 2443 : 	class _Traits,
; 2444 : 	class _Alloc> inline
; 2445 : 	bool operator==(
; 2446 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2447 : 		const _Elem *_Right)
; 2448 : 	{	// test for string vs. NTCS equality
; 2449 : 	return (_Left.compare(_Right) == 0);
; 2450 : 	}
; 2451 : 
; 2452 : template<class _Elem,
; 2453 : 	class _Traits,
; 2454 : 	class _Alloc> inline
; 2455 : 	bool operator!=(
; 2456 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2457 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2458 : 	{	// test for string inequality
; 2459 : 	return (!(_Left == _Right));
; 2460 : 	}
; 2461 : 
; 2462 : template<class _Elem,
; 2463 : 	class _Traits,
; 2464 : 	class _Alloc> inline
; 2465 : 	bool operator!=(
; 2466 : 		const _Elem *_Left,
; 2467 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2468 : 	{	// test for NTCS vs. string inequality
; 2469 : 	return (!(_Left == _Right));
; 2470 : 	}
; 2471 : 
; 2472 : template<class _Elem,
; 2473 : 	class _Traits,
; 2474 : 	class _Alloc> inline
; 2475 : 	bool operator!=(
; 2476 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2477 : 		const _Elem *_Right)
; 2478 : 	{	// test for string vs. NTCS inequality
; 2479 : 	return (!(_Left == _Right));
; 2480 : 	}
; 2481 : 
; 2482 : template<class _Elem,
; 2483 : 	class _Traits,
; 2484 : 	class _Alloc> inline
; 2485 : 	bool operator<(
; 2486 : 		const basic_string<_Elem, _Traits, _Alloc>& _Left,
; 2487 : 		const basic_string<_Elem, _Traits, _Alloc>& _Right)
; 2488 : 	{	// test if string < string
; 2489 : 	return (_Left.compare(_Right) < 0);

  00046	33 c9		 xor	 ecx, ecx
  00048	85 c0		 test	 eax, eax
  0004a	0f 98 c0	 sets	 al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 241  : 		}

  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z ENDP ; std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::operator()
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEABIXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Mysize, COMDAT
; _this$ = ecx

; 953  : 		return (_Get_data()._Mysize);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 954  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEABIXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEAAIXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Mysize, COMDAT
; _this$ = ecx

; 948  : 		return (_Get_data()._Mysize);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 949  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEAAIXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Myhead, COMDAT
; _this$ = ecx

; 943  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 944  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Myhead, COMDAT
; _this$ = ecx

; 938  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 939  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 933  : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 934  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 928  : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 929  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 923  : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 924  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 918  : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 919  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 913  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 914  : 		}

  00002	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 908  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 909  : 		}

  00002	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEAAU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Freenode0, COMDAT
; _this$ = ecx

; 875  : 		{	// free non-value node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 883  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buynode0, COMDAT
; _this$ = ecx

; 856  : 		{	// allocate a non-value node

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00001	6a 2c		 push	 44			; 0000002cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 856  : 		{	// allocate a non-value node

  00003	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	8b d0		 mov	 edx, eax
  0000c	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0000f	85 d2		 test	 edx, edx
  00011	74 1e		 je	 SHORT $LN208@Buynode0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00015	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00018	89 02		 mov	 DWORD PTR [edx], eax
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 04		 je	 SHORT $LN126@Buynode0
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	89 01		 mov	 DWORD PTR [ecx], eax
$LN126@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00022	8d 4a 08	 lea	 ecx, DWORD PTR [edx+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00025	85 c9		 test	 ecx, ecx
  00027	74 04		 je	 SHORT $LN176@Buynode0
  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	89 01		 mov	 DWORD PTR [ecx], eax
$LN176@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 871  : 		return (_Pnode);

  0002d	8b c2		 mov	 eax, edx
  0002f	5e		 pop	 esi

; 872  : 		}

  00030	c3		 ret	 0
$LN208@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00031	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN210@Buynode0:
$LN207@Buynode0:
  00036	cc		 int	 3
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Freeheadnode, COMDAT
; _this$ = ecx

; 845  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 853  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buyheadnode, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00000	6a 2c		 push	 44			; 0000002cH
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0000a	85 c0		 test	 eax, eax
  0000c	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00012	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00015	89 00		 mov	 DWORD PTR [eax], eax
  00017	85 c9		 test	 ecx, ecx
  00019	74 02		 je	 SHORT $LN102@Buyheadnod
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
$LN102@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0001d	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00020	85 c9		 test	 ecx, ecx
  00022	74 02		 je	 SHORT $LN140@Buyheadnod
  00024	89 01		 mov	 DWORD PTR [ecx], eax
$LN140@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 839  : 		_Color(_Pnode) = _Black;

  00026	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 840  : 		_Isnil(_Pnode) = true;
; 841  : 		return (_Pnode);
; 842  : 		}

  0002c	c3		 ret	 0
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??1?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 723  : 		}

  00008	c3		 ret	 0
??1?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Construct, COMDAT
; _this$ = ecx

; 716  : 		{	// construct head node

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 717  : 		_Myhead() = _Buyheadnode();

  00003	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buyheadnode
  00008	89 06		 mov	 DWORD PTR [esi], eax
  0000a	5e		 pop	 esi

; 718  : 		}

  0000b	c3		 ret	 0
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >, COMDAT
; _this$ = ecx

; 703  : 		{	// construct from comparator, allocator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 567  : 		this->_Myhead = 0;

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00009	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  00010	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buyheadnode
  00015	89 06		 mov	 DWORD PTR [esi], eax

; 704  : 		_Construct();
; 705  : 		}

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 08 00	 ret	 8
??0?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@ABV?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Min, COMDAT

; 696  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]

; 582  : 		return ((char&)_Pnode->_Isnil);

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 0c		 jne	 SHORT $LN17@Min
  0000e	66 90		 npad	 2
$LL4@Min:

; 615  : 			_Pnode = _Left(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00014	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00018	74 f6		 je	 SHORT $LL4@Min
$LN17@Min:

; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  0001a	8b c1		 mov	 eax, ecx

; 698  : 		}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Max, COMDAT

; 691  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]

; 582  : 		return ((char&)_Pnode->_Isnil);

  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00009	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000d	75 0c		 jne	 SHORT $LN17@Max
  0000f	90		 npad	 1
$LL4@Max:

; 608  : 			_Pnode = _Right(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL4@Max
$LN17@Max:

; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  0001b	8b c1		 mov	 eax, ecx

; 693  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Myval, COMDAT

; 686  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 602  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H

; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@2@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Right, COMDAT

; 681  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Parent, COMDAT

; 676  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Left, COMDAT

; 671  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 673  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Isnil, COMDAT

; 666  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0d	 add	 eax, 13			; 0000000dH

; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Color, COMDAT

; 661  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 577  : 		return ((char&)_Pnode->_Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 5d 74 d1 05	 mov	 eax, 97612893		; 05d1745dH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 139  : 	}
; 140  : 
; 141  : 		// TEMPLATE FUNCTION _Construct
; 142  : template<class _Ty1,
; 143  : 	class _Ty2> inline
; 144  : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 145  : 	{	// construct object at _Ptr with value _Val
; 146  : 	void *_Vptr = _Ptr;
; 147  : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 148  : 	}
; 149  : 
; 150  : template<class _Ty1> inline
; 151  : 	void _Construct(_Ty1 *_Ptr)
; 152  : 	{	// construct object at _Ptr with default value
; 153  : 	void *_Vptr = _Ptr;
; 154  : 
; 155  : 	::new (_Vptr) _Ty1();
; 156  : 	}
; 157  : 
; 158  : 		// TEMPLATE FUNCTION _Destroy
; 159  : template<class _Ty> inline
; 160  : 	void _Destroy(_Ty *_Ptr)
; 161  : 	{	// destroy object at _Ptr
; 162  : 	_Ptr->~_Ty();
; 163  : 	}
; 164  : 
; 165  : 		// TEMPLATE FUNCTION _Destroy_range
; 166  : template<class _Alloc> inline
; 167  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 168  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 169  : 		_Nonscalar_ptr_iterator_tag)
; 170  : 	{	// destroy [_First, _Last), arbitrary type
; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d 5d 74 d1 05	 cmp	 eax, 97612893		; 05d1745dH
  0000e	77 31		 ja	 SHORT $LN16@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	6b c0 2c	 imul	 eax, eax, 44

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN7@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN18@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN19@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN20@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN21@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN7@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 909  : 		_Mybase::deallocate(_Ptr, _Count);
; 910  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN16@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  0005a	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> >::allocate
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 5d 74 d1 05	 mov	 eax, 97612893		; 05d1745dH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> >::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 5d 74 d1 05	 mov	 eax, 97612893		; 05d1745dH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> >::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d 5d 74 d1 05	 cmp	 eax, 97612893		; 05d1745dH
  00013	77 3c		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	6b c0 2c	 imul	 eax, eax, 44

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> >::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d 5d 74 d1 05	 cmp	 eax, 97612893		; 05d1745dH
  0000e	77 31		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	6b c0 2c	 imul	 eax, eax, 44

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 639  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005a	cc		 int	 3
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp
;	COMDAT ?Load@CConMember@@QAEXPAD@Z
_TEXT	SEGMENT
$T2 = -76						; size = 8
$T3 = -68						; size = 28
$T4 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
?Load@CConMember@@QAEXPAD@Z PROC			; CConMember::Load, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@CConMember@@QAEXPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]

; 52   : 	int count=0;
; 53   : 	int Token;
; 54   : 
; 55   : 	this->Init();

  0002f	e8 00 00 00 00	 call	 ?Init@CConMember@@QAEXXZ ; CConMember::Init

; 56   : 
; 57   : 	SMDFile = fopen( filename, "r");

  00034	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 _fopen
  0003f	83 c4 08	 add	 esp, 8
  00042	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 58   : 
; 59   : 	if ( SMDFile == 0 )

  00047	85 c0		 test	 eax, eax
  00049	75 1b		 jne	 SHORT $LN4@Load

; 60   : 	{
; 61   : 		MsgBox( lMsg.Get( MSGGET( 0, 112 ) ), filename );

  0004b	56		 push	 esi
  0004c	6a 70		 push	 112			; 00000070H
  0004e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00053	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0005e	83 c4 08	 add	 esp, 8

; 62   : 		return;

  00061	e9 61 01 00 00	 jmp	 $LN1@Load
$LN4@Load:

; 69   : 		Token = GetToken();

  00066	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 70   : 
; 71   : 		if ( Token == 2 )

  0006b	83 f8 02	 cmp	 eax, 2
  0006e	0f 84 37 01 00
	00		 je	 $LN804@Load
$LL2@Load:

; 72   : 		{
; 73   : 			break;
; 74   : 		}
; 75   : 		else
; 76   : 		{
; 77   : 			if ( Token == 0 )

  00074	85 c0		 test	 eax, eax
  00076	0f 85 21 01 00
	00		 jne	 $LN785@Load
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  0007c	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH

; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00083	89 45 e8	 mov	 DWORD PTR $T4[ebp+16], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00086	88 45 d8	 mov	 BYTE PTR $T4[ebp], al

; 523  : 		return (*_First == 0 ? 0

  00089	38 05 00 00 00
	00		 cmp	 BYTE PTR ?TokenString@@3PADA, al
  0008f	74 18		 je	 SHORT $LN144@Load
$LN143@Load:
  00091	b8 00 00 00 00	 mov	 eax, OFFSET ?TokenString@@3PADA
  00096	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00099	0f 1f 80 00 00
	00 00		 npad	 7
$LL807@Load:
  000a0	8a 08		 mov	 cl, BYTE PTR [eax]
  000a2	40		 inc	 eax
  000a3	84 c9		 test	 cl, cl
  000a5	75 f9		 jne	 SHORT $LL807@Load
  000a7	2b c2		 sub	 eax, edx
$LN144@Load:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  000a9	50		 push	 eax
  000aa	68 00 00 00 00	 push	 OFFSET ?TokenString@@3PADA
  000af	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  000b2	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)

  000b7	8b 4d ec	 mov	 ecx, DWORD PTR $T4[ebp+20]
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp

; 79   : 				this->m_szAccount.insert( std::pair<std::string, int>( (std::string)TokenString, 0 ) );

  000ba	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  000c1	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  000c8	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  000cf	c6 45 bc 00	 mov	 BYTE PTR $T3[ebp], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)

  000d3	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000d6	73 1e		 jae	 SHORT $LN293@Load

; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,

  000d8	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp+16]
  000db	83 c0 01	 add	 eax, 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 553  : 		return (_Count == 0 ? _First1

  000de	74 23		 je	 SHORT $LN294@Load
  000e0	50		 push	 eax
  000e1	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  000e4	50		 push	 eax
  000e5	8d 45 bc	 lea	 eax, DWORD PTR $T3[ebp]
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 954  : 		else

  000ee	8b 4d ec	 mov	 ecx, DWORD PTR $T4[ebp+20]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 553  : 		return (_Count == 0 ? _First1

  000f1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 954  : 		else

  000f4	eb 0d		 jmp	 SHORT $LN294@Load
$LN293@Load:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  000f6	8b 45 d8	 mov	 eax, DWORD PTR $T4[ebp]
  000f9	89 45 bc	 mov	 DWORD PTR $T3[ebp], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 957  : 			_Right._Bx()._Ptr = pointer();

  000fc	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], 0
$LN294@Load:

; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();

  00103	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp+16]
  00106	89 45 cc	 mov	 DWORD PTR $T3[ebp+16], eax

; 960  : 		this->_Myres() = _Right._Myres();

  00109	89 4d d0	 mov	 DWORD PTR $T3[ebp+20], ecx

; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  0010c	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH

; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00113	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0011a	c6 45 d8 00	 mov	 BYTE PTR $T4[ebp], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0011e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+24], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  00125	8d 45 bc	 lea	 eax, DWORD PTR $T3[ebp]
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp

; 79   : 				this->m_szAccount.insert( std::pair<std::string, int>( (std::string)TokenString, 0 ) );

  00128	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  0012c	50		 push	 eax
  0012d	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00130	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@$$QAU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buynode<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int> >

; 1094 : 		return (_Insert_nohint(false,

  00135	50		 push	 eax

; 602  : 		return ((reference)_Pnode->_Myval);

  00136	83 c0 10	 add	 eax, 16			; 00000010H

; 1094 : 		return (_Insert_nohint(false,

  00139	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0013c	50		 push	 eax
  0013d	6a 00		 push	 0
  0013f	8d 45 b4	 lea	 eax, DWORD PTR $T2[ebp]
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 ??$_Insert_nohint@AAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Insert_nohint<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> &,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int>,void *> *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00148	8b 45 d0	 mov	 eax, DWORD PTR $T3[ebp+20]
  0014b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0014e	72 0d		 jb	 SHORT $LN559@Load

; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  00150	40		 inc	 eax
  00151	8d 4d bc	 lea	 ecx, DWORD PTR $T3[ebp]
  00154	50		 push	 eax
  00155	ff 75 bc	 push	 DWORD PTR $T3[ebp]
  00158	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN559@Load:

; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  0015d	8b 45 ec	 mov	 eax, DWORD PTR $T4[ebp+20]

; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00160	c7 45 d0 0f 00
	00 00		 mov	 DWORD PTR $T3[ebp+20], 15 ; 0000000fH

; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00167	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0016e	c6 45 bc 00	 mov	 BYTE PTR $T3[ebp], 0
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp

; 79   : 				this->m_szAccount.insert( std::pair<std::string, int>( (std::string)TokenString, 0 ) );

  00172	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00179	83 f8 10	 cmp	 eax, 16			; 00000010H
  0017c	72 0d		 jb	 SHORT $LN676@Load

; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  0017e	40		 inc	 eax
  0017f	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00182	50		 push	 eax
  00183	ff 75 d8	 push	 DWORD PTR $T4[ebp]
  00186	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN676@Load:

; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  0018b	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T4[ebp+20], 15 ; 0000000fH

; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00192	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00199	c6 45 d8 00	 mov	 BYTE PTR $T4[ebp], 0
$LN785@Load:
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp

; 69   : 		Token = GetToken();

  0019d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 70   : 
; 71   : 		if ( Token == 2 )

  001a2	83 f8 02	 cmp	 eax, 2
  001a5	0f 85 c9 fe ff
	ff		 jne	 $LL2@Load
$LN804@Load:

; 80   : 			}
; 81   : 		}
; 82   : 	}
; 83   : 
; 84   : 	LogAddTD("[ConnectMember] Loaded %d accounts", this->m_szAccount.size());

  001ab	ff 77 08	 push	 DWORD PTR [edi+8]
  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@IKIIAFKL@?$FLConnectMember?$FN?5Loaded?5?$CFd?5accoun@
  001b3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 85   : 
; 86   : 	fclose( SMDFile );

  001b9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001bf	e8 00 00 00 00	 call	 _fclose
  001c4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Load:

; 87   : 
; 88   : }

  001c7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ca	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d1	59		 pop	 ecx
  001d2	5f		 pop	 edi
  001d3	5e		 pop	 esi
  001d4	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d7	33 cd		 xor	 ecx, ebp
  001d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@CConMember@@QAEXPAD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CConMember@@QAEXPAD@Z$1:
  00008	8d 4d bc	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@QAE@XZ
__ehhandler$?Load@CConMember@@QAEXPAD@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@CConMember@@QAEXPAD@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@CConMember@@QAEXPAD@Z ENDP			; CConMember::Load
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp
;	COMDAT ?IsMember@CConMember@@QAEHPAD@Z
_TEXT	SEGMENT
_it$ = -44						; size = 4
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_AccountID$ = 8						; size = 4
?IsMember@CConMember@@QAEHPAD@Z PROC			; CConMember::IsMember, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?IsMember@CConMember@@QAEHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	8b 75 08	 mov	 esi, DWORD PTR _AccountID$[ebp]

; 35   : 	if ( (AccountID == NULL ) || ( strcmp(AccountID, "") == 0 ) )

  0002f	85 f6		 test	 esi, esi
  00031	74 75		 je	 SHORT $LN3@IsMember
  00033	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00038	8b c6		 mov	 eax, esi
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL160@IsMember:
  00040	8a 08		 mov	 cl, BYTE PTR [eax]
  00042	3a 0a		 cmp	 cl, BYTE PTR [edx]
  00044	75 1a		 jne	 SHORT $LN161@IsMember
  00046	84 c9		 test	 cl, cl
  00048	74 12		 je	 SHORT $LN162@IsMember
  0004a	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0004d	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  00050	75 0e		 jne	 SHORT $LN161@IsMember
  00052	83 c0 02	 add	 eax, 2
  00055	83 c2 02	 add	 edx, 2
  00058	84 c9		 test	 cl, cl
  0005a	75 e4		 jne	 SHORT $LL160@IsMember
$LN162@IsMember:
  0005c	33 c0		 xor	 eax, eax
  0005e	eb 05		 jmp	 SHORT $LN163@IsMember
$LN161@IsMember:
  00060	1b c0		 sbb	 eax, eax
  00062	83 c8 01	 or	 eax, 1
$LN163@IsMember:
  00065	85 c0		 test	 eax, eax
  00067	74 3f		 je	 SHORT $LN3@IsMember

; 38   : 	}
; 39   : 
; 40   : 	std::map<std::string, int>::iterator it = this->m_szAccount.find( (std::string) AccountID );

  00069	56		 push	 esi
  0006a	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0006d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00072	50		 push	 eax
  00073	8d 45 d4	 lea	 eax, DWORD PTR _it$[ebp]
  00076	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007d	50		 push	 eax
  0007e	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00081	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::find
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00086	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp+20]
  00089	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008c	72 0d		 jb	 SHORT $LN13@IsMember

; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  0008e	40		 inc	 eax
  0008f	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00092	50		 push	 eax
  00093	ff 75 d8	 push	 DWORD PTR $T2[ebp]
  00096	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN13@IsMember:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  0009b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp

; 42   : 	if ( it != this->m_szAccount.end() )

  0009e	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 334  : 		return (this->_Ptr == _Right._Ptr);

  000a0	39 4d d4	 cmp	 DWORD PTR _it$[ebp], ecx
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp

; 42   : 	if ( it != this->m_szAccount.end() )

  000a3	0f 95 c0	 setne	 al

; 43   : 	{
; 44   : 		return TRUE;
; 45   : 	}
; 46   : 
; 47   : 	return FALSE;

  000a6	eb 02		 jmp	 SHORT $LN1@IsMember
$LN3@IsMember:

; 36   : 	{
; 37   : 		return FALSE;

  000a8	33 c0		 xor	 eax, eax
$LN1@IsMember:

; 48   : }

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IsMember@CConMember@@QAEHPAD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?IsMember@CConMember@@QAEHPAD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?IsMember@CConMember@@QAEHPAD@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?IsMember@CConMember@@QAEHPAD@Z ENDP			; CConMember::IsMember
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp
;	COMDAT ?Init@CConMember@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?Init@CConMember@@QAEXXZ PROC				; CConMember::Init, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Init@CConMember@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 30   : 	this->m_szAccount.clear();

  00023	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1477 : 		_Erase(_Root());

  00026	8b 06		 mov	 eax, DWORD PTR [esi]
  00028	8b ce		 mov	 ecx, esi
  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00031	ff 70 04	 push	 DWORD PTR [eax+4]
  00034	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Erase

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00039	8b 06		 mov	 eax, DWORD PTR [esi]

; 1478 : 		_Root() = this->_Myhead();

  0003b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1479 : 		_Lmost() = this->_Myhead();

  0003e	8b 06		 mov	 eax, DWORD PTR [esi]
  00040	89 00		 mov	 DWORD PTR [eax], eax

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00042	8b 06		 mov	 eax, DWORD PTR [esi]

; 1480 : 		_Rmost() = this->_Myhead();

  00044	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1481 : 		this->_Mysize() = 0;

  00047	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp

; 31   : }

  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	5e		 pop	 esi
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Init@CConMember@@QAEXXZ$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$?Init@CConMember@@QAEXXZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Init@CConMember@@QAEXXZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Init@CConMember@@QAEXXZ ENDP				; CConMember::Init
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp
;	COMDAT ??1CConMember@@UAE@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CConMember@@UAE@XZ PROC				; CConMember::~CConMember, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CConMember@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CConMember@@6B@

; 25   : }

  0002a	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  0002d	8b 06		 mov	 eax, DWORD PTR [esi]

; 1127 : 		_Tidy();
; 1128 : 		}
; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2116 : 
; 2117 : 		if (_Wherenode == _Root())
; 2118 : 			_Root() = _Pnode;
; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;
; 2125 : 		this->_Parent(_Wherenode) = _Pnode;
; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2146 : 
; 2147 : 		if (_Wherenode == _Root())
; 2148 : 			_Root() = _Pnode;
; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;
; 2155 : 		this->_Parent(_Wherenode) = _Pnode;
; 2156 : 		}
; 2157 : 
; 2158 : 	template<class _Other>
; 2159 : 		_Nodeptr _Ubound(const _Other& _Keyval) const
; 2160 : 		{	// find leftmost node greater than _Keyval
; 2161 : 		_Nodeptr _Pnode = _Root();
; 2162 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2163 : 
; 2164 : 		while (!this->_Isnil(_Pnode))
; 2165 : 			if (_Compare(_Keyval, this->_Key(_Pnode)))
; 2166 : 				{	// _Pnode greater than _Keyval, remember it
; 2167 : 				_Wherenode = _Pnode;
; 2168 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2169 : 				}
; 2170 : 			else
; 2171 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2172 : 
; 2173 : 		return (_Wherenode);	// return best remembered candidate
; 2174 : 		}
; 2175 : 
; 2176 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2177 : 	void _Orphan_ptr(_Nodeptr _Ptr)
; 2178 : 		{	// orphan iterators with specified node pointers
; 2179 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2180 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
; 2181 : 		if (_Pnext != 0)
; 2182 : 			while (*_Pnext != 0)
; 2183 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 2184 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2185 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2186 : 				else
; 2187 : 					{	// orphan the iterator
; 2188 : 					(*_Pnext)->_Clrcont();
; 2189 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2190 : 					}
; 2191 : 		}
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2193 : 
; 2194 : 	void _Tidy()
; 2195 : 		{	// free all storage
; 2196 : 		erase(begin(), end());

  0002f	8b ce		 mov	 ecx, esi
  00031	50		 push	 eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();
; 718  : 		}
; 719  : 
; 720  : 	~_Tree_comp_alloc() _NOEXCEPT
; 721  : 		{	// destroy head node
; 722  : 		_Freeheadnode(_Myhead());
; 723  : 		}
; 724  : 
; 725  : 	void _Copy_alloc(const _Alty& _Al)
; 726  : 		{	// replace old allocator
; 727  : 		_Pocca(_Getal(), _Al);
; 728  : 		}
; 729  : 
; 730  : 	void _Move_alloc(_Alty& _Al)
; 731  : 		{	// replace old allocator
; 732  : 		_Pocma(_Getal(), _Al);
; 733  : 		}
; 734  : 
; 735  : 	void _Swap_alloc(_Myt& _Right)
; 736  : 		{	// swap allocators
; 737  : 		_Pocs(_Getal(), _Right._Getal());
; 738  : 		}
; 739  : 
; 740  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 741  : 	void _Construct()
; 742  : 		{	// construct head node, proxy
; 743  : 		_Myhead() = _Buyheadnode();
; 744  : 		_TRY_BEGIN
; 745  : 		_Alloc_proxy();
; 746  : 		_CATCH_ALL
; 747  : 		_Freeheadnode(_Myhead());
; 748  : 		_RERAISE;
; 749  : 		_CATCH_END
; 750  : 		}
; 751  : 
; 752  : 	~_Tree_comp_alloc() _NOEXCEPT
; 753  : 		{	// destroy head node, proxy
; 754  : 		_Freeheadnode(_Myhead());
; 755  : 		_Free_proxy();
; 756  : 		}
; 757  : 
; 758  : 	void _Copy_alloc(const _Alty& _Al)
; 759  : 		{	// replace old allocator
; 760  : 		_Free_proxy();
; 761  : 		_Pocca(_Getal(), _Al);
; 762  : 		_Alloc_proxy();
; 763  : 		}
; 764  : 
; 765  : 	void _Move_alloc(_Alty& _Al)
; 766  : 		{	// replace old allocator
; 767  : 		_Free_proxy();
; 768  : 		_Pocma(_Getal(), _Al);
; 769  : 		_Alloc_proxy();
; 770  : 		}
; 771  : 
; 772  : 	void _Swap_alloc(_Myt& _Right)
; 773  : 		{	// swap allocators
; 774  : 		_Pocs(_Getal(), _Right._Getal());
; 775  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 776  : 		}
; 777  : 
; 778  : 	void _Alloc_proxy()
; 779  : 		{	// construct proxy
; 780  : 		typename _Alty::template rebind<_Container_proxy>::other
; 781  : 			_Alproxy(_Getal());
; 782  : 		_Myproxy() = _Alproxy.allocate(1);
; 783  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 784  : 		_Myproxy()->_Mycont = &_Get_data();
; 785  : 		}
; 786  : 
; 787  : 	void _Free_proxy()
; 788  : 		{	// destroy proxy
; 789  : 		typename _Alty::template rebind<_Container_proxy>::other
; 790  : 			_Alproxy(_Getal());
; 791  : 		_Orphan_all();
; 792  : 		_Alproxy.destroy(_Myproxy());
; 793  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 794  : 		_Myproxy() = 0;
; 795  : 		}
; 796  : 
; 797  : 	_Iterator_base12 **_Getpfirst() const
; 798  : 		{	// get address of iterator chain
; 799  : 		return (_Get_data()._Getpfirst());
; 800  : 		}
; 801  : 
; 802  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 803  : 		{	// return reference to _Myproxy
; 804  : 		return (_Get_data()._Myproxy);
; 805  : 		}
; 806  : 
; 807  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 808  : 		{	// return const reference to _Myproxy
; 809  : 		return (_Get_data()._Myproxy);
; 810  : 		}
; 811  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 812  : 
; 813  : 	void _Orphan_all()
; 814  : 		{	// orphan all iterators
; 815  : 		_Get_data()._Orphan_all();
; 816  : 		}
; 817  : 
; 818  : 	void _Swap_all(_Myt& _Right)
; 819  : 		{	// swap all iterators
; 820  : 		_Get_data()._Swap_all(_Right._Get_data());
; 821  : 		}
; 822  : 
; 823  : 	_Nodeptr _Buyheadnode()
; 824  : 		{	// get head node using current allocator
; 825  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 826  : 
; 827  : 		_TRY_BEGIN
; 828  : 		_Getal().construct(
; 829  : 			_STD addressof(_Left(_Pnode)), _Pnode);
; 830  : 		_Getal().construct(
; 831  : 			_STD addressof(_Parent(_Pnode)), _Pnode);
; 832  : 		_Getal().construct(
; 833  : 			_STD addressof(_Right(_Pnode)), _Pnode);
; 834  : 		_CATCH_ALL
; 835  : 		_Getal().deallocate(_Pnode, 1);
; 836  : 		_RERAISE;
; 837  : 		_CATCH_END
; 838  : 
; 839  : 		_Color(_Pnode) = _Black;
; 840  : 		_Isnil(_Pnode) = true;
; 841  : 		return (_Pnode);
; 842  : 		}
; 843  : 
; 844  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 845  : 		{	// free head node using current allocator
; 846  : 		_Getal().destroy(
; 847  : 			_STD addressof(_Left(_Pnode)));
; 848  : 		_Getal().destroy(
; 849  : 			_STD addressof(_Parent(_Pnode)));
; 850  : 		_Getal().destroy(
; 851  : 			_STD addressof(_Right(_Pnode)));
; 852  : 		_Getal().deallocate(_Pnode, 1);
; 853  : 		}
; 854  : 
; 855  : 	_Nodeptr _Buynode0()
; 856  : 		{	// allocate a non-value node
; 857  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		_Getal().construct(
; 861  : 			_STD addressof(_Left(_Pnode)), _Myhead());
; 862  : 		_Getal().construct(
; 863  : 			_STD addressof(_Parent(_Pnode)), _Myhead());
; 864  : 		_Getal().construct(
; 865  : 			_STD addressof(_Right(_Pnode)), _Myhead());
; 866  : 		_CATCH_ALL
; 867  : 		_Getal().deallocate(_Pnode, 1);
; 868  : 		_RERAISE;
; 869  : 		_CATCH_END
; 870  : 
; 871  : 		return (_Pnode);
; 872  : 		}
; 873  : 
; 874  : 	void _Freenode0(_Nodeptr _Pnode)
; 875  : 		{	// free non-value node using current allocator
; 876  : 		_Getal().destroy(
; 877  : 			_STD addressof(_Left(_Pnode)));
; 878  : 		_Getal().destroy(
; 879  : 			_STD addressof(_Parent(_Pnode)));
; 880  : 		_Getal().destroy(
; 881  : 			_STD addressof(_Right(_Pnode)));
; 882  : 		_Getal().deallocate(_Pnode, 1);
; 883  : 		}
; 884  : 
; 885  : 	template<class... _Valty>
; 886  : 		_Nodeptr _Buynode(_Valty&&... _Val)
; 887  : 		{	// allocate a node with defaults and set links and value
; 888  : 		_Nodeptr _Pnode = _Buynode0();
; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;
; 891  : 		this->_Isnil(_Pnode) = false;
; 892  : 
; 893  : 		_TRY_BEGIN
; 894  : 		this->_Getal().construct(
; 895  : 			_STD addressof(_Myval(_Pnode)),
; 896  : 				_STD forward<_Valty>(_Val)...);
; 897  : 		_CATCH_ALL
; 898  : 		_Freenode0(_Pnode);
; 899  : 		_RERAISE;
; 900  : 		_CATCH_END
; 901  : 
; 902  : 		return (_Pnode);
; 903  : 		}
; 904  : 
; 905  : 
; 906  : 	key_compare& _Getcomp() _NOEXCEPT
; 907  : 		{	// return reference to ordering predicate
; 908  : 		return (_Mypair._Get_first());
; 909  : 		}
; 910  : 
; 911  : 	const key_compare& _Getcomp() const _NOEXCEPT
; 912  : 		{	// return const reference to ordering predicate
; 913  : 		return (_Mypair._Get_first());
; 914  : 		}
; 915  : 
; 916  : 	_Alty& _Getal() _NOEXCEPT
; 917  : 		{	// return reference to allocator
; 918  : 		return (_Mypair._Get_second()._Get_first());
; 919  : 		}
; 920  : 
; 921  : 	const _Alty& _Getal() const _NOEXCEPT
; 922  : 		{	// return const reference to allocator
; 923  : 		return (_Mypair._Get_second()._Get_first());
; 924  : 		}
; 925  : 
; 926  : 	_Tree_val<_Val_types>& _Get_data() _NOEXCEPT
; 927  : 		{	// return reference to _Tree_val
; 928  : 		return (_Mypair._Get_second()._Get_second());
; 929  : 		}
; 930  : 
; 931  : 	const _Tree_val<_Val_types>& _Get_data() const _NOEXCEPT
; 932  : 		{	// return const reference to _Tree_val
; 933  : 		return (_Mypair._Get_second()._Get_second());
; 934  : 		}
; 935  : 
; 936  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 937  : 		{	// return reference to _Myhead
; 938  : 		return (_Get_data()._Myhead);
; 939  : 		}
; 940  : 
; 941  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 942  : 		{	// return const reference to _Myhead
; 943  : 		return (_Get_data()._Myhead);
; 944  : 		}
; 945  : 
; 946  : 	size_type& _Mysize() _NOEXCEPT
; 947  : 		{	// return reference to _Mysize
; 948  : 		return (_Get_data()._Mysize);
; 949  : 		}
; 950  : 
; 951  : 	const size_type& _Mysize() const _NOEXCEPT
; 952  : 		{	// return const reference to _Mysize
; 953  : 		return (_Get_data()._Mysize);
; 954  : 		}
; 955  : 
; 956  : private:
; 957  : 	_Compressed_pair<key_compare,
; 958  : 		_Compressed_pair<_Alty, _Tree_val<_Val_types> > > _Mypair;
; 959  : 	};
; 960  : 
; 961  : 		// TEMPLATE CLASS _Tree
; 962  : template<class _Traits>
; 963  : 	class _Tree
; 964  : 		: public _Tree_comp_alloc<_Traits>
; 965  : 	{	// ordered red-black tree for map/multimap/set/multiset
; 966  : public:
; 967  : 	typedef _Tree<_Traits> _Myt;
; 968  : 	typedef _Tree_comp_alloc<_Traits> _Mybase;
; 969  : 
; 970  : 	typedef typename _Traits::key_type key_type;
; 971  : 	typedef typename _Traits::value_compare value_compare;
; 972  : 	enum
; 973  : 		{	// get multi parameter
; 974  : 		_Multi = _Traits::_Multi};
; 975  : 
; 976  : 	typedef typename _Mybase::_Node _Node;
; 977  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 978  : 	typedef typename _Mybase::_Alty _Alty;
; 979  : 
; 980  : 	typedef typename _Mybase::key_compare key_compare;
; 981  : 	typedef typename _Mybase::allocator_type allocator_type;
; 982  : 
; 983  : 	typedef typename _Mybase::value_type value_type;
; 984  : 	typedef typename _Mybase::size_type size_type;
; 985  : 	typedef typename _Mybase::difference_type difference_type;
; 986  : 	typedef typename _Mybase::pointer pointer;
; 987  : 	typedef typename _Mybase::const_pointer const_pointer;
; 988  : 	typedef typename _Mybase::reference reference;
; 989  : 	typedef typename _Mybase::const_reference const_reference;
; 990  : 
; 991  : 	typedef typename _Mybase::const_iterator const_iterator;
; 992  : 	typedef typename _If<is_same<key_type, value_type>::value,
; 993  : 		typename _Mybase::const_iterator,
; 994  : 		typename _Mybase::iterator>::type iterator;
; 995  : 
; 996  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 997  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 998  : 
; 999  : 	typedef pair<iterator, bool> _Pairib;
; 1000 : 	typedef pair<iterator, iterator> _Pairii;
; 1001 : 	typedef pair<const_iterator, const_iterator> _Paircc;
; 1002 : 
; 1003 : 	struct _Copy_tag
; 1004 : 		{	// signals copying
; 1005 : 		};
; 1006 : 	struct _Move_tag
; 1007 : 		{	// signals moving
; 1008 : 		};
; 1009 : 
; 1010 : 	_Tree(const key_compare& _Parg,
; 1011 : 		const allocator_type& _Al)
; 1012 : 		: _Mybase(_Parg, _Al)
; 1013 : 		{	// construct empty tree
; 1014 : 		}
; 1015 : 
; 1016 : 	_Tree(const _Myt& _Right, const allocator_type& _Al)
; 1017 : 		: _Mybase(_Right.key_comp(), _Al)
; 1018 : 		{	// construct tree by copying _Right, allocator
; 1019 : 		_TRY_BEGIN
; 1020 : 		_Copy(_Right, _Copy_tag());
; 1021 : 		_CATCH_ALL
; 1022 : 		_Tidy();
; 1023 : 		_RERAISE;
; 1024 : 		_CATCH_END
; 1025 : 		}
; 1026 : 
; 1027 : 	_Tree(_Myt&& _Right)
; 1028 : 		: _Mybase(_Right.key_comp(), _STD move(_Right._Getal()))
; 1029 : 		{	// construct tree by moving _Right
; 1030 : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1031 : 		}
; 1032 : 
; 1033 : 	_Tree(_Myt&& _Right, const allocator_type& _Al)
; 1034 : 		: _Mybase(_Right.key_comp(), _Al)
; 1035 : 		{	// construct tree by moving _Right, allocator
; 1036 : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 1037 : 		}
; 1038 : 
; 1039 : 	_Myt& operator=(_Myt&& _Right)
; 1040 : 		{	// assign by moving _Right
; 1041 : 		if (this != &_Right)
; 1042 : 			{	// different, move it
; 1043 : 			clear();
; 1044 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1045 : 				&& this->_Getal() != _Right._Getal())
; 1046 : 				this->_Move_alloc(_Right._Getal());
; 1047 : 
; 1048 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1049 : 			}
; 1050 : 		return (*this);
; 1051 : 		}
; 1052 : 
; 1053 : 	void _Assign_rv(_Myt&& _Right, true_type)
; 1054 : 		{	// move from _Right, stealing its contents
; 1055 : 		this->_Swap_all(_Right);
; 1056 : 		_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1057 : 		_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1058 : 		_STD swap(this->_Mysize(), _Right._Mysize());
; 1059 : 		}
; 1060 : 
; 1061 : 	void _Assign_rv(_Myt&& _Right, false_type)
; 1062 : 		{	// move from _Right, possibly moving its contents
; 1063 : 		if (get_allocator() == _Right.get_allocator())
; 1064 : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1065 : 		else
; 1066 : 			_Copy(_Right, _Move_tag());
; 1067 : 		}
; 1068 : 
; 1069 : 	void _Assign_rv(_Myt&& _Right)
; 1070 : 		{	// assign by moving _Right
; 1071 : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 1072 : 			typename _Alty::propagate_on_container_move_assignment());
; 1073 : 		}
; 1074 : 
; 1075 : 
; 1076 : 	_Pairib insert(value_type&& _Val)
; 1077 : 		{	// try to insert node with value _Val, favoring right side
; 1078 : 		return (_Insert_nohint(false,
; 1079 : 			_STD forward<value_type>(_Val), _Nil()));
; 1080 : 		}
; 1081 : 
; 1082 : 	iterator insert(const_iterator _Where, value_type&& _Val)
; 1083 : 		{	// try to insert node with value _Val using _Where as a hint
; 1084 : 		return (_Insert_hint(_Where,
; 1085 : 			_STD forward<value_type>(_Val), _Nil()));
; 1086 : 		}
; 1087 : 
; 1088 : 	template<class _Valty>
; 1089 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1090 : 			_Pairib>::type
; 1091 : 		insert(_Valty&& _Val)
; 1092 : 		{	// try to insert node with value _Val, favoring right side
; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1094 : 		return (_Insert_nohint(false,
; 1095 : 			this->_Myval(_Newnode), _Newnode));
; 1096 : 		}
; 1097 : 
; 1098 : 	template<class _Valty>
; 1099 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1100 : 			iterator>::type
; 1101 : 		insert(const_iterator _Where, _Valty&& _Val)
; 1102 : 		{	// try to insert node with value _Val using _Where as a hint
; 1103 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1104 : 		return (_Insert_hint(_Where,
; 1105 : 			this->_Myval(_Newnode), _Newnode));
; 1106 : 		}
; 1107 : 
; 1108 : 	template<class... _Valty>
; 1109 : 		_Pairib emplace(_Valty&&... _Val)
; 1110 : 		{	// try to insert value_type(_Val...), favoring right side
; 1111 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1112 : 		return (_Insert_nohint(false,
; 1113 : 			this->_Myval(_Newnode), _Newnode));
; 1114 : 		}
; 1115 : 
; 1116 : 	template<class... _Valty>
; 1117 : 		iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
; 1118 : 		{	// insert value_type(_Val...) at _Where
; 1119 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1120 : 		return (_Insert_hint(_Where,
; 1121 : 			this->_Myval(_Newnode), _Newnode));
; 1122 : 		}
; 1123 : 
; 1124 : 
; 1125 : 	~_Tree() _NOEXCEPT
; 1126 : 		{	// destroy tree

  00032	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1127 : 		_Tidy();
; 1128 : 		}
; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2116 : 
; 2117 : 		if (_Wherenode == _Root())
; 2118 : 			_Root() = _Pnode;
; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;
; 2125 : 		this->_Parent(_Wherenode) = _Pnode;
; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2146 : 
; 2147 : 		if (_Wherenode == _Root())
; 2148 : 			_Root() = _Pnode;
; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;
; 2155 : 		this->_Parent(_Wherenode) = _Pnode;
; 2156 : 		}
; 2157 : 
; 2158 : 	template<class _Other>
; 2159 : 		_Nodeptr _Ubound(const _Other& _Keyval) const
; 2160 : 		{	// find leftmost node greater than _Keyval
; 2161 : 		_Nodeptr _Pnode = _Root();
; 2162 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2163 : 
; 2164 : 		while (!this->_Isnil(_Pnode))
; 2165 : 			if (_Compare(_Keyval, this->_Key(_Pnode)))
; 2166 : 				{	// _Pnode greater than _Keyval, remember it
; 2167 : 				_Wherenode = _Pnode;
; 2168 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2169 : 				}
; 2170 : 			else
; 2171 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2172 : 
; 2173 : 		return (_Wherenode);	// return best remembered candidate
; 2174 : 		}
; 2175 : 
; 2176 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2177 : 	void _Orphan_ptr(_Nodeptr _Ptr)
; 2178 : 		{	// orphan iterators with specified node pointers
; 2179 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2180 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
; 2181 : 		if (_Pnext != 0)
; 2182 : 			while (*_Pnext != 0)
; 2183 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 2184 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2185 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2186 : 				else
; 2187 : 					{	// orphan the iterator
; 2188 : 					(*_Pnext)->_Clrcont();
; 2189 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2190 : 					}
; 2191 : 		}
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2193 : 
; 2194 : 	void _Tidy()
; 2195 : 		{	// free all storage
; 2196 : 		erase(begin(), end());

  00039	ff 30		 push	 DWORD PTR [eax]
  0003b	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00044	ff 36		 push	 DWORD PTR [esi]
  00046	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004b	83 c4 04	 add	 esp, 4
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp

; 25   : }

  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	5e		 pop	 esi
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CConMember@@UAE@XZ$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__unwindfunclet$??1CConMember@@UAE@XZ$1:
  00006	e8 00 00 00 00	 call	 ___std_terminate
  0000b	c3		 ret	 0
__ehhandler$??1CConMember@@UAE@XZ:
  0000c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00010	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00013	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00016	33 c8		 xor	 ecx, eax
  00018	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CConMember@@UAE@XZ
  00022	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CConMember@@UAE@XZ ENDP				; CConMember::~CConMember
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp
;	COMDAT ??0CConMember@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
_this$ = -4						; size = 4
??0CConMember@@QAE@XZ PROC				; CConMember::CConMember, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  0000b	89 7d fc	 mov	 DWORD PTR _this$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 717  : 		_Myhead() = _Buyheadnode();

  0000e	8b ce		 mov	 ecx, esi
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp

; 18   : {

  00010	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00013	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CConMember@@6B@
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  00019	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  0001f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 717  : 		_Myhead() = _Buyheadnode();

  00026	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,int> >,0> >::_Buyheadnode
  0002b	89 06		 mov	 DWORD PTR [esi], eax
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp

; 20   : }

  0002d	8b c7		 mov	 eax, edi
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??0CConMember@@QAE@XZ ENDP				; CConMember::CConMember
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$_Move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAD@std@@YA$$QADAAD@Z PROC			; std::_Move<char &>, COMDAT

; 1257 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1258 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1259 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAD@std@@YA$$QADAAD@Z ENDP			; std::_Move<char &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@D@std@@YAPADAADU?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@D@std@@YAPADAADU?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<char>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@D@std@@YAPADAADU?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z PROC ; std::forward<std::allocator<char> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ENDP ; std::forward<std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT

; 51   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);
; 53   : 	_Left = _Move(_Right);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  00009	53		 push	 ebx
  0000a	8a 01		 mov	 al, BYTE PTR [ecx]
  0000c	8a 1a		 mov	 bl, BYTE PTR [edx]
  0000e	88 02		 mov	 BYTE PTR [edx], al

; 54   : 	_Right = _Move(_Tmp);

  00010	88 19		 mov	 BYTE PTR [ecx], bl
  00012	5b		 pop	 ebx

; 55   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 488  : 		_Mysize = 0;

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00007	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 489  : 		_Myres = 0;

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00010	c2 08 00	 ret	 8
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 488  : 		_Mysize = 0;

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00007	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 489  : 		_Myres = 0;

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00010	c2 08 00	 ret	 8
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1249 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1250 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1251 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z PROC ; std::move<std::_Wrap_alloc<std::allocator<char> > &>, COMDAT

; 1249 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1250 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1251 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z ENDP ; std::move<std::_Wrap_alloc<std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2252 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN4@Xran:
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2247 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2229 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2230 : 		if (!_Built)

  00003	80 7d 08 00	 cmp	 BYTE PTR __Built$[ebp], 0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 26		 je	 SHORT $LN4@Tidy

; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00010	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00014	72 20		 jb	 SHORT $LN4@Tidy

; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;

  00016	53		 push	 ebx
  00017	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)

  00019	85 ff		 test	 edi, edi
  0001b	74 0b		 je	 SHORT $LN58@Tidy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 530  : 		return (_Count == 0 ? _First1

  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 _memcpy
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN58@Tidy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  00028	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002b	8b ce		 mov	 ecx, esi
  0002d	40		 inc	 eax
  0002e	50		 push	 eax
  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
  00035	5b		 pop	 ebx
$LN4@Tidy:

; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00036	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 506  : 			? _STD addressof(*this->_Bx._Ptr)
; 507  : 			: this->_Bx._Buf);
; 508  : 		}
; 509  : 
; 510  : 	const value_type *_Myptr() const
; 511  : 		{	// determine current pointer to buffer for nonmutable string
; 512  : 		return (this->_BUF_SIZE <= this->_Myres
; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}
; 516  : 
; 517  : 	union _Bxty
; 518  : 		{	// storage for small buffer or pointer to larger one
; 519  : 		value_type _Buf[_BUF_SIZE];
; 520  : 		pointer _Ptr;
; 521  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 522  : 		} _Bx;
; 523  : 
; 524  : 	size_type _Mysize;	// current length of string
; 525  : 	size_type _Myres;	// current storage reserved for string
; 526  : 	};
; 527  : 
; 528  : 		// TEMPLATE CLASS _String_alloc
; 529  : template<class _Alloc_types>
; 530  : 	class _String_alloc
; 531  : 	{	// base class for basic_string to hold allocator
; 532  : public:
; 533  : 	typedef _String_alloc<_Alloc_types> _Myt;
; 534  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 535  : 	typedef typename _Alloc_types::_Alty _Alty;
; 536  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 537  : 
; 538  : 	typedef typename _Val_types::value_type value_type;
; 539  : 	typedef typename _Val_types::size_type size_type;
; 540  : 	typedef typename _Val_types::difference_type difference_type;
; 541  : 	typedef typename _Val_types::pointer pointer;
; 542  : 	typedef typename _Val_types::const_pointer const_pointer;
; 543  : 	typedef typename _Val_types::reference reference;
; 544  : 	typedef typename _Val_types::const_reference const_reference;
; 545  : 
; 546  : 	typedef _String_iterator<_String_val<_Val_types> > iterator;
; 547  : 	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;
; 548  : 
; 549  : 	enum
; 550  : 		{	// length of internal buffer, [1, 16]
; 551  : 		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
; 552  : 		};
; 553  : 
; 554  : 	enum
; 555  : 		{	// roundup mask for allocated buffers, [0, 15]
; 556  : 		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
; 557  : 		};
; 558  : 
; 559  : 	value_type *_Myptr()
; 560  : 		{	// determine current pointer to buffer for mutable string
; 561  : 		return (_Get_data()._Myptr());
; 562  : 		}
; 563  : 
; 564  : 	const value_type *_Myptr() const
; 565  : 		{	// determine current pointer to buffer for nonmutable string
; 566  : 		return (_Get_data()._Myptr());
; 567  : 		}
; 568  : 
; 569  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 570  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 571  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 572  : 		{	// construct allocator from _Al
; 573  : 		}
; 574  : 
; 575  : 	_String_alloc(_Alloc&& _Al)
; 576  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 577  : 		{	// construct allocator from _Al
; 578  : 		}
; 579  : 
; 580  : 	void _Copy_alloc(const _Alty& _Al)
; 581  : 		{	// replace old allocator
; 582  : 		_Pocca(_Getal(), _Al);
; 583  : 		}
; 584  : 
; 585  : 	void _Move_alloc(_Alty& _Al)
; 586  : 		{	// replace old allocator
; 587  : 		_Pocma(_Getal(), _Al);
; 588  : 		}
; 589  : 
; 590  : 	void _Swap_alloc(_Myt& _Right)
; 591  : 		{	// swap allocators
; 592  : 		_Pocs(_Getal(), _Right._Getal());
; 593  : 		}
; 594  : 
; 595  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 596  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 597  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 598  : 		{	// construct allocator from _Al
; 599  : 		_Alloc_proxy();
; 600  : 		}
; 601  : 
; 602  : 	_String_alloc(_Alloc&& _Al)
; 603  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 604  : 		{	// construct allocator from _Al
; 605  : 		_Alloc_proxy();
; 606  : 		}
; 607  : 
; 608  : 	~_String_alloc() _NOEXCEPT
; 609  : 		{	// destroy the object
; 610  : 		_Free_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Copy_alloc(const _Alty& _Al)
; 614  : 		{	// replace old allocator
; 615  : 		_Free_proxy();
; 616  : 		_Pocca(_Getal(), _Al);
; 617  : 		_Alloc_proxy();
; 618  : 		}
; 619  : 
; 620  : 	void _Move_alloc(_Alty& _Al)
; 621  : 		{	// replace old allocator
; 622  : 		_Free_proxy();
; 623  : 		_Pocma(_Getal(), _Al);
; 624  : 		_Alloc_proxy();
; 625  : 		}
; 626  : 
; 627  : 	void _Swap_alloc(_Myt& _Right)
; 628  : 		{	// swap allocators
; 629  : 		_Pocs(_Getal(), _Right._Getal());
; 630  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 631  : 		}
; 632  : 
; 633  : 	void _Alloc_proxy()
; 634  : 		{	// construct proxy
; 635  : 		typename _Alty::template rebind<_Container_proxy>::other
; 636  : 			_Alproxy(_Getal());
; 637  : 		_Myproxy() = _Alproxy.allocate(1);
; 638  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 639  : 		_Myproxy()->_Mycont = &_Get_data();
; 640  : 		}
; 641  : 
; 642  : 	void _Free_proxy()
; 643  : 		{	// destroy proxy
; 644  : 		typename _Alty::template rebind<_Container_proxy>::other
; 645  : 			_Alproxy(_Getal());
; 646  : 		_Orphan_all();
; 647  : 		_Alproxy.destroy(_Myproxy());
; 648  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 649  : 		_Myproxy() = 0;
; 650  : 		}
; 651  : 
; 652  : 	_Iterator_base12 **_Getpfirst() const
; 653  : 		{	// get address of iterator chain
; 654  : 		return (_Get_data()._Getpfirst());
; 655  : 		}
; 656  : 
; 657  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 658  : 		{	// return reference to _Myproxy
; 659  : 		return (_Get_data()._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 663  : 		{	// return const reference to _Myproxy
; 664  : 		return (_Get_data()._Myproxy);
; 665  : 		}
; 666  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 667  : 
; 668  : 	void _Orphan_all()
; 669  : 		{	// orphan all iterators
; 670  : 		_Get_data()._Orphan_all();
; 671  : 		}
; 672  : 
; 673  : 	void _Swap_all(_Myt& _Right)
; 674  : 		{	// swap all iterators
; 675  : 		_Get_data()._Swap_all(_Right._Get_data());
; 676  : 		}
; 677  : 
; 678  : 	_Alty& _Getal() _NOEXCEPT
; 679  : 		{	// return reference to allocator
; 680  : 		return (_Mypair._Get_first());
; 681  : 		}
; 682  : 
; 683  : 	const _Alty& _Getal() const _NOEXCEPT
; 684  : 		{	// return const reference to allocator
; 685  : 		return (_Mypair._Get_first());
; 686  : 		}
; 687  : 
; 688  : 	_String_val<_Val_types>& _Get_data() _NOEXCEPT
; 689  : 		{	// return reference to _String_val
; 690  : 		return (_Mypair._Get_second());
; 691  : 		}
; 692  : 
; 693  : 	const _String_val<_Val_types>& _Get_data() const _NOEXCEPT
; 694  : 		{	// return const reference to _String_val
; 695  : 		return (_Mypair._Get_second());
; 696  : 		}
; 697  : 
; 698  : 	typedef typename _String_val<_Val_types>::_Bxty _Bxty;
; 699  : 
; 700  : 	_Bxty& _Bx() _NOEXCEPT
; 701  : 		{	// return reference to _Bx
; 702  : 		return (_Get_data()._Bx);
; 703  : 		}
; 704  : 
; 705  : 	const _Bxty& _Bx() const _NOEXCEPT
; 706  : 		{	// return const reference to _Bx
; 707  : 		return (_Get_data()._Bx);
; 708  : 		}
; 709  : 
; 710  : 	size_type& _Mysize() _NOEXCEPT
; 711  : 		{	// return reference to _Mysize
; 712  : 		return (_Get_data()._Mysize);
; 713  : 		}
; 714  : 
; 715  : 	const size_type& _Mysize() const _NOEXCEPT
; 716  : 		{	// return const reference to _Mysize
; 717  : 		return (_Get_data()._Mysize);
; 718  : 		}
; 719  : 
; 720  : 	size_type& _Myres() _NOEXCEPT
; 721  : 		{	// return reference to _Myres
; 722  : 		return (_Get_data()._Myres);
; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  0003d	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00040	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00044	72 0c		 jb	 SHORT $LN104@Tidy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00046	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00048	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2243 : 		}

  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
$LN104@Tidy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00052	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2243 : 		}

  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2219 : 		{	// test if _Ptr points inside string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	56		 push	 esi
  00007	85 d2		 test	 edx, edx
  00009	74 2d		 je	 SHORT $LN4@Inside

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  0000b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0000e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00011	72 04		 jb	 SHORT $LN16@Inside
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00013	8b 31		 mov	 esi, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00015	eb 02		 jmp	 SHORT $LN17@Inside
$LN16@Inside:
  00017	8b f1		 mov	 esi, ecx
$LN17@Inside:

; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  00019	3b d6		 cmp	 edx, esi
  0001b	72 1b		 jb	 SHORT $LN4@Inside

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  0001d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00020	72 04		 jb	 SHORT $LN34@Inside
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00022	8b 31		 mov	 esi, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00024	eb 02		 jmp	 SHORT $LN35@Inside
$LN34@Inside:
  00026	8b f1		 mov	 esi, ecx
$LN35@Inside:

; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  00028	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0002b	03 c6		 add	 eax, esi
  0002d	3b c2		 cmp	 eax, edx
  0002f	76 07		 jbe	 SHORT $LN4@Inside

; 2223 : 		else
; 2224 : 			return (true);

  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi

; 2225 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN4@Inside:

; 2222 : 			return (false);	// don't ask

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 2225 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2206 : 		if (max_size() < _Newsize)

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00007	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0000a	77 62		 ja	 SHORT $LN103@Grow

; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)

  0000c	39 71 14	 cmp	 DWORD PTR [ecx+20], esi
  0000f	73 16		 jae	 SHORT $LN3@Grow

; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow

  00011	ff 71 10	 push	 DWORD PTR [ecx+16]
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2215 : 		return (0 < _Newsize);	// return true only if more work to do

  0001a	33 c0		 xor	 eax, eax
  0001c	3b c6		 cmp	 eax, esi
  0001e	5e		 pop	 esi
  0001f	1b c0		 sbb	 eax, eax
  00021	f7 d8		 neg	 eax

; 2216 : 		}

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
$LN3@Grow:

; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00027	80 7d 0c 00	 cmp	 BYTE PTR __Trim$[ebp], 0
  0002b	74 22		 je	 SHORT $LN5@Grow
  0002d	83 fe 10	 cmp	 esi, 16			; 00000010H
  00030	73 1d		 jae	 SHORT $LN5@Grow

; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string

  00032	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00035	3b f0		 cmp	 esi, eax
  00037	0f 42 c6	 cmovb	 eax, esi
  0003a	50		 push	 eax
  0003b	6a 01		 push	 1
  0003d	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2215 : 		return (0 < _Newsize);	// return true only if more work to do

  00042	33 c0		 xor	 eax, eax
  00044	3b c6		 cmp	 eax, esi
  00046	5e		 pop	 esi
  00047	1b c0		 sbb	 eax, eax
  00049	f7 d8		 neg	 eax

; 2216 : 		}

  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
$LN5@Grow:

; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)

  0004f	85 f6		 test	 esi, esi
  00051	75 0e		 jne	 SHORT $LN100@Grow

; 506  : 			? _STD addressof(*this->_Bx._Ptr)
; 507  : 			: this->_Bx._Buf);
; 508  : 		}
; 509  : 
; 510  : 	const value_type *_Myptr() const
; 511  : 		{	// determine current pointer to buffer for nonmutable string
; 512  : 		return (this->_BUF_SIZE <= this->_Myres
; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}
; 516  : 
; 517  : 	union _Bxty
; 518  : 		{	// storage for small buffer or pointer to larger one
; 519  : 		value_type _Buf[_BUF_SIZE];
; 520  : 		pointer _Ptr;
; 521  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 522  : 		} _Bx;
; 523  : 
; 524  : 	size_type _Mysize;	// current length of string
; 525  : 	size_type _Myres;	// current storage reserved for string
; 526  : 	};
; 527  : 
; 528  : 		// TEMPLATE CLASS _String_alloc
; 529  : template<class _Alloc_types>
; 530  : 	class _String_alloc
; 531  : 	{	// base class for basic_string to hold allocator
; 532  : public:
; 533  : 	typedef _String_alloc<_Alloc_types> _Myt;
; 534  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 535  : 	typedef typename _Alloc_types::_Alty _Alty;
; 536  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 537  : 
; 538  : 	typedef typename _Val_types::value_type value_type;
; 539  : 	typedef typename _Val_types::size_type size_type;
; 540  : 	typedef typename _Val_types::difference_type difference_type;
; 541  : 	typedef typename _Val_types::pointer pointer;
; 542  : 	typedef typename _Val_types::const_pointer const_pointer;
; 543  : 	typedef typename _Val_types::reference reference;
; 544  : 	typedef typename _Val_types::const_reference const_reference;
; 545  : 
; 546  : 	typedef _String_iterator<_String_val<_Val_types> > iterator;
; 547  : 	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;
; 548  : 
; 549  : 	enum
; 550  : 		{	// length of internal buffer, [1, 16]
; 551  : 		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
; 552  : 		};
; 553  : 
; 554  : 	enum
; 555  : 		{	// roundup mask for allocated buffers, [0, 15]
; 556  : 		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
; 557  : 		};
; 558  : 
; 559  : 	value_type *_Myptr()
; 560  : 		{	// determine current pointer to buffer for mutable string
; 561  : 		return (_Get_data()._Myptr());
; 562  : 		}
; 563  : 
; 564  : 	const value_type *_Myptr() const
; 565  : 		{	// determine current pointer to buffer for nonmutable string
; 566  : 		return (_Get_data()._Myptr());
; 567  : 		}
; 568  : 
; 569  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 570  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 571  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 572  : 		{	// construct allocator from _Al
; 573  : 		}
; 574  : 
; 575  : 	_String_alloc(_Alloc&& _Al)
; 576  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 577  : 		{	// construct allocator from _Al
; 578  : 		}
; 579  : 
; 580  : 	void _Copy_alloc(const _Alty& _Al)
; 581  : 		{	// replace old allocator
; 582  : 		_Pocca(_Getal(), _Al);
; 583  : 		}
; 584  : 
; 585  : 	void _Move_alloc(_Alty& _Al)
; 586  : 		{	// replace old allocator
; 587  : 		_Pocma(_Getal(), _Al);
; 588  : 		}
; 589  : 
; 590  : 	void _Swap_alloc(_Myt& _Right)
; 591  : 		{	// swap allocators
; 592  : 		_Pocs(_Getal(), _Right._Getal());
; 593  : 		}
; 594  : 
; 595  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 596  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 597  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 598  : 		{	// construct allocator from _Al
; 599  : 		_Alloc_proxy();
; 600  : 		}
; 601  : 
; 602  : 	_String_alloc(_Alloc&& _Al)
; 603  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 604  : 		{	// construct allocator from _Al
; 605  : 		_Alloc_proxy();
; 606  : 		}
; 607  : 
; 608  : 	~_String_alloc() _NOEXCEPT
; 609  : 		{	// destroy the object
; 610  : 		_Free_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Copy_alloc(const _Alty& _Al)
; 614  : 		{	// replace old allocator
; 615  : 		_Free_proxy();
; 616  : 		_Pocca(_Getal(), _Al);
; 617  : 		_Alloc_proxy();
; 618  : 		}
; 619  : 
; 620  : 	void _Move_alloc(_Alty& _Al)
; 621  : 		{	// replace old allocator
; 622  : 		_Free_proxy();
; 623  : 		_Pocma(_Getal(), _Al);
; 624  : 		_Alloc_proxy();
; 625  : 		}
; 626  : 
; 627  : 	void _Swap_alloc(_Myt& _Right)
; 628  : 		{	// swap allocators
; 629  : 		_Pocs(_Getal(), _Right._Getal());
; 630  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 631  : 		}
; 632  : 
; 633  : 	void _Alloc_proxy()
; 634  : 		{	// construct proxy
; 635  : 		typename _Alty::template rebind<_Container_proxy>::other
; 636  : 			_Alproxy(_Getal());
; 637  : 		_Myproxy() = _Alproxy.allocate(1);
; 638  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 639  : 		_Myproxy()->_Mycont = &_Get_data();
; 640  : 		}
; 641  : 
; 642  : 	void _Free_proxy()
; 643  : 		{	// destroy proxy
; 644  : 		typename _Alty::template rebind<_Container_proxy>::other
; 645  : 			_Alproxy(_Getal());
; 646  : 		_Orphan_all();
; 647  : 		_Alproxy.destroy(_Myproxy());
; 648  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 649  : 		_Myproxy() = 0;
; 650  : 		}
; 651  : 
; 652  : 	_Iterator_base12 **_Getpfirst() const
; 653  : 		{	// get address of iterator chain
; 654  : 		return (_Get_data()._Getpfirst());
; 655  : 		}
; 656  : 
; 657  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 658  : 		{	// return reference to _Myproxy
; 659  : 		return (_Get_data()._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 663  : 		{	// return const reference to _Myproxy
; 664  : 		return (_Get_data()._Myproxy);
; 665  : 		}
; 666  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 667  : 
; 668  : 	void _Orphan_all()
; 669  : 		{	// orphan all iterators
; 670  : 		_Get_data()._Orphan_all();
; 671  : 		}
; 672  : 
; 673  : 	void _Swap_all(_Myt& _Right)
; 674  : 		{	// swap all iterators
; 675  : 		_Get_data()._Swap_all(_Right._Get_data());
; 676  : 		}
; 677  : 
; 678  : 	_Alty& _Getal() _NOEXCEPT
; 679  : 		{	// return reference to allocator
; 680  : 		return (_Mypair._Get_first());
; 681  : 		}
; 682  : 
; 683  : 	const _Alty& _Getal() const _NOEXCEPT
; 684  : 		{	// return const reference to allocator
; 685  : 		return (_Mypair._Get_first());
; 686  : 		}
; 687  : 
; 688  : 	_String_val<_Val_types>& _Get_data() _NOEXCEPT
; 689  : 		{	// return reference to _String_val
; 690  : 		return (_Mypair._Get_second());
; 691  : 		}
; 692  : 
; 693  : 	const _String_val<_Val_types>& _Get_data() const _NOEXCEPT
; 694  : 		{	// return const reference to _String_val
; 695  : 		return (_Mypair._Get_second());
; 696  : 		}
; 697  : 
; 698  : 	typedef typename _String_val<_Val_types>::_Bxty _Bxty;
; 699  : 
; 700  : 	_Bxty& _Bx() _NOEXCEPT
; 701  : 		{	// return reference to _Bx
; 702  : 		return (_Get_data()._Bx);
; 703  : 		}
; 704  : 
; 705  : 	const _Bxty& _Bx() const _NOEXCEPT
; 706  : 		{	// return const reference to _Bx
; 707  : 		return (_Get_data()._Bx);
; 708  : 		}
; 709  : 
; 710  : 	size_type& _Mysize() _NOEXCEPT
; 711  : 		{	// return reference to _Mysize
; 712  : 		return (_Get_data()._Mysize);
; 713  : 		}
; 714  : 
; 715  : 	const size_type& _Mysize() const _NOEXCEPT
; 716  : 		{	// return const reference to _Mysize
; 717  : 		return (_Get_data()._Mysize);
; 718  : 		}
; 719  : 
; 720  : 	size_type& _Myres() _NOEXCEPT
; 721  : 		{	// return reference to _Myres
; 722  : 		return (_Get_data()._Myres);
; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00053	89 71 10	 mov	 DWORD PTR [ecx+16], esi

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00056	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  0005a	72 02		 jb	 SHORT $LN91@Grow
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  0005c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN91@Grow:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0005e	c6 01 00	 mov	 BYTE PTR [ecx], 0
$LN100@Grow:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2215 : 		return (0 < _Newsize);	// return true only if more work to do

  00061	33 c0		 xor	 eax, eax
  00063	3b c6		 cmp	 eax, esi
  00065	5e		 pop	 esi
  00066	1b c0		 sbb	 eax, eax
  00068	f7 d8		 neg	 eax

; 2216 : 		}

  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
$LN103@Grow:

; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())
; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;
; 2242 : 		_Eos(_Newsize);
; 2243 : 		}
; 2244 : 
; 2245 : 	[[noreturn]] void _Xlen() const
; 2246 : 		{	// report a length_error
; 2247 : 		_Xlength_error("string too long");

  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00073	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN105@Grow:
$LN102@Grow:
  00078	cc		 int	 3
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2199 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00003	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  00006	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00009	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  0000d	72 0a		 jb	 SHORT $LN22@Eos
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00011	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2201 : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN22@Eos:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00019	c6 04 11 00	 mov	 BYTE PTR [ecx+edx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2201 : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
__Ptr$1$ = -24						; size = 4
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00030	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00033	8b f8		 mov	 edi, eax
  00035	83 cf 0f	 or	 edi, 15			; 0000000fH

; 2166 : 		if (max_size() < _Newres)

  00038	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0003b	76 04		 jbe	 SHORT $LN2@Copy

; 2167 : 			_Newres = _Newsize;	// undo roundup if too big

  0003d	8b f8		 mov	 edi, eax

; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)

  0003f	eb 27		 jmp	 SHORT $LN108@Copy
$LN2@Copy:
  00041	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00044	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00049	f7 e7		 mul	 edi
  0004b	8b cb		 mov	 ecx, ebx
  0004d	d1 e9		 shr	 ecx, 1
  0004f	d1 ea		 shr	 edx, 1
  00051	3b ca		 cmp	 ecx, edx
  00053	76 13		 jbe	 SHORT $LN108@Copy

; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)

  00055	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 2171 : 			_Newres = this->_Myres()

  0005a	8d 3c 19	 lea	 edi, DWORD PTR [ecx+ebx]
  0005d	2b c1		 sub	 eax, ecx
  0005f	3b d8		 cmp	 ebx, eax
  00061	76 05		 jbe	 SHORT $LN108@Copy

; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00063	bf fe ff ff ff	 mov	 edi, -2			; fffffffeH
$LN108@Copy:

; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

  00068	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0006b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00072	50		 push	 eax
  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0007a	8b c8		 mov	 ecx, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
  0007c	eb 29		 jmp	 SHORT $LN469@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0007e	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00081	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00084	89 45 08	 mov	 DWORD PTR __Newres$[ebp], eax

; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

  00087	40		 inc	 eax
  00088	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  0008b	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2181 : 			_TRY_BEGIN

  0008c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00090	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

  00095	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax

; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END

  00098	b8 00 00 00 00	 mov	 eax, $LN466@Copy
  0009d	c3		 ret	 0
$LN466@Copy:
  0009e	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000a1	8b 7d 08	 mov	 edi, DWORD PTR __Newres$[ebp]
  000a4	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN469@Copy:

; 2188 : 
; 2189 : 		if (0 < _Oldlen)

  000a7	8b 5d 0c	 mov	 ebx, DWORD PTR __Oldlen$[ebp]
  000aa	89 4d e8	 mov	 DWORD PTR __Ptr$1$[ebp], ecx
  000ad	85 db		 test	 ebx, ebx
  000af	74 1b		 je	 SHORT $LN276@Copy

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  000b1	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000b5	72 04		 jb	 SHORT $LN265@Copy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  000b7	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  000b9	eb 02		 jmp	 SHORT $LN266@Copy
$LN265@Copy:
  000bb	8b c6		 mov	 eax, esi
$LN266@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 530  : 		return (_Count == 0 ? _First1

  000bd	85 db		 test	 ebx, ebx
  000bf	74 0b		 je	 SHORT $LN276@Copy
  000c1	53		 push	 ebx
  000c2	50		 push	 eax
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 _memcpy
  000c9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN276@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  000cc	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000cf	83 f8 10	 cmp	 eax, 16			; 00000010H
  000d2	72 0b		 jb	 SHORT $LN280@Copy

; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  000d4	40		 inc	 eax
  000d5	8b ce		 mov	 ecx, esi
  000d7	50		 push	 eax
  000d8	ff 36		 push	 DWORD PTR [esi]
  000da	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN280@Copy:

; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  000df	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  000e6	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  000ed	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000f1	72 04		 jb	 SHORT $LN380@Copy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  000f3	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  000f5	eb 02		 jmp	 SHORT $LN381@Copy
$LN380@Copy:
  000f7	8b c6		 mov	 eax, esi
$LN381@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  000f9	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  000fc	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$1$[ebp]
  000ff	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2194 : 		this->_Myres() = _Newres;

  00101	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00104	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00107	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0010b	72 02		 jb	 SHORT $LN456@Copy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  0010d	8b f0		 mov	 esi, eax
$LN456@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0010f	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2196 : 		}

  00113	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00116	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011d	59		 pop	 ecx
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi
  00120	5b		 pop	 ebx
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 08 00	 ret	 8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 506  : 			? _STD addressof(*this->_Bx._Ptr)
; 507  : 			: this->_Bx._Buf);
; 508  : 		}
; 509  : 
; 510  : 	const value_type *_Myptr() const
; 511  : 		{	// determine current pointer to buffer for nonmutable string
; 512  : 		return (this->_BUF_SIZE <= this->_Myres
; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}
; 516  : 
; 517  : 	union _Bxty
; 518  : 		{	// storage for small buffer or pointer to larger one
; 519  : 		value_type _Buf[_BUF_SIZE];
; 520  : 		pointer _Ptr;
; 521  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 522  : 		} _Bx;
; 523  : 
; 524  : 	size_type _Mysize;	// current length of string
; 525  : 	size_type _Myres;	// current storage reserved for string
; 526  : 	};
; 527  : 
; 528  : 		// TEMPLATE CLASS _String_alloc
; 529  : template<class _Alloc_types>
; 530  : 	class _String_alloc
; 531  : 	{	// base class for basic_string to hold allocator
; 532  : public:
; 533  : 	typedef _String_alloc<_Alloc_types> _Myt;
; 534  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 535  : 	typedef typename _Alloc_types::_Alty _Alty;
; 536  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 537  : 
; 538  : 	typedef typename _Val_types::value_type value_type;
; 539  : 	typedef typename _Val_types::size_type size_type;
; 540  : 	typedef typename _Val_types::difference_type difference_type;
; 541  : 	typedef typename _Val_types::pointer pointer;
; 542  : 	typedef typename _Val_types::const_pointer const_pointer;
; 543  : 	typedef typename _Val_types::reference reference;
; 544  : 	typedef typename _Val_types::const_reference const_reference;
; 545  : 
; 546  : 	typedef _String_iterator<_String_val<_Val_types> > iterator;
; 547  : 	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;
; 548  : 
; 549  : 	enum
; 550  : 		{	// length of internal buffer, [1, 16]
; 551  : 		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
; 552  : 		};
; 553  : 
; 554  : 	enum
; 555  : 		{	// roundup mask for allocated buffers, [0, 15]
; 556  : 		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
; 557  : 		};
; 558  : 
; 559  : 	value_type *_Myptr()
; 560  : 		{	// determine current pointer to buffer for mutable string
; 561  : 		return (_Get_data()._Myptr());
; 562  : 		}
; 563  : 
; 564  : 	const value_type *_Myptr() const
; 565  : 		{	// determine current pointer to buffer for nonmutable string
; 566  : 		return (_Get_data()._Myptr());
; 567  : 		}
; 568  : 
; 569  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 570  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 571  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 572  : 		{	// construct allocator from _Al
; 573  : 		}
; 574  : 
; 575  : 	_String_alloc(_Alloc&& _Al)
; 576  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 577  : 		{	// construct allocator from _Al
; 578  : 		}
; 579  : 
; 580  : 	void _Copy_alloc(const _Alty& _Al)
; 581  : 		{	// replace old allocator
; 582  : 		_Pocca(_Getal(), _Al);
; 583  : 		}
; 584  : 
; 585  : 	void _Move_alloc(_Alty& _Al)
; 586  : 		{	// replace old allocator
; 587  : 		_Pocma(_Getal(), _Al);
; 588  : 		}
; 589  : 
; 590  : 	void _Swap_alloc(_Myt& _Right)
; 591  : 		{	// swap allocators
; 592  : 		_Pocs(_Getal(), _Right._Getal());
; 593  : 		}
; 594  : 
; 595  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 596  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 597  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 598  : 		{	// construct allocator from _Al
; 599  : 		_Alloc_proxy();
; 600  : 		}
; 601  : 
; 602  : 	_String_alloc(_Alloc&& _Al)
; 603  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 604  : 		{	// construct allocator from _Al
; 605  : 		_Alloc_proxy();
; 606  : 		}
; 607  : 
; 608  : 	~_String_alloc() _NOEXCEPT
; 609  : 		{	// destroy the object
; 610  : 		_Free_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Copy_alloc(const _Alty& _Al)
; 614  : 		{	// replace old allocator
; 615  : 		_Free_proxy();
; 616  : 		_Pocca(_Getal(), _Al);
; 617  : 		_Alloc_proxy();
; 618  : 		}
; 619  : 
; 620  : 	void _Move_alloc(_Alty& _Al)
; 621  : 		{	// replace old allocator
; 622  : 		_Free_proxy();
; 623  : 		_Pocma(_Getal(), _Al);
; 624  : 		_Alloc_proxy();
; 625  : 		}
; 626  : 
; 627  : 	void _Swap_alloc(_Myt& _Right)
; 628  : 		{	// swap allocators
; 629  : 		_Pocs(_Getal(), _Right._Getal());
; 630  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 631  : 		}
; 632  : 
; 633  : 	void _Alloc_proxy()
; 634  : 		{	// construct proxy
; 635  : 		typename _Alty::template rebind<_Container_proxy>::other
; 636  : 			_Alproxy(_Getal());
; 637  : 		_Myproxy() = _Alproxy.allocate(1);
; 638  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 639  : 		_Myproxy()->_Mycont = &_Get_data();
; 640  : 		}
; 641  : 
; 642  : 	void _Free_proxy()
; 643  : 		{	// destroy proxy
; 644  : 		typename _Alty::template rebind<_Container_proxy>::other
; 645  : 			_Alproxy(_Getal());
; 646  : 		_Orphan_all();
; 647  : 		_Alproxy.destroy(_Myproxy());
; 648  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 649  : 		_Myproxy() = 0;
; 650  : 		}
; 651  : 
; 652  : 	_Iterator_base12 **_Getpfirst() const
; 653  : 		{	// get address of iterator chain
; 654  : 		return (_Get_data()._Getpfirst());
; 655  : 		}
; 656  : 
; 657  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 658  : 		{	// return reference to _Myproxy
; 659  : 		return (_Get_data()._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 663  : 		{	// return const reference to _Myproxy
; 664  : 		return (_Get_data()._Myproxy);
; 665  : 		}
; 666  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 667  : 
; 668  : 	void _Orphan_all()
; 669  : 		{	// orphan all iterators
; 670  : 		_Get_data()._Orphan_all();
; 671  : 		}
; 672  : 
; 673  : 	void _Swap_all(_Myt& _Right)
; 674  : 		{	// swap all iterators
; 675  : 		_Get_data()._Swap_all(_Right._Get_data());
; 676  : 		}
; 677  : 
; 678  : 	_Alty& _Getal() _NOEXCEPT
; 679  : 		{	// return reference to allocator
; 680  : 		return (_Mypair._Get_first());
; 681  : 		}
; 682  : 
; 683  : 	const _Alty& _Getal() const _NOEXCEPT
; 684  : 		{	// return const reference to allocator
; 685  : 		return (_Mypair._Get_first());
; 686  : 		}
; 687  : 
; 688  : 	_String_val<_Val_types>& _Get_data() _NOEXCEPT
; 689  : 		{	// return reference to _String_val
; 690  : 		return (_Mypair._Get_second());
; 691  : 		}
; 692  : 
; 693  : 	const _String_val<_Val_types>& _Get_data() const _NOEXCEPT
; 694  : 		{	// return const reference to _String_val
; 695  : 		return (_Mypair._Get_second());
; 696  : 		}
; 697  : 
; 698  : 	typedef typename _String_val<_Val_types>::_Bxty _Bxty;
; 699  : 
; 700  : 	_Bxty& _Bx() _NOEXCEPT
; 701  : 		{	// return reference to _Bx
; 702  : 		return (_Get_data()._Bx);
; 703  : 		}
; 704  : 
; 705  : 	const _Bxty& _Bx() const _NOEXCEPT
; 706  : 		{	// return const reference to _Bx
; 707  : 		return (_Get_data()._Bx);
; 708  : 		}
; 709  : 
; 710  : 	size_type& _Mysize() _NOEXCEPT
; 711  : 		{	// return reference to _Mysize
; 712  : 		return (_Get_data()._Mysize);
; 713  : 		}
; 714  : 
; 715  : 	const size_type& _Mysize() const _NOEXCEPT
; 716  : 		{	// return const reference to _Mysize
; 717  : 		return (_Get_data()._Mysize);
; 718  : 		}
; 719  : 
; 720  : 	size_type& _Myres() _NOEXCEPT
; 721  : 		{	// return reference to _Myres
; 722  : 		return (_Get_data()._Myres);

  00127	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]

; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  0012a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0012d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00130	72 0b		 jb	 SHORT $LN144@Copy

; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  00132	40		 inc	 eax
  00133	8b ce		 mov	 ecx, esi
  00135	50		 push	 eax
  00136	ff 36		 push	 DWORD PTR [esi]
  00138	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN144@Copy:

; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  0013d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00144	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  0014b	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0014f	72 02		 jb	 SHORT $LN245@Copy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00151	8b 36		 mov	 esi, DWORD PTR [esi]
$LN245@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2185 : 			_RERAISE;

  00153	6a 00		 push	 0
  00155	6a 00		 push	 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00157	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2185 : 			_RERAISE;

  0015a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN470@Copy:
$LN468@Copy:
  0015f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__Count$ = 20						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)

  00003	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00009	3b c2		 cmp	 eax, edx
  0000b	72 4c		 jb	 SHORT $LN58@compare

; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)

  0000d	56		 push	 esi
  0000e	8b 75 0c	 mov	 esi, DWORD PTR __N0$[ebp]
  00011	2b c2		 sub	 eax, edx
  00013	3b c6		 cmp	 eax, esi
  00015	57		 push	 edi
  00016	0f 42 f0	 cmovb	 esi, eax

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  00019	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  0001d	72 02		 jb	 SHORT $LN49@compare
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  0001f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN49@compare:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,

  00021	8b 7d 14	 mov	 edi, DWORD PTR __Count$[ebp]
  00024	3b f7		 cmp	 esi, edi
  00026	8b c7		 mov	 eax, edi
  00028	0f 42 c6	 cmovb	 eax, esi
  0002b	50		 push	 eax
  0002c	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0002f	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1

  0003b	85 c0		 test	 eax, eax
  0003d	75 14		 jne	 SHORT $LN6@compare
  0003f	3b f7		 cmp	 esi, edi
  00041	73 09		 jae	 SHORT $LN5@compare
  00043	5f		 pop	 edi
  00044	83 c8 ff	 or	 eax, -1
  00047	5e		 pop	 esi

; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}

  00048	5d		 pop	 ebp
  00049	c2 10 00	 ret	 16			; 00000010H
$LN5@compare:

; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1

  0004c	33 c0		 xor	 eax, eax
  0004e	3b f7		 cmp	 esi, edi
  00050	0f 95 c0	 setne	 al
$LN6@compare:
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi

; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}

  00055	5d		 pop	 ebp
  00056	c2 10 00	 ret	 16			; 00000010H
$LN58@compare:

; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());
; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)
; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)
; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow
; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)
; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do
; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())
; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;
; 2242 : 		_Eos(_Newsize);
; 2243 : 		}
; 2244 : 
; 2245 : 	[[noreturn]] void _Xlen() const
; 2246 : 		{	// report a length_error
; 2247 : 		_Xlength_error("string too long");
; 2248 : 		}
; 2249 : 
; 2250 : 	[[noreturn]] void _Xran() const
; 2251 : 		{	// report an out_of_range error
; 2252 : 		_Xout_of_range("invalid string position");

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0005e	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN60@compare:
$LN57@compare:
  00063	cc		 int	 3
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 2102 : 		{	// compare [0, _Mysize()) with _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}
; 516  : 
; 517  : 	union _Bxty
; 518  : 		{	// storage for small buffer or pointer to larger one
; 519  : 		value_type _Buf[_BUF_SIZE];
; 520  : 		pointer _Ptr;
; 521  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 522  : 		} _Bx;
; 523  : 
; 524  : 	size_type _Mysize;	// current length of string
; 525  : 	size_type _Myres;	// current storage reserved for string
; 526  : 	};
; 527  : 
; 528  : 		// TEMPLATE CLASS _String_alloc
; 529  : template<class _Alloc_types>
; 530  : 	class _String_alloc
; 531  : 	{	// base class for basic_string to hold allocator
; 532  : public:
; 533  : 	typedef _String_alloc<_Alloc_types> _Myt;
; 534  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 535  : 	typedef typename _Alloc_types::_Alty _Alty;
; 536  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 537  : 
; 538  : 	typedef typename _Val_types::value_type value_type;
; 539  : 	typedef typename _Val_types::size_type size_type;
; 540  : 	typedef typename _Val_types::difference_type difference_type;
; 541  : 	typedef typename _Val_types::pointer pointer;
; 542  : 	typedef typename _Val_types::const_pointer const_pointer;
; 543  : 	typedef typename _Val_types::reference reference;
; 544  : 	typedef typename _Val_types::const_reference const_reference;
; 545  : 
; 546  : 	typedef _String_iterator<_String_val<_Val_types> > iterator;
; 547  : 	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;
; 548  : 
; 549  : 	enum
; 550  : 		{	// length of internal buffer, [1, 16]
; 551  : 		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
; 552  : 		};
; 553  : 
; 554  : 	enum
; 555  : 		{	// roundup mask for allocated buffers, [0, 15]
; 556  : 		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
; 557  : 		};
; 558  : 
; 559  : 	value_type *_Myptr()
; 560  : 		{	// determine current pointer to buffer for mutable string
; 561  : 		return (_Get_data()._Myptr());
; 562  : 		}
; 563  : 
; 564  : 	const value_type *_Myptr() const
; 565  : 		{	// determine current pointer to buffer for nonmutable string
; 566  : 		return (_Get_data()._Myptr());
; 567  : 		}
; 568  : 
; 569  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 570  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 571  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 572  : 		{	// construct allocator from _Al
; 573  : 		}
; 574  : 
; 575  : 	_String_alloc(_Alloc&& _Al)
; 576  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 577  : 		{	// construct allocator from _Al
; 578  : 		}
; 579  : 
; 580  : 	void _Copy_alloc(const _Alty& _Al)
; 581  : 		{	// replace old allocator
; 582  : 		_Pocca(_Getal(), _Al);
; 583  : 		}
; 584  : 
; 585  : 	void _Move_alloc(_Alty& _Al)
; 586  : 		{	// replace old allocator
; 587  : 		_Pocma(_Getal(), _Al);
; 588  : 		}
; 589  : 
; 590  : 	void _Swap_alloc(_Myt& _Right)
; 591  : 		{	// swap allocators
; 592  : 		_Pocs(_Getal(), _Right._Getal());
; 593  : 		}
; 594  : 
; 595  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 596  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 597  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 598  : 		{	// construct allocator from _Al
; 599  : 		_Alloc_proxy();
; 600  : 		}
; 601  : 
; 602  : 	_String_alloc(_Alloc&& _Al)
; 603  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 604  : 		{	// construct allocator from _Al
; 605  : 		_Alloc_proxy();
; 606  : 		}
; 607  : 
; 608  : 	~_String_alloc() _NOEXCEPT
; 609  : 		{	// destroy the object
; 610  : 		_Free_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Copy_alloc(const _Alty& _Al)
; 614  : 		{	// replace old allocator
; 615  : 		_Free_proxy();
; 616  : 		_Pocca(_Getal(), _Al);
; 617  : 		_Alloc_proxy();
; 618  : 		}
; 619  : 
; 620  : 	void _Move_alloc(_Alty& _Al)
; 621  : 		{	// replace old allocator
; 622  : 		_Free_proxy();
; 623  : 		_Pocma(_Getal(), _Al);
; 624  : 		_Alloc_proxy();
; 625  : 		}
; 626  : 
; 627  : 	void _Swap_alloc(_Myt& _Right)
; 628  : 		{	// swap allocators
; 629  : 		_Pocs(_Getal(), _Right._Getal());
; 630  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 631  : 		}
; 632  : 
; 633  : 	void _Alloc_proxy()
; 634  : 		{	// construct proxy
; 635  : 		typename _Alty::template rebind<_Container_proxy>::other
; 636  : 			_Alproxy(_Getal());
; 637  : 		_Myproxy() = _Alproxy.allocate(1);
; 638  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 639  : 		_Myproxy()->_Mycont = &_Get_data();
; 640  : 		}
; 641  : 
; 642  : 	void _Free_proxy()
; 643  : 		{	// destroy proxy
; 644  : 		typename _Alty::template rebind<_Container_proxy>::other
; 645  : 			_Alproxy(_Getal());
; 646  : 		_Orphan_all();
; 647  : 		_Alproxy.destroy(_Myproxy());
; 648  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 649  : 		_Myproxy() = 0;
; 650  : 		}
; 651  : 
; 652  : 	_Iterator_base12 **_Getpfirst() const
; 653  : 		{	// get address of iterator chain
; 654  : 		return (_Get_data()._Getpfirst());
; 655  : 		}
; 656  : 
; 657  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 658  : 		{	// return reference to _Myproxy
; 659  : 		return (_Get_data()._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 663  : 		{	// return const reference to _Myproxy
; 664  : 		return (_Get_data()._Myproxy);
; 665  : 		}
; 666  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 667  : 
; 668  : 	void _Orphan_all()
; 669  : 		{	// orphan all iterators
; 670  : 		_Get_data()._Orphan_all();
; 671  : 		}
; 672  : 
; 673  : 	void _Swap_all(_Myt& _Right)
; 674  : 		{	// swap all iterators
; 675  : 		_Get_data()._Swap_all(_Right._Get_data());
; 676  : 		}
; 677  : 
; 678  : 	_Alty& _Getal() _NOEXCEPT
; 679  : 		{	// return reference to allocator
; 680  : 		return (_Mypair._Get_first());
; 681  : 		}
; 682  : 
; 683  : 	const _Alty& _Getal() const _NOEXCEPT
; 684  : 		{	// return const reference to allocator
; 685  : 		return (_Mypair._Get_first());
; 686  : 		}
; 687  : 
; 688  : 	_String_val<_Val_types>& _Get_data() _NOEXCEPT
; 689  : 		{	// return reference to _String_val
; 690  : 		return (_Mypair._Get_second());
; 691  : 		}
; 692  : 
; 693  : 	const _String_val<_Val_types>& _Get_data() const _NOEXCEPT
; 694  : 		{	// return const reference to _String_val
; 695  : 		return (_Mypair._Get_second());
; 696  : 		}
; 697  : 
; 698  : 	typedef typename _String_val<_Val_types>::_Bxty _Bxty;
; 699  : 
; 700  : 	_Bxty& _Bx() _NOEXCEPT
; 701  : 		{	// return reference to _Bx
; 702  : 		return (_Get_data()._Bx);
; 703  : 		}
; 704  : 
; 705  : 	const _Bxty& _Bx() const _NOEXCEPT
; 706  : 		{	// return const reference to _Bx
; 707  : 		return (_Get_data()._Bx);
; 708  : 		}
; 709  : 
; 710  : 	size_type& _Mysize() _NOEXCEPT
; 711  : 		{	// return reference to _Mysize
; 712  : 		return (_Get_data()._Mysize);
; 713  : 		}
; 714  : 
; 715  : 	const size_type& _Mysize() const _NOEXCEPT
; 716  : 		{	// return const reference to _Mysize
; 717  : 		return (_Get_data()._Mysize);
; 718  : 		}
; 719  : 
; 720  : 	size_type& _Myres() _NOEXCEPT
; 721  : 		{	// return reference to _Myres
; 722  : 		return (_Get_data()._Myres);
; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());

  00022	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  00025	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}
; 516  : 
; 517  : 	union _Bxty
; 518  : 		{	// storage for small buffer or pointer to larger one
; 519  : 		value_type _Buf[_BUF_SIZE];
; 520  : 		pointer _Ptr;
; 521  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 522  : 		} _Bx;
; 523  : 
; 524  : 	size_type _Mysize;	// current length of string
; 525  : 	size_type _Myres;	// current storage reserved for string
; 526  : 	};
; 527  : 
; 528  : 		// TEMPLATE CLASS _String_alloc
; 529  : template<class _Alloc_types>
; 530  : 	class _String_alloc
; 531  : 	{	// base class for basic_string to hold allocator
; 532  : public:
; 533  : 	typedef _String_alloc<_Alloc_types> _Myt;
; 534  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 535  : 	typedef typename _Alloc_types::_Alty _Alty;
; 536  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 537  : 
; 538  : 	typedef typename _Val_types::value_type value_type;
; 539  : 	typedef typename _Val_types::size_type size_type;
; 540  : 	typedef typename _Val_types::difference_type difference_type;
; 541  : 	typedef typename _Val_types::pointer pointer;
; 542  : 	typedef typename _Val_types::const_pointer const_pointer;
; 543  : 	typedef typename _Val_types::reference reference;
; 544  : 	typedef typename _Val_types::const_reference const_reference;
; 545  : 
; 546  : 	typedef _String_iterator<_String_val<_Val_types> > iterator;
; 547  : 	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;
; 548  : 
; 549  : 	enum
; 550  : 		{	// length of internal buffer, [1, 16]
; 551  : 		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
; 552  : 		};
; 553  : 
; 554  : 	enum
; 555  : 		{	// roundup mask for allocated buffers, [0, 15]
; 556  : 		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
; 557  : 		};
; 558  : 
; 559  : 	value_type *_Myptr()
; 560  : 		{	// determine current pointer to buffer for mutable string
; 561  : 		return (_Get_data()._Myptr());
; 562  : 		}
; 563  : 
; 564  : 	const value_type *_Myptr() const
; 565  : 		{	// determine current pointer to buffer for nonmutable string
; 566  : 		return (_Get_data()._Myptr());
; 567  : 		}
; 568  : 
; 569  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 570  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 571  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 572  : 		{	// construct allocator from _Al
; 573  : 		}
; 574  : 
; 575  : 	_String_alloc(_Alloc&& _Al)
; 576  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 577  : 		{	// construct allocator from _Al
; 578  : 		}
; 579  : 
; 580  : 	void _Copy_alloc(const _Alty& _Al)
; 581  : 		{	// replace old allocator
; 582  : 		_Pocca(_Getal(), _Al);
; 583  : 		}
; 584  : 
; 585  : 	void _Move_alloc(_Alty& _Al)
; 586  : 		{	// replace old allocator
; 587  : 		_Pocma(_Getal(), _Al);
; 588  : 		}
; 589  : 
; 590  : 	void _Swap_alloc(_Myt& _Right)
; 591  : 		{	// swap allocators
; 592  : 		_Pocs(_Getal(), _Right._Getal());
; 593  : 		}
; 594  : 
; 595  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 596  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 597  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 598  : 		{	// construct allocator from _Al
; 599  : 		_Alloc_proxy();
; 600  : 		}
; 601  : 
; 602  : 	_String_alloc(_Alloc&& _Al)
; 603  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 604  : 		{	// construct allocator from _Al
; 605  : 		_Alloc_proxy();
; 606  : 		}
; 607  : 
; 608  : 	~_String_alloc() _NOEXCEPT
; 609  : 		{	// destroy the object
; 610  : 		_Free_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Copy_alloc(const _Alty& _Al)
; 614  : 		{	// replace old allocator
; 615  : 		_Free_proxy();
; 616  : 		_Pocca(_Getal(), _Al);
; 617  : 		_Alloc_proxy();
; 618  : 		}
; 619  : 
; 620  : 	void _Move_alloc(_Alty& _Al)
; 621  : 		{	// replace old allocator
; 622  : 		_Free_proxy();
; 623  : 		_Pocma(_Getal(), _Al);
; 624  : 		_Alloc_proxy();
; 625  : 		}
; 626  : 
; 627  : 	void _Swap_alloc(_Myt& _Right)
; 628  : 		{	// swap allocators
; 629  : 		_Pocs(_Getal(), _Right._Getal());
; 630  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 631  : 		}
; 632  : 
; 633  : 	void _Alloc_proxy()
; 634  : 		{	// construct proxy
; 635  : 		typename _Alty::template rebind<_Container_proxy>::other
; 636  : 			_Alproxy(_Getal());
; 637  : 		_Myproxy() = _Alproxy.allocate(1);
; 638  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 639  : 		_Myproxy()->_Mycont = &_Get_data();
; 640  : 		}
; 641  : 
; 642  : 	void _Free_proxy()
; 643  : 		{	// destroy proxy
; 644  : 		typename _Alty::template rebind<_Container_proxy>::other
; 645  : 			_Alproxy(_Getal());
; 646  : 		_Orphan_all();
; 647  : 		_Alproxy.destroy(_Myproxy());
; 648  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 649  : 		_Myproxy() = 0;
; 650  : 		}
; 651  : 
; 652  : 	_Iterator_base12 **_Getpfirst() const
; 653  : 		{	// get address of iterator chain
; 654  : 		return (_Get_data()._Getpfirst());
; 655  : 		}
; 656  : 
; 657  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 658  : 		{	// return reference to _Myproxy
; 659  : 		return (_Get_data()._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 663  : 		{	// return const reference to _Myproxy
; 664  : 		return (_Get_data()._Myproxy);
; 665  : 		}
; 666  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 667  : 
; 668  : 	void _Orphan_all()
; 669  : 		{	// orphan all iterators
; 670  : 		_Get_data()._Orphan_all();
; 671  : 		}
; 672  : 
; 673  : 	void _Swap_all(_Myt& _Right)
; 674  : 		{	// swap all iterators
; 675  : 		_Get_data()._Swap_all(_Right._Get_data());
; 676  : 		}
; 677  : 
; 678  : 	_Alty& _Getal() _NOEXCEPT
; 679  : 		{	// return reference to allocator
; 680  : 		return (_Mypair._Get_first());
; 681  : 		}
; 682  : 
; 683  : 	const _Alty& _Getal() const _NOEXCEPT
; 684  : 		{	// return const reference to allocator
; 685  : 		return (_Mypair._Get_first());
; 686  : 		}
; 687  : 
; 688  : 	_String_val<_Val_types>& _Get_data() _NOEXCEPT
; 689  : 		{	// return reference to _String_val
; 690  : 		return (_Mypair._Get_second());
; 691  : 		}
; 692  : 
; 693  : 	const _String_val<_Val_types>& _Get_data() const _NOEXCEPT
; 694  : 		{	// return const reference to _String_val
; 695  : 		return (_Mypair._Get_second());
; 696  : 		}
; 697  : 
; 698  : 	typedef typename _String_val<_Val_types>::_Bxty _Bxty;
; 699  : 
; 700  : 	_Bxty& _Bx() _NOEXCEPT
; 701  : 		{	// return reference to _Bx
; 702  : 		return (_Get_data()._Bx);
; 703  : 		}
; 704  : 
; 705  : 	const _Bxty& _Bx() const _NOEXCEPT
; 706  : 		{	// return const reference to _Bx
; 707  : 		return (_Get_data()._Bx);
; 708  : 		}
; 709  : 
; 710  : 	size_type& _Mysize() _NOEXCEPT
; 711  : 		{	// return reference to _Mysize
; 712  : 		return (_Get_data()._Mysize);
; 713  : 		}
; 714  : 
; 715  : 	const size_type& _Mysize() const _NOEXCEPT
; 716  : 		{	// return const reference to _Mysize
; 717  : 		return (_Get_data()._Mysize);
; 718  : 		}
; 719  : 
; 720  : 	size_type& _Myres() _NOEXCEPT
; 721  : 		{	// return reference to _Myres
; 722  : 		return (_Get_data()._Myres);
; 723  : 		}
; 724  : 
; 725  : 	const size_type& _Myres() const _NOEXCEPT
; 726  : 		{	// return const reference to _Myres
; 727  : 		return (_Get_data()._Myres);
; 728  : 		}
; 729  : 
; 730  : private:
; 731  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 732  : 	};
; 733  : 
; 734  : 		// TEMPLATE CLASS basic_string
; 735  : template<class _Elem,
; 736  : 	class _Traits,
; 737  : 	class _Alloc>
; 738  : 	class basic_string
; 739  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 740  : 	{	// null-terminated transparent array of elements
; 741  : public:
; 742  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 743  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 744  : 	typedef _Traits traits_type;
; 745  : 	typedef _Alloc allocator_type;
; 746  : 
; 747  : 	typedef typename _Mybase::_Alty _Alty;
; 748  : 
; 749  : 	typedef typename _Mybase::value_type value_type;
; 750  : 	typedef typename _Mybase::size_type size_type;
; 751  : 	typedef typename _Mybase::difference_type difference_type;
; 752  : 	typedef typename _Mybase::pointer pointer;
; 753  : 	typedef typename _Mybase::const_pointer const_pointer;
; 754  : 	typedef typename _Mybase::reference reference;
; 755  : 	typedef typename _Mybase::const_reference const_reference;
; 756  : 
; 757  : 	typedef typename _Mybase::iterator iterator;
; 758  : 	typedef typename _Mybase::const_iterator const_iterator;
; 759  : 
; 760  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 761  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 762  : 
; 763  : 	basic_string(const _Myt& _Right)
; 764  : 
; 765  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 766  : 
; 767  : 
; 768  : 		{	// construct by copying _Right
; 769  : 		_Tidy();
; 770  : 		assign(_Right, 0, npos);
; 771  : 		}
; 772  : 
; 773  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 774  : 		: _Mybase(_Al)
; 775  : 		{	// construct by copying with allocator
; 776  : 		_Tidy();
; 777  : 		assign(_Right, 0, npos);
; 778  : 		}
; 779  : 
; 780  : 	basic_string() _NOEXCEPT
; 781  : 		: _Mybase()
; 782  : 		{	// construct empty string
; 783  : 		_Tidy();
; 784  : 		}
; 785  : 
; 786  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 787  : 		: _Mybase(_Al)
; 788  : 		{	// construct empty string with allocator
; 789  : 		_Tidy();
; 790  : 		}
; 791  : 
; 792  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 793  : 		size_type _Count = npos)
; 794  : 		: _Mybase(_Right._Getal())
; 795  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 796  : 		_Tidy();
; 797  : 		assign(_Right, _Roff, _Count);
; 798  : 		}
; 799  : 
; 800  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 801  : 		const _Alloc& _Al)
; 802  : 		: _Mybase(_Al)
; 803  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 804  : 		_Tidy();
; 805  : 		assign(_Right, _Roff, _Count);
; 806  : 		}
; 807  : 
; 808  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 809  : 		: _Mybase()
; 810  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 811  : 		_Tidy();
; 812  : 		assign(_Ptr, _Count);
; 813  : 		}
; 814  : 
; 815  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 818  : 		_Tidy();
; 819  : 		assign(_Ptr, _Count);
; 820  : 		}
; 821  : 
; 822  : 	basic_string(const _Elem *_Ptr)
; 823  : 		: _Mybase()
; 824  : 		{	// construct from [_Ptr, <null>)
; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}
; 828  : 
; 829  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 830  : 		: _Mybase(_Al)
; 831  : 		{	// construct from [_Ptr, <null>) with allocator
; 832  : 		_Tidy();
; 833  : 		assign(_Ptr);
; 834  : 		}
; 835  : 
; 836  : 	basic_string(size_type _Count, _Elem _Ch)
; 837  : 		: _Mybase()
; 838  : 		{	// construct from _Count * _Ch
; 839  : 		_Tidy();
; 840  : 		assign(_Count, _Ch);
; 841  : 		}
; 842  : 
; 843  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 844  : 		: _Mybase(_Al)
; 845  : 		{	// construct from _Count * _Ch with allocator
; 846  : 		_Tidy();
; 847  : 		assign(_Count, _Ch);
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter,
; 851  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 852  : 			void>::type>
; 853  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 854  : 		: _Mybase(_Al)
; 855  : 		{	// construct from [_First, _Last) with optional allocator
; 856  : 		_DEBUG_RANGE(_First, _Last);
; 857  : 		_Tidy();
; 858  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
; 859  : 		}
; 860  : 
; 861  : 	template<class _Iter>
; 862  : 		void _Construct(_Iter _First,
; 863  : 			_Iter _Last, input_iterator_tag)
; 864  : 		{	// initialize from [_First, _Last), input iterators
; 865  : 		_TRY_BEGIN
; 866  : 		for (; _First != _Last; ++_First)
; 867  : 			append((size_type)1, (_Elem)*_First);
; 868  : 		_CATCH_ALL
; 869  : 		_Tidy(true);
; 870  : 		_RERAISE;
; 871  : 		_CATCH_END
; 872  : 		}
; 873  : 
; 874  : 	template<class _Iter>
; 875  : 		void _Construct(_Iter _First,
; 876  : 			_Iter _Last, forward_iterator_tag)
; 877  : 		{	// initialize from [_First, _Last), forward iterators
; 878  : 		size_type _Count = 0;
; 879  : 		_Distance(_First, _Last, _Count);
; 880  : 		reserve(_Count);
; 881  : 		_Construct(_First, _Last, input_iterator_tag());
; 882  : 		}
; 883  : 
; 884  : 	void _Construct(_Elem *_First,
; 885  : 		_Elem *_Last, random_access_iterator_tag)
; 886  : 		{	// initialize from [_First, _Last), pointers
; 887  : 		if (_First != _Last)
; 888  : 			assign(_First, _Last - _First);
; 889  : 		}
; 890  : 
; 891  : 	void _Construct(const _Elem *_First,
; 892  : 		const _Elem *_Last, random_access_iterator_tag)
; 893  : 		{	// initialize from [_First, _Last), const pointers
; 894  : 		if (_First != _Last)
; 895  : 			assign(_First, _Last - _First);
; 896  : 		}
; 897  : 
; 898  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 899  : 		: _Mybase(_STD move(_Right._Getal()))
; 900  : 		{	// construct by moving _Right
; 901  : 		_Tidy();
; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 903  : 		}
; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());

  00029	8b 50 10	 mov	 edx, DWORD PTR [eax+16]

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  0002c	72 02		 jb	 SHORT $LN26@compare
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  0002e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN26@compare:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));

  00030	52		 push	 edx
  00031	50		 push	 eax
  00032	ff 71 10	 push	 DWORD PTR [ecx+16]
  00035	6a 00		 push	 0
  00037	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare

; 2104 : 		}

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00046	59		 pop	 ecx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1757 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1750 : 		return (this->_Mysize());

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1751 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1345 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1346 : 		if (this->_Mysize() < _Off)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00009	57		 push	 edi
  0000a	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	72 7e		 jb	 SHORT $LN124@erase

; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)

  00011	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00014	8b c7		 mov	 eax, edi
  00016	2b c1		 sub	 eax, ecx
  00018	3b c2		 cmp	 eax, edx
  0001a	77 23		 ja	 SHORT $LN3@erase

; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  0001c	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  0001f	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00023	72 0e		 jb	 SHORT $LN49@erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00028	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1357 : 		return (*this);

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi

; 1358 : 		}

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
$LN49@erase:

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00037	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1358 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
$LN3@erase:

; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)

  0003f	85 d2		 test	 edx, edx
  00041	74 44		 je	 SHORT $LN121@erase

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00043	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00047	72 04		 jb	 SHORT $LN70@erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00049	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  0004b	eb 02		 jmp	 SHORT $LN71@erase
$LN70@erase:
  0004d	8b c6		 mov	 eax, esi
$LN71@erase:

; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;

  0004f	2b fa		 sub	 edi, edx
  00051	53		 push	 ebx
  00052	8d 1c 08	 lea	 ebx, DWORD PTR [eax+ecx]

; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

  00055	8b c7		 mov	 eax, edi
  00057	2b c1		 sub	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 553  : 		return (_Count == 0 ? _First1

  00059	74 0e		 je	 SHORT $LN90@erase
  0005b	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

  0005c	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 553  : 		return (_Count == 0 ? _First1

  0005f	50		 push	 eax
  00060	53		 push	 ebx
  00061	e8 00 00 00 00	 call	 _memmove
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN90@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00069	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  0006c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00070	5b		 pop	 ebx
  00071	72 0e		 jb	 SHORT $LN112@erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00073	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00075	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1357 : 		return (*this);

  00079	8b c6		 mov	 eax, esi
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi

; 1358 : 		}

  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
$LN112@erase:

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00081	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00083	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN121@erase:
  00087	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1357 : 		return (*this);

  00088	8b c6		 mov	 eax, esi
  0008a	5e		 pop	 esi

; 1358 : 		}

  0008b	5d		 pop	 ebp
  0008c	c2 08 00	 ret	 8
$LN124@erase:

; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)
; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)
; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow
; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)
; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do
; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())
; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;
; 2242 : 		_Eos(_Newsize);
; 2243 : 		}
; 2244 : 
; 2245 : 	[[noreturn]] void _Xlen() const
; 2246 : 		{	// report a length_error
; 2247 : 		_Xlength_error("string too long");
; 2248 : 		}
; 2249 : 
; 2250 : 	[[noreturn]] void _Xran() const
; 2251 : 		{	// report an out_of_range error
; 2252 : 		_Xout_of_range("invalid string position");

  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00094	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN126@erase:
$LN123@erase:
  00099	cc		 int	 3
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1337 : 		{	// erase elements [_Off, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1338 : 		if (this->_Mysize() < _Off)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00009	72 21		 jb	 SHORT $LN49@erase

; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  0000b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  0000e	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00012	72 0c		 jb	 SHORT $LN37@erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00016	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1341 : 		return (*this);

  0001a	8b c1		 mov	 eax, ecx

; 1342 : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN37@erase:

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00020	8b d1		 mov	 edx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00022	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1341 : 		return (*this);

  00026	8b c1		 mov	 eax, ecx

; 1342 : 		}

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN49@erase:

; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)
; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)
; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow
; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)
; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do
; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())
; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;
; 2242 : 		_Eos(_Newsize);
; 2243 : 		}
; 2244 : 
; 2245 : 	[[noreturn]] void _Xlen() const
; 2246 : 		{	// report a length_error
; 2247 : 		_Xlength_error("string too long");
; 2248 : 		}
; 2249 : 
; 2250 : 	[[noreturn]] void _Xran() const
; 2251 : 		{	// report an out_of_range error
; 2252 : 		_Xout_of_range("invalid string position");

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00031	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN51@erase:
$LN48@erase:
  00036	cc		 int	 3
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1174 : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 523  : 		return (*_First == 0 ? 0

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000a	75 0e		 jne	 SHORT $LN5@assign
  0000c	33 d2		 xor	 edx, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  0000e	52		 push	 edx
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00015	5e		 pop	 esi

; 1177 : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN5@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 523  : 		return (*_First == 0 ? 0

  0001a	8b d6		 mov	 edx, esi
  0001c	57		 push	 edi
  0001d	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL7@assign:
  00020	8a 02		 mov	 al, BYTE PTR [edx]
  00022	42		 inc	 edx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL7@assign
  00027	2b d7		 sub	 edx, edi
  00029	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  0002a	52		 push	 edx
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00031	5e		 pop	 esi

; 1177 : 		}

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  00007	56		 push	 esi

; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)

  00008	8b f1		 mov	 esi, ecx

; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  0000a	85 db		 test	 ebx, ebx
  0000c	74 57		 je	 SHORT $LN2@assign

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00014	72 04		 jb	 SHORT $LN20@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00018	eb 02		 jmp	 SHORT $LN21@assign
$LN20@assign:
  0001a	8b c6		 mov	 eax, esi
$LN21@assign:

; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  0001c	3b d8		 cmp	 ebx, eax
  0001e	72 45		 jb	 SHORT $LN2@assign

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00020	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00023	72 04		 jb	 SHORT $LN38@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00025	8b 16		 mov	 edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00027	eb 02		 jmp	 SHORT $LN39@assign
$LN38@assign:
  00029	8b d6		 mov	 edx, esi
$LN39@assign:

; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  0002b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002e	03 c2		 add	 eax, edx
  00030	3b c3		 cmp	 eax, ebx
  00032	76 31		 jbe	 SHORT $LN2@assign

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00034	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00037	72 16		 jb	 SHORT $LN65@assign

; 1162 : 			return (assign(*this,

  00039	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  0003c	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1162 : 			return (assign(*this,

  0003e	8b ce		 mov	 ecx, esi
  00040	2b d8		 sub	 ebx, eax
  00042	53		 push	 ebx
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx

; 1171 : 		}

  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
$LN65@assign:

; 1162 : 			return (assign(*this,

  0004f	ff 75 0c	 push	 DWORD PTR __Count$[ebp]

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00052	8b c6		 mov	 eax, esi

; 1162 : 			return (assign(*this,

  00054	8b ce		 mov	 ecx, esi
  00056	2b d8		 sub	 ebx, eax
  00058	53		 push	 ebx
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx

; 1171 : 		}

  00061	5d		 pop	 ebp
  00062	c2 08 00	 ret	 8
$LN2@assign:
  00065	57		 push	 edi

; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)

  00066	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00069	83 ff fe	 cmp	 edi, -2			; fffffffeH
  0006c	77 7d		 ja	 SHORT $LN233@assign

; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)

  0006e	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00071	73 19		 jae	 SHORT $LN75@assign

; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow

  00073	ff 76 10	 push	 DWORD PTR [esi+16]
  00076	8b ce		 mov	 ecx, esi
  00078	57		 push	 edi
  00079	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do

  0007e	85 ff		 test	 edi, edi

; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))

  00080	74 60		 je	 SHORT $LN227@assign
$LN232@assign:

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00082	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00086	72 2b		 jb	 SHORT $LN185@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00088	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  0008a	eb 29		 jmp	 SHORT $LN186@assign
$LN75@assign:

; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)

  0008c	85 ff		 test	 edi, edi
  0008e	75 f2		 jne	 SHORT $LN232@assign

; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00090	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00093	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00097	72 0e		 jb	 SHORT $LN163@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00099	8b 06		 mov	 eax, DWORD PTR [esi]
  0009b	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0009c	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1170 : 		return (*this);

  0009f	8b c6		 mov	 eax, esi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx

; 1171 : 		}

  000a3	5d		 pop	 ebp
  000a4	c2 08 00	 ret	 8
$LN163@assign:

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  000a7	8b c6		 mov	 eax, esi
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  000ac	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1171 : 		}

  000af	5d		 pop	 ebp
  000b0	c2 08 00	 ret	 8
$LN185@assign:

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  000b3	8b c6		 mov	 eax, esi
$LN186@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 530  : 		return (_Count == 0 ? _First1

  000b5	85 ff		 test	 edi, edi
  000b7	74 0b		 je	 SHORT $LN196@assign
  000b9	57		 push	 edi
  000ba	53		 push	 ebx
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 _memcpy
  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN196@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  000c4	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  000c7	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000cb	72 0f		 jb	 SHORT $LN218@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  000cd	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  000cf	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1170 : 		return (*this);

  000d3	8b c6		 mov	 eax, esi
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx

; 1171 : 		}

  000d8	5d		 pop	 ebp
  000d9	c2 08 00	 ret	 8
$LN218@assign:

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  000dc	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  000de	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN227@assign:
  000e2	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1170 : 		return (*this);

  000e3	8b c6		 mov	 eax, esi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx

; 1171 : 		}

  000e7	5d		 pop	 ebp
  000e8	c2 08 00	 ret	 8
$LN233@assign:

; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())
; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;
; 2242 : 		_Eos(_Newsize);
; 2243 : 		}
; 2244 : 
; 2245 : 	[[noreturn]] void _Xlen() const
; 2246 : 		{	// report a length_error
; 2247 : 		_Xlength_error("string too long");

  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  000f0	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN235@assign:
$LN230@assign:
  000f5	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1141 : 		if (_Right.size() < _Roff)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  0000e	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  00011	3b f9		 cmp	 edi, ecx
  00013	0f 82 e8 00 00
	00		 jb	 $LN258@assign

; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;

  00019	2b f9		 sub	 edi, ecx

; 1144 : 		if (_Count < _Num)

  0001b	39 7d 10	 cmp	 DWORD PTR __Count$[ebp], edi
  0001e	0f 42 7d 10	 cmovb	 edi, DWORD PTR __Count$[ebp]

; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 47		 jne	 SHORT $LN4@assign

; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  00026	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]

; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)

  00029	39 46 10	 cmp	 DWORD PTR [esi+16], eax
  0002c	0f 82 d9 00 00
	00		 jb	 $LN260@assign

; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00032	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00035	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00039	72 19		 jb	 SHORT $LN71@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  0003b	8b 16		 mov	 edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0003d	51		 push	 ecx
  0003e	6a 00		 push	 0
  00040	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00042	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  00046	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0004b	5f		 pop	 edi

; 1155 : 		return (*this);

  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx

; 1156 : 		}

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN71@assign:

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00054	8b d6		 mov	 edx, esi

; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  00056	51		 push	 ecx
  00057	6a 00		 push	 0
  00059	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0005b	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0005f	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00064	5f		 pop	 edi

; 1155 : 		return (*this);

  00065	8b c6		 mov	 eax, esi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx

; 1156 : 		}

  00069	5d		 pop	 ebp
  0006a	c2 0c 00	 ret	 12			; 0000000cH
$LN4@assign:

; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)

  0006d	83 ff fe	 cmp	 edi, -2			; fffffffeH
  00070	0f 87 9f 00 00
	00		 ja	 $LN261@assign

; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)

  00076	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00079	73 24		 jae	 SHORT $LN84@assign

; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow

  0007b	ff 76 10	 push	 DWORD PTR [esi+16]
  0007e	8b ce		 mov	 ecx, esi
  00080	57		 push	 edi
  00081	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00086	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]

; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do

  00089	85 ff		 test	 edi, edi

; 1149 : 		else if (_Grow(_Num))

  0008b	74 6b		 je	 SHORT $LN253@assign
$LN257@assign:

; 506  : 			? _STD addressof(*this->_Bx._Ptr)
; 507  : 			: this->_Bx._Buf);
; 508  : 		}
; 509  : 
; 510  : 	const value_type *_Myptr() const
; 511  : 		{	// determine current pointer to buffer for nonmutable string
; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  0008d	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H
  00091	72 02		 jb	 SHORT $LN193@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00093	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN193@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00095	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00099	72 2b		 jb	 SHORT $LN211@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  0009b	8b 16		 mov	 edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  0009d	eb 29		 jmp	 SHORT $LN212@assign
$LN84@assign:

; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)

  0009f	85 ff		 test	 edi, edi
  000a1	75 ea		 jne	 SHORT $LN257@assign

; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  000a3	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  000a6	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000aa	72 0e		 jb	 SHORT $LN172@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  000ac	8b 06		 mov	 eax, DWORD PTR [esi]
  000ae	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  000af	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1155 : 		return (*this);

  000b2	8b c6		 mov	 eax, esi
  000b4	5e		 pop	 esi
  000b5	5b		 pop	 ebx

; 1156 : 		}

  000b6	5d		 pop	 ebp
  000b7	c2 0c 00	 ret	 12			; 0000000cH
$LN172@assign:

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  000ba	8b c6		 mov	 eax, esi
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  000bf	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1156 : 		}

  000c2	5d		 pop	 ebp
  000c3	c2 0c 00	 ret	 12			; 0000000cH
$LN211@assign:

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  000c6	8b d6		 mov	 edx, esi
$LN212@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 530  : 		return (_Count == 0 ? _First1

  000c8	85 ff		 test	 edi, edi
  000ca	74 0e		 je	 SHORT $LN222@assign
  000cc	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1151 : 			_Traits::copy(this->_Myptr(),

  000cd	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 530  : 		return (_Count == 0 ? _First1

  000d0	50		 push	 eax
  000d1	52		 push	 edx
  000d2	e8 00 00 00 00	 call	 _memcpy
  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN222@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  000da	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  000dd	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  000e1	72 0f		 jb	 SHORT $LN244@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  000e3	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  000e5	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1155 : 		return (*this);

  000e9	8b c6		 mov	 eax, esi
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx

; 1156 : 		}

  000ee	5d		 pop	 ebp
  000ef	c2 0c 00	 ret	 12			; 0000000cH
$LN244@assign:

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  000f2	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  000f4	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN253@assign:
  000f8	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1155 : 		return (*this);

  000f9	8b c6		 mov	 eax, esi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx

; 1156 : 		}

  000fd	5d		 pop	 ebp
  000fe	c2 0c 00	 ret	 12			; 0000000cH
$LN258@assign:

; 2248 : 		}
; 2249 : 
; 2250 : 	[[noreturn]] void _Xran() const
; 2251 : 		{	// report an out_of_range error
; 2252 : 		_Xout_of_range("invalid string position");

  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00106	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN262@assign:
$LN260@assign:
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00110	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN263@assign:
$LN261@assign:

; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())
; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;
; 2242 : 		_Eos(_Newsize);
; 2243 : 		}
; 2244 : 
; 2245 : 	[[noreturn]] void _Xlen() const
; 2246 : 		{	// report a length_error
; 2247 : 		_Xlength_error("string too long");

  00115	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0011a	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN264@assign:
$LN255@assign:
  0011f	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1005 : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)
; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)
; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow
; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)
; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do
; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	83 f8 10	 cmp	 eax, 16			; 00000010H
  00009	72 09		 jb	 SHORT $LN6@basic_stri

; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  0000b	40		 inc	 eax
  0000c	50		 push	 eax
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN6@basic_stri:

; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00014	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  0001b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00022	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00026	72 07		 jb	 SHORT $LN106@basic_stri
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0002b	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1007 : 		}

  0002e	c3		 ret	 0
$LN106@basic_stri:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0002f	c6 06 00	 mov	 BYTE PTR [esi], 0
  00032	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1007 : 		}

  00033	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv, COMDAT
; _this$ = ecx

; 950  : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 506  : 			? _STD addressof(*this->_Bx._Ptr)
; 507  : 			: this->_Bx._Buf);
; 508  : 		}
; 509  : 
; 510  : 	const value_type *_Myptr() const
; 511  : 		{	// determine current pointer to buffer for nonmutable string
; 512  : 		return (this->_BUF_SIZE <= this->_Myres
; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}
; 516  : 
; 517  : 	union _Bxty
; 518  : 		{	// storage for small buffer or pointer to larger one
; 519  : 		value_type _Buf[_BUF_SIZE];
; 520  : 		pointer _Ptr;
; 521  : 		char _Alias[_BUF_SIZE];	// to permit aliasing
; 522  : 		} _Bx;
; 523  : 
; 524  : 	size_type _Mysize;	// current length of string
; 525  : 	size_type _Myres;	// current storage reserved for string
; 526  : 	};
; 527  : 
; 528  : 		// TEMPLATE CLASS _String_alloc
; 529  : template<class _Alloc_types>
; 530  : 	class _String_alloc
; 531  : 	{	// base class for basic_string to hold allocator
; 532  : public:
; 533  : 	typedef _String_alloc<_Alloc_types> _Myt;
; 534  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 535  : 	typedef typename _Alloc_types::_Alty _Alty;
; 536  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 537  : 
; 538  : 	typedef typename _Val_types::value_type value_type;
; 539  : 	typedef typename _Val_types::size_type size_type;
; 540  : 	typedef typename _Val_types::difference_type difference_type;
; 541  : 	typedef typename _Val_types::pointer pointer;
; 542  : 	typedef typename _Val_types::const_pointer const_pointer;
; 543  : 	typedef typename _Val_types::reference reference;
; 544  : 	typedef typename _Val_types::const_reference const_reference;
; 545  : 
; 546  : 	typedef _String_iterator<_String_val<_Val_types> > iterator;
; 547  : 	typedef _String_const_iterator<_String_val<_Val_types> > const_iterator;
; 548  : 
; 549  : 	enum
; 550  : 		{	// length of internal buffer, [1, 16]
; 551  : 		_BUF_SIZE = _String_val<_Val_types>::_BUF_SIZE
; 552  : 		};
; 553  : 
; 554  : 	enum
; 555  : 		{	// roundup mask for allocated buffers, [0, 15]
; 556  : 		_ALLOC_MASK = _String_val<_Val_types>::_ALLOC_MASK
; 557  : 		};
; 558  : 
; 559  : 	value_type *_Myptr()
; 560  : 		{	// determine current pointer to buffer for mutable string
; 561  : 		return (_Get_data()._Myptr());
; 562  : 		}
; 563  : 
; 564  : 	const value_type *_Myptr() const
; 565  : 		{	// determine current pointer to buffer for nonmutable string
; 566  : 		return (_Get_data()._Myptr());
; 567  : 		}
; 568  : 
; 569  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 570  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 571  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 572  : 		{	// construct allocator from _Al
; 573  : 		}
; 574  : 
; 575  : 	_String_alloc(_Alloc&& _Al)
; 576  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 577  : 		{	// construct allocator from _Al
; 578  : 		}
; 579  : 
; 580  : 	void _Copy_alloc(const _Alty& _Al)
; 581  : 		{	// replace old allocator
; 582  : 		_Pocca(_Getal(), _Al);
; 583  : 		}
; 584  : 
; 585  : 	void _Move_alloc(_Alty& _Al)
; 586  : 		{	// replace old allocator
; 587  : 		_Pocma(_Getal(), _Al);
; 588  : 		}
; 589  : 
; 590  : 	void _Swap_alloc(_Myt& _Right)
; 591  : 		{	// swap allocators
; 592  : 		_Pocs(_Getal(), _Right._Getal());
; 593  : 		}
; 594  : 
; 595  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 596  : 	_String_alloc(const _Alloc& _Al = _Alloc())
; 597  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 598  : 		{	// construct allocator from _Al
; 599  : 		_Alloc_proxy();
; 600  : 		}
; 601  : 
; 602  : 	_String_alloc(_Alloc&& _Al)
; 603  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 604  : 		{	// construct allocator from _Al
; 605  : 		_Alloc_proxy();
; 606  : 		}
; 607  : 
; 608  : 	~_String_alloc() _NOEXCEPT
; 609  : 		{	// destroy the object
; 610  : 		_Free_proxy();
; 611  : 		}
; 612  : 
; 613  : 	void _Copy_alloc(const _Alty& _Al)
; 614  : 		{	// replace old allocator
; 615  : 		_Free_proxy();
; 616  : 		_Pocca(_Getal(), _Al);
; 617  : 		_Alloc_proxy();
; 618  : 		}
; 619  : 
; 620  : 	void _Move_alloc(_Alty& _Al)
; 621  : 		{	// replace old allocator
; 622  : 		_Free_proxy();
; 623  : 		_Pocma(_Getal(), _Al);
; 624  : 		_Alloc_proxy();
; 625  : 		}
; 626  : 
; 627  : 	void _Swap_alloc(_Myt& _Right)
; 628  : 		{	// swap allocators
; 629  : 		_Pocs(_Getal(), _Right._Getal());
; 630  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 631  : 		}
; 632  : 
; 633  : 	void _Alloc_proxy()
; 634  : 		{	// construct proxy
; 635  : 		typename _Alty::template rebind<_Container_proxy>::other
; 636  : 			_Alproxy(_Getal());
; 637  : 		_Myproxy() = _Alproxy.allocate(1);
; 638  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 639  : 		_Myproxy()->_Mycont = &_Get_data();
; 640  : 		}
; 641  : 
; 642  : 	void _Free_proxy()
; 643  : 		{	// destroy proxy
; 644  : 		typename _Alty::template rebind<_Container_proxy>::other
; 645  : 			_Alproxy(_Getal());
; 646  : 		_Orphan_all();
; 647  : 		_Alproxy.destroy(_Myproxy());
; 648  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 649  : 		_Myproxy() = 0;
; 650  : 		}
; 651  : 
; 652  : 	_Iterator_base12 **_Getpfirst() const
; 653  : 		{	// get address of iterator chain
; 654  : 		return (_Get_data()._Getpfirst());
; 655  : 		}
; 656  : 
; 657  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 658  : 		{	// return reference to _Myproxy
; 659  : 		return (_Get_data()._Myproxy);
; 660  : 		}
; 661  : 
; 662  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 663  : 		{	// return const reference to _Myproxy
; 664  : 		return (_Get_data()._Myproxy);
; 665  : 		}
; 666  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 667  : 
; 668  : 	void _Orphan_all()
; 669  : 		{	// orphan all iterators
; 670  : 		_Get_data()._Orphan_all();
; 671  : 		}
; 672  : 
; 673  : 	void _Swap_all(_Myt& _Right)
; 674  : 		{	// swap all iterators
; 675  : 		_Get_data()._Swap_all(_Right._Get_data());
; 676  : 		}
; 677  : 
; 678  : 	_Alty& _Getal() _NOEXCEPT
; 679  : 		{	// return reference to allocator
; 680  : 		return (_Mypair._Get_first());
; 681  : 		}
; 682  : 
; 683  : 	const _Alty& _Getal() const _NOEXCEPT
; 684  : 		{	// return const reference to allocator
; 685  : 		return (_Mypair._Get_first());
; 686  : 		}
; 687  : 
; 688  : 	_String_val<_Val_types>& _Get_data() _NOEXCEPT
; 689  : 		{	// return reference to _String_val
; 690  : 		return (_Mypair._Get_second());
; 691  : 		}
; 692  : 
; 693  : 	const _String_val<_Val_types>& _Get_data() const _NOEXCEPT
; 694  : 		{	// return const reference to _String_val
; 695  : 		return (_Mypair._Get_second());
; 696  : 		}
; 697  : 
; 698  : 	typedef typename _String_val<_Val_types>::_Bxty _Bxty;
; 699  : 
; 700  : 	_Bxty& _Bx() _NOEXCEPT
; 701  : 		{	// return reference to _Bx
; 702  : 		return (_Get_data()._Bx);
; 703  : 		}
; 704  : 
; 705  : 	const _Bxty& _Bx() const _NOEXCEPT
; 706  : 		{	// return const reference to _Bx
; 707  : 		return (_Get_data()._Bx);
; 708  : 		}
; 709  : 
; 710  : 	size_type& _Mysize() _NOEXCEPT
; 711  : 		{	// return reference to _Mysize
; 712  : 		return (_Get_data()._Mysize);
; 713  : 		}
; 714  : 
; 715  : 	const size_type& _Mysize() const _NOEXCEPT
; 716  : 		{	// return const reference to _Mysize
; 717  : 		return (_Get_data()._Mysize);
; 718  : 		}
; 719  : 
; 720  : 	size_type& _Myres() _NOEXCEPT
; 721  : 		{	// return reference to _Myres
; 722  : 		return (_Get_data()._Myres);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi

; 950  : 		{	// assign by moving _Right

  00008	8b f9		 mov	 edi, ecx

; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)

  0000a	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0000e	73 15		 jae	 SHORT $LN2@Assign_rv

; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,

  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00013	83 c0 01	 add	 eax, 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 553  : 		return (_Count == 0 ? _First1

  00016	74 1b		 je	 SHORT $LN3@Assign_rv
  00018	50		 push	 eax
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 954  : 		else

  00023	eb 0e		 jmp	 SHORT $LN3@Assign_rv
$LN2@Assign_rv:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00025	85 ff		 test	 edi, edi
  00027	74 04		 je	 SHORT $LN81@Assign_rv
  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	89 07		 mov	 DWORD PTR [edi], eax
$LN81@Assign_rv:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 957  : 			_Right._Bx()._Ptr = pointer();

  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN3@Assign_rv:

; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();

  00033	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00036	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 960  : 		this->_Myres() = _Right._Myres();

  00039	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0003c	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)
; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)
; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow
; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)
; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do
; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())
; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  0003f	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00046	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  0004d	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00051	72 0b		 jb	 SHORT $LN236@Assign_rv
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 689  : 	return (reinterpret_cast<_Ty *>(

  00053	8b 06		 mov	 eax, DWORD PTR [esi]
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00057	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 962  : 		}

  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
$LN236@Assign_rv:
  0005e	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0005f	c6 06 00	 mov	 BYTE PTR [esi], 0
  00062	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 962  : 		}

  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 900  : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  00004	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00007	8b f1		 mov	 esi, ecx

; 2201 : 		}
; 2202 : 
; 2203 : 	bool _Grow(size_type _Newsize,
; 2204 : 		bool _Trim = false)
; 2205 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2206 : 		if (max_size() < _Newsize)
; 2207 : 			_Xlen();	// result too long
; 2208 : 		if (this->_Myres() < _Newsize)
; 2209 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow
; 2210 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2211 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2212 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2213 : 		else if (_Newsize == 0)
; 2214 : 			_Eos(0);	// new size is zero, just null terminate
; 2215 : 		return (0 < _Newsize);	// return true only if more work to do
; 2216 : 		}
; 2217 : 
; 2218 : 	bool _Inside(const _Elem *_Ptr)
; 2219 : 		{	// test if _Ptr points inside string
; 2220 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2221 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)
; 2222 : 			return (false);	// don't ask
; 2223 : 		else
; 2224 : 			return (true);
; 2225 : 		}
; 2226 : 
; 2227 : 	void _Tidy(bool _Built = false,
; 2228 : 		size_type _Newsize = 0)
; 2229 : 		{	// initialize buffer, deallocating any storage
; 2230 : 		if (!_Built)
; 2231 : 			;
; 2232 : 		else if (this->_BUF_SIZE <= this->_Myres())
; 2233 : 			{	// copy any leftovers to small buffer and deallocate
; 2234 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2235 : 			this->_Getal().destroy(&this->_Bx()._Ptr);
; 2236 : 			if (0 < _Newsize)
; 2237 : 				_Traits::copy(this->_Bx()._Buf,
; 2238 : 					_STD addressof(*_Ptr), _Newsize);
; 2239 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);
; 2240 : 			}
; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00009	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 904  : 
; 905  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 906  : 		: _Mybase(_Al)
; 907  : 		{	// construct by moving _Right, allocator
; 908  : 		if (this->_Getal() != _Right._Getal())
; 909  : 			assign(_Right.begin(), _Right.end());
; 910  : 		else
; 911  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 912  : 		}
; 913  : 
; 914  : 	_Myt& operator=(_Myt&& _Right)
; 915  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 916  : 			|| _Alty::is_always_equal::value)
; 917  : 		{	// assign by moving _Right
; 918  : 		if (this != &_Right)
; 919  : 			{	// different, assign it
; 920  : 			_Tidy(true);
; 921  : 
; 922  : 			if (_Alty::propagate_on_container_move_assignment::value
; 923  : 				&& this->_Getal() != _Right._Getal())
; 924  : 				this->_Move_alloc(_Right._Getal());
; 925  : 
; 926  : 			if (this->_Getal() != _Right._Getal())
; 927  : 				assign(_Right.begin(), _Right.end());
; 928  : 			else
; 929  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 930  : 			}
; 931  : 		return (*this);
; 932  : 		}
; 933  : 
; 934  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 935  : 		{	// assign by moving _Right
; 936  : 		if (this == &_Right)
; 937  : 			;
; 938  : 		else if (get_allocator() != _Right.get_allocator()
; 939  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 940  : 			*this = _Right;
; 941  : 		else
; 942  : 			{	// not same, clear this and steal from _Right
; 943  : 			_Tidy(true);
; 944  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 945  : 			}
; 946  : 		return (*this);
; 947  : 		}
; 948  : 
; 949  : 	void _Assign_rv(_Myt&& _Right)
; 950  : 		{	// assign by moving _Right
; 951  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 952  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 953  : 				_Right._Mysize() + 1);
; 954  : 		else
; 955  : 			{	// copy pointer
; 956  : 			this->_Getal().construct(&this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 957  : 			_Right._Bx()._Ptr = pointer();
; 958  : 			}
; 959  : 		this->_Mysize() = _Right._Mysize();
; 960  : 		this->_Myres() = _Right._Myres();
; 961  : 		_Right._Tidy();
; 962  : 		}
; 963  : 
; 964  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 965  : 		const _Alloc& _Al = allocator_type())
; 966  : 		: _Mybase(_Al)
; 967  : 		{	// construct from initializer_list
; 968  : 		_Tidy();
; 969  : 		assign(_Ilist.begin(), _Ilist.end());
; 970  : 		}
; 971  : 
; 972  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 973  : 		{	// assign initializer_list
; 974  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 975  : 		}
; 976  : 
; 977  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 978  : 		{	// append initializer_list
; 979  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 980  : 		}
; 981  : 
; 982  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 983  : 		{	// assign initializer_list
; 984  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 985  : 		}
; 986  : 
; 987  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 988  : 		{	// append initializer_list
; 989  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 990  : 		}
; 991  : 
; 992  : 	iterator insert(const_iterator _Where,
; 993  : 		_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// insert initializer_list
; 995  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 999  : 		_XSTD initializer_list<_Elem> _Ilist)
; 1000 : 		{	// replace with initializer_list
; 1001 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1002 : 		}
; 1003 : 
; 1004 : 	~basic_string() _NOEXCEPT
; 1005 : 		{	// destroy the string
; 1006 : 		_Tidy(true);
; 1007 : 		}
; 1008 : 
; 1009 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1010 : 
; 1011 : 	_Myt& operator=(const _Myt& _Right)
; 1012 : 		{	// assign _Right
; 1013 : 		if (this != &_Right)
; 1014 : 			{	// different, assign it
; 1015 : 			if (this->_Getal() != _Right._Getal()
; 1016 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1017 : 				{	// change allocator before copying
; 1018 : 				_Tidy(true);
; 1019 : 				this->_Copy_alloc(_Right._Getal());
; 1020 : 				}
; 1021 : 
; 1022 : 			assign(_Right);
; 1023 : 			}
; 1024 : 		return (*this);
; 1025 : 		}
; 1026 : 
; 1027 : 	_Myt& operator=(const _Elem *_Ptr)
; 1028 : 		{	// assign [_Ptr, <null>)
; 1029 : 		return (assign(_Ptr));
; 1030 : 		}
; 1031 : 
; 1032 : 	_Myt& operator=(_Elem _Ch)
; 1033 : 		{	// assign 1 * _Ch
; 1034 : 		return (assign(1, _Ch));
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& operator+=(const _Myt& _Right)
; 1038 : 		{	// append _Right
; 1039 : 		return (append(_Right));
; 1040 : 		}
; 1041 : 
; 1042 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1043 : 		{	// append [_Ptr, <null>)
; 1044 : 		return (append(_Ptr));
; 1045 : 		}
; 1046 : 
; 1047 : 	_Myt& operator+=(_Elem _Ch)
; 1048 : 		{	// append 1 * _Ch
; 1049 : 		return (append((size_type)1, _Ch));
; 1050 : 		}
; 1051 : 
; 1052 : 	_Myt& append(const _Myt& _Right)
; 1053 : 		{	// append _Right
; 1054 : 		return (append(_Right, 0, npos));
; 1055 : 		}
; 1056 : 
; 1057 : 	_Myt& append(const _Myt& _Right,
; 1058 : 		size_type _Roff, size_type _Count = npos)
; 1059 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1060 : 		if (_Right.size() < _Roff)
; 1061 : 			_Xran();	// _Roff off end
; 1062 : 		size_type _Num = _Right.size() - _Roff;
; 1063 : 		if (_Num < _Count)
; 1064 : 			_Count = _Num;	// trim _Count to size
; 1065 : 		if (npos - this->_Mysize() <= _Count)
; 1066 : 			_Xlen();	// result too long
; 1067 : 
; 1068 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1069 : 			{	// make room and append new stuff
; 1070 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1071 : 				_Right._Myptr() + _Roff, _Count);
; 1072 : 			_Eos(_Num);
; 1073 : 			}
; 1074 : 		return (*this);
; 1075 : 		}
; 1076 : 
; 1077 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1078 : 		{	// append [_Ptr, _Ptr + _Count)
; 1079 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1080 : 		if (_Inside(_Ptr))
; 1081 : 			return (append(*this,
; 1082 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1083 : 		if (npos - this->_Mysize() <= _Count)
; 1084 : 			_Xlen();	// result too long
; 1085 : 
; 1086 : 		size_type _Num;
; 1087 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1088 : 			{	// make room and append new stuff
; 1089 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1090 : 			_Eos(_Num);
; 1091 : 			}
; 1092 : 		return (*this);
; 1093 : 		}
; 1094 : 
; 1095 : 	_Myt& append(const _Elem *_Ptr)
; 1096 : 		{	// append [_Ptr, <null>)
; 1097 : 		_DEBUG_POINTER(_Ptr);
; 1098 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1099 : 		}
; 1100 : 
; 1101 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1102 : 		{	// append _Count * _Ch
; 1103 : 		if (npos - this->_Mysize() <= _Count)
; 1104 : 			_Xlen();	// result too long
; 1105 : 
; 1106 : 		size_type _Num;
; 1107 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1108 : 			{	// make room and append new stuff using assign
; 1109 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1110 : 			_Eos(_Num);
; 1111 : 			}
; 1112 : 		return (*this);
; 1113 : 		}
; 1114 : 
; 1115 : 	template<class _Iter>
; 1116 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1117 : 			_Myt&>::type
; 1118 : 		append(_Iter _First, _Iter _Last)
; 1119 : 		{	// append [_First, _Last), input iterators
; 1120 : 		return (replace(end(), end(), _First, _Last));
; 1121 : 		}
; 1122 : 
; 1123 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1124 : 		{	// append [_First, _Last), const pointers
; 1125 : 		return (replace(end(), end(), _First, _Last));
; 1126 : 		}
; 1127 : 
; 1128 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1129 : 		{	// append [_First, _Last), const_iterators
; 1130 : 		return (replace(end(), end(), _First, _Last));
; 1131 : 		}
; 1132 : 
; 1133 : 	_Myt& assign(const _Myt& _Right)
; 1134 : 		{	// assign _Right
; 1135 : 		return (assign(_Right, 0, npos));
; 1136 : 		}
; 1137 : 
; 1138 : 	_Myt& assign(const _Myt& _Right,
; 1139 : 		size_type _Roff, size_type _Count = npos)
; 1140 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1141 : 		if (_Right.size() < _Roff)
; 1142 : 			_Xran();	// _Roff off end
; 1143 : 		size_type _Num = _Right.size() - _Roff;
; 1144 : 		if (_Count < _Num)
; 1145 : 			_Num = _Count;	// trim _Num to size
; 1146 : 
; 1147 : 		if (this == &_Right)
; 1148 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1149 : 		else if (_Grow(_Num))
; 1150 : 			{	// make room and assign new stuff
; 1151 : 			_Traits::copy(this->_Myptr(),
; 1152 : 				_Right._Myptr() + _Roff, _Num);
; 1153 : 			_Eos(_Num);
; 1154 : 			}
; 1155 : 		return (*this);
; 1156 : 		}
; 1157 : 
; 1158 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1159 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1160 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1161 : 		if (_Inside(_Ptr))
; 1162 : 			return (assign(*this,
; 1163 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1164 : 
; 1165 : 		if (_Grow(_Count))
; 1166 : 			{	// make room and assign new stuff
; 1167 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1168 : 			_Eos(_Count);
; 1169 : 			}
; 1170 : 		return (*this);
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const _Elem *_Ptr)
; 1174 : 		{	// assign [_Ptr, <null>)
; 1175 : 		_DEBUG_POINTER(_Ptr);
; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00010	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00017	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 902  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  0001a	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv

; 903  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 824  : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 523  : 		return (*_First == 0 ? 0

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2241 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00009	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1180 : 		{	// assign _Count * _Ch
; 1181 : 		if (_Count == npos)
; 1182 : 			_Xlen();	// result too long
; 1183 : 
; 1184 : 		if (_Grow(_Count))
; 1185 : 			{	// make room and assign new stuff
; 1186 : 			_Chassign(0, _Count, _Ch);
; 1187 : 			_Eos(_Count);
; 1188 : 			}
; 1189 : 		return (*this);
; 1190 : 		}
; 1191 : 
; 1192 : 	template<class _Iter>
; 1193 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1194 : 			_Myt&>::type
; 1195 : 		assign(_Iter _First, _Iter _Last)
; 1196 : 		{	// assign [_First, _Last), input iterators
; 1197 : 		return (replace(begin(), end(), _First, _Last));
; 1198 : 		}
; 1199 : 
; 1200 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1201 : 		{	// assign [_First, _Last), const pointers
; 1202 : 		return (replace(begin(), end(), _First, _Last));
; 1203 : 		}
; 1204 : 
; 1205 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1206 : 		{	// assign [_First, _Last), const_iterators
; 1207 : 		return (replace(begin(), end(), _First, _Last));
; 1208 : 		}
; 1209 : 
; 1210 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1211 : 		{	// insert _Right at _Off
; 1212 : 		return (insert(_Off, _Right, 0, npos));
; 1213 : 		}
; 1214 : 
; 1215 : 	_Myt& insert(size_type _Off,
; 1216 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1217 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1218 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1219 : 			_Xran();	// _Off or _Roff off end
; 1220 : 		size_type _Num = _Right.size() - _Roff;
; 1221 : 		if (_Num < _Count)
; 1222 : 			_Count = _Num;	// trim _Count to size
; 1223 : 		if (npos - this->_Mysize() <= _Count)
; 1224 : 			_Xlen();	// result too long
; 1225 : 
; 1226 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1227 : 			{	// make room and insert new stuff
; 1228 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1229 : 				this->_Myptr() + _Off,
; 1230 : 				this->_Mysize() - _Off);	// empty out hole
; 1231 : 			if (this == &_Right)
; 1232 : 				_Traits::move(this->_Myptr() + _Off,
; 1233 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1234 : 						_Count);	// substring
; 1235 : 			else
; 1236 : 				_Traits::copy(this->_Myptr() + _Off,
; 1237 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1238 : 			_Eos(_Num);
; 1239 : 			}
; 1240 : 		return (*this);
; 1241 : 		}
; 1242 : 
; 1243 : 	_Myt& insert(size_type _Off,
; 1244 : 		const _Elem *_Ptr, size_type _Count)
; 1245 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1246 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1247 : 		if (_Inside(_Ptr))
; 1248 : 			return (insert(_Off, *this,
; 1249 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1250 : 		if (this->_Mysize() < _Off)
; 1251 : 			_Xran();	// _Off off end
; 1252 : 		if (npos - this->_Mysize() <= _Count)
; 1253 : 			_Xlen();	// result too long
; 1254 : 		size_type _Num;
; 1255 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1256 : 			{	// make room and insert new stuff
; 1257 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1258 : 				this->_Myptr() + _Off,
; 1259 : 				this->_Mysize() - _Off);	// empty out hole
; 1260 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1261 : 			_Eos(_Num);
; 1262 : 			}
; 1263 : 		return (*this);
; 1264 : 		}
; 1265 : 
; 1266 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1267 : 		{	// insert [_Ptr, <null>) at _Off
; 1268 : 		_DEBUG_POINTER(_Ptr);
; 1269 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1270 : 		}
; 1271 : 
; 1272 : 	_Myt& insert(size_type _Off,
; 1273 : 		size_type _Count, _Elem _Ch)
; 1274 : 		{	// insert _Count * _Ch at _Off
; 1275 : 		if (this->_Mysize() < _Off)
; 1276 : 			_Xran();	// _Off off end
; 1277 : 		if (npos - this->_Mysize() <= _Count)
; 1278 : 			_Xlen();	// result too long
; 1279 : 		size_type _Num;
; 1280 : 		if (0 < _Count && _Grow(_Num = this->_Mysize() + _Count))
; 1281 : 			{	// make room and insert new stuff
; 1282 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1283 : 				this->_Myptr() + _Off,
; 1284 : 				this->_Mysize() - _Off);	// empty out hole
; 1285 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1286 : 			_Eos(_Num);
; 1287 : 			}
; 1288 : 		return (*this);
; 1289 : 		}
; 1290 : 
; 1291 : 	iterator insert(const_iterator _Where)
; 1292 : 		{	// insert <null> at _Where
; 1293 : 		return (insert(_Where, _Elem()));
; 1294 : 		}
; 1295 : 
; 1296 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1297 : 		{	// insert _Ch at _Where
; 1298 : 		size_type _Off = _Where - begin();
; 1299 : 		insert(_Off, 1, _Ch);
; 1300 : 		return (begin() + _Off);
; 1301 : 		}
; 1302 : 
; 1303 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1304 : 		{	// insert _Count * _Elem at _Where
; 1305 : 		size_type _Off = _Where - begin();
; 1306 : 		insert(_Off, _Count, _Ch);
; 1307 : 		return (begin() + _Off);
; 1308 : 		}
; 1309 : 
; 1310 : 	template<class _Iter>
; 1311 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1312 : 			iterator>::type
; 1313 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1314 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1315 : 		size_type _Off = _Where - begin();
; 1316 : 		replace(_Where, _Where, _First, _Last);
; 1317 : 		return (begin() + _Off);
; 1318 : 		}
; 1319 : 
; 1320 : 	iterator insert(const_iterator _Where,
; 1321 : 		const_pointer _First, const_pointer _Last)
; 1322 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1323 : 		size_type _Off = _Where - begin();
; 1324 : 		replace(_Where, _Where, _First, _Last);
; 1325 : 		return (begin() + _Off);
; 1326 : 		}
; 1327 : 
; 1328 : 	iterator insert(const_iterator _Where,
; 1329 : 		const_iterator _First, const_iterator _Last)
; 1330 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1331 : 		size_type _Off = _Where - begin();
; 1332 : 		replace(_Where, _Where, _First, _Last);
; 1333 : 		return (begin() + _Off);
; 1334 : 		}
; 1335 : 
; 1336 : 	_Myt& erase(size_type _Off = 0)
; 1337 : 		{	// erase elements [_Off, ...)
; 1338 : 		if (this->_Mysize() < _Off)
; 1339 : 			_Xran();	// _Off off end
; 1340 : 		_Eos(_Off);
; 1341 : 		return (*this);
; 1342 : 		}
; 1343 : 
; 1344 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1345 : 		{	// erase elements [_Off, _Off + _Count)
; 1346 : 		if (this->_Mysize() < _Off)
; 1347 : 			_Xran();	// _Off off end
; 1348 : 		if (this->_Mysize() - _Off <= _Count)
; 1349 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1350 : 		else if (0 < _Count)
; 1351 : 			{	// move elements down
; 1352 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1353 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1354 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1355 : 			_Eos(_Newsize);
; 1356 : 			}
; 1357 : 		return (*this);
; 1358 : 		}
; 1359 : 
; 1360 : 	iterator erase(const_iterator _Where)
; 1361 : 		{	// erase element at _Where
; 1362 : 		size_type _Count = _Where - begin();
; 1363 : 		erase(_Count, 1);
; 1364 : 		return (begin() + _Count);
; 1365 : 		}
; 1366 : 
; 1367 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1368 : 		{	// erase substring [_First, _Last)
; 1369 : 		_DEBUG_RANGE(_First, _Last);
; 1370 : 		size_type _Count = _First - begin();
; 1371 : 		erase(_Count, _Last - _First);
; 1372 : 		return (begin() + _Count);
; 1373 : 		}
; 1374 : 
; 1375 : 	void clear() _NOEXCEPT
; 1376 : 		{	// erase all
; 1377 : 		_Eos(0);
; 1378 : 		}
; 1379 : 
; 1380 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1381 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1382 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1383 : 		}
; 1384 : 
; 1385 : 	_Myt& replace(size_type _Off,
; 1386 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1387 : 			size_type _Count = npos)
; 1388 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1389 : 		if (this->_Mysize() < _Off || _Right.size() < _Roff)
; 1390 : 			_Xran();	// _Off or _Roff off end
; 1391 : 		if (this->_Mysize() - _Off < _N0)
; 1392 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1393 : 		size_type _Num = _Right.size() - _Roff;
; 1394 : 		if (_Num < _Count)
; 1395 : 			_Count = _Num;	// trim _Count to size
; 1396 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1397 : 			_Xlen();	// result too long
; 1398 : 
; 1399 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1400 : 		size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1401 : 		if (this->_Mysize() < _Newsize)
; 1402 : 			_Grow(_Newsize);
; 1403 : 
; 1404 : 		if (this != &_Right)
; 1405 : 			{	// no overlap, just move down and copy in new stuff
; 1406 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1407 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1408 : 			_Traits::copy(this->_Myptr() + _Off,
; 1409 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1410 : 			}
; 1411 : 		else if (_Count <= _N0)
; 1412 : 			{	// hole doesn't get larger, just copy in substring
; 1413 : 			_Traits::move(this->_Myptr() + _Off,
; 1414 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1415 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1416 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1417 : 			}
; 1418 : 		else if (_Roff <= _Off)
; 1419 : 			{	// hole gets larger, substring begins before hole
; 1420 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1421 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1422 : 			_Traits::move(this->_Myptr() + _Off,
; 1423 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1424 : 			}
; 1425 : 		else if (_Off + _N0 <= _Roff)
; 1426 : 			{	// hole gets larger, substring begins after hole
; 1427 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1428 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1429 : 			_Traits::move(this->_Myptr() + _Off,
; 1430 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1431 : 				_Count);	// fill hole
; 1432 : 			}
; 1433 : 		else
; 1434 : 			{	// hole gets larger, substring begins in hole
; 1435 : 			_Traits::move(this->_Myptr() + _Off,
; 1436 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1437 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1438 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1439 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1440 : 				this->_Myptr() + _Roff + _Count,
; 1441 : 				_Count - _N0);	// fill rest of new hole
; 1442 : 			}
; 1443 : 
; 1444 : 		_Eos(_Newsize);
; 1445 : 		return (*this);
; 1446 : 		}
; 1447 : 
; 1448 : 	_Myt& replace(size_type _Off,
; 1449 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1450 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1451 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1452 : 		if (_Inside(_Ptr))
; 1453 : 			return (replace(_Off, _N0, *this,
; 1454 : 				_Ptr - this->_Myptr(),
; 1455 : 				_Count));	// substring, replace carefully
; 1456 : 		if (this->_Mysize() < _Off)
; 1457 : 			_Xran();	// _Off off end
; 1458 : 		if (this->_Mysize() - _Off < _N0)
; 1459 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1460 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1461 : 			_Xlen();	// result too long
; 1462 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1463 : 
; 1464 : 		if (_Count < _N0)
; 1465 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1466 : 				this->_Myptr() + _Off + _N0,
; 1467 : 				_Nm);	// smaller hole, move tail up
; 1468 : 		size_type _Num;
; 1469 : 		if ((0 < _Count || 0 < _N0)
; 1470 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1471 : 			{	// make room and rearrange
; 1472 : 			if (_N0 < _Count)
; 1473 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1474 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1475 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1476 : 			_Eos(_Num);
; 1477 : 			}
; 1478 : 		return (*this);
; 1479 : 		}
; 1480 : 
; 1481 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1482 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1483 : 		_DEBUG_POINTER(_Ptr);
; 1484 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1485 : 		}
; 1486 : 
; 1487 : 	_Myt& replace(size_type _Off,
; 1488 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1489 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1490 : 		if (this->_Mysize() < _Off)
; 1491 : 			_Xran();	// _Off off end
; 1492 : 		if (this->_Mysize() - _Off < _N0)
; 1493 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 1494 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1495 : 			_Xlen();	// result too long
; 1496 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1497 : 
; 1498 : 		if (_Count < _N0)
; 1499 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1500 : 				this->_Myptr() + _Off + _N0,
; 1501 : 				_Nm);	// smaller hole, move tail up
; 1502 : 		size_type _Num;
; 1503 : 		if ((0 < _Count || 0 < _N0)
; 1504 : 			&& _Grow(_Num = this->_Mysize() + _Count - _N0))
; 1505 : 			{	// make room and rearrange
; 1506 : 			if (_N0 < _Count)
; 1507 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1508 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1509 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1510 : 			_Eos(_Num);
; 1511 : 			}
; 1512 : 		return (*this);
; 1513 : 		}
; 1514 : 
; 1515 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1516 : 		const _Myt& _Right)
; 1517 : 		{	// replace [_First, _Last) with _Right
; 1518 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1519 : 		}
; 1520 : 
; 1521 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1522 : 		const _Elem *_Ptr, size_type _Count)
; 1523 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1524 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1525 : 		}
; 1526 : 
; 1527 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1528 : 		const _Elem *_Ptr)
; 1529 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1530 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1531 : 		}
; 1532 : 
; 1533 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1534 : 		size_type _Count, _Elem _Ch)
; 1535 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1536 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1537 : 		}
; 1538 : 
; 1539 : 	template<class _Iter>
; 1540 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1541 : 			_Myt&>::type
; 1542 : 		replace(const_iterator _First, const_iterator _Last,
; 1543 : 			_Iter _First2, _Iter _Last2)
; 1544 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1545 : 		_Myt _Right(_First2, _Last2);
; 1546 : 		replace(_First, _Last, _Right);
; 1547 : 		return (*this);
; 1548 : 		}
; 1549 : 
; 1550 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1551 : 		const_pointer _First2, const_pointer _Last2)
; 1552 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1553 : 		if (_First2 == _Last2)
; 1554 : 			erase(_First - begin(), _Last - _First);
; 1555 : 		else
; 1556 : 			replace(_First - begin(), _Last - _First,
; 1557 : 				&*_First2, _Last2 - _First2);
; 1558 : 		return (*this);
; 1559 : 		}
; 1560 : 
; 1561 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1562 : 		pointer _First2, pointer _Last2)
; 1563 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1564 : 		if (_First2 == _Last2)
; 1565 : 			erase(_First - begin(), _Last - _First);
; 1566 : 		else
; 1567 : 			replace(_First - begin(), _Last - _First,
; 1568 : 				&*_First2, _Last2 - _First2);
; 1569 : 		return (*this);
; 1570 : 		}
; 1571 : 
; 1572 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1573 : 		const_iterator _First2, const_iterator _Last2)
; 1574 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1575 : 		if (_First2 == _Last2)
; 1576 : 			erase(_First - begin(), _Last - _First);
; 1577 : 		else
; 1578 : 			replace(_First - begin(), _Last - _First,
; 1579 : 				&*_First2, _Last2 - _First2);
; 1580 : 		return (*this);
; 1581 : 		}
; 1582 : 
; 1583 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1584 : 		iterator _First2, iterator _Last2)
; 1585 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1586 : 		if (_First2 == _Last2)
; 1587 : 			erase(_First - begin(), _Last - _First);
; 1588 : 		else
; 1589 : 			replace(_First - begin(), _Last - _First,
; 1590 : 				&*_First2, _Last2 - _First2);
; 1591 : 		return (*this);
; 1592 : 		}
; 1593 : 
; 1594 : 	iterator begin() _NOEXCEPT
; 1595 : 		{	// return iterator for beginning of mutable sequence
; 1596 : 		return (iterator(this->_Myptr(), &this->_Get_data()));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		return (const_iterator(this->_Myptr(), &this->_Get_data()));
; 1602 : 		}
; 1603 : 
; 1604 : 	iterator end() _NOEXCEPT
; 1605 : 		{	// return iterator for end of mutable sequence
; 1606 : 		return (iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1607 : 		}
; 1608 : 
; 1609 : 	const_iterator end() const _NOEXCEPT
; 1610 : 		{	// return iterator for end of nonmutable sequence
; 1611 : 		return (const_iterator(this->_Myptr() + this->_Mysize(), &this->_Get_data()));
; 1612 : 		}
; 1613 : 
; 1614 : 	reverse_iterator rbegin() _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of reversed mutable sequence
; 1616 : 		return (reverse_iterator(end()));
; 1617 : 		}
; 1618 : 
; 1619 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1620 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1621 : 		return (const_reverse_iterator(end()));
; 1622 : 		}
; 1623 : 
; 1624 : 	reverse_iterator rend() _NOEXCEPT
; 1625 : 		{	// return iterator for end of reversed mutable sequence
; 1626 : 		return (reverse_iterator(begin()));
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (const_reverse_iterator(begin()));
; 1632 : 		}
; 1633 : 
; 1634 : 	const_iterator cbegin() const _NOEXCEPT
; 1635 : 		{	// return iterator for beginning of nonmutable sequence
; 1636 : 		return (begin());
; 1637 : 		}
; 1638 : 
; 1639 : 	const_iterator cend() const _NOEXCEPT
; 1640 : 		{	// return iterator for end of nonmutable sequence
; 1641 : 		return (end());
; 1642 : 		}
; 1643 : 
; 1644 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1645 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1646 : 		return (rbegin());
; 1647 : 		}
; 1648 : 
; 1649 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1650 : 		{	// return iterator for end of reversed nonmutable sequence
; 1651 : 		return (rend());
; 1652 : 		}
; 1653 : 
; 1654 : 	void shrink_to_fit()
; 1655 : 		{	// reduce capacity
; 1656 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1657 : 			{	// worth shrinking, do it
; 1658 : 			_Myt _Tmp(*this);
; 1659 : 			swap(_Tmp);
; 1660 : 			}
; 1661 : 		}
; 1662 : 
; 1663 : 	reference at(size_type _Off)
; 1664 : 		{	// subscript mutable sequence with checking
; 1665 : 		if (this->_Mysize() <= _Off)
; 1666 : 			_Xran();	// _Off off end
; 1667 : 		return (this->_Myptr()[_Off]);
; 1668 : 		}
; 1669 : 
; 1670 : 	const_reference at(size_type _Off) const
; 1671 : 		{	// subscript nonmutable sequence with checking
; 1672 : 		if (this->_Mysize() <= _Off)
; 1673 : 			_Xran();	// _Off off end
; 1674 : 		return (this->_Myptr()[_Off]);
; 1675 : 		}
; 1676 : 
; 1677 : 	reference operator[](size_type _Off)
; 1678 : 		{	// subscript mutable sequence
; 1679 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1680 : 		if (this->_Mysize() < _Off)	// sic
; 1681 : 			_DEBUG_ERROR("string subscript out of range");
; 1682 : 
; 1683 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1684 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1685 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1686 : 
; 1687 : 		return (this->_Myptr()[_Off]);
; 1688 : 		}
; 1689 : 
; 1690 : 	const_reference operator[](size_type _Off) const
; 1691 : 		{	// subscript nonmutable sequence
; 1692 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1693 : 		if (this->_Mysize() < _Off)	// sic
; 1694 : 			_DEBUG_ERROR("string subscript out of range");
; 1695 : 
; 1696 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1697 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1698 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1699 : 
; 1700 : 		return (this->_Myptr()[_Off]);
; 1701 : 		}
; 1702 : 
; 1703 : 	void push_back(_Elem _Ch)
; 1704 : 		{	// insert element at end
; 1705 : 		insert(end(), _Ch);
; 1706 : 		}
; 1707 : 
; 1708 : 	void pop_back()
; 1709 : 		{	// erase element at end
; 1710 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1711 : 		}
; 1712 : 
; 1713 : 	reference front()
; 1714 : 		{	// return first element of mutable sequence
; 1715 : 		return (*begin());
; 1716 : 		}
; 1717 : 
; 1718 : 	const_reference front() const
; 1719 : 		{	// return first element of nonmutable sequence
; 1720 : 		return (*begin());
; 1721 : 		}
; 1722 : 
; 1723 : 	reference back()
; 1724 : 		{	// return last element of mutable sequence
; 1725 : 		return (*(end() - 1));
; 1726 : 		}
; 1727 : 
; 1728 : 	const_reference back() const
; 1729 : 		{	// return last element of nonmutable sequence
; 1730 : 		return (*(end() - 1));
; 1731 : 		}
; 1732 : 
; 1733 : 	const _Elem *c_str() const _NOEXCEPT
; 1734 : 		{	// return pointer to null-terminated nonmutable array
; 1735 : 		return (this->_Myptr());
; 1736 : 		}
; 1737 : 
; 1738 : 	const _Elem *data() const _NOEXCEPT
; 1739 : 		{	// return pointer to nonmutable array
; 1740 : 		return (c_str());
; 1741 : 		}
; 1742 : 
; 1743 : 	size_type length() const _NOEXCEPT
; 1744 : 		{	// return length of sequence
; 1745 : 		return (this->_Mysize());
; 1746 : 		}
; 1747 : 
; 1748 : 	size_type size() const _NOEXCEPT
; 1749 : 		{	// return length of sequence
; 1750 : 		return (this->_Mysize());
; 1751 : 		}
; 1752 : 
; 1753 : 	size_type max_size() const _NOEXCEPT
; 1754 : 		{	// return maximum possible length of sequence
; 1755 : 		size_type _Num = this->_Getal().max_size();
; 1756 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1757 : 		}
; 1758 : 
; 1759 : 	void resize(size_type _Newsize)
; 1760 : 		{	// determine new length, padding with null elements as needed
; 1761 : 		resize(_Newsize, _Elem());
; 1762 : 		}
; 1763 : 
; 1764 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1765 : 		{	// determine new length, padding with _Ch elements as needed
; 1766 : 		if (_Newsize <= this->_Mysize())
; 1767 : 			_Eos(_Newsize);
; 1768 : 		else
; 1769 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1770 : 		}
; 1771 : 
; 1772 : 	size_type capacity() const _NOEXCEPT
; 1773 : 		{	// return current length of allocated storage
; 1774 : 		return (this->_Myres());
; 1775 : 		}
; 1776 : 
; 1777 : 	void reserve(size_type _Newcap = 0)
; 1778 : 		{	// determine new minimum length of allocated storage
; 1779 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1780 : 			{	// change reservation
; 1781 : 			size_type _Size = this->_Mysize();
; 1782 : 			if (_Grow(_Newcap, true))
; 1783 : 				_Eos(_Size);
; 1784 : 			}
; 1785 : 		}
; 1786 : 
; 1787 : 	bool empty() const _NOEXCEPT
; 1788 : 		{	// test if sequence is empty
; 1789 : 		return (this->_Mysize() == 0);
; 1790 : 		}
; 1791 : 
; 1792 : 	_SCL_INSECURE_DEPRECATE
; 1793 : 
; 1794 : 	size_type copy(_Elem *_Ptr,
; 1795 : 		size_type _Count, size_type _Off = 0) const
; 1796 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1797 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1798 : 		if (this->_Mysize() < _Off)
; 1799 : 			_Xran();	// _Off off end
; 1800 : 		if (this->_Mysize() - _Off < _Count)
; 1801 : 			_Count = this->_Mysize() - _Off;
; 1802 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1803 : 		return (_Count);
; 1804 : 		}
; 1805 : 
; 1806 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1807 : 		size_type _Count, size_type _Off = 0) const
; 1808 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1809 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1810 : 		if (this->_Mysize() < _Off)
; 1811 : 			_Xran();	// _Off off end
; 1812 : 		if (this->_Mysize() - _Off < _Count)
; 1813 : 			_Count = this->_Mysize() - _Off;
; 1814 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	void _Swap_bx(_Myt& _Right)
; 1819 : 		{	// exchange _Bx() with _Right._Bx()
; 1820 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1821 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1822 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1823 : 			else
; 1824 : 				{	// swap large with small
; 1825 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1826 : 				this->_Getal().destroy(&this->_Bx()._Ptr);
; 1827 : 				_Traits::copy(this->_Bx()._Buf,
; 1828 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1829 : 				this->_Getal().construct(&_Right._Bx()._Ptr, _Ptr);
; 1830 : 				}
; 1831 : 		else
; 1832 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1833 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1834 : 			else
; 1835 : 				{	// swap small with large
; 1836 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1837 : 				this->_Getal().destroy(&_Right._Bx()._Ptr);
; 1838 : 				_Traits::copy(_Right._Bx()._Buf,
; 1839 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1840 : 				this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 1841 : 				}
; 1842 : 		}
; 1843 : 
; 1844 : 	void swap(_Myt& _Right)
; 1845 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1846 : 			|| _Alty::is_always_equal::value)
; 1847 : 		{	// exchange contents with _Right
; 1848 : 		if (this == &_Right)
; 1849 : 			;	// same object, do nothing
; 1850 : 		else if (this->_Getal() == _Right._Getal())
; 1851 : 			{	// same allocator, swap control information
; 1852 : 			this->_Swap_all(_Right);
; 1853 : 			_Swap_bx(_Right);
; 1854 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1855 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1856 : 			}
; 1857 : 
; 1858 : 		else if (_Alty::propagate_on_container_swap::value)
; 1859 : 			{	// swap allocators and control information
; 1860 : 				// assumes pointer is bitwise copyable
; 1861 : 			this->_Swap_alloc(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Bx(), _Right._Bx());
; 1864 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1865 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1866 : 			}
; 1867 : 
; 1868 : 		else
; 1869 : 			{	// different allocator, do multiple assigns
; 1870 : 			_Myt _Tmp = *this;
; 1871 : 
; 1872 : 			*this = _Right;
; 1873 : 			_Right = _Tmp;
; 1874 : 			}
; 1875 : 		}
; 1876 : 
; 1877 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1878 : 		{	// look for _Right beginning at or after _Off
; 1879 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1880 : 		}
; 1881 : 
; 1882 : 	size_type find(const _Elem *_Ptr,
; 1883 : 		size_type _Off, size_type _Count) const
; 1884 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1885 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1886 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1887 : 			return (_Off);	// null string always matches (if inside string)
; 1888 : 
; 1889 : 		size_type _Nm;
; 1890 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1891 : 			{	// room for match, look for it
; 1892 : 			const _Elem *_Uptr, *_Vptr;
; 1893 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1894 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1895 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1896 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1897 : 					return (_Uptr - this->_Myptr());	// found a match
; 1898 : 			}
; 1899 : 
; 1900 : 		return (npos);	// no match
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1904 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1905 : 		_DEBUG_POINTER(_Ptr);
; 1906 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1907 : 		}
; 1908 : 
; 1909 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1910 : 		{	// look for _Ch at or after _Off
; 1911 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1912 : 		}
; 1913 : 
; 1914 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1915 : 		{	// look for _Right beginning before _Off
; 1916 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1917 : 		}
; 1918 : 
; 1919 : 	size_type rfind(const _Elem *_Ptr,
; 1920 : 		size_type _Off, size_type _Count) const
; 1921 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1922 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1923 : 		if (_Count == 0)
; 1924 : 			return (_Off < this->_Mysize() ? _Off
; 1925 : 				: this->_Mysize());	// null always matches
; 1926 : 		if (_Count <= this->_Mysize())
; 1927 : 			{	// room for match, look for it
; 1928 : 			const _Elem *_Uptr = this->_Myptr() +
; 1929 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1930 : 					: this->_Mysize() - _Count);
; 1931 : 			for (; ; --_Uptr)
; 1932 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1933 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1934 : 					return (_Uptr - this->_Myptr());	// found a match
; 1935 : 				else if (_Uptr == this->_Myptr())
; 1936 : 					break;	// at beginning, no more chance for match
; 1937 : 			}
; 1938 : 
; 1939 : 		return (npos);	// no match
; 1940 : 		}
; 1941 : 
; 1942 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1943 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1944 : 		_DEBUG_POINTER(_Ptr);
; 1945 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1946 : 		}
; 1947 : 
; 1948 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1949 : 		{	// look for _Ch before _Off
; 1950 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1951 : 		}
; 1952 : 
; 1953 : 	size_type find_first_of(const _Myt& _Right,
; 1954 : 		size_type _Off = 0) const _NOEXCEPT
; 1955 : 		{	// look for one of _Right at or after _Off
; 1956 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1957 : 		}
; 1958 : 
; 1959 : 	size_type find_first_of(const _Elem *_Ptr,
; 1960 : 		size_type _Off, size_type _Count) const
; 1961 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1962 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1963 : 		if (0 < _Count && _Off < this->_Mysize())
; 1964 : 			{	// room for match, look for it
; 1965 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1966 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1967 : 				_Uptr < _Vptr; ++_Uptr)
; 1968 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1969 : 					return (_Uptr - this->_Myptr());	// found a match
; 1970 : 			}
; 1971 : 
; 1972 : 		return (npos);	// no match
; 1973 : 		}
; 1974 : 
; 1975 : 	size_type find_first_of(const _Elem *_Ptr,
; 1976 : 		size_type _Off = 0) const
; 1977 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1978 : 		_DEBUG_POINTER(_Ptr);
; 1979 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1980 : 		}
; 1981 : 
; 1982 : 	size_type find_first_of(_Elem _Ch,
; 1983 : 		size_type _Off = 0) const
; 1984 : 		{	// look for _Ch at or after _Off
; 1985 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1986 : 		}
; 1987 : 
; 1988 : 	size_type find_last_of(const _Myt& _Right,
; 1989 : 		size_type _Off = npos) const _NOEXCEPT
; 1990 : 		{	// look for one of _Right before _Off
; 1991 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1992 : 		}
; 1993 : 
; 1994 : 	size_type find_last_of(const _Elem *_Ptr,
; 1995 : 		size_type _Off, size_type _Count) const
; 1996 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1997 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1998 : 		if (0 < _Count && 0 < this->_Mysize())
; 1999 : 			{	// worth searching, do it
; 2000 : 			const _Elem *_Uptr = this->_Myptr()
; 2001 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2002 : 			for (; ; --_Uptr)
; 2003 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2004 : 					return (_Uptr - this->_Myptr());	// found a match
; 2005 : 				else if (_Uptr == this->_Myptr())
; 2006 : 					break;	// at beginning, no more chance for match
; 2007 : 			}
; 2008 : 
; 2009 : 		return (npos);	// no match
; 2010 : 		}
; 2011 : 
; 2012 : 	size_type find_last_of(const _Elem *_Ptr,
; 2013 : 		size_type _Off = npos) const
; 2014 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2015 : 		_DEBUG_POINTER(_Ptr);
; 2016 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2017 : 		}
; 2018 : 
; 2019 : 	size_type find_last_of(_Elem _Ch,
; 2020 : 		size_type _Off = npos) const
; 2021 : 		{	// look for _Ch before _Off
; 2022 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_first_not_of(const _Myt& _Right,
; 2026 : 		size_type _Off = 0) const _NOEXCEPT
; 2027 : 		{	// look for none of _Right at or after _Off
; 2028 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2029 : 			_Right.size()));
; 2030 : 		}
; 2031 : 
; 2032 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2033 : 		size_type _Off, size_type _Count) const
; 2034 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2035 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2036 : 		if (_Off < this->_Mysize())
; 2037 : 			{	// room for match, look for it
; 2038 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2039 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2040 : 				_Uptr < _Vptr; ++_Uptr)
; 2041 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2042 : 					return (_Uptr - this->_Myptr());
; 2043 : 			}
; 2044 : 		return (npos);
; 2045 : 		}
; 2046 : 
; 2047 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2048 : 		size_type _Off = 0) const
; 2049 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2050 : 		_DEBUG_POINTER(_Ptr);
; 2051 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2052 : 		}
; 2053 : 
; 2054 : 	size_type find_first_not_of(_Elem _Ch,
; 2055 : 		size_type _Off = 0) const
; 2056 : 		{	// look for non _Ch at or after _Off
; 2057 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2058 : 		}
; 2059 : 
; 2060 : 	size_type find_last_not_of(const _Myt& _Right,
; 2061 : 		size_type _Off = npos) const _NOEXCEPT
; 2062 : 		{	// look for none of _Right before _Off
; 2063 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2064 : 		}
; 2065 : 
; 2066 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2067 : 		size_type _Off, size_type _Count) const
; 2068 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2069 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2070 : 		if (0 < this->_Mysize())
; 2071 : 			{	// worth searching, do it
; 2072 : 			const _Elem *_Uptr = this->_Myptr()
; 2073 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2074 : 			for (; ; --_Uptr)
; 2075 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2076 : 					return (_Uptr - this->_Myptr());
; 2077 : 				else if (_Uptr == this->_Myptr())
; 2078 : 					break;
; 2079 : 			}
; 2080 : 		return (npos);
; 2081 : 		}
; 2082 : 
; 2083 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2084 : 		size_type _Off = npos) const
; 2085 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2086 : 		_DEBUG_POINTER(_Ptr);
; 2087 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2088 : 		}
; 2089 : 
; 2090 : 	size_type find_last_not_of(_Elem _Ch,
; 2091 : 		size_type _Off = npos) const
; 2092 : 		{	// look for non _Ch before _Off
; 2093 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2094 : 		}
; 2095 : 
; 2096 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2097 : 		{	// return [_Off, _Off + _Count) as new string
; 2098 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2099 : 		}
; 2100 : 
; 2101 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2102 : 		{	// compare [0, _Mysize()) with _Right
; 2103 : 		return (compare(0, this->_Mysize(), _Right._Myptr(), _Right.size()));
; 2104 : 		}
; 2105 : 
; 2106 : 	int compare(size_type _Off, size_type _N0,
; 2107 : 		const _Myt& _Right) const
; 2108 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2109 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2110 : 		}
; 2111 : 
; 2112 : 	int compare(size_type _Off,
; 2113 : 		size_type _N0, const _Myt& _Right,
; 2114 : 		size_type _Roff, size_type _Count = npos) const
; 2115 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2116 : 		if (_Right.size() < _Roff)
; 2117 : 			_Xran();	// _Off off end
; 2118 : 		if (_Right._Mysize() - _Roff < _Count)
; 2119 : 			_Count = _Right._Mysize() - _Roff;	// trim _Count to size
; 2120 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2121 : 		}
; 2122 : 
; 2123 : 	int compare(const _Elem *_Ptr) const
; 2124 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2125 : 		_DEBUG_POINTER(_Ptr);
; 2126 : 		return (compare(0, this->_Mysize(), _Ptr, _Traits::length(_Ptr)));
; 2127 : 		}
; 2128 : 
; 2129 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2130 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2131 : 		_DEBUG_POINTER(_Ptr);
; 2132 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2133 : 		}
; 2134 : 
; 2135 : 	int compare(size_type _Off,
; 2136 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2137 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2138 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2139 : 		if (this->_Mysize() < _Off)
; 2140 : 			_Xran();	// _Off off end
; 2141 : 		if (this->_Mysize() - _Off < _N0)
; 2142 : 			_N0 = this->_Mysize() - _Off;	// trim _N0 to size
; 2143 : 
; 2144 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2145 : 			_N0 < _Count ? _N0 : _Count);
; 2146 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2147 : 			: _N0 == _Count ? 0 : +1);
; 2148 : 		}
; 2149 : 
; 2150 : 	allocator_type get_allocator() const _NOEXCEPT
; 2151 : 		{	// return allocator object for values
; 2152 : 		return (this->_Getal());
; 2153 : 		}
; 2154 : 
; 2155 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2156 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2157 : 		if (_Count == 1)
; 2158 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2159 : 		else
; 2160 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2161 : 		}
; 2162 : 
; 2163 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2164 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2165 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2166 : 		if (max_size() < _Newres)
; 2167 : 			_Newres = _Newsize;	// undo roundup if too big
; 2168 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2169 : 			;
; 2170 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2171 : 			_Newres = this->_Myres()
; 2172 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2173 : 		else
; 2174 : 			_Newres = max_size();	// settle for max_size()
; 2175 : 
; 2176 : 		_Elem *_Ptr;
; 2177 : 		_TRY_BEGIN
; 2178 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2179 : 		_CATCH_ALL
; 2180 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2181 : 			_TRY_BEGIN
; 2182 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2183 : 			_CATCH_ALL
; 2184 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2185 : 			_RERAISE;
; 2186 : 			_CATCH_END
; 2187 : 		_CATCH_END
; 2188 : 
; 2189 : 		if (0 < _Oldlen)
; 2190 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2191 : 				_Oldlen);	// copy existing elements
; 2192 : 		_Tidy(true);
; 2193 : 		this->_Getal().construct(&this->_Bx()._Ptr, _Ptr);
; 2194 : 		this->_Myres() = _Newres;
; 2195 : 		_Eos(_Oldlen);
; 2196 : 		}
; 2197 : 
; 2198 : 	void _Eos(size_type _Newsize)
; 2199 : 		{	// set new length and null terminator
; 2200 : 		_Traits::assign(this->_Myptr()[this->_Mysize() = _Newsize], _Elem());

  00010	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00017	c6 06 00	 mov	 BYTE PTR [esi], 0

; 523  : 		return (*_First == 0 ? 0

  0001a	80 39 00	 cmp	 BYTE PTR [ecx], 0
  0001d	75 12		 jne	 SHORT $LN133@basic_stri
  0001f	33 d2		 xor	 edx, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00021	52		 push	 edx
  00022	51		 push	 ecx
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
$LN133@basic_stri:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 523  : 		return (*_First == 0 ? 0

  00031	8b d1		 mov	 edx, ecx
  00033	57		 push	 edi
  00034	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL135@basic_stri:
  00037	8a 02		 mov	 al, BYTE PTR [edx]
  00039	42		 inc	 edx
  0003a	84 c0		 test	 al, al
  0003c	75 f9		 jne	 SHORT $LL135@basic_stri
  0003e	2b d7		 sub	 edx, edi
  00040	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1176 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00041	52		 push	 edx
  00042	51		 push	 ecx
  00043	8b ce		 mov	 ecx, esi
  00045	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 825  : 		_Tidy();
; 826  : 		assign(_Ptr);
; 827  : 		}

  0004a	8b c6		 mov	 eax, esi
  0004c	5e		 pop	 esi
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres, COMDAT
; _this$ = ecx

; 722  : 		return (_Get_data()._Myres);

  00000	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]

; 723  : 		}

  00003	c3		 ret	 0
?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABIXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize, COMDAT
; _this$ = ecx

; 717  : 		return (_Get_data()._Mysize);

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 718  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABIXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize, COMDAT
; _this$ = ecx

; 712  : 		return (_Get_data()._Mysize);

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 713  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx, COMDAT
; _this$ = ecx

; 702  : 		return (_Get_data()._Bx);

  00000	8b c1		 mov	 eax, ecx

; 703  : 		}

  00002	c3		 ret	 0
?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 695  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 696  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 690  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 691  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 685  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 686  : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 680  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 681  : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 488  : 		_Mysize = 0;

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 578  : 		}

  00007	8b c1		 mov	 eax, ecx

; 489  : 		_Myres = 0;

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 578  : 		}

  00010	c2 04 00	 ret	 4
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 488  : 		_Mysize = 0;

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 573  : 		}

  00007	8b c1		 mov	 eax, ecx

; 489  : 		_Myres = 0;

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 573  : 		}

  00010	c2 04 00	 ret	 4
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEPBDXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr, COMDAT
; _this$ = ecx

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN11@Myptr

; 566  : 		return (_Get_data()._Myptr());

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 567  : 		}

  00008	c3		 ret	 0
$LN11@Myptr:

; 566  : 		return (_Get_data()._Myptr());

  00009	8b c1		 mov	 eax, ecx

; 567  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEPBDXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEPADXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr, COMDAT
; _this$ = ecx

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN11@Myptr

; 561  : 		return (_Get_data()._Myptr());

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 562  : 		}

  00008	c3		 ret	 0
$LN11@Myptr:

; 561  : 		return (_Get_data()._Myptr());

  00009	8b c1		 mov	 eax, ecx

; 562  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEPADXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 512  : 		return (this->_BUF_SIZE <= this->_Myres

  00009	8b c1		 mov	 eax, ecx

; 513  : 			? _STD addressof(*this->_Bx._Ptr)
; 514  : 			: this->_Bx._Buf);
; 515  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	72 03		 jb	 SHORT $LN3@Myptr
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 506  : 			? _STD addressof(*this->_Bx._Ptr)
; 507  : 			: this->_Bx._Buf);
; 508  : 		}

  00008	c3		 ret	 0
$LN3@Myptr:

; 505  : 		return (this->_BUF_SIZE <= this->_Myres

  00009	8b c1		 mov	 eax, ecx

; 506  : 			? _STD addressof(*this->_Bx._Ptr)
; 507  : 			: this->_Bx._Buf);
; 508  : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 487  : 		{	// initialize values
; 488  : 		_Mysize = 0;

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 489  : 		_Myres = 0;
; 490  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	83 c8 ff	 or	 eax, -1

; 931  : 		}

  00003	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]

; 139  : 	}
; 140  : 
; 141  : 		// TEMPLATE FUNCTION _Construct
; 142  : template<class _Ty1,
; 143  : 	class _Ty2> inline
; 144  : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 145  : 	{	// construct object at _Ptr with value _Val
; 146  : 	void *_Vptr = _Ptr;
; 147  : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 148  : 	}
; 149  : 
; 150  : template<class _Ty1> inline
; 151  : 	void _Construct(_Ty1 *_Ptr)
; 152  : 	{	// construct object at _Ptr with default value
; 153  : 	void *_Vptr = _Ptr;
; 154  : 
; 155  : 	::new (_Vptr) _Ty1();
; 156  : 	}
; 157  : 
; 158  : 		// TEMPLATE FUNCTION _Destroy
; 159  : template<class _Ty> inline
; 160  : 	void _Destroy(_Ty *_Ptr)
; 161  : 	{	// destroy object at _Ptr
; 162  : 	_Ptr->~_Ty();
; 163  : 	}
; 164  : 
; 165  : 		// TEMPLATE FUNCTION _Destroy_range
; 166  : template<class _Alloc> inline
; 167  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 168  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 169  : 		_Nonscalar_ptr_iterator_tag)
; 170  : 	{	// destroy [_First, _Last), arbitrary type
; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	83 f9 ff	 cmp	 ecx, -1
  0000c	77 2e		 ja	 SHORT $LN16@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;
; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 19		 jb	 SHORT $LN7@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00016	a8 1f		 test	 al, 31			; 0000001fH
  00018	75 27		 jne	 SHORT $LN18@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001a	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0001d	3b c8		 cmp	 ecx, eax
  0001f	73 25		 jae	 SHORT $LN19@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00021	2b c1		 sub	 eax, ecx
  00023	83 f8 04	 cmp	 eax, 4
  00026	72 23		 jb	 SHORT $LN20@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00028	83 f8 23	 cmp	 eax, 35			; 00000023H
  0002b	77 23		 ja	 SHORT $LN21@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0002d	8b c1		 mov	 eax, ecx
$LN7@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00035	83 c4 04	 add	 esp, 4

; 909  : 		_Mybase::deallocate(_Ptr, _Count);
; 910  : 		}

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN16@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  0003c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  00055	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	83 c8 ff	 or	 eax, -1

; 786  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	83 c8 ff	 or	 eax, -1

; 668  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 f8 ff	 cmp	 eax, -1
  00011	77 39		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;
; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001a	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  0001d	3b c8		 cmp	 ecx, eax
  0001f	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00027	8b c8		 mov	 ecx, eax
  00029	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0002c	85 c9		 test	 ecx, ecx
  0002e	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00033	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00036	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00043	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00046	85 c0		 test	 eax, eax
  00048	75 c0		 jne	 SHORT $LN12@allocate
  0004a	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  0004c	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00056	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00060	cc		 int	 3
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	83 f9 ff	 cmp	 ecx, -1
  0000c	77 2e		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;
; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 19		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00016	a8 1f		 test	 al, 31			; 0000001fH
  00018	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001a	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0001d	3b c8		 cmp	 ecx, eax
  0001f	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00021	2b c1		 sub	 eax, ecx
  00023	83 f8 04	 cmp	 eax, 4
  00026	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00028	83 f8 23	 cmp	 eax, 35			; 00000023H
  0002b	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0002d	8b c1		 mov	 eax, ecx
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00035	83 c4 04	 add	 esp, 4

; 639  : 		}

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  0003c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  00055	cc		 int	 3
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 564  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 565  : 		_Left = _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8a 08		 mov	 cl, BYTE PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000b	88 08		 mov	 BYTE PTR [eax], cl

; 566  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 552  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 553  : 		return (_Count == 0 ? _First1

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 05		 jne	 SHORT $LN3@move
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]

; 554  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));
; 555  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN3@move:

; 553  : 		return (_Count == 0 ? _First1

  0000f	89 45 10	 mov	 DWORD PTR __Count$[ebp], eax

; 554  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));
; 555  : 		}

  00012	5d		 pop	 ebp

; 553  : 		return (_Count == 0 ? _First1

  00013	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 529  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 530  : 		return (_Count == 0 ? _First1

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 05		 jne	 SHORT $LN3@copy
  0000a	8b 45 08	 mov	 eax, DWORD PTR __First1$[ebp]

; 531  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));
; 532  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN3@copy:

; 530  : 		return (_Count == 0 ? _First1

  0000f	89 45 10	 mov	 DWORD PTR __Count$[ebp], eax

; 531  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));
; 532  : 		}

  00012	5d		 pop	 ebp

; 530  : 		return (_Count == 0 ? _First1

  00013	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 522  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 523  : 		return (*_First == 0 ? 0

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	80 38 00	 cmp	 BYTE PTR [eax], 0
  00009	75 04		 jne	 SHORT $LN3@length
  0000b	33 c0		 xor	 eax, eax

; 524  : 			: _CSTD strlen(_First));
; 525  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
$LN3@length:

; 523  : 		return (*_First == 0 ? 0

  0000f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL5@length:
  00012	8a 08		 mov	 cl, BYTE PTR [eax]
  00014	40		 inc	 eax
  00015	84 c9		 test	 cl, cl
  00017	75 f9		 jne	 SHORT $LL5@length
  00019	2b c2		 sub	 eax, edx

; 524  : 			: _CSTD strlen(_First));
; 525  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@D@std@@SAHPBD0I@Z PROC		; std::char_traits<char>::compare, COMDAT

; 516  : 		{	// compare [_First1, _First1 + _Count) with [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 517  : 		return (_Count == 0 ? 0

  00003	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN3@compare
  0000a	33 c0		 xor	 eax, eax

; 518  : 			: _CSTD memcmp(_First1, _First2, _Count));
; 519  : 		}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN3@compare:

; 517  : 		return (_Count == 0 ? 0

  0000e	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  00011	56		 push	 esi
  00012	8b 75 0c	 mov	 esi, DWORD PTR __First2$[ebp]
  00015	83 e9 04	 sub	 ecx, 4
  00018	72 17		 jb	 SHORT $LN7@compare
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL8@compare:
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	3b 06		 cmp	 eax, DWORD PTR [esi]
  00024	75 10		 jne	 SHORT $LN6@compare
  00026	83 c2 04	 add	 edx, 4
  00029	83 c6 04	 add	 esi, 4
  0002c	83 e9 04	 sub	 ecx, 4
  0002f	73 ef		 jae	 SHORT $LL8@compare
$LN7@compare:
  00031	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00034	74 35		 je	 SHORT $LN5@compare
$LN6@compare:
  00036	8a 02		 mov	 al, BYTE PTR [edx]
  00038	3a 06		 cmp	 al, BYTE PTR [esi]
  0003a	75 27		 jne	 SHORT $LN9@compare
  0003c	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  0003f	74 2a		 je	 SHORT $LN5@compare
  00041	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00044	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00047	75 1a		 jne	 SHORT $LN9@compare
  00049	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  0004c	74 1d		 je	 SHORT $LN5@compare
  0004e	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00051	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00054	75 0d		 jne	 SHORT $LN9@compare
  00056	83 f9 ff	 cmp	 ecx, -1
  00059	74 10		 je	 SHORT $LN5@compare
  0005b	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0005e	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00061	74 08		 je	 SHORT $LN5@compare
$LN9@compare:
  00063	1b c0		 sbb	 eax, eax
  00065	83 c8 01	 or	 eax, 1
  00068	5e		 pop	 esi

; 518  : 			: _CSTD memcmp(_First1, _First2, _Count));
; 519  : 		}

  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
$LN5@compare:

; 517  : 		return (_Count == 0 ? 0

  0006b	33 c0		 xor	 eax, eax
  0006d	5e		 pop	 esi

; 518  : 			: _CSTD memcmp(_First1, _First2, _Count));
; 519  : 		}

  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?compare@?$char_traits@D@std@@SAHPBD0I@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\conmember.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 89   : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
