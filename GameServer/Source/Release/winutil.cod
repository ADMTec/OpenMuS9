; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\common\winutil.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	_fprintf
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	?BuxConvert@@YAXPADH@Z				; BuxConvert
PUBLIC	?SQLSyntexCheck@@YAHPAD@Z			; SQLSyntexCheck
PUBLIC	?SQLSyntexCheckConvert@@YAHPAD@Z		; SQLSyntexCheckConvert
PUBLIC	?SpaceSyntexCheck@@YAHPAD@Z			; SpaceSyntexCheck
PUBLIC	?StrHangulCheck@@YAHPAD@Z			; StrHangulCheck
PUBLIC	?FileSaveString@@YAXPAD0@Z			; FileSaveString
PUBLIC	?IsFile@@YAHPAD@Z				; IsFile
PUBLIC	?GetTodayString@@YAXPAD@Z			; GetTodayString
PUBLIC	?PHeadSetB@@YAXPAEEH@Z				; PHeadSetB
PUBLIC	?PHeadSubSetB@@YAXPAEEEH@Z			; PHeadSubSetB
PUBLIC	?PHeadSetW@@YAXPAEEH@Z				; PHeadSetW
PUBLIC	?PHeadSubSetW@@YAXPAEEEH@Z			; PHeadSubSetW
PUBLIC	?PHeadSetBE@@YAXPAEEH@Z				; PHeadSetBE
PUBLIC	?PHeadSubSetBE@@YAXPAEEEH@Z			; PHeadSubSetBE
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02OHHJMEON@?8?8?$AA@			; `string'
PUBLIC	??_C@_02CPIDLAI@at?$AA@				; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d?$AA@	; `string'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_strchr:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	__localtime64:PROC
EXTRN	__time64:PROC
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d?$AA@
CONST	SEGMENT
??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d?$AA@ DB '%02d%02d%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CPIDLAI@at?$AA@
CONST	SEGMENT
??_C@_02CPIDLAI@at?$AA@ DB 'at', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OHHJMEON@?8?8?$AA@
CONST	SEGMENT
??_C@_02OHHJMEON@?8?8?$AA@ DB '''''', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?bBuxCode@@3PAEA DB 0fcH				; bBuxCode
	DB	0cfH
	DB	0abH
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
;	COMDAT ?PHeadSubSetBE@@YAXPAEEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 4
?PHeadSubSetBE@@YAXPAEEEH@Z PROC			; PHeadSubSetBE, COMDAT

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 274  : 	lpBuf[0] =0xC3;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]

; 275  : 	lpBuf[1] =size;

  00006	8a 45 14	 mov	 al, BYTE PTR _size$[ebp]
  00009	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 276  : 	lpBuf[2] =head;

  0000c	8a 45 0c	 mov	 al, BYTE PTR _head$[ebp]
  0000f	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 277  : 	lpBuf[3] =sub;

  00012	8a 45 10	 mov	 al, BYTE PTR _sub$[ebp]
  00015	c6 01 c3	 mov	 BYTE PTR [ecx], 195	; 000000c3H
  00018	88 41 03	 mov	 BYTE PTR [ecx+3], al

; 278  : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?PHeadSubSetBE@@YAXPAEEEH@Z ENDP			; PHeadSubSetBE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
;	COMDAT ?PHeadSetBE@@YAXPAEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_size$ = 16						; size = 4
?PHeadSetBE@@YAXPAEEH@Z PROC				; PHeadSetBE, COMDAT

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 267  : 	lpBuf[0] =0xC3;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]

; 268  : 	lpBuf[1] =size;

  00006	8a 45 10	 mov	 al, BYTE PTR _size$[ebp]
  00009	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 269  : 	lpBuf[2] =head;

  0000c	8a 45 0c	 mov	 al, BYTE PTR _head$[ebp]
  0000f	c6 01 c3	 mov	 BYTE PTR [ecx], 195	; 000000c3H
  00012	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 270  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?PHeadSetBE@@YAXPAEEH@Z ENDP				; PHeadSetBE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
;	COMDAT ?PHeadSubSetW@@YAXPAEEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 4
?PHeadSubSetW@@YAXPAEEEH@Z PROC				; PHeadSubSetW, COMDAT

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 257  : 	lpBuf[0]=0xC2;	// packet header

  00003	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]

; 258  : 	lpBuf[1]=SET_NUMBERH(size);

  00006	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	c1 e8 08	 shr	 eax, 8
  0000e	88 42 01	 mov	 BYTE PTR [edx+1], al

; 259  : 	lpBuf[2]=SET_NUMBERL(size);
; 260  : 	lpBuf[3]=head;

  00011	8a 45 0c	 mov	 al, BYTE PTR _head$[ebp]
  00014	88 42 03	 mov	 BYTE PTR [edx+3], al

; 261  : 	lpBuf[4]=sub;

  00017	8a 45 10	 mov	 al, BYTE PTR _sub$[ebp]
  0001a	c6 02 c2	 mov	 BYTE PTR [edx], 194	; 000000c2H
  0001d	88 4a 02	 mov	 BYTE PTR [edx+2], cl
  00020	88 42 04	 mov	 BYTE PTR [edx+4], al

; 262  : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?PHeadSubSetW@@YAXPAEEEH@Z ENDP				; PHeadSubSetW
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
;	COMDAT ?PHeadSetW@@YAXPAEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_size$ = 16						; size = 4
?PHeadSetW@@YAXPAEEH@Z PROC				; PHeadSetW, COMDAT

; 248  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 249  : 	lpBuf[0] = 0xC2;	// Packets Header

  00003	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]

; 250  : 	lpBuf[1]= SET_NUMBERH(size);

  00006	8b 4d 10	 mov	 ecx, DWORD PTR _size$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	c1 e8 08	 shr	 eax, 8
  0000e	88 42 01	 mov	 BYTE PTR [edx+1], al

; 251  : 	lpBuf[2]= SET_NUMBERL(size);
; 252  : 	lpBuf[3]= head;

  00011	8a 45 0c	 mov	 al, BYTE PTR _head$[ebp]
  00014	c6 02 c2	 mov	 BYTE PTR [edx], 194	; 000000c2H
  00017	88 4a 02	 mov	 BYTE PTR [edx+2], cl
  0001a	88 42 03	 mov	 BYTE PTR [edx+3], al

; 253  : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?PHeadSetW@@YAXPAEEH@Z ENDP				; PHeadSetW
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
;	COMDAT ?PHeadSubSetB@@YAXPAEEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 4
?PHeadSubSetB@@YAXPAEEEH@Z PROC				; PHeadSubSetB, COMDAT

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 241  : 	lpBuf[0] =0xC1;	// Packets

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]

; 242  : 	lpBuf[1] =size;

  00006	8a 45 14	 mov	 al, BYTE PTR _size$[ebp]
  00009	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 243  : 	lpBuf[2] =head;

  0000c	8a 45 0c	 mov	 al, BYTE PTR _head$[ebp]
  0000f	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 244  : 	lpBuf[3] =sub;

  00012	8a 45 10	 mov	 al, BYTE PTR _sub$[ebp]
  00015	c6 01 c1	 mov	 BYTE PTR [ecx], 193	; 000000c1H
  00018	88 41 03	 mov	 BYTE PTR [ecx+3], al

; 245  : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?PHeadSubSetB@@YAXPAEEEH@Z ENDP				; PHeadSubSetB
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
;	COMDAT ?PHeadSetB@@YAXPAEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_size$ = 16						; size = 4
?PHeadSetB@@YAXPAEEH@Z PROC				; PHeadSetB, COMDAT

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 233  : 	lpBuf[0] =0xC1;		// Packets

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]

; 234  : 	lpBuf[1] =size;

  00006	8a 45 10	 mov	 al, BYTE PTR _size$[ebp]
  00009	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 235  : 	lpBuf[2] =head;

  0000c	8a 45 0c	 mov	 al, BYTE PTR _head$[ebp]
  0000f	c6 01 c1	 mov	 BYTE PTR [ecx], 193	; 000000c1H
  00012	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 236  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?PHeadSetB@@YAXPAEEH@Z ENDP				; PHeadSetB
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
;	COMDAT ?GetTodayString@@YAXPAD@Z
_TEXT	SEGMENT
_ltime$ = -8						; size = 8
_szDate$ = 8						; size = 4
?GetTodayString@@YAXPAD@Z PROC				; GetTodayString, COMDAT

; 217  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00006	8d 45 f8	 lea	 eax, DWORD PTR _ltime$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __time64

; 511  :             return _localtime64(_Time);

  0000f	8d 45 f8	 lea	 eax, DWORD PTR _ltime$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 __localtime64
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp

; 227  : 	wsprintf(szDate, "%02d%02d%02d", today->tm_year , today->tm_mon +1 , today->tm_mday );

  00018	ff 70 0c	 push	 DWORD PTR [eax+12]
  0001b	81 40 14 6c 07
	00 00		 add	 DWORD PTR [eax+20], 1900 ; 0000076cH
  00022	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00025	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00028	40		 inc	 eax
  00029	50		 push	 eax
  0002a	51		 push	 ecx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d?$AA@
  00030	ff 75 08	 push	 DWORD PTR _szDate$[ebp]
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00039	83 c4 1c	 add	 esp, 28			; 0000001cH

; 228  : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?GetTodayString@@YAXPAD@Z ENDP				; GetTodayString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
;	COMDAT ?IsFile@@YAHPAD@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
?IsFile@@YAHPAD@Z PROC					; IsFile, COMDAT

; 200  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 201  : FILE *fp;
; 202  : 	
; 203  : 	fp=fopen(filename,"rb");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb?$AA@
  00008	ff 75 08	 push	 DWORD PTR _filename$[ebp]
  0000b	e8 00 00 00 00	 call	 _fopen
  00010	83 c4 08	 add	 esp, 8

; 204  : 	if (fp==0)

  00013	85 c0		 test	 eax, eax
  00015	75 02		 jne	 SHORT $LN2@IsFile

; 212  : 	}
; 213  : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
$LN2@IsFile:

; 205  : 	{
; 206  : 		return FALSE;
; 207  : 	}
; 208  : 	else
; 209  : 	{
; 210  : 		fclose(fp);

  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _fclose
  0001f	83 c4 04	 add	 esp, 4

; 211  : 		return TRUE;

  00022	b8 01 00 00 00	 mov	 eax, 1

; 212  : 	}
; 213  : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?IsFile@@YAHPAD@Z ENDP					; IsFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
;	COMDAT ?FileSaveString@@YAXPAD0@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
_string$ = 12						; size = 4
?FileSaveString@@YAXPAD0@Z PROC				; FileSaveString, COMDAT

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 178  : 	FILE* fp;
; 179  : 	
; 180  : 	fp=fopen(filename, "at");

  00004	68 00 00 00 00	 push	 OFFSET ??_C@_02CPIDLAI@at?$AA@
  00009	ff 75 08	 push	 DWORD PTR _filename$[ebp]
  0000c	e8 00 00 00 00	 call	 _fopen
  00011	8b f0		 mov	 esi, eax
  00013	83 c4 08	 add	 esp, 8

; 181  : 
; 182  : 	if (fp==0)

  00016	85 f6		 test	 esi, esi
  00018	74 1d		 je	 SHORT $LN3@FileSaveSt

; 183  : 	{
; 184  : 		return;
; 185  : 	}
; 186  : 	else
; 187  : 	{
; 188  : 		fprintf(fp, string);

  0001a	ff 75 0c	 push	 DWORD PTR _string$[ebp]
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 _fprintf

; 189  : 		fprintf(fp, "\n");

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 _fprintf

; 190  : 		fclose(fp);

  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 _fclose
  00034	83 c4 14	 add	 esp, 20			; 00000014H
$LN3@FileSaveSt:
  00037	5e		 pop	 esi

; 191  : 	}
; 192  : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?FileSaveString@@YAXPAD0@Z ENDP				; FileSaveString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
;	COMDAT ?StrHangulCheck@@YAHPAD@Z
_TEXT	SEGMENT
_szTemp$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_str$ = 8						; size = 4
?StrHangulCheck@@YAHPAD@Z PROC				; StrHangulCheck, COMDAT

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _str$[ebp]
  00019	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  0001f	68 00 01 00 00	 push	 256			; 00000100H
  00024	6a 00		 push	 0
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _memset
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]

; 117  : 	BYTE code1;
; 118  : 	BYTE code2;
; 119  : 	BYTE code;
; 120  : 	int i = 0;
; 121  : 	int n = 0;
; 122  : 	char	szTemp[256] = "";
; 123  : 	int result = 1;
; 124  : 	int count = 0xFF;	// -1

  00035	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  0003a	8b cf		 mov	 ecx, edi
  0003c	0f 1f 40 00	 npad	 4
$LL2@StrHangulC:

; 128  : 	{
; 129  : 	
; 130  : 		code1=str[i];

  00040	8a 11		 mov	 dl, BYTE PTR [ecx]
  00042	4e		 dec	 esi

; 131  : 		i++;

  00043	41		 inc	 ecx

; 132  : 
; 133  : 		if (code1==0)

  00044	84 d2		 test	 dl, dl
  00046	74 21		 je	 SHORT $LN16@StrHangulC

; 134  : 		{
; 135  : 			break;
; 136  : 		}
; 137  : 		else
; 138  : 		{
; 139  : 			if (code1<128)

  00048	80 fa 80	 cmp	 dl, 128			; 00000080H
  0004b	73 05		 jae	 SHORT $LN6@StrHangulC

; 140  : 			{
; 141  : 				szTemp[n]=code1;

  0004d	88 10		 mov	 BYTE PTR [eax], dl

; 142  : 				n++;

  0004f	40		 inc	 eax

; 143  : 				continue;

  00050	eb 13		 jmp	 SHORT $LN10@StrHangulC
$LN6@StrHangulC:

; 144  : 			}
; 145  : 			else
; 146  : 			{
; 147  : 				code2=str[i];

  00052	8a 19		 mov	 bl, BYTE PTR [ecx]

; 148  : 				i++;

  00054	41		 inc	 ecx

; 149  : 				code=code2 | (code1<<8);
; 150  : 
; 151  : 				if ((code)>0)

  00055	84 db		 test	 bl, bl
  00057	74 10		 je	 SHORT $LN16@StrHangulC

; 152  : 				{
; 153  : 					szTemp[n]=code1;

  00059	88 10		 mov	 BYTE PTR [eax], dl

; 154  : 					n++;
; 155  : 					szTemp[n]=code2;

  0005b	88 58 01	 mov	 BYTE PTR [eax+1], bl

; 156  : 					n++;

  0005e	83 c0 02	 add	 eax, 2

; 157  : 				}
; 158  : 				else
; 159  : 				{
; 160  : 					result =0;
; 161  : 				}
; 162  : 				if(code2==0)

  00061	84 db		 test	 bl, bl
  00063	74 04		 je	 SHORT $LN16@StrHangulC
$LN10@StrHangulC:

; 125  : 
; 126  : 
; 127  : 	while ((count--) != 0)

  00065	85 f6		 test	 esi, esi
  00067	75 d7		 jne	 SHORT $LL2@StrHangulC
$LN16@StrHangulC:

; 163  : 				{
; 164  : 					break;
; 165  : 				}
; 166  : 			}
; 167  : 		}
; 168  : 	}
; 169  : 	
; 170  : 	
; 171  : 	strcpy(str, szTemp);

  00069	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _szTemp$[ebp]
  0006f	8b c1		 mov	 eax, ecx
  00071	2b f8		 sub	 edi, eax
$LL12@StrHangulC:
  00073	8a 01		 mov	 al, BYTE PTR [ecx]
  00075	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00078	88 44 0f ff	 mov	 BYTE PTR [edi+ecx-1], al
  0007c	84 c0		 test	 al, al
  0007e	75 f3		 jne	 SHORT $LL12@StrHangulC

; 172  : 	return TRUE;
; 173  : }

  00080	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00083	b8 01 00 00 00	 mov	 eax, 1
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	33 cd		 xor	 ecx, ebp
  0008c	5b		 pop	 ebx
  0008d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
?StrHangulCheck@@YAHPAD@Z ENDP				; StrHangulCheck
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
;	COMDAT ?SpaceSyntexCheck@@YAHPAD@Z
_TEXT	SEGMENT
_string$ = 8						; size = 4
?SpaceSyntexCheck@@YAHPAD@Z PROC			; SpaceSyntexCheck, COMDAT

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h

; 519  :         return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));

  00003	6a 20		 push	 32			; 00000020H
  00005	ff 75 08	 push	 DWORD PTR _string$[ebp]
  00008	e8 00 00 00 00	 call	 _strchr
  0000d	83 c4 08	 add	 esp, 8
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp

; 104  : 	if (temp ==0 )

  00010	f7 d8		 neg	 eax
  00012	1b c0		 sbb	 eax, eax
  00014	40		 inc	 eax

; 105  : 	{
; 106  : 		return TRUE;
; 107  : 	}
; 108  : 	else
; 109  : 	{
; 110  : 		return FALSE;
; 111  : 	}
; 112  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?SpaceSyntexCheck@@YAHPAD@Z ENDP			; SpaceSyntexCheck
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
;	COMDAT ?SQLSyntexCheckConvert@@YAHPAD@Z
_TEXT	SEGMENT
_SQLString$GSCopy$1$ = -264				; size = 4
_tempSQL$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_SQLString$ = 8						; size = 4
?SQLSyntexCheckConvert@@YAHPAD@Z PROC			; SQLSyntexCheckConvert, COMDAT

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _SQLString$[ebp]
  00016	53		 push	 ebx

; 50   : 	char tempSQL[256];
; 51   : 	char* temp;
; 52   : 	char* temp2;
; 53   : 
; 54   : 	temp2 = SQLString;
; 55   : 	int lOfs=0;
; 56   : 	int tOfs=0;

  00017	33 db		 xor	 ebx, ebx
  00019	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _SQLString$GSCopy$1$[ebp], eax
  0001f	56		 push	 esi
  00020	8b f0		 mov	 esi, eax

; 57   : 	int sOfs=0;
; 58   : 
; 59   : 	
; 60   : 
; 61   : 	if (SQLString==0)

  00022	85 c0		 test	 eax, eax
  00024	75 10		 jne	 SHORT $LN15@SQLSyntexC
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx

; 95   : 	return TRUE;
; 96   : }

  00028	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002b	33 cd		 xor	 ecx, ebp
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN15@SQLSyntexC:
  00036	57		 push	 edi
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h

; 519  :         return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));

  00037	6a 27		 push	 39			; 00000027H
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _strchr
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp

; 67   : 		temp = strchr(temp2, 39);

  0003f	8b f8		 mov	 edi, eax
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h

; 519  :         return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));

  00041	83 c4 08	 add	 esp, 8
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp

; 68   : 		if (temp != 0 )

  00044	85 ff		 test	 edi, edi
  00046	74 68		 je	 SHORT $LN5@SQLSyntexC
$LL2@SQLSyntexC:

; 69   : 		{
; 70   : 			if (temp - temp2 != 0)

  00048	2b fe		 sub	 edi, esi
  0004a	74 13		 je	 SHORT $LN7@SQLSyntexC

; 71   : 			{
; 72   : 				memcpy(&tempSQL[tOfs], temp2, temp-temp2);

  0004c	57		 push	 edi
  0004d	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _tempSQL$[ebp]
  00053	03 c3		 add	 eax, ebx
  00055	56		 push	 esi
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _memcpy
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@SQLSyntexC:

; 73   : 			}
; 74   : 			lOfs = temp - (temp2 + sOfs);
; 75   : 			tOfs += lOfs;

  0005f	03 df		 add	 ebx, edi

; 76   : 			temp2 += lOfs;
; 77   : 
; 78   : 			tempSQL[tOfs]=0;

  00061	81 fb 00 01 00
	00		 cmp	 ebx, 256		; 00000100H
  00067	0f 83 95 00 00
	00		 jae	 $LN26@SQLSyntexC

; 79   : 
; 80   : 			tOfs += 2;
; 81   : 			temp2++;

  0006d	46		 inc	 esi
  0006e	c6 84 1d fc fe
	ff ff 00	 mov	 BYTE PTR _tempSQL$[ebp+ebx], 0

; 83   : 			strcat(tempSQL, "''");

  00076	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _tempSQL$[ebp]
  0007c	83 c3 02	 add	 ebx, 2
  0007f	03 f7		 add	 esi, edi
  00081	48		 dec	 eax
$LL24@SQLSyntexC:
  00082	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00085	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00088	84 c9		 test	 cl, cl
  0008a	75 f6		 jne	 SHORT $LL24@SQLSyntexC
  0008c	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ??_C@_02OHHJMEON@?8?8?$AA@
  00093	66 89 08	 mov	 WORD PTR [eax], cx
  00096	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02OHHJMEON@?8?8?$AA@+2
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h

; 519  :         return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));

  0009c	6a 27		 push	 39			; 00000027H
  0009e	56		 push	 esi
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp

; 83   : 			strcat(tempSQL, "''");

  0009f	88 48 02	 mov	 BYTE PTR [eax+2], cl
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h

; 519  :         return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));

  000a2	e8 00 00 00 00	 call	 _strchr
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp

; 67   : 		temp = strchr(temp2, 39);

  000a7	8b f8		 mov	 edi, eax
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h

; 519  :         return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));

  000a9	83 c4 08	 add	 esp, 8
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp

; 68   : 		if (temp != 0 )

  000ac	85 ff		 test	 edi, edi
  000ae	75 98		 jne	 SHORT $LL2@SQLSyntexC
$LN5@SQLSyntexC:

; 84   : 			
; 85   : 		}
; 86   : 		else
; 87   : 		{
; 88   : 			strcpy(&tempSQL[tOfs], temp2);

  000b0	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _tempSQL$[ebp]
  000b6	03 cb		 add	 ecx, ebx
  000b8	2b ce		 sub	 ecx, esi
  000ba	5f		 pop	 edi
  000bb	0f 1f 44 00 00	 npad	 5
$LL11@SQLSyntexC:
  000c0	8a 06		 mov	 al, BYTE PTR [esi]
  000c2	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  000c5	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  000c9	84 c0		 test	 al, al
  000cb	75 f3		 jne	 SHORT $LL11@SQLSyntexC

; 89   : 			break;
; 90   : 		}
; 91   : 	}
; 92   : 
; 93   : 	
; 94   : 	strcpy(SQLString, tempSQL);		// Strange unseless jump here

  000cd	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR _SQLString$GSCopy$1$[ebp]
  000d3	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _tempSQL$[ebp]
  000d9	8b c1		 mov	 eax, ecx
  000db	2b d0		 sub	 edx, eax
  000dd	0f 1f 00	 npad	 3
$LL12@SQLSyntexC:
  000e0	8a 01		 mov	 al, BYTE PTR [ecx]
  000e2	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000e5	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  000e9	84 c0		 test	 al, al
  000eb	75 f3		 jne	 SHORT $LL12@SQLSyntexC

; 95   : 	return TRUE;
; 96   : }

  000ed	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f0	b8 01 00 00 00	 mov	 eax, 1
  000f5	5e		 pop	 esi
  000f6	33 cd		 xor	 ecx, ebp
  000f8	5b		 pop	 ebx
  000f9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c3		 ret	 0
$LN26@SQLSyntexC:

; 76   : 			temp2 += lOfs;
; 77   : 
; 78   : 			tempSQL[tOfs]=0;

  00102	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN27@SQLSyntexC:
$LN25@SQLSyntexC:
  00107	cc		 int	 3
?SQLSyntexCheckConvert@@YAHPAD@Z ENDP			; SQLSyntexCheckConvert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
;	COMDAT ?SQLSyntexCheck@@YAHPAD@Z
_TEXT	SEGMENT
_SQLString$ = 8						; size = 4
?SQLSyntexCheck@@YAHPAD@Z PROC				; SQLSyntexCheck, COMDAT

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h

; 519  :         return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));

  00003	6a 27		 push	 39			; 00000027H
  00005	ff 75 08	 push	 DWORD PTR _SQLString$[ebp]
  00008	e8 00 00 00 00	 call	 _strchr
  0000d	83 c4 08	 add	 esp, 8
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp

; 30   : 	if (temp==0)

  00010	85 c0		 test	 eax, eax
  00012	75 14		 jne	 SHORT $LN2@SQLSyntexC
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h

; 519  :         return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));

  00014	6a 20		 push	 32			; 00000020H
  00016	ff 75 08	 push	 DWORD PTR _SQLString$[ebp]
  00019	e8 00 00 00 00	 call	 _strchr
  0001e	83 c4 08	 add	 esp, 8
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp

; 33   : 		if (temp==0)

  00021	f7 d8		 neg	 eax
  00023	1b c0		 sbb	 eax, eax
  00025	40		 inc	 eax

; 45   : 	}
; 46   : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
$LN2@SQLSyntexC:

; 34   : 		{
; 35   : 			return TRUE;
; 36   : 		}
; 37   : 		else
; 38   : 		{
; 39   : 			return FALSE;
; 40   : 		}
; 41   : 	}
; 42   : 	else
; 43   : 	{
; 44   : 		return FALSE;

  00028	33 c0		 xor	 eax, eax

; 45   : 	}
; 46   : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?SQLSyntexCheck@@YAHPAD@Z ENDP				; SQLSyntexCheck
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
;	COMDAT ?BuxConvert@@YAXPADH@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
?BuxConvert@@YAXPADH@Z PROC				; BuxConvert, COMDAT

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 16   : 	int n;
; 17   : 
; 18   : 	for (n=0;n<size;n++)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _size$[ebp]
  00007	33 c9		 xor	 ecx, ecx
  00009	85 f6		 test	 esi, esi
  0000b	7e 23		 jle	 SHORT $LN3@BuxConvert
  0000d	57		 push	 edi
  0000e	8b 7d 08	 mov	 edi, DWORD PTR _buf$[ebp]
$LL4@BuxConvert:

; 19   : 	{
; 20   : 		buf[n]^=bBuxCode[n%3] ;		// Nice trick from WebZen

  00011	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00016	f7 e1		 mul	 ecx
  00018	d1 ea		 shr	 edx, 1
  0001a	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  0001d	8b d1		 mov	 edx, ecx
  0001f	2b d0		 sub	 edx, eax
  00021	8a 82 00 00 00
	00		 mov	 al, BYTE PTR ?bBuxCode@@3PAEA[edx]
  00027	30 04 39	 xor	 BYTE PTR [ecx+edi], al
  0002a	41		 inc	 ecx
  0002b	3b ce		 cmp	 ecx, esi
  0002d	7c e2		 jl	 SHORT $LL4@BuxConvert
  0002f	5f		 pop	 edi
$LN3@BuxConvert:
  00030	5e		 pop	 esi

; 21   : 	}
; 22   : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?BuxConvert@@YAXPADH@Z ENDP				; BuxConvert
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 534  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  :         }

  00003	5d		 pop	 ebp

; 535  :             return _time64(_Time);

  00004	e9 00 00 00 00	 jmp	 __time64
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _localtime
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_localtime PROC						; COMDAT

; 508  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 512  :             #pragma warning(pop)
; 513  :         }

  00003	5d		 pop	 ebp

; 509  :             #pragma warning(push)
; 510  :             #pragma warning(disable: 4996)
; 511  :             return _localtime64(_Time);

  00004	e9 00 00 00 00	 jmp	 __localtime64
_localtime ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 831  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 832  :     int _Result;
; 833  :     va_list _ArgList;
; 834  :     __crt_va_start(_ArgList, _Format);
; 835  :     _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);
; 836  :     __crt_va_end(_ArgList);
; 837  :     return _Result;
; 838  : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 640  : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
;	COMDAT ?strchr@@YAPADQADH@Z
_TEXT	SEGMENT
__String$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strchr@@YAPADQADH@Z PROC				; strchr, COMDAT

; 518  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 520  :     }

  00003	5d		 pop	 ebp

; 519  :         return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));

  00004	e9 00 00 00 00	 jmp	 _strchr
?strchr@@YAPADQADH@Z ENDP				; strchr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\winutil.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
