; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\KanturuMonsterMng.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1CKanturuObjInfo@@UAE@XZ			; CKanturuObjInfo::~CKanturuObjInfo
PUBLIC	?AddObj@CKanturuObjInfo@@QAEHH@Z		; CKanturuObjInfo::AddObj
PUBLIC	??_GCKanturuObjInfo@@UAEPAXI@Z			; CKanturuObjInfo::`scalar deleting destructor'
PUBLIC	??0CKanturuMonsterMng@@QAE@XZ			; CKanturuMonsterMng::CKanturuMonsterMng
PUBLIC	??1CKanturuMonsterMng@@UAE@XZ			; CKanturuMonsterMng::~CKanturuMonsterMng
PUBLIC	?ResetLoadData@CKanturuMonsterMng@@QAEXXZ	; CKanturuMonsterMng::ResetLoadData
PUBLIC	?ResetRegenMonsterObjData@CKanturuMonsterMng@@QAEXXZ ; CKanturuMonsterMng::ResetRegenMonsterObjData
PUBLIC	?MonsterDie@CKanturuMonsterMng@@QAEXH@Z		; CKanturuMonsterMng::MonsterDie
PUBLIC	?LoadData@CKanturuMonsterMng@@QAEHPAD@Z		; CKanturuMonsterMng::LoadData
PUBLIC	?SetMonsterSetBaseInfo@CKanturuMonsterMng@@QAEXHEGEEEEE@Z ; CKanturuMonsterMng::SetMonsterSetBaseInfo
PUBLIC	?SetKanturuMonster@CKanturuMonsterMng@@QAEHH@Z	; CKanturuMonsterMng::SetKanturuMonster
PUBLIC	?GetPosition@CKanturuMonsterMng@@QAEHHFAAE0@Z	; CKanturuMonsterMng::GetPosition
PUBLIC	?IsExistAliveMonster@CKanturuMonsterMng@@QAEHXZ	; CKanturuMonsterMng::IsExistAliveMonster
PUBLIC	??_GCKanturuMonsterMng@@UAEPAXI@Z		; CKanturuMonsterMng::`scalar deleting destructor'
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7CKanturuObjInfo@@6B@			; CKanturuObjInfo::`vftable'
PUBLIC	??_7CKanturuMonsterMng@@6B@			; CKanturuMonsterMng::`vftable'
PUBLIC	?g_KanturuMonsterMng@@3VCKanturuMonsterMng@@A	; g_KanturuMonsterMng
PUBLIC	??_C@_0EC@CJGCKAIN@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0CP@DNGFMEFC@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0DL@GKPAFDBA@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ ; `string'
PUBLIC	??_C@_0DC@GFEEBCLE@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ ; `string'
PUBLIC	??_R0K@8					; unsigned long `RTTI Type Descriptor'
PUBLIC	??_C@_0EC@LDGKJEHF@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5Lo@ ; `string'
PUBLIC	??_C@_0EB@KNPKCPLM@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@ ; `string'
PUBLIC	??_C@_0EM@BCLPDFKA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@ ; `string'
PUBLIC	??_C@_0FF@JCBLMGAA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@ ; `string'
PUBLIC	??_C@_0BG@MCHOGKIP@KanturuMonsterMng?4cpp?$AA@	; `string'
PUBLIC	??_C@_0O@IFOOJNNH@ERROR?5?3?5?$CFs?5?$CFd?$AA@	; `string'
PUBLIC	??_R4CKanturuObjInfo@@6B@			; CKanturuObjInfo::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCKanturuObjInfo@@@8			; CKanturuObjInfo `RTTI Type Descriptor'
PUBLIC	??_R3CKanturuObjInfo@@8				; CKanturuObjInfo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CKanturuObjInfo@@8				; CKanturuObjInfo::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CKanturuObjInfo@@8		; CKanturuObjInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CKanturuMonsterMng@@6B@			; CKanturuMonsterMng::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCKanturuMonsterMng@@@8			; CKanturuMonsterMng `RTTI Type Descriptor'
PUBLIC	??_R3CKanturuMonsterMng@@8			; CKanturuMonsterMng::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CKanturuMonsterMng@@8			; CKanturuMonsterMng::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CKanturuMonsterMng@@8		; CKanturuMonsterMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_rand:PROC
EXTRN	_atof:PROC
EXTRN	??_ECKanturuObjInfo@@UAEPAXI@Z:PROC		; CKanturuObjInfo::`vector deleting destructor'
EXTRN	??_ECKanturuMonsterMng@@UAEPAXI@Z:PROC		; CKanturuMonsterMng::`vector deleting destructor'
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_KanturuMonsterMng@@3VCKanturuMonsterMng@@A DB 01470H DUP (?) ; g_KanturuMonsterMng
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
_BSS	ENDS
CRT$XCU	SEGMENT
?g_KanturuMonsterMng$initializer$@@3P6AXXZA DD FLAT:??__Eg_KanturuMonsterMng@@YAXXZ ; g_KanturuMonsterMng$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CKanturuMonsterMng@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CKanturuMonsterMng@@8 DD FLAT:??_R0?AVCKanturuMonsterMng@@@8 ; CKanturuMonsterMng::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CKanturuMonsterMng@@8
rdata$r	ENDS
;	COMDAT ??_R2CKanturuMonsterMng@@8
rdata$r	SEGMENT
??_R2CKanturuMonsterMng@@8 DD FLAT:??_R1A@?0A@EA@CKanturuMonsterMng@@8 ; CKanturuMonsterMng::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CKanturuMonsterMng@@8
rdata$r	SEGMENT
??_R3CKanturuMonsterMng@@8 DD 00H			; CKanturuMonsterMng::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CKanturuMonsterMng@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCKanturuMonsterMng@@@8
data$r	SEGMENT
??_R0?AVCKanturuMonsterMng@@@8 DD FLAT:??_7type_info@@6B@ ; CKanturuMonsterMng `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCKanturuMonsterMng@@', 00H
data$r	ENDS
;	COMDAT ??_R4CKanturuMonsterMng@@6B@
rdata$r	SEGMENT
??_R4CKanturuMonsterMng@@6B@ DD 00H			; CKanturuMonsterMng::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCKanturuMonsterMng@@@8
	DD	FLAT:??_R3CKanturuMonsterMng@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CKanturuObjInfo@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CKanturuObjInfo@@8 DD FLAT:??_R0?AVCKanturuObjInfo@@@8 ; CKanturuObjInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CKanturuObjInfo@@8
rdata$r	ENDS
;	COMDAT ??_R2CKanturuObjInfo@@8
rdata$r	SEGMENT
??_R2CKanturuObjInfo@@8 DD FLAT:??_R1A@?0A@EA@CKanturuObjInfo@@8 ; CKanturuObjInfo::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CKanturuObjInfo@@8
rdata$r	SEGMENT
??_R3CKanturuObjInfo@@8 DD 00H				; CKanturuObjInfo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CKanturuObjInfo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCKanturuObjInfo@@@8
data$r	SEGMENT
??_R0?AVCKanturuObjInfo@@@8 DD FLAT:??_7type_info@@6B@	; CKanturuObjInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCKanturuObjInfo@@', 00H
data$r	ENDS
;	COMDAT ??_R4CKanturuObjInfo@@6B@
rdata$r	SEGMENT
??_R4CKanturuObjInfo@@6B@ DD 00H			; CKanturuObjInfo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCKanturuObjInfo@@@8
	DD	FLAT:??_R3CKanturuObjInfo@@8
rdata$r	ENDS
;	COMDAT ??_C@_0O@IFOOJNNH@ERROR?5?3?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0O@IFOOJNNH@ERROR?5?3?5?$CFs?5?$CFd?$AA@ DB 'ERROR : %s %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MCHOGKIP@KanturuMonsterMng?4cpp?$AA@
CONST	SEGMENT
??_C@_0BG@MCHOGKIP@KanturuMonsterMng?4cpp?$AA@ DB 'KanturuMonsterMng.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@JCBLMGAA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@
CONST	SEGMENT
??_C@_0FF@JCBLMGAA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@ DB '['
	DB	' KANTURU ][ SetBossMapMonster ] Count:%d %s(Index:%d / ObjInd'
	DB	'ex:%d) Map:%d-[%d][%d]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@BCLPDFKA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@
CONST	SEGMENT
??_C@_0EM@BCLPDFKA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@ DB '['
	DB	' KANTURU ][ SetBossMapMonster ] %s(Index:%d / ObjIndex:%d) Ma'
	DB	'p:%d-[%d][%d]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@KNPKCPLM@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@
CONST	SEGMENT
??_C@_0EB@KNPKCPLM@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@ DB '['
	DB	' KANTURU ][ SetBossMapMonster ] Fail - Type:%d Map[%d]-[%d][%'
	DB	'd]', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@LDGKJEHF@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5Lo@
CONST	SEGMENT
??_C@_0EC@LDGKJEHF@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5Lo@ DB '['
	DB	' KANTURU ][ MonsterSetBase ] Loading Exception Error (%s) Fil'
	DB	'e. ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_R0K@8
data$r	SEGMENT
??_R0K@8 DD	FLAT:??_7type_info@@6B@			; unsigned long `RTTI Type Descriptor'
	DD	00H
	DB	'.K', 00H
data$r	ENDS
;	COMDAT ??_C@_0DC@GFEEBCLE@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
CONST	SEGMENT
??_C@_0DC@GFEEBCLE@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ DB '['
	DB	' KANTURU ][ MonsterSetBase ] - %s file is Loaded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@GKPAFDBA@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
CONST	SEGMENT
??_C@_0DL@GKPAFDBA@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ DB '['
	DB	' KANTURU ][ MonsterSetBase ] - Exceed Max Info Count (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@DNGFMEFC@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
CONST	SEGMENT
??_C@_0CP@DNGFMEFC@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ DB '['
	DB	' KANTURU ][ MonsterSetBase ] - Can''t Open %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@CJGCKAIN@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
CONST	SEGMENT
??_C@_0EC@CJGCKAIN@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@ DB '['
	DB	' KANTURU ][ MonsterSetBase ] - File load error : File Name Er'
	DB	'ror', 00H					; `string'
CONST	ENDS
;	COMDAT ??_7CKanturuMonsterMng@@6B@
CONST	SEGMENT
??_7CKanturuMonsterMng@@6B@ DD FLAT:??_R4CKanturuMonsterMng@@6B@ ; CKanturuMonsterMng::`vftable'
	DD	FLAT:??_ECKanturuMonsterMng@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CKanturuObjInfo@@6B@
CONST	SEGMENT
??_7CKanturuObjInfo@@6B@ DD FLAT:??_R4CKanturuObjInfo@@6B@ ; CKanturuObjInfo::`vftable'
	DD	FLAT:??_ECKanturuObjInfo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z$2 DD 00H
	DD	FLAT:??_R0K@8
	DD	00H
	DD	FLAT:__catch$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z$0
__unwindtable$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z$2
__ehfuncinfo$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CKanturuMonsterMng@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CKanturuMonsterMng@@QAE@XZ$0
__ehfuncinfo$??0CKanturuMonsterMng@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CKanturuMonsterMng@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_KanturuMonsterMng@@YAXXZ
text$yd	SEGMENT
??__Fg_KanturuMonsterMng@@YAXXZ PROC			; `dynamic atexit destructor for 'g_KanturuMonsterMng'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_KanturuMonsterMng@@3VCKanturuMonsterMng@@A ; g_KanturuMonsterMng
  00005	e9 00 00 00 00	 jmp	 ??1CKanturuMonsterMng@@UAE@XZ ; CKanturuMonsterMng::~CKanturuMonsterMng
??__Fg_KanturuMonsterMng@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_KanturuMonsterMng''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp
;	COMDAT ??__Eg_KanturuMonsterMng@@YAXXZ
text$di	SEGMENT
??__Eg_KanturuMonsterMng@@YAXXZ PROC			; `dynamic initializer for 'g_KanturuMonsterMng'', COMDAT

; 13   : CKanturuMonsterMng g_KanturuMonsterMng;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_KanturuMonsterMng@@3VCKanturuMonsterMng@@A ; g_KanturuMonsterMng
  00005	e8 00 00 00 00	 call	 ??0CKanturuMonsterMng@@QAE@XZ ; CKanturuMonsterMng::CKanturuMonsterMng
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_KanturuMonsterMng@@YAXXZ ; `dynamic atexit destructor for 'g_KanturuMonsterMng''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_KanturuMonsterMng@@YAXXZ ENDP			; `dynamic initializer for 'g_KanturuMonsterMng''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCKanturuMonsterMng@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCKanturuMonsterMng@@UAEPAXI@Z PROC			; CKanturuMonsterMng::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CKanturuMonsterMng@@UAE@XZ ; CKanturuMonsterMng::~CKanturuMonsterMng
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 70 14 00 00	 push	 5232			; 00001470H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCKanturuMonsterMng@@UAEPAXI@Z ENDP			; CKanturuMonsterMng::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp
;	COMDAT ?IsExistAliveMonster@CKanturuMonsterMng@@QAEHXZ
_TEXT	SEGMENT
?IsExistAliveMonster@CKanturuMonsterMng@@QAEHXZ PROC	; CKanturuMonsterMng::IsExistAliveMonster, COMDAT
; _this$ = ecx

; 359  : 	if ( this->m_iAliveMonsterCount <=  0 )

  00000	33 c0		 xor	 eax, eax
  00002	39 81 6c 14 00
	00		 cmp	 DWORD PTR [ecx+5228], eax
  00008	0f 9f c0	 setg	 al

; 360  : 	{
; 361  : 		return FALSE;
; 362  : 	}
; 363  : 
; 364  : 	return TRUE;
; 365  : }

  0000b	c3		 ret	 0
?IsExistAliveMonster@CKanturuMonsterMng@@QAEHXZ ENDP	; CKanturuMonsterMng::IsExistAliveMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp
;	COMDAT ?GetPosition@CKanturuMonsterMng@@QAEHHFAAE0@Z
_TEXT	SEGMENT
tv248 = -4						; size = 4
_iOry$1$ = 8						; size = 4
_TableNum$ = 8						; size = 4
_iOry$2$ = 12						; size = 4
_MapNumber$ = 12					; size = 2
_x$ = 16						; size = 4
_y$ = 20						; size = 4
?GetPosition@CKanturuMonsterMng@@QAEHHFAAE0@Z PROC	; CKanturuMonsterMng::GetPosition, COMDAT
; _this$ = ecx

; 313  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 314  : 	if ( TableNum < 0 || TableNum > MAX_KANTURU_MONSTER-1 )

  00004	8b 45 08	 mov	 eax, DWORD PTR _TableNum$[ebp]
  00007	3d c7 00 00 00	 cmp	 eax, 199		; 000000c7H
  0000c	0f 87 c2 00 00
	00		 ja	 $LN5@GetPositio

; 318  : 	}
; 319  : 
; 320  : 	int iOrx = this->m_SetBaseInfo[TableNum].btX;

  00012	53		 push	 ebx
  00013	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00016	0f b6 5c 41 0e	 movzx	 ebx, BYTE PTR [ecx+eax*2+14]
  0001b	57		 push	 edi
  0001c	8d 3c 41	 lea	 edi, DWORD PTR [ecx+eax*2]

; 321  : 	int iOry = this->m_SetBaseInfo[TableNum].btY;
; 322  : 	BYTE btAttr = MapC[MapNumber].GetAttr(iOrx, iOry);

  0001f	0f bf 45 0c	 movsx	 eax, WORD PTR _MapNumber$[ebp]
  00023	0f b6 4f 0f	 movzx	 ecx, BYTE PTR [edi+15]
  00027	69 c0 28 38 05
	00		 imul	 eax, eax, 342056
  0002d	51		 push	 ecx
  0002e	89 4d 08	 mov	 DWORD PTR _iOry$1$[ebp], ecx
  00031	53		 push	 ebx
  00032	8d 80 00 00 00
	00		 lea	 eax, DWORD PTR ?MapC@@3PAVMapClass@@A[eax]
  00038	8b c8		 mov	 ecx, eax
  0003a	89 45 fc	 mov	 DWORD PTR tv248[ebp], eax
  0003d	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  00042	a8 0d		 test	 al, 13			; 0000000dH

; 323  : 
; 324  : 	if ( (btAttr&1)!=1 && (btAttr&4)!=4 && (btAttr&8)!=8 )

  00044	75 1a		 jne	 SHORT $LN6@GetPositio

; 325  : 	{
; 326  : 		x = iOrx;

  00046	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]

; 327  : 		y = iOry;

  00049	8b 4d 08	 mov	 ecx, DWORD PTR _iOry$1$[ebp]
  0004c	5f		 pop	 edi
  0004d	88 18		 mov	 BYTE PTR [eax], bl
  0004f	8b 45 14	 mov	 eax, DWORD PTR _y$[ebp]
  00052	5b		 pop	 ebx
  00053	88 08		 mov	 BYTE PTR [eax], cl

; 328  : 
; 329  : 		return TRUE;

  00055	b8 01 00 00 00	 mov	 eax, 1

; 353  : }

  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 10 00	 ret	 16			; 00000010H
$LN6@GetPositio:
  00060	56		 push	 esi

; 330  : 	}
; 331  : 
; 332  : 	int iCount = 100;	// Number of Tries

  00061	be 64 00 00 00	 mov	 esi, 100		; 00000064H
$LL2@GetPositio:

; 335  : 	{
; 336  : 		iOrx = this->m_SetBaseInfo[TableNum].btX - 3;
; 337  : 		iOry = this->m_SetBaseInfo[TableNum].btY - 3;

  00066	0f b6 47 0f	 movzx	 eax, BYTE PTR [edi+15]
  0006a	4e		 dec	 esi
  0006b	0f b6 5f 0e	 movzx	 ebx, BYTE PTR [edi+14]
  0006f	83 e8 03	 sub	 eax, 3
  00072	83 eb 03	 sub	 ebx, 3
  00075	89 45 0c	 mov	 DWORD PTR _iOry$2$[ebp], eax

; 338  : 		iOrx += rand() % 7;

  00078	e8 00 00 00 00	 call	 _rand
  0007d	99		 cdq
  0007e	b9 07 00 00 00	 mov	 ecx, 7
  00083	f7 f9		 idiv	 ecx
  00085	03 da		 add	 ebx, edx

; 339  : 		iOry += rand() % 7;

  00087	e8 00 00 00 00	 call	 _rand
  0008c	99		 cdq
  0008d	b9 07 00 00 00	 mov	 ecx, 7
  00092	f7 f9		 idiv	 ecx
  00094	8b 45 0c	 mov	 eax, DWORD PTR _iOry$2$[ebp]

; 340  : 
; 341  : 		btAttr = MapC[MapNumber].GetAttr(iOrx, iOry);

  00097	8b 4d fc	 mov	 ecx, DWORD PTR tv248[ebp]
  0009a	03 c2		 add	 eax, edx
  0009c	50		 push	 eax
  0009d	53		 push	 ebx
  0009e	89 45 0c	 mov	 DWORD PTR _iOry$2$[ebp], eax
  000a1	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  000a6	a8 0d		 test	 al, 13			; 0000000dH

; 342  : 
; 343  : 		if ( (btAttr&1)!=1 && (btAttr&4)!=4 && (btAttr&8)!=8 )

  000a8	74 0f		 je	 SHORT $LN10@GetPositio

; 333  : 
; 334  : 	while ( iCount-- != 0 )

  000aa	85 f6		 test	 esi, esi
  000ac	75 b8		 jne	 SHORT $LL2@GetPositio

; 349  : 		}
; 350  : 	}
; 351  : 
; 352  : 	return FALSE;

  000ae	5e		 pop	 esi
  000af	5f		 pop	 edi
  000b0	33 c0		 xor	 eax, eax
  000b2	5b		 pop	 ebx

; 353  : }

  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 10 00	 ret	 16			; 00000010H
$LN10@GetPositio:

; 344  : 		{
; 345  : 			x = iOrx;

  000b9	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]

; 346  : 			y = iOry;

  000bc	8b 4d 0c	 mov	 ecx, DWORD PTR _iOry$2$[ebp]
  000bf	5e		 pop	 esi
  000c0	5f		 pop	 edi
  000c1	88 18		 mov	 BYTE PTR [eax], bl
  000c3	8b 45 14	 mov	 eax, DWORD PTR _y$[ebp]
  000c6	5b		 pop	 ebx
  000c7	88 08		 mov	 BYTE PTR [eax], cl

; 347  : 
; 348  : 			return TRUE;

  000c9	b8 01 00 00 00	 mov	 eax, 1

; 353  : }

  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 10 00	 ret	 16			; 00000010H
$LN5@GetPositio:

; 315  : 	{
; 316  : 		LogAdd("ERROR : %s %d", __FILE__, __LINE__);

  000d4	68 3c 01 00 00	 push	 316			; 0000013cH
  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MCHOGKIP@KanturuMonsterMng?4cpp?$AA@
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IFOOJNNH@ERROR?5?3?5?$CFs?5?$CFd?$AA@
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 317  : 		return FALSE;

  000ec	33 c0		 xor	 eax, eax

; 353  : }

  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c2 10 00	 ret	 16			; 00000010H
?GetPosition@CKanturuMonsterMng@@QAEHHFAAE0@Z ENDP	; CKanturuMonsterMng::GetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp
;	COMDAT ?SetKanturuMonster@CKanturuMonsterMng@@QAEHH@Z
_TEXT	SEGMENT
_iCount$1$ = -16					; size = 4
tv709 = -12						; size = 4
_this$1$ = -8						; size = 4
_iRegenCount$1$ = -4					; size = 4
_iGroupNumber$ = 8					; size = 4
?SetKanturuMonster@CKanturuMonsterMng@@QAEHH@Z PROC	; CKanturuMonsterMng::SetKanturuMonster, COMDAT
; _this$ = ecx

; 219  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	8b c1		 mov	 eax, ecx

; 220  : 	int iMapNumber = 0;
; 221  : 	WORD wType = 0;
; 222  : 	LPOBJ lpObj;
; 223  : 	int iResult;
; 224  : 	int iRegenCount = 0;

  00008	33 c9		 xor	 ecx, ecx
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	89 45 f8	 mov	 DWORD PTR _this$1$[ebp], eax
  00010	8d 70 0e	 lea	 esi, DWORD PTR [eax+14]
  00013	89 4d fc	 mov	 DWORD PTR _iRegenCount$1$[ebp], ecx

; 225  : 	
; 226  : 	for ( int iCount=0;iCount<MAX_KANTURU_MONSTER;iCount++)

  00016	89 4d f0	 mov	 DWORD PTR _iCount$1$[ebp], ecx
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@SetKanturu:

; 227  : 	{
; 228  : 		if ( this->m_SetBaseInfo[iCount].btGroup == iGroupNumber &&

  00020	0f b6 46 fa	 movzx	 eax, BYTE PTR [esi-6]
  00024	3b 45 08	 cmp	 eax, DWORD PTR _iGroupNumber$[ebp]
  00027	0f 85 f1 01 00
	00		 jne	 $LN2@SetKanturu
  0002d	66 83 7e fc 00	 cmp	 WORD PTR [esi-4], 0
  00032	0f 84 e6 01 00
	00		 je	 $LN2@SetKanturu

; 229  : 			 this->m_SetBaseInfo[iCount].wType != 0 )
; 230  : 		{
; 231  : 			iResult  = gObjAddMonster(this->m_SetBaseInfo[iCount].btMapNumber);

  00038	0f b6 46 fe	 movzx	 eax, BYTE PTR [esi-2]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00042	0f bf d8	 movsx	 ebx, ax
  00045	83 c4 04	 add	 esp, 4

; 232  : 
; 233  : 			if ( iResult < 0 )

  00048	85 db		 test	 ebx, ebx
  0004a	79 29		 jns	 SHORT $LN6@SetKanturu

; 234  : 			{
; 235  : 				LogAddTD("[ KANTURU ][ SetBossMapMonster ] Fail - Type:%d Map[%d]-[%d][%d]",

  0004c	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  00050	50		 push	 eax
  00051	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00054	50		 push	 eax
  00055	0f b6 46 fe	 movzx	 eax, BYTE PTR [esi-2]
  00059	50		 push	 eax
  0005a	0f b7 46 fc	 movzx	 eax, WORD PTR [esi-4]
  0005e	50		 push	 eax
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@KNPKCPLM@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 236  : 					this->m_SetBaseInfo[iCount].wType,
; 237  : 					this->m_SetBaseInfo[iCount].btMapNumber,
; 238  : 					this->m_SetBaseInfo[iCount].btX,
; 239  : 					this->m_SetBaseInfo[iCount].btY);
; 240  : 			}
; 241  : 			else

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _iRegenCount$1$[ebp]
  0006d	83 c4 14	 add	 esp, 20			; 00000014H
  00070	e9 a9 01 00 00	 jmp	 $LN2@SetKanturu
$LN6@SetKanturu:

; 242  : 			{
; 243  : 				lpObj = &gObj[iResult];

  00075	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 244  : 
; 245  : 				lpObj->m_PosNum = -1;

  0007b	83 c8 ff	 or	 eax, -1
  0007e	69 cb 40 27 00
	00		 imul	 ecx, ebx, 10048
  00084	03 f9		 add	 edi, ecx

; 246  : 				lpObj->X = this->m_SetBaseInfo[iCount].btX;
; 247  : 				lpObj->Y = this->m_SetBaseInfo[iCount].btY;

  00086	8d 97 21 01 00
	00		 lea	 edx, DWORD PTR [edi+289]

; 248  : 				lpObj->MapNumber = this->m_SetBaseInfo[iCount].btMapNumber;
; 249  : 
; 250  : 				if ( this->GetPosition(iCount, lpObj->MapNumber, lpObj->X, lpObj->Y) == FALSE )

  0008c	52		 push	 edx
  0008d	66 89 87 98 05
	00 00		 mov	 WORD PTR [edi+1432], ax
  00094	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00097	89 4d f4	 mov	 DWORD PTR tv709[ebp], ecx
  0009a	8d 8f 20 01 00
	00		 lea	 ecx, DWORD PTR [edi+288]
  000a0	88 01		 mov	 BYTE PTR [ecx], al
  000a2	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  000a6	88 02		 mov	 BYTE PTR [edx], al
  000a8	8a 46 fe	 mov	 al, BYTE PTR [esi-2]
  000ab	51		 push	 ecx
  000ac	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000af	88 87 23 01 00
	00		 mov	 BYTE PTR [edi+291], al
  000b5	0f b6 c0	 movzx	 eax, al
  000b8	50		 push	 eax
  000b9	ff 75 f0	 push	 DWORD PTR _iCount$1$[ebp]
  000bc	e8 00 00 00 00	 call	 ?GetPosition@CKanturuMonsterMng@@QAEHHFAAE0@Z ; CKanturuMonsterMng::GetPosition
  000c1	85 c0		 test	 eax, eax
  000c3	75 11		 jne	 SHORT $LN8@SetKanturu

; 251  : 				{
; 252  : 					gObjDel(iResult);

  000c5	53		 push	 ebx
  000c6	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel

; 253  : 					continue;

  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _iRegenCount$1$[ebp]
  000ce	83 c4 04	 add	 esp, 4
  000d1	e9 48 01 00 00	 jmp	 $LN2@SetKanturu
$LN8@SetKanturu:

; 254  : 				}
; 255  : 
; 256  : 				lpObj->TX = lpObj->X;
; 257  : 				lpObj->TY = lpObj->Y;

  000d6	8a 87 21 01 00
	00		 mov	 al, BYTE PTR [edi+289]
  000dc	8a 8f 20 01 00
	00		 mov	 cl, BYTE PTR [edi+288]
  000e2	88 8f 52 01 00
	00		 mov	 BYTE PTR [edi+338], cl
  000e8	88 87 53 01 00
	00		 mov	 BYTE PTR [edi+339], al

; 258  : 				lpObj->m_OldX = lpObj->X;

  000ee	88 8f 50 01 00
	00		 mov	 BYTE PTR [edi+336], cl

; 259  : 				lpObj->m_OldY = lpObj->Y;

  000f4	88 87 51 01 00
	00		 mov	 BYTE PTR [edi+337], al

; 260  : 				lpObj->StartX = lpObj->X;

  000fa	88 8f 4e 01 00
	00		 mov	 BYTE PTR [edi+334], cl

; 261  : 				lpObj->StartY = lpObj->Y;

  00100	88 87 4f 01 00
	00		 mov	 BYTE PTR [edi+335], al

; 262  : 				lpObj->m_MoveRange = this->m_SetBaseInfo[iCount].btDistance;

  00106	0f b6 46 ff	 movzx	 eax, BYTE PTR [esi-1]
  0010a	66 89 87 8e 06
	00 00		 mov	 WORD PTR [edi+1678], ax

; 263  : 				lpObj->DieRegen = FALSE;

  00111	c6 87 8a 05 00
	00 00		 mov	 BYTE PTR [edi+1418], 0

; 264  : 
; 265  : 				if ( this->m_SetBaseInfo[iCount].btDir == 0xFF )

  00118	8a 46 02	 mov	 al, BYTE PTR [esi+2]
  0011b	3c ff		 cmp	 al, 255			; 000000ffH
  0011d	75 11		 jne	 SHORT $LN9@SetKanturu

; 266  : 				{
; 267  : 					lpObj->Dir = rand()%8;

  0011f	e8 00 00 00 00	 call	 _rand
  00124	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00129	79 05		 jns	 SHORT $LN9@SetKanturu
  0012b	48		 dec	 eax
  0012c	83 c8 f8	 or	 eax, -8			; fffffff8H
  0012f	40		 inc	 eax
$LN9@SetKanturu:

; 268  : 				}
; 269  : 				else
; 270  : 				{
; 271  : 					lpObj->Dir = this->m_SetBaseInfo[iCount].btDir;

  00130	88 87 22 01 00
	00		 mov	 BYTE PTR [edi+290], al

; 272  : 				}
; 273  : 
; 274  : 				if ( gObjSetMonster(iResult, this->m_SetBaseInfo[iCount].wType) == FALSE )

  00136	0f b7 46 fc	 movzx	 eax, WORD PTR [esi-4]
  0013a	50		 push	 eax
  0013b	53		 push	 ebx
  0013c	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  00141	83 c4 08	 add	 esp, 8
  00144	85 c0		 test	 eax, eax
  00146	75 11		 jne	 SHORT $LN11@SetKanturu

; 275  : 				{
; 276  : 					gObjDel(iResult);

  00148	53		 push	 ebx
  00149	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel

; 277  : 					continue;

  0014e	8b 4d fc	 mov	 ecx, DWORD PTR _iRegenCount$1$[ebp]
  00151	83 c4 04	 add	 esp, 4
  00154	e9 c5 00 00 00	 jmp	 $LN2@SetKanturu
$LN11@SetKanturu:

; 283  : 
; 284  : 					LogAddTD("[ KANTURU ][ SetBossMapMonster ] %s(Index:%d / ObjIndex:%d) Map:%d-[%d][%d]",

  00159	8b 4d f4	 mov	 ecx, DWORD PTR tv709[ebp]
  0015c	b8 6c 01 00 00	 mov	 eax, 364		; 0000016cH
  00161	66 39 46 fc	 cmp	 WORD PTR [esi-4], ax
  00165	75 47		 jne	 SHORT $LN12@SetKanturu

; 278  : 				}
; 279  : 
; 280  : 				if ( this->m_SetBaseInfo[iCount].wType == 364 )	/// Maya Hand
; 281  : 				{
; 282  : 					this->m_iMayaObjIndex = iResult;

  00167	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  0016a	89 98 d8 07 00
	00		 mov	 DWORD PTR [eax+2008], ebx

; 283  : 
; 284  : 					LogAddTD("[ KANTURU ][ SetBossMapMonster ] %s(Index:%d / ObjIndex:%d) Map:%d-[%d][%d]",

  00170	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00176	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  0017d	50		 push	 eax
  0017e	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  00185	50		 push	 eax
  00186	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  0018d	50		 push	 eax
  0018e	0f b7 81 90 00
	00 00		 movzx	 eax, WORD PTR [ecx+144]
  00195	53		 push	 ebx
  00196	50		 push	 eax
  00197	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0019a	50		 push	 eax
  0019b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@BCLPDFKA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@
  001a0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 285  : 						gObj[iResult].Name, gObj[iResult].Class, iResult, gObj[iResult].MapNumber,
; 286  : 						gObj[iResult].X, gObj[iResult].Y);
; 287  : 
; 288  : 					continue;

  001a6	8b 4d fc	 mov	 ecx, DWORD PTR _iRegenCount$1$[ebp]
  001a9	83 c4 1c	 add	 esp, 28			; 0000001cH
  001ac	eb 70		 jmp	 SHORT $LN2@SetKanturu
$LN12@SetKanturu:

; 289  : 				}
; 290  : 
; 291  : 				if ( gObj[iResult].Type == OBJ_MONSTER )

  001ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001b3	80 7c 01 50 02	 cmp	 BYTE PTR [ecx+eax+80], 2
  001b8	75 5d		 jne	 SHORT $LN13@SetKanturu

; 292  : 				{
; 293  : 					this->m_KanturuMonster.AddObj(iResult);

  001ba	8b 7d f8	 mov	 edi, DWORD PTR _this$1$[ebp]
  001bd	53		 push	 ebx
  001be	8d 8f e0 07 00
	00		 lea	 ecx, DWORD PTR [edi+2016]
  001c4	e8 00 00 00 00	 call	 ?AddObj@CKanturuObjInfo@@QAEHH@Z ; CKanturuObjInfo::AddObj

; 294  : 					this->m_iMaxRegenMonsterCount++;
; 295  : 					this->m_iAliveMonsterCount++;

  001c9	ff 87 6c 14 00
	00		 inc	 DWORD PTR [edi+5228]
  001cf	ff 87 68 14 00
	00		 inc	 DWORD PTR [edi+5224]

; 296  : 
; 297  : 					LogAddTD("[ KANTURU ][ SetBossMapMonster ] Count:%d %s(Index:%d / ObjIndex:%d) Map:%d-[%d][%d]",

  001d5	8b 4d f4	 mov	 ecx, DWORD PTR tv709[ebp]
  001d8	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001de	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  001e5	50		 push	 eax
  001e6	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  001ed	50		 push	 eax
  001ee	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  001f5	50		 push	 eax
  001f6	0f b7 81 90 00
	00 00		 movzx	 eax, WORD PTR [ecx+144]
  001fd	53		 push	 ebx
  001fe	50		 push	 eax
  001ff	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00202	50		 push	 eax
  00203	ff b7 6c 14 00
	00		 push	 DWORD PTR [edi+5228]
  00209	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@JCBLMGAA@?$FL?5KANTURU?5?$FN?$FL?5SetBossMapMonster?5?$FN@
  0020e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00214	83 c4 20	 add	 esp, 32			; 00000020H
$LN13@SetKanturu:

; 298  : 						this->m_iAliveMonsterCount, gObj[iResult].Name, gObj[iResult].Class, iResult,
; 299  : 						gObj[iResult].MapNumber,gObj[iResult].X, gObj[iResult].Y);
; 300  : 				}
; 301  : 
; 302  : 				iRegenCount++;

  00217	8b 4d fc	 mov	 ecx, DWORD PTR _iRegenCount$1$[ebp]
  0021a	41		 inc	 ecx
  0021b	89 4d fc	 mov	 DWORD PTR _iRegenCount$1$[ebp], ecx
$LN2@SetKanturu:

; 225  : 	
; 226  : 	for ( int iCount=0;iCount<MAX_KANTURU_MONSTER;iCount++)

  0021e	8b 45 f0	 mov	 eax, DWORD PTR _iCount$1$[ebp]
  00221	83 c6 0a	 add	 esi, 10			; 0000000aH
  00224	40		 inc	 eax
  00225	89 45 f0	 mov	 DWORD PTR _iCount$1$[ebp], eax
  00228	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  0022d	0f 8c ed fd ff
	ff		 jl	 $LL4@SetKanturu

; 303  : 			}
; 304  : 		}
; 305  : 	}
; 306  : 
; 307  : 	return iRegenCount;

  00233	5f		 pop	 edi
  00234	5e		 pop	 esi
  00235	8b c1		 mov	 eax, ecx
  00237	5b		 pop	 ebx

; 308  : }

  00238	8b e5		 mov	 esp, ebp
  0023a	5d		 pop	 ebp
  0023b	c2 04 00	 ret	 4
?SetKanturuMonster@CKanturuMonsterMng@@QAEHH@Z ENDP	; CKanturuMonsterMng::SetKanturuMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp
;	COMDAT ?SetMonsterSetBaseInfo@CKanturuMonsterMng@@QAEXHEGEEEEE@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_btGroup$ = 12						; size = 1
_wType$ = 16						; size = 2
_btMapNumber$ = 20					; size = 1
_btDistance$ = 24					; size = 1
_btX$ = 28						; size = 1
_btY$ = 32						; size = 1
_btDir$ = 36						; size = 1
?SetMonsterSetBaseInfo@CKanturuMonsterMng@@QAEXHEGEEEEE@Z PROC ; CKanturuMonsterMng::SetMonsterSetBaseInfo, COMDAT
; _this$ = ecx

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 	this->m_SetBaseInfo[iIndex].btGroup = btGroup;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00006	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00009	8d 0c 41	 lea	 ecx, DWORD PTR [ecx+eax*2]
  0000c	8a 45 0c	 mov	 al, BYTE PTR _btGroup$[ebp]
  0000f	88 41 08	 mov	 BYTE PTR [ecx+8], al

; 208  : 	this->m_SetBaseInfo[iIndex].wType = wType;

  00012	66 8b 45 10	 mov	 ax, WORD PTR _wType$[ebp]
  00016	66 89 41 0a	 mov	 WORD PTR [ecx+10], ax

; 209  : 	this->m_SetBaseInfo[iIndex].btMapNumber = btMapNumber;

  0001a	8a 45 14	 mov	 al, BYTE PTR _btMapNumber$[ebp]
  0001d	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 210  : 	this->m_SetBaseInfo[iIndex].btDistance = btDistance;

  00020	8a 45 18	 mov	 al, BYTE PTR _btDistance$[ebp]
  00023	88 41 0d	 mov	 BYTE PTR [ecx+13], al

; 211  : 	this->m_SetBaseInfo[iIndex].btX = btX;

  00026	8a 45 1c	 mov	 al, BYTE PTR _btX$[ebp]
  00029	88 41 0e	 mov	 BYTE PTR [ecx+14], al

; 212  : 	this->m_SetBaseInfo[iIndex].btY = btY;

  0002c	8a 45 20	 mov	 al, BYTE PTR _btY$[ebp]
  0002f	88 41 0f	 mov	 BYTE PTR [ecx+15], al

; 213  : 	this->m_SetBaseInfo[iIndex].btDir = btDir;

  00032	8a 45 24	 mov	 al, BYTE PTR _btDir$[ebp]
  00035	88 41 10	 mov	 BYTE PTR [ecx+16], al

; 214  : }

  00038	5d		 pop	 ebp
  00039	c2 20 00	 ret	 32			; 00000020H
?SetMonsterSetBaseInfo@CKanturuMonsterMng@@QAEXHEGEEEEE@Z ENDP ; CKanturuMonsterMng::SetMonsterSetBaseInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp
;	COMDAT ?LoadData@CKanturuMonsterMng@@QAEHPAD@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
_btGroup$2 = -40					; size = 1
_btMapNumber$3 = -36					; size = 1
_btDistance$4 = -32					; size = 1
_btX$5 = -28						; size = 1
_btY$6 = -24						; size = 1
_btDir$7 = -20						; size = 1
__$EHRec$ = -16						; size = 16
_lpszFileName$ = 8					; size = 4
?LoadData@CKanturuMonsterMng@@QAEHPAD@Z PROC		; CKanturuMonsterMng::LoadData, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 d4	 mov	 DWORD PTR _this$[ebp], esi

; 82   : 	this->m_bFileDataLoad = FALSE;
; 83   : 
; 84   : 	if ( !lpszFileName || !strcmp(lpszFileName , "") )

  00030	8b 5d 08	 mov	 ebx, DWORD PTR _lpszFileName$[ebp]
  00033	c7 86 dc 07 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+2012], 0
  0003d	85 db		 test	 ebx, ebx
  0003f	0f 84 2d 02 00
	00		 je	 $LN7@LoadData
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0004a	8b c3		 mov	 eax, ebx
  0004c	0f 1f 40 00	 npad	 4
$LL29@LoadData:
  00050	8a 10		 mov	 dl, BYTE PTR [eax]
  00052	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00054	75 1a		 jne	 SHORT $LN30@LoadData
  00056	84 d2		 test	 dl, dl
  00058	74 12		 je	 SHORT $LN31@LoadData
  0005a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0005d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00060	75 0e		 jne	 SHORT $LN30@LoadData
  00062	83 c0 02	 add	 eax, 2
  00065	83 c1 02	 add	 ecx, 2
  00068	84 d2		 test	 dl, dl
  0006a	75 e4		 jne	 SHORT $LL29@LoadData
$LN31@LoadData:
  0006c	33 c0		 xor	 eax, eax
  0006e	eb 05		 jmp	 SHORT $LN32@LoadData
$LN30@LoadData:
  00070	1b c0		 sbb	 eax, eax
  00072	83 c8 01	 or	 eax, 1
$LN32@LoadData:
  00075	85 c0		 test	 eax, eax
  00077	0f 84 f5 01 00
	00		 je	 $LN7@LoadData

; 88   : 	}
; 89   : 
; 90   : 	try
; 91   : 	{
; 92   : 		
; 93   : 		SMDFile = fopen(lpszFileName, "r");

  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00082	53		 push	 ebx
  00083	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0008a	e8 00 00 00 00	 call	 _fopen
  0008f	83 c4 08	 add	 esp, 8
  00092	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 94   : 
; 95   : 		if ( SMDFile == NULL )

  00097	85 c0		 test	 eax, eax
  00099	75 19		 jne	 SHORT $LN9@LoadData

; 96   : 		{
; 97   : 			DWORD dwError = GetLastError();

  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 98   : 			MsgBox("[ KANTURU ][ MonsterSetBase ] - Can't Open %s ", lpszFileName);

  000a1	53		 push	 ebx
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@DNGFMEFC@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
  000a7	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000ac	83 c4 08	 add	 esp, 8

; 99   : 			return FALSE;

  000af	e9 cb 01 00 00	 jmp	 $LN44@LoadData
$LN9@LoadData:

; 100  : 		}
; 101  : 
; 102  : 		this->ResetLoadData();

  000b4	8b ce		 mov	 ecx, esi
  000b6	e8 00 00 00 00	 call	 ?ResetLoadData@CKanturuMonsterMng@@QAEXXZ ; CKanturuMonsterMng::ResetLoadData
  000bb	eb 06		 jmp	 SHORT $LN2@LoadData
  000bd	0f 1f 00	 npad	 3
$LL42@LoadData:
  000c0	8b 5d 08	 mov	 ebx, DWORD PTR _lpszFileName$[ebp]
$LN2@LoadData:

; 103  : 	
; 104  : 		enum SMDToken Token;
; 105  : 		int iType = -1;
; 106  : 		BYTE btGroup = 0;
; 107  : 		WORD wType = 0;
; 108  : 		BYTE btMapNumber = 0;
; 109  : 		BYTE btDistance = 0;
; 110  : 		BYTE btX = 0;
; 111  : 		BYTE btY = 0;
; 112  : 		BYTE btDir = 0;
; 113  : 
; 114  : 		while ( true )
; 115  : 		{
; 116  : 			Token = GetToken();

  000c3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 117  : 			
; 118  : 			if ( Token == END )

  000c8	83 f8 02	 cmp	 eax, 2
  000cb	75 40		 jne	 SHORT $LN10@LoadData

; 188  : 
; 189  : 		fclose(SMDFile);

  000cd	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  000d3	e8 00 00 00 00	 call	 _fclose

; 190  : 		LogAddC(2, "[ KANTURU ][ MonsterSetBase ] - %s file is Loaded",

  000d8	53		 push	 ebx
  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@GFEEBCLE@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
  000de	6a 02		 push	 2
  000e0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 191  : 			lpszFileName);
; 192  : 
; 193  : 		this->m_bFileDataLoad = TRUE;

  000e6	c7 86 dc 07 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+2012], 1
  000f0	83 c4 10	 add	 esp, 16			; 00000010H

; 199  : 
; 200  : 	return this->m_bFileDataLoad;

  000f3	8b 86 dc 07 00
	00		 mov	 eax, DWORD PTR [esi+2012]

; 201  : }

  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00103	59		 pop	 ecx
  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c2 04 00	 ret	 4
$LN10@LoadData:

; 119  : 			{
; 120  : 				break;
; 121  : 			}
; 122  : 
; 123  : 			iType = (int)TokenNumber;

  0010d	f3 0f 2c 1d 00
	00 00 00	 cvttss2si ebx, DWORD PTR ?TokenNumber@@3MA
$LL4@LoadData:

; 124  : 
; 125  : 			while ( true )
; 126  : 			{
; 127  : 				if ( iType == 0 )
; 128  : 				{
; 129  : 					btGroup = 0;
; 130  : 					wType = 0;
; 131  : 					btMapNumber = 0;
; 132  : 					btDistance = 0;
; 133  : 					btX = 0;
; 134  : 					btY = 0;
; 135  : 					btDir = 0;
; 136  : 
; 137  : 					Token = GetToken();

  00115	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 138  : 
; 139  : 					if ( !strcmp("end", TokenString))

  0011a	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0011f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00124	85 db		 test	 ebx, ebx
  00126	0f 85 14 01 00
	00		 jne	 $LL37@LoadData
  0012c	0f 1f 40 00	 npad	 4
$LL33@LoadData:
  00130	8a 10		 mov	 dl, BYTE PTR [eax]
  00132	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00134	75 1a		 jne	 SHORT $LN34@LoadData
  00136	84 d2		 test	 dl, dl
  00138	74 12		 je	 SHORT $LN35@LoadData
  0013a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0013d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00140	75 0e		 jne	 SHORT $LN34@LoadData
  00142	83 c0 02	 add	 eax, 2
  00145	83 c1 02	 add	 ecx, 2
  00148	84 d2		 test	 dl, dl
  0014a	75 e4		 jne	 SHORT $LL33@LoadData
$LN35@LoadData:
  0014c	33 c0		 xor	 eax, eax
  0014e	eb 05		 jmp	 SHORT $LN36@LoadData
$LN34@LoadData:
  00150	1b c0		 sbb	 eax, eax
  00152	83 c8 01	 or	 eax, 1
$LN36@LoadData:
  00155	85 c0		 test	 eax, eax
  00157	0f 84 63 ff ff
	ff		 je	 $LL42@LoadData

; 140  : 					{
; 141  : 						break;
; 142  : 					}
; 143  : 
; 144  : 					btGroup = (BYTE)TokenNumber;

  0015d	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00165	88 45 d8	 mov	 BYTE PTR _btGroup$2[ebp], al

; 145  : 
; 146  : 					Token = GetToken();

  00168	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 147  : 					wType = (WORD)TokenNumber;

  0016d	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00175	0f b7 f8	 movzx	 edi, ax

; 148  : 
; 149  : 					Token = GetToken();

  00178	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 150  : 					btMapNumber = (BYTE)TokenNumber;

  0017d	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00185	88 45 dc	 mov	 BYTE PTR _btMapNumber$3[ebp], al

; 151  : 
; 152  : 					Token = GetToken();

  00188	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 153  : 					btDistance = (BYTE)TokenNumber;

  0018d	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00195	88 45 e0	 mov	 BYTE PTR _btDistance$4[ebp], al

; 154  : 
; 155  : 					Token = GetToken();

  00198	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 156  : 					btX = (BYTE)TokenNumber;

  0019d	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001a5	88 45 e4	 mov	 BYTE PTR _btX$5[ebp], al

; 157  : 
; 158  : 					Token = GetToken();

  001a8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 159  : 					btY = (BYTE)TokenNumber;

  001ad	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001b5	88 45 e8	 mov	 BYTE PTR _btY$6[ebp], al

; 160  : 
; 161  : 					Token = GetToken();

  001b8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 162  : 					btDir = (BYTE)TokenNumber;

  001bd	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001c5	88 45 ec	 mov	 BYTE PTR _btDir$7[ebp], al

; 163  : 
; 164  : 					if ( this->m_iMaxMonsterCount < 0 ||

  001c8	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  001cb	85 c0		 test	 eax, eax
  001cd	78 2a		 js	 SHORT $LN15@LoadData
  001cf	3d c8 00 00 00	 cmp	 eax, 200		; 000000c8H
  001d4	7d 23		 jge	 SHORT $LN15@LoadData

; 171  : 					}
; 172  : 
; 173  : 					this->SetMonsterSetBaseInfo(this->m_iMaxMonsterCount, btGroup, wType,

  001d6	ff 75 ec	 push	 DWORD PTR _btDir$7[ebp]
  001d9	8b ce		 mov	 ecx, esi
  001db	ff 75 e8	 push	 DWORD PTR _btY$6[ebp]
  001de	ff 75 e4	 push	 DWORD PTR _btX$5[ebp]
  001e1	ff 75 e0	 push	 DWORD PTR _btDistance$4[ebp]
  001e4	ff 75 dc	 push	 DWORD PTR _btMapNumber$3[ebp]
  001e7	57		 push	 edi
  001e8	ff 75 d8	 push	 DWORD PTR _btGroup$2[ebp]
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 ?SetMonsterSetBaseInfo@CKanturuMonsterMng@@QAEXHEGEEEEE@Z ; CKanturuMonsterMng::SetMonsterSetBaseInfo

; 174  : 						btMapNumber, btDistance, btX, btY, btDir);
; 175  : 					this->m_iMaxMonsterCount++;

  001f1	ff 46 04	 inc	 DWORD PTR [esi+4]

; 176  : 				}
; 177  : 				else

  001f4	e9 1c ff ff ff	 jmp	 $LL4@LoadData
$LN15@LoadData:

; 165  : 						 this->m_iMaxMonsterCount >= MAX_KANTURU_MONSTER )
; 166  : 					{
; 167  : 						MsgBox("[ KANTURU ][ MonsterSetBase ] - Exceed Max Info Count (%d)",

  001f9	50		 push	 eax
  001fa	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@GKPAFDBA@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
  001ff	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00204	83 c4 08	 add	 esp, 8

; 168  : 							this->m_iMaxMonsterCount);
; 169  : 
; 170  : 						break;

  00207	e9 b4 fe ff ff	 jmp	 $LL42@LoadData
__catch$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z$0:

; 194  : 	}	// __try
; 195  : 	catch ( DWORD)
; 196  : 	{
; 197  : 		MsgBox("[ KANTURU ][ MonsterSetBase ] Loading Exception Error (%s) File. ", lpszFileName);

  0020c	ff 75 08	 push	 DWORD PTR _lpszFileName$[ebp]
  0020f	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@LDGKJEHF@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5Lo@
  00214	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00219	83 c4 08	 add	 esp, 8

; 198  : 	}

  0021c	b8 00 00 00 00	 mov	 eax, $LN41@LoadData
  00221	c3		 ret	 0
$LN41@LoadData:
  00222	8b 75 d4	 mov	 esi, DWORD PTR _this$[ebp]

; 199  : 
; 200  : 	return this->m_bFileDataLoad;

  00225	8b 86 dc 07 00
	00		 mov	 eax, DWORD PTR [esi+2012]

; 201  : }

  0022b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0022e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00235	59		 pop	 ecx
  00236	5f		 pop	 edi
  00237	5e		 pop	 esi
  00238	5b		 pop	 ebx
  00239	8b e5		 mov	 esp, ebp
  0023b	5d		 pop	 ebp
  0023c	c2 04 00	 ret	 4
  0023f	90		 npad	 1
$LL37@LoadData:

; 178  : 				{
; 179  : 					Token = GetToken();
; 180  : 
; 181  : 					if ( !strcmp("end", TokenString))

  00240	8a 10		 mov	 dl, BYTE PTR [eax]
  00242	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00244	75 1a		 jne	 SHORT $LN38@LoadData
  00246	84 d2		 test	 dl, dl
  00248	74 12		 je	 SHORT $LN39@LoadData
  0024a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0024d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00250	75 0e		 jne	 SHORT $LN38@LoadData
  00252	83 c0 02	 add	 eax, 2
  00255	83 c1 02	 add	 ecx, 2
  00258	84 d2		 test	 dl, dl
  0025a	75 e4		 jne	 SHORT $LL37@LoadData
$LN39@LoadData:
  0025c	33 c0		 xor	 eax, eax
  0025e	eb 05		 jmp	 SHORT $LN40@LoadData
$LN38@LoadData:
  00260	1b c0		 sbb	 eax, eax
  00262	83 c8 01	 or	 eax, 1
$LN40@LoadData:
  00265	85 c0		 test	 eax, eax
  00267	0f 85 a8 fe ff
	ff		 jne	 $LL4@LoadData

; 182  : 					{
; 183  : 						break;
; 184  : 					}
; 185  : 				}
; 186  : 			}	// while ( true )
; 187  : 		}	// while ( true )

  0026d	e9 4e fe ff ff	 jmp	 $LL42@LoadData
$LN7@LoadData:

; 85   : 	{
; 86   : 		MsgBox("[ KANTURU ][ MonsterSetBase ] - File load error : File Name Error");

  00272	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@CJGCKAIN@?$FL?5KANTURU?5?$FN?$FL?5MonsterSetBase?5?$FN?5?9?5@
  00277	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0027c	83 c4 04	 add	 esp, 4
$LN44@LoadData:

; 87   : 		return FALSE;

  0027f	33 c0		 xor	 eax, eax

; 201  : }

  00281	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00284	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0028b	59		 pop	 ecx
  0028c	5f		 pop	 edi
  0028d	5e		 pop	 esi
  0028e	5b		 pop	 ebx
  0028f	8b e5		 mov	 esp, ebp
  00291	5d		 pop	 ebp
  00292	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadData@CKanturuMonsterMng@@QAEHPAD@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadData@CKanturuMonsterMng@@QAEHPAD@Z ENDP		; CKanturuMonsterMng::LoadData
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp
;	COMDAT ?MonsterDie@CKanturuMonsterMng@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?MonsterDie@CKanturuMonsterMng@@QAEXH@Z PROC		; CKanturuMonsterMng::MonsterDie, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 67   : 	LPOBJ lpObj = &gObj[iIndex];
; 68   : 
; 69   : 	for ( int iCount=0;iCount<this->m_KanturuMonster.GetCount();iCount++)

  00004	8b b1 e4 07 00
	00		 mov	 esi, DWORD PTR [ecx+2020]
  0000a	33 d2		 xor	 edx, edx
  0000c	85 f6		 test	 esi, esi
  0000e	7e 29		 jle	 SHORT $LN3@MonsterDie
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _iIndex$[ebp]
  00014	8d 81 e8 07 00
	00		 lea	 eax, DWORD PTR [ecx+2024]
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL4@MonsterDie:

; 70   : 	{
; 71   : 		if ( this->m_KanturuMonster.m_iObjIndex[iCount] == iIndex )

  00020	39 38		 cmp	 DWORD PTR [eax], edi
  00022	74 0e		 je	 SHORT $LN10@MonsterDie

; 67   : 	LPOBJ lpObj = &gObj[iIndex];
; 68   : 
; 69   : 	for ( int iCount=0;iCount<this->m_KanturuMonster.GetCount();iCount++)

  00024	42		 inc	 edx
  00025	83 c0 04	 add	 eax, 4
  00028	3b d6		 cmp	 edx, esi
  0002a	7c f4		 jl	 SHORT $LL4@MonsterDie
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 74   : 			return;
; 75   : 		}
; 76   : 	}
; 77   : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
$LN10@MonsterDie:

; 72   : 		{
; 73   : 			this->m_iAliveMonsterCount--;

  00032	ff 89 6c 14 00
	00		 dec	 DWORD PTR [ecx+5228]
  00038	5f		 pop	 edi
$LN3@MonsterDie:
  00039	5e		 pop	 esi

; 74   : 			return;
; 75   : 		}
; 76   : 	}
; 77   : }

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?MonsterDie@CKanturuMonsterMng@@QAEXH@Z ENDP		; CKanturuMonsterMng::MonsterDie
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp
; File c:\users\michel\desktop\source\gameserver\source\kanturuobjinfo.h
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp
; File c:\users\michel\desktop\source\gameserver\source\kanturuobjinfo.h
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp
;	COMDAT ?ResetRegenMonsterObjData@CKanturuMonsterMng@@QAEXXZ
_TEXT	SEGMENT
?ResetRegenMonsterObjData@CKanturuMonsterMng@@QAEXXZ PROC ; CKanturuMonsterMng::ResetRegenMonsterObjData, COMDAT
; _this$ = ecx

; 43   : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 44   : 	for ( int iCount=0;iCount<this->m_KanturuMonster.GetCount();iCount++)

  00004	33 f6		 xor	 esi, esi
  00006	57		 push	 edi
  00007	39 b3 e4 07 00
	00		 cmp	 DWORD PTR [ebx+2020], esi
  0000d	7e 22		 jle	 SHORT $LN3@ResetRegen
  0000f	8d bb e8 07 00
	00		 lea	 edi, DWORD PTR [ebx+2024]
$LL4@ResetRegen:

; 45   : 	{
; 46   : 		if ( this->m_KanturuMonster.m_iObjIndex[iCount] != -1 )

  00015	8b 07		 mov	 eax, DWORD PTR [edi]
  00017	83 f8 ff	 cmp	 eax, -1
  0001a	74 09		 je	 SHORT $LN2@ResetRegen

; 47   : 		{
; 48   : 			gObjDel(this->m_KanturuMonster.m_iObjIndex[iCount]);

  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00022	83 c4 04	 add	 esp, 4
$LN2@ResetRegen:

; 44   : 	for ( int iCount=0;iCount<this->m_KanturuMonster.GetCount();iCount++)

  00025	46		 inc	 esi
  00026	83 c7 04	 add	 edi, 4
  00029	3b b3 e4 07 00
	00		 cmp	 esi, DWORD PTR [ebx+2020]
  0002f	7c e4		 jl	 SHORT $LL4@ResetRegen
$LN3@ResetRegen:

; 49   : 		}
; 50   : 	}
; 51   : 
; 52   : 	if ( this->m_iMayaObjIndex != -1 )

  00031	8b 83 d8 07 00
	00		 mov	 eax, DWORD PTR [ebx+2008]
  00037	83 f8 ff	 cmp	 eax, -1
  0003a	74 09		 je	 SHORT $LN6@ResetRegen

; 53   : 	{
; 54   : 		gObjDel(this->m_iMayaObjIndex);

  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00042	83 c4 04	 add	 esp, 4
$LN6@ResetRegen:
; File c:\users\michel\desktop\source\gameserver\source\kanturuobjinfo.h

; 23   : 			this->m_iObjIndex[iCount]=0;

  00045	33 c0		 xor	 eax, eax
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp

; 57   : 	this->m_KanturuMonster.Reset();

  00047	8d bb e8 07 00
	00		 lea	 edi, DWORD PTR [ebx+2024]
; File c:\users\michel\desktop\source\gameserver\source\kanturuobjinfo.h

; 23   : 			this->m_iObjIndex[iCount]=0;

  0004d	b9 20 03 00 00	 mov	 ecx, 800		; 00000320H
  00052	f3 ab		 rep stosd

; 24   : 		}
; 25   : 
; 26   : 		this->m_iObjCount=0;

  00054	89 83 e4 07 00
	00		 mov	 DWORD PTR [ebx+2020], eax
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp

; 58   : 	this->m_iMaxRegenMonsterCount = 0;

  0005c	89 83 68 14 00
	00		 mov	 DWORD PTR [ebx+5224], eax

; 59   : 	this->m_iAliveMonsterCount = 0;

  00062	89 83 6c 14 00
	00		 mov	 DWORD PTR [ebx+5228], eax

; 60   : 	this->m_iMayaObjIndex = -1;

  00068	c7 83 d8 07 00
	00 ff ff ff ff	 mov	 DWORD PTR [ebx+2008], -1
  00072	5b		 pop	 ebx

; 61   : }

  00073	c3		 ret	 0
?ResetRegenMonsterObjData@CKanturuMonsterMng@@QAEXXZ ENDP ; CKanturuMonsterMng::ResetRegenMonsterObjData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp
;	COMDAT ?ResetLoadData@CKanturuMonsterMng@@QAEXXZ
_TEXT	SEGMENT
?ResetLoadData@CKanturuMonsterMng@@QAEXXZ PROC		; CKanturuMonsterMng::ResetLoadData, COMDAT
; _this$ = ecx

; 31   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 32   : 	for ( int iCount=0;iCount<MAX_KANTURU_MONSTER;iCount++)
; 33   : 	{
; 34   : 		memset(&this->m_SetBaseInfo[iCount], -1, sizeof(this->m_SetBaseInfo[iCount]));

  00003	68 d0 07 00 00	 push	 2000			; 000007d0H
  00008	68 ff 00 00 00	 push	 255			; 000000ffH
  0000d	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _memset
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 35   : 	}
; 36   : 
; 37   : 	this->m_iMaxMonsterCount = 0;

  00019	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00020	5e		 pop	 esi

; 38   : }

  00021	c3		 ret	 0
?ResetLoadData@CKanturuMonsterMng@@QAEXXZ ENDP		; CKanturuMonsterMng::ResetLoadData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp
; File c:\users\michel\desktop\source\gameserver\source\kanturuobjinfo.h
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp
;	COMDAT ??1CKanturuMonsterMng@@UAE@XZ
_TEXT	SEGMENT
??1CKanturuMonsterMng@@UAE@XZ PROC			; CKanturuMonsterMng::~CKanturuMonsterMng, COMDAT
; _this$ = ecx

; 25   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CKanturuMonsterMng@@6B@
; File c:\users\michel\desktop\source\gameserver\source\kanturuobjinfo.h

; 17   : 	virtual ~CKanturuObjInfo(){return;}

  00006	c7 81 e0 07 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2016], OFFSET ??_7CKanturuObjInfo@@6B@
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp

; 27   : }

  00010	c3		 ret	 0
??1CKanturuMonsterMng@@UAE@XZ ENDP			; CKanturuMonsterMng::~CKanturuMonsterMng
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp
; File c:\users\michel\desktop\source\gameserver\source\kanturuobjinfo.h
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp
;	COMDAT ??0CKanturuMonsterMng@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CKanturuMonsterMng@@QAE@XZ PROC			; CKanturuMonsterMng::CKanturuMonsterMng, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CKanturuMonsterMng@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CKanturuMonsterMng@@6B@
  00030	8d be e8 07 00
	00		 lea	 edi, DWORD PTR [esi+2024]
; File c:\users\michel\desktop\source\gameserver\source\kanturuobjinfo.h

; 23   : 			this->m_iObjIndex[iCount]=0;

  00036	33 c0		 xor	 eax, eax

; 13   : 	{

  00038	c7 86 e0 07 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+2016], OFFSET ??_7CKanturuObjInfo@@6B@

; 23   : 			this->m_iObjIndex[iCount]=0;

  00042	b9 20 03 00 00	 mov	 ecx, 800		; 00000320H
  00047	f3 ab		 rep stosd

; 24   : 		}
; 25   : 
; 26   : 		this->m_iObjCount=0;

  00049	89 86 e4 07 00
	00		 mov	 DWORD PTR [esi+2020], eax
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp

; 20   : 	this->ResetLoadData();

  0004f	8b ce		 mov	 ecx, esi
  00051	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax
  00054	e8 00 00 00 00	 call	 ?ResetLoadData@CKanturuMonsterMng@@QAEXXZ ; CKanturuMonsterMng::ResetLoadData

; 21   : 	this->ResetRegenMonsterObjData();

  00059	8b ce		 mov	 ecx, esi
  0005b	e8 00 00 00 00	 call	 ?ResetRegenMonsterObjData@CKanturuMonsterMng@@QAEXXZ ; CKanturuMonsterMng::ResetRegenMonsterObjData

; 22   : }

  00060	8b c6		 mov	 eax, esi
  00062	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00065	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006c	59		 pop	 ecx
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CKanturuMonsterMng@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 e0 07 00
	00		 add	 ecx, 2016		; 000007e0H
  00009	e9 00 00 00 00	 jmp	 ??1CKanturuObjInfo@@UAE@XZ ; CKanturuObjInfo::~CKanturuObjInfo
__ehhandler$??0CKanturuMonsterMng@@QAE@XZ:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CKanturuMonsterMng@@QAE@XZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CKanturuMonsterMng@@QAE@XZ ENDP			; CKanturuMonsterMng::CKanturuMonsterMng
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturuobjinfo.h
;	COMDAT ??_GCKanturuObjInfo@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCKanturuObjInfo@@UAEPAXI@Z PROC			; CKanturuObjInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 17   : 	virtual ~CKanturuObjInfo(){return;}

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CKanturuObjInfo@@6B@
  00010	74 0e		 je	 SHORT $LN7@scalar
  00012	68 88 0c 00 00	 push	 3208			; 00000c88H
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001d	83 c4 08	 add	 esp, 8
$LN7@scalar:
  00020	8b c6		 mov	 eax, esi
  00022	5e		 pop	 esi
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??_GCKanturuObjInfo@@UAEPAXI@Z ENDP			; CKanturuObjInfo::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturuobjinfo.h
;	COMDAT ?GetCount@CKanturuObjInfo@@QAEHXZ
_TEXT	SEGMENT
?GetCount@CKanturuObjInfo@@QAEHXZ PROC			; CKanturuObjInfo::GetCount, COMDAT
; _this$ = ecx

; 44   : 		return this->m_iObjCount;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 45   : 	}

  00003	c3		 ret	 0
?GetCount@CKanturuObjInfo@@QAEHXZ ENDP			; CKanturuObjInfo::GetCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturuobjinfo.h
;	COMDAT ?AddObj@CKanturuObjInfo@@QAEHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?AddObj@CKanturuObjInfo@@QAEHH@Z PROC			; CKanturuObjInfo::AddObj, COMDAT
; _this$ = ecx

; 30   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 		if ( this->m_iObjCount >= MAX_KANTURU_OBJ_INDEX )

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	81 fa 20 03 00
	00		 cmp	 edx, 800		; 00000320H
  0000c	7c 06		 jl	 SHORT $LN2@AddObj

; 32   : 		{
; 33   : 			return FALSE;

  0000e	33 c0		 xor	 eax, eax

; 40   : 	}

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
$LN2@AddObj:

; 34   : 		}
; 35   : 
; 36   : 		this->m_iObjIndex[this->m_iObjCount] = iIndex;

  00014	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00017	89 44 91 08	 mov	 DWORD PTR [ecx+edx*4+8], eax

; 37   : 		this->m_iObjCount++;
; 38   : 
; 39   : 		return TRUE;

  0001b	b8 01 00 00 00	 mov	 eax, 1
  00020	ff 41 04	 inc	 DWORD PTR [ecx+4]

; 40   : 	}

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?AddObj@CKanturuObjInfo@@QAEHH@Z ENDP			; CKanturuObjInfo::AddObj
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturuobjinfo.h
;	COMDAT ?Reset@CKanturuObjInfo@@QAEXXZ
_TEXT	SEGMENT
?Reset@CKanturuObjInfo@@QAEXXZ PROC			; CKanturuObjInfo::Reset, COMDAT
; _this$ = ecx

; 20   : 	{

  00000	8b d1		 mov	 edx, ecx

; 21   : 		for ( int iCount=0;iCount<MAX_KANTURU_OBJ_INDEX;iCount++)
; 22   : 		{
; 23   : 			this->m_iObjIndex[iCount]=0;

  00002	33 c0		 xor	 eax, eax
  00004	57		 push	 edi
  00005	b9 20 03 00 00	 mov	 ecx, 800		; 00000320H
  0000a	8d 7a 08	 lea	 edi, DWORD PTR [edx+8]
  0000d	f3 ab		 rep stosd

; 24   : 		}
; 25   : 
; 26   : 		this->m_iObjCount=0;

  0000f	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00012	5f		 pop	 edi

; 27   : 	}

  00013	c3		 ret	 0
?Reset@CKanturuObjInfo@@QAEXXZ ENDP			; CKanturuObjInfo::Reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturuobjinfo.h
;	COMDAT ??1CKanturuObjInfo@@UAE@XZ
_TEXT	SEGMENT
??1CKanturuObjInfo@@UAE@XZ PROC				; CKanturuObjInfo::~CKanturuObjInfo, COMDAT
; _this$ = ecx

; 17   : 	virtual ~CKanturuObjInfo(){return;}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CKanturuObjInfo@@6B@
  00006	c3		 ret	 0
??1CKanturuObjInfo@@UAE@XZ ENDP				; CKanturuObjInfo::~CKanturuObjInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturuobjinfo.h
;	COMDAT ??0CKanturuObjInfo@@QAE@XZ
_TEXT	SEGMENT
??0CKanturuObjInfo@@QAE@XZ PROC				; CKanturuObjInfo::CKanturuObjInfo, COMDAT
; _this$ = ecx

; 12   : 	CKanturuObjInfo()

  00000	8b d1		 mov	 edx, ecx

; 16   : 
; 17   : 	virtual ~CKanturuObjInfo(){return;}
; 18   : 
; 19   : 	void Reset()
; 20   : 	{
; 21   : 		for ( int iCount=0;iCount<MAX_KANTURU_OBJ_INDEX;iCount++)
; 22   : 		{
; 23   : 			this->m_iObjIndex[iCount]=0;

  00002	33 c0		 xor	 eax, eax
  00004	57		 push	 edi
  00005	b9 20 03 00 00	 mov	 ecx, 800		; 00000320H

; 13   : 	{

  0000a	8d 7a 08	 lea	 edi, DWORD PTR [edx+8]
  0000d	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7CKanturuObjInfo@@6B@

; 16   : 
; 17   : 	virtual ~CKanturuObjInfo(){return;}
; 18   : 
; 19   : 	void Reset()
; 20   : 	{
; 21   : 		for ( int iCount=0;iCount<MAX_KANTURU_OBJ_INDEX;iCount++)
; 22   : 		{
; 23   : 			this->m_iObjIndex[iCount]=0;

  00013	f3 ab		 rep stosd

; 24   : 		}
; 25   : 
; 26   : 		this->m_iObjCount=0;

  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 14   : 		this->Reset();
; 15   : 	}

  00018	8b c2		 mov	 eax, edx
  0001a	5f		 pop	 edi
  0001b	c3		 ret	 0
??0CKanturuObjInfo@@QAE@XZ ENDP				; CKanturuObjInfo::CKanturuObjInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\kanturumonstermng.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 366  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
