; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\Minimap.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0stMemberPosInfo@@QAE@XZ			; stMemberPosInfo::stMemberPosInfo
PUBLIC	??0PMSG_MEMBER_POS_INFO_SEND@@QAE@XZ		; PMSG_MEMBER_POS_INFO_SEND::PMSG_MEMBER_POS_INFO_SEND
PUBLIC	??0Minimap@@QAE@XZ				; Minimap::Minimap
PUBLIC	??1Minimap@@UAE@XZ				; Minimap::~Minimap
PUBLIC	?Init@Minimap@@QAEXXZ				; Minimap::Init
PUBLIC	?Load@Minimap@@QAEXXZ				; Minimap::Load
PUBLIC	?Read@Minimap@@QAEXPAD@Z			; Minimap::Read
PUBLIC	?CGReqSendMemberPosInfoStart@Minimap@@QAEXH@Z	; Minimap::CGReqSendMemberPosInfoStart
PUBLIC	?CGReqSendMemberPosInfoStop@Minimap@@QAEXH@Z	; Minimap::CGReqSendMemberPosInfoStop
PUBLIC	?GCReqSendNpcPosInfo@Minimap@@QAEXPAU_PMSG_REQ_NPC_POSITION@@H@Z ; Minimap::GCReqSendNpcPosInfo
PUBLIC	?GCPartyMemberPosition@Minimap@@QAEXH@Z		; Minimap::GCPartyMemberPosition
PUBLIC	?SendNpcCoordinate@Minimap@@QAEXHEE@Z		; Minimap::SendNpcCoordinate
PUBLIC	?SendPortalCoordinateMoveNpc@Minimap@@QAEXEEEEEEH@Z ; Minimap::SendPortalCoordinateMoveNpc
PUBLIC	?SendPortalCoordinate@Minimap@@QAEXHE@Z		; Minimap::SendPortalCoordinate
PUBLIC	?allocate@?$allocator@U_stSendNPCInfo@@@std@@QAEPAU_stSendNPCInfo@@I@Z ; std::allocator<_stSendNPCInfo>::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@I@Z ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::deallocate
PUBLIC	?push_back@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXABU_stSendNPCInfo@@@Z ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::push_back
PUBLIC	?_Reallocate@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Reallocate
PUBLIC	?_Reserve@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Reserve
PUBLIC	?deallocate@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@I@Z ; std::allocator<_stSendPortalInfo>::deallocate
PUBLIC	?allocate@?$allocator@U_stSendPortalInfo@@@std@@QAEPAU_stSendPortalInfo@@I@Z ; std::allocator<_stSendPortalInfo>::allocate
PUBLIC	?push_back@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXABU_stSendPortalInfo@@@Z ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::push_back
PUBLIC	?_Reallocate@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Reallocate
PUBLIC	?_Reserve@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Reserve
PUBLIC	??_GMinimap@@UAEPAXI@Z				; Minimap::`scalar deleting destructor'
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??$_Uninit_move@PAU_stSendPortalInfo@@PAU1@V?$allocator@U_stSendPortalInfo@@@std@@U1@@std@@YAPAU_stSendPortalInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stSendPortalInfo *,_stSendPortalInfo *,std::allocator<_stSendPortalInfo>,_stSendPortalInfo>
PUBLIC	??$_Uninit_move@PAU_stSendNPCInfo@@PAU1@V?$allocator@U_stSendNPCInfo@@@std@@U1@@std@@YAPAU_stSendNPCInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stSendNPCInfo *,_stSendNPCInfo *,std::allocator<_stSendNPCInfo>,_stSendNPCInfo>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7Minimap@@6B@				; Minimap::`vftable'
PUBLIC	?g_Minimap@@3VMinimap@@A			; g_Minimap
PUBLIC	??_C@_0BC@HGDCGDEN@World?2MiniMap?4xml?$AA@	; `string'
PUBLIC	??_C@_0BP@HMEDIGLC@?$CFs?5?9?5Minimap?5info?5load?5failed?$CB?$AA@ ; `string'
PUBLIC	??_C@_07MGKHBAOD@minimap?$AA@			; `string'
PUBLIC	??_C@_03HBNNNHNM@map?$AA@			; `string'
PUBLIC	??_C@_02EGCJHIOB@id?$AA@			; `string'
PUBLIC	??_C@_0DK@EKGLKKHL@?$FLCMiniMap?$FN?$FLLoadMinimapInfo?$FN?5?9?$DO?5I@ ; `string'
PUBLIC	??_C@_07DKLMHHPO@npclist?$AA@			; `string'
PUBLIC	??_C@_03BPGDPAOH@npc?$AA@			; `string'
PUBLIC	??_C@_01FJMABOPO@x?$AA@				; `string'
PUBLIC	??_C@_01EANLCPLP@y?$AA@				; `string'
PUBLIC	??_C@_05ENKANFLO@class?$AA@			; `string'
PUBLIC	??_C@_04JNABKDKF@sync?$AA@			; `string'
PUBLIC	??_C@_03FJEPELFP@tag?$AA@			; `string'
PUBLIC	??_C@_08HKKDIFPG@gatelist?$AA@			; `string'
PUBLIC	??_C@_04NKCHGMLH@gate?$AA@			; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4Minimap@@6B@				; Minimap::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMinimap@@@8				; Minimap `RTTI Type Descriptor'
PUBLIC	??_R3Minimap@@8					; Minimap::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Minimap@@8					; Minimap::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Minimap@@8			; Minimap::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_strncpy:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	??_EMinimap@@UAEPAXI@Z:PROC			; Minimap::`vector deleting destructor'
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?as_int@xml_attribute@pugi@@QBEHH@Z:PROC	; pugi::xml_attribute::as_int
EXTRN	??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ:PROC	; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
EXTRN	?next_sibling@xml_node@pugi@@QBE?AV12@XZ:PROC	; pugi::xml_node::next_sibling
EXTRN	?text@xml_node@pugi@@QBE?AVxml_text@2@XZ:PROC	; pugi::xml_node::text
EXTRN	?child@xml_node@pugi@@QBE?AV12@PBD@Z:PROC	; pugi::xml_node::child
EXTRN	?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z:PROC ; pugi::xml_node::attribute
EXTRN	?as_string@xml_text@pugi@@QBEPBDPBD@Z:PROC	; pugi::xml_text::as_string
EXTRN	??0xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::xml_document
EXTRN	??1xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::~xml_document
EXTRN	?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z:PROC ; pugi::xml_document::load_file
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?g_Minimap@@3VMinimap@@A DB 01cH DUP (?)		; g_Minimap
_BSS	ENDS
CRT$XCU	SEGMENT
?g_Minimap$initializer$@@3P6AXXZA DD FLAT:??__Eg_Minimap@@YAXXZ ; g_Minimap$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@Minimap@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Minimap@@8 DD FLAT:??_R0?AVMinimap@@@8	; Minimap::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Minimap@@8
rdata$r	ENDS
;	COMDAT ??_R2Minimap@@8
rdata$r	SEGMENT
??_R2Minimap@@8 DD FLAT:??_R1A@?0A@EA@Minimap@@8	; Minimap::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Minimap@@8
rdata$r	SEGMENT
??_R3Minimap@@8 DD 00H					; Minimap::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Minimap@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMinimap@@@8
data$r	SEGMENT
??_R0?AVMinimap@@@8 DD FLAT:??_7type_info@@6B@		; Minimap `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMinimap@@', 00H
data$r	ENDS
;	COMDAT ??_R4Minimap@@6B@
rdata$r	SEGMENT
??_R4Minimap@@6B@ DD 00H				; Minimap::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMinimap@@@8
	DD	FLAT:??_R3Minimap@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04NKCHGMLH@gate?$AA@
CONST	SEGMENT
??_C@_04NKCHGMLH@gate?$AA@ DB 'gate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HKKDIFPG@gatelist?$AA@
CONST	SEGMENT
??_C@_08HKKDIFPG@gatelist?$AA@ DB 'gatelist', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03FJEPELFP@tag?$AA@
CONST	SEGMENT
??_C@_03FJEPELFP@tag?$AA@ DB 'tag', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JNABKDKF@sync?$AA@
CONST	SEGMENT
??_C@_04JNABKDKF@sync?$AA@ DB 'sync', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05ENKANFLO@class?$AA@
CONST	SEGMENT
??_C@_05ENKANFLO@class?$AA@ DB 'class', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EANLCPLP@y?$AA@
CONST	SEGMENT
??_C@_01EANLCPLP@y?$AA@ DB 'y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
CONST	SEGMENT
??_C@_01FJMABOPO@x?$AA@ DB 'x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BPGDPAOH@npc?$AA@
CONST	SEGMENT
??_C@_03BPGDPAOH@npc?$AA@ DB 'npc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DKLMHHPO@npclist?$AA@
CONST	SEGMENT
??_C@_07DKLMHHPO@npclist?$AA@ DB 'npclist', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@EKGLKKHL@?$FLCMiniMap?$FN?$FLLoadMinimapInfo?$FN?5?9?$DO?5I@
CONST	SEGMENT
??_C@_0DK@EKGLKKHL@?$FLCMiniMap?$FN?$FLLoadMinimapInfo?$FN?5?9?$DO?5I@ DB '['
	DB	'CMiniMap][LoadMinimapInfo] -> Invalid map number id - %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGCJHIOB@id?$AA@
CONST	SEGMENT
??_C@_02EGCJHIOB@id?$AA@ DB 'id', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HBNNNHNM@map?$AA@
CONST	SEGMENT
??_C@_03HBNNNHNM@map?$AA@ DB 'map', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MGKHBAOD@minimap?$AA@
CONST	SEGMENT
??_C@_07MGKHBAOD@minimap?$AA@ DB 'minimap', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HMEDIGLC@?$CFs?5?9?5Minimap?5info?5load?5failed?$CB?$AA@
CONST	SEGMENT
??_C@_0BP@HMEDIGLC@?$CFs?5?9?5Minimap?5info?5load?5failed?$CB?$AA@ DB '%s'
	DB	' - Minimap info load failed!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HGDCGDEN@World?2MiniMap?4xml?$AA@
CONST	SEGMENT
??_C@_0BC@HGDCGDEN@World?2MiniMap?4xml?$AA@ DB 'World\MiniMap.xml', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7Minimap@@6B@
CONST	SEGMENT
??_7Minimap@@6B@ DD FLAT:??_R4Minimap@@6B@		; Minimap::`vftable'
	DD	FLAT:??_EMinimap@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z$50
__ehfuncinfo$?_Reallocate@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z$50
__ehfuncinfo$?_Reallocate@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Read@Minimap@@QAEXPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Read@Minimap@@QAEXPAD@Z$0
__ehfuncinfo$?Read@Minimap@@QAEXPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Read@Minimap@@QAEXPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stSendNPCInfo@@U1@@?$allocator@U_stSendNPCInfo@@@std@@QAEXPAU_stSendNPCInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stSendNPCInfo@@U1@@?$allocator@U_stSendNPCInfo@@@std@@QAEXPAU_stSendNPCInfo@@$$QAU2@@Z PROC ; std::allocator<_stSendNPCInfo>::construct<_stSendNPCInfo,_stSendNPCInfo>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 21		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001b	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00020	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  00025	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00028	89 41 28	 mov	 DWORD PTR [ecx+40], eax
$LN3@construct:

; 656  : 		}

  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
??$construct@U_stSendNPCInfo@@U1@@?$allocator@U_stSendNPCInfo@@@std@@QAEXPAU_stSendNPCInfo@@$$QAU2@@Z ENDP ; std::allocator<_stSendNPCInfo>::construct<_stSendNPCInfo,_stSendNPCInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stSendPortalInfo@@U1@@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stSendPortalInfo@@U1@@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@$$QAU2@@Z PROC ; std::allocator<_stSendPortalInfo>::construct<_stSendPortalInfo,_stSendPortalInfo>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 1b		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001b	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00020	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
$LN3@construct:

; 656  : 		}

  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
??$construct@U_stSendPortalInfo@@U1@@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@$$QAU2@@Z ENDP ; std::allocator<_stSendPortalInfo>::construct<_stSendPortalInfo,_stSendPortalInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stSendNPCInfo@@U1@@?$allocator_traits@V?$allocator@U_stSendNPCInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendNPCInfo@@@1@PAU_stSendNPCInfo@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_stSendNPCInfo@@U1@@?$allocator_traits@V?$allocator@U_stSendNPCInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendNPCInfo@@@1@PAU_stSendNPCInfo@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<_stSendNPCInfo> >::construct<_stSendNPCInfo,_stSendNPCInfo>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 21		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001b	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00020	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  00025	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00028	89 41 28	 mov	 DWORD PTR [ecx+40], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$construct@U_stSendNPCInfo@@U1@@?$allocator_traits@V?$allocator@U_stSendNPCInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendNPCInfo@@@1@PAU_stSendNPCInfo@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<_stSendNPCInfo> >::construct<_stSendNPCInfo,_stSendNPCInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U_stSendNPCInfo@@@std@@YA$$QAU_stSendNPCInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_stSendNPCInfo@@@std@@YA$$QAU_stSendNPCInfo@@AAU1@@Z PROC ; std::forward<_stSendNPCInfo>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_stSendNPCInfo@@@std@@YA$$QAU_stSendNPCInfo@@AAU1@@Z ENDP ; std::forward<_stSendNPCInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stSendPortalInfo@@U1@@?$allocator_traits@V?$allocator@U_stSendPortalInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendPortalInfo@@@1@PAU_stSendPortalInfo@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_stSendPortalInfo@@U1@@?$allocator_traits@V?$allocator@U_stSendPortalInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendPortalInfo@@@1@PAU_stSendPortalInfo@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<_stSendPortalInfo> >::construct<_stSendPortalInfo,_stSendPortalInfo>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 1b		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001b	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00020	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$construct@U_stSendPortalInfo@@U1@@?$allocator_traits@V?$allocator@U_stSendPortalInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendPortalInfo@@@1@PAU_stSendPortalInfo@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<_stSendPortalInfo> >::construct<_stSendPortalInfo,_stSendPortalInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U_stSendPortalInfo@@@std@@YA$$QAU_stSendPortalInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_stSendPortalInfo@@@std@@YA$$QAU_stSendPortalInfo@@AAU1@@Z PROC ; std::forward<_stSendPortalInfo>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_stSendPortalInfo@@@std@@YA$$QAU_stSendPortalInfo@@AAU1@@Z ENDP ; std::forward<_stSendPortalInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stSendNPCInfo@@U1@@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stSendNPCInfo@@U1@@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::construct<_stSendNPCInfo,_stSendNPCInfo>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 21		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001b	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00020	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  00025	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00028	89 41 28	 mov	 DWORD PTR [ecx+40], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
??$construct@U_stSendNPCInfo@@U1@@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::construct<_stSendNPCInfo,_stSendNPCInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stSendPortalInfo@@U1@@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXPAU_stSendPortalInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stSendPortalInfo@@U1@@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXPAU_stSendPortalInfo@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >::construct<_stSendPortalInfo,_stSendPortalInfo>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 1b		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001b	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00020	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
??$construct@U_stSendPortalInfo@@U1@@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXPAU_stSendPortalInfo@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >::construct<_stSendPortalInfo,_stSendPortalInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_stSendNPCInfo@@@?$allocator@U_stSendNPCInfo@@@std@@QAEXPAU_stSendNPCInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U_stSendNPCInfo@@@?$allocator@U_stSendNPCInfo@@@std@@QAEXPAU_stSendNPCInfo@@@Z PROC ; std::allocator<_stSendNPCInfo>::destroy<_stSendNPCInfo>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U_stSendNPCInfo@@@?$allocator@U_stSendNPCInfo@@@std@@QAEXPAU_stSendNPCInfo@@@Z ENDP ; std::allocator<_stSendNPCInfo>::destroy<_stSendNPCInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_stSendPortalInfo@@@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U_stSendPortalInfo@@@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@@Z PROC ; std::allocator<_stSendPortalInfo>::destroy<_stSendPortalInfo>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U_stSendPortalInfo@@@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@@Z ENDP ; std::allocator<_stSendPortalInfo>::destroy<_stSendPortalInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAU_stSendNPCInfo@@PAU1@V?$allocator@U_stSendNPCInfo@@@std@@U1@@std@@YAPAU_stSendNPCInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAU_stSendNPCInfo@@PAU1@V?$allocator@U_stSendNPCInfo@@@std@@U1@@std@@YAPAU_stSendNPCInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<_stSendNPCInfo *,_stSendNPCInfo *,std::allocator<_stSendNPCInfo>,_stSendNPCInfo>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	3b ce		 cmp	 ecx, esi
  0000f	74 2c		 je	 SHORT $LN3@Uninit_mov
$LL4@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00011	85 c0		 test	 eax, eax
  00013	74 1e		 je	 SHORT $LN2@Uninit_mov
  00015	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00018	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0001b	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]
  0001f	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  00023	f3 0f 7e 41 20	 movq	 xmm0, QWORD PTR [ecx+32]
  00028	66 0f d6 40 20	 movq	 QWORD PTR [eax+32], xmm0
  0002d	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00030	89 50 28	 mov	 DWORD PTR [eax+40], edx
$LN2@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00033	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00036	83 c0 2c	 add	 eax, 44			; 0000002cH
  00039	3b ce		 cmp	 ecx, esi
  0003b	75 d4		 jne	 SHORT $LL4@Uninit_mov
$LN3@Uninit_mov:
  0003d	5e		 pop	 esi

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);
; 450  : 	}

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$_Uninit_move@PAU_stSendNPCInfo@@PAU1@V?$allocator@U_stSendNPCInfo@@@std@@U1@@std@@YAPAU_stSendNPCInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<_stSendNPCInfo *,_stSendNPCInfo *,std::allocator<_stSendNPCInfo>,_stSendNPCInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAU_stSendNPCInfo@@@std@@YAPAU_stSendNPCInfo@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAU_stSendNPCInfo@@@std@@YAPAU_stSendNPCInfo@@PAU1@@Z PROC ; std::_Val_type<_stSendNPCInfo *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAU_stSendNPCInfo@@@std@@YAPAU_stSendNPCInfo@@PAU1@@Z ENDP ; std::_Val_type<_stSendNPCInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAU_stSendPortalInfo@@PAU1@V?$allocator@U_stSendPortalInfo@@@std@@U1@@std@@YAPAU_stSendPortalInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAU_stSendPortalInfo@@PAU1@V?$allocator@U_stSendPortalInfo@@@std@@U1@@std@@YAPAU_stSendPortalInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<_stSendPortalInfo *,_stSendPortalInfo *,std::allocator<_stSendPortalInfo>,_stSendPortalInfo>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 26		 je	 SHORT $LN3@Uninit_mov
$LL4@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00010	85 c0		 test	 eax, eax
  00012	74 18		 je	 SHORT $LN2@Uninit_mov
  00014	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00017	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0001a	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]
  0001e	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  00022	f3 0f 7e 41 20	 movq	 xmm0, QWORD PTR [ecx+32]
  00027	66 0f d6 40 20	 movq	 QWORD PTR [eax+32], xmm0
$LN2@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  0002c	83 c1 28	 add	 ecx, 40			; 00000028H
  0002f	83 c0 28	 add	 eax, 40			; 00000028H
  00032	3b ca		 cmp	 ecx, edx
  00034	75 da		 jne	 SHORT $LL4@Uninit_mov
$LN3@Uninit_mov:

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);
; 450  : 	}

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$_Uninit_move@PAU_stSendPortalInfo@@PAU1@V?$allocator@U_stSendPortalInfo@@@std@@U1@@std@@YAPAU_stSendPortalInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<_stSendPortalInfo *,_stSendPortalInfo *,std::allocator<_stSendPortalInfo>,_stSendPortalInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAU_stSendPortalInfo@@@std@@YAPAU_stSendPortalInfo@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAU_stSendPortalInfo@@@std@@YAPAU_stSendPortalInfo@@PAU1@@Z PROC ; std::_Val_type<_stSendPortalInfo *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAU_stSendPortalInfo@@@std@@YAPAU_stSendPortalInfo@@PAU1@@Z ENDP ; std::_Val_type<_stSendPortalInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_stSendNPCInfo@@@?$allocator_traits@V?$allocator@U_stSendNPCInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendNPCInfo@@@1@PAU_stSendNPCInfo@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_stSendNPCInfo@@@?$allocator_traits@V?$allocator@U_stSendNPCInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendNPCInfo@@@1@PAU_stSendNPCInfo@@@Z PROC ; std::allocator_traits<std::allocator<_stSendNPCInfo> >::destroy<_stSendNPCInfo>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@U_stSendNPCInfo@@@?$allocator_traits@V?$allocator@U_stSendNPCInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendNPCInfo@@@1@PAU_stSendNPCInfo@@@Z ENDP ; std::allocator_traits<std::allocator<_stSendNPCInfo> >::destroy<_stSendNPCInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@U_stSendNPCInfo@@@std@@YAPAU_stSendNPCInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@U_stSendNPCInfo@@@std@@YAPAU_stSendNPCInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<_stSendNPCInfo>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@U_stSendNPCInfo@@@std@@YAPAU_stSendNPCInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<_stSendNPCInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_stSendPortalInfo@@@?$allocator_traits@V?$allocator@U_stSendPortalInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendPortalInfo@@@1@PAU_stSendPortalInfo@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_stSendPortalInfo@@@?$allocator_traits@V?$allocator@U_stSendPortalInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendPortalInfo@@@1@PAU_stSendPortalInfo@@@Z PROC ; std::allocator_traits<std::allocator<_stSendPortalInfo> >::destroy<_stSendPortalInfo>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@U_stSendPortalInfo@@@?$allocator_traits@V?$allocator@U_stSendPortalInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendPortalInfo@@@1@PAU_stSendPortalInfo@@@Z ENDP ; std::allocator_traits<std::allocator<_stSendPortalInfo> >::destroy<_stSendPortalInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@U_stSendPortalInfo@@@std@@YAPAU_stSendPortalInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@U_stSendPortalInfo@@@std@@YAPAU_stSendPortalInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<_stSendPortalInfo>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@U_stSendPortalInfo@@@std@@YAPAU_stSendPortalInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<_stSendPortalInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAU_stSendNPCInfo@@PAU1@@std@@YAAAPAU_stSendNPCInfo@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAU_stSendNPCInfo@@PAU1@@std@@YAAAPAU_stSendNPCInfo@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<_stSendNPCInfo *,_stSendNPCInfo *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAU_stSendNPCInfo@@PAU1@@std@@YAAAPAU_stSendNPCInfo@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<_stSendNPCInfo *,_stSendNPCInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAU_stSendNPCInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@YAPAU_stSendNPCInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAU_stSendNPCInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@YAPAU_stSendNPCInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@@Z PROC ; std::_Uninit_move<_stSendNPCInfo *,_stSendNPCInfo *,std::_Wrap_alloc<std::allocator<_stSendNPCInfo> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_stSendNPCInfo@@PAU1@V?$allocator@U_stSendNPCInfo@@@std@@U1@@std@@YAPAU_stSendNPCInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stSendNPCInfo *,_stSendNPCInfo *,std::allocator<_stSendNPCInfo>,_stSendNPCInfo>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAU_stSendNPCInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@YAPAU_stSendNPCInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@@Z ENDP ; std::_Uninit_move<_stSendNPCInfo *,_stSendNPCInfo *,std::_Wrap_alloc<std::allocator<_stSendNPCInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAU_stSendNPCInfo@@@std@@YAPAU_stSendNPCInfo@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAU_stSendNPCInfo@@@std@@YAPAU_stSendNPCInfo@@PAU1@@Z PROC ; std::_Unchecked<_stSendNPCInfo *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAU_stSendNPCInfo@@@std@@YAPAU_stSendNPCInfo@@PAU1@@Z ENDP ; std::_Unchecked<_stSendNPCInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAU_stSendPortalInfo@@PAU1@@std@@YAAAPAU_stSendPortalInfo@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAU_stSendPortalInfo@@PAU1@@std@@YAAAPAU_stSendPortalInfo@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<_stSendPortalInfo *,_stSendPortalInfo *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAU_stSendPortalInfo@@PAU1@@std@@YAAAPAU_stSendPortalInfo@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<_stSendPortalInfo *,_stSendPortalInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAU_stSendPortalInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@YAPAU_stSendPortalInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAU_stSendPortalInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@YAPAU_stSendPortalInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@@Z PROC ; std::_Uninit_move<_stSendPortalInfo *,_stSendPortalInfo *,std::_Wrap_alloc<std::allocator<_stSendPortalInfo> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_stSendPortalInfo@@PAU1@V?$allocator@U_stSendPortalInfo@@@std@@U1@@std@@YAPAU_stSendPortalInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stSendPortalInfo *,_stSendPortalInfo *,std::allocator<_stSendPortalInfo>,_stSendPortalInfo>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAU_stSendPortalInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@YAPAU_stSendPortalInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@@Z ENDP ; std::_Uninit_move<_stSendPortalInfo *,_stSendPortalInfo *,std::_Wrap_alloc<std::allocator<_stSendPortalInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAU_stSendPortalInfo@@@std@@YAPAU_stSendPortalInfo@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAU_stSendPortalInfo@@@std@@YAPAU_stSendPortalInfo@@PAU1@@Z PROC ; std::_Unchecked<_stSendPortalInfo *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAU_stSendPortalInfo@@@std@@YAPAU_stSendPortalInfo@@PAU1@@Z ENDP ; std::_Unchecked<_stSendPortalInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_stSendNPCInfo@@@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U_stSendNPCInfo@@@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@@Z PROC ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::destroy<_stSendNPCInfo>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U_stSendNPCInfo@@@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::destroy<_stSendNPCInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@U_stSendNPCInfo@@@std@@YAPAU_stSendNPCInfo@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_stSendNPCInfo@@@std@@YAPAU_stSendNPCInfo@@AAU1@@Z PROC ; std::addressof<_stSendNPCInfo>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U_stSendNPCInfo@@@std@@YAPAU_stSendNPCInfo@@AAU1@@Z ENDP ; std::addressof<_stSendNPCInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_stSendPortalInfo@@@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXPAU_stSendPortalInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U_stSendPortalInfo@@@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXPAU_stSendPortalInfo@@@Z PROC ; std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >::destroy<_stSendPortalInfo>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U_stSendPortalInfo@@@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXPAU_stSendPortalInfo@@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >::destroy<_stSendPortalInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@U_stSendPortalInfo@@@std@@YAPAU_stSendPortalInfo@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_stSendPortalInfo@@@std@@YAPAU_stSendPortalInfo@@AAU1@@Z PROC ; std::addressof<_stSendPortalInfo>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U_stSendPortalInfo@@@std@@YAPAU_stSendPortalInfo@@AAU1@@Z ENDP ; std::addressof<_stSendPortalInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stSendNPCInfo@@ABU1@@?$allocator@U_stSendNPCInfo@@@std@@QAEXPAU_stSendNPCInfo@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stSendNPCInfo@@ABU1@@?$allocator@U_stSendNPCInfo@@@std@@QAEXPAU_stSendNPCInfo@@ABU2@@Z PROC ; std::allocator<_stSendNPCInfo>::construct<_stSendNPCInfo,_stSendNPCInfo const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 21		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001b	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00020	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  00025	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00028	89 41 28	 mov	 DWORD PTR [ecx+40], eax
$LN3@construct:

; 656  : 		}

  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
??$construct@U_stSendNPCInfo@@ABU1@@?$allocator@U_stSendNPCInfo@@@std@@QAEXPAU_stSendNPCInfo@@ABU2@@Z ENDP ; std::allocator<_stSendNPCInfo>::construct<_stSendNPCInfo,_stSendNPCInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stSendNPCInfo@@AAU1@@?$allocator@U_stSendNPCInfo@@@std@@QAEXPAU_stSendNPCInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stSendNPCInfo@@AAU1@@?$allocator@U_stSendNPCInfo@@@std@@QAEXPAU_stSendNPCInfo@@AAU2@@Z PROC ; std::allocator<_stSendNPCInfo>::construct<_stSendNPCInfo,_stSendNPCInfo &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 21		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001b	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00020	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  00025	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00028	89 41 28	 mov	 DWORD PTR [ecx+40], eax
$LN3@construct:

; 656  : 		}

  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
??$construct@U_stSendNPCInfo@@AAU1@@?$allocator@U_stSendNPCInfo@@@std@@QAEXPAU_stSendNPCInfo@@AAU2@@Z ENDP ; std::allocator<_stSendNPCInfo>::construct<_stSendNPCInfo,_stSendNPCInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stSendPortalInfo@@ABU1@@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stSendPortalInfo@@ABU1@@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@ABU2@@Z PROC ; std::allocator<_stSendPortalInfo>::construct<_stSendPortalInfo,_stSendPortalInfo const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 1b		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001b	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00020	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
$LN3@construct:

; 656  : 		}

  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
??$construct@U_stSendPortalInfo@@ABU1@@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@ABU2@@Z ENDP ; std::allocator<_stSendPortalInfo>::construct<_stSendPortalInfo,_stSendPortalInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stSendPortalInfo@@AAU1@@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stSendPortalInfo@@AAU1@@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@AAU2@@Z PROC ; std::allocator<_stSendPortalInfo>::construct<_stSendPortalInfo,_stSendPortalInfo &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 1b		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001b	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00020	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
$LN3@construct:

; 656  : 		}

  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
??$construct@U_stSendPortalInfo@@AAU1@@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@AAU2@@Z ENDP ; std::allocator<_stSendPortalInfo>::construct<_stSendPortalInfo,_stSendPortalInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$_Move@AAPAU_stSendNPCInfo@@@std@@YA$$QAPAU_stSendNPCInfo@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAPAU_stSendNPCInfo@@@std@@YA$$QAPAU_stSendNPCInfo@@AAPAU1@@Z PROC ; std::_Move<_stSendNPCInfo * &>, COMDAT

; 1257 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1258 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1259 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAPAU_stSendNPCInfo@@@std@@YA$$QAPAU_stSendNPCInfo@@AAPAU1@@Z ENDP ; std::_Move<_stSendNPCInfo * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$_Move@AAPAU_stSendPortalInfo@@@std@@YA$$QAPAU_stSendPortalInfo@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAPAU_stSendPortalInfo@@@std@@YA$$QAPAU_stSendPortalInfo@@AAPAU1@@Z PROC ; std::_Move<_stSendPortalInfo * &>, COMDAT

; 1257 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1258 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1259 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAPAU_stSendPortalInfo@@@std@@YA$$QAPAU_stSendPortalInfo@@AAPAU1@@Z ENDP ; std::_Move<_stSendPortalInfo * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAU_stSendNPCInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@YAPAU_stSendNPCInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAU_stSendNPCInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@YAPAU_stSendNPCInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@@Z PROC ; std::_Uninitialized_move<_stSendNPCInfo *,_stSendNPCInfo *,std::_Wrap_alloc<std::allocator<_stSendNPCInfo> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_stSendNPCInfo@@PAU1@V?$allocator@U_stSendNPCInfo@@@std@@U1@@std@@YAPAU_stSendNPCInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stSendNPCInfo *,_stSendNPCInfo *,std::allocator<_stSendNPCInfo>,_stSendNPCInfo>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAU_stSendNPCInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@YAPAU_stSendNPCInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<_stSendNPCInfo *,_stSendNPCInfo *,std::_Wrap_alloc<std::allocator<_stSendNPCInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAU_stSendPortalInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@YAPAU_stSendPortalInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAU_stSendPortalInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@YAPAU_stSendPortalInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@@Z PROC ; std::_Uninitialized_move<_stSendPortalInfo *,_stSendPortalInfo *,std::_Wrap_alloc<std::allocator<_stSendPortalInfo> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_stSendPortalInfo@@PAU1@V?$allocator@U_stSendPortalInfo@@@std@@U1@@std@@YAPAU_stSendPortalInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stSendPortalInfo *,_stSendPortalInfo *,std::allocator<_stSendPortalInfo>,_stSendPortalInfo>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAU_stSendPortalInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@YAPAU_stSendPortalInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<_stSendPortalInfo *,_stSendPortalInfo *,std::_Wrap_alloc<std::allocator<_stSendPortalInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@YAXPAU_stSendNPCInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@YAXPAU_stSendNPCInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> > >, COMDAT

; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@YAXPAU_stSendNPCInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@U_stSendNPCInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_stSendNPCInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@U_stSendNPCInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_stSendNPCInfo@@0@Z PROC ; std::_Ptr_cat<_stSendNPCInfo,_stSendNPCInfo>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@U_stSendNPCInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_stSendNPCInfo@@0@Z ENDP ; std::_Ptr_cat<_stSendNPCInfo,_stSendNPCInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@U_stSendNPCInfo@@@std@@@std@@YAABV?$allocator@U_stSendNPCInfo@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@U_stSendNPCInfo@@@std@@@std@@YAABV?$allocator@U_stSendNPCInfo@@@0@ABV10@@Z PROC ; std::forward<std::allocator<_stSendNPCInfo> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@U_stSendNPCInfo@@@std@@@std@@YAABV?$allocator@U_stSendNPCInfo@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<_stSendNPCInfo> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocs@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocs@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Pocs<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> > >, COMDAT

; 999  : 	}

  00000	c3		 ret	 0
??$_Pocs@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Pocs<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@YAXPAU_stSendPortalInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@YAXPAU_stSendPortalInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> > >, COMDAT

; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@YAXPAU_stSendPortalInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@U_stSendPortalInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_stSendPortalInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@U_stSendPortalInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_stSendPortalInfo@@0@Z PROC ; std::_Ptr_cat<_stSendPortalInfo,_stSendPortalInfo>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@U_stSendPortalInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_stSendPortalInfo@@0@Z ENDP ; std::_Ptr_cat<_stSendPortalInfo,_stSendPortalInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@U_stSendPortalInfo@@@std@@@std@@YAABV?$allocator@U_stSendPortalInfo@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@U_stSendPortalInfo@@@std@@@std@@YAABV?$allocator@U_stSendPortalInfo@@@0@ABV10@@Z PROC ; std::forward<std::allocator<_stSendPortalInfo> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@U_stSendPortalInfo@@@std@@@std@@YAABV?$allocator@U_stSendPortalInfo@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<_stSendPortalInfo> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocs@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocs@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Pocs<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> > >, COMDAT

; 999  : 	}

  00000	c3		 ret	 0
??$_Pocs@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Pocs<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stSendNPCInfo@@ABU1@@?$allocator_traits@V?$allocator@U_stSendNPCInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendNPCInfo@@@1@PAU_stSendNPCInfo@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_stSendNPCInfo@@ABU1@@?$allocator_traits@V?$allocator@U_stSendNPCInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendNPCInfo@@@1@PAU_stSendNPCInfo@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<_stSendNPCInfo> >::construct<_stSendNPCInfo,_stSendNPCInfo const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 21		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001b	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00020	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  00025	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00028	89 41 28	 mov	 DWORD PTR [ecx+40], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$construct@U_stSendNPCInfo@@ABU1@@?$allocator_traits@V?$allocator@U_stSendNPCInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendNPCInfo@@@1@PAU_stSendNPCInfo@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<_stSendNPCInfo> >::construct<_stSendNPCInfo,_stSendNPCInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABU_stSendNPCInfo@@@std@@YAABU_stSendNPCInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU_stSendNPCInfo@@@std@@YAABU_stSendNPCInfo@@ABU1@@Z PROC ; std::forward<_stSendNPCInfo const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABU_stSendNPCInfo@@@std@@YAABU_stSendNPCInfo@@ABU1@@Z ENDP ; std::forward<_stSendNPCInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stSendNPCInfo@@AAU1@@?$allocator_traits@V?$allocator@U_stSendNPCInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendNPCInfo@@@1@PAU_stSendNPCInfo@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_stSendNPCInfo@@AAU1@@?$allocator_traits@V?$allocator@U_stSendNPCInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendNPCInfo@@@1@PAU_stSendNPCInfo@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<_stSendNPCInfo> >::construct<_stSendNPCInfo,_stSendNPCInfo &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 21		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001b	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00020	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  00025	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00028	89 41 28	 mov	 DWORD PTR [ecx+40], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$construct@U_stSendNPCInfo@@AAU1@@?$allocator_traits@V?$allocator@U_stSendNPCInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendNPCInfo@@@1@PAU_stSendNPCInfo@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<_stSendNPCInfo> >::construct<_stSendNPCInfo,_stSendNPCInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAU_stSendNPCInfo@@@std@@YAAAU_stSendNPCInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU_stSendNPCInfo@@@std@@YAAAU_stSendNPCInfo@@AAU1@@Z PROC ; std::forward<_stSendNPCInfo &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU_stSendNPCInfo@@@std@@YAAAU_stSendNPCInfo@@AAU1@@Z ENDP ; std::forward<_stSendNPCInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBU_stSendNPCInfo@@@std@@YAPBU_stSendNPCInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBU_stSendNPCInfo@@@std@@YAPBU_stSendNPCInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<_stSendNPCInfo const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBU_stSendNPCInfo@@@std@@YAPBU_stSendNPCInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<_stSendNPCInfo const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stSendPortalInfo@@ABU1@@?$allocator_traits@V?$allocator@U_stSendPortalInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendPortalInfo@@@1@PAU_stSendPortalInfo@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_stSendPortalInfo@@ABU1@@?$allocator_traits@V?$allocator@U_stSendPortalInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendPortalInfo@@@1@PAU_stSendPortalInfo@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<_stSendPortalInfo> >::construct<_stSendPortalInfo,_stSendPortalInfo const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 1b		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001b	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00020	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$construct@U_stSendPortalInfo@@ABU1@@?$allocator_traits@V?$allocator@U_stSendPortalInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendPortalInfo@@@1@PAU_stSendPortalInfo@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<_stSendPortalInfo> >::construct<_stSendPortalInfo,_stSendPortalInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABU_stSendPortalInfo@@@std@@YAABU_stSendPortalInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU_stSendPortalInfo@@@std@@YAABU_stSendPortalInfo@@ABU1@@Z PROC ; std::forward<_stSendPortalInfo const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABU_stSendPortalInfo@@@std@@YAABU_stSendPortalInfo@@ABU1@@Z ENDP ; std::forward<_stSendPortalInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stSendPortalInfo@@AAU1@@?$allocator_traits@V?$allocator@U_stSendPortalInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendPortalInfo@@@1@PAU_stSendPortalInfo@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_stSendPortalInfo@@AAU1@@?$allocator_traits@V?$allocator@U_stSendPortalInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendPortalInfo@@@1@PAU_stSendPortalInfo@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<_stSendPortalInfo> >::construct<_stSendPortalInfo,_stSendPortalInfo &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 1b		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001b	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00020	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$construct@U_stSendPortalInfo@@AAU1@@?$allocator_traits@V?$allocator@U_stSendPortalInfo@@@std@@@std@@SAXAAV?$allocator@U_stSendPortalInfo@@@1@PAU_stSendPortalInfo@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<_stSendPortalInfo> >::construct<_stSendPortalInfo,_stSendPortalInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAU_stSendPortalInfo@@@std@@YAAAU_stSendPortalInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU_stSendPortalInfo@@@std@@YAAAU_stSendPortalInfo@@AAU1@@Z PROC ; std::forward<_stSendPortalInfo &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU_stSendPortalInfo@@@std@@YAAAU_stSendPortalInfo@@AAU1@@Z ENDP ; std::forward<_stSendPortalInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBU_stSendPortalInfo@@@std@@YAPBU_stSendPortalInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBU_stSendPortalInfo@@@std@@YAPBU_stSendPortalInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<_stSendPortalInfo const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBU_stSendPortalInfo@@@std@@YAPBU_stSendPortalInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<_stSendPortalInfo const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAU_stSendNPCInfo@@@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEPAU_stSendNPCInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAU_stSendNPCInfo@@@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEPAU_stSendNPCInfo@@PAU2@00@Z PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Umove<_stSendNPCInfo *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_stSendNPCInfo@@PAU1@V?$allocator@U_stSendNPCInfo@@@std@@U1@@std@@YAPAU_stSendNPCInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stSendNPCInfo *,_stSendNPCInfo *,std::allocator<_stSendNPCInfo>,_stSendNPCInfo>
  00017	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAU_stSendNPCInfo@@@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEPAU_stSendNPCInfo@@PAU2@00@Z ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Umove<_stSendNPCInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAU_stSendPortalInfo@@@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEPAU_stSendPortalInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAU_stSendPortalInfo@@@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEPAU_stSendPortalInfo@@PAU2@00@Z PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Umove<_stSendPortalInfo *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_stSendPortalInfo@@PAU1@V?$allocator@U_stSendPortalInfo@@@std@@U1@@std@@YAPAU_stSendPortalInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stSendPortalInfo *,_stSendPortalInfo *,std::allocator<_stSendPortalInfo>,_stSendPortalInfo>
  00017	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAU_stSendPortalInfo@@@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEPAU_stSendPortalInfo@@PAU2@00@Z ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Umove<_stSendPortalInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@YAXPAU_stSendNPCInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@YAXPAU_stSendNPCInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@YAXPAU_stSendNPCInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@U_stSendNPCInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U_stSendNPCInfo@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@U_stSendNPCInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U_stSendNPCInfo@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >,std::_Vector_val<std::_Simple_types<_stSendNPCInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >,std::_Vector_val<std::_Simple_types<_stSendNPCInfo> >,1><std::allocator<_stSendNPCInfo> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@U_stSendNPCInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U_stSendNPCInfo@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >,std::_Vector_val<std::_Simple_types<_stSendNPCInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >,std::_Vector_val<std::_Simple_types<_stSendNPCInfo> >,1><std::allocator<_stSendNPCInfo> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocs@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocs@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@0@Z PROC ; std::_Pocs<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> > >, COMDAT

; 1004 : 	typename _Alty::propagate_on_container_swap _Tag;
; 1005 : 	_Pocs(_Left, _Right, _Tag);
; 1006 : 	}

  00000	c3		 ret	 0
??$_Pocs@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@0@Z ENDP ; std::_Pocs<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@YAXPAU_stSendPortalInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@YAXPAU_stSendPortalInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@YAXPAU_stSendPortalInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@U_stSendPortalInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U_stSendPortalInfo@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@U_stSendPortalInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U_stSendPortalInfo@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >,std::_Vector_val<std::_Simple_types<_stSendPortalInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >,std::_Vector_val<std::_Simple_types<_stSendPortalInfo> >,1><std::allocator<_stSendPortalInfo> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@U_stSendPortalInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U_stSendPortalInfo@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >,std::_Vector_val<std::_Simple_types<_stSendPortalInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >,std::_Vector_val<std::_Simple_types<_stSendPortalInfo> >,1><std::allocator<_stSendPortalInfo> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocs@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocs@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@0@Z PROC ; std::_Pocs<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> > >, COMDAT

; 1004 : 	typename _Alty::propagate_on_container_swap _Tag;
; 1005 : 	_Pocs(_Left, _Right, _Tag);
; 1006 : 	}

  00000	c3		 ret	 0
??$_Pocs@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@0@Z ENDP ; std::_Pocs<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stSendNPCInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stSendNPCInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::construct<_stSendNPCInfo,_stSendNPCInfo const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 21		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001b	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00020	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  00025	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00028	89 41 28	 mov	 DWORD PTR [ecx+40], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
??$construct@U_stSendNPCInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::construct<_stSendNPCInfo,_stSendNPCInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stSendNPCInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stSendNPCInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::construct<_stSendNPCInfo,_stSendNPCInfo &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 21		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001b	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00020	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  00025	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00028	89 41 28	 mov	 DWORD PTR [ecx+40], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
??$construct@U_stSendNPCInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::construct<_stSendNPCInfo,_stSendNPCInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBU_stSendNPCInfo@@@std@@YAPBU_stSendNPCInfo@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBU_stSendNPCInfo@@@std@@YAPBU_stSendNPCInfo@@ABU1@@Z PROC ; std::addressof<_stSendNPCInfo const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBU_stSendNPCInfo@@@std@@YAPBU_stSendNPCInfo@@ABU1@@Z ENDP ; std::addressof<_stSendNPCInfo const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@PAU_stSendNPCInfo@@@std@@YAXAAPAU_stSendNPCInfo@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAU_stSendNPCInfo@@@std@@YAXAAPAU_stSendNPCInfo@@0@Z PROC ; std::swap<_stSendNPCInfo *>, COMDAT

; 51   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	56		 push	 esi
  0000a	8b 32		 mov	 esi, DWORD PTR [edx]
  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00010	89 31		 mov	 DWORD PTR [ecx], esi
  00012	5e		 pop	 esi

; 55   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@PAU_stSendNPCInfo@@@std@@YAXAAPAU_stSendNPCInfo@@0@Z ENDP ; std::swap<_stSendNPCInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$_Swap_adl@PAU_stSendNPCInfo@@@std@@YAXAAPAU_stSendNPCInfo@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Swap_adl@PAU_stSendNPCInfo@@@std@@YAXAAPAU_stSendNPCInfo@@0@Z PROC ; std::_Swap_adl<_stSendNPCInfo *>, COMDAT

; 61   : 	{	// exchange values stored at _Left and _Right, using ADL

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	56		 push	 esi

; 52   : 	_Ty _Tmp = _Move(_Left);

  0000a	8b 32		 mov	 esi, DWORD PTR [edx]

; 53   : 	_Left = _Move(_Right);

  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00010	89 31		 mov	 DWORD PTR [ecx], esi
  00012	5e		 pop	 esi

; 62   : 	swap(_Left, _Right);
; 63   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Swap_adl@PAU_stSendNPCInfo@@@std@@YAXAAPAU_stSendNPCInfo@@0@Z ENDP ; std::_Swap_adl<_stSendNPCInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8U_stSendNPCInfo@@U0@@std@@YA_NABV?$allocator@U_stSendNPCInfo@@@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8U_stSendNPCInfo@@U0@@std@@YA_NABV?$allocator@U_stSendNPCInfo@@@0@0@Z PROC ; std::operator==<_stSendNPCInfo,_stSendNPCInfo>, COMDAT

; 712  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 713  : 	}

  00002	c3		 ret	 0
??$?8U_stSendNPCInfo@@U0@@std@@YA_NABV?$allocator@U_stSendNPCInfo@@@0@0@Z ENDP ; std::operator==<_stSendNPCInfo,_stSendNPCInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8V?$allocator@U_stSendNPCInfo@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8V?$allocator@U_stSendNPCInfo@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@0@Z PROC ; std::operator==<std::allocator<_stSendNPCInfo>,std::allocator<_stSendNPCInfo> >, COMDAT

; 939  : 	return (static_cast<const _Ty&>(_Left)

  00000	b0 01		 mov	 al, 1

; 940  : 		== static_cast<const _Other&>(_Right));
; 941  : 	}

  00002	c3		 ret	 0
??$?8V?$allocator@U_stSendNPCInfo@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@0@Z ENDP ; std::operator==<std::allocator<_stSendNPCInfo>,std::allocator<_stSendNPCInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stSendPortalInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXPAU_stSendPortalInfo@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stSendPortalInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXPAU_stSendPortalInfo@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >::construct<_stSendPortalInfo,_stSendPortalInfo const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 1b		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001b	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00020	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
??$construct@U_stSendPortalInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXPAU_stSendPortalInfo@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >::construct<_stSendPortalInfo,_stSendPortalInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stSendPortalInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXPAU_stSendPortalInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stSendPortalInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXPAU_stSendPortalInfo@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >::construct<_stSendPortalInfo,_stSendPortalInfo &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 1b		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0001b	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00020	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
??$construct@U_stSendPortalInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXPAU_stSendPortalInfo@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >::construct<_stSendPortalInfo,_stSendPortalInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBU_stSendPortalInfo@@@std@@YAPBU_stSendPortalInfo@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBU_stSendPortalInfo@@@std@@YAPBU_stSendPortalInfo@@ABU1@@Z PROC ; std::addressof<_stSendPortalInfo const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBU_stSendPortalInfo@@@std@@YAPBU_stSendPortalInfo@@ABU1@@Z ENDP ; std::addressof<_stSendPortalInfo const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@PAU_stSendPortalInfo@@@std@@YAXAAPAU_stSendPortalInfo@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAU_stSendPortalInfo@@@std@@YAXAAPAU_stSendPortalInfo@@0@Z PROC ; std::swap<_stSendPortalInfo *>, COMDAT

; 51   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	56		 push	 esi
  0000a	8b 32		 mov	 esi, DWORD PTR [edx]
  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00010	89 31		 mov	 DWORD PTR [ecx], esi
  00012	5e		 pop	 esi

; 55   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@PAU_stSendPortalInfo@@@std@@YAXAAPAU_stSendPortalInfo@@0@Z ENDP ; std::swap<_stSendPortalInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$_Swap_adl@PAU_stSendPortalInfo@@@std@@YAXAAPAU_stSendPortalInfo@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Swap_adl@PAU_stSendPortalInfo@@@std@@YAXAAPAU_stSendPortalInfo@@0@Z PROC ; std::_Swap_adl<_stSendPortalInfo *>, COMDAT

; 61   : 	{	// exchange values stored at _Left and _Right, using ADL

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	56		 push	 esi

; 52   : 	_Ty _Tmp = _Move(_Left);

  0000a	8b 32		 mov	 esi, DWORD PTR [edx]

; 53   : 	_Left = _Move(_Right);

  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00010	89 31		 mov	 DWORD PTR [ecx], esi
  00012	5e		 pop	 esi

; 62   : 	swap(_Left, _Right);
; 63   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Swap_adl@PAU_stSendPortalInfo@@@std@@YAXAAPAU_stSendPortalInfo@@0@Z ENDP ; std::_Swap_adl<_stSendPortalInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8U_stSendPortalInfo@@U0@@std@@YA_NABV?$allocator@U_stSendPortalInfo@@@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8U_stSendPortalInfo@@U0@@std@@YA_NABV?$allocator@U_stSendPortalInfo@@@0@0@Z PROC ; std::operator==<_stSendPortalInfo,_stSendPortalInfo>, COMDAT

; 712  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 713  : 	}

  00002	c3		 ret	 0
??$?8U_stSendPortalInfo@@U0@@std@@YA_NABV?$allocator@U_stSendPortalInfo@@@0@0@Z ENDP ; std::operator==<_stSendPortalInfo,_stSendPortalInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8V?$allocator@U_stSendPortalInfo@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8V?$allocator@U_stSendPortalInfo@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@0@Z PROC ; std::operator==<std::allocator<_stSendPortalInfo>,std::allocator<_stSendPortalInfo> >, COMDAT

; 939  : 	return (static_cast<const _Ty&>(_Left)

  00000	b0 01		 mov	 al, 1

; 940  : 		== static_cast<const _Other&>(_Right));
; 941  : 	}

  00002	c3		 ret	 0
??$?8V?$allocator@U_stSendPortalInfo@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@0@Z ENDP ; std::operator==<std::allocator<_stSendPortalInfo>,std::allocator<_stSendPortalInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_Minimap@@YAXXZ
text$yd	SEGMENT
??__Fg_Minimap@@YAXXZ PROC				; `dynamic atexit destructor for 'g_Minimap'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Minimap@@3VMinimap@@A ; g_Minimap
  00005	e9 00 00 00 00	 jmp	 ??1Minimap@@UAE@XZ	; Minimap::~Minimap
??__Fg_Minimap@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_Minimap''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
;	COMDAT ??__Eg_Minimap@@YAXXZ
text$di	SEGMENT
??__Eg_Minimap@@YAXXZ PROC				; `dynamic initializer for 'g_Minimap'', COMDAT

; 10   : Minimap g_Minimap;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Minimap@@3VMinimap@@A ; g_Minimap
  00005	e8 00 00 00 00	 call	 ??0Minimap@@QAE@XZ	; Minimap::Minimap
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_Minimap@@YAXXZ ; `dynamic atexit destructor for 'g_Minimap''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_Minimap@@YAXXZ ENDP				; `dynamic initializer for 'g_Minimap''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GMinimap@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GMinimap@@UAEPAXI@Z PROC				; Minimap::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1Minimap@@UAE@XZ	; Minimap::~Minimap
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 1c		 push	 28			; 0000001cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GMinimap@@UAEPAXI@Z ENDP				; Minimap::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IBEXPAU_stSendPortalInfo@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IBEXPAU_stSendPortalInfo@@0@Z PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IBEXPAU_stSendPortalInfo@@0@Z ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 33		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	c1 fa 04	 sar	 edx, 4
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@I@Z ; std::allocator<_stSendPortalInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00035	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0003c	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0003d	c3		 ret	 0
?_Tidy@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
tv202 = 8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00006	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0000b	56		 push	 esi
  0000c	57		 push	 edi

; 1646 : 		if (_Unused_capacity() < _Count)

  0000d	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00010	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00013	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00016	2b d6		 sub	 edx, esi
  00018	f7 ea		 imul	 edx
  0001a	c1 fa 04	 sar	 edx, 4
  0001d	8b c2		 mov	 eax, edx
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	03 c2		 add	 eax, edx

; 1646 : 		if (_Unused_capacity() < _Count)

  00024	3b c7		 cmp	 eax, edi
  00026	73 61		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00028	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002a	2b f0		 sub	 esi, eax
  0002c	89 45 08	 mov	 DWORD PTR tv202[ebp], eax
  0002f	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00034	f7 ee		 imul	 esi

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00036	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0003b	c1 fa 04	 sar	 edx, 4
  0003e	8b ca		 mov	 ecx, edx
  00040	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00043	03 ca		 add	 ecx, edx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00045	2b c1		 sub	 eax, ecx
  00047	3b c7		 cmp	 eax, edi
  00049	72 45		 jb	 SHORT $LN134@Reserve

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004b	03 f9		 add	 edi, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0004d	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00052	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00055	2b 4d 08	 sub	 ecx, DWORD PTR tv202[ebp]
  00058	f7 e9		 imul	 ecx
  0005a	c1 fa 04	 sar	 edx, 4
  0005d	8b f2		 mov	 esi, edx
  0005f	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00062	03 f2		 add	 esi, edx

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00064	ba 66 66 66 06	 mov	 edx, 107374182		; 06666666H
  00069	8b c6		 mov	 eax, esi
  0006b	d1 e8		 shr	 eax, 1
  0006d	2b d0		 sub	 edx, eax
  0006f	3b d6		 cmp	 edx, esi
  00071	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  00074	b8 00 00 00 00	 mov	 eax, 0
  00079	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  0007c	3b cf		 cmp	 ecx, edi
  0007e	0f 42 cf	 cmovb	 ecx, edi

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00081	51		 push	 ecx
  00082	8b cb		 mov	 ecx, ebx
  00084	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Reallocate
$LN2@Reserve:
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx

; 1651 : 			}
; 1652 : 		}

  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00095	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  0009a	cc		 int	 3
?_Reserve@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00030	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_stSendPortalInfo@@@std@@QAEPAU_stSendPortalInfo@@I@Z ; std::allocator<_stSendPortalInfo>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00038	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0003b	8b f8		 mov	 edi, eax

; 1622 : 
; 1623 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00044	6a 00		 push	 0
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	ff 76 04	 push	 DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0004b	89 7d ec	 mov	 DWORD PTR __Ptr$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0004e	ff 36		 push	 DWORD PTR [esi]
  00050	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_stSendPortalInfo@@PAU1@V?$allocator@U_stSendPortalInfo@@@std@@U1@@std@@YAPAU_stSendPortalInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stSendPortalInfo *,_stSendPortalInfo *,std::allocator<_stSendPortalInfo>,_stSendPortalInfo>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00055	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00058	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0005d	2b 0e		 sub	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0005f	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00062	f7 e9		 imul	 ecx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00064	8b 06		 mov	 eax, DWORD PTR [esi]

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00066	c1 fa 04	 sar	 edx, 4
  00069	8b da		 mov	 ebx, edx
  0006b	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0006e	03 da		 add	 ebx, edx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00070	85 c0		 test	 eax, eax
  00072	74 20		 je	 SHORT $LN3@Reallocate

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00074	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00077	2b c8		 sub	 ecx, eax
  00079	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0007e	f7 e9		 imul	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00080	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00082	c1 fa 04	 sar	 edx, 4
  00085	8b c2		 mov	 eax, edx
  00087	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008a	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0008c	50		 push	 eax
  0008d	ff 36		 push	 DWORD PTR [esi]
  0008f	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@I@Z ; std::allocator<_stSendPortalInfo>::deallocate
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1639 : 		this->_Myend() = _Ptr + _Count;

  00094	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00097	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0009a	8d 04 c7	 lea	 eax, DWORD PTR [edi+eax*8]
  0009d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  000a0	8d 04 9b	 lea	 eax, DWORD PTR [ebx+ebx*4]
  000a3	8d 04 c7	 lea	 eax, DWORD PTR [edi+eax*8]
  000a6	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  000a9	89 3e		 mov	 DWORD PTR [esi], edi

; 1642 : 		}

  000ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b5	59		 pop	 ecx
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  000bf	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  000c2	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c5	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  000c8	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@I@Z ; std::allocator<_stSendPortalInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1627 : 		_RERAISE;

  000cd	6a 00		 push	 0
  000cf	6a 00		 push	 0
  000d1	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN179@Reallocate:
$LN178@Reallocate:
  000d6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IBE_NPBU_stSendPortalInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IBE_NPBU_stSendPortalInfo@@@Z PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IBE_NPBU_stSendPortalInfo@@@Z ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IBEII@Z PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0000d	b9 66 66 66 06	 mov	 ecx, 107374182		; 06666666H

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00012	f7 ea		 imul	 edx
  00014	56		 push	 esi
  00015	c1 fa 04	 sar	 edx, 4
  00018	8b f2		 mov	 esi, edx
  0001a	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001d	03 f2		 add	 esi, edx

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0001f	8b c6		 mov	 eax, esi
  00021	d1 e8		 shr	 eax, 1
  00023	57		 push	 edi
  00024	2b c8		 sub	 ecx, eax
  00026	33 ff		 xor	 edi, edi
  00028	3b ce		 cmp	 ecx, esi
  0002a	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0002d	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00030	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00033	5f		 pop	 edi
  00034	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  00038	8b c2		 mov	 eax, edx
  0003a	5e		 pop	 esi

; 1612 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Grow_to@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IBEII@Z ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXPAU_stSendPortalInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXPAU_stSendPortalInfo@@0@Z PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXPAU_stSendPortalInfo@@0@Z ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?swap@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?swap@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXAAV12@@Z PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::swap, COMDAT
; _this$ = ecx

; 1548 : 		{	// exchange contents with _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1549 : 		if (this == &_Right)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 20		 je	 SHORT $LN7@swap
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	8b 16		 mov	 edx, DWORD PTR [esi]
  00012	89 06		 mov	 DWORD PTR [esi], eax

; 54   : 	_Right = _Move(_Tmp);

  00014	89 17		 mov	 DWORD PTR [edi], edx

; 52   : 	_Ty _Tmp = _Move(_Left);

  00016	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 53   : 	_Left = _Move(_Right);

  00019	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 54   : 	_Right = _Move(_Tmp);

  0001f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 52   : 	_Ty _Tmp = _Move(_Left);

  00022	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 53   : 	_Left = _Move(_Right);

  00025	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 54   : 	_Right = _Move(_Tmp);

  0002b	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
$LN7@swap:
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1576 : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?swap@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::swap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::clear, COMDAT
; _this$ = ecx

; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1543 : 		}

  00005	c3		 ret	 0
?clear@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXABU_stSendPortalInfo@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXABU_stSendPortalInfo@@@Z PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 58		 jae	 SHORT $LN2@push_back
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 52		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f8		 sub	 edi, eax
  00019	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0001e	f7 ef		 imul	 edi
  00020	c1 fa 04	 sar	 edx, 4
  00023	8b fa		 mov	 edi, edx
  00025	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00028	03 fa		 add	 edi, edx

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0002a	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002d	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  0002f	6a 01		 push	 1
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?_Reserve@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00038	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003b	85 d2		 test	 edx, edx
  0003d	74 57		 je	 SHORT $LN205@push_back
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1281 : 			this->_Getal().construct(this->_Mylast(),

  0003f	8b 06		 mov	 eax, DWORD PTR [esi]
  00041	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  00044	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00045	0f 10 04 c8	 movups	 xmm0, XMMWORD PTR [eax+ecx*8]
  00049	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  0004c	0f 10 44 c8 10	 movups	 xmm0, XMMWORD PTR [eax+ecx*8+16]
  00051	0f 11 42 10	 movups	 XMMWORD PTR [edx+16], xmm0
  00055	f3 0f 7e 44 c8
	20		 movq	 xmm0, QWORD PTR [eax+ecx*8+32]
  0005b	66 0f d6 42 20	 movq	 QWORD PTR [edx+32], xmm0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00060	83 46 04 28	 add	 DWORD PTR [esi+4], 40	; 00000028H
  00064	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
$LN2@push_back:

; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  00069	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0006c	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  0006e	6a 01		 push	 1
  00070	8b ce		 mov	 ecx, esi
  00072	e8 00 00 00 00	 call	 ?_Reserve@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00077	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0007a	85 c0		 test	 eax, eax
  0007c	74 18		 je	 SHORT $LN205@push_back
  0007e	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00081	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00084	0f 10 47 10	 movups	 xmm0, XMMWORD PTR [edi+16]
  00088	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  0008c	f3 0f 7e 47 20	 movq	 xmm0, QWORD PTR [edi+32]
  00091	66 0f d6 40 20	 movq	 QWORD PTR [eax+32], xmm0
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00096	83 46 04 28	 add	 DWORD PTR [esi+4], 40	; 00000028H
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
?push_back@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXABU_stSendPortalInfo@@@Z ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEAAU_stSendPortalInfo@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEAAU_stSendPortalInfo@@I@Z PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::operator[], COMDAT
; _this$ = ecx

; 1228 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	8d 04 d0	 lea	 eax, DWORD PTR [eax+edx*8]

; 1241 : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??A?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEAAU_stSendPortalInfo@@I@Z ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 04	 sar	 edx, 4
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1180 : 		}

  00016	c3		 ret	 0
?size@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00008	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 04	 sar	 edx, 4
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx

; 1048 : 		}

  00017	c3		 ret	 0
?_Unused_capacity@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 04	 sar	 edx, 4
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1043 : 		}

  00016	c3		 ret	 0
?capacity@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::~vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 33		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	c1 fa 04	 sar	 edx, 4
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@I@Z ; std::allocator<_stSendPortalInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00035	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0003c	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0003d	c3		 ret	 0
??1?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::~vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >,std::_Vector_val<std::_Simple_types<_stSendPortalInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >,std::_Vector_val<std::_Simple_types<_stSendPortalInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >,std::_Vector_val<std::_Simple_types<_stSendPortalInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >,std::_Vector_val<std::_Simple_types<_stSendPortalInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >,std::_Vector_val<std::_Simple_types<_stSendPortalInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >,std::_Vector_val<std::_Simple_types<_stSendPortalInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >,std::_Vector_val<std::_Simple_types<_stSendPortalInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >,std::_Vector_val<std::_Simple_types<_stSendPortalInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<_stSendPortalInfo> >::_Vector_val<std::_Simple_types<_stSendPortalInfo> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<_stSendPortalInfo> >::_Vector_val<std::_Simple_types<_stSendPortalInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QBEABQAU_stSendPortalInfo@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QBEABQAU_stSendPortalInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QBEABQAU_stSendPortalInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEAAPAU_stSendPortalInfo@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEAAPAU_stSendPortalInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEAAPAU_stSendPortalInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QBEABQAU_stSendPortalInfo@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QBEABQAU_stSendPortalInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QBEABQAU_stSendPortalInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEAAPAU_stSendPortalInfo@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEAAPAU_stSendPortalInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEAAPAU_stSendPortalInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QBEABQAU_stSendPortalInfo@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QBEABQAU_stSendPortalInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QBEABQAU_stSendPortalInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEAAPAU_stSendPortalInfo@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEAAPAU_stSendPortalInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEAAPAU_stSendPortalInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stSendPortalInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Swap_all, COMDAT
; _this$ = ecx

; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}

  00000	c2 04 00	 ret	 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Swap_alloc, COMDAT
; _this$ = ecx

; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}

  00000	c2 04 00	 ret	 4
?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Swap_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@U_stSendPortalInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@U_stSendPortalInfo@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@U_stSendPortalInfo@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >::_Vector_alloc<std::_Vec_base_types<_stSendPortalInfo,std::allocator<_stSendPortalInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXPAU_stSendPortalInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXPAU_stSendPortalInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 		}

  00003	5d		 pop	 ebp

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@I@Z ; std::allocator<_stSendPortalInfo>::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXPAU_stSendPortalInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEPAU_stSendPortalInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEPAU_stSendPortalInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@U_stSendPortalInfo@@@std@@QAEPAU_stSendPortalInfo@@I@Z ; std::allocator<_stSendPortalInfo>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEPAU_stSendPortalInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAE@ABV?$allocator@U_stSendPortalInfo@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAE@ABV?$allocator@U_stSendPortalInfo@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >::_Wrap_alloc<std::allocator<_stSendPortalInfo> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAE@ABV?$allocator@U_stSendPortalInfo@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stSendPortalInfo> >::_Wrap_alloc<std::allocator<_stSendPortalInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U_stSendPortalInfo@@@std@@@std@@SAIABV?$allocator@U_stSendPortalInfo@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U_stSendPortalInfo@@@std@@@std@@SAIABV?$allocator@U_stSendPortalInfo@@@2@@Z PROC ; std::allocator_traits<std::allocator<_stSendPortalInfo> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U_stSendPortalInfo@@@std@@@std@@SAIABV?$allocator@U_stSendPortalInfo@@@2@@Z ENDP ; std::allocator_traits<std::allocator<_stSendPortalInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U_stSendPortalInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U_stSendPortalInfo@@@std@@QBEIXZ PROC ; std::allocator<_stSendPortalInfo>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U_stSendPortalInfo@@@std@@QBEIXZ ENDP ; std::allocator<_stSendPortalInfo>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_stSendPortalInfo@@@std@@QAEPAU_stSendPortalInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_stSendPortalInfo@@@std@@QAEPAU_stSendPortalInfo@@I@Z PROC ; std::allocator<_stSendPortalInfo>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d 66 66 66 06	 cmp	 eax, 107374182		; 06666666H
  00013	77 3f		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00018	c1 e0 03	 shl	 eax, 3

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00020	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00022	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00025	3b c8		 cmp	 ecx, eax
  00027	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	8b c8		 mov	 ecx, eax
  00031	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00034	85 c9		 test	 ecx, ecx
  00036	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00038	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003b	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003e	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004b	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004e	85 c0		 test	 eax, eax
  00050	75 b8		 jne	 SHORT $LN12@allocate
  00052	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00054	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00059	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00068	cc		 int	 3
?allocate@?$allocator@U_stSendPortalInfo@@@std@@QAEPAU_stSendPortalInfo@@I@Z ENDP ; std::allocator<_stSendPortalInfo>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@I@Z PROC ; std::allocator<_stSendPortalInfo>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d 66 66 66 06	 cmp	 eax, 107374182		; 06666666H
  0000e	77 34		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00013	c1 e0 03	 shl	 eax, 3

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00016	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001b	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001d	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00020	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00022	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00025	3b c1		 cmp	 eax, ecx
  00027	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00029	2b c8		 sub	 ecx, eax
  0002b	83 f9 04	 cmp	 ecx, 4
  0002e	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00030	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00033	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00035	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4

; 639  : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00049	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00058	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005d	cc		 int	 3
?deallocate@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@I@Z ENDP ; std::allocator<_stSendPortalInfo>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_stSendPortalInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U_stSendPortalInfo@@@std@@QAE@ABV01@@Z PROC ; std::allocator<_stSendPortalInfo>::allocator<_stSendPortalInfo>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@U_stSendPortalInfo@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<_stSendPortalInfo>::allocator<_stSendPortalInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_stSendPortalInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U_stSendPortalInfo@@@std@@QAE@XZ PROC	; std::allocator<_stSendPortalInfo>::allocator<_stSendPortalInfo>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U_stSendPortalInfo@@@std@@QAE@XZ ENDP	; std::allocator<_stSendPortalInfo>::allocator<_stSendPortalInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IBEXPAU_stSendNPCInfo@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IBEXPAU_stSendNPCInfo@@0@Z PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IBEXPAU_stSendNPCInfo@@0@Z ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 33		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	c1 fa 03	 sar	 edx, 3
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@I@Z ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00035	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0003c	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0003d	c3		 ret	 0
?_Tidy@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
tv202 = 8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00006	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
  0000b	56		 push	 esi
  0000c	57		 push	 edi

; 1646 : 		if (_Unused_capacity() < _Count)

  0000d	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00010	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00013	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00016	2b d6		 sub	 edx, esi
  00018	f7 ea		 imul	 edx
  0001a	c1 fa 03	 sar	 edx, 3
  0001d	8b c2		 mov	 eax, edx
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	03 c2		 add	 eax, edx

; 1646 : 		if (_Unused_capacity() < _Count)

  00024	3b c7		 cmp	 eax, edi
  00026	73 61		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00028	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002a	2b f0		 sub	 esi, eax
  0002c	89 45 08	 mov	 DWORD PTR tv202[ebp], eax
  0002f	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
  00034	f7 ee		 imul	 esi

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00036	b8 5d 74 d1 05	 mov	 eax, 97612893		; 05d1745dH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0003b	c1 fa 03	 sar	 edx, 3
  0003e	8b ca		 mov	 ecx, edx
  00040	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00043	03 ca		 add	 ecx, edx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00045	2b c1		 sub	 eax, ecx
  00047	3b c7		 cmp	 eax, edi
  00049	72 45		 jb	 SHORT $LN134@Reserve

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004b	03 f9		 add	 edi, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0004d	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
  00052	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00055	2b 4d 08	 sub	 ecx, DWORD PTR tv202[ebp]
  00058	f7 e9		 imul	 ecx
  0005a	c1 fa 03	 sar	 edx, 3
  0005d	8b f2		 mov	 esi, edx
  0005f	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00062	03 f2		 add	 esi, edx

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00064	ba 5d 74 d1 05	 mov	 edx, 97612893		; 05d1745dH
  00069	8b c6		 mov	 eax, esi
  0006b	d1 e8		 shr	 eax, 1
  0006d	2b d0		 sub	 edx, eax
  0006f	3b d6		 cmp	 edx, esi
  00071	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  00074	b8 00 00 00 00	 mov	 eax, 0
  00079	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  0007c	3b cf		 cmp	 ecx, edi
  0007e	0f 42 cf	 cmovb	 ecx, edi

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00081	51		 push	 ecx
  00082	8b cb		 mov	 ecx, ebx
  00084	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Reallocate
$LN2@Reserve:
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx

; 1651 : 			}
; 1652 : 		}

  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00095	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  0009a	cc		 int	 3
?_Reserve@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00030	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_stSendNPCInfo@@@std@@QAEPAU_stSendNPCInfo@@I@Z ; std::allocator<_stSendNPCInfo>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00038	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0003b	8b f8		 mov	 edi, eax

; 1622 : 
; 1623 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00044	6a 00		 push	 0
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	ff 76 04	 push	 DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0004b	89 7d ec	 mov	 DWORD PTR __Ptr$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0004e	ff 36		 push	 DWORD PTR [esi]
  00050	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_stSendNPCInfo@@PAU1@V?$allocator@U_stSendNPCInfo@@@std@@U1@@std@@YAPAU_stSendNPCInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stSendNPCInfo *,_stSendNPCInfo *,std::allocator<_stSendNPCInfo>,_stSendNPCInfo>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00055	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00058	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
  0005d	2b 0e		 sub	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0005f	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00062	f7 e9		 imul	 ecx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00064	8b 06		 mov	 eax, DWORD PTR [esi]

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00066	c1 fa 03	 sar	 edx, 3
  00069	8b da		 mov	 ebx, edx
  0006b	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0006e	03 da		 add	 ebx, edx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00070	85 c0		 test	 eax, eax
  00072	74 20		 je	 SHORT $LN3@Reallocate

; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00074	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00077	2b c8		 sub	 ecx, eax
  00079	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
  0007e	f7 e9		 imul	 ecx
  00080	8b ce		 mov	 ecx, esi
  00082	c1 fa 03	 sar	 edx, 3
  00085	8b c2		 mov	 eax, edx
  00087	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008a	03 c2		 add	 eax, edx
  0008c	50		 push	 eax
  0008d	ff 36		 push	 DWORD PTR [esi]
  0008f	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@I@Z ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::deallocate
$LN3@Reallocate:

; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;

  00094	6b 45 08 2c	 imul	 eax, DWORD PTR __Count$[ebp], 44
  00098	03 c7		 add	 eax, edi
  0009a	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  0009d	6b c3 2c	 imul	 eax, ebx, 44
  000a0	03 c7		 add	 eax, edi
  000a2	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  000a5	89 3e		 mov	 DWORD PTR [esi], edi

; 1642 : 		}

  000a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b1	59		 pop	 ecx
  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z$0:

; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);

  000bb	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  000be	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  000c4	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@I@Z ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::deallocate

; 1627 : 		_RERAISE;

  000c9	6a 00		 push	 0
  000cb	6a 00		 push	 0
  000cd	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN175@Reallocate:
$LN174@Reallocate:
  000d2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IBE_NPBU_stSendNPCInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IBE_NPBU_stSendNPCInfo@@@Z PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IBE_NPBU_stSendNPCInfo@@@Z ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IBEII@Z PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0000d	b9 5d 74 d1 05	 mov	 ecx, 97612893		; 05d1745dH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00012	f7 ea		 imul	 edx
  00014	56		 push	 esi
  00015	c1 fa 03	 sar	 edx, 3
  00018	8b f2		 mov	 esi, edx
  0001a	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001d	03 f2		 add	 esi, edx

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0001f	8b c6		 mov	 eax, esi
  00021	d1 e8		 shr	 eax, 1
  00023	57		 push	 edi
  00024	2b c8		 sub	 ecx, eax
  00026	33 ff		 xor	 edi, edi
  00028	3b ce		 cmp	 ecx, esi
  0002a	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0002d	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00030	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00033	5f		 pop	 edi
  00034	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  00038	8b c2		 mov	 eax, edx
  0003a	5e		 pop	 esi

; 1612 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Grow_to@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IBEII@Z ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXPAU_stSendNPCInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXPAU_stSendNPCInfo@@0@Z PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXPAU_stSendNPCInfo@@0@Z ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?swap@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?swap@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXAAV12@@Z PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::swap, COMDAT
; _this$ = ecx

; 1548 : 		{	// exchange contents with _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1549 : 		if (this == &_Right)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 20		 je	 SHORT $LN7@swap
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	8b 16		 mov	 edx, DWORD PTR [esi]
  00012	89 06		 mov	 DWORD PTR [esi], eax

; 54   : 	_Right = _Move(_Tmp);

  00014	89 17		 mov	 DWORD PTR [edi], edx

; 52   : 	_Ty _Tmp = _Move(_Left);

  00016	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 53   : 	_Left = _Move(_Right);

  00019	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 54   : 	_Right = _Move(_Tmp);

  0001f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 52   : 	_Ty _Tmp = _Move(_Left);

  00022	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 53   : 	_Left = _Move(_Right);

  00025	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 54   : 	_Right = _Move(_Tmp);

  0002b	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
$LN7@swap:
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1576 : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?swap@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::swap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::clear, COMDAT
; _this$ = ecx

; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1543 : 		}

  00005	c3		 ret	 0
?clear@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXABU_stSendNPCInfo@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXABU_stSendNPCInfo@@@Z PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 5b		 jae	 SHORT $LN2@push_back
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 55		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f8		 sub	 edi, eax
  00019	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
  0001e	f7 ef		 imul	 edi
  00020	c1 fa 03	 sar	 edx, 3
  00023	8b fa		 mov	 edi, edx
  00025	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00028	03 fa		 add	 edi, edx

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0002a	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002d	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  0002f	6a 01		 push	 1
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?_Reserve@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00038	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003b	85 c9		 test	 ecx, ecx
  0003d	74 60		 je	 SHORT $LN205@push_back
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1281 : 			this->_Getal().construct(this->_Mylast(),

  0003f	6b c7 2c	 imul	 eax, edi, 44
  00042	5f		 pop	 edi
  00043	03 06		 add	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00045	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00048	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0004b	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  0004f	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  00053	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00058	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  0005d	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00060	89 41 28	 mov	 DWORD PTR [ecx+40], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00063	83 46 04 2c	 add	 DWORD PTR [esi+4], 44	; 0000002cH
  00067	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
$LN2@push_back:

; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  0006c	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0006f	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  00071	6a 01		 push	 1
  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?_Reserve@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0007a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0007d	85 c9		 test	 ecx, ecx
  0007f	74 1e		 je	 SHORT $LN205@push_back
  00081	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00084	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00087	0f 10 47 10	 movups	 xmm0, XMMWORD PTR [edi+16]
  0008b	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  0008f	f3 0f 7e 47 20	 movq	 xmm0, QWORD PTR [edi+32]
  00094	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  00099	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  0009c	89 41 28	 mov	 DWORD PTR [ecx+40], eax
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  0009f	83 46 04 2c	 add	 DWORD PTR [esi+4], 44	; 0000002cH
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  000a5	5d		 pop	 ebp
  000a6	c2 04 00	 ret	 4
?push_back@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXABU_stSendNPCInfo@@@Z ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEAAU_stSendNPCInfo@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEAAU_stSendNPCInfo@@I@Z PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::operator[], COMDAT
; _this$ = ecx

; 1228 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00003	6b 45 08 2c	 imul	 eax, DWORD PTR __Pos$[ebp], 44
  00007	03 01		 add	 eax, DWORD PTR [ecx]

; 1241 : 		}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
??A?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEAAU_stSendNPCInfo@@I@Z ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 5d 74 d1 05	 mov	 eax, 97612893		; 05d1745dH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 03	 sar	 edx, 3
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1180 : 		}

  00016	c3		 ret	 0
?size@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
  00008	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 03	 sar	 edx, 3
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx

; 1048 : 		}

  00017	c3		 ret	 0
?_Unused_capacity@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 03	 sar	 edx, 3
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1043 : 		}

  00016	c3		 ret	 0
?capacity@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::~vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 33		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	c1 fa 03	 sar	 edx, 3
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@I@Z ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00035	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0003c	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0003d	c3		 ret	 0
??1?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::~vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >,std::_Vector_val<std::_Simple_types<_stSendNPCInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >,std::_Vector_val<std::_Simple_types<_stSendNPCInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >,std::_Vector_val<std::_Simple_types<_stSendNPCInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >,std::_Vector_val<std::_Simple_types<_stSendNPCInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >,std::_Vector_val<std::_Simple_types<_stSendNPCInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >,std::_Vector_val<std::_Simple_types<_stSendNPCInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >,std::_Vector_val<std::_Simple_types<_stSendNPCInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >,std::_Vector_val<std::_Simple_types<_stSendNPCInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<_stSendNPCInfo> >::_Vector_val<std::_Simple_types<_stSendNPCInfo> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<_stSendNPCInfo> >::_Vector_val<std::_Simple_types<_stSendNPCInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QBEABQAU_stSendNPCInfo@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QBEABQAU_stSendNPCInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QBEABQAU_stSendNPCInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEAAPAU_stSendNPCInfo@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEAAPAU_stSendNPCInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEAAPAU_stSendNPCInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QBEABQAU_stSendNPCInfo@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QBEABQAU_stSendNPCInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QBEABQAU_stSendNPCInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEAAPAU_stSendNPCInfo@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEAAPAU_stSendNPCInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEAAPAU_stSendNPCInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QBEABQAU_stSendNPCInfo@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QBEABQAU_stSendNPCInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QBEABQAU_stSendNPCInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEAAPAU_stSendNPCInfo@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEAAPAU_stSendNPCInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEAAPAU_stSendNPCInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stSendNPCInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Swap_all, COMDAT
; _this$ = ecx

; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}

  00000	c2 04 00	 ret	 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Swap_alloc, COMDAT
; _this$ = ecx

; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}

  00000	c2 04 00	 ret	 4
?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Swap_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@U_stSendNPCInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@U_stSendNPCInfo@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@U_stSendNPCInfo@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >::_Vector_alloc<std::_Vec_base_types<_stSendNPCInfo,std::allocator<_stSendNPCInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 5d 74 d1 05	 mov	 eax, 97612893		; 05d1745dH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 139  : 	}
; 140  : 
; 141  : 		// TEMPLATE FUNCTION _Construct
; 142  : template<class _Ty1,
; 143  : 	class _Ty2> inline
; 144  : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 145  : 	{	// construct object at _Ptr with value _Val
; 146  : 	void *_Vptr = _Ptr;
; 147  : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 148  : 	}
; 149  : 
; 150  : template<class _Ty1> inline
; 151  : 	void _Construct(_Ty1 *_Ptr)
; 152  : 	{	// construct object at _Ptr with default value
; 153  : 	void *_Vptr = _Ptr;
; 154  : 
; 155  : 	::new (_Vptr) _Ty1();
; 156  : 	}
; 157  : 
; 158  : 		// TEMPLATE FUNCTION _Destroy
; 159  : template<class _Ty> inline
; 160  : 	void _Destroy(_Ty *_Ptr)
; 161  : 	{	// destroy object at _Ptr
; 162  : 	_Ptr->~_Ty();
; 163  : 	}
; 164  : 
; 165  : 		// TEMPLATE FUNCTION _Destroy_range
; 166  : template<class _Alloc> inline
; 167  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 168  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 169  : 		_Nonscalar_ptr_iterator_tag)
; 170  : 	{	// destroy [_First, _Last), arbitrary type
; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d 5d 74 d1 05	 cmp	 eax, 97612893		; 05d1745dH
  0000e	77 31		 ja	 SHORT $LN16@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	6b c0 2c	 imul	 eax, eax, 44

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN7@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN18@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN19@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN20@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN21@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN7@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 909  : 		_Mybase::deallocate(_Ptr, _Count);
; 910  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN16@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  0005a	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEPAU_stSendNPCInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEPAU_stSendNPCInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@U_stSendNPCInfo@@@std@@QAEPAU_stSendNPCInfo@@I@Z ; std::allocator<_stSendNPCInfo>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEPAU_stSendNPCInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAE@ABV?$allocator@U_stSendNPCInfo@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAE@ABV?$allocator@U_stSendNPCInfo@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::_Wrap_alloc<std::allocator<_stSendNPCInfo> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAE@ABV?$allocator@U_stSendNPCInfo@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::_Wrap_alloc<std::allocator<_stSendNPCInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U_stSendNPCInfo@@@std@@@std@@SAIABV?$allocator@U_stSendNPCInfo@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U_stSendNPCInfo@@@std@@@std@@SAIABV?$allocator@U_stSendNPCInfo@@@2@@Z PROC ; std::allocator_traits<std::allocator<_stSendNPCInfo> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 5d 74 d1 05	 mov	 eax, 97612893		; 05d1745dH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U_stSendNPCInfo@@@std@@@std@@SAIABV?$allocator@U_stSendNPCInfo@@@2@@Z ENDP ; std::allocator_traits<std::allocator<_stSendNPCInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U_stSendNPCInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U_stSendNPCInfo@@@std@@QBEIXZ PROC ; std::allocator<_stSendNPCInfo>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 5d 74 d1 05	 mov	 eax, 97612893		; 05d1745dH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U_stSendNPCInfo@@@std@@QBEIXZ ENDP ; std::allocator<_stSendNPCInfo>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_stSendNPCInfo@@@std@@QAEPAU_stSendNPCInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_stSendNPCInfo@@@std@@QAEPAU_stSendNPCInfo@@I@Z PROC ; std::allocator<_stSendNPCInfo>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d 5d 74 d1 05	 cmp	 eax, 97612893		; 05d1745dH
  00013	77 3c		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	6b c0 2c	 imul	 eax, eax, 44

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@U_stSendNPCInfo@@@std@@QAEPAU_stSendNPCInfo@@I@Z ENDP ; std::allocator<_stSendNPCInfo>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U_stSendNPCInfo@@@std@@QAEXPAU_stSendNPCInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U_stSendNPCInfo@@@std@@QAEXPAU_stSendNPCInfo@@I@Z PROC ; std::allocator<_stSendNPCInfo>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d 5d 74 d1 05	 cmp	 eax, 97612893		; 05d1745dH
  0000e	77 31		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	6b c0 2c	 imul	 eax, eax, 44

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 639  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005a	cc		 int	 3
?deallocate@?$allocator@U_stSendNPCInfo@@@std@@QAEXPAU_stSendNPCInfo@@I@Z ENDP ; std::allocator<_stSendNPCInfo>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_stSendNPCInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U_stSendNPCInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<_stSendNPCInfo>::allocator<_stSendNPCInfo>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@U_stSendNPCInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<_stSendNPCInfo>::allocator<_stSendNPCInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_stSendNPCInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U_stSendNPCInfo@@@std@@QAE@XZ PROC	; std::allocator<_stSendNPCInfo>::allocator<_stSendNPCInfo>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U_stSendNPCInfo@@@std@@QAE@XZ ENDP	; std::allocator<_stSendNPCInfo>::allocator<_stSendNPCInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
;	COMDAT ?SendPortalCoordinate@Minimap@@QAEXHE@Z
_TEXT	SEGMENT
_sendPortalInfo$ = -88					; size = 40
_pMsg$ = -48						; size = 41
__$ArrayPad$ = -4					; size = 4
_nDestUserIndex$ = 8					; size = 4
_btMapNumber$ = 12					; size = 1
?SendPortalCoordinate@Minimap@@QAEXHE@Z PROC		; Minimap::SendPortalCoordinate, COMDAT
; _this$ = ecx

; 321  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 322  : 	if (!OBJMAX_RANGE(nDestUserIndex))

  00013	8b 4d 08	 mov	 ecx, DWORD PTR _nDestUserIndex$[ebp]
  00016	85 c9		 test	 ecx, ecx
  00018	0f 88 eb 00 00
	00		 js	 $LN3@SendPortal
  0001e	33 c0		 xor	 eax, eax
  00020	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00026	0f 9e c0	 setle	 al
  00029	85 c0		 test	 eax, eax
  0002b	0f 84 d8 00 00
	00		 je	 $LN3@SendPortal
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00031	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00034	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00039	2b 4e 10	 sub	 ecx, DWORD PTR [esi+16]
  0003c	f7 e9		 imul	 ecx
  0003e	53		 push	 ebx
  0003f	c1 fa 04	 sar	 edx, 4
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 331  : 	for (int i = 0; i < this->m_vtSendPortalInfo.size(); i++)

  00042	33 db		 xor	 ebx, ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00044	8b c2		 mov	 eax, edx
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00046	c7 45 d0 c1 29
	e7 03		 mov	 DWORD PTR _pMsg$[ebp], 65481153 ; 03e729c1H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0004d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00050	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 331  : 	for (int i = 0; i < this->m_vtSendPortalInfo.size(); i++)

  00052	0f 84 b0 00 00
	00		 je	 $LN48@SendPortal
  00058	57		 push	 edi
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00059	33 ff		 xor	 edi, edi
  0005b	0f 1f 44 00 00	 npad	 5
$LL4@SendPortal:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00060	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 333  : 		sendPortalInfo = this->m_vtSendPortalInfo[i];

  00063	0f 10 0c 38	 movups	 xmm1, XMMWORD PTR [eax+edi]
  00067	0f 10 44 38 10	 movups	 xmm0, XMMWORD PTR [eax+edi+16]
  0006c	0f 11 4d a8	 movups	 XMMWORD PTR _sendPortalInfo$[ebp], xmm1

; 334  : 
; 335  : 		if (sendPortalInfo.btMapNumber == btMapNumber)

  00070	66 0f 73 d9 04	 psrldq	 xmm1, 4
  00075	66 0f 7e c9	 movd	 ecx, xmm1
  00079	0f 11 45 b8	 movups	 XMMWORD PTR _sendPortalInfo$[ebp+16], xmm0
  0007d	f3 0f 7e 44 38
	20		 movq	 xmm0, QWORD PTR [eax+edi+32]
  00083	8b c1		 mov	 eax, ecx
  00085	c1 e8 10	 shr	 eax, 16			; 00000010H
  00088	66 0f d6 45 c8	 movq	 QWORD PTR _sendPortalInfo$[ebp+32], xmm0
  0008d	3a 45 0c	 cmp	 al, BYTE PTR _btMapNumber$[ebp]
  00090	75 52		 jne	 SHORT $LN2@SendPortal

; 336  : 		{
; 337  : 			pMsg.btPosX = sendPortalInfo.btPosX;

  00092	0f b6 45 ac	 movzx	 eax, BYTE PTR _sendPortalInfo$[ebp+4]

; 338  : 			pMsg.btPosY = sendPortalInfo.btPosY;
; 339  : 			pMsg.btTag = 1;
; 340  : 			pMsg.btType = 0;
; 341  : 			pMsg.btIdentNo = sendPortalInfo.nIdentNo;
; 342  : 			pMsg.btIsNpc = 0;
; 343  : 			memcpy(pMsg.szName, sendPortalInfo.szName, sizeof(pMsg.szName) - 1);

  00096	0f 10 45 af	 movups	 xmm0, XMMWORD PTR _sendPortalInfo$[ebp+7]
  0009a	88 45 d8	 mov	 BYTE PTR _pMsg$[ebp+8], al
  0009d	0f b6 45 a8	 movzx	 eax, BYTE PTR _sendPortalInfo$[ebp]
  000a1	88 45 d4	 mov	 BYTE PTR _pMsg$[ebp+4], al
  000a4	8b 45 c7	 mov	 eax, DWORD PTR _sendPortalInfo$[ebp+31]
  000a7	89 45 f2	 mov	 DWORD PTR _pMsg$[ebp+34], eax
  000aa	66 8b 45 cb	 mov	 ax, WORD PTR _sendPortalInfo$[ebp+35]
  000ae	66 89 45 f6	 mov	 WORD PTR _pMsg$[ebp+38], ax

; 344  : 			DataSend(nDestUserIndex, (LPBYTE)&pMsg, pMsg.h.size);

  000b2	0f b6 45 d1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000b6	50		 push	 eax
  000b7	8d 45 d0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000ba	c1 e9 08	 shr	 ecx, 8
  000bd	50		 push	 eax
  000be	ff 75 08	 push	 DWORD PTR _nDestUserIndex$[ebp]
  000c1	0f 11 45 da	 movups	 XMMWORD PTR _pMsg$[ebp+10], xmm0
  000c5	88 4d d9	 mov	 BYTE PTR _pMsg$[ebp+9], cl
  000c8	f3 0f 7e 45 bf	 movq	 xmm0, QWORD PTR _sendPortalInfo$[ebp+23]
  000cd	66 c7 45 d6 01
	00		 mov	 WORD PTR _pMsg$[ebp+6], 1
  000d3	c6 45 d5 00	 mov	 BYTE PTR _pMsg$[ebp+5], 0
  000d7	66 0f d6 45 ea	 movq	 QWORD PTR _pMsg$[ebp+26], xmm0
  000dc	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@SendPortal:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  000e4	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000e7	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  000ec	2b 4e 10	 sub	 ecx, DWORD PTR [esi+16]
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 331  : 	for (int i = 0; i < this->m_vtSendPortalInfo.size(); i++)

  000ef	43		 inc	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  000f0	f7 e9		 imul	 ecx
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 331  : 	for (int i = 0; i < this->m_vtSendPortalInfo.size(); i++)

  000f2	83 c7 28	 add	 edi, 40			; 00000028H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  000f5	c1 fa 04	 sar	 edx, 4
  000f8	8b c2		 mov	 eax, edx
  000fa	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000fd	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 331  : 	for (int i = 0; i < this->m_vtSendPortalInfo.size(); i++)

  000ff	3b d8		 cmp	 ebx, eax
  00101	0f 82 59 ff ff
	ff		 jb	 $LL4@SendPortal
  00107	5f		 pop	 edi
$LN48@SendPortal:
  00108	5b		 pop	 ebx
$LN3@SendPortal:

; 345  : 		}
; 346  : 	}
; 347  : 
; 348  : }

  00109	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010c	33 cd		 xor	 ecx, ebp
  0010e	5e		 pop	 esi
  0010f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c2 08 00	 ret	 8
?SendPortalCoordinate@Minimap@@QAEXHE@Z ENDP		; Minimap::SendPortalCoordinate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
;	COMDAT ?SendPortalCoordinateMoveNpc@Minimap@@QAEXEEEEEEH@Z
_TEXT	SEGMENT
_sendNpcInfo$ = -140					; size = 44
tv359 = -96						; size = 4
_pInsertMsg$ = -92					; size = 41
_pDeleteMsg$ = -48					; size = 41
__$ArrayPad$ = -4					; size = 4
_btBeforeMapNumber$ = 8					; size = 1
_btAfterMapNumber$ = 12					; size = 1
_btBeforeX$ = 16					; size = 1
_btBeforeY$ = 20					; size = 1
_btX$ = 24						; size = 1
_btY$ = 28						; size = 1
_nNpcClass$ = 32					; size = 4
?SendPortalCoordinateMoveNpc@Minimap@@QAEXEEEEEEH@Z PROC ; Minimap::SendPortalCoordinateMoveNpc, COMDAT
; _this$ = ecx

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00016	c7 45 d0 c1 29
	e7 03		 mov	 DWORD PTR _pDeleteMsg$[ebp], 65481153 ; 03e729c1H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0001d	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00022	c7 45 a4 c1 29
	e7 03		 mov	 DWORD PTR _pInsertMsg$[ebp], 65481153 ; 03e729c1H
  00029	56		 push	 esi
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 272  : 	for (int i = 0; i < this->m_vtSendNpcInfo.size(); i++)

  0002a	33 f6		 xor	 esi, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0002c	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0002f	2b 4b 04	 sub	 ecx, DWORD PTR [ebx+4]
  00032	f7 e9		 imul	 ecx
  00034	57		 push	 edi
  00035	c1 fa 03	 sar	 edx, 3
  00038	8b c2		 mov	 eax, edx
  0003a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003d	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 272  : 	for (int i = 0; i < this->m_vtSendNpcInfo.size(); i++)

  0003f	0f 84 09 01 00
	00		 je	 $LN3@SendPortal
  00045	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00048	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  0004d	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00050	2b cf		 sub	 ecx, edi
  00052	f7 e9		 imul	 ecx
  00054	c1 fa 03	 sar	 edx, 3
  00057	8b c2		 mov	 eax, edx
  00059	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005c	03 c2		 add	 eax, edx
  0005e	89 45 a0	 mov	 DWORD PTR tv359[ebp], eax
$LL4@SendPortal:
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 274  : 		sendNpcInfo = this->m_vtSendNpcInfo[i];

  00061	0f 10 0f	 movups	 xmm1, XMMWORD PTR [edi]
  00064	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  00067	0f 10 47 10	 movups	 xmm0, XMMWORD PTR [edi+16]
  0006b	89 45 9c	 mov	 DWORD PTR _sendNpcInfo$[ebp+40], eax
  0006e	0f 11 8d 74 ff
	ff ff		 movups	 XMMWORD PTR _sendNpcInfo$[ebp], xmm1

; 275  : 
; 276  : 		if (sendNpcInfo.btMapNumber == btBeforeMapNumber && sendNpcInfo.btSync == 2 
; 277  : 			&& sendNpcInfo.nNpcClass == nNpcClass)

  00075	8b 9d 74 ff ff
	ff		 mov	 ebx, DWORD PTR _sendNpcInfo$[ebp]
  0007b	66 0f 73 d9 08	 psrldq	 xmm1, 8
  00080	66 0f 7e c9	 movd	 ecx, xmm1
  00084	0f 11 45 84	 movups	 XMMWORD PTR _sendNpcInfo$[ebp+16], xmm0
  00088	f3 0f 7e 47 20	 movq	 xmm0, QWORD PTR [edi+32]
  0008d	8b d1		 mov	 edx, ecx
  0008f	0f 10 4d 81	 movups	 xmm1, XMMWORD PTR _sendNpcInfo$[ebp+13]
  00093	c1 ea 10	 shr	 edx, 16			; 00000010H
  00096	66 0f d6 45 94	 movq	 QWORD PTR _sendNpcInfo$[ebp+32], xmm0
  0009b	f3 0f 7e 45 91	 movq	 xmm0, QWORD PTR _sendNpcInfo$[ebp+29]
  000a0	3a 55 08	 cmp	 dl, BYTE PTR _btBeforeMapNumber$[ebp]
  000a3	75 4d		 jne	 SHORT $LN61@SendPortal
  000a5	8b c1		 mov	 eax, ecx
  000a7	c1 e8 08	 shr	 eax, 8
  000aa	3c 02		 cmp	 al, 2
  000ac	75 44		 jne	 SHORT $LN61@SendPortal
  000ae	3b 5d 20	 cmp	 ebx, DWORD PTR _nNpcClass$[ebp]
  000b1	75 3f		 jne	 SHORT $LN61@SendPortal

; 278  : 		{
; 279  : 			pDeleteMsg.btPosX = btBeforeX;

  000b3	8a 45 10	 mov	 al, BYTE PTR _btBeforeX$[ebp]
  000b6	88 45 d8	 mov	 BYTE PTR _pDeleteMsg$[ebp+8], al

; 280  : 			pDeleteMsg.btPosY = btBeforeY;

  000b9	8a 45 14	 mov	 al, BYTE PTR _btBeforeY$[ebp]
  000bc	88 45 d9	 mov	 BYTE PTR _pDeleteMsg$[ebp+9], al

; 281  : 			pDeleteMsg.btTag = sendNpcInfo.btTag;

  000bf	8a 85 7c ff ff
	ff		 mov	 al, BYTE PTR _sendNpcInfo$[ebp+8]
  000c5	88 45 d6	 mov	 BYTE PTR _pDeleteMsg$[ebp+6], al

; 282  : 			pDeleteMsg.btIdentNo = sendNpcInfo.nIdentNo;

  000c8	8a 85 78 ff ff
	ff		 mov	 al, BYTE PTR _sendNpcInfo$[ebp+4]
  000ce	88 45 d4	 mov	 BYTE PTR _pDeleteMsg$[ebp+4], al

; 283  : 			pDeleteMsg.btType = 1;
; 284  : 			pDeleteMsg.btIsNpc = 1;
; 285  : 			memcpy(pDeleteMsg.szName, sendNpcInfo.szName, sizeof(pDeleteMsg.szName) - 1);

  000d1	8b 45 99	 mov	 eax, DWORD PTR _sendNpcInfo$[ebp+37]
  000d4	89 45 f2	 mov	 DWORD PTR _pDeleteMsg$[ebp+34], eax
  000d7	66 8b 45 9d	 mov	 ax, WORD PTR _sendNpcInfo$[ebp+41]
  000db	c6 45 d7 01	 mov	 BYTE PTR _pDeleteMsg$[ebp+7], 1
  000df	c6 45 d5 01	 mov	 BYTE PTR _pDeleteMsg$[ebp+5], 1
  000e3	0f 11 4d da	 movups	 XMMWORD PTR _pDeleteMsg$[ebp+10], xmm1
  000e7	66 89 45 f6	 mov	 WORD PTR _pDeleteMsg$[ebp+38], ax
  000eb	66 0f d6 45 ea	 movq	 QWORD PTR _pDeleteMsg$[ebp+26], xmm0
  000f0	eb 04		 jmp	 SHORT $LN8@SendPortal
$LN61@SendPortal:
  000f2	66 8b 45 9d	 mov	 ax, WORD PTR _sendNpcInfo$[ebp+41]
$LN8@SendPortal:

; 286  : 		}
; 287  : 
; 288  : 		if (sendNpcInfo.btMapNumber == btAfterMapNumber && sendNpcInfo.btSync == 2
; 289  : 			&& sendNpcInfo.nNpcClass == nNpcClass)

  000f6	3a 55 0c	 cmp	 dl, BYTE PTR _btAfterMapNumber$[ebp]
  000f9	75 46		 jne	 SHORT $LN2@SendPortal
  000fb	c1 e9 08	 shr	 ecx, 8
  000fe	80 f9 02	 cmp	 cl, 2
  00101	75 3e		 jne	 SHORT $LN2@SendPortal
  00103	3b 5d 20	 cmp	 ebx, DWORD PTR _nNpcClass$[ebp]
  00106	75 39		 jne	 SHORT $LN2@SendPortal

; 290  : 		{
; 291  : 
; 292  : 			pInsertMsg.btPosX = btX;

  00108	8a 4d 18	 mov	 cl, BYTE PTR _btX$[ebp]
  0010b	88 4d ac	 mov	 BYTE PTR _pInsertMsg$[ebp+8], cl

; 293  : 			pInsertMsg.btPosY = btY;

  0010e	8a 4d 1c	 mov	 cl, BYTE PTR _btY$[ebp]
  00111	88 4d ad	 mov	 BYTE PTR _pInsertMsg$[ebp+9], cl

; 294  : 			pInsertMsg.btTag = sendNpcInfo.btTag;

  00114	8a 8d 7c ff ff
	ff		 mov	 cl, BYTE PTR _sendNpcInfo$[ebp+8]
  0011a	88 4d aa	 mov	 BYTE PTR _pInsertMsg$[ebp+6], cl

; 295  : 			pInsertMsg.btType = 0;
; 296  : 			pInsertMsg.btIdentNo = LOBYTE(sendNpcInfo.nIdentNo);

  0011d	8a 8d 78 ff ff
	ff		 mov	 cl, BYTE PTR _sendNpcInfo$[ebp+4]
  00123	88 4d a8	 mov	 BYTE PTR _pInsertMsg$[ebp+4], cl

; 297  : 			pInsertMsg.btIsNpc = 1;
; 298  : 			memcpy(pInsertMsg.szName, sendNpcInfo.szName, 0x1Eu);

  00126	8b 4d 99	 mov	 ecx, DWORD PTR _sendNpcInfo$[ebp+37]
  00129	c6 45 ab 00	 mov	 BYTE PTR _pInsertMsg$[ebp+7], 0
  0012d	c6 45 a9 01	 mov	 BYTE PTR _pInsertMsg$[ebp+5], 1
  00131	0f 11 4d ae	 movups	 XMMWORD PTR _pInsertMsg$[ebp+10], xmm1
  00135	89 4d c6	 mov	 DWORD PTR _pInsertMsg$[ebp+34], ecx
  00138	66 0f d6 45 be	 movq	 QWORD PTR _pInsertMsg$[ebp+26], xmm0
  0013d	66 89 45 ca	 mov	 WORD PTR _pInsertMsg$[ebp+38], ax
$LN2@SendPortal:

; 272  : 	for (int i = 0; i < this->m_vtSendNpcInfo.size(); i++)

  00141	46		 inc	 esi
  00142	83 c7 2c	 add	 edi, 44			; 0000002cH
  00145	3b 75 a0	 cmp	 esi, DWORD PTR tv359[ebp]
  00148	0f 82 13 ff ff
	ff		 jb	 $LL4@SendPortal
$LN3@SendPortal:
  0014e	8a 5d 0c	 mov	 bl, BYTE PTR _btAfterMapNumber$[ebp]

; 299  : 		}
; 300  : 	}
; 301  : 
; 302  : 	for (int n = OBJ_STARTUSERINDEX; n < OBJMAX; n++)

  00151	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  00156	8a 7d 08	 mov	 bh, BYTE PTR _btBeforeMapNumber$[ebp]
  00159	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  0015e	66 90		 npad	 2
$LL7@SendPortal:

; 303  : 	{
; 304  : 		if (gObj[n].Connected != 3)

  00160	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00165	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  0016a	75 2b		 jne	 SHORT $LN5@SendPortal

; 305  : 		{
; 306  : 			continue;
; 307  : 		}
; 308  : 
; 309  : 		if (gObj[n].MapNumber == btBeforeMapNumber)

  0016c	8a 84 06 23 01
	00 00		 mov	 al, BYTE PTR [esi+eax+291]
  00173	3a c7		 cmp	 al, bh
  00175	75 0a		 jne	 SHORT $LN11@SendPortal

; 310  : 		{
; 311  : 			DataSend(n, (LPBYTE)&pDeleteMsg, pDeleteMsg.h.size);

  00177	0f b6 45 d1	 movzx	 eax, BYTE PTR _pDeleteMsg$[ebp+1]
  0017b	50		 push	 eax
  0017c	8d 45 d0	 lea	 eax, DWORD PTR _pDeleteMsg$[ebp]
  0017f	eb 0c		 jmp	 SHORT $LN63@SendPortal
$LN11@SendPortal:

; 312  : 		}
; 313  : 		else if (gObj[n].MapNumber == btAfterMapNumber)

  00181	3a c3		 cmp	 al, bl
  00183	75 12		 jne	 SHORT $LN5@SendPortal

; 314  : 		{
; 315  : 			DataSend(n, (LPBYTE)&pInsertMsg, pInsertMsg.h.size);

  00185	0f b6 45 a5	 movzx	 eax, BYTE PTR _pInsertMsg$[ebp+1]
  00189	50		 push	 eax
  0018a	8d 45 a4	 lea	 eax, DWORD PTR _pInsertMsg$[ebp]
$LN63@SendPortal:
  0018d	50		 push	 eax
  0018e	57		 push	 edi
  0018f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00194	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@SendPortal:

; 299  : 		}
; 300  : 	}
; 301  : 
; 302  : 	for (int n = OBJ_STARTUSERINDEX; n < OBJMAX; n++)

  00197	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  0019d	47		 inc	 edi
  0019e	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  001a4	7c ba		 jl	 SHORT $LL7@SendPortal

; 316  : 		}
; 317  :     }
; 318  : }

  001a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a9	5f		 pop	 edi
  001aa	5e		 pop	 esi
  001ab	33 cd		 xor	 ecx, ebp
  001ad	5b		 pop	 ebx
  001ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b3	8b e5		 mov	 esp, ebp
  001b5	5d		 pop	 ebp
  001b6	c2 1c 00	 ret	 28			; 0000001cH
?SendPortalCoordinateMoveNpc@Minimap@@QAEXEEEEEEH@Z ENDP ; Minimap::SendPortalCoordinateMoveNpc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
;	COMDAT ?SendNpcCoordinate@Minimap@@QAEXHEE@Z
_TEXT	SEGMENT
_sendNpcInfo$ = -100					; size = 44
tv353 = -56						; size = 4
_i$1$ = -52						; size = 4
_pMsg$ = -48						; size = 41
__$ArrayPad$ = -4					; size = 4
_nDestUserIndex$ = 8					; size = 4
_btMapIndex$ = 12					; size = 1
_btAddType$ = 16					; size = 1
?SendNpcCoordinate@Minimap@@QAEXHEE@Z PROC		; Minimap::SendNpcCoordinate, COMDAT
; _this$ = ecx

; 216  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	57		 push	 edi
  00011	8b f9		 mov	 edi, ecx

; 217  : 	if (!OBJMAX_RANGE(nDestUserIndex))

  00013	8b 4d 08	 mov	 ecx, DWORD PTR _nDestUserIndex$[ebp]
  00016	85 c9		 test	 ecx, ecx
  00018	0f 88 ce 01 00
	00		 js	 $LN3@SendNpcCoo
  0001e	33 c0		 xor	 eax, eax
  00020	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00026	0f 9e c0	 setle	 al
  00029	85 c0		 test	 eax, eax
  0002b	0f 84 bb 01 00
	00		 je	 $LN3@SendNpcCoo
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00031	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00034	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
  00039	2b 4f 04	 sub	 ecx, DWORD PTR [edi+4]
  0003c	f7 e9		 imul	 ecx
  0003e	53		 push	 ebx
  0003f	c1 fa 03	 sar	 edx, 3
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 141  : 		lpBuf[1] = size;

  00042	b3 29		 mov	 bl, 41			; 00000029H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00044	8b c2		 mov	 eax, edx
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00046	c7 45 d0 c1 29
	e7 03		 mov	 DWORD PTR _pMsg$[ebp], 65481153 ; 03e729c1H
  0004d	56		 push	 esi
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 226  : 	for (int i = 0; i < this->m_vtSendNpcInfo.size(); i++)

  0004e	33 f6		 xor	 esi, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00050	c1 e8 1f	 shr	 eax, 31			; 0000001fH
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 226  : 	for (int i = 0; i < this->m_vtSendNpcInfo.size(); i++)

  00053	89 75 cc	 mov	 DWORD PTR _i$1$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00056	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 226  : 	for (int i = 0; i < this->m_vtSendNpcInfo.size(); i++)

  00058	0f 84 8c 01 00
	00		 je	 $LN61@SendNpcCoo
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  0005e	8a 7d 0c	 mov	 bh, BYTE PTR _btMapIndex$[ebp]
  00061	33 c9		 xor	 ecx, ecx
  00063	89 4d c8	 mov	 DWORD PTR tv353[ebp], ecx
$LL4@SendNpcCoo:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00066	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00069	03 c1		 add	 eax, ecx
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 228  : 		sendNpcInfo = m_vtSendNpcInfo[i];

  0006b	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  0006e	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00072	0f 11 4d 9c	 movups	 XMMWORD PTR _sendNpcInfo$[ebp], xmm1

; 229  : 
; 230  : 		if (sendNpcInfo.btMapNumber == btMapIndex && sendNpcInfo.btSync == 1)

  00076	66 0f 73 d9 08	 psrldq	 xmm1, 8
  0007b	0f 11 45 ac	 movups	 XMMWORD PTR _sendNpcInfo$[ebp+16], xmm0
  0007f	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00084	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00087	66 0f 7e c9	 movd	 ecx, xmm1
  0008b	89 45 c4	 mov	 DWORD PTR _sendNpcInfo$[ebp+40], eax
  0008e	66 0f d6 45 bc	 movq	 QWORD PTR _sendNpcInfo$[ebp+32], xmm0
  00093	8b c1		 mov	 eax, ecx
  00095	c1 e8 10	 shr	 eax, 16			; 00000010H
  00098	3a c7		 cmp	 al, bh
  0009a	75 66		 jne	 SHORT $LN9@SendNpcCoo
  0009c	8b c1		 mov	 eax, ecx
  0009e	c1 e8 08	 shr	 eax, 8
  000a1	3c 01		 cmp	 al, 1
  000a3	75 5d		 jne	 SHORT $LN9@SendNpcCoo

; 231  : 		{
; 232  : 			pMsg.btPosX = sendNpcInfo.btPosX;
; 233  : 			pMsg.btPosY = sendNpcInfo.btPosY;

  000a5	0f b6 45 a8	 movzx	 eax, BYTE PTR _sendNpcInfo$[ebp+12]

; 234  : 			pMsg.btTag = sendNpcInfo.btTag;
; 235  : 			pMsg.btIdentNo = sendNpcInfo.nIdentNo;
; 236  : 			pMsg.btType = btAddType;
; 237  : 			pMsg.btIsNpc = 1;
; 238  : 			memcpy(pMsg.szName, sendNpcInfo.szName, sizeof(pMsg.szName) - 1);

  000a9	0f 10 45 a9	 movups	 xmm0, XMMWORD PTR _sendNpcInfo$[ebp+13]
  000ad	88 45 d9	 mov	 BYTE PTR _pMsg$[ebp+9], al
  000b0	0f b6 45 a4	 movzx	 eax, BYTE PTR _sendNpcInfo$[ebp+8]
  000b4	88 45 d6	 mov	 BYTE PTR _pMsg$[ebp+6], al
  000b7	0f b6 45 a0	 movzx	 eax, BYTE PTR _sendNpcInfo$[ebp+4]
  000bb	88 45 d4	 mov	 BYTE PTR _pMsg$[ebp+4], al
  000be	8a 45 10	 mov	 al, BYTE PTR _btAddType$[ebp]
  000c1	88 45 d7	 mov	 BYTE PTR _pMsg$[ebp+7], al
  000c4	8b 45 c1	 mov	 eax, DWORD PTR _sendNpcInfo$[ebp+37]
  000c7	89 45 f2	 mov	 DWORD PTR _pMsg$[ebp+34], eax
  000ca	66 8b 45 c5	 mov	 ax, WORD PTR _sendNpcInfo$[ebp+41]
  000ce	66 89 45 f6	 mov	 WORD PTR _pMsg$[ebp+38], ax

; 239  : 			DataSend(nDestUserIndex, (LPBYTE)&pMsg, pMsg.h.size);

  000d2	0f b6 c3	 movzx	 eax, bl
  000d5	50		 push	 eax
  000d6	8d 45 d0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000d9	c1 e9 18	 shr	 ecx, 24			; 00000018H
  000dc	50		 push	 eax
  000dd	ff 75 08	 push	 DWORD PTR _nDestUserIndex$[ebp]
  000e0	0f 11 45 da	 movups	 XMMWORD PTR _pMsg$[ebp+10], xmm0
  000e4	88 4d d8	 mov	 BYTE PTR _pMsg$[ebp+8], cl
  000e7	f3 0f 7e 45 b9	 movq	 xmm0, QWORD PTR _sendNpcInfo$[ebp+29]
  000ec	c6 45 d5 01	 mov	 BYTE PTR _pMsg$[ebp+5], 1
  000f0	66 0f d6 45 ea	 movq	 QWORD PTR _pMsg$[ebp+26], xmm0
  000f5	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000fa	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fd	e9 bb 00 00 00	 jmp	 $LN2@SendNpcCoo
$LN9@SendNpcCoo:

; 240  : 		}
; 241  : 		else if (sendNpcInfo.btMapNumber == btMapIndex && sendNpcInfo.btSync == 2)

  00102	8a 5d a6	 mov	 bl, BYTE PTR _sendNpcInfo$[ebp+10]
  00105	3a df		 cmp	 bl, bh
  00107	0f 85 b0 00 00
	00		 jne	 $LN2@SendNpcCoo
  0010d	80 7d a5 02	 cmp	 BYTE PTR _sendNpcInfo$[ebp+9], 2
  00111	0f 85 a6 00 00
	00		 jne	 $LN2@SendNpcCoo

; 242  :         {
; 243  : 			for (int n = 0; n < OBJ_MAXMONSTER; n++)

  00117	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0011c	33 d2		 xor	 edx, edx
  0011e	8b 75 9c	 mov	 esi, DWORD PTR _sendNpcInfo$[ebp]
  00121	05 23 01 00 00	 add	 eax, 291		; 00000123H
$LL7@SendNpcCoo:

; 244  : 			{
; 245  : 				if (gObj[n].Type != OBJ_USER
; 246  : 					&& gObj[n].MapNumber == sendNpcInfo.btMapNumber
; 247  : 					&& gObj[n].Class == sendNpcInfo.nNpcClass)

  00126	80 b8 2d ff ff
	ff 01		 cmp	 BYTE PTR [eax-211], 1
  0012d	74 0f		 je	 SHORT $LN5@SendNpcCoo
  0012f	38 18		 cmp	 BYTE PTR [eax], bl
  00131	75 0b		 jne	 SHORT $LN5@SendNpcCoo
  00133	0f b7 88 6d ff
	ff ff		 movzx	 ecx, WORD PTR [eax-147]
  0013a	3b ce		 cmp	 ecx, esi
  0013c	74 10		 je	 SHORT $LN52@SendNpcCoo
$LN5@SendNpcCoo:

; 242  :         {
; 243  : 			for (int n = 0; n < OBJ_MAXMONSTER; n++)

  0013e	42		 inc	 edx
  0013f	05 40 27 00 00	 add	 eax, 10048		; 00002740H
  00144	81 fa 04 29 00
	00		 cmp	 edx, 10500		; 00002904H
  0014a	7c da		 jl	 SHORT $LL7@SendNpcCoo
  0014c	eb 6c		 jmp	 SHORT $LN60@SendNpcCoo
$LN52@SendNpcCoo:

; 248  : 				{
; 249  : 					pMsg.btPosX = gObj[n].X;

  0014e	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048

; 250  : 					pMsg.btPosY = gObj[n].Y;
; 251  : 					pMsg.btTag = sendNpcInfo.btTag;
; 252  : 					pMsg.btType = btAddType;
; 253  : 					pMsg.btIdentNo = sendNpcInfo.nIdentNo;
; 254  : 					pMsg.btIsNpc = 1;
; 255  : 					memcpy(pMsg.szName, sendNpcInfo.szName, sizeof(pMsg.szName) - 1);

  00154	0f 10 45 a9	 movups	 xmm0, XMMWORD PTR _sendNpcInfo$[ebp+13]
  00158	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0015e	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  00165	88 45 d8	 mov	 BYTE PTR _pMsg$[ebp+8], al
  00168	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  0016f	88 45 d9	 mov	 BYTE PTR _pMsg$[ebp+9], al
  00172	0f b6 45 a4	 movzx	 eax, BYTE PTR _sendNpcInfo$[ebp+8]
  00176	88 45 d6	 mov	 BYTE PTR _pMsg$[ebp+6], al
  00179	8a 45 10	 mov	 al, BYTE PTR _btAddType$[ebp]
  0017c	88 45 d7	 mov	 BYTE PTR _pMsg$[ebp+7], al
  0017f	0f b6 45 a0	 movzx	 eax, BYTE PTR _sendNpcInfo$[ebp+4]
  00183	88 45 d4	 mov	 BYTE PTR _pMsg$[ebp+4], al
  00186	8b 45 c1	 mov	 eax, DWORD PTR _sendNpcInfo$[ebp+37]
  00189	89 45 f2	 mov	 DWORD PTR _pMsg$[ebp+34], eax
  0018c	66 8b 45 c5	 mov	 ax, WORD PTR _sendNpcInfo$[ebp+41]
  00190	66 89 45 f6	 mov	 WORD PTR _pMsg$[ebp+38], ax

; 256  : 					DataSend(nDestUserIndex, (LPBYTE)&pMsg, pMsg.h.size);

  00194	0f b6 45 d1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00198	50		 push	 eax
  00199	8d 45 d0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0019c	c6 45 d5 01	 mov	 BYTE PTR _pMsg$[ebp+5], 1
  001a0	50		 push	 eax
  001a1	ff 75 08	 push	 DWORD PTR _nDestUserIndex$[ebp]
  001a4	0f 11 45 da	 movups	 XMMWORD PTR _pMsg$[ebp+10], xmm0
  001a8	f3 0f 7e 45 b9	 movq	 xmm0, QWORD PTR _sendNpcInfo$[ebp+29]
  001ad	66 0f d6 45 ea	 movq	 QWORD PTR _pMsg$[ebp+26], xmm0
  001b2	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001b7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN60@SendNpcCoo:
  001ba	8b 75 cc	 mov	 esi, DWORD PTR _i$1$[ebp]
$LN2@SendNpcCoo:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  001bd	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  001c0	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
  001c5	2b 4f 04	 sub	 ecx, DWORD PTR [edi+4]
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 226  : 	for (int i = 0; i < this->m_vtSendNpcInfo.size(); i++)

  001c8	46		 inc	 esi
  001c9	83 45 c8 2c	 add	 DWORD PTR tv353[ebp], 44 ; 0000002cH
  001cd	8a 5d d1	 mov	 bl, BYTE PTR _pMsg$[ebp+1]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  001d0	f7 e9		 imul	 ecx
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 226  : 	for (int i = 0; i < this->m_vtSendNpcInfo.size(); i++)

  001d2	8b 4d c8	 mov	 ecx, DWORD PTR tv353[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  001d5	c1 fa 03	 sar	 edx, 3
  001d8	8b c2		 mov	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 226  : 	for (int i = 0; i < this->m_vtSendNpcInfo.size(); i++)

  001da	89 75 cc	 mov	 DWORD PTR _i$1$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  001dd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001e0	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 226  : 	for (int i = 0; i < this->m_vtSendNpcInfo.size(); i++)

  001e2	3b f0		 cmp	 esi, eax
  001e4	0f 82 7c fe ff
	ff		 jb	 $LL4@SendNpcCoo
$LN61@SendNpcCoo:
  001ea	5e		 pop	 esi
  001eb	5b		 pop	 ebx
$LN3@SendNpcCoo:

; 257  : 					break;
; 258  : 				}
; 259  : 			}
; 260  : 		}
; 261  : 	}
; 262  : }

  001ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ef	33 cd		 xor	 ecx, ebp
  001f1	5f		 pop	 edi
  001f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f7	8b e5		 mov	 esp, ebp
  001f9	5d		 pop	 ebp
  001fa	c2 0c 00	 ret	 12			; 0000000cH
?SendNpcCoordinate@Minimap@@QAEXHEE@Z ENDP		; Minimap::SendNpcCoordinate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
;	COMDAT ?GCPartyMemberPosition@Minimap@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -80						; size = 75
__$ArrayPad$ = -4					; size = 4
_nIndex$ = 8						; size = 4
?GCPartyMemberPosition@Minimap@@QAEXH@Z PROC		; Minimap::GCPartyMemberPosition, COMDAT
; _this$ = ecx

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _nIndex$[ebp]

; 168  : 	if (!OBJMAX_RANGE(nIndex) || !gObjIsConnected(nIndex))

  00014	85 ff		 test	 edi, edi
  00016	0f 88 5a 03 00
	00		 js	 $LN6@GCPartyMem
  0001c	33 c0		 xor	 eax, eax
  0001e	81 ff eb 2c 00
	00		 cmp	 edi, 11499		; 00002cebH
  00024	0f 9e c0	 setle	 al
  00027	85 c0		 test	 eax, eax
  00029	0f 84 47 03 00
	00		 je	 $LN6@GCPartyMem
  0002f	57		 push	 edi
  00030	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00035	83 c4 04	 add	 esp, 4
  00038	85 c0		 test	 eax, eax
  0003a	0f 84 36 03 00
	00		 je	 $LN6@GCPartyMem

; 169  : 	{
; 170  : 		return;
; 171  : 	}
; 172  : 
; 173  : 	if (gObj[nIndex].PartyNumber < 0)

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00045	56		 push	 esi
  00046	69 f7 40 27 00
	00		 imul	 esi, edi, 10048
  0004c	83 bc 06 0c 06
	00 00 00	 cmp	 DWORD PTR [esi+eax+1548], 0
  00054	0f 8c 1b 03 00
	00		 jl	 $LN44@GCPartyMem

; 174  : 	{
; 175  : 		return;
; 176  : 	}
; 177  : 
; 178  : 	if (!gObj[nIndex].m_bSendMemberPos)

  0005a	80 bc 06 11 27
	00 00 00	 cmp	 BYTE PTR [esi+eax+10001], 0
  00062	0f 84 0d 03 00
	00		 je	 $LN44@GCPartyMem

; 179  : 	{
; 180  : 		return;
; 181  : 	}
; 182  : 
; 183  : 	PMSG_MEMBER_POS_INFO_SEND pMsg;

  00068	53		 push	 ebx
  00069	8d 4d b0	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0006c	e8 00 00 00 00	 call	 ??0PMSG_MEMBER_POS_INFO_SEND@@QAE@XZ ; PMSG_MEMBER_POS_INFO_SEND::PMSG_MEMBER_POS_INFO_SEND

; 186  : 	int nPartyNumber = gObj[nIndex].PartyNumber;

  00071	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00077	c7 45 b0 c1 4b
	e7 01		 mov	 DWORD PTR _pMsg$[ebp], 31935425 ; 01e74bc1H
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 186  : 	int nPartyNumber = gObj[nIndex].PartyNumber;

  0007e	8b 94 1e 0c 06
	00 00		 mov	 edx, DWORD PTR [esi+ebx+1548]

; 187  : 
; 188  : 	if (!OBJMAX_RANGE(nPartyNumber))

  00085	85 d2		 test	 edx, edx
  00087	0f 88 e7 02 00
	00		 js	 $LN45@GCPartyMem
  0008d	33 c0		 xor	 eax, eax
  0008f	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00095	0f 9e c0	 setle	 al
  00098	85 c0		 test	 eax, eax
  0009a	0f 84 d4 02 00
	00		 je	 $LN45@GCPartyMem

; 189  : 	{
; 190  : 		return;
; 191  : 	}
; 192  : 	
; 193  : 	int nMemberCount = gParty.m_PartyS[nPartyNumber].Count;
; 194  :     pMsg.btCount = 0;
; 195  : 
; 196  : 	for (int i = 0; i < 5; i++)
; 197  :     {
; 198  : 		int nTargetIndex = gParty.m_PartyS[nPartyNumber].Number[i];

  000a0	8b f2		 mov	 esi, edx
  000a2	32 c9		 xor	 cl, cl
  000a4	c1 e6 04	 shl	 esi, 4
  000a7	2b f2		 sub	 esi, edx
  000a9	88 4d b4	 mov	 BYTE PTR _pMsg$[ebp+4], cl
  000ac	8b 14 b5 0c 00
	00 00		 mov	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[esi*4+12]

; 199  : 
; 200  : 		if (!OBJMAX_RANGE(nTargetIndex))

  000b3	85 d2		 test	 edx, edx
  000b5	78 4c		 js	 SHORT $LN2@GCPartyMem
  000b7	33 c0		 xor	 eax, eax
  000b9	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  000bf	0f 9e c0	 setle	 al
  000c2	85 c0		 test	 eax, eax
  000c4	74 3d		 je	 SHORT $LN2@GCPartyMem

; 201  : 		{
; 202  : 			continue;
; 203  : 		}
; 204  : 
; 205  : 		memcpy(pMsg.stPosInfo[pMsg.btCount].szName, gObj[nTargetIndex].Name, 10);

  000c6	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  000cc	03 cb		 add	 ecx, ebx
  000ce	f3 0f 7e 41 5d	 movq	 xmm0, QWORD PTR [ecx+93]
  000d3	66 0f d6 45 b5	 movq	 QWORD PTR _pMsg$[ebp+5], xmm0
  000d8	66 8b 41 65	 mov	 ax, WORD PTR [ecx+101]
  000dc	66 89 45 bd	 mov	 WORD PTR _pMsg$[ebp+13], ax

; 206  :         pMsg.stPosInfo[pMsg.btCount].btMapNumber = gObj[nTargetIndex].MapNumber;

  000e0	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  000e7	88 45 c0	 mov	 BYTE PTR _pMsg$[ebp+16], al

; 207  :         pMsg.stPosInfo[pMsg.btCount].btPosX = gObj[nTargetIndex].X;

  000ea	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  000f1	88 45 c1	 mov	 BYTE PTR _pMsg$[ebp+17], al

; 208  :         pMsg.stPosInfo[pMsg.btCount].btPosY = gObj[nTargetIndex].Y;

  000f4	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]

; 209  :         pMsg.btCount++;

  000fb	b1 01		 mov	 cl, 1
  000fd	88 45 c2	 mov	 BYTE PTR _pMsg$[ebp+18], al
  00100	88 4d b4	 mov	 BYTE PTR _pMsg$[ebp+4], cl
$LN2@GCPartyMem:

; 199  : 
; 200  : 		if (!OBJMAX_RANGE(nTargetIndex))

  00103	8b 14 b5 10 00
	00 00		 mov	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[esi*4+16]
  0010a	85 d2		 test	 edx, edx
  0010c	0f 88 8a 00 00
	00		 js	 $LN31@GCPartyMem
  00112	33 c0		 xor	 eax, eax
  00114	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  0011a	0f 9e c0	 setle	 al
  0011d	85 c0		 test	 eax, eax
  0011f	74 7b		 je	 SHORT $LN31@GCPartyMem

; 201  : 		{
; 202  : 			continue;
; 203  : 		}
; 204  : 
; 205  : 		memcpy(pMsg.stPosInfo[pMsg.btCount].szName, gObj[nTargetIndex].Name, 10);

  00121	0f b6 c9	 movzx	 ecx, cl
  00124	69 d2 40 27 00
	00		 imul	 edx, edx, 10048
  0012a	03 d3		 add	 edx, ebx
  0012c	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00133	2b c1		 sub	 eax, ecx
  00135	8d 4d b5	 lea	 ecx, DWORD PTR _pMsg$[ebp+5]
  00138	f3 0f 7e 42 5d	 movq	 xmm0, QWORD PTR [edx+93]
  0013d	8d 0c 41	 lea	 ecx, DWORD PTR [ecx+eax*2]
  00140	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00144	66 8b 42 65	 mov	 ax, WORD PTR [edx+101]
  00148	66 89 41 08	 mov	 WORD PTR [ecx+8], ax

; 206  :         pMsg.stPosInfo[pMsg.btCount].btMapNumber = gObj[nTargetIndex].MapNumber;

  0014c	0f b6 45 b4	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  00150	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00157	2b c8		 sub	 ecx, eax
  00159	0f b6 82 23 01
	00 00		 movzx	 eax, BYTE PTR [edx+291]
  00160	88 44 4d c0	 mov	 BYTE PTR _pMsg$[ebp+ecx*2+16], al

; 207  :         pMsg.stPosInfo[pMsg.btCount].btPosX = gObj[nTargetIndex].X;

  00164	0f b6 45 b4	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  00168	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0016f	2b c8		 sub	 ecx, eax
  00171	0f b6 82 20 01
	00 00		 movzx	 eax, BYTE PTR [edx+288]
  00178	88 44 4d c1	 mov	 BYTE PTR _pMsg$[ebp+ecx*2+17], al

; 208  :         pMsg.stPosInfo[pMsg.btCount].btPosY = gObj[nTargetIndex].Y;

  0017c	0f b6 45 b4	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  00180	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00187	2b c8		 sub	 ecx, eax
  00189	0f b6 82 21 01
	00 00		 movzx	 eax, BYTE PTR [edx+289]
  00190	88 44 4d c2	 mov	 BYTE PTR _pMsg$[ebp+ecx*2+18], al

; 209  :         pMsg.btCount++;

  00194	8a 4d b4	 mov	 cl, BYTE PTR _pMsg$[ebp+4]
  00197	fe c1		 inc	 cl
  00199	88 4d b4	 mov	 BYTE PTR _pMsg$[ebp+4], cl
$LN31@GCPartyMem:

; 199  : 
; 200  : 		if (!OBJMAX_RANGE(nTargetIndex))

  0019c	8b 14 b5 14 00
	00 00		 mov	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[esi*4+20]
  001a3	85 d2		 test	 edx, edx
  001a5	0f 88 8a 00 00
	00		 js	 $LN35@GCPartyMem
  001ab	33 c0		 xor	 eax, eax
  001ad	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  001b3	0f 9e c0	 setle	 al
  001b6	85 c0		 test	 eax, eax
  001b8	74 7b		 je	 SHORT $LN35@GCPartyMem

; 201  : 		{
; 202  : 			continue;
; 203  : 		}
; 204  : 
; 205  : 		memcpy(pMsg.stPosInfo[pMsg.btCount].szName, gObj[nTargetIndex].Name, 10);

  001ba	0f b6 c9	 movzx	 ecx, cl
  001bd	69 d2 40 27 00
	00		 imul	 edx, edx, 10048
  001c3	03 d3		 add	 edx, ebx
  001c5	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  001cc	2b c1		 sub	 eax, ecx
  001ce	8d 4d b5	 lea	 ecx, DWORD PTR _pMsg$[ebp+5]
  001d1	f3 0f 7e 42 5d	 movq	 xmm0, QWORD PTR [edx+93]
  001d6	8d 0c 41	 lea	 ecx, DWORD PTR [ecx+eax*2]
  001d9	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  001dd	66 8b 42 65	 mov	 ax, WORD PTR [edx+101]
  001e1	66 89 41 08	 mov	 WORD PTR [ecx+8], ax

; 206  :         pMsg.stPosInfo[pMsg.btCount].btMapNumber = gObj[nTargetIndex].MapNumber;

  001e5	0f b6 45 b4	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  001e9	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  001f0	2b c8		 sub	 ecx, eax
  001f2	0f b6 82 23 01
	00 00		 movzx	 eax, BYTE PTR [edx+291]
  001f9	88 44 4d c0	 mov	 BYTE PTR _pMsg$[ebp+ecx*2+16], al

; 207  :         pMsg.stPosInfo[pMsg.btCount].btPosX = gObj[nTargetIndex].X;

  001fd	0f b6 45 b4	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  00201	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00208	2b c8		 sub	 ecx, eax
  0020a	0f b6 82 20 01
	00 00		 movzx	 eax, BYTE PTR [edx+288]
  00211	88 44 4d c1	 mov	 BYTE PTR _pMsg$[ebp+ecx*2+17], al

; 208  :         pMsg.stPosInfo[pMsg.btCount].btPosY = gObj[nTargetIndex].Y;

  00215	0f b6 45 b4	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  00219	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00220	2b c8		 sub	 ecx, eax
  00222	0f b6 82 21 01
	00 00		 movzx	 eax, BYTE PTR [edx+289]
  00229	88 44 4d c2	 mov	 BYTE PTR _pMsg$[ebp+ecx*2+18], al

; 209  :         pMsg.btCount++;

  0022d	8a 4d b4	 mov	 cl, BYTE PTR _pMsg$[ebp+4]
  00230	fe c1		 inc	 cl
  00232	88 4d b4	 mov	 BYTE PTR _pMsg$[ebp+4], cl
$LN35@GCPartyMem:

; 199  : 
; 200  : 		if (!OBJMAX_RANGE(nTargetIndex))

  00235	8b 14 b5 18 00
	00 00		 mov	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[esi*4+24]
  0023c	85 d2		 test	 edx, edx
  0023e	0f 88 8a 00 00
	00		 js	 $LN39@GCPartyMem
  00244	33 c0		 xor	 eax, eax
  00246	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  0024c	0f 9e c0	 setle	 al
  0024f	85 c0		 test	 eax, eax
  00251	74 7b		 je	 SHORT $LN39@GCPartyMem

; 201  : 		{
; 202  : 			continue;
; 203  : 		}
; 204  : 
; 205  : 		memcpy(pMsg.stPosInfo[pMsg.btCount].szName, gObj[nTargetIndex].Name, 10);

  00253	0f b6 c9	 movzx	 ecx, cl
  00256	69 d2 40 27 00
	00		 imul	 edx, edx, 10048
  0025c	03 d3		 add	 edx, ebx
  0025e	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00265	2b c1		 sub	 eax, ecx
  00267	8d 4d b5	 lea	 ecx, DWORD PTR _pMsg$[ebp+5]
  0026a	f3 0f 7e 42 5d	 movq	 xmm0, QWORD PTR [edx+93]
  0026f	8d 0c 41	 lea	 ecx, DWORD PTR [ecx+eax*2]
  00272	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00276	66 8b 42 65	 mov	 ax, WORD PTR [edx+101]
  0027a	66 89 41 08	 mov	 WORD PTR [ecx+8], ax

; 206  :         pMsg.stPosInfo[pMsg.btCount].btMapNumber = gObj[nTargetIndex].MapNumber;

  0027e	0f b6 45 b4	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  00282	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00289	2b c8		 sub	 ecx, eax
  0028b	0f b6 82 23 01
	00 00		 movzx	 eax, BYTE PTR [edx+291]
  00292	88 44 4d c0	 mov	 BYTE PTR _pMsg$[ebp+ecx*2+16], al

; 207  :         pMsg.stPosInfo[pMsg.btCount].btPosX = gObj[nTargetIndex].X;

  00296	0f b6 45 b4	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  0029a	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  002a1	2b c8		 sub	 ecx, eax
  002a3	0f b6 82 20 01
	00 00		 movzx	 eax, BYTE PTR [edx+288]
  002aa	88 44 4d c1	 mov	 BYTE PTR _pMsg$[ebp+ecx*2+17], al

; 208  :         pMsg.stPosInfo[pMsg.btCount].btPosY = gObj[nTargetIndex].Y;

  002ae	0f b6 45 b4	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  002b2	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  002b9	2b c8		 sub	 ecx, eax
  002bb	0f b6 82 21 01
	00 00		 movzx	 eax, BYTE PTR [edx+289]
  002c2	88 44 4d c2	 mov	 BYTE PTR _pMsg$[ebp+ecx*2+18], al

; 209  :         pMsg.btCount++;

  002c6	8a 4d b4	 mov	 cl, BYTE PTR _pMsg$[ebp+4]
  002c9	fe c1		 inc	 cl
  002cb	88 4d b4	 mov	 BYTE PTR _pMsg$[ebp+4], cl
$LN39@GCPartyMem:

; 199  : 
; 200  : 		if (!OBJMAX_RANGE(nTargetIndex))

  002ce	8b 14 b5 1c 00
	00 00		 mov	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[esi*4+28]
  002d5	85 d2		 test	 edx, edx
  002d7	0f 88 85 00 00
	00		 js	 $LN43@GCPartyMem
  002dd	33 c0		 xor	 eax, eax
  002df	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  002e5	0f 9e c0	 setle	 al
  002e8	85 c0		 test	 eax, eax
  002ea	74 76		 je	 SHORT $LN43@GCPartyMem

; 201  : 		{
; 202  : 			continue;
; 203  : 		}
; 204  : 
; 205  : 		memcpy(pMsg.stPosInfo[pMsg.btCount].szName, gObj[nTargetIndex].Name, 10);

  002ec	0f b6 c9	 movzx	 ecx, cl
  002ef	69 d2 40 27 00
	00		 imul	 edx, edx, 10048
  002f5	03 d3		 add	 edx, ebx
  002f7	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  002fe	2b c1		 sub	 eax, ecx
  00300	8d 4d b5	 lea	 ecx, DWORD PTR _pMsg$[ebp+5]
  00303	f3 0f 7e 42 5d	 movq	 xmm0, QWORD PTR [edx+93]
  00308	8d 0c 41	 lea	 ecx, DWORD PTR [ecx+eax*2]
  0030b	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0030f	66 8b 42 65	 mov	 ax, WORD PTR [edx+101]
  00313	66 89 41 08	 mov	 WORD PTR [ecx+8], ax

; 206  :         pMsg.stPosInfo[pMsg.btCount].btMapNumber = gObj[nTargetIndex].MapNumber;

  00317	0f b6 45 b4	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  0031b	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00322	2b c8		 sub	 ecx, eax
  00324	0f b6 82 23 01
	00 00		 movzx	 eax, BYTE PTR [edx+291]
  0032b	88 44 4d c0	 mov	 BYTE PTR _pMsg$[ebp+ecx*2+16], al

; 207  :         pMsg.stPosInfo[pMsg.btCount].btPosX = gObj[nTargetIndex].X;

  0032f	0f b6 45 b4	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  00333	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0033a	2b c8		 sub	 ecx, eax
  0033c	0f b6 82 20 01
	00 00		 movzx	 eax, BYTE PTR [edx+288]
  00343	88 44 4d c1	 mov	 BYTE PTR _pMsg$[ebp+ecx*2+17], al

; 208  :         pMsg.stPosInfo[pMsg.btCount].btPosY = gObj[nTargetIndex].Y;

  00347	0f b6 45 b4	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  0034b	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00352	2b c8		 sub	 ecx, eax
  00354	0f b6 82 21 01
	00 00		 movzx	 eax, BYTE PTR [edx+289]
  0035b	88 44 4d c2	 mov	 BYTE PTR _pMsg$[ebp+ecx*2+18], al

; 209  :         pMsg.btCount++;

  0035f	fe 45 b4	 inc	 BYTE PTR _pMsg$[ebp+4]
$LN43@GCPartyMem:

; 210  : 	}
; 211  : 	
; 212  : 	DataSend(nIndex, (LPBYTE)&pMsg, pMsg.h.size);

  00362	0f b6 45 b1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00366	50		 push	 eax
  00367	8d 45 b0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0036a	50		 push	 eax
  0036b	57		 push	 edi
  0036c	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00371	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN45@GCPartyMem:
  00374	5b		 pop	 ebx
$LN44@GCPartyMem:
  00375	5e		 pop	 esi
$LN6@GCPartyMem:

; 213  : }

  00376	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00379	33 cd		 xor	 ecx, ebp
  0037b	5f		 pop	 edi
  0037c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00381	8b e5		 mov	 esp, ebp
  00383	5d		 pop	 ebp
  00384	c2 04 00	 ret	 4
?GCPartyMemberPosition@Minimap@@QAEXH@Z ENDP		; Minimap::GCPartyMemberPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
;	COMDAT ?GCReqSendNpcPosInfo@Minimap@@QAEXPAU_PMSG_REQ_NPC_POSITION@@H@Z
_TEXT	SEGMENT
_lpRecv$ = 8						; size = 4
_UserIndex$ = 12					; size = 4
?GCReqSendNpcPosInfo@Minimap@@QAEXPAU_PMSG_REQ_NPC_POSITION@@H@Z PROC ; Minimap::GCReqSendNpcPosInfo, COMDAT
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 146  : 	if (!OBJMAX_RANGE(UserIndex) || !gObjIsConnected(UserIndex))

  00004	8b 75 0c	 mov	 esi, DWORD PTR _UserIndex$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	78 41		 js	 SHORT $LN5@GCReqSendN
  0000b	33 c0		 xor	 eax, eax
  0000d	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  00013	0f 9e c0	 setle	 al
  00016	85 c0		 test	 eax, eax
  00018	74 32		 je	 SHORT $LN5@GCReqSendN
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax
  00025	74 25		 je	 SHORT $LN5@GCReqSendN

; 147  : 	{
; 148  : 		return;
; 149  : 	}
; 150  : 
; 151  : 	if (gObj[UserIndex].PartyNumber < 0)

  00027	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  0002d	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00033	83 b9 0c 06 00
	00 00		 cmp	 DWORD PTR [ecx+1548], 0
  0003a	7c 10		 jl	 SHORT $LN5@GCReqSendN

; 152  : 	{
; 153  : 		return;
; 154  : 	}
; 155  : 
; 156  : 	if (lpRecv->btType)

  0003c	8b 45 08	 mov	 eax, DWORD PTR _lpRecv$[ebp]
  0003f	80 78 04 00	 cmp	 BYTE PTR [eax+4], 0
  00043	0f 94 c0	 sete	 al
  00046	88 81 10 27 00
	00		 mov	 BYTE PTR [ecx+10000], al
$LN5@GCReqSendN:
  0004c	5e		 pop	 esi

; 157  : 	{
; 158  : 		gObj[UserIndex].m_bSendNpcPos = 0;
; 159  : 	}
; 160  :     else
; 161  : 	{
; 162  : 		gObj[UserIndex].m_bSendNpcPos = 1;
; 163  : 	}
; 164  : }

  0004d	5d		 pop	 ebp
  0004e	c2 08 00	 ret	 8
?GCReqSendNpcPosInfo@Minimap@@QAEXPAU_PMSG_REQ_NPC_POSITION@@H@Z ENDP ; Minimap::GCReqSendNpcPosInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
;	COMDAT ?CGReqSendMemberPosInfoStop@Minimap@@QAEXH@Z
_TEXT	SEGMENT
_UserIndex$ = 8						; size = 4
?CGReqSendMemberPosInfoStop@Minimap@@QAEXH@Z PROC	; Minimap::CGReqSendMemberPosInfoStop, COMDAT
; _this$ = ecx

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 131  : 	if (!OBJMAX_RANGE(UserIndex) || !gObjIsConnected(UserIndex))

  00004	8b 75 08	 mov	 esi, DWORD PTR _UserIndex$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	78 39		 js	 SHORT $LN3@CGReqSendM
  0000b	33 c0		 xor	 eax, eax
  0000d	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  00013	0f 9e c0	 setle	 al
  00016	85 c0		 test	 eax, eax
  00018	74 2a		 je	 SHORT $LN3@CGReqSendM
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax
  00025	74 1d		 je	 SHORT $LN3@CGReqSendM

; 132  : 	{
; 133  : 		return;
; 134  : 	}
; 135  : 
; 136  : 	if (gObj[UserIndex].PartyNumber < 0)

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002c	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  00032	83 bc 01 0c 06
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1548], 0
  0003a	7c 08		 jl	 SHORT $LN3@CGReqSendM

; 137  : 	{
; 138  : 		return;
; 139  : 	}
; 140  : 
; 141  : 	gObj[UserIndex].m_bSendMemberPos = false;

  0003c	c6 84 01 11 27
	00 00 00	 mov	 BYTE PTR [ecx+eax+10001], 0
$LN3@CGReqSendM:
  00044	5e		 pop	 esi

; 142  : }

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?CGReqSendMemberPosInfoStop@Minimap@@QAEXH@Z ENDP	; Minimap::CGReqSendMemberPosInfoStop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
;	COMDAT ?CGReqSendMemberPosInfoStart@Minimap@@QAEXH@Z
_TEXT	SEGMENT
_UserIndex$ = 8						; size = 4
?CGReqSendMemberPosInfoStart@Minimap@@QAEXH@Z PROC	; Minimap::CGReqSendMemberPosInfoStart, COMDAT
; _this$ = ecx

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 116  : 	if (!OBJMAX_RANGE(UserIndex) || !gObjIsConnected(UserIndex))

  00004	8b 75 08	 mov	 esi, DWORD PTR _UserIndex$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	78 39		 js	 SHORT $LN3@CGReqSendM
  0000b	33 c0		 xor	 eax, eax
  0000d	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  00013	0f 9e c0	 setle	 al
  00016	85 c0		 test	 eax, eax
  00018	74 2a		 je	 SHORT $LN3@CGReqSendM
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00020	83 c4 04	 add	 esp, 4
  00023	85 c0		 test	 eax, eax
  00025	74 1d		 je	 SHORT $LN3@CGReqSendM

; 117  : 	{
; 118  : 		return;
; 119  : 	}
; 120  : 
; 121  : 	if (gObj[UserIndex].PartyNumber < 0)

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002c	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  00032	83 bc 01 0c 06
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1548], 0
  0003a	7c 08		 jl	 SHORT $LN3@CGReqSendM

; 122  : 	{
; 123  : 		return;
; 124  : 	}
; 125  : 
; 126  : 	gObj[UserIndex].m_bSendMemberPos = true;

  0003c	c6 84 01 11 27
	00 00 01	 mov	 BYTE PTR [ecx+eax+10001], 1
$LN3@CGReqSendM:
  00044	5e		 pop	 esi

; 127  : }

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?CGReqSendMemberPosInfoStart@Minimap@@QAEXH@Z ENDP	; Minimap::CGReqSendMemberPosInfoStart
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
;	COMDAT ?Read@Minimap@@QAEXPAD@Z
_TEXT	SEGMENT
_result$ = -364						; size = 12
$T2 = -352						; size = 4
$T3 = -348						; size = 4
$T4 = -344						; size = 4
$T5 = -340						; size = 4
$T6 = -336						; size = 4
$T7 = -332						; size = 4
$T8 = -328						; size = 4
$T9 = -324						; size = 4
$T10 = -320						; size = 4
$T11 = -316						; size = 4
$T12 = -312						; size = 4
$T13 = -308						; size = 4
$T14 = -304						; size = 4
_gatelist$15 = -300					; size = 4
_npclist$16 = -296					; size = 4
_minimap$ = -292					; size = 4
_this$GSCopy$1$ = -288					; size = 4
_TempMapNumber$1$ = -284				; size = 4
_GateIndex$1$ = -280					; size = 4
tv295 = -276						; size = 4
_NpcIndex$1$ = -276					; size = 4
_map$17 = -272						; size = 4
_gate$18 = -268						; size = 4
_npc$19 = -264						; size = 4
_doc$ = -260						; size = 200
_lpNpc$20 = -60						; size = 44
_lpGate$21 = -56					; size = 40
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_File$ = 8						; size = 4
?Read@Minimap@@QAEXPAD@Z PROC				; Minimap::Read, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Read@Minimap@@QAEXPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 60 01 00
	00		 sub	 esp, 352		; 00000160H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00034	8b 75 08	 mov	 esi, DWORD PTR _File$[ebp]

; 44   : 	xml_document doc;

  00037	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _doc$[ebp]
  0003d	e8 00 00 00 00	 call	 ??0xml_document@pugi@@QAE@XZ ; pugi::xml_document::xml_document

; 45   : 	xml_parse_result result = doc.load_file(File);

  00042	6a 00		 push	 0
  00044	6a 74		 push	 116			; 00000074H
  00046	56		 push	 esi
  00047	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _result$[ebp]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00054	50		 push	 eax
  00055	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _doc$[ebp]
  0005b	e8 00 00 00 00	 call	 ?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z ; pugi::xml_document::load_file

; 46   : 
; 47   : 	if( result.status != status_ok )

  00060	83 bd 94 fe ff
	ff 00		 cmp	 DWORD PTR _result$[ebp], 0
  00067	74 11		 je	 SHORT $LN11@Read

; 48   : 	{
; 49   : 		LogAdd("%s - Minimap info load failed!", File);

  00069	56		 push	 esi
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@HMEDIGLC@?$CFs?5?9?5Minimap?5info?5load?5failed?$CB?$AA@
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00075	e9 7e 03 00 00	 jmp	 $LN36@Read
$LN11@Read:

; 50   : 		return;
; 51   : 	}
; 52   : 
; 53   : 	xml_node minimap = doc.child("minimap");

  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_07MGKHBAOD@minimap?$AA@
  0007f	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _minimap$[ebp]
  00085	50		 push	 eax
  00086	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _doc$[ebp]
  0008c	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child

; 54   : 	int TempMapNumber = 0;
; 55   : 	int NpcIndex = 0;
; 56   : 	int GateIndex = 0;
; 57   : 
; 58   : 	for( xml_node map = minimap.child("map"); map; map = map.next_sibling())

  00091	68 00 00 00 00	 push	 OFFSET ??_C@_03HBNNNHNM@map?$AA@
  00096	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _map$17[ebp]
  0009c	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _TempMapNumber$1$[ebp], 0
  000a6	33 ff		 xor	 edi, edi
  000a8	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _minimap$[ebp]
  000ae	33 f6		 xor	 esi, esi
  000b0	89 bd ec fe ff
	ff		 mov	 DWORD PTR _NpcIndex$1$[ebp], edi
  000b6	50		 push	 eax
  000b7	89 b5 e8 fe ff
	ff		 mov	 DWORD PTR _GateIndex$1$[ebp], esi
  000bd	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  000c2	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _map$17[ebp]
  000c8	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  000cd	85 c0		 test	 eax, eax
  000cf	0f 84 26 03 00
	00		 je	 $LN18@Read
  000d5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@Read:

; 59   : 	{
; 60   : 		int MapNumber = map.attribute("id").as_int(-1);

  000e0	6a ff		 push	 -1
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_02EGCJHIOB@id?$AA@
  000e7	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  000ed	50		 push	 eax
  000ee	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _map$17[ebp]
  000f4	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  000f9	8b c8		 mov	 ecx, eax
  000fb	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int
  00100	8b d8		 mov	 ebx, eax

; 61   : 
; 62   : 		if( !MAX_MAP_RANGE(MapNumber) )

  00102	85 db		 test	 ebx, ebx
  00104	0f 88 e3 02 00
	00		 js	 $LN23@Read
  0010a	33 c0		 xor	 eax, eax
  0010c	83 fb 63	 cmp	 ebx, 99			; 00000063H
  0010f	0f 9e c0	 setle	 al
  00112	85 c0		 test	 eax, eax
  00114	0f 84 d3 02 00
	00		 je	 $LN23@Read

; 65   : 			return;
; 66   : 		}
; 67   : 
; 68   : 		if (TempMapNumber != MapNumber)

  0011a	39 9d e4 fe ff
	ff		 cmp	 DWORD PTR _TempMapNumber$1$[ebp], ebx
  00120	74 16		 je	 SHORT $LN13@Read

; 69   : 		{
; 70   : 			TempMapNumber = MapNumber;
; 71   : 			NpcIndex = 0;

  00122	33 ff		 xor	 edi, edi
  00124	89 9d e4 fe ff
	ff		 mov	 DWORD PTR _TempMapNumber$1$[ebp], ebx

; 72   : 			GateIndex = 0;

  0012a	33 f6		 xor	 esi, esi
  0012c	89 bd ec fe ff
	ff		 mov	 DWORD PTR _NpcIndex$1$[ebp], edi
  00132	89 b5 e8 fe ff
	ff		 mov	 DWORD PTR _GateIndex$1$[ebp], esi
$LN13@Read:

; 73   : 		}
; 74   : 
; 75   : 		xml_node npclist = map.child("npclist");

  00138	68 00 00 00 00	 push	 OFFSET ??_C@_07DKLMHHPO@npclist?$AA@
  0013d	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _npclist$16[ebp]
  00143	50		 push	 eax
  00144	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _map$17[ebp]
  0014a	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child

; 76   : 		
; 77   : 		for( xml_node npc = npclist.child("npc"); npc; npc = npc.next_sibling() )

  0014f	68 00 00 00 00	 push	 OFFSET ??_C@_03BPGDPAOH@npc?$AA@
  00154	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _npc$19[ebp]
  0015a	50		 push	 eax
  0015b	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _npclist$16[ebp]
  00161	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  00166	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _npc$19[ebp]
  0016c	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  00171	85 c0		 test	 eax, eax
  00173	0f 84 3e 01 00
	00		 je	 $LN6@Read
  00179	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  0017f	83 c0 04	 add	 eax, 4
  00182	8b f0		 mov	 esi, eax
  00184	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL7@Read:

; 78   : 		{
; 79   : 			_stSendNPCInfo lpNpc;
; 80   : 			lpNpc.btMapNumber = MapNumber;
; 81   : 			lpNpc.btPosX = npc.attribute("x").as_int(0);

  00190	6a 00		 push	 0
  00192	68 00 00 00 00	 push	 OFFSET ??_C@_01FJMABOPO@x?$AA@
  00197	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  0019d	88 5d ce	 mov	 BYTE PTR _lpNpc$20[ebp+10], bl
  001a0	50		 push	 eax
  001a1	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _npc$19[ebp]
  001a7	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001ac	8b c8		 mov	 ecx, eax
  001ae	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 82   : 			lpNpc.btPosY = npc.attribute("y").as_int(0);

  001b3	6a 00		 push	 0
  001b5	88 45 cf	 mov	 BYTE PTR _lpNpc$20[ebp+11], al
  001b8	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _npc$19[ebp]
  001be	68 00 00 00 00	 push	 OFFSET ??_C@_01EANLCPLP@y?$AA@
  001c3	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  001c9	50		 push	 eax
  001ca	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001cf	8b c8		 mov	 ecx, eax
  001d1	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 83   : 			lpNpc.nNpcClass = npc.attribute("class").as_int(0);

  001d6	6a 00		 push	 0
  001d8	88 45 d0	 mov	 BYTE PTR _lpNpc$20[ebp+12], al
  001db	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _npc$19[ebp]
  001e1	68 00 00 00 00	 push	 OFFSET ??_C@_05ENKANFLO@class?$AA@
  001e6	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001f2	8b c8		 mov	 ecx, eax
  001f4	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 84   : 			lpNpc.btSync = npc.attribute("sync").as_int(1);

  001f9	6a 01		 push	 1
  001fb	89 45 c4	 mov	 DWORD PTR _lpNpc$20[ebp], eax
  001fe	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _npc$19[ebp]
  00204	68 00 00 00 00	 push	 OFFSET ??_C@_04JNABKDKF@sync?$AA@
  00209	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  0020f	50		 push	 eax
  00210	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00215	8b c8		 mov	 ecx, eax
  00217	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 85   : 			lpNpc.btTag = npc.attribute("tag").as_int(0);

  0021c	6a 00		 push	 0
  0021e	88 45 cd	 mov	 BYTE PTR _lpNpc$20[ebp+9], al
  00221	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _npc$19[ebp]
  00227	68 00 00 00 00	 push	 OFFSET ??_C@_03FJEPELFP@tag?$AA@
  0022c	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  00232	50		 push	 eax
  00233	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00238	8b c8		 mov	 ecx, eax
  0023a	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 86   : 			lpNpc.nIdentNo = NpcIndex;
; 87   : 			strncpy(lpNpc.szName, npc.text().as_string(), sizeof(lpNpc.szName) - 1);

  0023f	6a 1e		 push	 30			; 0000001eH
  00241	88 45 cc	 mov	 BYTE PTR _lpNpc$20[ebp+8], al
  00244	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _npc$19[ebp]
  0024a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0024f	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00255	89 7d c8	 mov	 DWORD PTR _lpNpc$20[ebp+4], edi
  00258	50		 push	 eax
  00259	e8 00 00 00 00	 call	 ?text@xml_node@pugi@@QBE?AVxml_text@2@XZ ; pugi::xml_node::text
  0025e	8b c8		 mov	 ecx, eax
  00260	e8 00 00 00 00	 call	 ?as_string@xml_text@pugi@@QBEPBDPBD@Z ; pugi::xml_text::as_string
  00265	50		 push	 eax
  00266	8d 45 d1	 lea	 eax, DWORD PTR _lpNpc$20[ebp+13]
  00269	50		 push	 eax
  0026a	e8 00 00 00 00	 call	 _strncpy
  0026f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 88   : 			NpcIndex++;
; 89   : 			this->m_vtSendNpcInfo.push_back(lpNpc);

  00272	8d 45 c4	 lea	 eax, DWORD PTR _lpNpc$20[ebp]
  00275	8b ce		 mov	 ecx, esi
  00277	47		 inc	 edi
  00278	50		 push	 eax
  00279	e8 00 00 00 00	 call	 ?push_back@?$vector@U_stSendNPCInfo@@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXABU_stSendNPCInfo@@@Z ; std::vector<_stSendNPCInfo,std::allocator<_stSendNPCInfo> >::push_back
  0027e	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00284	50		 push	 eax
  00285	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _npc$19[ebp]
  0028b	e8 00 00 00 00	 call	 ?next_sibling@xml_node@pugi@@QBE?AV12@XZ ; pugi::xml_node::next_sibling
  00290	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _npc$19[ebp]
  00296	8b 00		 mov	 eax, DWORD PTR [eax]
  00298	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _npc$19[ebp], eax
  0029e	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  002a3	85 c0		 test	 eax, eax
  002a5	0f 85 e5 fe ff
	ff		 jne	 $LL7@Read
  002ab	8b b5 e8 fe ff
	ff		 mov	 esi, DWORD PTR _GateIndex$1$[ebp]
  002b1	89 bd ec fe ff
	ff		 mov	 DWORD PTR _NpcIndex$1$[ebp], edi
$LN6@Read:

; 90   : 		}
; 91   : 
; 92   : 		xml_node gatelist = map.child("gatelist");

  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_08HKKDIFPG@gatelist?$AA@
  002bc	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _gatelist$15[ebp]
  002c2	50		 push	 eax
  002c3	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _map$17[ebp]
  002c9	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child

; 93   : 
; 94   : 		for( xml_node gate = gatelist.child("gate"); gate; gate = gate.next_sibling() )

  002ce	68 00 00 00 00	 push	 OFFSET ??_C@_04NKCHGMLH@gate?$AA@
  002d3	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _gate$18[ebp]
  002d9	50		 push	 eax
  002da	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _gatelist$15[ebp]
  002e0	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  002e5	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _gate$18[ebp]
  002eb	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  002f0	85 c0		 test	 eax, eax
  002f2	0f 84 c1 00 00
	00		 je	 $LN2@Read
  002f8	8b bd e0 fe ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  002fe	66 90		 npad	 2
$LL10@Read:

; 95   : 		{
; 96   : 			_stSendPortalInfo lpGate;
; 97   : 			lpGate.btMapNumber = MapNumber;
; 98   : 			lpGate.btPosX = gate.attribute("x").as_int(0);

  00300	6a 00		 push	 0
  00302	68 00 00 00 00	 push	 OFFSET ??_C@_01FJMABOPO@x?$AA@
  00307	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  0030d	88 5d ce	 mov	 BYTE PTR _lpGate$21[ebp+6], bl
  00310	50		 push	 eax
  00311	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _gate$18[ebp]
  00317	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0031c	8b c8		 mov	 ecx, eax
  0031e	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 99   : 			lpGate.btPosY = gate.attribute("y").as_int(0);

  00323	6a 00		 push	 0
  00325	88 45 cc	 mov	 BYTE PTR _lpGate$21[ebp+4], al
  00328	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _gate$18[ebp]
  0032e	68 00 00 00 00	 push	 OFFSET ??_C@_01EANLCPLP@y?$AA@
  00333	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00339	50		 push	 eax
  0033a	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0033f	8b c8		 mov	 ecx, eax
  00341	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 100  : 			lpGate.nIdentNo = GateIndex;
; 101  : 			strncpy(lpGate.szName, gate.text().as_string(), sizeof(lpGate.szName) - 1);

  00346	6a 1e		 push	 30			; 0000001eH
  00348	88 45 cd	 mov	 BYTE PTR _lpGate$21[ebp+5], al
  0034b	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _gate$18[ebp]
  00351	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00356	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  0035c	89 75 c8	 mov	 DWORD PTR _lpGate$21[ebp], esi
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 ?text@xml_node@pugi@@QBE?AVxml_text@2@XZ ; pugi::xml_node::text
  00365	8b c8		 mov	 ecx, eax
  00367	e8 00 00 00 00	 call	 ?as_string@xml_text@pugi@@QBEPBDPBD@Z ; pugi::xml_text::as_string
  0036c	50		 push	 eax
  0036d	8d 45 cf	 lea	 eax, DWORD PTR _lpGate$21[ebp+7]
  00370	50		 push	 eax
  00371	e8 00 00 00 00	 call	 _strncpy
  00376	83 c4 0c	 add	 esp, 12			; 0000000cH

; 102  : 			GateIndex++;
; 103  : 			this->m_vtSendPortalInfo.push_back(lpGate);

  00379	8d 45 c8	 lea	 eax, DWORD PTR _lpGate$21[ebp]
  0037c	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0037f	46		 inc	 esi
  00380	50		 push	 eax
  00381	e8 00 00 00 00	 call	 ?push_back@?$vector@U_stSendPortalInfo@@V?$allocator@U_stSendPortalInfo@@@std@@@std@@QAEXABU_stSendPortalInfo@@@Z ; std::vector<_stSendPortalInfo,std::allocator<_stSendPortalInfo> >::push_back
  00386	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0038c	50		 push	 eax
  0038d	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _gate$18[ebp]
  00393	e8 00 00 00 00	 call	 ?next_sibling@xml_node@pugi@@QBE?AV12@XZ ; pugi::xml_node::next_sibling
  00398	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _gate$18[ebp]
  0039e	8b 00		 mov	 eax, DWORD PTR [eax]
  003a0	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _gate$18[ebp], eax
  003a6	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  003ab	85 c0		 test	 eax, eax
  003ad	0f 85 4d ff ff
	ff		 jne	 $LL10@Read
  003b3	89 b5 e8 fe ff
	ff		 mov	 DWORD PTR _GateIndex$1$[ebp], esi
$LN2@Read:

; 54   : 	int TempMapNumber = 0;
; 55   : 	int NpcIndex = 0;
; 56   : 	int GateIndex = 0;
; 57   : 
; 58   : 	for( xml_node map = minimap.child("map"); map; map = map.next_sibling())

  003b9	8d 85 a0 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  003bf	50		 push	 eax
  003c0	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _map$17[ebp]
  003c6	e8 00 00 00 00	 call	 ?next_sibling@xml_node@pugi@@QBE?AV12@XZ ; pugi::xml_node::next_sibling
  003cb	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _map$17[ebp]
  003d1	8b 00		 mov	 eax, DWORD PTR [eax]
  003d3	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _map$17[ebp], eax
  003d9	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  003de	85 c0		 test	 eax, eax
  003e0	74 19		 je	 SHORT $LN18@Read
  003e2	8b bd ec fe ff
	ff		 mov	 edi, DWORD PTR _NpcIndex$1$[ebp]
  003e8	e9 f3 fc ff ff	 jmp	 $LL4@Read
$LN23@Read:

; 63   : 		{
; 64   : 			MsgBox("[CMiniMap][LoadMinimapInfo] -> Invalid map number id - %d",MapNumber);

  003ed	53		 push	 ebx
  003ee	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@EKGLKKHL@?$FLCMiniMap?$FN?$FLLoadMinimapInfo?$FN?5?9?$DO?5I@
  003f3	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
$LN36@Read:
  003f8	83 c4 08	 add	 esp, 8
$LN18@Read:

; 104  : 		}
; 105  : 
; 106  : //		LogAddTD("[MINIMAP] Map: %d loaded %d NPC / %d GATE objects!",MapNumber,
; 107  : //			m_NpcObjects.count(MapNumber), m_GateObjects.count(MapNumber) );
; 108  : 	}
; 109  : 
; 110  : //	m_bLoaded = true;
; 111  : //	LogAdd("[MINIMAP] File loaded successfully!");
; 112  : }	

  003fb	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _doc$[ebp]
  00401	e8 00 00 00 00	 call	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
  00406	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00409	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00410	59		 pop	 ecx
  00411	5f		 pop	 edi
  00412	5e		 pop	 esi
  00413	5b		 pop	 ebx
  00414	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00417	33 cd		 xor	 ecx, ebp
  00419	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0041e	8b e5		 mov	 esp, ebp
  00420	5d		 pop	 ebp
  00421	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Read@Minimap@@QAEXPAD@Z$0:
  00000	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _doc$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
__ehhandler$?Read@Minimap@@QAEXPAD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 90 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-368]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Read@Minimap@@QAEXPAD@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Read@Minimap@@QAEXPAD@Z ENDP				; Minimap::Read
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
;	COMDAT ?Load@Minimap@@QAEXXZ
_TEXT	SEGMENT
?Load@Minimap@@QAEXXZ PROC				; Minimap::Load, COMDAT
; _this$ = ecx

; 37   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 38   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@Minimap@@QAEXXZ	; Minimap::Init

; 39   : 	this->Read(gDirPath.GetNewPath(FILE_WORLD_MINIMAP));

  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HGDCGDEN@World?2MiniMap?4xml?$AA@
  0000d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00012	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00017	50		 push	 eax
  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?Read@Minimap@@QAEXPAD@Z ; Minimap::Read
  0001f	5e		 pop	 esi

; 40   : }

  00020	c3		 ret	 0
?Load@Minimap@@QAEXXZ ENDP				; Minimap::Load
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
;	COMDAT ?Init@Minimap@@QAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
$T2 = -12						; size = 12
?Init@Minimap@@QAEXXZ PROC				; Minimap::Init, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  0000a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 24   : 	this->m_vtSendNpcInfo.clear();

  0000d	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  00010	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00013	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
  00018	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0001b	2b 16		 sub	 edx, DWORD PTR [esi]
  0001d	f7 ea		 imul	 edx
  0001f	c1 fa 03	 sar	 edx, 3
  00022	8b c2		 mov	 eax, edx
  00024	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00027	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 25   : 	if( this->m_vtSendNpcInfo.capacity() > 0 )

  00029	74 41		 je	 SHORT $LN312@Init
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1549 : 		if (this == &_Right)

  0002b	8d 45 f4	 lea	 eax, DWORD PTR $T2[ebp]
  0002e	3b c6		 cmp	 eax, esi
  00030	74 3a		 je	 SHORT $LN312@Init
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00032	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 54   : 	_Right = _Move(_Tmp);

  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0003a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 53   : 	_Left = _Move(_Right);

  00041	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 54   : 	_Right = _Move(_Tmp);

  00044	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  0004b	85 c9		 test	 ecx, ecx
  0004d	74 1d		 je	 SHORT $LN312@Init

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0004f	2b d1		 sub	 edx, ecx
  00051	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
  00056	f7 ea		 imul	 edx
  00058	c1 fa 03	 sar	 edx, 3
  0005b	8b c2		 mov	 eax, edx
  0005d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00060	03 c2		 add	 eax, edx
  00062	50		 push	 eax
  00063	51		 push	 ecx
  00064	8d 4d f4	 lea	 ecx, DWORD PTR $T2[ebp]
  00067	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@I@Z ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::deallocate
$LN312@Init:

; 1542 : 		this->_Mylast() = this->_Myfirst();

  0006c	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 29   : 	this->m_vtSendPortalInfo.clear();

  0006f	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  00072	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00075	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0007a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0007d	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0007f	f7 e9		 imul	 ecx
  00081	c1 fa 04	 sar	 edx, 4
  00084	8b c2		 mov	 eax, edx
  00086	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00089	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 30   : 	if( this->m_vtSendPortalInfo.capacity() > 0 )

  0008b	74 41		 je	 SHORT $LN705@Init
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1549 : 		if (this == &_Right)

  0008d	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00090	3b c6		 cmp	 eax, esi
  00092	74 3a		 je	 SHORT $LN705@Init
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00094	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 54   : 	_Right = _Move(_Tmp);

  00096	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0009c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 53   : 	_Left = _Move(_Right);

  000a3	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 54   : 	_Right = _Move(_Tmp);

  000a6	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  000ad	85 c9		 test	 ecx, ecx
  000af	74 1d		 je	 SHORT $LN705@Init

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  000b1	2b d1		 sub	 edx, ecx
  000b3	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  000b8	f7 ea		 imul	 edx
  000ba	c1 fa 04	 sar	 edx, 4
  000bd	8b c2		 mov	 eax, edx
  000bf	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000c2	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  000c4	50		 push	 eax
  000c5	51		 push	 ecx
  000c6	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  000c9	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@I@Z ; std::allocator<_stSendPortalInfo>::deallocate
$LN705@Init:
  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 34   : }

  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
?Init@Minimap@@QAEXXZ ENDP				; Minimap::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
;	COMDAT ??1Minimap@@UAE@XZ
_TEXT	SEGMENT
??1Minimap@@UAE@XZ PROC					; Minimap::~Minimap, COMDAT
; _this$ = ecx

; 18   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi
  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Minimap@@6B@
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  0000b	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0000e	85 db		 test	 ebx, ebx
  00010	74 35		 je	 SHORT $LN7@Minimap

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00012	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00015	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0001a	2b cb		 sub	 ecx, ebx
  0001c	f7 e9		 imul	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0001e	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00021	c1 fa 04	 sar	 edx, 4
  00024	8b c2		 mov	 eax, edx
  00026	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00029	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0002b	50		 push	 eax
  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_stSendPortalInfo@@@std@@QAEXPAU_stSendPortalInfo@@I@Z ; std::allocator<_stSendPortalInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1663 : 			this->_Mylast() = pointer();

  00039	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1664 : 			this->_Myend() = pointer();

  00040	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN7@Minimap:

; 1656 : 		if (this->_Myfirst() != pointer())

  00047	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0004a	85 ff		 test	 edi, edi
  0004c	74 35		 je	 SHORT $LN102@Minimap

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0004e	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00051	b8 e9 a2 8b 2e	 mov	 eax, 780903145		; 2e8ba2e9H
  00056	2b cf		 sub	 ecx, edi
  00058	f7 e9		 imul	 ecx
  0005a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0005d	c1 fa 03	 sar	 edx, 3
  00060	8b c2		 mov	 eax, edx
  00062	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00065	03 c2		 add	 eax, edx
  00067	50		 push	 eax
  00068	57		 push	 edi
  00069	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U_stSendNPCInfo@@@std@@@std@@QAEXPAU_stSendNPCInfo@@I@Z ; std::_Wrap_alloc<std::allocator<_stSendNPCInfo> >::deallocate

; 1662 : 			this->_Myfirst() = pointer();

  0006e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1663 : 			this->_Mylast() = pointer();

  00075	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1664 : 			this->_Myend() = pointer();

  0007c	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN102@Minimap:
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 20   : }

  00086	c3		 ret	 0
??1Minimap@@UAE@XZ ENDP					; Minimap::~Minimap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
;	COMDAT ??0Minimap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Minimap@@QAE@XZ PROC					; Minimap::Minimap, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Minimap@@6B@

; 15   : }

  0000a	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 481  : 		_Mylast = pointer();

  00013	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 482  : 		_Myend = pointer();

  0001a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 13   : {

  00021	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00024	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 481  : 		_Mylast = pointer();

  0002b	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 482  : 		_Myend = pointer();

  00032	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp

; 15   : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??0Minimap@@QAE@XZ ENDP					; Minimap::Minimap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\minimap.h
;	COMDAT ??0PMSG_MEMBER_POS_INFO_SEND@@QAE@XZ
_TEXT	SEGMENT
??0PMSG_MEMBER_POS_INFO_SEND@@QAE@XZ PROC		; PMSG_MEMBER_POS_INFO_SEND::PMSG_MEMBER_POS_INFO_SEND, COMDAT
; _this$ = ecx

; 124  : 	
; 125  :     PBMSG_HEAD2 h;
; 126  :     BYTE btCount;

  00000	8d 41 05	 lea	 eax, DWORD PTR [ecx+5]
  00003	ba 05 00 00 00	 mov	 edx, 5
  00008	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@PMSG_MEMBE:
  00010	8d 40 0e	 lea	 eax, DWORD PTR [eax+14]
  00013	0f 57 c0	 xorps	 xmm0, xmm0

; 106  : 		memset(this->szName, 0, sizeof(this->szName));

  00016	66 0f d6 40 f2	 movq	 QWORD PTR [eax-14], xmm0
  0001b	c7 40 fa 00 00
	00 00		 mov	 DWORD PTR [eax-6], 0

; 107  : 		this->btPosX = 0;

  00022	66 c7 40 fe 00
	00		 mov	 WORD PTR [eax-2], 0
  00028	83 ea 01	 sub	 edx, 1
  0002b	75 e3		 jne	 SHORT $LL4@PMSG_MEMBE

; 121  : 	{
; 122  : 
; 123  : 	};

  0002d	8b c1		 mov	 eax, ecx
  0002f	c3		 ret	 0
??0PMSG_MEMBER_POS_INFO_SEND@@QAE@XZ ENDP		; PMSG_MEMBER_POS_INFO_SEND::PMSG_MEMBER_POS_INFO_SEND
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\minimap.h
;	COMDAT ??0stMemberPosInfo@@QAE@XZ
_TEXT	SEGMENT
??0stMemberPosInfo@@QAE@XZ PROC				; stMemberPosInfo::stMemberPosInfo, COMDAT
; _this$ = ecx

; 104  :     stMemberPosInfo()

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 105  : 	{
; 106  : 		memset(this->szName, 0, sizeof(this->szName));
; 107  : 		this->btPosX = 0;
; 108  : 		this->btPosY = 0;
; 109  : 		this->btMapNumber = 0;
; 110  : 	};

  00003	8b c1		 mov	 eax, ecx
  00005	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00009	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00010	66 c7 41 0c 00
	00		 mov	 WORD PTR [ecx+12], 0
  00016	c3		 ret	 0
??0stMemberPosInfo@@QAE@XZ ENDP				; stMemberPosInfo::stMemberPosInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 139  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 140  : 		lpBuf[0] = 0xC1;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]

; 141  : 		lpBuf[1] = size;

  00006	8a 45 14	 mov	 al, BYTE PTR _size$[ebp]
  00009	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 142  : 		lpBuf[2] = head;

  0000c	8a 45 0c	 mov	 al, BYTE PTR _head$[ebp]
  0000f	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 143  : 		lpBuf[3] = sub;

  00012	8a 45 10	 mov	 al, BYTE PTR _sub$[ebp]
  00015	c6 01 c1	 mov	 BYTE PTR [ecx], 193	; 000000c1H
  00018	88 41 03	 mov	 BYTE PTR [ecx+3], al

; 144  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z PROC	; std::_Container_base0::_Swap_all, COMDAT
; _this$ = ecx

; 48   : 		}

  00000	c2 04 00	 ret	 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z ENDP	; std::_Container_base0::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\minimap.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 583  : }*/

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
