; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\ClassCalc.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_scanf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_sscanf
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0ClassCalc@@QAE@XZ				; ClassCalc::ClassCalc
PUBLIC	??1ClassCalc@@QAE@XZ				; ClassCalc::~ClassCalc
PUBLIC	?Load@ClassCalc@@QAEXXZ				; ClassCalc::Load
PUBLIC	?ReadData@ClassCalc@@QAEXPAD@Z			; ClassCalc::ReadData
PUBLIC	?GetLevelPoint@ClassCalc@@QAEGPAUOBJECTSTRUCT@@EE@Z ; ClassCalc::GetLevelPoint
PUBLIC	?GetAttackDamage@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z ; ClassCalc::GetAttackDamage
PUBLIC	?GetMagicDamage@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z ; ClassCalc::GetMagicDamage
PUBLIC	?GetAttackSpeed@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z ; ClassCalc::GetAttackSpeed
PUBLIC	?GetSuccessfulBlocking@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z ; ClassCalc::GetSuccessfulBlocking
PUBLIC	?GetDefense@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z	; ClassCalc::GetDefense
PUBLIC	?GetAttackRate@ClassCalc@@QAEMPAUOBJECTSTRUCT@@@Z ; ClassCalc::GetAttackRate
PUBLIC	?GetDefenseRate@ClassCalc@@QAEMPAUOBJECTSTRUCT@@@Z ; ClassCalc::GetDefenseRate
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02NJPGOMH@?$CFf?$AA@			; `string'
PUBLIC	?g_ClassCalc@@3VClassCalc@@A			; g_ClassCalc
PUBLIC	??_C@_0BF@BFENLMGI@Custom?2ClassCalc?4ini?$AA@	; `string'
PUBLIC	??_C@_06MNAGNDLP@Wizard?$AA@			; `string'
PUBLIC	??_C@_06CJCFJDME@Knight?$AA@			; `string'
PUBLIC	??_C@_03BLHGIJ@Elf?$AA@				; `string'
PUBLIC	??_C@_09IIIKJBPO@Gladiator?$AA@			; `string'
PUBLIC	??_C@_04JBHPEIGC@Lord?$AA@			; `string'
PUBLIC	??_C@_08HLBMEKKE@Summoner?$AA@			; `string'
PUBLIC	??_C@_07GAPKMENA@Fighter?$AA@			; `string'
PUBLIC	??_C@_0M@DIGBFGNG@LevelPoints?$AA@		; `string'
PUBLIC	??_C@_0BC@DBJCOMJN@MasterLevelPoints?$AA@	; `string'
PUBLIC	??_C@_0BC@NOCHMAAO@MarlonBonusPoints?$AA@	; `string'
PUBLIC	??_C@_0BJ@JEODGPKF@AttackDamageMinRightDiv1?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NEKMBHND@AttackDamageMaxRightDiv1?$AA@ ; `string'
PUBLIC	??_C@_0BI@GMHPJGKB@AttackDamageMinLeftDiv1?$AA@	; `string'
PUBLIC	??_C@_0BI@PMAMIGEL@AttackDamageMaxLeftDiv1?$AA@	; `string'
PUBLIC	??_C@_0BJ@LPMODMGG@AttackDamageMinRightDiv2?$AA@ ; `string'
PUBLIC	??_C@_0BJ@PPIBEEBA@AttackDamageMaxRightDiv2?$AA@ ; `string'
PUBLIC	??_C@_0BI@EHFCMFGC@AttackDamageMinLeftDiv2?$AA@	; `string'
PUBLIC	??_C@_0BI@NHCBNFII@AttackDamageMaxLeftDiv2?$AA@	; `string'
PUBLIC	??_C@_0BJ@KGNFANCH@AttackDamageMinRightDiv3?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OGJKHFFB@AttackDamageMaxRightDiv3?$AA@ ; `string'
PUBLIC	??_C@_0BI@FOEJPECD@AttackDamageMinLeftDiv3?$AA@	; `string'
PUBLIC	??_C@_0BI@MODKOEMJ@AttackDamageMaxLeftDiv3?$AA@	; `string'
PUBLIC	??_C@_0BC@OIFGNBND@MagicDamageMinDiv?$AA@	; `string'
PUBLIC	??_C@_0BC@OLKFDBJM@MagicDamageMaxDiv?$AA@	; `string'
PUBLIC	??_C@_0BC@NCPDDHIP@CurseDamageMinDiv?$AA@	; `string'
PUBLIC	??_C@_0BC@NBAANHMA@CurseDamageMaxDiv?$AA@	; `string'
PUBLIC	??_C@_0P@KBPLHIKI@AttackSpeedDiv?$AA@		; `string'
PUBLIC	??_C@_0O@GGHOLBLA@MagicSpeedDiv?$AA@		; `string'
PUBLIC	??_C@_0L@FPKNOMOE@DefenseDiv?$AA@		; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_C@_0BD@DABPGKLG@PvPAttackRateFact1?$AA@	; `string'
PUBLIC	??_C@_0BD@BLDCDJHF@PvPAttackRateFact2?$AA@	; `string'
PUBLIC	??_C@_0BB@FLNEHKFN@PvPAttackRateDiv?$AA@	; `string'
PUBLIC	??_C@_0BD@NOPGMKOB@PvPDefenseRateFact?$AA@	; `string'
PUBLIC	??_C@_0BC@IJJDOOOP@PvPDefenseRateDiv?$AA@	; `string'
PUBLIC	??_C@_0BA@OINNJGM@SuccessBlockDiv?$AA@		; `string'
PUBLIC	??_C@_0BH@IDMJIOHL@PetAttackDamageMinFact?$AA@	; `string'
PUBLIC	??_C@_0BG@NOMMHGBF@PetAttackDamageMinDiv?$AA@	; `string'
PUBLIC	??_C@_0BI@NJJIOCCL@PetAttackDamageMinStart?$AA@	; `string'
PUBLIC	??_C@_0BH@GFKJCBJK@PetAttackDamageMaxFact?$AA@	; `string'
PUBLIC	??_C@_0BG@NNDPJGFK@PetAttackDamageMaxDiv?$AA@	; `string'
PUBLIC	??_C@_0BI@OHDFAGK@PetAttackDamageMaxStart?$AA@	; `string'
PUBLIC	??_C@_0BG@FBFNDAKM@PetCriticalAttackRate?$AA@	; `string'
PUBLIC	??_C@_0BD@EKBCGDFH@PetAttackSpeedFact?$AA@	; `string'
PUBLIC	??_C@_0BD@GCIFMCAD@PetAttackSpeedDiv1?$AA@	; `string'
PUBLIC	??_C@_0BD@EJKIJBMA@PetAttackSpeedDiv2?$AA@	; `string'
PUBLIC	??_C@_0BE@OLIJFFCF@PetAttackSpeedStart?$AA@	; `string'
PUBLIC	??_C@_0BI@IILDGDGG@PetSuccessAttackRateDiv?$AA@	; `string'
PUBLIC	??_C@_0BK@LAFHHKIK@PetSuccessAttackRateStart?$AA@ ; `string'
PUBLIC	??_C@_0DF@FNKEBEHD@?$FLClassCalc?$FN?5?$FLGetLevelPoint?$FN?5?$FL?$CFs?$FN@ ; `string'
PUBLIC	??_C@_0DI@FEJPDCJJ@?$FLClassCalc?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5?$CIGetAttack@ ; `string'
PUBLIC	??_C@_0DP@LGJFGABA@?$FLClassCalc?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5?$CIGetSucces@ ; `string'
PUBLIC	??_C@_0DE@JNFMMCCO@?$FLClassCalc?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5?$CIGetDefens@ ; `string'
PUBLIC	??_C@_0DH@ILELNGKJ@?$FLClassCalc?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5?$CIGetAttack@ ; `string'
PUBLIC	??_C@_0DO@HLLPJDNF@?$FLClassCalc?$FN?5?$FLGetAttackRate?$FN?5?$FL?$CFs?$FN@ ; `string'
PUBLIC	??_C@_0DG@GMNJPKKC@?$FLClassCalc?$FN?5?$FLGetDefenseRate?$FN?5?$FL?$CFs@ ; `string'
PUBLIC	??_C@_0DP@LFLJOOLK@?$FLClassCalc?$FN?5?$FLGetDefenseRate?$FN?5?$FL?$CFs@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3f8eb851eb851eb8
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	__imp__GetPrivateProfileStringA@24:PROC
EXTRN	___stdio_common_vsscanf:PROC
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?g_ClassCalc@@3VClassCalc@@A DB 02a0H DUP (?)		; g_ClassCalc
_BSS	ENDS
CRT$XCU	SEGMENT
?g_ClassCalc$initializer$@@3P6AXXZA DD FLAT:??__Eg_ClassCalc@@YAXXZ ; g_ClassCalc$initializer$
CRT$XCU	ENDS
;	COMDAT __real@3f8eb851eb851eb8
CONST	SEGMENT
__real@3f8eb851eb851eb8 DQ 03f8eb851eb851eb8r	; 0.015
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0DP@LFLJOOLK@?$FLClassCalc?$FN?5?$FLGetDefenseRate?$FN?5?$FL?$CFs@
CONST	SEGMENT
??_C@_0DP@LFLJOOLK@?$FLClassCalc?$FN?5?$FLGetDefenseRate?$FN?5?$FL?$CFs@ DB '['
	DB	'ClassCalc] [GetDefenseRate] [%s][%s] Returned wrong value: %f'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@GMNJPKKC@?$FLClassCalc?$FN?5?$FLGetDefenseRate?$FN?5?$FL?$CFs@
CONST	SEGMENT
??_C@_0DG@GMNJPKKC@?$FLClassCalc?$FN?5?$FLGetDefenseRate?$FN?5?$FL?$CFs@ DB '['
	DB	'ClassCalc] [GetDefenseRate] [%s][%s] Wrong class: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@HLLPJDNF@?$FLClassCalc?$FN?5?$FLGetAttackRate?$FN?5?$FL?$CFs?$FN@
CONST	SEGMENT
??_C@_0DO@HLLPJDNF@?$FLClassCalc?$FN?5?$FLGetAttackRate?$FN?5?$FL?$CFs?$FN@ DB '['
	DB	'ClassCalc] [GetAttackRate] [%s][%s] Returned wrong value: %f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@ILELNGKJ@?$FLClassCalc?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5?$CIGetAttack@
CONST	SEGMENT
??_C@_0DH@ILELNGKJ@?$FLClassCalc?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5?$CIGetAttack@ DB '['
	DB	'ClassCalc] [%s] [%s] (GetAttackRate) wrong class (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JNFMMCCO@?$FLClassCalc?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5?$CIGetDefens@
CONST	SEGMENT
??_C@_0DE@JNFMMCCO@?$FLClassCalc?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5?$CIGetDefens@ DB '['
	DB	'ClassCalc] [%s] [%s] (GetDefense) wrong class (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@LGJFGABA@?$FLClassCalc?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5?$CIGetSucces@
CONST	SEGMENT
??_C@_0DP@LGJFGABA@?$FLClassCalc?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5?$CIGetSucces@ DB '['
	DB	'ClassCalc] [%s] [%s] (GetSuccessfulBlocking) wrong class (%d)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@FEJPDCJJ@?$FLClassCalc?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5?$CIGetAttack@
CONST	SEGMENT
??_C@_0DI@FEJPDCJJ@?$FLClassCalc?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5?$CIGetAttack@ DB '['
	DB	'ClassCalc] [%s] [%s] (GetAttackSpeed) wrong class (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@FNKEBEHD@?$FLClassCalc?$FN?5?$FLGetLevelPoint?$FN?5?$FL?$CFs?$FN@
CONST	SEGMENT
??_C@_0DF@FNKEBEHD@?$FLClassCalc?$FN?5?$FLGetLevelPoint?$FN?5?$FL?$CFs?$FN@ DB '['
	DB	'ClassCalc] [GetLevelPoint] [%s][%s] Wrong class: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LAFHHKIK@PetSuccessAttackRateStart?$AA@
CONST	SEGMENT
??_C@_0BK@LAFHHKIK@PetSuccessAttackRateStart?$AA@ DB 'PetSuccessAttackRat'
	DB	'eStart', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IILDGDGG@PetSuccessAttackRateDiv?$AA@
CONST	SEGMENT
??_C@_0BI@IILDGDGG@PetSuccessAttackRateDiv?$AA@ DB 'PetSuccessAttackRateD'
	DB	'iv', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OLIJFFCF@PetAttackSpeedStart?$AA@
CONST	SEGMENT
??_C@_0BE@OLIJFFCF@PetAttackSpeedStart?$AA@ DB 'PetAttackSpeedStart', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EJKIJBMA@PetAttackSpeedDiv2?$AA@
CONST	SEGMENT
??_C@_0BD@EJKIJBMA@PetAttackSpeedDiv2?$AA@ DB 'PetAttackSpeedDiv2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GCIFMCAD@PetAttackSpeedDiv1?$AA@
CONST	SEGMENT
??_C@_0BD@GCIFMCAD@PetAttackSpeedDiv1?$AA@ DB 'PetAttackSpeedDiv1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EKBCGDFH@PetAttackSpeedFact?$AA@
CONST	SEGMENT
??_C@_0BD@EKBCGDFH@PetAttackSpeedFact?$AA@ DB 'PetAttackSpeedFact', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FBFNDAKM@PetCriticalAttackRate?$AA@
CONST	SEGMENT
??_C@_0BG@FBFNDAKM@PetCriticalAttackRate?$AA@ DB 'PetCriticalAttackRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OHDFAGK@PetAttackDamageMaxStart?$AA@
CONST	SEGMENT
??_C@_0BI@OHDFAGK@PetAttackDamageMaxStart?$AA@ DB 'PetAttackDamageMaxStar'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NNDPJGFK@PetAttackDamageMaxDiv?$AA@
CONST	SEGMENT
??_C@_0BG@NNDPJGFK@PetAttackDamageMaxDiv?$AA@ DB 'PetAttackDamageMaxDiv', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GFKJCBJK@PetAttackDamageMaxFact?$AA@
CONST	SEGMENT
??_C@_0BH@GFKJCBJK@PetAttackDamageMaxFact?$AA@ DB 'PetAttackDamageMaxFact'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NJJIOCCL@PetAttackDamageMinStart?$AA@
CONST	SEGMENT
??_C@_0BI@NJJIOCCL@PetAttackDamageMinStart?$AA@ DB 'PetAttackDamageMinSta'
	DB	'rt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NOMMHGBF@PetAttackDamageMinDiv?$AA@
CONST	SEGMENT
??_C@_0BG@NOMMHGBF@PetAttackDamageMinDiv?$AA@ DB 'PetAttackDamageMinDiv', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IDMJIOHL@PetAttackDamageMinFact?$AA@
CONST	SEGMENT
??_C@_0BH@IDMJIOHL@PetAttackDamageMinFact?$AA@ DB 'PetAttackDamageMinFact'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OINNJGM@SuccessBlockDiv?$AA@
CONST	SEGMENT
??_C@_0BA@OINNJGM@SuccessBlockDiv?$AA@ DB 'SuccessBlockDiv', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IJJDOOOP@PvPDefenseRateDiv?$AA@
CONST	SEGMENT
??_C@_0BC@IJJDOOOP@PvPDefenseRateDiv?$AA@ DB 'PvPDefenseRateDiv', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NOPGMKOB@PvPDefenseRateFact?$AA@
CONST	SEGMENT
??_C@_0BD@NOPGMKOB@PvPDefenseRateFact?$AA@ DB 'PvPDefenseRateFact', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FLNEHKFN@PvPAttackRateDiv?$AA@
CONST	SEGMENT
??_C@_0BB@FLNEHKFN@PvPAttackRateDiv?$AA@ DB 'PvPAttackRateDiv', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BLDCDJHF@PvPAttackRateFact2?$AA@
CONST	SEGMENT
??_C@_0BD@BLDCDJHF@PvPAttackRateFact2?$AA@ DB 'PvPAttackRateFact2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DABPGKLG@PvPAttackRateFact1?$AA@
CONST	SEGMENT
??_C@_0BD@DABPGKLG@PvPAttackRateFact1?$AA@ DB 'PvPAttackRateFact1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FPKNOMOE@DefenseDiv?$AA@
CONST	SEGMENT
??_C@_0L@FPKNOMOE@DefenseDiv?$AA@ DB 'DefenseDiv', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GGHOLBLA@MagicSpeedDiv?$AA@
CONST	SEGMENT
??_C@_0O@GGHOLBLA@MagicSpeedDiv?$AA@ DB 'MagicSpeedDiv', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KBPLHIKI@AttackSpeedDiv?$AA@
CONST	SEGMENT
??_C@_0P@KBPLHIKI@AttackSpeedDiv?$AA@ DB 'AttackSpeedDiv', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NBAANHMA@CurseDamageMaxDiv?$AA@
CONST	SEGMENT
??_C@_0BC@NBAANHMA@CurseDamageMaxDiv?$AA@ DB 'CurseDamageMaxDiv', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NCPDDHIP@CurseDamageMinDiv?$AA@
CONST	SEGMENT
??_C@_0BC@NCPDDHIP@CurseDamageMinDiv?$AA@ DB 'CurseDamageMinDiv', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OLKFDBJM@MagicDamageMaxDiv?$AA@
CONST	SEGMENT
??_C@_0BC@OLKFDBJM@MagicDamageMaxDiv?$AA@ DB 'MagicDamageMaxDiv', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OIFGNBND@MagicDamageMinDiv?$AA@
CONST	SEGMENT
??_C@_0BC@OIFGNBND@MagicDamageMinDiv?$AA@ DB 'MagicDamageMinDiv', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MODKOEMJ@AttackDamageMaxLeftDiv3?$AA@
CONST	SEGMENT
??_C@_0BI@MODKOEMJ@AttackDamageMaxLeftDiv3?$AA@ DB 'AttackDamageMaxLeftDi'
	DB	'v3', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FOEJPECD@AttackDamageMinLeftDiv3?$AA@
CONST	SEGMENT
??_C@_0BI@FOEJPECD@AttackDamageMinLeftDiv3?$AA@ DB 'AttackDamageMinLeftDi'
	DB	'v3', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OGJKHFFB@AttackDamageMaxRightDiv3?$AA@
CONST	SEGMENT
??_C@_0BJ@OGJKHFFB@AttackDamageMaxRightDiv3?$AA@ DB 'AttackDamageMaxRight'
	DB	'Div3', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KGNFANCH@AttackDamageMinRightDiv3?$AA@
CONST	SEGMENT
??_C@_0BJ@KGNFANCH@AttackDamageMinRightDiv3?$AA@ DB 'AttackDamageMinRight'
	DB	'Div3', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NHCBNFII@AttackDamageMaxLeftDiv2?$AA@
CONST	SEGMENT
??_C@_0BI@NHCBNFII@AttackDamageMaxLeftDiv2?$AA@ DB 'AttackDamageMaxLeftDi'
	DB	'v2', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EHFCMFGC@AttackDamageMinLeftDiv2?$AA@
CONST	SEGMENT
??_C@_0BI@EHFCMFGC@AttackDamageMinLeftDiv2?$AA@ DB 'AttackDamageMinLeftDi'
	DB	'v2', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PPIBEEBA@AttackDamageMaxRightDiv2?$AA@
CONST	SEGMENT
??_C@_0BJ@PPIBEEBA@AttackDamageMaxRightDiv2?$AA@ DB 'AttackDamageMaxRight'
	DB	'Div2', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LPMODMGG@AttackDamageMinRightDiv2?$AA@
CONST	SEGMENT
??_C@_0BJ@LPMODMGG@AttackDamageMinRightDiv2?$AA@ DB 'AttackDamageMinRight'
	DB	'Div2', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PMAMIGEL@AttackDamageMaxLeftDiv1?$AA@
CONST	SEGMENT
??_C@_0BI@PMAMIGEL@AttackDamageMaxLeftDiv1?$AA@ DB 'AttackDamageMaxLeftDi'
	DB	'v1', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GMHPJGKB@AttackDamageMinLeftDiv1?$AA@
CONST	SEGMENT
??_C@_0BI@GMHPJGKB@AttackDamageMinLeftDiv1?$AA@ DB 'AttackDamageMinLeftDi'
	DB	'v1', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NEKMBHND@AttackDamageMaxRightDiv1?$AA@
CONST	SEGMENT
??_C@_0BJ@NEKMBHND@AttackDamageMaxRightDiv1?$AA@ DB 'AttackDamageMaxRight'
	DB	'Div1', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JEODGPKF@AttackDamageMinRightDiv1?$AA@
CONST	SEGMENT
??_C@_0BJ@JEODGPKF@AttackDamageMinRightDiv1?$AA@ DB 'AttackDamageMinRight'
	DB	'Div1', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NOCHMAAO@MarlonBonusPoints?$AA@
CONST	SEGMENT
??_C@_0BC@NOCHMAAO@MarlonBonusPoints?$AA@ DB 'MarlonBonusPoints', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DBJCOMJN@MasterLevelPoints?$AA@
CONST	SEGMENT
??_C@_0BC@DBJCOMJN@MasterLevelPoints?$AA@ DB 'MasterLevelPoints', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DIGBFGNG@LevelPoints?$AA@
CONST	SEGMENT
??_C@_0M@DIGBFGNG@LevelPoints?$AA@ DB 'LevelPoints', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GAPKMENA@Fighter?$AA@
CONST	SEGMENT
??_C@_07GAPKMENA@Fighter?$AA@ DB 'Fighter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HLBMEKKE@Summoner?$AA@
CONST	SEGMENT
??_C@_08HLBMEKKE@Summoner?$AA@ DB 'Summoner', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JBHPEIGC@Lord?$AA@
CONST	SEGMENT
??_C@_04JBHPEIGC@Lord?$AA@ DB 'Lord', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IIIKJBPO@Gladiator?$AA@
CONST	SEGMENT
??_C@_09IIIKJBPO@Gladiator?$AA@ DB 'Gladiator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03BLHGIJ@Elf?$AA@
CONST	SEGMENT
??_C@_03BLHGIJ@Elf?$AA@ DB 'Elf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CJCFJDME@Knight?$AA@
CONST	SEGMENT
??_C@_06CJCFJDME@Knight?$AA@ DB 'Knight', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MNAGNDLP@Wizard?$AA@
CONST	SEGMENT
??_C@_06MNAGNDLP@Wizard?$AA@ DB 'Wizard', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BFENLMGI@Custom?2ClassCalc?4ini?$AA@
CONST	SEGMENT
??_C@_0BF@BFENLMGI@Custom?2ClassCalc?4ini?$AA@ DB 'Custom\ClassCalc.ini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf?$AA@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf?$AA@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_ClassCalc@@YAXXZ
text$yd	SEGMENT
??__Fg_ClassCalc@@YAXXZ PROC				; `dynamic atexit destructor for 'g_ClassCalc'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ClassCalc@@3VClassCalc@@A ; g_ClassCalc
  00005	e9 00 00 00 00	 jmp	 ??1ClassCalc@@QAE@XZ	; ClassCalc::~ClassCalc
??__Fg_ClassCalc@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_ClassCalc''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\classcalc.cpp
;	COMDAT ??__Eg_ClassCalc@@YAXXZ
text$di	SEGMENT
??__Eg_ClassCalc@@YAXXZ PROC				; `dynamic initializer for 'g_ClassCalc'', COMDAT

; 10   : ClassCalc g_ClassCalc;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ClassCalc@@3VClassCalc@@A ; g_ClassCalc
  00005	e8 00 00 00 00	 call	 ??0ClassCalc@@QAE@XZ	; ClassCalc::ClassCalc
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_ClassCalc@@YAXXZ ; `dynamic atexit destructor for 'g_ClassCalc''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_ClassCalc@@YAXXZ ENDP				; `dynamic initializer for 'g_ClassCalc''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\classcalc.cpp
;	COMDAT ?GetDefenseRate@ClassCalc@@QAEMPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_DefenseRate$ = 8					; size = 4
_lpUser$ = 8						; size = 4
?GetDefenseRate@ClassCalc@@QAEMPAUOBJECTSTRUCT@@@Z PROC	; ClassCalc::GetDefenseRate, COMDAT
; _this$ = ecx

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi

; 450  : 	float DefenseRate	= 0.0f;
; 451  : #if (ENABLETEST_ZTLUA == 1)
; 452  : 	ZTLuaManager* LuaMng = new ZTLuaManager(FILE_LUA_CHARACTERBASICS);
; 453  : 	ZTLuaUnit::Bind(LuaMng->getLua());
; 454  : 	ZTLuaItem::Bind(LuaMng->getLua());
; 455  : 	LuaMng->Call("getDefenseRate", lpUser->m_Index);
; 456  : 	DefenseRate = LuaMng->getRef()->cast<float>();
; 457  : 	ZTLuaManager::Delete(LuaMng);
; 458  : 	return DefenseRate;
; 459  : #else
; 460  : 	int Level			= lpUser->Level + lpUser->MasterLevel;

  00006	8b 7d 08	 mov	 edi, DWORD PTR _lpUser$[ebp]
  00009	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000c	0f bf 87 96 00
	00 00		 movsx	 eax, WORD PTR [edi+150]
  00013	0f bf 9f a8 00
	00 00		 movsx	 ebx, WORD PTR [edi+168]
  0001a	03 d8		 add	 ebx, eax

; 461  : 	WORD Class			= lpUser->Class;

  0001c	0f b7 87 90 00
	00 00		 movzx	 eax, WORD PTR [edi+144]

; 462  : 	// ----
; 463  : 	if( Class < CLASS_WIZARD || Class > CLASS_FIGHTER )

  00023	83 f8 06	 cmp	 eax, 6
  00026	0f 87 98 00 00
	00		 ja	 $LN3@GetDefense

; 468  : 	}
; 469  : 	// ----
; 470  : 	if( Class != CLASS_FIGHTER )

  0002c	74 2d		 je	 SHORT $LN4@GetDefense

; 471  : 	{
; 472  : 		DefenseRate = (float)(Level * this->m_Data[Class].PvPDefenseRateFact + lpUser->Dexterity / this->m_Data[Class].PvPDefenseRateDiv);

  0002e	56		 push	 esi
  0002f	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
  00032	0f b7 87 d2 00
	00 00		 movzx	 eax, WORD PTR [edi+210]
  00039	c1 e6 05	 shl	 esi, 5
  0003c	99		 cdq
  0003d	0f b7 4c 0e 40	 movzx	 ecx, WORD PTR [esi+ecx+64]
  00042	f7 f9		 idiv	 ecx
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00047	0f b7 4c 0e 38	 movzx	 ecx, WORD PTR [esi+ecx+56]
  0004c	0f af cb	 imul	 ecx, ebx
  0004f	5e		 pop	 esi
  00050	03 c1		 add	 eax, ecx
  00052	66 0f 6e c8	 movd	 xmm1, eax
  00056	0f 5b c9	 cvtdq2ps xmm1, xmm1

; 473  : 	}
; 474  : 	else

  00059	eb 2e		 jmp	 SHORT $LN8@GetDefense
$LN4@GetDefense:

; 475  : 	{
; 476  : 		DefenseRate = (float)(Level * this->m_Data[Class].PvPDefenseRateFactRF + lpUser->Dexterity / this->m_Data[Class].PvPDefenseRateDiv);

  0005b	0f b7 87 d2 00
	00 00		 movzx	 eax, WORD PTR [edi+210]
  00062	0f b7 89 80 02
	00 00		 movzx	 ecx, WORD PTR [ecx+640]
  00069	99		 cdq
  0006a	f7 f9		 idiv	 ecx
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0006f	66 0f 6e c3	 movd	 xmm0, ebx
  00073	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00076	66 0f 6e c8	 movd	 xmm1, eax
  0007a	f3 0f 59 81 7c
	02 00 00	 mulss	 xmm0, DWORD PTR [ecx+636]
  00082	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00085	f3 0f 58 c8	 addss	 xmm1, xmm0
$LN8@GetDefense:
  00089	0f 57 c0	 xorps	 xmm0, xmm0
  0008c	f3 0f 11 4d 08	 movss	 DWORD PTR _DefenseRate$[ebp], xmm1

; 477  : 	}
; 478  : 	// ----
; 479  : 	if( DefenseRate <= 0.0f )

  00091	0f 2f c1	 comiss	 xmm0, xmm1
  00094	72 23		 jb	 SHORT $LN6@GetDefense

; 480  : 	{
; 481  : 		LogAddC(2, "[ClassCalc] [GetDefenseRate] [%s][%s] Returned wrong value: %f",

  00096	0f 5a c1	 cvtps2pd xmm0, xmm1
  00099	83 ec 08	 sub	 esp, 8
  0009c	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  0009f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000a4	50		 push	 eax
  000a5	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  000a8	50		 push	 eax
  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@LFLJOOLK@?$FLClassCalc?$FN?5?$FLGetDefenseRate?$FN?5?$FL?$CFs@
  000ae	6a 02		 push	 2
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  000b6	83 c4 18	 add	 esp, 24			; 00000018H
$LN6@GetDefense:

; 482  : 			lpUser->AccountID, lpUser->Name, DefenseRate);
; 483  : 	}
; 484  : 	// ----
; 485  : 	return DefenseRate;

  000b9	d9 45 08	 fld	 DWORD PTR _DefenseRate$[ebp]
  000bc	5f		 pop	 edi
  000bd	5b		 pop	 ebx

; 486  : #endif
; 487  : }

  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 04 00	 ret	 4
$LN3@GetDefense:

; 464  : 	{
; 465  : 		LogAddC(2, "[ClassCalc] [GetDefenseRate] [%s][%s] Wrong class: %d",

  000c4	50		 push	 eax
  000c5	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  000c8	50		 push	 eax
  000c9	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  000cc	50		 push	 eax
  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@GMNJPKKC@?$FLClassCalc?$FN?5?$FLGetDefenseRate?$FN?5?$FL?$CFs@
  000d2	6a 02		 push	 2
  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 466  : 			lpUser->AccountID, lpUser->Name, Class);
; 467  : 		return 0.0f;

  000da	d9 ee		 fldz
  000dc	83 c4 14	 add	 esp, 20			; 00000014H
  000df	5f		 pop	 edi
  000e0	5b		 pop	 ebx

; 486  : #endif
; 487  : }

  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c2 04 00	 ret	 4
?GetDefenseRate@ClassCalc@@QAEMPAUOBJECTSTRUCT@@@Z ENDP	; ClassCalc::GetDefenseRate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\classcalc.cpp
;	COMDAT ?GetAttackRate@ClassCalc@@QAEMPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_AttackRate$ = -4					; size = 4
_Level$1$ = 8						; size = 4
_lpUser$ = 8						; size = 4
?GetAttackRate@ClassCalc@@QAEMPAUOBJECTSTRUCT@@@Z PROC	; ClassCalc::GetAttackRate, COMDAT
; _this$ = ecx

; 403  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi

; 404  : 	float AttackRate	= 0.0f;
; 405  : 
; 406  : #if (ENABLETEST_ZTLUA == 1)
; 407  : 	ZTLuaManager* LuaMng = new ZTLuaManager(FILE_LUA_CHARACTERBASICS);
; 408  : 	ZTLuaUnit::Bind(LuaMng->getLua());
; 409  : 	ZTLuaItem::Bind(LuaMng->getLua());
; 410  : 	LuaMng->Call("getAttackRate", lpUser->m_Index);
; 411  : 	AttackRate = LuaMng->getRef()->cast<float>();
; 412  : 	ZTLuaManager::Delete(LuaMng);
; 413  : 	return AttackRate;
; 414  : #else
; 415  : 	if( lpUser->Class >= MAX_TYPE_PLAYER || lpUser->Class < 0 )

  00006	8b 7d 08	 mov	 edi, DWORD PTR _lpUser$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	0f 57 d2	 xorps	 xmm2, xmm2
  0000e	0f 28 ca	 movaps	 xmm1, xmm2
  00011	f3 0f 11 4d fc	 movss	 DWORD PTR _AttackRate$[ebp], xmm1
  00016	0f b7 8f 90 00
	00 00		 movzx	 ecx, WORD PTR [edi+144]
  0001d	83 f9 07	 cmp	 ecx, 7
  00020	0f 83 09 01 00
	00		 jae	 $LN3@GetAttackR

; 420  : 	}	
; 421  : 	int Level			= lpUser->Level + lpUser->MasterLevel;

  00026	0f bf 87 96 00
	00 00		 movsx	 eax, WORD PTR [edi+150]
  0002d	56		 push	 esi
  0002e	0f bf b7 a8 00
	00 00		 movsx	 esi, WORD PTR [edi+168]
  00035	03 f0		 add	 esi, eax

; 422  : 	WORD Class			= lpUser->Class;

  00037	8b c1		 mov	 eax, ecx
  00039	89 75 08	 mov	 DWORD PTR _Level$1$[ebp], esi

; 423  : 	// ----
; 424  : 	if( Class == CLASS_WIZARD || Class == CLASS_DARKLORD )

  0003c	66 85 c0	 test	 ax, ax
  0003f	0f 84 8b 00 00
	00		 je	 $LN6@GetAttackR
  00045	83 f8 04	 cmp	 eax, 4
  00048	0f 84 82 00 00
	00		 je	 $LN6@GetAttackR

; 427  : 	}
; 428  : 	else if( Class == CLASS_KNIGHT || Class == CLASS_ELF || Class == CLASS_MAGUMSA || Class == CLASS_SUMMONER )

  0004e	83 f8 01	 cmp	 eax, 1
  00051	74 4f		 je	 SHORT $LN9@GetAttackR
  00053	83 f8 02	 cmp	 eax, 2
  00056	74 4a		 je	 SHORT $LN9@GetAttackR
  00058	83 f8 03	 cmp	 eax, 3
  0005b	74 45		 je	 SHORT $LN9@GetAttackR
  0005d	83 f8 05	 cmp	 eax, 5
  00060	74 40		 je	 SHORT $LN9@GetAttackR

; 431  : 	}
; 432  : 	else if( Class == CLASS_FIGHTER )

  00062	83 f8 06	 cmp	 eax, 6
  00065	0f 85 95 00 00
	00		 jne	 $LN13@GetAttackR

; 433  : 	{
; 434  : 		AttackRate = (float)(Level * this->m_Data[Class].PvPAttackRateFact1RF + (lpUser->Dexterity * this->m_Data[Class].PvPAttackRateFact2) / this->m_Data[Class].PvPAttackRateDiv);

  0006b	0f b7 8f d2 00
	00 00		 movzx	 ecx, WORD PTR [edi+210]
  00072	0f b7 83 74 02
	00 00		 movzx	 eax, WORD PTR [ebx+628]
  00079	0f af c1	 imul	 eax, ecx
  0007c	0f b7 8b 76 02
	00 00		 movzx	 ecx, WORD PTR [ebx+630]
  00083	66 0f 6e c6	 movd	 xmm0, esi
  00087	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0008a	99		 cdq
  0008b	f7 f9		 idiv	 ecx
  0008d	f3 0f 59 83 70
	02 00 00	 mulss	 xmm0, DWORD PTR [ebx+624]
  00095	66 0f 6e c8	 movd	 xmm1, eax
  00099	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0009c	f3 0f 58 c8	 addss	 xmm1, xmm0
  000a0	eb 54		 jmp	 SHORT $LN14@GetAttackR
$LN9@GetAttackR:

; 429  : 	{
; 430  : 		AttackRate = (float)(Level * this->m_Data[Class].PvPAttackRateFact1  + (lpUser->Dexterity * this->m_Data[Class].PvPAttackRateFact2) / this->m_Data[Class].PvPAttackRateDiv);

  000a2	0f b7 8f d2 00
	00 00		 movzx	 ecx, WORD PTR [edi+210]
  000a9	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
  000ac	c1 e6 05	 shl	 esi, 5
  000af	0f b7 44 1e 34	 movzx	 eax, WORD PTR [esi+ebx+52]
  000b4	0f af c1	 imul	 eax, ecx
  000b7	0f b7 4c 1e 36	 movzx	 ecx, WORD PTR [esi+ebx+54]
  000bc	99		 cdq
  000bd	f7 f9		 idiv	 ecx
  000bf	0f b7 4c 1e 2c	 movzx	 ecx, WORD PTR [esi+ebx+44]
  000c4	0f af 4d 08	 imul	 ecx, DWORD PTR _Level$1$[ebp]
  000c8	03 c1		 add	 eax, ecx
  000ca	66 0f 6e c8	 movd	 xmm1, eax
  000ce	eb 23		 jmp	 SHORT $LN15@GetAttackR
$LN6@GetAttackR:

; 425  : 	{
; 426  : 		AttackRate = (float)(Level * this->m_Data[Class].PvPAttackRateFact1 + lpUser->Dexterity * this->m_Data[Class].PvPAttackRateFact2);

  000d0	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000d3	0f b7 87 d2 00
	00 00		 movzx	 eax, WORD PTR [edi+210]
  000da	c1 e1 05	 shl	 ecx, 5
  000dd	0f b7 54 19 34	 movzx	 edx, WORD PTR [ecx+ebx+52]
  000e2	0f af d0	 imul	 edx, eax
  000e5	0f b7 44 19 2c	 movzx	 eax, WORD PTR [ecx+ebx+44]
  000ea	0f af c6	 imul	 eax, esi
  000ed	03 d0		 add	 edx, eax
  000ef	66 0f 6e ca	 movd	 xmm1, edx
$LN15@GetAttackR:
  000f3	0f 5b c9	 cvtdq2ps xmm1, xmm1
$LN14@GetAttackR:

; 435  : 	}
; 436  : 	// ----
; 437  : 	if( AttackRate <= 0.0f )

  000f6	0f 2f d1	 comiss	 xmm2, xmm1
  000f9	f3 0f 11 4d fc	 movss	 DWORD PTR _AttackRate$[ebp], xmm1
  000fe	72 23		 jb	 SHORT $LN11@GetAttackR
$LN13@GetAttackR:

; 438  : 	{
; 439  : 		LogAddC(2, "[ClassCalc] [GetAttackRate] [%s][%s] Returned wrong value: %f",

  00100	0f 5a c1	 cvtps2pd xmm0, xmm1
  00103	83 ec 08	 sub	 esp, 8
  00106	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  00109	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0010e	50		 push	 eax
  0010f	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  00112	50		 push	 eax
  00113	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@HLLPJDNF@?$FLClassCalc?$FN?5?$FLGetAttackRate?$FN?5?$FL?$CFs?$FN@
  00118	6a 02		 push	 2
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00120	83 c4 18	 add	 esp, 24			; 00000018H
$LN11@GetAttackR:

; 440  : 			lpUser->AccountID, lpUser->Name, AttackRate);
; 441  : 	}
; 442  : 	// ----
; 443  : 	return AttackRate;

  00123	d9 45 fc	 fld	 DWORD PTR _AttackRate$[ebp]
  00126	5e		 pop	 esi
  00127	5f		 pop	 edi
  00128	5b		 pop	 ebx

; 444  : #endif
; 445  : }

  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 04 00	 ret	 4
$LN3@GetAttackR:

; 416  : 	{
; 417  : 		LogAddC(2, "[ClassCalc] [%s] [%s] (GetAttackRate) wrong class (%d)",

  0012f	51		 push	 ecx
  00130	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  00133	50		 push	 eax
  00134	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  00137	50		 push	 eax
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@ILELNGKJ@?$FLClassCalc?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5?$CIGetAttack@
  0013d	6a 02		 push	 2
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 418  : 			lpUser->AccountID, lpUser->Name, lpUser->Class);
; 419  : 		return 0.0f;

  00145	d9 ee		 fldz
  00147	83 c4 14	 add	 esp, 20			; 00000014H
  0014a	5f		 pop	 edi
  0014b	5b		 pop	 ebx

; 444  : #endif
; 445  : }

  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 04 00	 ret	 4
?GetAttackRate@ClassCalc@@QAEMPAUOBJECTSTRUCT@@@Z ENDP	; ClassCalc::GetAttackRate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\classcalc.cpp
;	COMDAT ?GetDefense@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpUser$ = 8						; size = 4
?GetDefense@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; ClassCalc::GetDefense, COMDAT
; _this$ = ecx

; 366  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 367  : #if (ENABLETEST_ZTLUA == 1)
; 368  : 	ZTLuaManager* LuaMng = new ZTLuaManager(FILE_LUA_CHARACTERBASICS);
; 369  : 	ZTLuaUnit::Bind(LuaMng->getLua());
; 370  : 	ZTLuaItem::Bind(LuaMng->getLua());
; 371  : 	LuaMng->Call("setDefense", lpUser->m_Index);
; 372  : 	ZTLuaManager::Delete(LuaMng);
; 373  : #else
; 374  : 	if( lpUser->Class >= MAX_TYPE_PLAYER || lpUser->Class < 0 )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpUser$[ebp]
  00007	0f b7 96 90 00
	00 00		 movzx	 edx, WORD PTR [esi+144]
  0000e	83 fa 07	 cmp	 edx, 7
  00011	73 2d		 jae	 SHORT $LN3@GetDefense

; 377  : 			lpUser->AccountID, lpUser->Name, lpUser->Class);
; 378  : 		return;
; 379  : 	}
; 380  : 
; 381  : 	int Dexterity = lpUser->Dexterity + lpUser->AddDexterity;

  00013	0f b7 8e d2 00
	00 00		 movzx	 ecx, WORD PTR [esi+210]
  0001a	0f b7 86 fe 00
	00 00		 movzx	 eax, WORD PTR [esi+254]
  00021	03 c1		 add	 eax, ecx

; 382  : 
; 383  : //	if( Dexterity > g_MaxStatValue || Dexterity < 0 )
; 384  : //	{
; 385  : //		LogAddC(2, "[ClassCalc] [%s] [%s] (GetDefense) wrong Dexterity (%d)",
; 386  : //			lpUser->AccountID, lpUser->Name, Dexterity);
; 387  : //		return;
; 388  : //	}
; 389  : 
; 390  : 	if( this->m_Data[lpUser->Class].DefenseDiv < 0 )
; 391  : 	{
; 392  : 		LogAddC(2, "[ClassCalc] [%s] [%s] (GetDefense) wrong DefenseDiv (%d) for class (%d)",
; 393  : 			lpUser->AccountID, lpUser->Name, this->m_Data[lpUser->Class].DefenseDiv, lpUser->Class);
; 394  : 		return;
; 395  : 	}
; 396  : 
; 397  : 	lpUser->m_Defense = Dexterity / g_ClassCalc.m_Data[lpUser->Class].DefenseDiv;

  00023	8b ca		 mov	 ecx, edx
  00025	99		 cdq
  00026	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  00029	c1 e1 05	 shl	 ecx, 5
  0002c	0f b7 89 2a 00
	00 00		 movzx	 ecx, WORD PTR ?g_ClassCalc@@3VClassCalc@@A[ecx+42]
  00033	f7 f9		 idiv	 ecx
  00035	89 86 74 06 00
	00		 mov	 DWORD PTR [esi+1652], eax
  0003b	5e		 pop	 esi

; 398  : #endif
; 399  : }

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
$LN3@GetDefense:

; 375  : 	{
; 376  : 		LogAddC(2, "[ClassCalc] [%s] [%s] (GetDefense) wrong class (%d)",

  00040	52		 push	 edx
  00041	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00044	50		 push	 eax
  00045	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00048	50		 push	 eax
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@JNFMMCCO@?$FLClassCalc?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5?$CIGetDefens@
  0004e	6a 02		 push	 2
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00056	83 c4 14	 add	 esp, 20			; 00000014H
  00059	5e		 pop	 esi

; 398  : #endif
; 399  : }

  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?GetDefense@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; ClassCalc::GetDefense
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\classcalc.cpp
;	COMDAT ?GetSuccessfulBlocking@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpUser$ = 8						; size = 4
?GetSuccessfulBlocking@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; ClassCalc::GetSuccessfulBlocking, COMDAT
; _this$ = ecx

; 329  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 330  : #if (ENABLETEST_ZTLUA == 1)
; 331  : 	ZTLuaManager* LuaMng = new ZTLuaManager(FILE_LUA_CHARACTERBASICS);
; 332  : 	ZTLuaUnit::Bind(LuaMng->getLua());
; 333  : 	ZTLuaItem::Bind(LuaMng->getLua());
; 334  : 	LuaMng->Call("setSuccessfulBlocking", lpUser->m_Index);
; 335  : 	ZTLuaManager::Delete(LuaMng);
; 336  : #else
; 337  : 	if( lpUser->Class >= MAX_TYPE_PLAYER || lpUser->Class < 0 )

  00005	8b 75 08	 mov	 esi, DWORD PTR _lpUser$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	0f b7 be 90 00
	00 00		 movzx	 edi, WORD PTR [esi+144]
  00012	83 ff 07	 cmp	 edi, 7
  00015	73 2d		 jae	 SHORT $LN3@GetSuccess

; 340  : 			lpUser->AccountID, lpUser->Name, lpUser->Class);
; 341  : 		return;
; 342  : 	}
; 343  : 
; 344  : 	int Dexterity = lpUser->Dexterity + lpUser->AddDexterity;

  00017	0f b7 96 d2 00
	00 00		 movzx	 edx, WORD PTR [esi+210]

; 345  : 
; 346  : //	if( Dexterity > g_MaxStatValue || Dexterity < 0 )
; 347  : //	{
; 348  : //		LogAddC(2, "[ClassCalc] [%s] [%s] (GetSuccessfulBlocking) wrong Dexterity (%d)",
; 349  : //			lpUser->AccountID, lpUser->Name, Dexterity);
; 350  : //		return;
; 351  : //	}
; 352  : 
; 353  : 	if( this->m_Data[lpUser->Class].SuccessBlockDiv < 0 )
; 354  : 	{
; 355  : 		LogAddC(2, "[ClassCalc] [%s] [%s] (GetSuccessfulBlocking) wrong SuccessBlockDiv (%d) for class (%d)",
; 356  : 			lpUser->AccountID, lpUser->Name, this->m_Data[lpUser->Class].SuccessBlockDiv, lpUser->Class);
; 357  : 		return;
; 358  : 	}
; 359  : 
; 360  : 	lpUser->m_SuccessfulBlocking = Dexterity / this->m_Data[lpUser->Class].SuccessBlockDiv;

  0001e	8b cf		 mov	 ecx, edi
  00020	0f b7 86 fe 00
	00 00		 movzx	 eax, WORD PTR [esi+254]
  00027	03 c2		 add	 eax, edx
  00029	99		 cdq
  0002a	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0002d	c1 e1 05	 shl	 ecx, 5
  00030	5f		 pop	 edi
  00031	0f b7 4c 19 42	 movzx	 ecx, WORD PTR [ecx+ebx+66]
  00036	f7 f9		 idiv	 ecx
  00038	89 86 7c 06 00
	00		 mov	 DWORD PTR [esi+1660], eax
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx

; 361  : #endif
; 362  : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
$LN3@GetSuccess:

; 338  : 	{
; 339  : 		LogAddC(2, "[ClassCalc] [%s] [%s] (GetSuccessfulBlocking) wrong class (%d)",

  00044	57		 push	 edi
  00045	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00048	50		 push	 eax
  00049	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0004c	50		 push	 eax
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@LGJFGABA@?$FLClassCalc?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5?$CIGetSucces@
  00052	6a 02		 push	 2
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0005a	83 c4 14	 add	 esp, 20			; 00000014H
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx

; 361  : #endif
; 362  : }

  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
?GetSuccessfulBlocking@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; ClassCalc::GetSuccessfulBlocking
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\classcalc.cpp
;	COMDAT ?GetAttackSpeed@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpUser$ = 8						; size = 4
?GetAttackSpeed@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; ClassCalc::GetAttackSpeed, COMDAT
; _this$ = ecx

; 284  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 285  : #if (ENABLETEST_ZTLUA == 1)
; 286  : 	ZTLuaManager* LuaMng = new ZTLuaManager(FILE_LUA_CHARACTERBASICS);
; 287  : 	ZTLuaUnit::Bind(LuaMng->getLua());
; 288  : 	ZTLuaItem::Bind(LuaMng->getLua());
; 289  : 	LuaMng->Call("setAttackSpeed", lpUser->m_Index);
; 290  : 	ZTLuaManager::Delete(LuaMng);
; 291  : #else
; 292  : 	if( lpUser->Class >= MAX_TYPE_PLAYER || lpUser->Class < 0 )

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _lpUser$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	0f b7 93 90 00
	00 00		 movzx	 edx, WORD PTR [ebx+144]
  00011	83 fa 07	 cmp	 edx, 7
  00014	73 40		 jae	 SHORT $LN3@GetAttackS

; 295  : 			lpUser->AccountID, lpUser->Name, lpUser->Class);
; 296  : 		return;
; 297  : 	}
; 298  : 
; 299  : 	int Dexterity = lpUser->Dexterity + lpUser->AddDexterity;

  00016	0f b7 83 d2 00
	00 00		 movzx	 eax, WORD PTR [ebx+210]

; 300  : 
; 301  : 	//if( Dexterity > g_MaxStatValue || Dexterity < 0 )
; 302  : //	{
; 303  : 	//	LogAddC(2, "[ClassCalc] [%s] [%s] (GetAttackSpeed) wrong Dexterity (%d)",
; 304  : 	//		lpUser->AccountID, lpUser->Name, Dexterity);
; 305  : 	//	return;
; 306  : 	//}
; 307  : 	
; 308  : 	if( this->m_Data[lpUser->Class].AttackSpeedDiv < 0 )
; 309  : 	{
; 310  : 		LogAddC(2, "[ClassCalc] [%s] [%s] (GetAttackSpeed) wrong AttackSpeedDiv (%d) for class (%d)",
; 311  : 			lpUser->AccountID, lpUser->Name, this->m_Data[lpUser->Class].AttackSpeedDiv, lpUser->Class);
; 312  : 		return;
; 313  : 	}
; 314  : 
; 315  : 	if( this->m_Data[lpUser->Class].MagicSpeedDiv < 0 )
; 316  : 	{
; 317  : 		LogAddC(2, "[ClassCalc] [%s] [%s] (GetAttackSpeed) wrong MagicSpeedDiv (%d) for class (%d)",
; 318  : 			lpUser->AccountID, lpUser->Name, this->m_Data[lpUser->Class].MagicSpeedDiv, lpUser->Class);
; 319  : 		return;
; 320  : 	}
; 321  : 
; 322  : 	lpUser->m_AttackSpeed = Dexterity / this->m_Data[lpUser->Class].AttackSpeedDiv;

  0001d	8b ca		 mov	 ecx, edx
  0001f	57		 push	 edi
  00020	0f b7 bb fe 00
	00 00		 movzx	 edi, WORD PTR [ebx+254]
  00027	03 f8		 add	 edi, eax
  00029	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0002c	8b c7		 mov	 eax, edi
  0002e	c1 e1 05	 shl	 ecx, 5
  00031	03 f1		 add	 esi, ecx
  00033	99		 cdq
  00034	0f b7 4e 26	 movzx	 ecx, WORD PTR [esi+38]
  00038	f7 f9		 idiv	 ecx
  0003a	89 83 6c 06 00
	00		 mov	 DWORD PTR [ebx+1644], eax

; 323  : 	lpUser->m_MagicSpeed = Dexterity / this->m_Data[lpUser->Class].MagicSpeedDiv;

  00040	8b c7		 mov	 eax, edi
  00042	0f b7 4e 28	 movzx	 ecx, WORD PTR [esi+40]
  00046	99		 cdq
  00047	f7 f9		 idiv	 ecx
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	89 83 70 06 00
	00		 mov	 DWORD PTR [ebx+1648], eax
  00051	5b		 pop	 ebx

; 324  : #endif
; 325  : }

  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
$LN3@GetAttackS:

; 293  : 	{
; 294  : 		LogAddC(2, "[ClassCalc] [%s] [%s] (GetAttackSpeed) wrong class (%d)",

  00056	52		 push	 edx
  00057	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  0005a	50		 push	 eax
  0005b	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  0005e	50		 push	 eax
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@FEJPDCJJ@?$FLClassCalc?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5?$CIGetAttack@
  00064	6a 02		 push	 2
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 324  : #endif
; 325  : }

  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
?GetAttackSpeed@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; ClassCalc::GetAttackSpeed
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\classcalc.cpp
;	COMDAT ?GetMagicDamage@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_lpUser$ = 8						; size = 4
?GetMagicDamage@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; ClassCalc::GetMagicDamage, COMDAT
; _this$ = ecx

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 251  : #if (ENABLETEST_ZTLUA == 1)
; 252  : 	ZTLuaManager* LuaMng = new ZTLuaManager(FILE_LUA_CHARACTERBASICS);
; 253  : 	ZTLuaUnit::Bind(LuaMng->getLua());
; 254  : 	ZTLuaItem::Bind(LuaMng->getLua());
; 255  : 	LuaMng->Call("setMagicDamage", lpUser->m_Index);
; 256  : 	ZTLuaManager::Delete(LuaMng);
; 257  : #else
; 258  : 	int Energy = lpUser->Energy + lpUser->AddEnergy;

  00007	8b 7d 08	 mov	 edi, DWORD PTR _lpUser$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 75 fc	 mov	 DWORD PTR _this$1$[ebp], esi
  0000f	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  00016	0f b7 9f 02 01
	00 00		 movzx	 ebx, WORD PTR [edi+258]
  0001d	03 d8		 add	 ebx, eax

; 259  : 	// ----
; 260  : 	if( lpUser->Class == CLASS_WIZARD || lpUser->Class == CLASS_MAGUMSA )

  0001f	0f b7 87 90 00
	00 00		 movzx	 eax, WORD PTR [edi+144]
  00026	66 85 c0	 test	 ax, ax
  00029	0f 84 f5 00 00
	00		 je	 $LN4@GetMagicDa
  0002f	83 f8 03	 cmp	 eax, 3
  00032	0f 84 ec 00 00
	00		 je	 $LN4@GetMagicDa

; 264  : 	}
; 265  : 	else if( lpUser->Class == CLASS_SUMMONER )

  00038	83 f8 05	 cmp	 eax, 5
  0003b	0f 85 b3 00 00
	00		 jne	 $LN5@GetMagicDa

; 266  : 	{
; 267  : 		lpUser->m_MagicDamageMin = Energy / this->m_Data[lpUser->Class].MagicDamageMinDiv;

  00041	0f b7 8e fe 01
	00 00		 movzx	 ecx, WORD PTR [esi+510]
  00048	8b c3		 mov	 eax, ebx
  0004a	99		 cdq
  0004b	f7 f9		 idiv	 ecx
  0004d	89 87 48 06 00
	00		 mov	 DWORD PTR [edi+1608], eax

; 268  : 		lpUser->m_MagicDamageMax = (int)(double(0.015) + Energy / this->m_Data[lpUser->Class].MagicDamageMaxDiv);

  00053	8b c3		 mov	 eax, ebx
  00055	0f b7 8e 00 02
	00 00		 movzx	 ecx, WORD PTR [esi+512]
  0005c	99		 cdq
  0005d	f7 f9		 idiv	 ecx
  0005f	66 0f 6e c0	 movd	 xmm0, eax

; 269  : 		lpUser->m_CurseDamageMin = Energy / m_Data[lpUser->Class].CurseDamageMinDiv;

  00063	8b c3		 mov	 eax, ebx
  00065	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00069	99		 cdq
  0006a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f8eb851eb851eb8
  00072	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  00076	89 8f 4c 06 00
	00		 mov	 DWORD PTR [edi+1612], ecx
  0007c	0f b7 8e 02 02
	00 00		 movzx	 ecx, WORD PTR [esi+514]
  00083	f7 f9		 idiv	 ecx
  00085	89 87 84 06 00
	00		 mov	 DWORD PTR [edi+1668], eax

; 270  : 		lpUser->m_CurseDamageMax = (int)(double(0.015) + Energy / this->m_Data[lpUser->Class].CurseDamageMaxDiv);

  0008b	8b c3		 mov	 eax, ebx
  0008d	0f b7 8e 04 02
	00 00		 movzx	 ecx, WORD PTR [esi+516]
  00094	99		 cdq
  00095	f7 f9		 idiv	 ecx
  00097	66 0f 6e c0	 movd	 xmm0, eax
  0009b	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0009f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f8eb851eb851eb8
  000a7	f2 0f 2c c0	 cvttsd2si eax, xmm0
  000ab	66 0f 6e 87 4c
	06 00 00	 movd	 xmm0, DWORD PTR [edi+1612]

; 271  : 		lpUser->m_MagicDamageMax += lpUser->m_MPSkillOpt.MpsMaxMagicDamage;

  000b3	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000b6	89 87 88 06 00
	00		 mov	 DWORD PTR [edi+1672], eax
  000bc	f3 0f 58 87 10
	08 00 00	 addss	 xmm0, DWORD PTR [edi+2064]
  000c4	f3 0f 2c c0	 cvttss2si eax, xmm0
  000c8	66 0f 6e 87 48
	06 00 00	 movd	 xmm0, DWORD PTR [edi+1608]

; 272  : 		lpUser->m_MagicDamageMin += lpUser->m_MPSkillOpt.MpsMinMagicDamage;

  000d0	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000d3	89 87 4c 06 00
	00		 mov	 DWORD PTR [edi+1612], eax
  000d9	f3 0f 58 87 14
	08 00 00	 addss	 xmm0, DWORD PTR [edi+2068]
  000e1	f3 0f 2c c0	 cvttss2si eax, xmm0
  000e5	89 87 48 06 00
	00		 mov	 DWORD PTR [edi+1608], eax
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx

; 278  : 	}
; 279  : #endif
; 280  : }

  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c2 04 00	 ret	 4
$LN5@GetMagicDa:

; 273  : 	}
; 274  : 	else
; 275  : 	{
; 276  : 		lpUser->m_MagicDamageMin = Energy / 9;

  000f4	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  000f9	f7 eb		 imul	 ebx
  000fb	d1 fa		 sar	 edx, 1
  000fd	8b c2		 mov	 eax, edx
  000ff	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00102	03 c2		 add	 eax, edx
  00104	89 87 48 06 00
	00		 mov	 DWORD PTR [edi+1608], eax

; 277  : 		lpUser->m_MagicDamageMax = Energy / 4;

  0010a	8b c3		 mov	 eax, ebx
  0010c	99		 cdq
  0010d	83 e2 03	 and	 edx, 3
  00110	03 c2		 add	 eax, edx
  00112	c1 f8 02	 sar	 eax, 2
  00115	89 87 4c 06 00
	00		 mov	 DWORD PTR [edi+1612], eax
  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi
  0011d	5b		 pop	 ebx

; 278  : 	}
; 279  : #endif
; 280  : }

  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c2 04 00	 ret	 4
$LN4@GetMagicDa:

; 261  : 	{
; 262  : 		lpUser->m_MagicDamageMin = Energy / this->m_Data[lpUser->Class].MagicDamageMinDiv;

  00124	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
  00127	8b c1		 mov	 eax, ecx
  00129	c1 e6 05	 shl	 esi, 5
  0012c	0f b7 4c 06 1e	 movzx	 ecx, WORD PTR [esi+eax+30]
  00131	8b c3		 mov	 eax, ebx
  00133	99		 cdq
  00134	f7 f9		 idiv	 ecx
  00136	89 87 48 06 00
	00		 mov	 DWORD PTR [edi+1608], eax

; 263  : 		lpUser->m_MagicDamageMax = Energy / this->m_Data[lpUser->Class].MagicDamageMaxDiv;

  0013c	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0013f	0f b7 4c 06 20	 movzx	 ecx, WORD PTR [esi+eax+32]
  00144	8b c3		 mov	 eax, ebx
  00146	99		 cdq
  00147	f7 f9		 idiv	 ecx
  00149	89 87 4c 06 00
	00		 mov	 DWORD PTR [edi+1612], eax
  0014f	5f		 pop	 edi
  00150	5e		 pop	 esi
  00151	5b		 pop	 ebx

; 278  : 	}
; 279  : #endif
; 280  : }

  00152	8b e5		 mov	 esp, ebp
  00154	5d		 pop	 ebp
  00155	c2 04 00	 ret	 4
?GetMagicDamage@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; ClassCalc::GetMagicDamage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\classcalc.cpp
;	COMDAT ?GetAttackDamage@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_Right$1$ = -20						; size = 4
_Left$1$ = -16						; size = 4
_Dexterity$1$ = -12					; size = 4
tv945 = -8						; size = 4
tv943 = -8						; size = 4
tv941 = -8						; size = 4
tv939 = -8						; size = 4
tv937 = -8						; size = 4
tv935 = -8						; size = 4
tv933 = -8						; size = 4
tv931 = -8						; size = 4
tv929 = -8						; size = 4
tv927 = -8						; size = 4
tv925 = -8						; size = 4
tv923 = -8						; size = 4
tv921 = -8						; size = 4
_Energy$1$ = -8						; size = 4
_Vitality$1$ = -4					; size = 4
_Strength$1$ = 8					; size = 4
_lpUser$ = 8						; size = 4
?GetAttackDamage@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; ClassCalc::GetAttackDamage, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx

; 154  : #if (ENABLETEST_ZTLUA == 1)
; 155  : 	ZTLuaManager* LuaMng = new ZTLuaManager(FILE_LUA_CHARACTERBASICS);
; 156  : 	ZTLuaUnit::Bind(LuaMng->getLua());
; 157  : 	ZTLuaItem::Bind(LuaMng->getLua());
; 158  : 	LuaMng->Call("setAttackDamage", lpUser->m_Index);
; 159  : 	ZTLuaManager::Delete(LuaMng);
; 160  : #else
; 161  : 	CItem* Right	= &lpUser->pInventory[0];

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _lpUser$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 8b c0 11 00
	00		 mov	 ecx, DWORD PTR [ebx+4544]

; 162  : 	CItem* Left		= &lpUser->pInventory[1];
; 163  : 	int Strength	= lpUser->Strength + lpUser->AddStrength;

  00014	0f b7 b3 fc 00
	00 00		 movzx	 esi, WORD PTR [ebx+252]

; 164  : 	int Dexterity	= lpUser->Dexterity + lpUser->AddDexterity;

  0001b	0f b7 93 fe 00
	00 00		 movzx	 edx, WORD PTR [ebx+254]
  00022	89 4d ec	 mov	 DWORD PTR _Right$1$[ebp], ecx
  00025	8d 81 d4 00 00
	00		 lea	 eax, DWORD PTR [ecx+212]
  0002b	89 45 f0	 mov	 DWORD PTR _Left$1$[ebp], eax
  0002e	0f b7 83 d0 00
	00 00		 movzx	 eax, WORD PTR [ebx+208]
  00035	03 f0		 add	 esi, eax
  00037	0f b7 83 d2 00
	00 00		 movzx	 eax, WORD PTR [ebx+210]
  0003e	03 d0		 add	 edx, eax
  00040	89 75 08	 mov	 DWORD PTR _Strength$1$[ebp], esi

; 165  : 	int Vitality	= lpUser->Vitality + lpUser->AddVitality;

  00043	0f b7 83 00 01
	00 00		 movzx	 eax, WORD PTR [ebx+256]
  0004a	89 45 fc	 mov	 DWORD PTR _Vitality$1$[ebp], eax
  0004d	0f b7 83 d4 00
	00 00		 movzx	 eax, WORD PTR [ebx+212]
  00054	01 45 fc	 add	 DWORD PTR _Vitality$1$[ebp], eax

; 166  : 	int Energy		= lpUser->Energy + lpUser->AddEnergy;

  00057	0f b7 83 02 01
	00 00		 movzx	 eax, WORD PTR [ebx+258]
  0005e	89 45 f8	 mov	 DWORD PTR _Energy$1$[ebp], eax
  00061	0f b7 83 d6 00
	00 00		 movzx	 eax, WORD PTR [ebx+214]
  00068	01 45 f8	 add	 DWORD PTR _Energy$1$[ebp], eax

; 167  : 	WORD Class		= lpUser->Class;

  0006b	0f b7 83 90 00
	00 00		 movzx	 eax, WORD PTR [ebx+144]
  00072	89 55 f4	 mov	 DWORD PTR _Dexterity$1$[ebp], edx

; 168  : 	// ----
; 169  : 	if( Class == CLASS_WIZARD || Class == CLASS_KNIGHT )

  00075	66 85 c0	 test	 ax, ax
  00078	0f 84 fc 03 00
	00		 je	 $LN4@GetAttackD
  0007e	83 f8 01	 cmp	 eax, 1
  00081	0f 84 f3 03 00
	00		 je	 $LN4@GetAttackD

; 175  : 	}
; 176  : 	else if( Class == CLASS_ELF )

  00087	83 f8 02	 cmp	 eax, 2
  0008a	0f 85 1d 02 00
	00		 jne	 $LN5@GetAttackD

; 177  : 	{
; 178  : 		if(		(Right->m_Type >= ITEMGET(4,8) && Right->m_Type < ITEMGET(4,15) )
; 179  : 			||	(Left->m_Type >= ITEMGET(4,0) && Left->m_Type < ITEMGET(4,7))
; 180  : 			||	Right->m_Type == ITEMGET(4,16)
; 181  : 			||	Left->m_Type == ITEMGET(4,17)
; 182  : 			||	Right->m_Type == ITEMGET(4,18)
; 183  : 			||	Right->m_Type == ITEMGET(4,19)
; 184  : 			||	Left->m_Type == ITEMGET(4,20)
; 185  : 			||	Left->m_Type == ITEMGET(4,21)
; 186  : 			||	Left->m_Type == ITEMGET(4,22)
; 187  : 			||	Left->m_Type == ITEMGET(4,23)
; 188  : 			||	Left->m_Type == ITEMGET(4,24)
; 189  : 			||	Left->m_Type == ITEMGET(4,25)
; 190  : 			||	Right->m_Type == ITEMGET(4,26)
; 191  : 			||	Left->m_Type == ITEMGET(4,27))

  00090	0f b7 49 06	 movzx	 ecx, WORD PTR [ecx+6]
  00094	b8 08 08 00 00	 mov	 eax, 2056		; 00000808H
  00099	66 3b c8	 cmp	 cx, ax
  0009c	7c 0e		 jl	 SHORT $LN10@GetAttackD
  0009e	b8 0f 08 00 00	 mov	 eax, 2063		; 0000080fH
  000a3	66 3b c8	 cmp	 cx, ax
  000a6	0f 8c 31 01 00
	00		 jl	 $LN9@GetAttackD
$LN10@GetAttackD:
  000ac	8b 45 f0	 mov	 eax, DWORD PTR _Left$1$[ebp]
  000af	c7 45 f8 00 08
	00 00		 mov	 DWORD PTR tv921[ebp], 2048 ; 00000800H
  000b6	0f b7 40 06	 movzx	 eax, WORD PTR [eax+6]
  000ba	66 3b 45 f8	 cmp	 ax, WORD PTR tv921[ebp]
  000be	7c 11		 jl	 SHORT $LN11@GetAttackD
  000c0	c7 45 f8 07 08
	00 00		 mov	 DWORD PTR tv923[ebp], 2055 ; 00000807H
  000c7	66 3b 45 f8	 cmp	 ax, WORD PTR tv923[ebp]
  000cb	0f 8c 0c 01 00
	00		 jl	 $LN9@GetAttackD
$LN11@GetAttackD:
  000d1	c7 45 f8 10 08
	00 00		 mov	 DWORD PTR tv925[ebp], 2064 ; 00000810H
  000d8	66 3b 4d f8	 cmp	 cx, WORD PTR tv925[ebp]
  000dc	0f 84 fb 00 00
	00		 je	 $LN9@GetAttackD
  000e2	c7 45 f8 11 08
	00 00		 mov	 DWORD PTR tv927[ebp], 2065 ; 00000811H
  000e9	66 3b 45 f8	 cmp	 ax, WORD PTR tv927[ebp]
  000ed	0f 84 ea 00 00
	00		 je	 $LN9@GetAttackD
  000f3	c7 45 f8 12 08
	00 00		 mov	 DWORD PTR tv929[ebp], 2066 ; 00000812H
  000fa	66 3b 4d f8	 cmp	 cx, WORD PTR tv929[ebp]
  000fe	0f 84 d9 00 00
	00		 je	 $LN9@GetAttackD
  00104	c7 45 f8 13 08
	00 00		 mov	 DWORD PTR tv931[ebp], 2067 ; 00000813H
  0010b	66 3b 4d f8	 cmp	 cx, WORD PTR tv931[ebp]
  0010f	0f 84 c8 00 00
	00		 je	 $LN9@GetAttackD
  00115	c7 45 f8 14 08
	00 00		 mov	 DWORD PTR tv933[ebp], 2068 ; 00000814H
  0011c	66 3b 45 f8	 cmp	 ax, WORD PTR tv933[ebp]
  00120	0f 84 b7 00 00
	00		 je	 $LN9@GetAttackD
  00126	c7 45 f8 15 08
	00 00		 mov	 DWORD PTR tv935[ebp], 2069 ; 00000815H
  0012d	66 3b 45 f8	 cmp	 ax, WORD PTR tv935[ebp]
  00131	0f 84 a6 00 00
	00		 je	 $LN9@GetAttackD
  00137	c7 45 f8 16 08
	00 00		 mov	 DWORD PTR tv937[ebp], 2070 ; 00000816H
  0013e	66 3b 45 f8	 cmp	 ax, WORD PTR tv937[ebp]
  00142	0f 84 95 00 00
	00		 je	 $LN9@GetAttackD
  00148	c7 45 f8 17 08
	00 00		 mov	 DWORD PTR tv939[ebp], 2071 ; 00000817H
  0014f	66 3b 45 f8	 cmp	 ax, WORD PTR tv939[ebp]
  00153	0f 84 84 00 00
	00		 je	 $LN9@GetAttackD
  00159	c7 45 f8 18 08
	00 00		 mov	 DWORD PTR tv941[ebp], 2072 ; 00000818H
  00160	66 3b 45 f8	 cmp	 ax, WORD PTR tv941[ebp]
  00164	74 77		 je	 SHORT $LN9@GetAttackD
  00166	c7 45 f8 19 08
	00 00		 mov	 DWORD PTR tv943[ebp], 2073 ; 00000819H
  0016d	66 3b 45 f8	 cmp	 ax, WORD PTR tv943[ebp]
  00171	74 6a		 je	 SHORT $LN9@GetAttackD
  00173	c7 45 f8 1a 08
	00 00		 mov	 DWORD PTR tv945[ebp], 2074 ; 0000081aH
  0017a	66 3b 4d f8	 cmp	 cx, WORD PTR tv945[ebp]
  0017e	74 5d		 je	 SHORT $LN9@GetAttackD
  00180	b9 1b 08 00 00	 mov	 ecx, 2075		; 0000081bH
  00185	66 3b c1	 cmp	 ax, cx
  00188	74 53		 je	 SHORT $LN9@GetAttackD

; 207  : 			}
; 208  : 		}
; 209  : 		else
; 210  : 		{
; 211  : 			lpUser->m_AttackDamageMinRight	= (Dexterity + Strength) / this->m_Data[Class].AttackDamageMinRightDiv3;

  0018a	03 f2		 add	 esi, edx
$LN26@GetAttackD:
  0018c	0f b7 8f d6 00
	00 00		 movzx	 ecx, WORD PTR [edi+214]
  00193	8b c6		 mov	 eax, esi
  00195	99		 cdq
  00196	f7 f9		 idiv	 ecx
  00198	89 83 64 06 00
	00		 mov	 DWORD PTR [ebx+1636], eax

; 212  : 			lpUser->m_AttackDamageMaxRight	= (Dexterity + Strength) / this->m_Data[Class].AttackDamageMaxRightDiv3;

  0019e	8b c6		 mov	 eax, esi
  001a0	0f b7 8f d8 00
	00 00		 movzx	 ecx, WORD PTR [edi+216]
  001a7	99		 cdq
  001a8	f7 f9		 idiv	 ecx
  001aa	89 83 60 06 00
	00		 mov	 DWORD PTR [ebx+1632], eax

; 213  : 			lpUser->m_AttackDamageMinLeft	= (Dexterity + Strength) / this->m_Data[Class].AttackDamageMinLeftDiv3;

  001b0	8b c6		 mov	 eax, esi
  001b2	0f b7 8f da 00
	00 00		 movzx	 ecx, WORD PTR [edi+218]
  001b9	99		 cdq
  001ba	f7 f9		 idiv	 ecx
  001bc	89 83 5c 06 00
	00		 mov	 DWORD PTR [ebx+1628], eax

; 214  : 			lpUser->m_AttackDamageMaxLeft	= (Dexterity + Strength) / this->m_Data[Class].AttackDamageMaxLeftDiv3;

  001c2	8b c6		 mov	 eax, esi
  001c4	0f b7 8f dc 00
	00 00		 movzx	 ecx, WORD PTR [edi+220]
  001cb	99		 cdq
  001cc	f7 f9		 idiv	 ecx
  001ce	5f		 pop	 edi
  001cf	5e		 pop	 esi
  001d0	89 83 58 06 00
	00		 mov	 DWORD PTR [ebx+1624], eax
  001d6	5b		 pop	 ebx

; 243  : 		lpUser->m_AttackDamageMaxLeft	= Strength / 4;
; 244  : 	}
; 245  : #endif
; 246  : }

  001d7	8b e5		 mov	 esp, ebp
  001d9	5d		 pop	 ebp
  001da	c2 04 00	 ret	 4
$LN9@GetAttackD:

; 192  : 		{
; 193  : 			if(		(Right->IsItem() && !Right->m_IsValidItem) 
; 194  : 				||	(Left->IsItem() && !Left->m_IsValidItem) )

  001dd	8b 4d ec	 mov	 ecx, DWORD PTR _Right$1$[ebp]
  001e0	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  001e5	85 c0		 test	 eax, eax
  001e7	74 0c		 je	 SHORT $LN15@GetAttackD
  001e9	8b 45 ec	 mov	 eax, DWORD PTR _Right$1$[ebp]
  001ec	80 b8 ac 00 00
	00 00		 cmp	 BYTE PTR [eax+172], 0
  001f3	74 18		 je	 SHORT $LN14@GetAttackD
$LN15@GetAttackD:
  001f5	8b 4d f0	 mov	 ecx, DWORD PTR _Left$1$[ebp]
  001f8	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  001fd	85 c0		 test	 eax, eax
  001ff	74 14		 je	 SHORT $LN12@GetAttackD
  00201	8b 45 f0	 mov	 eax, DWORD PTR _Left$1$[ebp]
  00204	80 b8 ac 00 00
	00 00		 cmp	 BYTE PTR [eax+172], 0
  0020b	75 08		 jne	 SHORT $LN12@GetAttackD
$LN14@GetAttackD:

; 195  : 			{
; 196  : 				lpUser->m_AttackDamageMinRight	= (Dexterity + Strength) / this->m_Data[Class].AttackDamageMinRightDiv3;

  0020d	03 75 f4	 add	 esi, DWORD PTR _Dexterity$1$[ebp]

; 197  : 				lpUser->m_AttackDamageMaxRight	= (Dexterity + Strength) / this->m_Data[Class].AttackDamageMaxRightDiv3;
; 198  : 				lpUser->m_AttackDamageMinLeft	= (Dexterity + Strength) / this->m_Data[Class].AttackDamageMinLeftDiv3;
; 199  : 				lpUser->m_AttackDamageMaxLeft	= (Dexterity + Strength) / this->m_Data[Class].AttackDamageMaxLeftDiv3;
; 200  : 			}
; 201  : 			else

  00210	e9 77 ff ff ff	 jmp	 $LN26@GetAttackD
$LN12@GetAttackD:

; 202  : 			{
; 203  : 				lpUser->m_AttackDamageMinRight	= (Dexterity / this->m_Data[Class].AttackDamageMinRightDiv1) + (Strength / this->m_Data[Class].AttackDamageMinRightDiv2);

  00215	0f b7 8f ce 00
	00 00		 movzx	 ecx, WORD PTR [edi+206]
  0021c	8b c6		 mov	 eax, esi
  0021e	99		 cdq
  0021f	f7 f9		 idiv	 ecx
  00221	0f b7 8f c6 00
	00 00		 movzx	 ecx, WORD PTR [edi+198]
  00228	8b f0		 mov	 esi, eax
  0022a	8b 45 f4	 mov	 eax, DWORD PTR _Dexterity$1$[ebp]
  0022d	99		 cdq
  0022e	f7 f9		 idiv	 ecx
  00230	03 f0		 add	 esi, eax

; 204  : 				lpUser->m_AttackDamageMaxRight	= (Dexterity / this->m_Data[Class].AttackDamageMaxRightDiv1) + (Strength / this->m_Data[Class].AttackDamageMaxRightDiv2);

  00232	8b 45 08	 mov	 eax, DWORD PTR _Strength$1$[ebp]
  00235	99		 cdq
  00236	89 b3 64 06 00
	00		 mov	 DWORD PTR [ebx+1636], esi
  0023c	0f b7 8f d0 00
	00 00		 movzx	 ecx, WORD PTR [edi+208]
  00243	f7 f9		 idiv	 ecx
  00245	0f b7 8f c8 00
	00 00		 movzx	 ecx, WORD PTR [edi+200]
  0024c	8b f0		 mov	 esi, eax
  0024e	8b 45 f4	 mov	 eax, DWORD PTR _Dexterity$1$[ebp]
  00251	99		 cdq
  00252	f7 f9		 idiv	 ecx
  00254	03 f0		 add	 esi, eax

; 205  : 				lpUser->m_AttackDamageMinLeft	= (Dexterity / this->m_Data[Class].AttackDamageMinLeftDiv1) + (Strength / this->m_Data[Class].AttackDamageMinLeftDiv2);

  00256	8b 45 08	 mov	 eax, DWORD PTR _Strength$1$[ebp]
  00259	89 b3 60 06 00
	00		 mov	 DWORD PTR [ebx+1632], esi
  0025f	0f b7 8f d2 00
	00 00		 movzx	 ecx, WORD PTR [edi+210]
  00266	99		 cdq
  00267	f7 f9		 idiv	 ecx
  00269	0f b7 8f ca 00
	00 00		 movzx	 ecx, WORD PTR [edi+202]
  00270	8b f0		 mov	 esi, eax
  00272	8b 45 f4	 mov	 eax, DWORD PTR _Dexterity$1$[ebp]
  00275	99		 cdq
  00276	f7 f9		 idiv	 ecx
  00278	03 f0		 add	 esi, eax

; 206  : 				lpUser->m_AttackDamageMaxLeft	= (Dexterity / this->m_Data[Class].AttackDamageMaxLeftDiv1) + (Strength / this->m_Data[Class].AttackDamageMaxLeftDiv2);

  0027a	8b 45 08	 mov	 eax, DWORD PTR _Strength$1$[ebp]
  0027d	89 b3 5c 06 00
	00		 mov	 DWORD PTR [ebx+1628], esi
  00283	0f b7 8f d4 00
	00 00		 movzx	 ecx, WORD PTR [edi+212]
  0028a	99		 cdq
  0028b	f7 f9		 idiv	 ecx
  0028d	0f b7 8f cc 00
	00 00		 movzx	 ecx, WORD PTR [edi+204]
  00294	8b f0		 mov	 esi, eax
  00296	8b 45 f4	 mov	 eax, DWORD PTR _Dexterity$1$[ebp]
  00299	99		 cdq
  0029a	f7 f9		 idiv	 ecx
  0029c	5f		 pop	 edi
  0029d	03 f0		 add	 esi, eax
  0029f	89 b3 58 06 00
	00		 mov	 DWORD PTR [ebx+1624], esi
  002a5	5e		 pop	 esi
  002a6	5b		 pop	 ebx

; 243  : 		lpUser->m_AttackDamageMaxLeft	= Strength / 4;
; 244  : 	}
; 245  : #endif
; 246  : }

  002a7	8b e5		 mov	 esp, ebp
  002a9	5d		 pop	 ebp
  002aa	c2 04 00	 ret	 4
$LN5@GetAttackD:

; 215  : 		}
; 216  : 	}
; 217  : 	else if( Class == CLASS_MAGUMSA || Class == CLASS_DARKLORD )

  002ad	83 f8 03	 cmp	 eax, 3
  002b0	0f 84 3b 01 00
	00		 je	 $LN18@GetAttackD
  002b6	83 f8 04	 cmp	 eax, 4
  002b9	0f 84 32 01 00
	00		 je	 $LN18@GetAttackD

; 223  : 	}
; 224  : 	else if( Class == CLASS_SUMMONER )

  002bf	83 f8 05	 cmp	 eax, 5
  002c2	75 53		 jne	 SHORT $LN19@GetAttackD

; 225  : 	{
; 226  : 		lpUser->m_AttackDamageMinRight	= ((Strength + Dexterity) / this->m_Data[Class].AttackDamageMinRightDiv1);

  002c4	0f b7 8f e6 01
	00 00		 movzx	 ecx, WORD PTR [edi+486]
  002cb	03 f2		 add	 esi, edx
  002cd	8b c6		 mov	 eax, esi
  002cf	99		 cdq
  002d0	f7 f9		 idiv	 ecx
  002d2	89 83 64 06 00
	00		 mov	 DWORD PTR [ebx+1636], eax

; 227  : 		lpUser->m_AttackDamageMaxRight	= ((Strength + Dexterity) / this->m_Data[Class].AttackDamageMaxRightDiv1);

  002d8	8b c6		 mov	 eax, esi
  002da	0f b7 8f e8 01
	00 00		 movzx	 ecx, WORD PTR [edi+488]
  002e1	99		 cdq
  002e2	f7 f9		 idiv	 ecx
  002e4	89 83 60 06 00
	00		 mov	 DWORD PTR [ebx+1632], eax

; 228  : 		lpUser->m_AttackDamageMinLeft	= ((Strength + Dexterity) / this->m_Data[Class].AttackDamageMinLeftDiv1);

  002ea	8b c6		 mov	 eax, esi
  002ec	0f b7 8f ea 01
	00 00		 movzx	 ecx, WORD PTR [edi+490]
  002f3	99		 cdq
  002f4	f7 f9		 idiv	 ecx
  002f6	89 83 5c 06 00
	00		 mov	 DWORD PTR [ebx+1628], eax
  002fc	8b c6		 mov	 eax, esi

; 229  : 		lpUser->m_AttackDamageMaxLeft	= ((Strength + Dexterity) / this->m_Data[Class].AttackDamageMaxLeftDiv1);

  002fe	0f b7 8f ec 01
	00 00		 movzx	 ecx, WORD PTR [edi+492]
  00305	99		 cdq
  00306	f7 f9		 idiv	 ecx
  00308	5f		 pop	 edi
  00309	5e		 pop	 esi
  0030a	89 83 58 06 00
	00		 mov	 DWORD PTR [ebx+1624], eax
  00310	5b		 pop	 ebx

; 243  : 		lpUser->m_AttackDamageMaxLeft	= Strength / 4;
; 244  : 	}
; 245  : #endif
; 246  : }

  00311	8b e5		 mov	 esp, ebp
  00313	5d		 pop	 ebp
  00314	c2 04 00	 ret	 4
$LN19@GetAttackD:

; 230  : 	}
; 231  : 	else if( Class == CLASS_FIGHTER )

  00317	83 f8 06	 cmp	 eax, 6
  0031a	0f 85 99 00 00
	00		 jne	 $LN21@GetAttackD

; 232  : 	{
; 233  : 		lpUser->m_AttackDamageMinRight	= Vitality / this->m_Data[Class].AttackDamageMinRightDiv1 + Strength / this->m_Data[Class].AttackDamageMinRightDiv2;

  00320	0f b7 8f 46 02
	00 00		 movzx	 ecx, WORD PTR [edi+582]
  00327	8b 45 fc	 mov	 eax, DWORD PTR _Vitality$1$[ebp]
  0032a	99		 cdq
  0032b	f7 f9		 idiv	 ecx
  0032d	0f b7 8f 4e 02
	00 00		 movzx	 ecx, WORD PTR [edi+590]
  00334	8b f0		 mov	 esi, eax
  00336	8b 45 08	 mov	 eax, DWORD PTR _Strength$1$[ebp]
  00339	99		 cdq
  0033a	f7 f9		 idiv	 ecx
  0033c	03 f0		 add	 esi, eax

; 234  : 		lpUser->m_AttackDamageMaxRight	= Vitality / this->m_Data[Class].AttackDamageMaxRightDiv1 + Strength / this->m_Data[Class].AttackDamageMaxRightDiv2;

  0033e	8b 45 fc	 mov	 eax, DWORD PTR _Vitality$1$[ebp]
  00341	99		 cdq
  00342	89 b3 64 06 00
	00		 mov	 DWORD PTR [ebx+1636], esi
  00348	0f b7 8f 48 02
	00 00		 movzx	 ecx, WORD PTR [edi+584]
  0034f	f7 f9		 idiv	 ecx
  00351	0f b7 8f 50 02
	00 00		 movzx	 ecx, WORD PTR [edi+592]
  00358	8b f0		 mov	 esi, eax
  0035a	8b 45 08	 mov	 eax, DWORD PTR _Strength$1$[ebp]
  0035d	99		 cdq
  0035e	f7 f9		 idiv	 ecx
  00360	03 f0		 add	 esi, eax

; 235  : 		lpUser->m_AttackDamageMinLeft	= Vitality / this->m_Data[Class].AttackDamageMinLeftDiv1 + Strength / this->m_Data[Class].AttackDamageMinLeftDiv2;

  00362	8b 45 fc	 mov	 eax, DWORD PTR _Vitality$1$[ebp]
  00365	89 b3 60 06 00
	00		 mov	 DWORD PTR [ebx+1632], esi
  0036b	0f b7 8f 4a 02
	00 00		 movzx	 ecx, WORD PTR [edi+586]
  00372	99		 cdq
  00373	f7 f9		 idiv	 ecx
  00375	0f b7 8f 52 02
	00 00		 movzx	 ecx, WORD PTR [edi+594]
  0037c	8b f0		 mov	 esi, eax
  0037e	8b 45 08	 mov	 eax, DWORD PTR _Strength$1$[ebp]
  00381	99		 cdq
  00382	f7 f9		 idiv	 ecx
  00384	03 f0		 add	 esi, eax

; 236  : 		lpUser->m_AttackDamageMaxLeft	= Vitality / this->m_Data[Class].AttackDamageMaxLeftDiv1 + Strength / this->m_Data[Class].AttackDamageMaxLeftDiv2;

  00386	8b 45 fc	 mov	 eax, DWORD PTR _Vitality$1$[ebp]
  00389	89 b3 5c 06 00
	00		 mov	 DWORD PTR [ebx+1628], esi
  0038f	0f b7 8f 4c 02
	00 00		 movzx	 ecx, WORD PTR [edi+588]
  00396	99		 cdq
  00397	f7 f9		 idiv	 ecx
  00399	0f b7 8f 54 02
	00 00		 movzx	 ecx, WORD PTR [edi+596]
  003a0	8b f0		 mov	 esi, eax
  003a2	8b 45 08	 mov	 eax, DWORD PTR _Strength$1$[ebp]
  003a5	99		 cdq
  003a6	f7 f9		 idiv	 ecx
  003a8	5f		 pop	 edi
  003a9	03 f0		 add	 esi, eax
  003ab	89 b3 58 06 00
	00		 mov	 DWORD PTR [ebx+1624], esi
  003b1	5e		 pop	 esi
  003b2	5b		 pop	 ebx

; 243  : 		lpUser->m_AttackDamageMaxLeft	= Strength / 4;
; 244  : 	}
; 245  : #endif
; 246  : }

  003b3	8b e5		 mov	 esp, ebp
  003b5	5d		 pop	 ebp
  003b6	c2 04 00	 ret	 4
$LN21@GetAttackD:

; 237  : 	}
; 238  : 	else
; 239  : 	{
; 240  : 		lpUser->m_AttackDamageMinRight	= Strength / 8;

  003b9	8b c6		 mov	 eax, esi
  003bb	99		 cdq
  003bc	83 e2 07	 and	 edx, 7
  003bf	5f		 pop	 edi
  003c0	8d 0c 02	 lea	 ecx, DWORD PTR [edx+eax]

; 241  : 		lpUser->m_AttackDamageMaxRight	= Strength / 4;

  003c3	8b c6		 mov	 eax, esi
  003c5	99		 cdq
  003c6	83 e2 03	 and	 edx, 3
  003c9	c1 f9 03	 sar	 ecx, 3
  003cc	03 c2		 add	 eax, edx
  003ce	89 8b 64 06 00
	00		 mov	 DWORD PTR [ebx+1636], ecx
  003d4	c1 f8 02	 sar	 eax, 2
  003d7	5e		 pop	 esi
  003d8	89 83 60 06 00
	00		 mov	 DWORD PTR [ebx+1632], eax

; 242  : 		lpUser->m_AttackDamageMinLeft	= Strength / 8;

  003de	89 8b 5c 06 00
	00		 mov	 DWORD PTR [ebx+1628], ecx
  003e4	89 83 58 06 00
	00		 mov	 DWORD PTR [ebx+1624], eax
  003ea	5b		 pop	 ebx

; 243  : 		lpUser->m_AttackDamageMaxLeft	= Strength / 4;
; 244  : 	}
; 245  : #endif
; 246  : }

  003eb	8b e5		 mov	 esp, ebp
  003ed	5d		 pop	 ebp
  003ee	c2 04 00	 ret	 4
$LN18@GetAttackD:

; 218  : 	{
; 219  : 		lpUser->m_AttackDamageMinRight	= (Strength / this->m_Data[Class].AttackDamageMinRightDiv1) + (Energy / this->m_Data[Class].AttackDamageMinRightDiv2);

  003f1	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  003f4	c1 e0 05	 shl	 eax, 5
  003f7	03 f8		 add	 edi, eax
  003f9	8b 45 f8	 mov	 eax, DWORD PTR _Energy$1$[ebp]
  003fc	99		 cdq
  003fd	0f b7 4f 0e	 movzx	 ecx, WORD PTR [edi+14]
  00401	f7 f9		 idiv	 ecx
  00403	0f b7 4f 06	 movzx	 ecx, WORD PTR [edi+6]
  00407	8b f0		 mov	 esi, eax
  00409	8b 45 08	 mov	 eax, DWORD PTR _Strength$1$[ebp]
  0040c	99		 cdq
  0040d	f7 f9		 idiv	 ecx
  0040f	03 f0		 add	 esi, eax

; 220  : 		lpUser->m_AttackDamageMaxRight	= (Strength / this->m_Data[Class].AttackDamageMaxRightDiv1) + (Energy / this->m_Data[Class].AttackDamageMaxRightDiv2);

  00411	8b 45 f8	 mov	 eax, DWORD PTR _Energy$1$[ebp]
  00414	99		 cdq
  00415	89 b3 64 06 00
	00		 mov	 DWORD PTR [ebx+1636], esi
  0041b	0f b7 4f 10	 movzx	 ecx, WORD PTR [edi+16]
  0041f	f7 f9		 idiv	 ecx
  00421	0f b7 4f 08	 movzx	 ecx, WORD PTR [edi+8]
  00425	8b f0		 mov	 esi, eax
  00427	8b 45 08	 mov	 eax, DWORD PTR _Strength$1$[ebp]
  0042a	99		 cdq
  0042b	f7 f9		 idiv	 ecx
  0042d	03 f0		 add	 esi, eax

; 221  : 		lpUser->m_AttackDamageMinLeft	= (Strength / this->m_Data[Class].AttackDamageMinLeftDiv1) + (Energy / this->m_Data[Class].AttackDamageMinLeftDiv2);

  0042f	8b 45 f8	 mov	 eax, DWORD PTR _Energy$1$[ebp]
  00432	89 b3 60 06 00
	00		 mov	 DWORD PTR [ebx+1632], esi
  00438	0f b7 4f 12	 movzx	 ecx, WORD PTR [edi+18]
  0043c	99		 cdq
  0043d	f7 f9		 idiv	 ecx
  0043f	0f b7 4f 0a	 movzx	 ecx, WORD PTR [edi+10]
  00443	8b f0		 mov	 esi, eax
  00445	8b 45 08	 mov	 eax, DWORD PTR _Strength$1$[ebp]
  00448	99		 cdq
  00449	f7 f9		 idiv	 ecx
  0044b	03 f0		 add	 esi, eax

; 222  : 		lpUser->m_AttackDamageMaxLeft	= (Strength / this->m_Data[Class].AttackDamageMaxLeftDiv1) + (Energy / this->m_Data[Class].AttackDamageMaxLeftDiv2);

  0044d	8b 45 f8	 mov	 eax, DWORD PTR _Energy$1$[ebp]
  00450	89 b3 5c 06 00
	00		 mov	 DWORD PTR [ebx+1628], esi
  00456	0f b7 4f 14	 movzx	 ecx, WORD PTR [edi+20]
  0045a	99		 cdq
  0045b	f7 f9		 idiv	 ecx
  0045d	0f b7 4f 0c	 movzx	 ecx, WORD PTR [edi+12]
  00461	8b f0		 mov	 esi, eax
  00463	8b 45 08	 mov	 eax, DWORD PTR _Strength$1$[ebp]
  00466	99		 cdq
  00467	f7 f9		 idiv	 ecx
  00469	5f		 pop	 edi
  0046a	03 f0		 add	 esi, eax
  0046c	89 b3 58 06 00
	00		 mov	 DWORD PTR [ebx+1624], esi
  00472	5e		 pop	 esi
  00473	5b		 pop	 ebx

; 243  : 		lpUser->m_AttackDamageMaxLeft	= Strength / 4;
; 244  : 	}
; 245  : #endif
; 246  : }

  00474	8b e5		 mov	 esp, ebp
  00476	5d		 pop	 ebp
  00477	c2 04 00	 ret	 4
$LN4@GetAttackD:

; 170  : 	{
; 171  : 		lpUser->m_AttackDamageMinRight	= Strength / this->m_Data[Class].AttackDamageMinRightDiv1;

  0047a	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
  0047d	c1 e6 05	 shl	 esi, 5
  00480	03 f7		 add	 esi, edi
  00482	8b 7d 08	 mov	 edi, DWORD PTR _Strength$1$[ebp]
  00485	8b c7		 mov	 eax, edi
  00487	99		 cdq
  00488	0f b7 4e 06	 movzx	 ecx, WORD PTR [esi+6]
  0048c	f7 f9		 idiv	 ecx
  0048e	89 83 64 06 00
	00		 mov	 DWORD PTR [ebx+1636], eax

; 172  : 		lpUser->m_AttackDamageMaxRight	= Strength / this->m_Data[Class].AttackDamageMaxRightDiv1;

  00494	8b c7		 mov	 eax, edi
  00496	0f b7 4e 08	 movzx	 ecx, WORD PTR [esi+8]
  0049a	99		 cdq
  0049b	f7 f9		 idiv	 ecx
  0049d	89 83 60 06 00
	00		 mov	 DWORD PTR [ebx+1632], eax

; 173  : 		lpUser->m_AttackDamageMinLeft	= Strength / this->m_Data[Class].AttackDamageMinLeftDiv1;

  004a3	8b c7		 mov	 eax, edi
  004a5	0f b7 4e 0a	 movzx	 ecx, WORD PTR [esi+10]
  004a9	99		 cdq
  004aa	f7 f9		 idiv	 ecx
  004ac	89 83 5c 06 00
	00		 mov	 DWORD PTR [ebx+1628], eax

; 174  : 		lpUser->m_AttackDamageMaxLeft	= Strength / this->m_Data[Class].AttackDamageMaxLeftDiv1;

  004b2	8b c7		 mov	 eax, edi
  004b4	0f b7 4e 0c	 movzx	 ecx, WORD PTR [esi+12]
  004b8	99		 cdq
  004b9	f7 f9		 idiv	 ecx
  004bb	5f		 pop	 edi
  004bc	5e		 pop	 esi
  004bd	89 83 58 06 00
	00		 mov	 DWORD PTR [ebx+1624], eax
  004c3	5b		 pop	 ebx

; 243  : 		lpUser->m_AttackDamageMaxLeft	= Strength / 4;
; 244  : 	}
; 245  : #endif
; 246  : }

  004c4	8b e5		 mov	 esp, ebp
  004c6	5d		 pop	 ebp
  004c7	c2 04 00	 ret	 4
?GetAttackDamage@ClassCalc@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; ClassCalc::GetAttackDamage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\classcalc.cpp
;	COMDAT ?GetLevelPoint@ClassCalc@@QAEGPAUOBJECTSTRUCT@@EE@Z
_TEXT	SEGMENT
_lpUser$ = 8						; size = 4
_OnlyMaster$ = 12					; size = 1
_OnlyMarlon$ = 16					; size = 1
?GetLevelPoint@ClassCalc@@QAEGPAUOBJECTSTRUCT@@EE@Z PROC ; ClassCalc::GetLevelPoint, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 119  : #if (ENABLETEST_ZTLUA == 1)
; 120  : 	ZTLuaManager* LuaMng = new ZTLuaManager(FILE_LUA_CHARACTERBASICS);
; 121  : 	ZTLuaUnit::Bind(LuaMng->getLua());
; 122  : 	ZTLuaItem::Bind(LuaMng->getLua());
; 123  : 	LuaMng->Call("getLevelPoints", lpUser->m_Index, OnlyMaster, OnlyMarlon);
; 124  : 	WORD Result = LuaMng->getRef()->cast<WORD>();
; 125  : 	ZTLuaManager::Delete(LuaMng);
; 126  : 	return Result;
; 127  : #else
; 128  : 	WORD Class = lpUser->Class;

  00003	8b 55 08	 mov	 edx, DWORD PTR _lpUser$[ebp]
  00006	0f b7 82 90 00
	00 00		 movzx	 eax, WORD PTR [edx+144]

; 129  : 	// ----
; 130  : 	if( Class < CLASS_WIZARD || Class > CLASS_FIGHTER )

  0000d	83 f8 06	 cmp	 eax, 6
  00010	77 2c		 ja	 SHORT $LN3@GetLevelPo

; 135  : 	}
; 136  : 	// ----
; 137  : 	if( OnlyMarlon )
; 138  : 	{
; 139  : 		return this->m_Data[Class].MarlonBonusPoints;

  00012	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00015	c1 e0 05	 shl	 eax, 5
  00018	80 7d 10 00	 cmp	 BYTE PTR _OnlyMarlon$[ebp], 0
  0001c	74 09		 je	 SHORT $LN4@GetLevelPo
  0001e	66 8b 44 08 04	 mov	 ax, WORD PTR [eax+ecx+4]

; 148  : #endif
; 149  : }

  00023	5d		 pop	 ebp
  00024	c2 0c 00	 ret	 12			; 0000000cH
$LN4@GetLevelPo:

; 140  : 	}
; 141  : 	// ----
; 142  : 	if( OnlyMaster )

  00027	80 7d 0c 00	 cmp	 BYTE PTR _OnlyMaster$[ebp], 0
  0002b	74 09		 je	 SHORT $LN5@GetLevelPo

; 143  : 	{
; 144  : 		return this->m_Data[Class].MasterLevelPoints;

  0002d	66 8b 44 08 02	 mov	 ax, WORD PTR [eax+ecx+2]

; 148  : #endif
; 149  : }

  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
$LN5@GetLevelPo:

; 145  : 	}
; 146  : 	// ----
; 147  : 	return this->m_Data[Class].LevelPoints;

  00036	66 8b 04 08	 mov	 ax, WORD PTR [eax+ecx]

; 148  : #endif
; 149  : }

  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
$LN3@GetLevelPo:

; 131  : 	{
; 132  : 		LogAddC(2, "[ClassCalc] [GetLevelPoint] [%s][%s] Wrong class: %d",

  0003e	50		 push	 eax
  0003f	8d 42 5d	 lea	 eax, DWORD PTR [edx+93]
  00042	50		 push	 eax
  00043	8d 42 52	 lea	 eax, DWORD PTR [edx+82]
  00046	50		 push	 eax
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@FNKEBEHD@?$FLClassCalc?$FN?5?$FLGetLevelPoint?$FN?5?$FL?$CFs?$FN@
  0004c	6a 02		 push	 2
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00054	83 c4 14	 add	 esp, 20			; 00000014H

; 133  : 			lpUser->AccountID, lpUser->Name, Class);
; 134  : 		return 5;

  00057	b8 05 00 00 00	 mov	 eax, 5

; 148  : #endif
; 149  : }

  0005c	5d		 pop	 ebp
  0005d	c2 0c 00	 ret	 12			; 0000000cH
?GetLevelPoint@ClassCalc@@QAEGPAUOBJECTSTRUCT@@EE@Z ENDP ; ClassCalc::GetLevelPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\classcalc.cpp
;	COMDAT ?ReadData@ClassCalc@@QAEXPAD@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -296					; size = 4
tv929 = -292						; size = 4
_ClassType$ = -288					; size = 28
_FloatValue$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_File$ = 8						; size = 4
?ReadData@ClassCalc@@QAEXPAD@Z PROC			; ClassCalc::ReadData, COMDAT
; _this$ = ecx

; 32   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _File$[ebp]

; 33   : 	LPSTR ClassType[] = { "Wizard", "Knight", "Elf", "Gladiator", "Lord", "Summoner", "Fighter" };
; 34   : 	char FloatValue[256];
; 35   : 	// ----
; 36   : 	for( int Class = CLASS_WIZARD; Class < MAX_TYPE_PLAYER; Class++ )

  00018	33 db		 xor	 ebx, ebx
  0001a	57		 push	 edi
  0001b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetPrivateProfileIntA@16
  00021	89 8d d8 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00027	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ClassType$[ebp], OFFSET ??_C@_06MNAGNDLP@Wizard?$AA@
  00031	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ClassType$[ebp+4], OFFSET ??_C@_06CJCFJDME@Knight?$AA@
  0003b	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ClassType$[ebp+8], OFFSET ??_C@_03BLHGIJ@Elf?$AA@
  00045	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ClassType$[ebp+12], OFFSET ??_C@_09IIIKJBPO@Gladiator?$AA@
  0004f	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ClassType$[ebp+16], OFFSET ??_C@_04JBHPEIGC@Lord?$AA@
  00059	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ClassType$[ebp+20], OFFSET ??_C@_08HLBMEKKE@Summoner?$AA@
  00063	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ClassType$[ebp+24], OFFSET ??_C@_07GAPKMENA@Fighter?$AA@
  0006d	0f 1f 00	 npad	 3
$LL4@ReadData:

; 37   : 	{
; 38   : 		this->m_Data[Class].LevelPoints					= GetPrivateProfileInt(ClassType[Class], "LevelPoints", 0, File);

  00070	56		 push	 esi
  00071	6a 00		 push	 0
  00073	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  00076	c1 e0 05	 shl	 eax, 5
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DIGBFGNG@LevelPoints?$AA@
  0007e	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  00085	03 c1		 add	 eax, ecx
  00087	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv929[ebp], eax
  0008d	ff d7		 call	 edi
  0008f	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]

; 39   : 		this->m_Data[Class].MasterLevelPoints			= GetPrivateProfileInt(ClassType[Class], "MasterLevelPoints", 0, File);

  00095	56		 push	 esi
  00096	6a 00		 push	 0
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DBJCOMJN@MasterLevelPoints?$AA@
  0009d	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  000a4	66 89 01	 mov	 WORD PTR [ecx], ax
  000a7	ff d7		 call	 edi
  000a9	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]

; 40   : 		this->m_Data[Class].MarlonBonusPoints			= GetPrivateProfileInt(ClassType[Class], "MarlonBonusPoints", 0, File);

  000af	56		 push	 esi
  000b0	6a 00		 push	 0
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NOCHMAAO@MarlonBonusPoints?$AA@
  000b7	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  000be	66 89 41 02	 mov	 WORD PTR [ecx+2], ax
  000c2	ff d7		 call	 edi
  000c4	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]

; 41   : 		this->m_Data[Class].AttackDamageMinRightDiv1	= GetPrivateProfileInt(ClassType[Class], "AttackDamageMinRightDiv1", 0, File);

  000ca	56		 push	 esi
  000cb	6a 00		 push	 0
  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JEODGPKF@AttackDamageMinRightDiv1?$AA@
  000d2	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  000d9	66 89 41 04	 mov	 WORD PTR [ecx+4], ax
  000dd	ff d7		 call	 edi
  000df	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]

; 42   : 		this->m_Data[Class].AttackDamageMaxRightDiv1	= GetPrivateProfileInt(ClassType[Class], "AttackDamageMaxRightDiv1", 0, File);

  000e5	56		 push	 esi
  000e6	6a 00		 push	 0
  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@NEKMBHND@AttackDamageMaxRightDiv1?$AA@
  000ed	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  000f4	66 89 41 06	 mov	 WORD PTR [ecx+6], ax
  000f8	ff d7		 call	 edi
  000fa	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]

; 43   : 		this->m_Data[Class].AttackDamageMinLeftDiv1		= GetPrivateProfileInt(ClassType[Class], "AttackDamageMinLeftDiv1", 0, File);

  00100	56		 push	 esi
  00101	6a 00		 push	 0
  00103	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GMHPJGKB@AttackDamageMinLeftDiv1?$AA@
  00108	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  0010f	66 89 41 08	 mov	 WORD PTR [ecx+8], ax
  00113	ff d7		 call	 edi
  00115	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]

; 44   : 		this->m_Data[Class].AttackDamageMaxLeftDiv1		= GetPrivateProfileInt(ClassType[Class], "AttackDamageMaxLeftDiv1", 0, File);

  0011b	56		 push	 esi
  0011c	6a 00		 push	 0
  0011e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@PMAMIGEL@AttackDamageMaxLeftDiv1?$AA@
  00123	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  0012a	66 89 41 0a	 mov	 WORD PTR [ecx+10], ax
  0012e	ff d7		 call	 edi
  00130	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]
  00136	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 45   : 		if( Class == CLASS_ELF || Class == CLASS_MAGUMSA || Class == CLASS_DARKLORD || Class == CLASS_FIGHTER )

  0013a	83 fb 02	 cmp	 ebx, 2
  0013d	74 0f		 je	 SHORT $LN6@ReadData
  0013f	83 fb 03	 cmp	 ebx, 3
  00142	74 0a		 je	 SHORT $LN6@ReadData
  00144	83 fb 04	 cmp	 ebx, 4
  00147	74 05		 je	 SHORT $LN6@ReadData
  00149	83 fb 06	 cmp	 ebx, 6
  0014c	75 6c		 jne	 SHORT $LN5@ReadData
$LN6@ReadData:

; 46   : 		{
; 47   : 			this->m_Data[Class].AttackDamageMinRightDiv2	= GetPrivateProfileInt(ClassType[Class], "AttackDamageMinRightDiv2", 0, File);

  0014e	56		 push	 esi
  0014f	6a 00		 push	 0
  00151	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LPMODMGG@AttackDamageMinRightDiv2?$AA@
  00156	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  0015d	ff d7		 call	 edi
  0015f	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]

; 48   : 			this->m_Data[Class].AttackDamageMaxRightDiv2	= GetPrivateProfileInt(ClassType[Class], "AttackDamageMaxRightDiv2", 0, File);

  00165	56		 push	 esi
  00166	6a 00		 push	 0
  00168	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PPIBEEBA@AttackDamageMaxRightDiv2?$AA@
  0016d	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  00174	66 89 41 0e	 mov	 WORD PTR [ecx+14], ax
  00178	ff d7		 call	 edi
  0017a	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]

; 49   : 			this->m_Data[Class].AttackDamageMinLeftDiv2		= GetPrivateProfileInt(ClassType[Class], "AttackDamageMinLeftDiv2", 0, File);

  00180	56		 push	 esi
  00181	6a 00		 push	 0
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@EHFCMFGC@AttackDamageMinLeftDiv2?$AA@
  00188	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  0018f	66 89 41 10	 mov	 WORD PTR [ecx+16], ax
  00193	ff d7		 call	 edi
  00195	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]

; 50   : 			this->m_Data[Class].AttackDamageMaxLeftDiv2		= GetPrivateProfileInt(ClassType[Class], "AttackDamageMaxLeftDiv2", 0, File);

  0019b	56		 push	 esi
  0019c	6a 00		 push	 0
  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NHCBNFII@AttackDamageMaxLeftDiv2?$AA@
  001a3	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  001aa	66 89 41 12	 mov	 WORD PTR [ecx+18], ax
  001ae	ff d7		 call	 edi
  001b0	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]
  001b6	66 89 41 14	 mov	 WORD PTR [ecx+20], ax
$LN5@ReadData:

; 51   : 		}
; 52   : 		if( Class == CLASS_ELF )

  001ba	83 fb 02	 cmp	 ebx, 2
  001bd	75 75		 jne	 SHORT $LN7@ReadData

; 53   : 		{
; 54   : 			this->m_Data[Class].AttackDamageMinRightDiv3	= GetPrivateProfileInt(ClassType[Class], "AttackDamageMinRightDiv3", 0, File);

  001bf	56		 push	 esi
  001c0	6a 00		 push	 0
  001c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KGNFANCH@AttackDamageMinRightDiv3?$AA@
  001c7	68 00 00 00 00	 push	 OFFSET ??_C@_03BLHGIJ@Elf?$AA@
  001cc	ff d7		 call	 edi
  001ce	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]

; 55   : 			this->m_Data[Class].AttackDamageMaxRightDiv3	= GetPrivateProfileInt(ClassType[Class], "AttackDamageMaxRightDiv3", 0, File);

  001d4	56		 push	 esi
  001d5	6a 00		 push	 0
  001d7	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@OGJKHFFB@AttackDamageMaxRightDiv3?$AA@
  001dc	68 00 00 00 00	 push	 OFFSET ??_C@_03BLHGIJ@Elf?$AA@
  001e1	66 89 81 d6 00
	00 00		 mov	 WORD PTR [ecx+214], ax
  001e8	ff d7		 call	 edi
  001ea	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]

; 56   : 			this->m_Data[Class].AttackDamageMinLeftDiv3		= GetPrivateProfileInt(ClassType[Class], "AttackDamageMinLeftDiv3", 0, File);

  001f0	56		 push	 esi
  001f1	6a 00		 push	 0
  001f3	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FOEJPECD@AttackDamageMinLeftDiv3?$AA@
  001f8	68 00 00 00 00	 push	 OFFSET ??_C@_03BLHGIJ@Elf?$AA@
  001fd	66 89 81 d8 00
	00 00		 mov	 WORD PTR [ecx+216], ax
  00204	ff d7		 call	 edi
  00206	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]

; 57   : 			this->m_Data[Class].AttackDamageMaxLeftDiv3		= GetPrivateProfileInt(ClassType[Class], "AttackDamageMaxLeftDiv3", 0, File);

  0020c	56		 push	 esi
  0020d	6a 00		 push	 0
  0020f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@MODKOEMJ@AttackDamageMaxLeftDiv3?$AA@
  00214	68 00 00 00 00	 push	 OFFSET ??_C@_03BLHGIJ@Elf?$AA@
  00219	66 89 81 da 00
	00 00		 mov	 WORD PTR [ecx+218], ax
  00220	ff d7		 call	 edi
  00222	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00228	66 89 81 dc 00
	00 00		 mov	 WORD PTR [ecx+220], ax

; 58   : 		}
; 59   : 		if( Class == CLASS_WIZARD || Class == CLASS_MAGUMSA || Class == CLASS_SUMMONER )

  0022f	e9 81 00 00 00	 jmp	 $LN10@ReadData
$LN7@ReadData:
  00234	85 db		 test	 ebx, ebx
  00236	74 0a		 je	 SHORT $LN9@ReadData
  00238	83 fb 03	 cmp	 ebx, 3
  0023b	74 05		 je	 SHORT $LN9@ReadData
  0023d	83 fb 05	 cmp	 ebx, 5
  00240	75 73		 jne	 SHORT $LN10@ReadData
$LN9@ReadData:

; 60   : 		{
; 61   : 			this->m_Data[Class].MagicDamageMinDiv	= GetPrivateProfileInt(ClassType[Class], "MagicDamageMinDiv", 0, File);

  00242	56		 push	 esi
  00243	6a 00		 push	 0
  00245	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OIFGNBND@MagicDamageMinDiv?$AA@
  0024a	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  00251	ff d7		 call	 edi
  00253	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]

; 62   : 			this->m_Data[Class].MagicDamageMaxDiv	= GetPrivateProfileInt(ClassType[Class], "MagicDamageMaxDiv", 0, File);

  00259	56		 push	 esi
  0025a	6a 00		 push	 0
  0025c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OLKFDBJM@MagicDamageMaxDiv?$AA@
  00261	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  00268	66 89 41 1e	 mov	 WORD PTR [ecx+30], ax
  0026c	ff d7		 call	 edi
  0026e	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]
  00274	66 89 41 20	 mov	 WORD PTR [ecx+32], ax

; 63   : 			if( Class == CLASS_SUMMONER )

  00278	83 fb 05	 cmp	 ebx, 5
  0027b	75 38		 jne	 SHORT $LN10@ReadData

; 64   : 			{
; 65   : 				this->m_Data[Class].CurseDamageMinDiv	= GetPrivateProfileInt(ClassType[Class], "CurseDamageMinDiv", 0, File);

  0027d	56		 push	 esi
  0027e	6a 00		 push	 0
  00280	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NCPDDHIP@CurseDamageMinDiv?$AA@
  00285	68 00 00 00 00	 push	 OFFSET ??_C@_08HLBMEKKE@Summoner?$AA@
  0028a	ff d7		 call	 edi
  0028c	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]

; 66   : 				this->m_Data[Class].CurseDamageMaxDiv	= GetPrivateProfileInt(ClassType[Class], "CurseDamageMaxDiv", 0, File);

  00292	56		 push	 esi
  00293	6a 00		 push	 0
  00295	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NBAANHMA@CurseDamageMaxDiv?$AA@
  0029a	68 00 00 00 00	 push	 OFFSET ??_C@_08HLBMEKKE@Summoner?$AA@
  0029f	66 89 81 02 02
	00 00		 mov	 WORD PTR [ecx+514], ax
  002a6	ff d7		 call	 edi
  002a8	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  002ae	66 89 81 04 02
	00 00		 mov	 WORD PTR [ecx+516], ax
$LN10@ReadData:

; 67   : 			}
; 68   : 		}
; 69   : 		this->m_Data[Class].AttackSpeedDiv			= GetPrivateProfileInt(ClassType[Class], "AttackSpeedDiv", 0, File);

  002b5	56		 push	 esi
  002b6	6a 00		 push	 0
  002b8	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KBPLHIKI@AttackSpeedDiv?$AA@
  002bd	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  002c4	ff d7		 call	 edi
  002c6	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]

; 70   : 		this->m_Data[Class].MagicSpeedDiv			= GetPrivateProfileInt(ClassType[Class], "MagicSpeedDiv", 0, File);

  002cc	56		 push	 esi
  002cd	6a 00		 push	 0
  002cf	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GGHOLBLA@MagicSpeedDiv?$AA@
  002d4	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  002db	66 89 41 26	 mov	 WORD PTR [ecx+38], ax
  002df	ff d7		 call	 edi
  002e1	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]

; 71   : 		this->m_Data[Class].DefenseDiv				= GetPrivateProfileInt(ClassType[Class], "DefenseDiv", 0, File);

  002e7	56		 push	 esi
  002e8	6a 00		 push	 0
  002ea	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FPKNOMOE@DefenseDiv?$AA@
  002ef	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  002f6	66 89 41 28	 mov	 WORD PTR [ecx+40], ax
  002fa	ff d7		 call	 edi
  002fc	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]

; 72   : 		if( Class == CLASS_FIGHTER )
; 73   : 		{
; 74   : 			GetPrivateProfileString(ClassType[Class], "PvPAttackRateFact1", "0", FloatValue, 5, File);

  00302	56		 push	 esi
  00303	66 89 41 2a	 mov	 WORD PTR [ecx+42], ax
  00307	83 fb 06	 cmp	 ebx, 6
  0030a	75 40		 jne	 SHORT $LN11@ReadData
  0030c	6a 05		 push	 5
  0030e	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _FloatValue$[ebp]
  00314	50		 push	 eax
  00315	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  0031a	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DABPGKLG@PvPAttackRateFact1?$AA@
  0031f	68 00 00 00 00	 push	 OFFSET ??_C@_07GAPKMENA@Fighter?$AA@
  00324	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileStringA@24

; 75   : 			sscanf(FloatValue, "%f", &this->m_Data[Class].PvPAttackRateFact1RF);

  0032a	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00330	05 70 02 00 00	 add	 eax, 624		; 00000270H
  00335	50		 push	 eax
  00336	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _FloatValue$[ebp]
  0033c	68 00 00 00 00	 push	 OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
  00341	50		 push	 eax
  00342	e8 00 00 00 00	 call	 _sscanf
  00347	83 c4 0c	 add	 esp, 12			; 0000000cH

; 76   : 		}
; 77   : 		else

  0034a	eb 1a		 jmp	 SHORT $LN12@ReadData
$LN11@ReadData:

; 78   : 		{
; 79   : 			this->m_Data[Class].PvPAttackRateFact1	= GetPrivateProfileInt(ClassType[Class], "PvPAttackRateFact1", 0, File);

  0034c	6a 00		 push	 0
  0034e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DABPGKLG@PvPAttackRateFact1?$AA@
  00353	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  0035a	ff d7		 call	 edi
  0035c	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]
  00362	66 89 41 2c	 mov	 WORD PTR [ecx+44], ax
$LN12@ReadData:

; 80   : 		}
; 81   : 		this->m_Data[Class].PvPAttackRateFact2		= GetPrivateProfileInt(ClassType[Class], "PvPAttackRateFact2", 0, File);

  00366	56		 push	 esi
  00367	6a 00		 push	 0
  00369	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BLDCDJHF@PvPAttackRateFact2?$AA@
  0036e	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  00375	ff d7		 call	 edi
  00377	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]
  0037d	66 89 41 34	 mov	 WORD PTR [ecx+52], ax

; 82   : 		if( Class != CLASS_DARKLORD && Class != CLASS_WIZARD )

  00381	83 fb 04	 cmp	 ebx, 4
  00384	74 1f		 je	 SHORT $LN13@ReadData
  00386	85 db		 test	 ebx, ebx
  00388	74 1b		 je	 SHORT $LN13@ReadData

; 83   : 		{
; 84   : 			this->m_Data[Class].PvPAttackRateDiv	= GetPrivateProfileInt(ClassType[Class], "PvPAttackRateDiv", 0, File);

  0038a	56		 push	 esi
  0038b	6a 00		 push	 0
  0038d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FLNEHKFN@PvPAttackRateDiv?$AA@
  00392	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  00399	ff d7		 call	 edi
  0039b	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]
  003a1	66 89 41 36	 mov	 WORD PTR [ecx+54], ax
$LN13@ReadData:

; 85   : 		}
; 86   : 		if( Class == CLASS_FIGHTER )
; 87   : 		{
; 88   : 			GetPrivateProfileString(ClassType[Class], "PvPDefenseRateFact", "0", FloatValue, 5, File);

  003a5	56		 push	 esi
  003a6	83 fb 06	 cmp	 ebx, 6
  003a9	75 40		 jne	 SHORT $LN14@ReadData
  003ab	6a 05		 push	 5
  003ad	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _FloatValue$[ebp]
  003b3	50		 push	 eax
  003b4	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  003b9	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@NOPGMKOB@PvPDefenseRateFact?$AA@
  003be	68 00 00 00 00	 push	 OFFSET ??_C@_07GAPKMENA@Fighter?$AA@
  003c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileStringA@24

; 89   : 			sscanf(FloatValue, "%f", &this->m_Data[Class].PvPDefenseRateFactRF);

  003c9	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  003cf	05 7c 02 00 00	 add	 eax, 636		; 0000027cH
  003d4	50		 push	 eax
  003d5	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _FloatValue$[ebp]
  003db	68 00 00 00 00	 push	 OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
  003e0	50		 push	 eax
  003e1	e8 00 00 00 00	 call	 _sscanf
  003e6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 90   : 		}
; 91   : 		else

  003e9	eb 1a		 jmp	 SHORT $LN15@ReadData
$LN14@ReadData:

; 92   : 		{
; 93   : 			this->m_Data[Class].PvPDefenseRateFact		= GetPrivateProfileInt(ClassType[Class], "PvPDefenseRateFact", 0, File);

  003eb	6a 00		 push	 0
  003ed	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@NOPGMKOB@PvPDefenseRateFact?$AA@
  003f2	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  003f9	ff d7		 call	 edi
  003fb	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]
  00401	66 89 41 38	 mov	 WORD PTR [ecx+56], ax
$LN15@ReadData:

; 94   : 		}
; 95   : 		this->m_Data[Class].PvPDefenseRateDiv		= GetPrivateProfileInt(ClassType[Class], "PvPDefenseRateDiv", 0, File);

  00405	56		 push	 esi
  00406	6a 00		 push	 0
  00408	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IJJDOOOP@PvPDefenseRateDiv?$AA@
  0040d	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  00414	ff d7		 call	 edi
  00416	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]

; 96   : 		this->m_Data[Class].SuccessBlockDiv			= GetPrivateProfileInt(ClassType[Class], "SuccessBlockDiv", 0, File);

  0041c	56		 push	 esi
  0041d	6a 00		 push	 0
  0041f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OINNJGM@SuccessBlockDiv?$AA@
  00424	ff b4 9d e0 fe
	ff ff		 push	 DWORD PTR _ClassType$[ebp+ebx*4]
  0042b	66 89 41 40	 mov	 WORD PTR [ecx+64], ax
  0042f	ff d7		 call	 edi
  00431	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv929[ebp]
  00437	66 89 41 42	 mov	 WORD PTR [ecx+66], ax

; 97   : 		if( Class == CLASS_DARKLORD )

  0043b	83 fb 04	 cmp	 ebx, 4
  0043e	0f 85 6e 01 00
	00		 jne	 $LN24@ReadData

; 98   : 		{
; 99   : 			this->m_Data[Class].PetAttackDamageMinFact		= GetPrivateProfileInt(ClassType[Class], "PetAttackDamageMinFact", 0, File);

  00444	56		 push	 esi
  00445	6a 00		 push	 0
  00447	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IDMJIOHL@PetAttackDamageMinFact?$AA@
  0044c	68 00 00 00 00	 push	 OFFSET ??_C@_04JBHPEIGC@Lord?$AA@
  00451	ff d7		 call	 edi
  00453	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]

; 100  : 			this->m_Data[Class].PetAttackDamageMinDiv		= GetPrivateProfileInt(ClassType[Class], "PetAttackDamageMinDiv", 0, File);

  00459	56		 push	 esi
  0045a	6a 00		 push	 0
  0045c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NOMMHGBF@PetAttackDamageMinDiv?$AA@
  00461	68 00 00 00 00	 push	 OFFSET ??_C@_04JBHPEIGC@Lord?$AA@
  00466	66 89 81 c4 01
	00 00		 mov	 WORD PTR [ecx+452], ax
  0046d	ff d7		 call	 edi
  0046f	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]

; 101  : 			this->m_Data[Class].PetAttackDamageMinStart		= GetPrivateProfileInt(ClassType[Class], "PetAttackDamageMinStart", 0, File);

  00475	56		 push	 esi
  00476	6a 00		 push	 0
  00478	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NJJIOCCL@PetAttackDamageMinStart?$AA@
  0047d	68 00 00 00 00	 push	 OFFSET ??_C@_04JBHPEIGC@Lord?$AA@
  00482	66 89 81 c6 01
	00 00		 mov	 WORD PTR [ecx+454], ax
  00489	ff d7		 call	 edi
  0048b	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]

; 102  : 			this->m_Data[Class].PetAttackDamageMaxFact		= GetPrivateProfileInt(ClassType[Class], "PetAttackDamageMaxFact", 0, File);

  00491	56		 push	 esi
  00492	6a 00		 push	 0
  00494	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GFKJCBJK@PetAttackDamageMaxFact?$AA@
  00499	68 00 00 00 00	 push	 OFFSET ??_C@_04JBHPEIGC@Lord?$AA@
  0049e	66 89 81 c8 01
	00 00		 mov	 WORD PTR [ecx+456], ax
  004a5	ff d7		 call	 edi
  004a7	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]

; 103  : 			this->m_Data[Class].PetAttackDamageMaxDiv		= GetPrivateProfileInt(ClassType[Class], "PetAttackDamageMaxDiv", 0, File);

  004ad	56		 push	 esi
  004ae	6a 00		 push	 0
  004b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NNDPJGFK@PetAttackDamageMaxDiv?$AA@
  004b5	68 00 00 00 00	 push	 OFFSET ??_C@_04JBHPEIGC@Lord?$AA@
  004ba	66 89 81 ca 01
	00 00		 mov	 WORD PTR [ecx+458], ax
  004c1	ff d7		 call	 edi
  004c3	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]

; 104  : 			this->m_Data[Class].PetAttackDamageMaxStart		= GetPrivateProfileInt(ClassType[Class], "PetAttackDamageMaxStart", 0, File);

  004c9	56		 push	 esi
  004ca	6a 00		 push	 0
  004cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@OHDFAGK@PetAttackDamageMaxStart?$AA@
  004d1	68 00 00 00 00	 push	 OFFSET ??_C@_04JBHPEIGC@Lord?$AA@
  004d6	66 89 81 cc 01
	00 00		 mov	 WORD PTR [ecx+460], ax
  004dd	ff d7		 call	 edi
  004df	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]

; 105  : 			this->m_Data[Class].PetCriticalAttackRate		= GetPrivateProfileInt(ClassType[Class], "PetCriticalAttackRate", 0, File);

  004e5	56		 push	 esi
  004e6	6a 00		 push	 0
  004e8	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FBFNDAKM@PetCriticalAttackRate?$AA@
  004ed	68 00 00 00 00	 push	 OFFSET ??_C@_04JBHPEIGC@Lord?$AA@
  004f2	66 89 81 ce 01
	00 00		 mov	 WORD PTR [ecx+462], ax
  004f9	ff d7		 call	 edi
  004fb	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]

; 106  : 			this->m_Data[Class].PetAttackSpeedFact			= GetPrivateProfileInt(ClassType[Class], "PetAttackSpeedFact", 0, File);

  00501	56		 push	 esi
  00502	6a 00		 push	 0
  00504	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EKBCGDFH@PetAttackSpeedFact?$AA@
  00509	68 00 00 00 00	 push	 OFFSET ??_C@_04JBHPEIGC@Lord?$AA@
  0050e	66 89 81 d0 01
	00 00		 mov	 WORD PTR [ecx+464], ax
  00515	ff d7		 call	 edi
  00517	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]

; 107  : 			this->m_Data[Class].PetAttackSpeedDiv1			= GetPrivateProfileInt(ClassType[Class], "PetAttackSpeedDiv1", 0, File);

  0051d	56		 push	 esi
  0051e	6a 00		 push	 0
  00520	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GCIFMCAD@PetAttackSpeedDiv1?$AA@
  00525	68 00 00 00 00	 push	 OFFSET ??_C@_04JBHPEIGC@Lord?$AA@
  0052a	66 89 81 d2 01
	00 00		 mov	 WORD PTR [ecx+466], ax
  00531	ff d7		 call	 edi
  00533	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]

; 108  : 			this->m_Data[Class].PetAttackSpeedDiv2			= GetPrivateProfileInt(ClassType[Class], "PetAttackSpeedDiv2", 0, File);

  00539	56		 push	 esi
  0053a	6a 00		 push	 0
  0053c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EJKIJBMA@PetAttackSpeedDiv2?$AA@
  00541	68 00 00 00 00	 push	 OFFSET ??_C@_04JBHPEIGC@Lord?$AA@
  00546	66 89 81 d4 01
	00 00		 mov	 WORD PTR [ecx+468], ax
  0054d	ff d7		 call	 edi
  0054f	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]

; 109  : 			this->m_Data[Class].PetAttackSpeedStart			= GetPrivateProfileInt(ClassType[Class], "PetAttackSpeedStart", 0, File);

  00555	56		 push	 esi
  00556	6a 00		 push	 0
  00558	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@OLIJFFCF@PetAttackSpeedStart?$AA@
  0055d	68 00 00 00 00	 push	 OFFSET ??_C@_04JBHPEIGC@Lord?$AA@
  00562	66 89 81 d6 01
	00 00		 mov	 WORD PTR [ecx+470], ax
  00569	ff d7		 call	 edi
  0056b	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]

; 110  : 			this->m_Data[Class].PetSuccessAttackRateDiv		= GetPrivateProfileInt(ClassType[Class], "PetSuccessAttackRateDiv", 0, File);

  00571	56		 push	 esi
  00572	6a 00		 push	 0
  00574	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@IILDGDGG@PetSuccessAttackRateDiv?$AA@
  00579	66 89 81 d8 01
	00 00		 mov	 WORD PTR [ecx+472], ax
  00580	68 00 00 00 00	 push	 OFFSET ??_C@_04JBHPEIGC@Lord?$AA@
  00585	ff d7		 call	 edi
  00587	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]

; 111  : 			this->m_Data[Class].PetSuccessAttackRateStart	= GetPrivateProfileInt(ClassType[Class], "PetSuccessAttackRateStart", 0, File);

  0058d	56		 push	 esi
  0058e	6a 00		 push	 0
  00590	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@LAFHHKIK@PetSuccessAttackRateStart?$AA@
  00595	68 00 00 00 00	 push	 OFFSET ??_C@_04JBHPEIGC@Lord?$AA@
  0059a	66 89 81 da 01
	00 00		 mov	 WORD PTR [ecx+474], ax
  005a1	ff d7		 call	 edi
  005a3	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  005a9	66 89 81 dc 01
	00 00		 mov	 WORD PTR [ecx+476], ax
  005b0	eb 06		 jmp	 SHORT $LN2@ReadData
$LN24@ReadData:
  005b2	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
$LN2@ReadData:

; 33   : 	LPSTR ClassType[] = { "Wizard", "Knight", "Elf", "Gladiator", "Lord", "Summoner", "Fighter" };
; 34   : 	char FloatValue[256];
; 35   : 	// ----
; 36   : 	for( int Class = CLASS_WIZARD; Class < MAX_TYPE_PLAYER; Class++ )

  005b8	43		 inc	 ebx
  005b9	83 fb 07	 cmp	 ebx, 7
  005bc	0f 8c ae fa ff
	ff		 jl	 $LL4@ReadData

; 112  : 		}
; 113  : 	}
; 114  : }

  005c2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005c5	5f		 pop	 edi
  005c6	5e		 pop	 esi
  005c7	33 cd		 xor	 ecx, ebp
  005c9	5b		 pop	 ebx
  005ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005cf	8b e5		 mov	 esp, ebp
  005d1	5d		 pop	 ebp
  005d2	c2 04 00	 ret	 4
?ReadData@ClassCalc@@QAEXPAD@Z ENDP			; ClassCalc::ReadData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\classcalc.cpp
;	COMDAT ?Load@ClassCalc@@QAEXXZ
_TEXT	SEGMENT
?Load@ClassCalc@@QAEXXZ PROC				; ClassCalc::Load, COMDAT
; _this$ = ecx

; 26   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 27   : 	this->ReadData(gDirPath.GetNewPath(FILE_CUSTOM_CLASSCALC));

  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BFENLMGI@Custom?2ClassCalc?4ini?$AA@
  0000d	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00012	50		 push	 eax
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?ReadData@ClassCalc@@QAEXPAD@Z ; ClassCalc::ReadData
  0001a	5e		 pop	 esi

; 28   : }

  0001b	c3		 ret	 0
?Load@ClassCalc@@QAEXXZ ENDP				; ClassCalc::Load
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\classcalc.cpp
;	COMDAT ??1ClassCalc@@QAE@XZ
_TEXT	SEGMENT
??1ClassCalc@@QAE@XZ PROC				; ClassCalc::~ClassCalc, COMDAT
; _this$ = ecx

; 21   : 
; 22   : }

  00000	c3		 ret	 0
??1ClassCalc@@QAE@XZ ENDP				; ClassCalc::~ClassCalc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\classcalc.cpp
;	COMDAT ??0ClassCalc@@QAE@XZ
_TEXT	SEGMENT
??0ClassCalc@@QAE@XZ PROC				; ClassCalc::ClassCalc, COMDAT
; _this$ = ecx

; 15   : 	
; 16   : }

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0ClassCalc@@QAE@XZ ENDP				; ClassCalc::ClassCalc
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sscanf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sscanf	PROC						; COMDAT

; 2261 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2167 :     return __stdio_common_vsscanf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  00016	ff 70 04	 push	 DWORD PTR [eax+4]
  00019	ff 30		 push	 DWORD PTR [eax]
  0001b	e8 00 00 00 00	 call	 ___stdio_common_vsscanf
  00020	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2262 :     int _Result;
; 2263 :     va_list _ArgList;
; 2264 :     __crt_va_start(_ArgList, _Format);
; 2265 :     _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);
; 2266 :     __crt_va_end(_ArgList);
; 2267 :     return _Result;
; 2268 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsscanf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsscanf_l PROC					; COMDAT

; 2166 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2167 :     return __stdio_common_vsscanf(

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  00016	ff 70 04	 push	 DWORD PTR [eax+4]
  00019	ff 30		 push	 DWORD PTR [eax]
  0001b	e8 00 00 00 00	 call	 ___stdio_common_vsscanf
  00020	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2168 :         _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2169 :         _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2170 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
__vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 83   :     static unsigned __int64 _OptionsStorage;
; 84   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 85   : }

  00005	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\classcalc.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\classcalc.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 489  : // -------------------------------------------------------------------------------

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
