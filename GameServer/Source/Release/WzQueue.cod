; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\WzQueue.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0WZQueue@@QAE@I@Z				; WZQueue::WZQueue
PUBLIC	??1WZQueue@@QAE@XZ				; WZQueue::~WZQueue
PUBLIC	?GetCount@WZQueue@@QAEIXZ			; WZQueue::GetCount
PUBLIC	?AddToQueue@WZQueue@@QAEHQAEIEH@Z		; WZQueue::AddToQueue
PUBLIC	?AddToQueueList@WZQueue@@QAEPAU_ListNode@@PAEIEH@Z ; WZQueue::AddToQueueList
PUBLIC	?GetFromQueue@WZQueue@@QAEHPAEPAI0PAH@Z		; WZQueue::GetFromQueue
PUBLIC	?Init@WZQueue@@QAEXXZ				; WZQueue::Init
PUBLIC	?Free@WZQueue@@QAEXXZ				; WZQueue::Free
PUBLIC	?StartQ@WZQueue@@QAEHXZ				; WZQueue::StartQ
PUBLIC	?NextQ@WZQueue@@QAEHXZ				; WZQueue::NextQ
PUBLIC	?GetCurData@WZQueue@@QAEPAU_ListNode@@PAEPAI0PAH@Z ; WZQueue::GetCurData
PUBLIC	?Pop@WZQueue@@QAEHPAU_ListNode@@PAEHPAH2@Z	; WZQueue::Pop
PUBLIC	?DeleteNode@WZQueue@@QAEXPAU_ListNode@@@Z	; WZQueue::DeleteNode
PUBLIC	?SetCurDataSending@WZQueue@@QAEXPAU_ListNode@@@Z ; WZQueue::SetCurDataSending
PUBLIC	?GetHeadNode@WZQueue@@AAEPAU_ListNode@@XZ	; WZQueue::GetHeadNode
PUBLIC	?AddTail@WZQueue@@AAEHPAU_ListNode@@@Z		; WZQueue::AddTail
PUBLIC	?DeleteAllNodes@WZQueue@@AAEXXZ			; WZQueue::DeleteAllNodes
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__HeapAlloc@12:PROC
EXTRN	__imp__HeapFree@12:PROC
EXTRN	__imp__GetProcessHeap@0:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__InitializeCriticalSectionAndSpinCount@8:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__except_handler4:PROC
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?Pop@WZQueue@@QAEHPAU_ListNode@@PAEHPAH2@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffd0H
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	FLAT:$LN12@Pop
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ?DeleteAllNodes@WZQueue@@AAEXXZ
_TEXT	SEGMENT
tv64 = -4						; size = 4
?DeleteAllNodes@WZQueue@@AAEXXZ PROC			; WZQueue::DeleteAllNodes, COMDAT
; _this$ = ecx

; 249  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 250  : 	LPLISTNODE pNode=0;
; 251  : 
; 252  : 	EnterCriticalSection(&this->m_CriticalSection);

  00007	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  0000a	50		 push	 eax
  0000b	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 253  : 
; 254  : 	while ( (pNode=this->GetHeadNode() ) != 0 )

  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ?GetHeadNode@WZQueue@@AAEPAU_ListNode@@XZ ; WZQueue::GetHeadNode
  0001b	85 c0		 test	 eax, eax
  0001d	74 26		 je	 SHORT $LN3@DeleteAllN
  0001f	53		 push	 ebx
  00020	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetProcessHeap@0
  00026	57		 push	 edi
  00027	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__HeapFree@12
  0002d	0f 1f 00	 npad	 3
$LL2@DeleteAllN:

; 255  : 	{
; 256  : 		HeapFree(GetProcessHeap(), 0, pNode);

  00030	50		 push	 eax
  00031	6a 00		 push	 0
  00033	ff d3		 call	 ebx
  00035	50		 push	 eax
  00036	ff d7		 call	 edi
  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ?GetHeadNode@WZQueue@@AAEPAU_ListNode@@XZ ; WZQueue::GetHeadNode
  0003f	85 c0		 test	 eax, eax
  00041	75 ed		 jne	 SHORT $LL2@DeleteAllN
  00043	5f		 pop	 edi
  00044	5b		 pop	 ebx
$LN3@DeleteAllN:

; 257  : 	}
; 258  : 
; 259  : 	LeaveCriticalSection(&this->m_CriticalSection);

  00045	ff 75 fc	 push	 DWORD PTR tv64[ebp]
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0004e	5e		 pop	 esi

; 260  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?DeleteAllNodes@WZQueue@@AAEXXZ ENDP			; WZQueue::DeleteAllNodes
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ?AddTail@WZQueue@@AAEHPAU_ListNode@@@Z
_TEXT	SEGMENT
_pNewNode$ = 8						; size = 4
?AddTail@WZQueue@@AAEHPAU_ListNode@@@Z PROC		; WZQueue::AddTail, COMDAT
; _this$ = ecx

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 57   : 	BOOL bRet;
; 58   : 	EnterCriticalSection(&this->m_CriticalSection);

  00008	8d 5e 14	 lea	 ebx, DWORD PTR [esi+20]
  0000b	53		 push	 ebx
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 59   : 	bRet=1;
; 60   : 
; 61   : 	if( this->m_Count < 1280 )

  00012	81 3e 00 05 00
	00		 cmp	 DWORD PTR [esi], 1280	; 00000500H
  00018	bf 01 00 00 00	 mov	 edi, 1
  0001d	73 48		 jae	 SHORT $LN2@AddTail

; 62   : 	{
; 63   : 		pNewNode->lpNodePre  = this->m_pTail  ;

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _pNewNode$[ebp]
  00022	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00025	89 01		 mov	 DWORD PTR [ecx], eax

; 64   : 		pNewNode->lpNodeNext = 0;

  00027	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 65   : 
; 66   : 		if ( this->m_pHead  ==0 )

  0002e	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00032	75 18		 jne	 SHORT $LN4@AddTail

; 73   : 		}
; 74   : 
; 75   : 		this->m_pTail = pNewNode;
; 76   : 		this->m_Count++;

  00034	ff 06		 inc	 DWORD PTR [esi]

; 77   : 	}
; 78   : 	else
; 79   : 	{
; 80   : 		bRet=0;
; 81   : 	}
; 82   : 
; 83   : 	LeaveCriticalSection(&this->m_CriticalSection);

  00036	53		 push	 ebx
  00037	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0003a	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 84   : 	return bRet;

  00043	8b c7		 mov	 eax, edi
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx

; 85   : }

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN4@AddTail:

; 67   : 		{
; 68   : 			this->m_pHead = pNewNode;
; 69   : 		}
; 70   : 		else
; 71   : 		{
; 72   : 			this->m_pTail->lpNodeNext = pNewNode;

  0004c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 77   : 	}
; 78   : 	else
; 79   : 	{
; 80   : 		bRet=0;
; 81   : 	}
; 82   : 
; 83   : 	LeaveCriticalSection(&this->m_CriticalSection);

  0004f	53		 push	 ebx
  00050	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00053	ff 06		 inc	 DWORD PTR [esi]
  00055	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 84   : 	return bRet;

  0005e	8b c7		 mov	 eax, edi
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx

; 85   : }

  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
$LN2@AddTail:

; 77   : 	}
; 78   : 	else
; 79   : 	{
; 80   : 		bRet=0;
; 81   : 	}
; 82   : 
; 83   : 	LeaveCriticalSection(&this->m_CriticalSection);

  00067	53		 push	 ebx
  00068	33 ff		 xor	 edi, edi
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 84   : 	return bRet;

  00070	8b c7		 mov	 eax, edi
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 85   : }

  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
?AddTail@WZQueue@@AAEHPAU_ListNode@@@Z ENDP		; WZQueue::AddTail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ?GetHeadNode@WZQueue@@AAEPAU_ListNode@@XZ
_TEXT	SEGMENT
?GetHeadNode@WZQueue@@AAEPAU_ListNode@@XZ PROC		; WZQueue::GetHeadNode, COMDAT
; _this$ = ecx

; 89   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 90   : 	LPLISTNODE pNode;
; 91   : 	EnterCriticalSection(&this->m_CriticalSection);

  00005	8d 5e 14	 lea	 ebx, DWORD PTR [esi+20]
  00008	53		 push	 ebx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 92   : 
; 93   : 	pNode=0;
; 94   : 
; 95   : 	if (this->m_pHead != 0)

  0000f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00012	33 ff		 xor	 edi, edi
  00014	85 c0		 test	 eax, eax
  00016	74 37		 je	 SHORT $LN2@GetHeadNod

; 96   : 	{
; 97   : 		pNode=this->m_pHead;

  00018	8b f8		 mov	 edi, eax

; 98   : 
; 99   : 		if ( this->m_pHead->lpNodeNext   != 0)

  0001a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001d	85 c0		 test	 eax, eax
  0001f	74 1e		 je	 SHORT $LN3@GetHeadNod

; 100  : 		{
; 101  : 			this->m_pHead->lpNodeNext->lpNodePre   = 0; 

  00021	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 102  : 			this->m_pHead = this->m_pHead->lpNodeNext ;

  00027	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 111  : 		
; 112  : 	}
; 113  : 
; 114  : 	LeaveCriticalSection(&this->m_CriticalSection );

  0002a	53		 push	 ebx
  0002b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002e	ff 0e		 dec	 DWORD PTR [esi]
  00030	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 115  : 	
; 116  : 	return pNode; 

  00039	8b c7		 mov	 eax, edi
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx

; 117  : }

  0003e	c3		 ret	 0
$LN3@GetHeadNod:

; 103  : 		}
; 104  : 		else
; 105  : 		{
; 106  : 			this->m_pTail = 0;
; 107  : 			this->m_pHead = 0;
; 108  : 		}
; 109  : 
; 110  : 		this->m_Count --;

  0003f	ff 0e		 dec	 DWORD PTR [esi]
  00041	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00048	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@GetHeadNod:

; 111  : 		
; 112  : 	}
; 113  : 
; 114  : 	LeaveCriticalSection(&this->m_CriticalSection );

  0004f	53		 push	 ebx
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 115  : 	
; 116  : 	return pNode; 

  00056	8b c7		 mov	 eax, edi
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx

; 117  : }

  0005b	c3		 ret	 0
?GetHeadNode@WZQueue@@AAEPAU_ListNode@@XZ ENDP		; WZQueue::GetHeadNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ?SetCurDataSending@WZQueue@@QAEXPAU_ListNode@@@Z
_TEXT	SEGMENT
_pNode$ = 8						; size = 4
?SetCurDataSending@WZQueue@@QAEXPAU_ListNode@@@Z PROC	; WZQueue::SetCurDataSending, COMDAT
; _this$ = ecx

; 342  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 343  : 	if ( pNode != NULL )

  00004	8b 7d 08	 mov	 edi, DWORD PTR _pNode$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 1a		 je	 SHORT $LN2@SetCurData

; 344  : 	{
; 345  : 		EnterCriticalSection(&this->m_CriticalSection);

  0000b	56		 push	 esi
  0000c	8d 71 14	 lea	 esi, DWORD PTR [ecx+20]
  0000f	56		 push	 esi
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 346  : 		pNode->bIsDataSending = TRUE;
; 347  : 		LeaveCriticalSection(&this->m_CriticalSection);

  00016	56		 push	 esi
  00017	c7 47 10 01 00
	00 00		 mov	 DWORD PTR [edi+16], 1
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00024	5e		 pop	 esi
$LN2@SetCurData:
  00025	5f		 pop	 edi

; 348  : 	}
; 349  : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?SetCurDataSending@WZQueue@@QAEXPAU_ListNode@@@Z ENDP	; WZQueue::SetCurDataSending
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ?DeleteNode@WZQueue@@QAEXPAU_ListNode@@@Z
_TEXT	SEGMENT
_pNext$1$ = -8						; size = 4
_pPre$1$ = -4						; size = 4
_pCur$ = 8						; size = 4
?DeleteNode@WZQueue@@QAEXPAU_ListNode@@@Z PROC		; WZQueue::DeleteNode, COMDAT
; _this$ = ecx

; 352  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 353  : 	LPLISTNODE pNode=0;
; 354  : 	LPLISTNODE pPre=0;
; 355  : 	LPLISTNODE pNext=0;
; 356  : 
; 357  : 	EnterCriticalSection(&this->m_CriticalSection);

  00009	8d 43 14	 lea	 eax, DWORD PTR [ebx+20]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 358  : 
; 359  : 	if ( pCur != NULL )

  00013	8b 55 08	 mov	 edx, DWORD PTR _pCur$[ebp]
  00016	85 d2		 test	 edx, edx
  00018	0f 84 9b 00 00
	00		 je	 $LN2@DeleteNode

; 360  : 	{
; 361  : 		pNode = pCur;
; 362  : 		pPre = pCur->lpNodePre;

  0001e	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 363  : 		pNext= pCur->lpNodeNext;

  00020	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00023	89 4d fc	 mov	 DWORD PTR _pPre$1$[ebp], ecx
  00026	89 45 f8	 mov	 DWORD PTR _pNext$1$[ebp], eax

; 364  : 
; 365  : 		if ( pPre == 0 && pNext == 0 )

  00029	85 c9		 test	 ecx, ecx
  0002b	75 14		 jne	 SHORT $LN16@DeleteNode
  0002d	85 c0		 test	 eax, eax
  0002f	75 05		 jne	 SHORT $LN18@DeleteNode

; 366  : 		{
; 367  : 			this->m_pHead = pCur;

  00031	89 53 08	 mov	 DWORD PTR [ebx+8], edx
  00034	eb 43		 jmp	 SHORT $LN13@DeleteNode
$LN18@DeleteNode:

; 368  : 		}
; 369  : 		else if ( pPre == 0 && pNext != 0 )
; 370  : 		{
; 371  : 			pNext->lpNodePre = 0;

  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 372  : 			pCur = pNext;
; 373  : 			this->m_pHead=pCur;

  0003c	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 374  : 
; 375  : 			if ( pNext->lpNodeNext == 0 )
; 376  : 			{
; 377  : 				this->m_pTail=pNext;
; 378  : 				this->m_pTail->lpNodeNext =0;
; 379  : 			}
; 380  : 		}

  0003f	eb 28		 jmp	 SHORT $LN12@DeleteNode
$LN16@DeleteNode:

; 381  : 		else if ( pPre != 0 && pNext == 0 )

  00041	85 c0		 test	 eax, eax
  00043	75 11		 jne	 SHORT $LN8@DeleteNode

; 382  : 		{
; 383  : 			pPre->lpNodeNext = 0;

  00045	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 384  : 			pCur = pPre;
; 385  : 			this->m_pTail = pCur;

  00048	89 4b 0c	 mov	 DWORD PTR [ebx+12], ecx

; 386  : 
; 387  : 			if ( pPre->lpNodePre == 0 )

  0004b	39 01		 cmp	 DWORD PTR [ecx], eax
  0004d	75 2a		 jne	 SHORT $LN13@DeleteNode

; 388  : 			{
; 389  : 				this->m_pHead = pPre;

  0004f	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 390  : 				this->m_pHead->lpNodePre = 0;

  00052	89 01		 mov	 DWORD PTR [ecx], eax

; 391  : 			}
; 392  : 		}

  00054	eb 23		 jmp	 SHORT $LN13@DeleteNode
$LN8@DeleteNode:

; 393  : 		else if ( pPre != 0 && pNext != 0 )
; 394  : 		{
; 395  : 			pPre->lpNodeNext = pNext;

  00056	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 396  : 			pNext->lpNodePre = pPre;

  00059	89 08		 mov	 DWORD PTR [eax], ecx

; 397  : 
; 398  : 			if ( pPre->lpNodePre == 0 )

  0005b	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0005e	75 09		 jne	 SHORT $LN12@DeleteNode

; 399  : 			{
; 400  : 				this->m_pHead = pPre;

  00060	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 401  : 				this->m_pHead->lpNodePre = NULL;

  00063	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN12@DeleteNode:

; 402  : 			}
; 403  : 
; 404  : 			if ( pNext->lpNodeNext == NULL )

  00069	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0006d	75 0a		 jne	 SHORT $LN13@DeleteNode

; 405  : 			{
; 406  : 				this->m_pTail = pNext;

  0006f	89 43 0c	 mov	 DWORD PTR [ebx+12], eax

; 407  : 				this->m_pTail->lpNodeNext = NULL;

  00072	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN13@DeleteNode:

; 408  : 			}
; 409  : 		}
; 410  : 
; 411  : 		HeapFree( GetProcessHeap(), 0, pNode->pHeapMemory  );

  00079	56		 push	 esi
  0007a	57		 push	 edi
  0007b	ff 72 08	 push	 DWORD PTR [edx+8]
  0007e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetProcessHeap@0
  00084	6a 00		 push	 0
  00086	ff d7		 call	 edi
  00088	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__HeapFree@12
  0008e	50		 push	 eax
  0008f	ff d6		 call	 esi

; 412  : 		HeapFree( GetProcessHeap(), 0, pNode);

  00091	ff 75 08	 push	 DWORD PTR _pCur$[ebp]
  00094	6a 00		 push	 0
  00096	ff d7		 call	 edi
  00098	50		 push	 eax
  00099	ff d6		 call	 esi

; 413  : 
; 414  : 		if ( pPre == NULL && pNext == NULL )

  0009b	83 7d fc 00	 cmp	 DWORD PTR _pPre$1$[ebp], 0
  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	75 14		 jne	 SHORT $LN14@DeleteNode
  000a3	83 7d f8 00	 cmp	 DWORD PTR _pNext$1$[ebp], 0
  000a7	75 0e		 jne	 SHORT $LN14@DeleteNode

; 415  : 		{
; 416  : 			this->m_pHead = NULL;

  000a9	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0

; 417  : 			pCur = NULL;
; 418  : 			this->m_pTail = NULL;

  000b0	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
$LN14@DeleteNode:

; 419  : 		}
; 420  : 		
; 421  : 		this->m_Count --;

  000b7	ff 0b		 dec	 DWORD PTR [ebx]
$LN2@DeleteNode:

; 422  : 		
; 423  : 	}
; 424  : 
; 425  : 	LeaveCriticalSection(&this->m_CriticalSection);

  000b9	8d 43 14	 lea	 eax, DWORD PTR [ebx+20]
  000bc	50		 push	 eax
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  000c3	5b		 pop	 ebx

; 426  : }

  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 04 00	 ret	 4
?DeleteNode@WZQueue@@QAEXPAU_ListNode@@@Z ENDP		; WZQueue::DeleteNode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ?Pop@WZQueue@@QAEHPAU_ListNode@@PAEHPAH2@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
_bRet$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
tv180 = 8						; size = 4
_pCur$ = 8						; size = 4
_pObject$ = 12						; size = 4
_nOfs$ = 16						; size = 4
_nSize$ = 20						; size = 4
_sendbytes$ = 24					; size = 4
?Pop@WZQueue@@QAEHPAU_ListNode@@PAEHPAH2@Z PROC		; WZQueue::Pop, COMDAT
; _this$ = ecx

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?Pop@WZQueue@@QAEHPAU_ListNode@@PAEHPAH2@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 10	 sub	 esp, 16			; 00000010H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	8b d9		 mov	 ebx, ecx
  00032	89 5d e0	 mov	 DWORD PTR _this$[ebp], ebx

; 313  : 	BOOL bRet=FALSE;

  00035	33 ff		 xor	 edi, edi
  00037	89 7d e4	 mov	 DWORD PTR _bRet$[ebp], edi

; 314  : 
; 315  : 	if ( pCur != 0 )

  0003a	8b 75 08	 mov	 esi, DWORD PTR _pCur$[ebp]
  0003d	85 f6		 test	 esi, esi
  0003f	74 5f		 je	 SHORT $LN10@Pop

; 316  : 	{
; 317  : 		__try

  00041	89 7d fc	 mov	 DWORD PTR __$SEHRec$[ebp+20], edi

; 318  : 		{
; 319  : 			EnterCriticalSection(&this->m_CriticalSection);

  00044	8d 43 14	 lea	 eax, DWORD PTR [ebx+20]
  00047	50		 push	 eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 320  : 			pCur->iBytesSended  = pCur->iBytesSended  + nOfs;

  0004e	8b 4d 10	 mov	 ecx, DWORD PTR _nOfs$[ebp]
  00051	01 4e 14	 add	 DWORD PTR [esi+20], ecx
  00054	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00057	89 45 08	 mov	 DWORD PTR tv180[ebp], eax

; 321  : 
; 322  : 			if ( (pCur->nSize-nOfs) != 0 )

  0005a	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0005d	8b c2		 mov	 eax, edx
  0005f	2b c1		 sub	 eax, ecx
  00061	74 31		 je	 SHORT $LN4@Pop

; 323  : 			{
; 324  : 				memcpy(pObject, &pCur->pHeapMemory[pCur->iBytesSended ], pCur->nSize - pCur->iBytesSended );

  00063	2b 55 08	 sub	 edx, DWORD PTR tv180[ebp]
  00066	52		 push	 edx
  00067	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006a	03 45 08	 add	 eax, DWORD PTR tv180[ebp]
  0006d	50		 push	 eax
  0006e	ff 75 0c	 push	 DWORD PTR _pObject$[ebp]
  00071	e8 00 00 00 00	 call	 _memcpy
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 325  : 				*nSize = pCur->nSize - pCur->iBytesSended ;

  00079	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0007c	2b 4e 14	 sub	 ecx, DWORD PTR [esi+20]
  0007f	8b 45 14	 mov	 eax, DWORD PTR _nSize$[ebp]
  00082	89 08		 mov	 DWORD PTR [eax], ecx

; 326  : 				*sendbytes = pCur->iBytesSended ;

  00084	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00087	8b 45 18	 mov	 eax, DWORD PTR _sendbytes$[ebp]
  0008a	89 08		 mov	 DWORD PTR [eax], ecx

; 327  : 				bRet=TRUE;

  0008c	bf 01 00 00 00	 mov	 edi, 1
  00091	89 7d e4	 mov	 DWORD PTR _bRet$[ebp], edi
$LN4@Pop:

; 328  : 			}
; 329  : 		}

  00094	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0009b	e8 1c 00 00 00	 call	 $LN9@Pop
$LN10@Pop:

; 334  : 		}
; 335  : 	}
; 336  : 
; 337  : 	return bRet;

  000a0	8b c7		 mov	 eax, edi

; 338  : }

  000a2	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 14 00	 ret	 20			; 00000014H
$LN7@Pop:
$LN12@Pop:

; 328  : 			}
; 329  : 		}

  000b6	8b 5d e0	 mov	 ebx, DWORD PTR _this$[ebp]
  000b9	8b 7d e4	 mov	 edi, DWORD PTR _bRet$[ebp]
$LN9@Pop:

; 330  : 
; 331  : 		__finally
; 332  : 		{
; 333  : 			LeaveCriticalSection(&this->m_CriticalSection);

  000bc	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  000bf	51		 push	 ecx
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN8@Pop:
$LN11@Pop:
  000c6	c3		 ret	 0
?Pop@WZQueue@@QAEHPAU_ListNode@@PAEHPAH2@Z ENDP		; WZQueue::Pop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ?GetCurData@WZQueue@@QAEPAU_ListNode@@PAEPAI0PAH@Z
_TEXT	SEGMENT
_pObject$ = 8						; size = 4
_pSize$ = 12						; size = 4
_headcode$ = 16						; size = 4
_uindex$ = 20						; size = 4
?GetCurData@WZQueue@@QAEPAU_ListNode@@PAEPAI0PAH@Z PROC	; WZQueue::GetCurData, COMDAT
; _this$ = ecx

; 291  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 292  : 	if ( this->m_pCur != 0 )

  00006	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00009	85 c0		 test	 eax, eax
  0000b	74 40		 je	 SHORT $LN2@GetCurData

; 293  : 	{
; 294  : 		if ( this->m_pCur->bIsDataSending == 1 )

  0000d	83 78 10 01	 cmp	 DWORD PTR [eax+16], 1
  00011	74 3a		 je	 SHORT $LN2@GetCurData

; 295  : 		{
; 296  : 			return NULL;
; 297  : 		}
; 298  : 
; 299  : 		memcpy(pObject, this->m_pCur->pHeapMemory , this->m_pCur->nSize); 

  00013	ff 70 0c	 push	 DWORD PTR [eax+12]
  00016	ff 70 08	 push	 DWORD PTR [eax+8]
  00019	ff 75 08	 push	 DWORD PTR _pObject$[ebp]
  0001c	e8 00 00 00 00	 call	 _memcpy

; 300  : 
; 301  : 		*pSize = this->m_pCur->nSize;

  00021	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0002a	8b 45 0c	 mov	 eax, DWORD PTR _pSize$[ebp]
  0002d	89 08		 mov	 DWORD PTR [eax], ecx

; 302  : 		*headcode = this->m_pCur->Headcode;

  0002f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00032	8a 48 18	 mov	 cl, BYTE PTR [eax+24]
  00035	8b 45 10	 mov	 eax, DWORD PTR _headcode$[ebp]
  00038	88 08		 mov	 BYTE PTR [eax], cl

; 303  : 		*uindex = this->m_pCur->uIndex;

  0003a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0003d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00040	8b 45 14	 mov	 eax, DWORD PTR _uindex$[ebp]
  00043	89 08		 mov	 DWORD PTR [eax], ecx

; 304  : 
; 305  : 		return this->m_pCur;

  00045	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00048	5e		 pop	 esi

; 309  : }

  00049	5d		 pop	 ebp
  0004a	c2 10 00	 ret	 16			; 00000010H
$LN2@GetCurData:

; 306  : 	}
; 307  : 
; 308  : 	return NULL;

  0004d	33 c0		 xor	 eax, eax
  0004f	5e		 pop	 esi

; 309  : }

  00050	5d		 pop	 ebp
  00051	c2 10 00	 ret	 16			; 00000010H
?GetCurData@WZQueue@@QAEPAU_ListNode@@PAEPAI0PAH@Z ENDP	; WZQueue::GetCurData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ?NextQ@WZQueue@@QAEHXZ
_TEXT	SEGMENT
?NextQ@WZQueue@@QAEHXZ PROC				; WZQueue::NextQ, COMDAT
; _this$ = ecx

; 276  : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 277  : 	if ( this->m_pCur  != 0 )

  00003	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00006	85 c0		 test	 eax, eax
  00008	74 29		 je	 SHORT $LN3@NextQ

; 278  : 	{
; 279  : 		if ( this->m_pCur->lpNodeNext  != 0 )

  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	74 23		 je	 SHORT $LN3@NextQ

; 280  : 		{
; 281  : 			EnterCriticalSection(&this->m_CriticalSection); 

  00010	56		 push	 esi
  00011	8d 77 14	 lea	 esi, DWORD PTR [edi+20]
  00014	56		 push	 esi
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 282  : 			this->m_pCur = this->m_pCur->lpNodeNext ;

  0001b	8b 47 10	 mov	 eax, DWORD PTR [edi+16]

; 283  : 			LeaveCriticalSection(&this->m_CriticalSection);

  0001e	56		 push	 esi
  0001f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00022	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0002b	5e		 pop	 esi

; 284  : 			return TRUE;

  0002c	b8 01 00 00 00	 mov	 eax, 1
  00031	5f		 pop	 edi

; 288  : }

  00032	c3		 ret	 0
$LN3@NextQ:

; 285  : 		}
; 286  : 	}
; 287  : 	return FALSE;

  00033	33 c0		 xor	 eax, eax
  00035	5f		 pop	 edi

; 288  : }

  00036	c3		 ret	 0
?NextQ@WZQueue@@QAEHXZ ENDP				; WZQueue::NextQ
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ?StartQ@WZQueue@@QAEHXZ
_TEXT	SEGMENT
?StartQ@WZQueue@@QAEHXZ PROC				; WZQueue::StartQ, COMDAT
; _this$ = ecx

; 264  : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 265  : 	if ( this->m_pHead != 0 )

  00003	83 7f 08 00	 cmp	 DWORD PTR [edi+8], 0
  00007	74 20		 je	 SHORT $LN2@StartQ

; 266  : 	{
; 267  : 		EnterCriticalSection(&this->m_CriticalSection); 

  00009	56		 push	 esi
  0000a	8d 77 14	 lea	 esi, DWORD PTR [edi+20]
  0000d	56		 push	 esi
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 268  : 		this->m_pCur = this->m_pHead;

  00014	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 269  : 		LeaveCriticalSection(&this->m_CriticalSection);

  00017	56		 push	 esi
  00018	89 47 10	 mov	 DWORD PTR [edi+16], eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00021	5e		 pop	 esi

; 270  : 		return TRUE;

  00022	b8 01 00 00 00	 mov	 eax, 1
  00027	5f		 pop	 edi

; 273  : }

  00028	c3		 ret	 0
$LN2@StartQ:

; 271  : 	}
; 272  : 	return FALSE;

  00029	33 c0		 xor	 eax, eax
  0002b	5f		 pop	 edi

; 273  : }

  0002c	c3		 ret	 0
?StartQ@WZQueue@@QAEHXZ ENDP				; WZQueue::StartQ
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ?Free@WZQueue@@QAEXXZ
_TEXT	SEGMENT
?Free@WZQueue@@QAEXXZ PROC				; WZQueue::Free, COMDAT
; _this$ = ecx

; 37   : 	return;	// Empty
; 38   : }

  00000	c3		 ret	 0
?Free@WZQueue@@QAEXXZ ENDP				; WZQueue::Free
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ?Init@WZQueue@@QAEXXZ
_TEXT	SEGMENT
?Init@WZQueue@@QAEXXZ PROC				; WZQueue::Init, COMDAT
; _this$ = ecx

; 32   : 	return;	// Empty
; 33   : }

  00000	c3		 ret	 0
?Init@WZQueue@@QAEXXZ ENDP				; WZQueue::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ?GetFromQueue@WZQueue@@QAEHPAEPAI0PAH@Z
_TEXT	SEGMENT
_pNode$1$ = -4						; size = 4
_pObject$ = 8						; size = 4
_pSize$ = 12						; size = 4
_headcode$ = 16						; size = 4
_uindex$ = 20						; size = 4
?GetFromQueue@WZQueue@@QAEHPAEPAI0PAH@Z PROC		; WZQueue::GetFromQueue, COMDAT
; _this$ = ecx

; 223  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx

; 224  : 	LPLISTNODE pNode=0;
; 225  : 
; 226  : 	pNode = this->GetHeadNode();

  00008	e8 00 00 00 00	 call	 ?GetHeadNode@WZQueue@@AAEPAU_ListNode@@XZ ; WZQueue::GetHeadNode
  0000d	8b f0		 mov	 esi, eax
  0000f	89 75 fc	 mov	 DWORD PTR _pNode$1$[ebp], esi

; 227  : 
; 228  : 	if ( pNode != 0 )

  00012	85 f6		 test	 esi, esi
  00014	74 69		 je	 SHORT $LN2@GetFromQue

; 229  : 	{
; 230  : 		EnterCriticalSection(&this->m_CriticalSection);

  00016	83 c3 14	 add	 ebx, 20			; 00000014H
  00019	53		 push	 ebx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 231  : 
; 232  : 		memcpy(pObject, pNode->pHeapMemory , pNode->nSize);

  00020	ff 76 0c	 push	 DWORD PTR [esi+12]
  00023	ff 76 08	 push	 DWORD PTR [esi+8]
  00026	ff 75 08	 push	 DWORD PTR _pObject$[ebp]
  00029	e8 00 00 00 00	 call	 _memcpy

; 233  : 
; 234  : 		*pSize = pNode->nSize;

  0002e	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	8b 45 0c	 mov	 eax, DWORD PTR _pSize$[ebp]
  00037	89 08		 mov	 DWORD PTR [eax], ecx

; 235  : 		*headcode = pNode->Headcode;

  00039	8b 45 10	 mov	 eax, DWORD PTR _headcode$[ebp]
  0003c	8a 4e 18	 mov	 cl, BYTE PTR [esi+24]
  0003f	88 08		 mov	 BYTE PTR [eax], cl

; 236  : 		*uindex = pNode->uIndex;

  00041	8b 45 14	 mov	 eax, DWORD PTR _uindex$[ebp]
  00044	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00047	89 08		 mov	 DWORD PTR [eax], ecx

; 237  : 
; 238  : 		HeapFree(GetProcessHeap(), 0, pNode->pHeapMemory);

  00049	ff 76 08	 push	 DWORD PTR [esi+8]
  0004c	6a 00		 push	 0
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  00054	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__HeapFree@12
  0005a	50		 push	 eax
  0005b	ff d6		 call	 esi

; 239  : 		HeapFree(GetProcessHeap(), 0, pNode);

  0005d	ff 75 fc	 push	 DWORD PTR _pNode$1$[ebp]
  00060	6a 00		 push	 0
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcessHeap@0
  00068	50		 push	 eax
  00069	ff d6		 call	 esi

; 240  : 
; 241  : 		LeaveCriticalSection(&this->m_CriticalSection);

  0006b	53		 push	 ebx
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00072	5e		 pop	 esi

; 242  : 		return TRUE;

  00073	b8 01 00 00 00	 mov	 eax, 1
  00078	5b		 pop	 ebx

; 245  : }

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 10 00	 ret	 16			; 00000010H
$LN2@GetFromQue:
  0007f	5e		 pop	 esi

; 243  : 	}
; 244  : 	return FALSE;

  00080	33 c0		 xor	 eax, eax
  00082	5b		 pop	 ebx

; 245  : }

  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 10 00	 ret	 16			; 00000010H
?GetFromQueue@WZQueue@@QAEHPAEPAI0PAH@Z ENDP		; WZQueue::GetFromQueue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ?AddToQueueList@WZQueue@@QAEPAU_ListNode@@PAEIEH@Z
_TEXT	SEGMENT
tv174 = -8						; size = 4
_this$1$ = -4						; size = 4
_pObject$ = 8						; size = 4
_p$1$ = 12						; size = 4
_nSize$ = 12						; size = 4
_headcode$ = 16						; size = 1
_uindex$ = 20						; size = 4
?AddToQueueList@WZQueue@@QAEPAU_ListNode@@PAEIEH@Z PROC	; WZQueue::AddToQueueList, COMDAT
; _this$ = ecx

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 173  : 	BOOL bRet=0;
; 174  : 	LPLISTNODE pNewNode;
; 175  : 
; 176  : 	if (nSize < 1 || nSize > 65536 )

  00007	8b 75 0c	 mov	 esi, DWORD PTR _nSize$[ebp]
  0000a	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00010	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00015	0f 87 d8 00 00
	00		 ja	 $LN3@AddToQueue

; 179  : 	}
; 180  : 
; 181  : 	EnterCriticalSection(&this->m_CriticalSection );

  0001b	53		 push	 ebx
  0001c	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	89 45 f8	 mov	 DWORD PTR tv174[ebp], eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 182  : 
; 183  : 	pNewNode=(LPLISTNODE)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(LISTNODE));

  0002a	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetProcessHeap@0
  00030	6a 20		 push	 32			; 00000020H
  00032	6a 08		 push	 8
  00034	ff d3		 call	 ebx
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapAlloc@12
  0003d	8b f8		 mov	 edi, eax

; 184  : 
; 185  : 	if (pNewNode != 0)

  0003f	85 ff		 test	 edi, edi
  00041	0f 84 8b 00 00
	00		 je	 $LN4@AddToQueue

; 186  : 	{
; 187  : 		char* p;
; 188  : 		p=(char*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, nSize);

  00047	56		 push	 esi
  00048	6a 08		 push	 8
  0004a	ff d3		 call	 ebx
  0004c	50		 push	 eax
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapAlloc@12
  00053	89 45 0c	 mov	 DWORD PTR _p$1$[ebp], eax

; 189  : 
; 190  : 		if (p != 0)

  00056	85 c0		 test	 eax, eax
  00058	74 4d		 je	 SHORT $LN6@AddToQueue

; 191  : 		{
; 192  : 			memcpy(p, pObject, nSize);

  0005a	56		 push	 esi
  0005b	ff 75 08	 push	 DWORD PTR _pObject$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _memcpy

; 193  : 
; 194  : 			pNewNode->pHeapMemory = p;

  00064	8b 45 0c	 mov	 eax, DWORD PTR _p$1$[ebp]
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH

; 195  : 			pNewNode->nSize = nSize;
; 196  : 			pNewNode->Headcode = headcode;
; 197  : 			pNewNode->uIndex = uindex;
; 198  : 			pNewNode->bIsDataSending = 0;
; 199  : 			pNewNode->iBytesSended  = 0;
; 200  : 
; 201  : 			if (this->AddTail(pNewNode) != 0)

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0006d	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00070	8a 45 10	 mov	 al, BYTE PTR _headcode$[ebp]
  00073	88 47 18	 mov	 BYTE PTR [edi+24], al
  00076	8b 45 14	 mov	 eax, DWORD PTR _uindex$[ebp]
  00079	57		 push	 edi
  0007a	89 77 0c	 mov	 DWORD PTR [edi+12], esi
  0007d	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  00080	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00087	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  0008e	e8 00 00 00 00	 call	 ?AddTail@WZQueue@@AAEHPAU_ListNode@@@Z ; WZQueue::AddTail

; 215  : 	}
; 216  : 
; 217  : 	LeaveCriticalSection(&this->m_CriticalSection);

  00093	ff 75 f8	 push	 DWORD PTR tv174[ebp]
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 218  : 	return pNewNode;

  0009c	8b c7		 mov	 eax, edi
  0009e	5f		 pop	 edi
  0009f	5b		 pop	 ebx
  000a0	5e		 pop	 esi

; 219  : }

  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c2 10 00	 ret	 16			; 00000010H
$LN6@AddToQueue:

; 202  : 			{
; 203  : 				bRet=1;
; 204  : 			}
; 205  : 		}
; 206  : 		else
; 207  : 		{
; 208  : 			HeapFree(GetProcessHeap(), 0, p);

  000a7	6a 00		 push	 0
  000a9	6a 00		 push	 0
  000ab	ff d3		 call	 ebx
  000ad	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__HeapFree@12
  000b3	50		 push	 eax
  000b4	ff d6		 call	 esi

; 209  : 			HeapFree(GetProcessHeap(), 0, pNewNode);

  000b6	57		 push	 edi
  000b7	6a 00		 push	 0
  000b9	ff d3		 call	 ebx
  000bb	50		 push	 eax
  000bc	ff d6		 call	 esi

; 215  : 	}
; 216  : 
; 217  : 	LeaveCriticalSection(&this->m_CriticalSection);

  000be	ff 75 f8	 push	 DWORD PTR tv174[ebp]
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 218  : 	return pNewNode;

  000c7	8b c7		 mov	 eax, edi
  000c9	5f		 pop	 edi
  000ca	5b		 pop	 ebx
  000cb	5e		 pop	 esi

; 219  : }

  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c2 10 00	 ret	 16			; 00000010H
$LN4@AddToQueue:

; 210  : 		}
; 211  : 	}
; 212  : 	else
; 213  : 	{
; 214  : 		HeapFree(GetProcessHeap(), 0, pNewNode);

  000d2	6a 00		 push	 0
  000d4	6a 00		 push	 0
  000d6	ff d3		 call	 ebx
  000d8	50		 push	 eax
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12

; 215  : 	}
; 216  : 
; 217  : 	LeaveCriticalSection(&this->m_CriticalSection);

  000df	ff 75 f8	 push	 DWORD PTR tv174[ebp]
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 218  : 	return pNewNode;

  000e8	8b c7		 mov	 eax, edi
  000ea	5f		 pop	 edi
  000eb	5b		 pop	 ebx
  000ec	5e		 pop	 esi

; 219  : }

  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 10 00	 ret	 16			; 00000010H
$LN3@AddToQueue:

; 177  : 	{
; 178  : 		return FALSE;

  000f3	33 c0		 xor	 eax, eax
  000f5	5e		 pop	 esi

; 219  : }

  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c2 10 00	 ret	 16			; 00000010H
?AddToQueueList@WZQueue@@QAEPAU_ListNode@@PAEIEH@Z ENDP	; WZQueue::AddToQueueList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ?AddToQueue@WZQueue@@QAEHQAEIEH@Z
_TEXT	SEGMENT
_bRet$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
_pObject$ = 8						; size = 4
_p$1$ = 12						; size = 4
_nSize$ = 12						; size = 4
_headcode$ = 16						; size = 1
_uindex$ = 20						; size = 4
?AddToQueue@WZQueue@@QAEHQAEIEH@Z PROC			; WZQueue::AddToQueue, COMDAT
; _this$ = ecx

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b c1		 mov	 eax, ecx

; 122  : 	BOOL bRet=0;

  00008	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bRet$1$[ebp], 0
  0000f	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax

; 123  : 	LPLISTNODE pNewNode;
; 124  : 
; 125  : 	EnterCriticalSection(&this->m_CriticalSection );

  00012	83 c0 14	 add	 eax, 20			; 00000014H
  00015	56		 push	 esi
  00016	50		 push	 eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 126  : 
; 127  : 	if (nSize < 1 || nSize > 65536 )

  0001d	8b 75 0c	 mov	 esi, DWORD PTR _nSize$[ebp]
  00020	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00023	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00028	0f 87 cd 00 00
	00		 ja	 $LN3@AddToQueue

; 130  : 	}
; 131  : 
; 132  : 	pNewNode=(LPLISTNODE)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(LISTNODE));

  0002e	53		 push	 ebx
  0002f	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetProcessHeap@0
  00035	57		 push	 edi
  00036	6a 20		 push	 32			; 00000020H
  00038	6a 08		 push	 8
  0003a	ff d3		 call	 ebx
  0003c	50		 push	 eax
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapAlloc@12
  00043	8b f8		 mov	 edi, eax

; 133  : 
; 134  : 	if (pNewNode != 0)

  00045	85 ff		 test	 edi, edi
  00047	0f 84 88 00 00
	00		 je	 $LN4@AddToQueue

; 135  : 	{
; 136  : 		char* p;
; 137  : 		p=(char*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, nSize);

  0004d	56		 push	 esi
  0004e	6a 08		 push	 8
  00050	ff d3		 call	 ebx
  00052	50		 push	 eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapAlloc@12
  00059	89 45 0c	 mov	 DWORD PTR _p$1$[ebp], eax

; 138  : 
; 139  : 		if (p != 0)

  0005c	85 c0		 test	 eax, eax
  0005e	74 5c		 je	 SHORT $LN6@AddToQueue

; 140  : 		{
; 141  : 			memcpy(p, pObject, nSize);

  00060	56		 push	 esi
  00061	ff 75 08	 push	 DWORD PTR _pObject$[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _memcpy

; 142  : 
; 143  : 			pNewNode->pHeapMemory = p;

  0006a	8b 45 0c	 mov	 eax, DWORD PTR _p$1$[ebp]
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00070	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 144  : 			pNewNode->nSize = nSize;
; 145  : 			pNewNode->Headcode = headcode;

  00073	8a 45 10	 mov	 al, BYTE PTR _headcode$[ebp]
  00076	89 77 0c	 mov	 DWORD PTR [edi+12], esi

; 146  : 			pNewNode->uIndex = uindex;
; 147  : 			pNewNode->bIsDataSending = 0;
; 148  : 			pNewNode->iBytesSended  = 0;
; 149  : 
; 150  : 			if (this->AddTail(pNewNode) != 0)

  00079	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
  0007c	8b ce		 mov	 ecx, esi
  0007e	88 47 18	 mov	 BYTE PTR [edi+24], al
  00081	8b 45 14	 mov	 eax, DWORD PTR _uindex$[ebp]
  00084	57		 push	 edi
  00085	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  00088	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0008f	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00096	e8 00 00 00 00	 call	 ?AddTail@WZQueue@@AAEHPAU_ListNode@@@Z ; WZQueue::AddTail
  0009b	85 c0		 test	 eax, eax
  0009d	74 46		 je	 SHORT $LN5@AddToQueue

; 164  : 	}
; 165  : 
; 166  : 	LeaveCriticalSection(&this->m_CriticalSection);

  0009f	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  000a2	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bRet$1$[ebp], 1
  000a9	50		 push	 eax
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 167  : 	return bRet;

  000b0	8b 45 f8	 mov	 eax, DWORD PTR _bRet$1$[ebp]
  000b3	5f		 pop	 edi
  000b4	5b		 pop	 ebx
  000b5	5e		 pop	 esi

; 168  : }

  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c2 10 00	 ret	 16			; 00000010H
$LN6@AddToQueue:

; 151  : 			{
; 152  : 				bRet=1;
; 153  : 			}
; 154  : 		}
; 155  : 		else
; 156  : 		{
; 157  : 			HeapFree(GetProcessHeap(), 0, p);

  000bc	6a 00		 push	 0
  000be	6a 00		 push	 0
  000c0	ff d3		 call	 ebx
  000c2	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__HeapFree@12
  000c8	50		 push	 eax
  000c9	ff d6		 call	 esi

; 158  : 			HeapFree(GetProcessHeap(), 0, pNewNode);

  000cb	57		 push	 edi
  000cc	6a 00		 push	 0
  000ce	ff d3		 call	 ebx
  000d0	50		 push	 eax
  000d1	ff d6		 call	 esi

; 159  : 		}
; 160  : 	}
; 161  : 	else

  000d3	eb 0d		 jmp	 SHORT $LN10@AddToQueue
$LN4@AddToQueue:

; 162  : 	{
; 163  : 		HeapFree(GetProcessHeap(), 0, pNewNode);

  000d5	6a 00		 push	 0
  000d7	6a 00		 push	 0
  000d9	ff d3		 call	 ebx
  000db	50		 push	 eax
  000dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HeapFree@12
$LN10@AddToQueue:
  000e2	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
$LN5@AddToQueue:

; 164  : 	}
; 165  : 
; 166  : 	LeaveCriticalSection(&this->m_CriticalSection);

  000e5	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  000e8	50		 push	 eax
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 167  : 	return bRet;

  000ef	8b 45 f8	 mov	 eax, DWORD PTR _bRet$1$[ebp]
  000f2	5f		 pop	 edi
  000f3	5b		 pop	 ebx
  000f4	5e		 pop	 esi

; 168  : }

  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 10 00	 ret	 16			; 00000010H
$LN3@AddToQueue:

; 128  : 	{
; 129  : 		return FALSE;

  000fb	33 c0		 xor	 eax, eax
  000fd	5e		 pop	 esi

; 168  : }

  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c2 10 00	 ret	 16			; 00000010H
?AddToQueue@WZQueue@@QAEHQAEIEH@Z ENDP			; WZQueue::AddToQueue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ?GetCount@WZQueue@@QAEIXZ
_TEXT	SEGMENT
?GetCount@WZQueue@@QAEIXZ PROC				; WZQueue::GetCount, COMDAT
; _this$ = ecx

; 47   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 48   : 	int nNum;
; 49   : 	EnterCriticalSection(&this->m_CriticalSection);

  00004	8d 7e 14	 lea	 edi, DWORD PTR [esi+20]
  00007	57		 push	 edi
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 50   : 	nNum=this->m_Count;

  0000e	8b 36		 mov	 esi, DWORD PTR [esi]

; 51   : 	LeaveCriticalSection(&this->m_CriticalSection);

  00010	57		 push	 edi
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00017	5f		 pop	 edi

; 52   : 	return nNum;

  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi

; 53   : }

  0001b	c3		 ret	 0
?GetCount@WZQueue@@QAEIXZ ENDP				; WZQueue::GetCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ??1WZQueue@@QAE@XZ
_TEXT	SEGMENT
??1WZQueue@@QAE@XZ PROC					; WZQueue::~WZQueue, COMDAT
; _this$ = ecx

; 41   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 42   : 	this->DeleteAllNodes();

  00003	e8 00 00 00 00	 call	 ?DeleteAllNodes@WZQueue@@AAEXXZ ; WZQueue::DeleteAllNodes

; 43   : 	DeleteCriticalSection(&this->m_CriticalSection );

  00008	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  0000b	50		 push	 eax
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  00012	5e		 pop	 esi

; 44   : }

  00013	c3		 ret	 0
??1WZQueue@@QAE@XZ ENDP					; WZQueue::~WZQueue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ??0WZQueue@@QAE@I@Z
_TEXT	SEGMENT
_nMaxNode$ = 8						; size = 4
??0WZQueue@@QAE@I@Z PROC				; WZQueue::WZQueue, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 15   : 	this->m_Max_Node = nMaxNode;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nMaxNode$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi

; 16   : 	this->m_pTail = 0;
; 17   : 	this->m_pHead = 0;
; 18   : 	this->m_Count = 0;
; 19   : 	BOOL bSuccess;
; 20   : 	bSuccess=InitializeCriticalSectionAndSpinCount(&this->m_CriticalSection , 4000);

  0000a	68 a0 0f 00 00	 push	 4000			; 00000fa0H
  0000f	8d 7e 14	 lea	 edi, DWORD PTR [esi+20]
  00012	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00015	57		 push	 edi
  00016	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0001d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00024	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSectionAndSpinCount@8

; 21   : 	if (bSuccess == 0 )

  00030	85 c0		 test	 eax, eax
  00032	75 14		 jne	 SHORT $LN6@WZQueue

; 22   : 	{
; 23   : 		if ( GetLastError() == STATUS_NO_MEMORY )	

  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0003a	3d 17 00 00 c0	 cmp	 eax, -1073741801	; c0000017H
  0003f	75 07		 jne	 SHORT $LN6@WZQueue

; 24   : 		{
; 25   : 			InitializeCriticalSection(&this->m_CriticalSection );

  00041	57		 push	 edi
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4
$LN6@WZQueue:

; 26   : 		}
; 27   : 	}
; 28   : }

  00048	5f		 pop	 edi
  00049	8b c6		 mov	 eax, esi
  0004b	5e		 pop	 esi
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
??0WZQueue@@QAE@I@Z ENDP				; WZQueue::WZQueue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 427  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wzqueue.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 427  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
