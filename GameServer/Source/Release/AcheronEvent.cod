; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\AcheronEvent.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_sprintf
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0_tagAE_OBELISK_INFO@@QAE@XZ			; _tagAE_OBELISK_INFO::_tagAE_OBELISK_INFO
PUBLIC	??0_stAEMonRegenArea@@QAE@XZ			; _stAEMonRegenArea::_stAEMonRegenArea
PUBLIC	??0_stAEMonIndexInf@@QAE@XZ			; _stAEMonIndexInf::_stAEMonIndexInf
PUBLIC	??0_stAEMonPosition@@QAE@XZ			; _stAEMonPosition::_stAEMonPosition
PUBLIC	??0_stAEMonAccountNumInfo@@QAE@XZ		; _stAEMonAccountNumInfo::_stAEMonAccountNumInfo
PUBLIC	??0_stAEMonGroupInfo@@QAE@XZ			; _stAEMonGroupInfo::_stAEMonGroupInfo
PUBLIC	??0_ITEM_DROP_CNT_RATE@@QAE@XZ			; _ITEM_DROP_CNT_RATE::_ITEM_DROP_CNT_RATE
PUBLIC	??0CAcheronGuardianEvent@@QAE@XZ		; CAcheronGuardianEvent::CAcheronGuardianEvent
PUBLIC	??1CAcheronGuardianEvent@@QAE@XZ		; CAcheronGuardianEvent::~CAcheronGuardianEvent
PUBLIC	?LoadScriptAcheronEvent@CAcheronGuardianEvent@@QAEHPAD@Z ; CAcheronGuardianEvent::LoadScriptAcheronEvent
PUBLIC	?SetAcheronEventProcMultiCast@CAcheronGuardianEvent@@QAEXH@Z ; CAcheronGuardianEvent::SetAcheronEventProcMultiCast
PUBLIC	?GetDropItemCnt@CAcheronGuardianEvent@@QAEHXZ	; CAcheronGuardianEvent::GetDropItemCnt
PUBLIC	?Clear@CAcheronGuardianEvent@@QAEXXZ		; CAcheronGuardianEvent::Clear
PUBLIC	?CheckSync@CAcheronGuardianEvent@@QAEHXZ	; CAcheronGuardianEvent::CheckSync
PUBLIC	?Run@CAcheronGuardianEvent@@QAEXXZ		; CAcheronGuardianEvent::Run
PUBLIC	?ProcStateEnd@CAcheronGuardianEvent@@QAEXXZ	; CAcheronGuardianEvent::ProcStateEnd
PUBLIC	?ProcStateClosed@CAcheronGuardianEvent@@QAEXXZ	; CAcheronGuardianEvent::ProcStateClosed
PUBLIC	?ProcStateReady@CAcheronGuardianEvent@@QAEXXZ	; CAcheronGuardianEvent::ProcStateReady
PUBLIC	?ProcStatePlaying@CAcheronGuardianEvent@@QAEXXZ	; CAcheronGuardianEvent::ProcStatePlaying
PUBLIC	?ProcStatePlayEnd@CAcheronGuardianEvent@@QAEXXZ	; CAcheronGuardianEvent::ProcStatePlayEnd
PUBLIC	?ProcStateChannelClose@CAcheronGuardianEvent@@QAEXXZ ; CAcheronGuardianEvent::ProcStateChannelClose
PUBLIC	?CGReqAcheronEventEnter@CAcheronGuardianEvent@@QAEXPAU_tagPMSG_REQ_ACHERON_EVENT_ENTER@@H@Z ; CAcheronGuardianEvent::CGReqAcheronEventEnter
PUBLIC	?GDReqAcheronEventProcMultiCast@CAcheronGuardianEvent@@QAEXE@Z ; CAcheronGuardianEvent::GDReqAcheronEventProcMultiCast
PUBLIC	?DGAnsAcheronEventProcMultiCast@CAcheronGuardianEvent@@QAEXPAU_tagPMSG_ANS_AE_PLAY_DS@@@Z ; CAcheronGuardianEvent::DGAnsAcheronEventProcMultiCast
PUBLIC	?SetRandomObeliskAttr@CAcheronGuardianEvent@@QAEXXZ ; CAcheronGuardianEvent::SetRandomObeliskAttr
PUBLIC	?GenObelisk@CAcheronGuardianEvent@@QAEXH@Z	; CAcheronGuardianEvent::GenObelisk
PUBLIC	?DelObelisk@CAcheronGuardianEvent@@QAEXXZ	; CAcheronGuardianEvent::DelObelisk
PUBLIC	?DestoryObelisk@CAcheronGuardianEvent@@QAEXPAUOBJECTSTRUCT@@EEEH@Z ; CAcheronGuardianEvent::DestoryObelisk
PUBLIC	?RegenMonsterRun@CAcheronGuardianEvent@@QAEXXZ	; CAcheronGuardianEvent::RegenMonsterRun
PUBLIC	?RegenMonster@CAcheronGuardianEvent@@QAEXHHH@Z	; CAcheronGuardianEvent::RegenMonster
PUBLIC	?SetPosMonster@CAcheronGuardianEvent@@QAEHHHHHHHE@Z ; CAcheronGuardianEvent::SetPosMonster
PUBLIC	?GetBoxPosition@CAcheronGuardianEvent@@QAEHHHHHHAAE0@Z ; CAcheronGuardianEvent::GetBoxPosition
PUBLIC	?ResetGenTime@CAcheronGuardianEvent@@QAEXXZ	; CAcheronGuardianEvent::ResetGenTime
PUBLIC	?DeleteMonster@CAcheronGuardianEvent@@QAEXH@Z	; CAcheronGuardianEvent::DeleteMonster
PUBLIC	?DeleteArcaBattleAllMonster@CAcheronGuardianEvent@@QAEXXZ ; CAcheronGuardianEvent::DeleteArcaBattleAllMonster
PUBLIC	?ProbabilityLoadData@CAcheronGuardianEvent@@QAEXXZ ; CAcheronGuardianEvent::ProbabilityLoadData
PUBLIC	?SendMapServerGroupMsg@CAcheronGuardianEvent@@QAEXPAD@Z ; CAcheronGuardianEvent::SendMapServerGroupMsg
PUBLIC	?deallocate@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@I@Z ; std::allocator<_tagAcheronEventTime>::deallocate
PUBLIC	?allocate@?$allocator@U_tagAcheronEventTime@@@std@@QAEPAU_tagAcheronEventTime@@I@Z ; std::allocator<_tagAcheronEventTime>::allocate
PUBLIC	?push_back@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXABU_tagAcheronEventTime@@@Z ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::push_back
PUBLIC	?_Reallocate@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Reallocate
PUBLIC	?_Reserve@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Reserve
PUBLIC	??$_Uninit_move@PAU_tagAcheronEventTime@@PAU1@V?$allocator@U_tagAcheronEventTime@@@std@@U1@@std@@YAPAU_tagAcheronEventTime@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_tagAcheronEventTime *,_tagAcheronEventTime *,std::allocator<_tagAcheronEventTime>,_tagAcheronEventTime>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?g_AcheronGuardianEvent@@3VCAcheronGuardianEvent@@A ; g_AcheronGuardianEvent
PUBLIC	??_C@_0DJ@DAPPLEIO@?$FLAcheronGuardianEvent?$FN?5file?5load@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0DG@MPEIMLJB@?$FLAcheronGuardianEvent?$FN?5file?5load@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0DJ@MPLGDGHP@?$FLArcaBattle?$FN?$FLMonsterGroupRegen?$FN?5@ ; `string'
PUBLIC	??_C@_0EG@NPJIIJLH@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@ ; `string'
PUBLIC	??_C@_0EC@FLBCMFCC@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@ ; `string'
PUBLIC	??_C@_0EH@COGMNBGC@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@ ; `string'
PUBLIC	??_C@_0DC@NCPKNLFE@?$FLAcheronEvent?$FN?5Error?5DayOfWeek?5?9@ ; `string'
PUBLIC	??_C@_0CC@CJDKFKFK@?$FLAcheronEvent?$FN?5Disabled?5for?5toda@ ; `string'
PUBLIC	??_C@_0EH@JFKCDOFM@?$FLAcheronEvent?$FN?5No?5Schedule?5Time?5@ ; `string'
PUBLIC	??_C@_0FC@GHNPHKMH@?$FLAcheronEvent?$FN?5No?5Schedule?5Time?5@ ; `string'
PUBLIC	??_C@_0DD@BMDDCFGO@?$FLAcheronGuardianEvent?$FN?5Error?5Obe@ ; `string'
PUBLIC	??_C@_0CL@JNGDLOMC@?$FLAcheronGuardianEvent?$FN?5Obelisk?5G@ ; `string'
PUBLIC	??_C@_0DB@MDAPBPAD@?$FLAcheronGuardianEvent?$FN?5Send?5Clos@ ; `string'
PUBLIC	??_C@_0DE@IDPEIBEF@?$FLAcheronGuardianEvent?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0CP@JJGPLGEC@?$FLAcheronGuardianEvent?$FN?5Acheron?5E@ ; `string'
PUBLIC	??_C@_0DA@MOMOIMJ@?$FLAcheronGuardianEvent?$FN?5?$CI?$CFd?$CJ?5Obel@ ; `string'
PUBLIC	??_C@_0DF@HLCAEGMB@?$FLAcheronGuardianEvent?$FN?$FLObelisk?$FN?5@ ; `string'
PUBLIC	??_C@_0EJ@NOMDIPAC@?$FLAcheronGuardianEvent?$FN?$FLError?$FN?5Ra@ ; `string'
PUBLIC	??_C@_0EJ@NHGLBLLG@?$FLAcheronGuardianEvent?$FN?5Destoryed@ ; `string'
PUBLIC	??_C@_0FD@NOBALOOH@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@ ; `string'
PUBLIC	??_C@_0BB@PPMLAOAN@AcheronEvent?4cpp?$AA@	; `string'
PUBLIC	??_C@_0CF@NDHANOPF@?$FLAcheronGuardianEvent?$FN?5error?5?3?5?$CF@ ; `string'
PUBLIC	??_C@_0GE@GMNMPJMN@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@ ; `string'
PUBLIC	??_C@_0EI@HBLOCBKG@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@ ; `string'
PUBLIC	??_C@_0DP@DHBBEGCA@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	__xmm@00000276000002750000027400000273
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_rand:PROC
EXTRN	_atof:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?gObjMoveGate@@YAHHH@Z:PROC			; gObjMoveGate
EXTRN	?GetLargeRand@@YAKXZ:PROC			; GetLargeRand
EXTRN	?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ:PROC	; TNotice::MakeNoticeMsgEx
EXTRN	?SetNoticeProperty@TNotice@@SAXPAXEKEGE@Z:PROC	; TNotice::SetNoticeProperty
EXTRN	?SendNoticeToAllUser@TNotice@@SAXPAX@Z:PROC	; TNotice::SendNoticeToAllUser
EXTRN	?IsArcaBattleServer@CArcaBattle@@QAEHXZ:PROC	; CArcaBattle::IsArcaBattleServer
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?GS_GDReqMapSvrMsgMultiCast@@YAXHPAD@Z:PROC	; GS_GDReqMapSvrMsgMultiCast
EXTRN	?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z:PROC ; EventItemBagManager::OpenSpecial
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__except_handler4:PROC
EXTRN	_memset:PROC
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	?g_ArcaBattle@@3VCArcaBattle@@A:BYTE		; g_ArcaBattle
EXTRN	?g_MapServerManager@@3VCMapServerManager@@A:BYTE ; g_MapServerManager
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	?g_EventItemBagManager@@3VEventItemBagManager@@A:BYTE ; g_EventItemBagManager
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?g_AcheronGuardianEvent@@3VCAcheronGuardianEvent@@A DB 019ecH DUP (?) ; g_AcheronGuardianEvent
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
_BSS	ENDS
CRT$XCU	SEGMENT
?g_AcheronGuardianEvent$initializer$@@3P6AXXZA DD FLAT:??__Eg_AcheronGuardianEvent@@YAXXZ ; g_AcheronGuardianEvent$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@00000276000002750000027400000273
CONST	SEGMENT
__xmm@00000276000002750000027400000273 DB 's', 02H, 00H, 00H, 't', 02H, 00H
	DB	00H, 'u', 02H, 00H, 00H, 'v', 02H, 00H, 00H
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@DHBBEGCA@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@
CONST	SEGMENT
??_C@_0DP@DHBBEGCA@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@ DB '[Achero'
	DB	'nGuardianEvent][MonsterGroupRegen] Delete Monster - %d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@HBLOCBKG@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@
CONST	SEGMENT
??_C@_0EI@HBLOCBKG@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@ DB '[Achero'
	DB	'nGuardianEvent][MonsterGroupRegen] Group: %d, MonsterTotCnt: '
	DB	'%d ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GE@GMNMPJMN@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@
CONST	SEGMENT
??_C@_0GE@GMNMPJMN@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@ DB '[Achero'
	DB	'nGuardianEvent][MonsterGroupRegen] Group: %d, MonsterIndex: %'
	DB	'd, MapNumber: %d, X: %d, Y: %d ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@NDHANOPF@?$FLAcheronGuardianEvent?$FN?5error?5?3?5?$CF@
CONST	SEGMENT
??_C@_0CF@NDHANOPF@?$FLAcheronGuardianEvent?$FN?5error?5?3?5?$CF@ DB '[Ac'
	DB	'heronGuardianEvent] error : %s %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PPMLAOAN@AcheronEvent?4cpp?$AA@
CONST	SEGMENT
??_C@_0BB@PPMLAOAN@AcheronEvent?4cpp?$AA@ DB 'AcheronEvent.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@NOBALOOH@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@
CONST	SEGMENT
??_C@_0FD@NOBALOOH@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@ DB '[Achero'
	DB	'nGuardianEvent][MonsterGroupRegen] AddMonster fail!! [GROUP]:'
	DB	'%d, [INDEX]:%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@NHGLBLLG@?$FLAcheronGuardianEvent?$FN?5Destoryed@
CONST	SEGMENT
??_C@_0EJ@NHGLBLLG@?$FLAcheronGuardianEvent?$FN?5Destoryed@ DB '[AcheronG'
	DB	'uardianEvent] Destoryed an Obelisk. [%s][%s] Item Drop Cnt [%'
	DB	'd]', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@NOMDIPAC@?$FLAcheronGuardianEvent?$FN?$FLError?$FN?5Ra@
CONST	SEGMENT
??_C@_0EJ@NOMDIPAC@?$FLAcheronGuardianEvent?$FN?$FLError?$FN?5Ra@ DB '[Ac'
	DB	'heronGuardianEvent][Error] Rand Drop Item Over - [%s][%s] Ite'
	DB	'mCnt[%d]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@HLCAEGMB@?$FLAcheronGuardianEvent?$FN?$FLObelisk?$FN?5@
CONST	SEGMENT
??_C@_0DF@HLCAEGMB@?$FLAcheronGuardianEvent?$FN?$FLObelisk?$FN?5@ DB '[Ac'
	DB	'heronGuardianEvent][Obelisk] Delete Monster - %d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@MOMOIMJ@?$FLAcheronGuardianEvent?$FN?5?$CI?$CFd?$CJ?5Obel@
CONST	SEGMENT
??_C@_0DA@MOMOIMJ@?$FLAcheronGuardianEvent?$FN?5?$CI?$CFd?$CJ?5Obel@ DB '['
	DB	'AcheronGuardianEvent] (%d) Obelisk be created.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@JJGPLGEC@?$FLAcheronGuardianEvent?$FN?5Acheron?5E@
CONST	SEGMENT
??_C@_0CP@JJGPLGEC@?$FLAcheronGuardianEvent?$FN?5Acheron?5E@ DB '[Acheron'
	DB	'GuardianEvent] Acheron Event Play [%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@IDPEIBEF@?$FLAcheronGuardianEvent?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0DE@IDPEIBEF@?$FLAcheronGuardianEvent?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	'AcheronGuardianEvent] [%s][%s] Acheron Event Enter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MDAPBPAD@?$FLAcheronGuardianEvent?$FN?5Send?5Clos@
CONST	SEGMENT
??_C@_0DB@MDAPBPAD@?$FLAcheronGuardianEvent?$FN?5Send?5Clos@ DB '[Acheron'
	DB	'GuardianEvent] Send Close Window Sec[%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@JNGDLOMC@?$FLAcheronGuardianEvent?$FN?5Obelisk?5G@
CONST	SEGMENT
??_C@_0CL@JNGDLOMC@?$FLAcheronGuardianEvent?$FN?5Obelisk?5G@ DB '[Acheron'
	DB	'GuardianEvent] Obelisk GroupNum %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@BMDDCFGO@?$FLAcheronGuardianEvent?$FN?5Error?5Obe@
CONST	SEGMENT
??_C@_0DD@BMDDCFGO@?$FLAcheronGuardianEvent?$FN?5Error?5Obe@ DB '[Acheron'
	DB	'GuardianEvent] Error Obelisk GroupNum [%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@GHNPHKMH@?$FLAcheronEvent?$FN?5No?5Schedule?5Time?5@
CONST	SEGMENT
??_C@_0FC@GHNPHKMH@?$FLAcheronEvent?$FN?5No?5Schedule?5Time?5@ DB '[Acher'
	DB	'onEvent] No Schedule Time Data - Chaos Castle Terminated (bTI'
	DB	'ME_CHANGED=%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@JFKCDOFM@?$FLAcheronEvent?$FN?5No?5Schedule?5Time?5@
CONST	SEGMENT
??_C@_0EH@JFKCDOFM@?$FLAcheronEvent?$FN?5No?5Schedule?5Time?5@ DB '[Acher'
	DB	'onEvent] No Schedule Time Data -  (m_vtAcheronEventTime.empty'
	DB	'())', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CJDKFKFK@?$FLAcheronEvent?$FN?5Disabled?5for?5toda@
CONST	SEGMENT
??_C@_0CC@CJDKFKFK@?$FLAcheronEvent?$FN?5Disabled?5for?5toda@ DB '[Achero'
	DB	'nEvent] Disabled for today', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@NCPKNLFE@?$FLAcheronEvent?$FN?5Error?5DayOfWeek?5?9@
CONST	SEGMENT
??_C@_0DC@NCPKNLFE@?$FLAcheronEvent?$FN?5Error?5DayOfWeek?5?9@ DB '[Acher'
	DB	'onEvent] Error DayOfWeek -  wDayOfWeek [%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@COGMNBGC@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@
CONST	SEGMENT
??_C@_0EH@COGMNBGC@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@ DB '[Achero'
	DB	'nGuardianEvent][MonsterGroupRegen] Out of Max MonsterKindInde'
	DB	'x ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@FLBCMFCC@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@
CONST	SEGMENT
??_C@_0EC@FLBCMFCC@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@ DB '[Achero'
	DB	'nGuardianEvent][MonsterGroupRegen] Invalid groupNumber(%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@NPJIIJLH@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@
CONST	SEGMENT
??_C@_0EG@NPJIIJLH@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@ DB '[Achero'
	DB	'nGuardianEvent][MonsterGroupRegen] Invalid monster groupNumbe'
	DB	'r', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@MPLGDGHP@?$FLArcaBattle?$FN?$FLMonsterGroupRegen?$FN?5@
CONST	SEGMENT
??_C@_0DJ@MPLGDGHP@?$FLArcaBattle?$FN?$FLMonsterGroupRegen?$FN?5@ DB '[Ar'
	DB	'caBattle][MonsterGroupRegen] Invalid Aura groupNumber', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@MPEIMLJB@?$FLAcheronGuardianEvent?$FN?5file?5load@
CONST	SEGMENT
??_C@_0DG@MPEIMLJB@?$FLAcheronGuardianEvent?$FN?5file?5load@ DB '[Acheron'
	DB	'GuardianEvent] file load error - fopen() : %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@DAPPLEIO@?$FLAcheronGuardianEvent?$FN?5file?5load@
CONST	SEGMENT
??_C@_0DJ@DAPPLEIO@?$FLAcheronGuardianEvent?$FN?5file?5load@ DB '[Acheron'
	DB	'GuardianEvent] file load error - File Name Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z$50
__ehfuncinfo$?_Reallocate@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GetBoxPosition@CAcheronGuardianEvent@@QAEHHHHHHAAE0@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffd0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN12@GetBoxPosi
	DD	FLAT:$LN8@GetBoxPosi
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_tagAcheronEventTime@@U1@@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_tagAcheronEventTime@@U1@@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@$$QAU2@@Z PROC ; std::allocator<_tagAcheronEventTime>::construct<_tagAcheronEventTime,_tagAcheronEventTime>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN3@construct:

; 656  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@U_tagAcheronEventTime@@U1@@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@$$QAU2@@Z ENDP ; std::allocator<_tagAcheronEventTime>::construct<_tagAcheronEventTime,_tagAcheronEventTime>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_tagAcheronEventTime@@U1@@?$allocator_traits@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@SAXAAV?$allocator@U_tagAcheronEventTime@@@1@PAU_tagAcheronEventTime@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_tagAcheronEventTime@@U1@@?$allocator_traits@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@SAXAAV?$allocator@U_tagAcheronEventTime@@@1@PAU_tagAcheronEventTime@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<_tagAcheronEventTime> >::construct<_tagAcheronEventTime,_tagAcheronEventTime>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$construct@U_tagAcheronEventTime@@U1@@?$allocator_traits@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@SAXAAV?$allocator@U_tagAcheronEventTime@@@1@PAU_tagAcheronEventTime@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<_tagAcheronEventTime> >::construct<_tagAcheronEventTime,_tagAcheronEventTime>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U_tagAcheronEventTime@@@std@@YA$$QAU_tagAcheronEventTime@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_tagAcheronEventTime@@@std@@YA$$QAU_tagAcheronEventTime@@AAU1@@Z PROC ; std::forward<_tagAcheronEventTime>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_tagAcheronEventTime@@@std@@YA$$QAU_tagAcheronEventTime@@AAU1@@Z ENDP ; std::forward<_tagAcheronEventTime>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_tagAcheronEventTime@@@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U_tagAcheronEventTime@@@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@@Z PROC ; std::allocator<_tagAcheronEventTime>::destroy<_tagAcheronEventTime>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U_tagAcheronEventTime@@@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@@Z ENDP ; std::allocator<_tagAcheronEventTime>::destroy<_tagAcheronEventTime>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_tagAcheronEventTime@@U1@@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXPAU_tagAcheronEventTime@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_tagAcheronEventTime@@U1@@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXPAU_tagAcheronEventTime@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >::construct<_tagAcheronEventTime,_tagAcheronEventTime>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@U_tagAcheronEventTime@@U1@@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXPAU_tagAcheronEventTime@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >::construct<_tagAcheronEventTime,_tagAcheronEventTime>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_tagAcheronEventTime@@@?$allocator_traits@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@SAXAAV?$allocator@U_tagAcheronEventTime@@@1@PAU_tagAcheronEventTime@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_tagAcheronEventTime@@@?$allocator_traits@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@SAXAAV?$allocator@U_tagAcheronEventTime@@@1@PAU_tagAcheronEventTime@@@Z PROC ; std::allocator_traits<std::allocator<_tagAcheronEventTime> >::destroy<_tagAcheronEventTime>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@U_tagAcheronEventTime@@@?$allocator_traits@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@SAXAAV?$allocator@U_tagAcheronEventTime@@@1@PAU_tagAcheronEventTime@@@Z ENDP ; std::allocator_traits<std::allocator<_tagAcheronEventTime> >::destroy<_tagAcheronEventTime>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAU_tagAcheronEventTime@@PAU1@V?$allocator@U_tagAcheronEventTime@@@std@@U1@@std@@YAPAU_tagAcheronEventTime@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAU_tagAcheronEventTime@@PAU1@V?$allocator@U_tagAcheronEventTime@@@std@@U1@@std@@YAPAU_tagAcheronEventTime@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<_tagAcheronEventTime *,_tagAcheronEventTime *,std::allocator<_tagAcheronEventTime>,_tagAcheronEventTime>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	3b ce		 cmp	 ecx, esi
  0000f	74 1c		 je	 SHORT $LN3@Uninit_mov
$LL4@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00011	85 c0		 test	 eax, eax
  00013	74 0e		 je	 SHORT $LN2@Uninit_mov
  00015	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00019	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0001d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00020	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN2@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00023	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00026	83 c0 0c	 add	 eax, 12			; 0000000cH
  00029	3b ce		 cmp	 ecx, esi
  0002b	75 e4		 jne	 SHORT $LL4@Uninit_mov
$LN3@Uninit_mov:
  0002d	5e		 pop	 esi

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);
; 450  : 	}

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$_Uninit_move@PAU_tagAcheronEventTime@@PAU1@V?$allocator@U_tagAcheronEventTime@@@std@@U1@@std@@YAPAU_tagAcheronEventTime@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<_tagAcheronEventTime *,_tagAcheronEventTime *,std::allocator<_tagAcheronEventTime>,_tagAcheronEventTime>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAU_tagAcheronEventTime@@@std@@YAPAU_tagAcheronEventTime@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAU_tagAcheronEventTime@@@std@@YAPAU_tagAcheronEventTime@@PAU1@@Z PROC ; std::_Val_type<_tagAcheronEventTime *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAU_tagAcheronEventTime@@@std@@YAPAU_tagAcheronEventTime@@PAU1@@Z ENDP ; std::_Val_type<_tagAcheronEventTime *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_tagAcheronEventTime@@@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXPAU_tagAcheronEventTime@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U_tagAcheronEventTime@@@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXPAU_tagAcheronEventTime@@@Z PROC ; std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >::destroy<_tagAcheronEventTime>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U_tagAcheronEventTime@@@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXPAU_tagAcheronEventTime@@@Z ENDP ; std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >::destroy<_tagAcheronEventTime>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAU_tagAcheronEventTime@@PAU1@@std@@YAAAPAU_tagAcheronEventTime@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAU_tagAcheronEventTime@@PAU1@@std@@YAAAPAU_tagAcheronEventTime@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<_tagAcheronEventTime *,_tagAcheronEventTime *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAU_tagAcheronEventTime@@PAU1@@std@@YAAAPAU_tagAcheronEventTime@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<_tagAcheronEventTime *,_tagAcheronEventTime *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAU_tagAcheronEventTime@@PAU1@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@YAPAU_tagAcheronEventTime@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAU_tagAcheronEventTime@@PAU1@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@YAPAU_tagAcheronEventTime@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@@Z PROC ; std::_Uninit_move<_tagAcheronEventTime *,_tagAcheronEventTime *,std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_tagAcheronEventTime@@PAU1@V?$allocator@U_tagAcheronEventTime@@@std@@U1@@std@@YAPAU_tagAcheronEventTime@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_tagAcheronEventTime *,_tagAcheronEventTime *,std::allocator<_tagAcheronEventTime>,_tagAcheronEventTime>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAU_tagAcheronEventTime@@PAU1@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@YAPAU_tagAcheronEventTime@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@@Z ENDP ; std::_Uninit_move<_tagAcheronEventTime *,_tagAcheronEventTime *,std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAU_tagAcheronEventTime@@@std@@YAPAU_tagAcheronEventTime@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAU_tagAcheronEventTime@@@std@@YAPAU_tagAcheronEventTime@@PAU1@@Z PROC ; std::_Unchecked<_tagAcheronEventTime *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAU_tagAcheronEventTime@@@std@@YAPAU_tagAcheronEventTime@@PAU1@@Z ENDP ; std::_Unchecked<_tagAcheronEventTime *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_tagAcheronEventTime@@ABU1@@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_tagAcheronEventTime@@ABU1@@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@ABU2@@Z PROC ; std::allocator<_tagAcheronEventTime>::construct<_tagAcheronEventTime,_tagAcheronEventTime const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN3@construct:

; 656  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@U_tagAcheronEventTime@@ABU1@@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@ABU2@@Z ENDP ; std::allocator<_tagAcheronEventTime>::construct<_tagAcheronEventTime,_tagAcheronEventTime const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_tagAcheronEventTime@@AAU1@@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_tagAcheronEventTime@@AAU1@@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@AAU2@@Z PROC ; std::allocator<_tagAcheronEventTime>::construct<_tagAcheronEventTime,_tagAcheronEventTime &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN3@construct:

; 656  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@U_tagAcheronEventTime@@AAU1@@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@AAU2@@Z ENDP ; std::allocator<_tagAcheronEventTime>::construct<_tagAcheronEventTime,_tagAcheronEventTime &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@YAXPAU_tagAcheronEventTime@@0AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@YAXPAU_tagAcheronEventTime@@0AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> > >, COMDAT

; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@YAXPAU_tagAcheronEventTime@@0AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@U_tagAcheronEventTime@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_tagAcheronEventTime@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@U_tagAcheronEventTime@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_tagAcheronEventTime@@0@Z PROC ; std::_Ptr_cat<_tagAcheronEventTime,_tagAcheronEventTime>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@U_tagAcheronEventTime@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_tagAcheronEventTime@@0@Z ENDP ; std::_Ptr_cat<_tagAcheronEventTime,_tagAcheronEventTime>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAU_tagAcheronEventTime@@PAU1@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@YAPAU_tagAcheronEventTime@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAU_tagAcheronEventTime@@PAU1@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@YAPAU_tagAcheronEventTime@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@@Z PROC ; std::_Uninitialized_move<_tagAcheronEventTime *,_tagAcheronEventTime *,std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_tagAcheronEventTime@@PAU1@V?$allocator@U_tagAcheronEventTime@@@std@@U1@@std@@YAPAU_tagAcheronEventTime@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_tagAcheronEventTime *,_tagAcheronEventTime *,std::allocator<_tagAcheronEventTime>,_tagAcheronEventTime>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAU_tagAcheronEventTime@@PAU1@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@YAPAU_tagAcheronEventTime@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<_tagAcheronEventTime *,_tagAcheronEventTime *,std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@U_tagAcheronEventTime@@@std@@@std@@YAABV?$allocator@U_tagAcheronEventTime@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@U_tagAcheronEventTime@@@std@@@std@@YAABV?$allocator@U_tagAcheronEventTime@@@0@ABV10@@Z PROC ; std::forward<std::allocator<_tagAcheronEventTime> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@U_tagAcheronEventTime@@@std@@@std@@YAABV?$allocator@U_tagAcheronEventTime@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<_tagAcheronEventTime> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@U_tagAcheronEventTime@@@std@@YAPAU_tagAcheronEventTime@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@U_tagAcheronEventTime@@@std@@YAPAU_tagAcheronEventTime@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<_tagAcheronEventTime>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@U_tagAcheronEventTime@@@std@@YAPAU_tagAcheronEventTime@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<_tagAcheronEventTime>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_tagAcheronEventTime@@ABU1@@?$allocator_traits@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@SAXAAV?$allocator@U_tagAcheronEventTime@@@1@PAU_tagAcheronEventTime@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_tagAcheronEventTime@@ABU1@@?$allocator_traits@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@SAXAAV?$allocator@U_tagAcheronEventTime@@@1@PAU_tagAcheronEventTime@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<_tagAcheronEventTime> >::construct<_tagAcheronEventTime,_tagAcheronEventTime const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$construct@U_tagAcheronEventTime@@ABU1@@?$allocator_traits@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@SAXAAV?$allocator@U_tagAcheronEventTime@@@1@PAU_tagAcheronEventTime@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<_tagAcheronEventTime> >::construct<_tagAcheronEventTime,_tagAcheronEventTime const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABU_tagAcheronEventTime@@@std@@YAABU_tagAcheronEventTime@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU_tagAcheronEventTime@@@std@@YAABU_tagAcheronEventTime@@ABU1@@Z PROC ; std::forward<_tagAcheronEventTime const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABU_tagAcheronEventTime@@@std@@YAABU_tagAcheronEventTime@@ABU1@@Z ENDP ; std::forward<_tagAcheronEventTime const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_tagAcheronEventTime@@AAU1@@?$allocator_traits@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@SAXAAV?$allocator@U_tagAcheronEventTime@@@1@PAU_tagAcheronEventTime@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_tagAcheronEventTime@@AAU1@@?$allocator_traits@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@SAXAAV?$allocator@U_tagAcheronEventTime@@@1@PAU_tagAcheronEventTime@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<_tagAcheronEventTime> >::construct<_tagAcheronEventTime,_tagAcheronEventTime &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$construct@U_tagAcheronEventTime@@AAU1@@?$allocator_traits@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@SAXAAV?$allocator@U_tagAcheronEventTime@@@1@PAU_tagAcheronEventTime@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<_tagAcheronEventTime> >::construct<_tagAcheronEventTime,_tagAcheronEventTime &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAU_tagAcheronEventTime@@@std@@YAAAU_tagAcheronEventTime@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU_tagAcheronEventTime@@@std@@YAAAU_tagAcheronEventTime@@AAU1@@Z PROC ; std::forward<_tagAcheronEventTime &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU_tagAcheronEventTime@@@std@@YAAAU_tagAcheronEventTime@@AAU1@@Z ENDP ; std::forward<_tagAcheronEventTime &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBU_tagAcheronEventTime@@@std@@YAPBU_tagAcheronEventTime@@ABU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBU_tagAcheronEventTime@@@std@@YAPBU_tagAcheronEventTime@@ABU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<_tagAcheronEventTime const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBU_tagAcheronEventTime@@@std@@YAPBU_tagAcheronEventTime@@ABU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<_tagAcheronEventTime const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@YAXPAU_tagAcheronEventTime@@0AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@YAXPAU_tagAcheronEventTime@@0AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@YAXPAU_tagAcheronEventTime@@0AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAU_tagAcheronEventTime@@@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEPAU_tagAcheronEventTime@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAU_tagAcheronEventTime@@@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEPAU_tagAcheronEventTime@@PAU2@00@Z PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Umove<_tagAcheronEventTime *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_tagAcheronEventTime@@PAU1@V?$allocator@U_tagAcheronEventTime@@@std@@U1@@std@@YAPAU_tagAcheronEventTime@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_tagAcheronEventTime *,_tagAcheronEventTime *,std::allocator<_tagAcheronEventTime>,_tagAcheronEventTime>
  00017	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAU_tagAcheronEventTime@@@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEPAU_tagAcheronEventTime@@PAU2@00@Z ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Umove<_tagAcheronEventTime *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@U_tagAcheronEventTime@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U_tagAcheronEventTime@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@U_tagAcheronEventTime@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U_tagAcheronEventTime@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >,std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >,std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> >,1><std::allocator<_tagAcheronEventTime> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@U_tagAcheronEventTime@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U_tagAcheronEventTime@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >,std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >,std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> >,1><std::allocator<_tagAcheronEventTime> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@U_tagAcheronEventTime@@@std@@YAPAU_tagAcheronEventTime@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_tagAcheronEventTime@@@std@@YAPAU_tagAcheronEventTime@@AAU1@@Z PROC ; std::addressof<_tagAcheronEventTime>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U_tagAcheronEventTime@@@std@@YAPAU_tagAcheronEventTime@@AAU1@@Z ENDP ; std::addressof<_tagAcheronEventTime>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_tagAcheronEventTime@@ABU1@@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXPAU_tagAcheronEventTime@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_tagAcheronEventTime@@ABU1@@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXPAU_tagAcheronEventTime@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >::construct<_tagAcheronEventTime,_tagAcheronEventTime const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@U_tagAcheronEventTime@@ABU1@@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXPAU_tagAcheronEventTime@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >::construct<_tagAcheronEventTime,_tagAcheronEventTime const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_tagAcheronEventTime@@AAU1@@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXPAU_tagAcheronEventTime@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_tagAcheronEventTime@@AAU1@@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXPAU_tagAcheronEventTime@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >::construct<_tagAcheronEventTime,_tagAcheronEventTime &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@U_tagAcheronEventTime@@AAU1@@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXPAU_tagAcheronEventTime@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >::construct<_tagAcheronEventTime,_tagAcheronEventTime &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBU_tagAcheronEventTime@@@std@@YAPBU_tagAcheronEventTime@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBU_tagAcheronEventTime@@@std@@YAPBU_tagAcheronEventTime@@ABU1@@Z PROC ; std::addressof<_tagAcheronEventTime const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBU_tagAcheronEventTime@@@std@@YAPBU_tagAcheronEventTime@@ABU1@@Z ENDP ; std::addressof<_tagAcheronEventTime const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU_tagAcheronEventTime@@@std@@SAPAU_tagAcheronEventTime@@AAU3@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU_tagAcheronEventTime@@@std@@SAPAU_tagAcheronEventTime@@AAU3@@Z PROC ; std::pointer_traits<_tagAcheronEventTime *>::pointer_to, COMDAT

; 316  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 318  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?pointer_to@?$pointer_traits@PAU_tagAcheronEventTime@@@std@@SAPAU_tagAcheronEventTime@@AAU3@@Z ENDP ; std::pointer_traits<_tagAcheronEventTime *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::operator++, COMDAT
; _this$ = ecx

; 340  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 341  : 		_Myiter _Tmp = *this;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 112  : 		++this->_Ptr;

  0000a	83 c2 0c	 add	 edx, 12			; 0000000cH
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::operator++, COMDAT
; _this$ = ecx

; 112  : 		++this->_Ptr;

  00000	83 01 0c	 add	 DWORD PTR [ecx], 12	; 0000000cH

; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 337  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEPAU_tagAcheronEventTime@@XZ
_TEXT	SEGMENT
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEPAU_tagAcheronEventTime@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::operator->, COMDAT
; _this$ = ecx

; 330  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 331  : 		}

  00002	c3		 ret	 0
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEPAU_tagAcheronEventTime@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEAAU_tagAcheronEventTime@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEAAU_tagAcheronEventTime@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::operator*, COMDAT
; _this$ = ecx

; 325  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEAAU_tagAcheronEventTime@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QAE@PAU_tagAcheronEventTime@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QAE@PAU_tagAcheronEventTime@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >, COMDAT
; _this$ = ecx

; 307  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 308  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QAE@PAU_tagAcheronEventTime@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::_Compat, COMDAT
; _this$ = ecx

; 256  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::operator!=, COMDAT
; _this$ = ecx

; 210  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 212  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 207  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::operator++, COMDAT
; _this$ = ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  00000	83 01 0c	 add	 DWORD PTR [ecx], 12	; 0000000cH

; 113  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 114  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEABU_tagAcheronEventTime@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEABU_tagAcheronEventTime@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 87   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEABU_tagAcheronEventTime@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QAE@PAU_tagAcheronEventTime@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QAE@PAU_tagAcheronEventTime@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@std@@QAE@PAU_tagAcheronEventTime@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_AcheronGuardianEvent@@YAXXZ
text$yd	SEGMENT
??__Fg_AcheronGuardianEvent@@YAXXZ PROC			; `dynamic atexit destructor for 'g_AcheronGuardianEvent'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_AcheronGuardianEvent@@3VCAcheronGuardianEvent@@A ; g_AcheronGuardianEvent
  00005	e9 00 00 00 00	 jmp	 ??1CAcheronGuardianEvent@@QAE@XZ ; CAcheronGuardianEvent::~CAcheronGuardianEvent
??__Fg_AcheronGuardianEvent@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_AcheronGuardianEvent''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ??__Eg_AcheronGuardianEvent@@YAXXZ
text$di	SEGMENT
??__Eg_AcheronGuardianEvent@@YAXXZ PROC			; `dynamic initializer for 'g_AcheronGuardianEvent'', COMDAT

; 15   : CAcheronGuardianEvent g_AcheronGuardianEvent;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_AcheronGuardianEvent@@3VCAcheronGuardianEvent@@A ; g_AcheronGuardianEvent
  00005	e8 00 00 00 00	 call	 ??0CAcheronGuardianEvent@@QAE@XZ ; CAcheronGuardianEvent::CAcheronGuardianEvent
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_AcheronGuardianEvent@@YAXXZ ; `dynamic atexit destructor for 'g_AcheronGuardianEvent''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_AcheronGuardianEvent@@YAXXZ ENDP			; `dynamic initializer for 'g_AcheronGuardianEvent''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.h
;	COMDAT ?GetMapSvrGroup@CMapServerManager@@QAEHXZ
_TEXT	SEGMENT
?GetMapSvrGroup@CMapServerManager@@QAEHXZ PROC		; CMapServerManager::GetMapSvrGroup, COMDAT
; _this$ = ecx

; 55   : 		if ( this->m_lpThisMapSvrData != NULL )

  00000	8b 81 f8 6a 01
	00		 mov	 eax, DWORD PTR [ecx+92920]
  00006	85 c0		 test	 eax, eax
  00008	74 05		 je	 SHORT $LN2@GetMapSvrG

; 56   : 		{
; 57   : 			return m_lpThisMapSvrData->m_btMAPSVR_GROUP;

  0000a	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]

; 60   : 	}

  0000e	c3		 ret	 0
$LN2@GetMapSvrG:

; 58   : 		}
; 59   : 		return -1;

  0000f	83 c8 ff	 or	 eax, -1

; 60   : 	}

  00012	c3		 ret	 0
?GetMapSvrGroup@CMapServerManager@@QAEHXZ ENDP		; CMapServerManager::GetMapSvrGroup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tnotice.h
;	COMDAT ?_ARGB@@YAKEEEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_r$ = 12						; size = 1
_g$ = 16						; size = 1
_b$ = 20						; size = 1
?_ARGB@@YAKEEEE@Z PROC					; _ARGB, COMDAT

; 9    : __inline DWORD _ARGB(BYTE a, BYTE r, BYTE g, BYTE b){ return a*16777216 + b*65536 + g*256 + r;}; // in tnotice.h : line 8

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _a$[ebp]
  00007	0f b6 4d 14	 movzx	 ecx, BYTE PTR _b$[ebp]
  0000b	c1 e0 08	 shl	 eax, 8
  0000e	03 c1		 add	 eax, ecx
  00010	0f b6 4d 10	 movzx	 ecx, BYTE PTR _g$[ebp]
  00014	c1 e0 08	 shl	 eax, 8
  00017	03 c1		 add	 eax, ecx
  00019	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _r$[ebp]
  0001d	c1 e0 08	 shl	 eax, 8
  00020	03 c1		 add	 eax, ecx
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_ARGB@@YAKEEEE@Z ENDP					; _ARGB
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	char ch;
; 26   : 	TokenString[0] = '\0';

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 27   : 
; 28   : 	do
; 29   : 	{
; 30   : 		if( (ch = (char)fgetc(SMDFile)) == EOF )

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8a d8		 mov	 bl, al
  0002d	83 c4 04	 add	 esp, 4
  00030	80 fb ff	 cmp	 bl, -1
  00033	0f 84 c0 02 00
	00		 je	 $LN41@GetToken

; 31   : 			return END;
; 32   : 			
; 33   : 		if( ch == '/' && ( ch = (char)fgetc(SMDFile) ) == '/' )	

  00039	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  0003c	75 2a		 jne	 SHORT $LN2@GetToken
  0003e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00044	e8 00 00 00 00	 call	 _fgetc
  00049	8a d8		 mov	 bl, al
  0004b	83 c4 04	 add	 esp, 4
  0004e	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00051	75 15		 jne	 SHORT $LN2@GetToken
$LL5@GetToken:

; 34   : 		{
; 35   : 			while( (ch = (char)fgetc(SMDFile)) != '\n' );

  00053	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00059	e8 00 00 00 00	 call	 _fgetc
  0005e	8a d8		 mov	 bl, al
  00060	83 c4 04	 add	 esp, 4
  00063	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00066	75 eb		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 36   : 		}
; 37   : 	} while( isspace(ch) );

  00068	0f be c3	 movsx	 eax, bl
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 _isspace
  00071	83 c4 04	 add	 esp, 4
  00074	85 c0		 test	 eax, eax
  00076	75 a8		 jne	 SHORT $LL4@GetToken

; 38   : 	
; 39   : 	char *p, TempString[100];
; 40   : 
; 41   : 	switch(ch)

  00078	0f be cb	 movsx	 ecx, bl
  0007b	56		 push	 esi
  0007c	8d 41 de	 lea	 eax, DWORD PTR [ecx-34]
  0007f	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  00082	0f 87 be 01 00
	00		 ja	 $LN29@GetToken
  00088	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN59@GetToken[eax]
  0008f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN66@GetToken[eax*4]
$LN19@GetToken:

; 42   : 	{	
; 43   : 	case '#':
; 44   : 		p = TokenString;
; 45   : 		while ( ( (ch = getc(SMDFile) ) != EOF) && (ch!='#'))// || isalnum(ch)) )

  00096	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0009c	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  000a1	e8 00 00 00 00	 call	 _getc
  000a6	83 c4 04	 add	 esp, 4
  000a9	3c ff		 cmp	 al, -1
  000ab	74 1c		 je	 SHORT $LN10@GetToken
  000ad	0f 1f 00	 npad	 3
$LL9@GetToken:
  000b0	3c 23		 cmp	 al, 35			; 00000023H
  000b2	74 2b		 je	 SHORT $LN20@GetToken
  000b4	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 46   : 			*p++ = ch;

  000ba	88 06		 mov	 BYTE PTR [esi], al
  000bc	46		 inc	 esi
  000bd	e8 00 00 00 00	 call	 _getc
  000c2	83 c4 04	 add	 esp, 4
  000c5	3c ff		 cmp	 al, -1
  000c7	75 e7		 jne	 SHORT $LL9@GetToken
$LN10@GetToken:

; 47   : 		if (ch!='#')

  000c9	3c 23		 cmp	 al, 35			; 00000023H
  000cb	74 12		 je	 SHORT $LN20@GetToken

; 48   : 			ungetc(ch,SMDFile);

  000cd	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  000d3	0f be c0	 movsx	 eax, al
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 _ungetc
  000dc	83 c4 08	 add	 esp, 8
$LN20@GetToken:

; 49   : 		*p = 0;

  000df	c6 06 00	 mov	 BYTE PTR [esi], 0

; 50   : 		return CurrentToken = COMMAND;

  000e2	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000e7	5e		 pop	 esi
  000e8	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000f2	5b		 pop	 ebx

; 90   : 	}
; 91   : }

  000f3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f6	33 cd		 xor	 ecx, ebp
  000f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c3		 ret	 0
$LN21@GetToken:
  00101	5e		 pop	 esi

; 51   : 	case ';':
; 52   : 		return CurrentToken = SEMICOLON;

  00102	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  0010c	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  00111	5b		 pop	 ebx

; 90   : 	}
; 91   : }

  00112	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00115	33 cd		 xor	 ecx, ebp
  00117	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
$LN22@GetToken:
  00120	5e		 pop	 esi

; 53   : 	case ',':
; 54   : 		return CurrentToken = COMMA;

  00121	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  0012b	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  00130	5b		 pop	 ebx

; 90   : 	}
; 91   : }

  00131	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00134	33 cd		 xor	 ecx, ebp
  00136	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013b	8b e5		 mov	 esp, ebp
  0013d	5d		 pop	 ebp
  0013e	c3		 ret	 0
$LN23@GetToken:
  0013f	5e		 pop	 esi

; 55   : 	case '{':
; 56   : 		return CurrentToken = LP;

  00140	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0014a	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  0014f	5b		 pop	 ebx

; 90   : 	}
; 91   : }

  00150	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00153	33 cd		 xor	 ecx, ebp
  00155	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c3		 ret	 0
$LN24@GetToken:
  0015e	5e		 pop	 esi

; 57   : 	case '}':
; 58   : 		return CurrentToken = RP;

  0015f	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  00169	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  0016e	5b		 pop	 ebx

; 90   : 	}
; 91   : }

  0016f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00172	33 cd		 xor	 ecx, ebp
  00174	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c3		 ret	 0
$LN25@GetToken:

; 59   : 	case '0':	case '1':	case '2':	case '3':	case '4':
; 60   : 	case '5':	case '6':	case '7':	case '8':	case '9':
; 61   : 	case '.':	case '-':
; 62   : 		ungetc(ch,SMDFile);

  0017d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00183	51		 push	 ecx
  00184	e8 00 00 00 00	 call	 _ungetc

; 63   : 		p = TempString;
; 64   : 		while ( (  (ch = getc(SMDFile) ) !=EOF) && (ch=='.' || isdigit(ch) || ch=='-') )

  00189	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0018f	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00192	e8 00 00 00 00	 call	 _getc
  00197	8a d8		 mov	 bl, al
  00199	83 c4 0c	 add	 esp, 12			; 0000000cH
  0019c	80 fb ff	 cmp	 bl, -1
  0019f	74 32		 je	 SHORT $LN60@GetToken
$LL11@GetToken:
  001a1	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  001a4	74 15		 je	 SHORT $LN26@GetToken
  001a6	0f be cb	 movsx	 ecx, bl
  001a9	51		 push	 ecx
  001aa	e8 00 00 00 00	 call	 _isdigit
  001af	83 c4 04	 add	 esp, 4
  001b2	85 c0		 test	 eax, eax
  001b4	75 05		 jne	 SHORT $LN26@GetToken
  001b6	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  001b9	75 18		 jne	 SHORT $LN60@GetToken
$LN26@GetToken:
  001bb	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 65   : 			*p++ = ch;

  001c1	88 1e		 mov	 BYTE PTR [esi], bl
  001c3	46		 inc	 esi
  001c4	e8 00 00 00 00	 call	 _getc
  001c9	8a d8		 mov	 bl, al
  001cb	83 c4 04	 add	 esp, 4
  001ce	80 fb ff	 cmp	 bl, -1
  001d1	75 ce		 jne	 SHORT $LL11@GetToken
$LN60@GetToken:

; 66   : 		*p = 0;
; 67   : 		TokenNumber = (float)atof(TempString);

  001d3	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  001d6	c6 06 00	 mov	 BYTE PTR [esi], 0
  001d9	50		 push	 eax
  001da	e8 00 00 00 00	 call	 _atof
  001df	83 c4 04	 add	 esp, 4

; 68   : 		//			sscanf(TempString," %f ",&TokenNumber);
; 69   : 		return CurrentToken = NUMBER;

  001e2	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ec	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001f2	b8 01 00 00 00	 mov	 eax, 1
  001f7	5e		 pop	 esi
  001f8	5b		 pop	 ebx

; 90   : 	}
; 91   : }

  001f9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fc	33 cd		 xor	 ecx, ebp
  001fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00203	8b e5		 mov	 esp, ebp
  00205	5d		 pop	 ebp
  00206	c3		 ret	 0
$LN27@GetToken:

; 70   : 	case '"':
; 71   : 		p = TokenString;
; 72   : 		while ( (  (ch = getc(SMDFile) ) !=EOF) && (ch!='"'))// || isalnum(ch)) )

  00207	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020d	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  00212	e8 00 00 00 00	 call	 _getc
  00217	83 c4 04	 add	 esp, 4
  0021a	3c ff		 cmp	 al, -1
  0021c	74 1f		 je	 SHORT $LN14@GetToken
  0021e	66 90		 npad	 2
$LL13@GetToken:
  00220	3c 22		 cmp	 al, 34			; 00000022H
  00222	0f 84 93 00 00
	00		 je	 $LN28@GetToken
  00228	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 73   : 			*p++ = ch;

  0022e	88 06		 mov	 BYTE PTR [esi], al
  00230	46		 inc	 esi
  00231	e8 00 00 00 00	 call	 _getc
  00236	83 c4 04	 add	 esp, 4
  00239	3c ff		 cmp	 al, -1
  0023b	75 e3		 jne	 SHORT $LL13@GetToken
$LN14@GetToken:

; 74   : 		if (ch!='"')

  0023d	3c 22		 cmp	 al, 34			; 00000022H
  0023f	74 7a		 je	 SHORT $LN28@GetToken

; 75   : 			ungetc(ch,SMDFile);

  00241	0f be c0	 movsx	 eax, al

; 76   : 		*p = 0;
; 77   : 		return CurrentToken = NAME;

  00244	eb 66		 jmp	 SHORT $LN64@GetToken
$LN29@GetToken:

; 78   : 	default:
; 79   : 		if (isalpha(ch))	

  00246	51		 push	 ecx
  00247	e8 00 00 00 00	 call	 _isalpha
  0024c	83 c4 04	 add	 esp, 4
  0024f	85 c0		 test	 eax, eax
  00251	0f 84 83 00 00
	00		 je	 $LN30@GetToken

; 80   : 		{
; 81   : 			p = TokenString;
; 82   : 			*p++ = ch;
; 83   : 			while ( (  (ch = getc(SMDFile) ) !=EOF) && (ch=='.' || ch=='_' || isalnum(ch)) )

  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0025d	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  00263	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  00268	e8 00 00 00 00	 call	 _getc
  0026d	8a d8		 mov	 bl, al
  0026f	83 c4 04	 add	 esp, 4
  00272	80 fb ff	 cmp	 bl, -1
  00275	74 32		 je	 SHORT $LN61@GetToken
$LL15@GetToken:
  00277	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  0027a	74 15		 je	 SHORT $LN31@GetToken
  0027c	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  0027f	74 10		 je	 SHORT $LN31@GetToken
  00281	0f be c3	 movsx	 eax, bl
  00284	50		 push	 eax
  00285	e8 00 00 00 00	 call	 _isalnum
  0028a	83 c4 04	 add	 esp, 4
  0028d	85 c0		 test	 eax, eax
  0028f	74 18		 je	 SHORT $LN61@GetToken
$LN31@GetToken:
  00291	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 84   : 				*p++ = ch;

  00297	88 1e		 mov	 BYTE PTR [esi], bl
  00299	46		 inc	 esi
  0029a	e8 00 00 00 00	 call	 _getc
  0029f	8a d8		 mov	 bl, al
  002a1	83 c4 04	 add	 esp, 4
  002a4	80 fb ff	 cmp	 bl, -1
  002a7	75 ce		 jne	 SHORT $LL15@GetToken
$LN61@GetToken:

; 85   : 			ungetc(ch,SMDFile);

  002a9	0f be c3	 movsx	 eax, bl
$LN64@GetToken:
  002ac	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  002b2	50		 push	 eax
  002b3	e8 00 00 00 00	 call	 _ungetc
  002b8	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 86   : 			*p = 0;

  002bb	c6 06 00	 mov	 BYTE PTR [esi], 0

; 87   : 			return CurrentToken = NAME;

  002be	33 c0		 xor	 eax, eax
  002c0	5e		 pop	 esi
  002c1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  002cb	5b		 pop	 ebx

; 90   : 	}
; 91   : }

  002cc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002cf	33 cd		 xor	 ecx, ebp
  002d1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d6	8b e5		 mov	 esp, ebp
  002d8	5d		 pop	 ebp
  002d9	c3		 ret	 0
$LN30@GetToken:
  002da	5e		 pop	 esi

; 88   : 		}
; 89   : 		return CurrentToken = SMD_ERROR;

  002db	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002e5	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002ea	5b		 pop	 ebx

; 90   : 	}
; 91   : }

  002eb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ee	33 cd		 xor	 ecx, ebp
  002f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f5	8b e5		 mov	 esp, ebp
  002f7	5d		 pop	 ebp
  002f8	c3		 ret	 0
$LN41@GetToken:
  002f9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002fc	b8 02 00 00 00	 mov	 eax, 2
  00301	33 cd		 xor	 ecx, ebp
  00303	5b		 pop	 ebx
  00304	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00309	8b e5		 mov	 esp, ebp
  0030b	5d		 pop	 ebp
  0030c	c3		 ret	 0
  0030d	0f 1f 00	 npad	 3
$LN66@GetToken:
  00310	00 00 00 00	 DD	 $LN27@GetToken
  00314	00 00 00 00	 DD	 $LN19@GetToken
  00318	00 00 00 00	 DD	 $LN22@GetToken
  0031c	00 00 00 00	 DD	 $LN25@GetToken
  00320	00 00 00 00	 DD	 $LN21@GetToken
  00324	00 00 00 00	 DD	 $LN23@GetToken
  00328	00 00 00 00	 DD	 $LN24@GetToken
  0032c	00 00 00 00	 DD	 $LN29@GetToken
$LN59@GetToken:
  00330	00		 DB	 0
  00331	01		 DB	 1
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	07		 DB	 7
  00336	07		 DB	 7
  00337	07		 DB	 7
  00338	07		 DB	 7
  00339	07		 DB	 7
  0033a	02		 DB	 2
  0033b	03		 DB	 3
  0033c	03		 DB	 3
  0033d	07		 DB	 7
  0033e	03		 DB	 3
  0033f	03		 DB	 3
  00340	03		 DB	 3
  00341	03		 DB	 3
  00342	03		 DB	 3
  00343	03		 DB	 3
  00344	03		 DB	 3
  00345	03		 DB	 3
  00346	03		 DB	 3
  00347	03		 DB	 3
  00348	07		 DB	 7
  00349	04		 DB	 4
  0034a	07		 DB	 7
  0034b	07		 DB	 7
  0034c	07		 DB	 7
  0034d	07		 DB	 7
  0034e	07		 DB	 7
  0034f	07		 DB	 7
  00350	07		 DB	 7
  00351	07		 DB	 7
  00352	07		 DB	 7
  00353	07		 DB	 7
  00354	07		 DB	 7
  00355	07		 DB	 7
  00356	07		 DB	 7
  00357	07		 DB	 7
  00358	07		 DB	 7
  00359	07		 DB	 7
  0035a	07		 DB	 7
  0035b	07		 DB	 7
  0035c	07		 DB	 7
  0035d	07		 DB	 7
  0035e	07		 DB	 7
  0035f	07		 DB	 7
  00360	07		 DB	 7
  00361	07		 DB	 7
  00362	07		 DB	 7
  00363	07		 DB	 7
  00364	07		 DB	 7
  00365	07		 DB	 7
  00366	07		 DB	 7
  00367	07		 DB	 7
  00368	07		 DB	 7
  00369	07		 DB	 7
  0036a	07		 DB	 7
  0036b	07		 DB	 7
  0036c	07		 DB	 7
  0036d	07		 DB	 7
  0036e	07		 DB	 7
  0036f	07		 DB	 7
  00370	07		 DB	 7
  00371	07		 DB	 7
  00372	07		 DB	 7
  00373	07		 DB	 7
  00374	07		 DB	 7
  00375	07		 DB	 7
  00376	07		 DB	 7
  00377	07		 DB	 7
  00378	07		 DB	 7
  00379	07		 DB	 7
  0037a	07		 DB	 7
  0037b	07		 DB	 7
  0037c	07		 DB	 7
  0037d	07		 DB	 7
  0037e	07		 DB	 7
  0037f	07		 DB	 7
  00380	07		 DB	 7
  00381	07		 DB	 7
  00382	07		 DB	 7
  00383	07		 DB	 7
  00384	07		 DB	 7
  00385	07		 DB	 7
  00386	07		 DB	 7
  00387	07		 DB	 7
  00388	07		 DB	 7
  00389	05		 DB	 5
  0038a	07		 DB	 7
  0038b	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IBEXPAU_tagAcheronEventTime@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IBEXPAU_tagAcheronEventTime@@0@Z PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IBEXPAU_tagAcheronEventTime@@0@Z ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IBEXXZ PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IBEXXZ ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXXZ PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 32		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	d1 fa		 sar	 edx, 1
  00017	8b c2		 mov	 eax, edx
  00019	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001c	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@I@Z ; std::allocator<_tagAcheronEventTime>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00034	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0003b	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0003c	c3		 ret	 0
?_Tidy@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXXZ ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
tv202 = 8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	56		 push	 esi
  0000c	57		 push	 edi

; 1646 : 		if (_Unused_capacity() < _Count)

  0000d	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00010	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00013	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00016	2b d6		 sub	 edx, esi
  00018	f7 ea		 imul	 edx
  0001a	d1 fa		 sar	 edx, 1
  0001c	8b c2		 mov	 eax, edx
  0001e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00021	03 c2		 add	 eax, edx

; 1646 : 		if (_Unused_capacity() < _Count)

  00023	3b c7		 cmp	 eax, edi
  00025	73 5f		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00027	8b 03		 mov	 eax, DWORD PTR [ebx]
  00029	2b f0		 sub	 esi, eax
  0002b	89 45 08	 mov	 DWORD PTR tv202[ebp], eax
  0002e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00033	f7 ee		 imul	 esi

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00035	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0003a	d1 fa		 sar	 edx, 1
  0003c	8b ca		 mov	 ecx, edx
  0003e	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00041	03 ca		 add	 ecx, edx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00043	2b c1		 sub	 eax, ecx
  00045	3b c7		 cmp	 eax, edi
  00047	72 44		 jb	 SHORT $LN134@Reserve

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00049	03 f9		 add	 edi, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0004b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00050	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00053	2b 4d 08	 sub	 ecx, DWORD PTR tv202[ebp]
  00056	f7 e9		 imul	 ecx
  00058	d1 fa		 sar	 edx, 1
  0005a	8b f2		 mov	 esi, edx
  0005c	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0005f	03 f2		 add	 esi, edx

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00061	ba 55 55 55 15	 mov	 edx, 357913941		; 15555555H
  00066	8b c6		 mov	 eax, esi
  00068	d1 e8		 shr	 eax, 1
  0006a	2b d0		 sub	 edx, eax
  0006c	3b d6		 cmp	 edx, esi
  0006e	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  00071	b8 00 00 00 00	 mov	 eax, 0
  00076	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00079	3b cf		 cmp	 ecx, edi
  0007b	0f 42 cf	 cmovb	 ecx, edi

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0007e	51		 push	 ecx
  0007f	8b cb		 mov	 ecx, ebx
  00081	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Reallocate
$LN2@Reserve:
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx

; 1651 : 			}
; 1652 : 		}

  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00092	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  00097	cc		 int	 3
?_Reserve@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00030	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_tagAcheronEventTime@@@std@@QAEPAU_tagAcheronEventTime@@I@Z ; std::allocator<_tagAcheronEventTime>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00038	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0003b	8b f8		 mov	 edi, eax

; 1622 : 
; 1623 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00044	6a 00		 push	 0
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	ff 76 04	 push	 DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0004b	89 7d ec	 mov	 DWORD PTR __Ptr$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0004e	ff 36		 push	 DWORD PTR [esi]
  00050	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_tagAcheronEventTime@@PAU1@V?$allocator@U_tagAcheronEventTime@@@std@@U1@@std@@YAPAU_tagAcheronEventTime@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_tagAcheronEventTime *,_tagAcheronEventTime *,std::allocator<_tagAcheronEventTime>,_tagAcheronEventTime>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00055	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00058	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0005d	2b 0e		 sub	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0005f	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00062	f7 e9		 imul	 ecx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00064	8b 06		 mov	 eax, DWORD PTR [esi]

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00066	d1 fa		 sar	 edx, 1
  00068	8b da		 mov	 ebx, edx
  0006a	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0006d	03 da		 add	 ebx, edx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  0006f	85 c0		 test	 eax, eax
  00071	74 1f		 je	 SHORT $LN3@Reallocate

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00073	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00076	2b c8		 sub	 ecx, eax
  00078	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0007d	f7 e9		 imul	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0007f	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00081	d1 fa		 sar	 edx, 1
  00083	8b c2		 mov	 eax, edx
  00085	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00088	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0008a	50		 push	 eax
  0008b	ff 36		 push	 DWORD PTR [esi]
  0008d	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@I@Z ; std::allocator<_tagAcheronEventTime>::deallocate
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1639 : 		this->_Myend() = _Ptr + _Count;

  00092	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00095	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00098	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  0009b	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  0009e	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  000a1	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  000a4	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  000a7	89 3e		 mov	 DWORD PTR [esi], edi

; 1642 : 		}

  000a9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ac	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b3	59		 pop	 ecx
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  000bd	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  000c0	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  000c6	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@I@Z ; std::allocator<_tagAcheronEventTime>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1627 : 		_RERAISE;

  000cb	6a 00		 push	 0
  000cd	6a 00		 push	 0
  000cf	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN179@Reallocate:
$LN178@Reallocate:
  000d4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IBE_NPBU_tagAcheronEventTime@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IBE_NPBU_tagAcheronEventTime@@@Z PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IBE_NPBU_tagAcheronEventTime@@@Z ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IBEII@Z PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0000d	b9 55 55 55 15	 mov	 ecx, 357913941		; 15555555H

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00012	f7 ea		 imul	 edx
  00014	56		 push	 esi
  00015	d1 fa		 sar	 edx, 1
  00017	8b f2		 mov	 esi, edx
  00019	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001c	03 f2		 add	 esi, edx

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0001e	8b c6		 mov	 eax, esi
  00020	d1 e8		 shr	 eax, 1
  00022	57		 push	 edi
  00023	2b c8		 sub	 ecx, eax
  00025	33 ff		 xor	 edi, edi
  00027	3b ce		 cmp	 ecx, esi
  00029	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0002c	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  0002f	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00032	5f		 pop	 edi
  00033	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  00037	8b c2		 mov	 eax, edx
  00039	5e		 pop	 esi

; 1612 : 		}

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?_Grow_to@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IBEII@Z ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXPAU_tagAcheronEventTime@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXPAU_tagAcheronEventTime@@0@Z PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXPAU_tagAcheronEventTime@@0@Z ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXABU_tagAcheronEventTime@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXABU_tagAcheronEventTime@@@Z PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 4c		 jae	 SHORT $LN2@push_back
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 46		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f8		 sub	 edi, eax
  00019	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001e	f7 ef		 imul	 edi
  00020	d1 fa		 sar	 edx, 1
  00022	8b fa		 mov	 edi, edx
  00024	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00027	03 fa		 add	 edi, edx

; 1278 : 			if (this->_Mylast() == this->_Myend())

  00029	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002c	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  0002e	6a 01		 push	 1
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?_Reserve@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	85 d2		 test	 edx, edx
  0003c	74 42		 je	 SHORT $LN205@push_back
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1281 : 			this->_Getal().construct(this->_Mylast(),

  0003e	8b 06		 mov	 eax, DWORD PTR [esi]
  00040	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  00043	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00044	f3 0f 7e 04 88	 movq	 xmm0, QWORD PTR [eax+ecx*4]
  00049	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  0004d	8b 44 88 08	 mov	 eax, DWORD PTR [eax+ecx*4+8]
  00051	89 42 08	 mov	 DWORD PTR [edx+8], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00054	83 46 04 0c	 add	 DWORD PTR [esi+4], 12	; 0000000cH
  00058	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
$LN2@push_back:

; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  0005d	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00060	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  00062	6a 01		 push	 1
  00064	8b ce		 mov	 ecx, esi
  00066	e8 00 00 00 00	 call	 ?_Reserve@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@IAEXI@Z ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0006b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006e	85 c9		 test	 ecx, ecx
  00070	74 0e		 je	 SHORT $LN205@push_back
  00072	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  00076	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0007a	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0007d	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00080	83 46 04 0c	 add	 DWORD PTR [esi+4], 12	; 0000000cH
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?push_back@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXABU_tagAcheronEventTime@@@Z ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?empty@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QBE_NXZ PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::empty, COMDAT
; _this$ = ecx

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	33 c0		 xor	 eax, eax
  00004	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00007	0f 94 c0	 sete	 al

; 1190 : 		}

  0000a	c3		 ret	 0
?empty@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QBE_NXZ ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QBEIXZ PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QBEIXZ ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QBEIXZ PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	d1 fa		 sar	 edx, 1
  0000e	8b c2		 mov	 eax, edx
  00010	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00013	03 c2		 add	 eax, edx

; 1180 : 		}

  00015	c3		 ret	 0
?size@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QBEIXZ ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@2@XZ PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::end, COMDAT
; _this$ = ecx

; 1066 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@2@XZ ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@2@XZ PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::begin, COMDAT
; _this$ = ecx

; 1056 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@@2@XZ ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QBEIXZ PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  0000b	f7 ea		 imul	 edx
  0000d	d1 fa		 sar	 edx, 1
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1048 : 		}

  00016	c3		 ret	 0
?_Unused_capacity@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QBEIXZ ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QBEIXZ PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	d1 fa		 sar	 edx, 1
  0000e	8b c2		 mov	 eax, edx
  00010	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00013	03 c2		 add	 eax, edx

; 1043 : 		}

  00015	c3		 ret	 0
?capacity@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QBEIXZ ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAE@XZ PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::~vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 32		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	d1 fa		 sar	 edx, 1
  00017	8b c2		 mov	 eax, edx
  00019	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001c	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@I@Z ; std::allocator<_tagAcheronEventTime>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00034	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0003b	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0003c	c3		 ret	 0
??1?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAE@XZ ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::~vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAE@XZ PROC ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAE@XZ ENDP ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >,std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >,std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >,std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >,std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >,std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >,std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >,std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >,std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> >::_Vector_val<std::_Simple_types<_tagAcheronEventTime> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<_tagAcheronEventTime> >::_Vector_val<std::_Simple_types<_tagAcheronEventTime> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEABQAU_tagAcheronEventTime@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEABQAU_tagAcheronEventTime@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEABQAU_tagAcheronEventTime@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAPAU_tagAcheronEventTime@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAPAU_tagAcheronEventTime@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAPAU_tagAcheronEventTime@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEABQAU_tagAcheronEventTime@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEABQAU_tagAcheronEventTime@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEABQAU_tagAcheronEventTime@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAPAU_tagAcheronEventTime@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAPAU_tagAcheronEventTime@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAPAU_tagAcheronEventTime@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEABQAU_tagAcheronEventTime@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEABQAU_tagAcheronEventTime@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEABQAU_tagAcheronEventTime@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAPAU_tagAcheronEventTime@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAPAU_tagAcheronEventTime@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAPAU_tagAcheronEventTime@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_tagAcheronEventTime@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAE@ABV?$allocator@U_tagAcheronEventTime@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAE@ABV?$allocator@U_tagAcheronEventTime@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@@std@@QAE@ABV?$allocator@U_tagAcheronEventTime@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >::_Vector_alloc<std::_Vec_base_types<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXPAU_tagAcheronEventTime@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXPAU_tagAcheronEventTime@@I@Z PROC ; std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 		}

  00003	5d		 pop	 ebp

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@I@Z ; std::allocator<_tagAcheronEventTime>::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXPAU_tagAcheronEventTime@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEPAU_tagAcheronEventTime@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEPAU_tagAcheronEventTime@@I@Z PROC ; std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@U_tagAcheronEventTime@@@std@@QAEPAU_tagAcheronEventTime@@I@Z ; std::allocator<_tagAcheronEventTime>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEPAU_tagAcheronEventTime@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAE@ABV?$allocator@U_tagAcheronEventTime@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAE@ABV?$allocator@U_tagAcheronEventTime@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAE@ABV?$allocator@U_tagAcheronEventTime@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >::_Wrap_alloc<std::allocator<_tagAcheronEventTime> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@SAIABV?$allocator@U_tagAcheronEventTime@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@SAIABV?$allocator@U_tagAcheronEventTime@@@2@@Z PROC ; std::allocator_traits<std::allocator<_tagAcheronEventTime> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@SAIABV?$allocator@U_tagAcheronEventTime@@@2@@Z ENDP ; std::allocator_traits<std::allocator<_tagAcheronEventTime> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U_tagAcheronEventTime@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U_tagAcheronEventTime@@@std@@QBEIXZ PROC ; std::allocator<_tagAcheronEventTime>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U_tagAcheronEventTime@@@std@@QBEIXZ ENDP ; std::allocator<_tagAcheronEventTime>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_tagAcheronEventTime@@@std@@QAEPAU_tagAcheronEventTime@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_tagAcheronEventTime@@@std@@QAEPAU_tagAcheronEventTime@@I@Z PROC ; std::allocator<_tagAcheronEventTime>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00013	77 3f		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00018	c1 e0 02	 shl	 eax, 2

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00020	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00022	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00025	3b c8		 cmp	 ecx, eax
  00027	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	8b c8		 mov	 ecx, eax
  00031	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00034	85 c9		 test	 ecx, ecx
  00036	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00038	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003b	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003e	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004b	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004e	85 c0		 test	 eax, eax
  00050	75 b8		 jne	 SHORT $LN12@allocate
  00052	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00054	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00059	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00068	cc		 int	 3
?allocate@?$allocator@U_tagAcheronEventTime@@@std@@QAEPAU_tagAcheronEventTime@@I@Z ENDP ; std::allocator<_tagAcheronEventTime>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@I@Z PROC ; std::allocator<_tagAcheronEventTime>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  0000e	77 34		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00013	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00016	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001b	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001d	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00020	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00022	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00025	3b c1		 cmp	 eax, ecx
  00027	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00029	2b c8		 sub	 ecx, eax
  0002b	83 f9 04	 cmp	 ecx, 4
  0002e	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00030	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00033	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00035	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4

; 639  : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00049	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00058	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005d	cc		 int	 3
?deallocate@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@I@Z ENDP ; std::allocator<_tagAcheronEventTime>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_tagAcheronEventTime@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U_tagAcheronEventTime@@@std@@QAE@ABV01@@Z PROC ; std::allocator<_tagAcheronEventTime>::allocator<_tagAcheronEventTime>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@U_tagAcheronEventTime@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<_tagAcheronEventTime>::allocator<_tagAcheronEventTime>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_tagAcheronEventTime@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U_tagAcheronEventTime@@@std@@QAE@XZ PROC	; std::allocator<_tagAcheronEventTime>::allocator<_tagAcheronEventTime>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U_tagAcheronEventTime@@@std@@QAE@XZ ENDP	; std::allocator<_tagAcheronEventTime>::allocator<_tagAcheronEventTime>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.h
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.h
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?SendMapServerGroupMsg@CAcheronGuardianEvent@@QAEXPAD@Z
_TEXT	SEGMENT
_lpszMsg$ = 8						; size = 4
?SendMapServerGroupMsg@CAcheronGuardianEvent@@QAEXPAD@Z PROC ; CAcheronGuardianEvent::SendMapServerGroupMsg, COMDAT
; _this$ = ecx

; 1000 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.h

; 55   : 		if ( this->m_lpThisMapSvrData != NULL )

  00003	a1 f8 6a 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+92920
  00008	85 c0		 test	 eax, eax
  0000a	74 14		 je	 SHORT $LN4@SendMapSer

; 56   : 		{
; 57   : 			return m_lpThisMapSvrData->m_btMAPSVR_GROUP;

  0000c	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 1001 : 	GS_GDReqMapSvrMsgMultiCast(g_MapServerManager.GetMapSvrGroup(), lpszMsg);

  00010	ff 75 08	 push	 DWORD PTR _lpszMsg$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?GS_GDReqMapSvrMsgMultiCast@@YAXHPAD@Z ; GS_GDReqMapSvrMsgMultiCast
  00019	83 c4 08	 add	 esp, 8

; 1002 : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN4@SendMapSer:

; 1001 : 	GS_GDReqMapSvrMsgMultiCast(g_MapServerManager.GetMapSvrGroup(), lpszMsg);

  00020	ff 75 08	 push	 DWORD PTR _lpszMsg$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.h

; 59   : 		return -1;

  00023	83 c8 ff	 or	 eax, -1
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 1001 : 	GS_GDReqMapSvrMsgMultiCast(g_MapServerManager.GetMapSvrGroup(), lpszMsg);

  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?GS_GDReqMapSvrMsgMultiCast@@YAXHPAD@Z ; GS_GDReqMapSvrMsgMultiCast
  0002c	83 c4 08	 add	 esp, 8

; 1002 : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?SendMapServerGroupMsg@CAcheronGuardianEvent@@QAEXPAD@Z ENDP ; CAcheronGuardianEvent::SendMapServerGroupMsg
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?ProbabilityLoadData@CAcheronGuardianEvent@@QAEXXZ
_TEXT	SEGMENT
?ProbabilityLoadData@CAcheronGuardianEvent@@QAEXXZ PROC	; CAcheronGuardianEvent::ProbabilityLoadData, COMDAT
; _this$ = ecx

; 996  : 	//load itembag
; 997  : }

  00000	c3		 ret	 0
?ProbabilityLoadData@CAcheronGuardianEvent@@QAEXXZ ENDP	; CAcheronGuardianEvent::ProbabilityLoadData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?DeleteArcaBattleAllMonster@CAcheronGuardianEvent@@QAEXXZ
_TEXT	SEGMENT
tv368 = -8						; size = 4
tv369 = -4						; size = 4
?DeleteArcaBattleAllMonster@CAcheronGuardianEvent@@QAEXXZ PROC ; CAcheronGuardianEvent::DeleteArcaBattleAllMonster, COMDAT
; _this$ = ecx

; 968  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 969  : 	for (int nGroupNumber = 0; nGroupNumber < AE_MAX_BATTLEPOS; nGroupNumber++)

  00007	8d 81 78 15 00
	00		 lea	 eax, DWORD PTR [ecx+5496]
  0000d	b9 05 00 00 00	 mov	 ecx, 5
  00012	56		 push	 esi
  00013	89 45 fc	 mov	 DWORD PTR tv369[ebp], eax
  00016	89 4d f8	 mov	 DWORD PTR tv368[ebp], ecx
  00019	57		 push	 edi
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL4@DeleteArca:

; 970  : 	{
; 971  : 		if (this->m_stMonsterGroupInfo[nGroupNumber].m_nGroupNumber >= 0)

  00020	83 78 e8 00	 cmp	 DWORD PTR [eax-24], 0
  00024	7c 3d		 jl	 SHORT $LN2@DeleteArca

; 972  : 		{
; 973  : 			/*if (nGroupNumber < 0 || nGroupNumber > AE_MAX_BATTLEPOS - 1)
; 974  : 			{
; 975  : 				return;
; 976  : 			}*/
; 977  : 			for (int i = 0; i < AE_MAX_MONGROUP; i++)

  00026	8b f0		 mov	 esi, eax
  00028	bb 32 00 00 00	 mov	 ebx, 50			; 00000032H
  0002d	0f 1f 00	 npad	 3
$LL7@DeleteArca:

; 978  : 			{
; 979  : 				if (this->m_stMonsterGroupInfo[nGroupNumber].m_stMonsterAccountNumInfo[i].m_nIndex > -1)

  00030	8b 3e		 mov	 edi, DWORD PTR [esi]
  00032	83 ff ff	 cmp	 edi, -1
  00035	7e 1b		 jle	 SHORT $LN5@DeleteArca

; 980  : 				{
; 981  : 					int nIndex = this->m_stMonsterGroupInfo[nGroupNumber].m_stMonsterAccountNumInfo[i].m_nIndex;
; 982  : 
; 983  : 					gObjDel(nIndex);

  00037	57		 push	 edi
  00038	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel

; 984  : 					LogAdd("[AcheronGuardianEvent][MonsterGroupRegen] Delete Monster - %d ", nIndex);

  0003d	57		 push	 edi
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@DHBBEGCA@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH

; 985  : 					this->m_stMonsterGroupInfo[nGroupNumber].m_stMonsterAccountNumInfo[i].m_nIndex = -1;

  0004c	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
$LN5@DeleteArca:

; 972  : 		{
; 973  : 			/*if (nGroupNumber < 0 || nGroupNumber > AE_MAX_BATTLEPOS - 1)
; 974  : 			{
; 975  : 				return;
; 976  : 			}*/
; 977  : 			for (int i = 0; i < AE_MAX_MONGROUP; i++)

  00052	83 c6 04	 add	 esi, 4
  00055	83 eb 01	 sub	 ebx, 1
  00058	75 d6		 jne	 SHORT $LL7@DeleteArca

; 986  : 				}
; 987  : 			}
; 988  : 
; 989  : 			this->m_stMonsterGroupInfo[nGroupNumber].m_dwNextRegenTime = 0;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR tv369[ebp]
  0005d	8b 4d f8	 mov	 ecx, DWORD PTR tv368[ebp]
  00060	89 58 fc	 mov	 DWORD PTR [eax-4], ebx
$LN2@DeleteArca:

; 969  : 	for (int nGroupNumber = 0; nGroupNumber < AE_MAX_BATTLEPOS; nGroupNumber++)

  00063	05 e0 00 00 00	 add	 eax, 224		; 000000e0H
  00068	83 e9 01	 sub	 ecx, 1
  0006b	89 45 fc	 mov	 DWORD PTR tv369[ebp], eax
  0006e	89 4d f8	 mov	 DWORD PTR tv368[ebp], ecx
  00071	75 ad		 jne	 SHORT $LL4@DeleteArca
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx

; 990  : 		}
; 991  : 	}
; 992  : }

  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
?DeleteArcaBattleAllMonster@CAcheronGuardianEvent@@QAEXXZ ENDP ; CAcheronGuardianEvent::DeleteArcaBattleAllMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?DeleteMonster@CAcheronGuardianEvent@@QAEXH@Z
_TEXT	SEGMENT
_nGroupNumber$ = 8					; size = 4
?DeleteMonster@CAcheronGuardianEvent@@QAEXH@Z PROC	; CAcheronGuardianEvent::DeleteMonster, COMDAT
; _this$ = ecx

; 945  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 946  : 	if (nGroupNumber < 0 || nGroupNumber > AE_MAX_BATTLEPOS - 1)

  00003	8b 45 08	 mov	 eax, DWORD PTR _nGroupNumber$[ebp]
  00006	83 f8 04	 cmp	 eax, 4
  00009	77 55		 ja	 SHORT $LN6@DeleteMons

; 947  : 	{
; 948  : 		return;
; 949  : 	}
; 950  : 
; 951  :     for (int i = 0; i < AE_MAX_MONGROUP; i++)

  0000b	53		 push	 ebx
  0000c	69 c0 e0 00 00
	00		 imul	 eax, eax, 224
  00012	bb 32 00 00 00	 mov	 ebx, 50			; 00000032H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d b9 78 15 00
	00		 lea	 edi, DWORD PTR [ecx+5496]
  0001f	03 f8		 add	 edi, eax
$LL4@DeleteMons:

; 952  :     {
; 953  : 		if (this->m_stMonsterGroupInfo[nGroupNumber].m_stMonsterAccountNumInfo[i].m_nIndex > -1)

  00021	8b 37		 mov	 esi, DWORD PTR [edi]
  00023	83 fe ff	 cmp	 esi, -1
  00026	7e 2d		 jle	 SHORT $LN2@DeleteMons

; 954  : 		{
; 955  : 			int nIndex = this->m_stMonsterGroupInfo[nGroupNumber].m_stMonsterAccountNumInfo[i].m_nIndex;
; 956  : 
; 957  : 			if (!gObj[nIndex].Live)

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002d	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  00033	80 7c 01 51 00	 cmp	 BYTE PTR [ecx+eax+81], 0
  00038	75 1b		 jne	 SHORT $LN2@DeleteMons

; 958  : 			{
; 959  : 				gObjDel(nIndex);

  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel

; 960  : 				LogAdd("[AcheronGuardianEvent][MonsterGroupRegen] Delete Monster - %d ", nIndex);

  00040	56		 push	 esi
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@DHBBEGCA@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 961  : 				this->m_stMonsterGroupInfo[nGroupNumber].m_stMonsterAccountNumInfo[i].m_nIndex = -1;

  0004f	c7 07 ff ff ff
	ff		 mov	 DWORD PTR [edi], -1
$LN2@DeleteMons:

; 947  : 	{
; 948  : 		return;
; 949  : 	}
; 950  : 
; 951  :     for (int i = 0; i < AE_MAX_MONGROUP; i++)

  00055	83 c7 04	 add	 edi, 4
  00058	83 eb 01	 sub	 ebx, 1
  0005b	75 c4		 jne	 SHORT $LL4@DeleteMons
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
$LN6@DeleteMons:

; 962  : 			}
; 963  : 		}
; 964  : 	}
; 965  : }

  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
?DeleteMonster@CAcheronGuardianEvent@@QAEXH@Z ENDP	; CAcheronGuardianEvent::DeleteMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?ResetGenTime@CAcheronGuardianEvent@@QAEXXZ
_TEXT	SEGMENT
?ResetGenTime@CAcheronGuardianEvent@@QAEXXZ PROC	; CAcheronGuardianEvent::ResetGenTime, COMDAT
; _this$ = ecx

; 929  : {

  00000	53		 push	 ebx

; 930  : 	for (int nGroupNumber = 0; nGroupNumber < AE_REWARD_MAX_ITEMCOUNT; nGroupNumber++)

  00001	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetTickCount@0
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	8d b1 70 15 00
	00		 lea	 esi, DWORD PTR [ecx+5488]
$LL4@ResetGenTi:

; 931  : 	{
; 932  : 		if (this->m_stMonsterGroupInfo[nGroupNumber].m_nGroupNumber >= 0)

  00011	83 7e f0 00	 cmp	 DWORD PTR [esi-16], 0
  00015	7c 12		 jl	 SHORT $LN2@ResetGenTi

; 933  : 		{
; 934  : 			if (nGroupNumber < 0 || nGroupNumber > AE_MAX_BATTLEPOS - 1)

  00017	83 ff 04	 cmp	 edi, 4
  0001a	77 19		 ja	 SHORT $LN10@ResetGenTi

; 935  : 			{
; 936  : 				return;
; 937  : 			}
; 938  : 			
; 939  : 			this->m_stMonsterGroupInfo[nGroupNumber].m_dwNextRegenTime = GetTickCount() + 60000 * this->m_stMonsterGroupInfo[nGroupNumber].m_nRegenTimeMin;

  0001c	ff d3		 call	 ebx
  0001e	69 0e 60 ea 00
	00		 imul	 ecx, DWORD PTR [esi], 60000
  00024	03 c1		 add	 eax, ecx
  00026	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN2@ResetGenTi:

; 930  : 	for (int nGroupNumber = 0; nGroupNumber < AE_REWARD_MAX_ITEMCOUNT; nGroupNumber++)

  00029	47		 inc	 edi
  0002a	81 c6 e0 00 00
	00		 add	 esi, 224		; 000000e0H
  00030	83 ff 05	 cmp	 edi, 5
  00033	7c dc		 jl	 SHORT $LL4@ResetGenTi
$LN10@ResetGenTi:
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx

; 940  : 		}
; 941  : 	}
; 942  : }

  00038	c3		 ret	 0
?ResetGenTime@CAcheronGuardianEvent@@QAEXXZ ENDP	; CAcheronGuardianEvent::ResetGenTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?GetBoxPosition@CAcheronGuardianEvent@@QAEHHHHHHAAE0@Z
_TEXT	SEGMENT
_h$ = -32						; size = 4
_w$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_mapnumber$ = 8						; size = 4
_ty$1$ = 12						; size = 4
_ax$ = 12						; size = 4
_ay$ = 16						; size = 4
_ty$ = 20						; size = 4
_aw$ = 20						; size = 4
_tx$ = 24						; size = 4
_ah$ = 24						; size = 4
_mx$ = 28						; size = 4
_my$ = 32						; size = 4
?GetBoxPosition@CAcheronGuardianEvent@@QAEHHHHHHAAE0@Z PROC ; CAcheronGuardianEvent::GetBoxPosition, COMDAT
; _this$ = ecx

; 892  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?GetBoxPosition@CAcheronGuardianEvent@@QAEHHHHHHAAE0@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 10	 sub	 esp, 16			; 00000010H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 893  : 	int count = 99 ; 
; 894  : 	int w;
; 895  : 	int h;
; 896  : 	int tx; 
; 897  : 	int ty;
; 898  : 	BYTE attr;
; 899  : 
; 900  : 	while (count-- != 0)
; 901  : 	{
; 902  : 		w = aw - ax;

  00033	8b 45 14	 mov	 eax, DWORD PTR _aw$[ebp]
  00036	2b 45 0c	 sub	 eax, DWORD PTR _ax$[ebp]
  00039	89 45 e4	 mov	 DWORD PTR _w$[ebp], eax

; 903  : 		h = ah - ay;

  0003c	8b 45 18	 mov	 eax, DWORD PTR _ah$[ebp]
  0003f	2b 45 10	 sub	 eax, DWORD PTR _ay$[ebp]
  00042	89 45 e0	 mov	 DWORD PTR _h$[ebp], eax

; 904  : 
; 905  : 		__try

  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 906  : 		{
; 907  : 			tx = ax + (rand() % w);

  0004c	e8 00 00 00 00	 call	 _rand
  00051	8b 4d e4	 mov	 ecx, DWORD PTR _w$[ebp]
  00054	99		 cdq
  00055	f7 f9		 idiv	 ecx
  00057	03 55 0c	 add	 edx, DWORD PTR _ax$[ebp]
  0005a	89 55 18	 mov	 DWORD PTR _tx$[ebp], edx

; 908  : 			ty = ay + (rand() % h);

  0005d	e8 00 00 00 00	 call	 _rand
  00062	8b 4d e0	 mov	 ecx, DWORD PTR _h$[ebp]
  00065	99		 cdq
  00066	f7 f9		 idiv	 ecx
  00068	8b c2		 mov	 eax, edx
  0006a	03 45 10	 add	 eax, DWORD PTR _ay$[ebp]
  0006d	89 45 0c	 mov	 DWORD PTR _ty$1$[ebp], eax
  00070	89 45 14	 mov	 DWORD PTR _ty$[ebp], eax

; 909  : 		}

  00073	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0007a	eb 24		 jmp	 SHORT $LN10@GetBoxPosi
$LN7@GetBoxPosi:
$LN12@GetBoxPosi:

; 910  : 		__except (w = 1, h = 1, 1)

  0007c	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _w$[ebp], 1
  00083	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _h$[ebp], 1
  0008a	b8 01 00 00 00	 mov	 eax, 1
$LN11@GetBoxPosi:
$LN9@GetBoxPosi:
  0008f	c3		 ret	 0
$LN8@GetBoxPosi:
  00090	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 909  : 		}

  00093	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0009a	8b 45 14	 mov	 eax, DWORD PTR _ty$[ebp]
  0009d	89 45 0c	 mov	 DWORD PTR _ty$1$[ebp], eax
$LN10@GetBoxPosi:

; 911  : 		{
; 912  : 
; 913  : 		}
; 914  : 
; 915  : 		attr = MapC[mapnumber].GetAttr(tx, ty);

  000a0	50		 push	 eax
  000a1	8b 5d 18	 mov	 ebx, DWORD PTR _tx$[ebp]
  000a4	53		 push	 ebx
  000a5	69 4d 08 28 38
	05 00		 imul	 ecx, DWORD PTR _mapnumber$[ebp], 342056
  000ac	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  000b2	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 916  : 
; 917  : 		//if (attr) 
; 918  : 		//{
; 919  : 			mx = tx;

  000b7	8b 45 1c	 mov	 eax, DWORD PTR _mx$[ebp]
  000ba	88 18		 mov	 BYTE PTR [eax], bl

; 920  : 			my = ty;

  000bc	8b 45 20	 mov	 eax, DWORD PTR _my$[ebp]
  000bf	8b 4d 0c	 mov	 ecx, DWORD PTR _ty$1$[ebp]
  000c2	88 08		 mov	 BYTE PTR [eax], cl

; 921  : 		//}
; 922  : 		return 1;

  000c4	b8 01 00 00 00	 mov	 eax, 1

; 923  : 	}
; 924  : 
; 925  : 	return 0;
; 926  : }

  000c9	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  000cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d3	59		 pop	 ecx
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 1c 00	 ret	 28			; 0000001cH
?GetBoxPosition@CAcheronGuardianEvent@@QAEHHHHHHAAE0@Z ENDP ; CAcheronGuardianEvent::GetBoxPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?SetPosMonster@CAcheronGuardianEvent@@QAEHHHHHHHE@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_nMapNumber$ = 12					; size = 4
_nBeginX$ = 16						; size = 4
_nBeginY$ = 20						; size = 4
_nEndX$ = 24						; size = 4
_nEndY$ = 28						; size = 4
_Element$ = 32						; size = 1
?SetPosMonster@CAcheronGuardianEvent@@QAEHHHHHHHE@Z PROC ; CAcheronGuardianEvent::SetPosMonster, COMDAT
; _this$ = ecx

; 859  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 860  : 	if (!OBJMAX_RANGE(aIndex))

  00003	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	0f 88 c4 00 00
	00		 js	 $LN7@SetPosMons
  0000e	33 c0		 xor	 eax, eax
  00010	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	0f 84 b1 00 00
	00		 je	 $LN7@SetPosMons

; 864  : 	}
; 865  : 
; 866  : 	LPOBJ lpObj = &gObj[aIndex];

  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	69 da 40 27 00
	00		 imul	 ebx, edx, 10048

; 867  : 
; 868  :     lpObj->m_PosNum = -1;

  00029	83 c8 ff	 or	 eax, -1
  0002c	57		 push	 edi
  0002d	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 869  :     lpObj->MapNumber = nMapNumber;
; 870  : 
; 871  :     this->GetBoxPosition(nMapNumber, nBeginX, nBeginY, nEndX, nEndY, lpObj->X, lpObj->Y);

  00033	8d bb 21 01 00
	00		 lea	 edi, DWORD PTR [ebx+289]
  00039	66 89 83 98 05
	00 00		 mov	 WORD PTR [ebx+1432], ax
  00040	8b 45 0c	 mov	 eax, DWORD PTR _nMapNumber$[ebp]
  00043	8d b3 20 01 00
	00		 lea	 esi, DWORD PTR [ebx+288]
  00049	57		 push	 edi
  0004a	56		 push	 esi
  0004b	ff 75 1c	 push	 DWORD PTR _nEndY$[ebp]
  0004e	88 83 23 01 00
	00		 mov	 BYTE PTR [ebx+291], al
  00054	ff 75 18	 push	 DWORD PTR _nEndX$[ebp]
  00057	ff 75 14	 push	 DWORD PTR _nBeginY$[ebp]
  0005a	ff 75 10	 push	 DWORD PTR _nBeginX$[ebp]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ?GetBoxPosition@CAcheronGuardianEvent@@QAEHHHHHHAAE0@Z ; CAcheronGuardianEvent::GetBoxPosition

; 872  : 
; 873  :     lpObj->TX = lpObj->X;

  00063	8a 0e		 mov	 cl, BYTE PTR [esi]

; 874  :     lpObj->TY = lpObj->Y;

  00065	8a 07		 mov	 al, BYTE PTR [edi]
  00067	88 8b 52 01 00
	00		 mov	 BYTE PTR [ebx+338], cl
  0006d	88 83 53 01 00
	00		 mov	 BYTE PTR [ebx+339], al

; 875  :     lpObj->m_OldX = lpObj->X;

  00073	88 8b 50 01 00
	00		 mov	 BYTE PTR [ebx+336], cl

; 876  :     lpObj->m_OldY = lpObj->Y;

  00079	88 83 51 01 00
	00		 mov	 BYTE PTR [ebx+337], al

; 877  :     lpObj->Dir = rand() % 8;

  0007f	e8 00 00 00 00	 call	 _rand
  00084	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00089	79 05		 jns	 SHORT $LN8@SetPosMons
  0008b	48		 dec	 eax
  0008c	83 c8 f8	 or	 eax, -8			; fffffff8H
  0008f	40		 inc	 eax
$LN8@SetPosMons:
  00090	88 83 22 01 00
	00		 mov	 BYTE PTR [ebx+290], al

; 878  :     lpObj->StartX = lpObj->X;

  00096	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00099	88 83 4e 01 00
	00		 mov	 BYTE PTR [ebx+334], al

; 879  :     lpObj->StartY = lpObj->Y;

  0009f	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  000a2	88 83 4f 01 00
	00		 mov	 BYTE PTR [ebx+335], al

; 880  :     lpObj->DieRegen = 0;
; 881  :     lpObj->MaxRegenTime = 0;
; 882  : 
; 883  : 	if (Element != (BYTE)-1)

  000a8	8a 45 20	 mov	 al, BYTE PTR _Element$[ebp]
  000ab	c6 83 8a 05 00
	00 00		 mov	 BYTE PTR [ebx+1418], 0
  000b2	c7 83 94 05 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+1428], 0
  000bc	3c ff		 cmp	 al, 255			; 000000ffH
  000be	74 06		 je	 SHORT $LN3@SetPosMons

; 884  : 	{
; 885  : 		lpObj->m_btAttribute = Element;

  000c0	88 83 e4 26 00
	00		 mov	 BYTE PTR [ebx+9956], al
$LN3@SetPosMons:
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi

; 886  : 	}
; 887  : 
; 888  : 	return 1;

  000c8	b8 01 00 00 00	 mov	 eax, 1
  000cd	5b		 pop	 ebx

; 889  : }

  000ce	5d		 pop	 ebp
  000cf	c2 1c 00	 ret	 28			; 0000001cH
$LN7@SetPosMons:

; 861  : 	{
; 862  : 		LogAdd("[AcheronGuardianEvent] error : %s %d", __FILE__, __LINE__);

  000d2	68 5e 03 00 00	 push	 862			; 0000035eH
  000d7	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@PPMLAOAN@AcheronEvent?4cpp?$AA@
  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@NDHANOPF@?$FLAcheronGuardianEvent?$FN?5error?5?3?5?$CF@
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000e7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 863  : 		return 0;

  000ea	33 c0		 xor	 eax, eax

; 889  : }

  000ec	5d		 pop	 ebp
  000ed	c2 1c 00	 ret	 28			; 0000001cH
?SetPosMonster@CAcheronGuardianEvent@@QAEHHHHHHHE@Z ENDP ; CAcheronGuardianEvent::SetPosMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?RegenMonster@CAcheronGuardianEvent@@QAEXHHH@Z
_TEXT	SEGMENT
tv500 = -52						; size = 4
_nMonsterCount$2$ = -48					; size = 4
_nBeginX$1$ = -44					; size = 4
_nBeginY$1$ = -40					; size = 4
_nEndX$1$ = -36						; size = 4
_nEndY$1$ = -32						; size = 4
_n$1$ = -28						; size = 4
_Element$1 = -24					; size = 1
tv498 = -20						; size = 4
tv497 = -16						; size = 4
_nMapNumber$1$ = -12					; size = 4
_nMonsterKindCnt$1$ = -8				; size = 4
_nMonsterArrayIndex$1$ = -4				; size = 4
_nGroupNumber$ = 8					; size = 4
_iGenSeq$ = 12						; size = 4
_nMonsterIndex$1$ = 16					; size = 4
_iGenMonCnt$ = 16					; size = 4
?RegenMonster@CAcheronGuardianEvent@@QAEXHHH@Z PROC	; CAcheronGuardianEvent::RegenMonster, COMDAT
; _this$ = ecx

; 780  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 781  : 	if (nGroupNumber < 0 || nGroupNumber > AE_MAX_MONGROUP - 1)

  00008	8b 75 08	 mov	 esi, DWORD PTR _nGroupNumber$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	83 fe 31	 cmp	 esi, 49			; 00000031H
  00010	0f 87 0e 02 00
	00		 ja	 $LN9@RegenMonst

; 782  : 	{
; 783  : 		//LogAddTD(89EBB1);
; 784  : 		return;
; 785  : 	}
; 786  : 
; 787  : 	int nMapNumber = this->m_stMonsterGroupInfo[nGroupNumber].m_nMapNumber;

  00016	69 ce e0 00 00
	00		 imul	 ecx, esi, 224
  0001c	03 cb		 add	 ecx, ebx

; 788  :     int nMonsterArrayIndex = this->m_stMonsterGroupInfo[nGroupNumber].m_nGenTotCnt;
; 789  :     int nMonsterCount = this->m_stMonsterGroupInfo[nGroupNumber].m_nCnt;
; 790  :     int nMonsterKindCnt = this->m_stMonsterPosition[nGroupNumber].m_nMonsterKindCnt;

  0001e	69 d6 1c 04 00
	00		 imul	 edx, esi, 1052
  00024	57		 push	 edi
  00025	89 4d cc	 mov	 DWORD PTR tv500[ebp], ecx

; 791  : 
; 792  :     if (iGenMonCnt)
; 793  : 	{
; 794  : 		nMonsterCount = iGenMonCnt;
; 795  : 	}
; 796  : 
; 797  : 	for (int n = 0; n < nMonsterCount; n++)

  00028	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _n$1$[ebp], 0
  0002f	8b 81 64 15 00
	00		 mov	 eax, DWORD PTR [ecx+5476]
  00035	8b b9 6c 15 00
	00		 mov	 edi, DWORD PTR [ecx+5484]
  0003b	8b 89 68 15 00
	00		 mov	 ecx, DWORD PTR [ecx+5480]
  00041	89 45 f4	 mov	 DWORD PTR _nMapNumber$1$[ebp], eax
  00044	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]
  00047	89 7d fc	 mov	 DWORD PTR _nMonsterArrayIndex$1$[ebp], edi
  0004a	89 45 f0	 mov	 DWORD PTR tv497[ebp], eax
  0004d	8b 80 dc 00 00
	00		 mov	 eax, DWORD PTR [eax+220]
  00053	89 45 f8	 mov	 DWORD PTR _nMonsterKindCnt$1$[ebp], eax
  00056	8b 45 10	 mov	 eax, DWORD PTR _iGenMonCnt$[ebp]
  00059	85 c0		 test	 eax, eax
  0005b	89 55 ec	 mov	 DWORD PTR tv498[ebp], edx
  0005e	0f 45 c8	 cmovne	 ecx, eax
  00061	89 4d d0	 mov	 DWORD PTR _nMonsterCount$2$[ebp], ecx
  00064	85 c9		 test	 ecx, ecx
  00066	0f 8e 9e 01 00
	00		 jle	 $LN20@RegenMonst
  0006c	0f 1f 40 00	 npad	 4
$LL4@RegenMonst:

; 798  :     {
; 799  : 		int nRegenArea = rand() % this->m_stMonsterPosition[nGroupNumber].m_nRegenAreaCnt;

  00070	e8 00 00 00 00	 call	 _rand
  00075	8b 4d f0	 mov	 ecx, DWORD PTR tv497[ebp]
  00078	99		 cdq

; 800  : 		int nBeginX = this->m_stMonsterPosition[nGroupNumber].m_stRegenArea[nRegenArea].m_nBeginX;
; 801  : 		int nBeginY = this->m_stMonsterPosition[nGroupNumber].m_stRegenArea[nRegenArea].m_nBeginY;
; 802  : 		int nEndX = this->m_stMonsterPosition[nGroupNumber].m_stRegenArea[nRegenArea].m_nEndX;
; 803  : 		int nEndY = this->m_stMonsterPosition[nGroupNumber].m_stRegenArea[nRegenArea].m_nEndY;
; 804  : 		BYTE Element = (BYTE)-1;

  00079	c6 45 e8 ff	 mov	 BYTE PTR _Element$1[ebp], 255 ; 000000ffH
  0007d	f7 b9 d8 00 00
	00		 idiv	 DWORD PTR [ecx+216]
  00083	8d 42 0e	 lea	 eax, DWORD PTR [edx+14]
  00086	c1 e2 04	 shl	 edx, 4
  00089	03 55 ec	 add	 edx, DWORD PTR tv498[ebp]
  0008c	c1 e0 04	 shl	 eax, 4
  0008f	03 45 ec	 add	 eax, DWORD PTR tv498[ebp]
  00092	8b 04 18	 mov	 eax, DWORD PTR [eax+ebx]
  00095	89 45 d4	 mov	 DWORD PTR _nBeginX$1$[ebp], eax
  00098	8b 84 1a e4 00
	00 00		 mov	 eax, DWORD PTR [edx+ebx+228]
  0009f	89 45 d8	 mov	 DWORD PTR _nBeginY$1$[ebp], eax
  000a2	8b 84 1a e8 00
	00 00		 mov	 eax, DWORD PTR [edx+ebx+232]
  000a9	89 45 dc	 mov	 DWORD PTR _nEndX$1$[ebp], eax
  000ac	8b 84 1a ec 00
	00 00		 mov	 eax, DWORD PTR [edx+ebx+236]
  000b3	89 45 e0	 mov	 DWORD PTR _nEndY$1$[ebp], eax

; 805  : 
; 806  : 		if (nMapNumber == -1)

  000b6	8b 45 f4	 mov	 eax, DWORD PTR _nMapNumber$1$[ebp]
  000b9	83 f8 ff	 cmp	 eax, -1
  000bc	0f 84 45 01 00
	00		 je	 $LN28@RegenMonst

; 807  : 		{
; 808  : 			break;
; 809  : 		}
; 810  :         
; 811  : 		int nResult = gObjAddMonster(nMapNumber);

  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster

; 812  : 		int nMonsterIndex = 0;

  000c8	33 c9		 xor	 ecx, ecx
  000ca	0f bf f8	 movsx	 edi, ax
  000cd	83 c4 04	 add	 esp, 4
  000d0	89 4d 10	 mov	 DWORD PTR _nMonsterIndex$1$[ebp], ecx

; 813  : 
; 814  : 		for (int i = 0; i < nMonsterKindCnt; i++)

  000d3	33 f6		 xor	 esi, esi
  000d5	39 4d f8	 cmp	 DWORD PTR _nMonsterKindCnt$1$[ebp], ecx
  000d8	7e 38		 jle	 SHORT $LN27@RegenMonst

; 807  : 		{
; 808  : 			break;
; 809  : 		}
; 810  :         
; 811  : 		int nResult = gObjAddMonster(nMapNumber);

  000da	8b 45 f0	 mov	 eax, DWORD PTR tv497[ebp]
  000dd	8b 4d f8	 mov	 ecx, DWORD PTR _nMonsterKindCnt$1$[ebp]
  000e0	05 08 04 00 00	 add	 eax, 1032		; 00000408H
  000e5	8b 55 0c	 mov	 edx, DWORD PTR _iGenSeq$[ebp]
$LL7@RegenMonst:

; 815  : 		{
; 816  : 			if (this->m_stMonsterPosition[nGroupNumber].m_stMonsterIndexInfo[i].m_nGenSqe == iGenSeq
; 817  : 				&& this->m_stMonsterPosition[nGroupNumber].m_stMonsterIndexInfo[i].m_nMonAttr == this->m_stObeliskInfo[this->m_iGroupNum].m_iAttrKind)

  000e8	39 50 fc	 cmp	 DWORD PTR [eax-4], edx
  000eb	75 1a		 jne	 SHORT $LN5@RegenMonst
  000ed	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000f0	8d 14 cd 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*8]
  000f7	2b d1		 sub	 edx, ecx
  000f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fb	3b 4c 93 4c	 cmp	 ecx, DWORD PTR [ebx+edx*4+76]
  000ff	74 43		 je	 SHORT $LN19@RegenMonst
  00101	8b 4d f8	 mov	 ecx, DWORD PTR _nMonsterKindCnt$1$[ebp]
  00104	8b 55 0c	 mov	 edx, DWORD PTR _iGenSeq$[ebp]
$LN5@RegenMonst:

; 813  : 
; 814  : 		for (int i = 0; i < nMonsterKindCnt; i++)

  00107	46		 inc	 esi
  00108	83 c0 0c	 add	 eax, 12			; 0000000cH
  0010b	3b f1		 cmp	 esi, ecx
  0010d	7c d9		 jl	 SHORT $LL7@RegenMonst
  0010f	8b 4d 10	 mov	 ecx, DWORD PTR _nMonsterIndex$1$[ebp]
$LN27@RegenMonst:

; 821  : 				break;
; 822  : 			}
; 823  : 		}
; 824  : 
; 825  : 		this->m_stMonsterGroupInfo[nGroupNumber].m_stMonsterAccountNumInfo[nMonsterArrayIndex].m_nIndex = nResult;

  00112	8b 75 08	 mov	 esi, DWORD PTR _nGroupNumber$[ebp]
  00115	8b 55 fc	 mov	 edx, DWORD PTR _nMonsterArrayIndex$1$[ebp]
  00118	8d 04 f5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*8]
  0011f	2b c6		 sub	 eax, esi
  00121	8d 04 c2	 lea	 eax, DWORD PTR [edx+eax*8]
  00124	89 bc 83 78 15
	00 00		 mov	 DWORD PTR [ebx+eax*4+5496], edi

; 826  : 
; 827  : 		if (nResult < 0)

  0012b	85 ff		 test	 edi, edi
  0012d	79 39		 jns	 SHORT $LN13@RegenMonst

; 828  : 		{
; 829  : 			LogAddTD("[AcheronGuardianEvent][MonsterGroupRegen] AddMonster fail!! [GROUP]:%d, [INDEX]:%d",

  0012f	51		 push	 ecx
  00130	56		 push	 esi
  00131	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@NOBALOOH@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@
  00136	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0013c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 830  : 				nGroupNumber, nMonsterIndex);
; 831  : 			continue;

  0013f	e9 b3 00 00 00	 jmp	 $LN2@RegenMonst
$LN19@RegenMonst:

; 818  : 			{
; 819  : 				nMonsterIndex = this->m_stMonsterPosition[nGroupNumber].m_stMonsterIndexInfo[i].m_nMonsterIndex;

  00144	8b 55 ec	 mov	 edx, DWORD PTR tv498[ebp]
  00147	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0014a	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  0014d	8b 8c 18 00 04
	00 00		 mov	 ecx, DWORD PTR [eax+ebx+1024]

; 820  : 				Element = this->m_stMonsterPosition[nGroupNumber].m_stMonsterIndexInfo[i].m_nMonAttr;

  00154	8d 46 56	 lea	 eax, DWORD PTR [esi+86]
  00157	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0015a	89 4d 10	 mov	 DWORD PTR _nMonsterIndex$1$[ebp], ecx
  0015d	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  00160	8a 04 18	 mov	 al, BYTE PTR [eax+ebx]
  00163	88 45 e8	 mov	 BYTE PTR _Element$1[ebp], al
  00166	eb aa		 jmp	 SHORT $LN27@RegenMonst
$LN13@RegenMonst:

; 832  : 		}
; 833  : 
; 834  : 		if (!this->SetPosMonster(nResult, nMapNumber, nBeginX, nBeginY, nEndX, nEndY, Element))

  00168	ff 75 e8	 push	 DWORD PTR _Element$1[ebp]
  0016b	8b cb		 mov	 ecx, ebx
  0016d	ff 75 e0	 push	 DWORD PTR _nEndY$1$[ebp]
  00170	ff 75 dc	 push	 DWORD PTR _nEndX$1$[ebp]
  00173	ff 75 d8	 push	 DWORD PTR _nBeginY$1$[ebp]
  00176	ff 75 d4	 push	 DWORD PTR _nBeginX$1$[ebp]
  00179	ff 75 f4	 push	 DWORD PTR _nMapNumber$1$[ebp]
  0017c	57		 push	 edi
  0017d	e8 00 00 00 00	 call	 ?SetPosMonster@CAcheronGuardianEvent@@QAEHHHHHHHE@Z ; CAcheronGuardianEvent::SetPosMonster
  00182	85 c0		 test	 eax, eax
  00184	75 20		 jne	 SHORT $LN14@RegenMonst

; 835  : 		{
; 836  : 			gObjDel(nResult);

  00186	57		 push	 edi
  00187	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel

; 837  : 			LogAdd("[AcheronGuardianEvent] error : %s %d", __FILE__, __LINE__);

  0018c	68 45 03 00 00	 push	 837			; 00000345H
$LN30@RegenMonst:
  00191	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@PPMLAOAN@AcheronEvent?4cpp?$AA@
  00196	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@NDHANOPF@?$FLAcheronGuardianEvent?$FN?5error?5?3?5?$CF@
  0019b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  001a1	83 c4 10	 add	 esp, 16			; 00000010H

; 838  : 			continue;

  001a4	eb 51		 jmp	 SHORT $LN2@RegenMonst
$LN14@RegenMonst:

; 839  : 		}
; 840  : 	
; 841  : 		if (!gObjSetMonster(nResult, nMonsterIndex))

  001a6	ff 75 10	 push	 DWORD PTR _nMonsterIndex$1$[ebp]
  001a9	57		 push	 edi
  001aa	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  001af	83 c4 08	 add	 esp, 8
  001b2	85 c0		 test	 eax, eax
  001b4	75 0d		 jne	 SHORT $LN15@RegenMonst

; 842  : 		{
; 843  : 			gObjDel(nResult);

  001b6	57		 push	 edi
  001b7	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel

; 844  :             LogAdd("[AcheronGuardianEvent] error : %s %d", __FILE__, __LINE__);

  001bc	68 4c 03 00 00	 push	 844			; 0000034cH

; 845  : 			continue;

  001c1	eb ce		 jmp	 SHORT $LN30@RegenMonst
$LN15@RegenMonst:

; 846  : 		}
; 847  : 
; 848  : 		nMonsterArrayIndex++;

  001c3	ff 45 fc	 inc	 DWORD PTR _nMonsterArrayIndex$1$[ebp]

; 849  :         LogAddTD("[AcheronGuardianEvent][MonsterGroupRegen] Group: %d, MonsterIndex: %d, MapNumber: %d, X: %d, Y: %d ",

  001c6	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048
  001cc	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001d2	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  001d9	50		 push	 eax
  001da	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  001e1	50		 push	 eax
  001e2	ff 75 f4	 push	 DWORD PTR _nMapNumber$1$[ebp]
  001e5	ff 75 10	 push	 DWORD PTR _nMonsterIndex$1$[ebp]
  001e8	56		 push	 esi
  001e9	68 00 00 00 00	 push	 OFFSET ??_C@_0GE@GMNMPJMN@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@
  001ee	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001f4	83 c4 18	 add	 esp, 24			; 00000018H
$LN2@RegenMonst:

; 791  : 
; 792  :     if (iGenMonCnt)
; 793  : 	{
; 794  : 		nMonsterCount = iGenMonCnt;
; 795  : 	}
; 796  : 
; 797  : 	for (int n = 0; n < nMonsterCount; n++)

  001f7	8b 7d e4	 mov	 edi, DWORD PTR _n$1$[ebp]
  001fa	47		 inc	 edi
  001fb	89 7d e4	 mov	 DWORD PTR _n$1$[ebp], edi
  001fe	3b 7d d0	 cmp	 edi, DWORD PTR _nMonsterCount$2$[ebp]
  00201	0f 8c 69 fe ff
	ff		 jl	 $LL4@RegenMonst
$LN28@RegenMonst:
  00207	8b 7d fc	 mov	 edi, DWORD PTR _nMonsterArrayIndex$1$[ebp]
$LN20@RegenMonst:

; 850  : 			nGroupNumber, nMonsterIndex, nMapNumber, gObj[nResult].X, gObj[nResult].Y);
; 851  : 	}
; 852  : 
; 853  : 	this->m_stMonsterGroupInfo[nGroupNumber].m_nGenTotCnt = nMonsterArrayIndex;

  0020a	8b 45 cc	 mov	 eax, DWORD PTR tv500[ebp]

; 854  :     LogAddTD("[AcheronGuardianEvent][MonsterGroupRegen] Group: %d, MonsterTotCnt: %d ",

  0020d	57		 push	 edi
  0020e	56		 push	 esi
  0020f	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@HBLOCBKG@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@
  00214	89 b8 6c 15 00
	00		 mov	 DWORD PTR [eax+5484], edi
  0021a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00220	83 c4 0c	 add	 esp, 12			; 0000000cH
  00223	5f		 pop	 edi
$LN9@RegenMonst:
  00224	5e		 pop	 esi
  00225	5b		 pop	 ebx

; 855  : 		nGroupNumber, this->m_stMonsterGroupInfo[nGroupNumber].m_nGenTotCnt);
; 856  : }

  00226	8b e5		 mov	 esp, ebp
  00228	5d		 pop	 ebp
  00229	c2 0c 00	 ret	 12			; 0000000cH
?RegenMonster@CAcheronGuardianEvent@@QAEXHHH@Z ENDP	; CAcheronGuardianEvent::RegenMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?RegenMonsterRun@CAcheronGuardianEvent@@QAEXXZ
_TEXT	SEGMENT
?RegenMonsterRun@CAcheronGuardianEvent@@QAEXXZ PROC	; CAcheronGuardianEvent::RegenMonsterRun, COMDAT
; _this$ = ecx

; 765  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 766  : 	DWORD dwTick = GetTickCount();

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 767  : 
; 768  : 	if (this->m_stMonsterGroupInfo[this->m_iGroupNum].m_nGroupNumber > -1)

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	69 d1 e0 00 00
	00		 imul	 edx, ecx, 224
  00012	83 bc 32 60 15
	00 00 ff	 cmp	 DWORD PTR [edx+esi+5472], -1
  0001a	7e 40		 jle	 SHORT $LN3@RegenMonst

; 769  : 	{
; 770  : 		if (dwTick >= this->m_stMonsterGroupInfo[this->m_iGroupNum].m_dwNextRegenTime)

  0001c	3b 84 32 74 15
	00 00		 cmp	 eax, DWORD PTR [edx+esi+5492]
  00023	72 37		 jb	 SHORT $LN3@RegenMonst

; 771  : 		{
; 772  : 			this->DeleteMonster(this->m_iGroupNum);

  00025	51		 push	 ecx
  00026	8b ce		 mov	 ecx, esi
  00028	e8 00 00 00 00	 call	 ?DeleteMonster@CAcheronGuardianEvent@@QAEXH@Z ; CAcheronGuardianEvent::DeleteMonster

; 773  : 			this->RegenMonster(this->m_iGroupNum, 2, 0);

  0002d	6a 00		 push	 0
  0002f	6a 02		 push	 2
  00031	ff 76 08	 push	 DWORD PTR [esi+8]
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?RegenMonster@CAcheronGuardianEvent@@QAEXHHH@Z ; CAcheronGuardianEvent::RegenMonster

; 774  : 			this->m_stMonsterGroupInfo[this->m_iGroupNum].m_dwNextRegenTime = GetTickCount() + 60000 * this->m_stMonsterGroupInfo[this->m_iGroupNum].m_nRegenTimeMin;

  0003b	69 46 08 e0 00
	00 00		 imul	 eax, DWORD PTR [esi+8], 224
  00042	03 f0		 add	 esi, eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0004a	69 8e 70 15 00
	00 60 ea 00 00	 imul	 ecx, DWORD PTR [esi+5488], 60000
  00054	03 c1		 add	 eax, ecx
  00056	89 86 74 15 00
	00		 mov	 DWORD PTR [esi+5492], eax
$LN3@RegenMonst:
  0005c	5e		 pop	 esi

; 775  : 		}
; 776  : 	}
; 777  : }

  0005d	c3		 ret	 0
?RegenMonsterRun@CAcheronGuardianEvent@@QAEXXZ ENDP	; CAcheronGuardianEvent::RegenMonsterRun
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?DestoryObelisk@CAcheronGuardianEvent@@QAEXPAUOBJECTSTRUCT@@EEEH@Z
_TEXT	SEGMENT
tv174 = -524						; size = 4
_this$GSCopy$1$ = -520					; size = 4
_szTemp$ = -516						; size = 256
_szTempMsg$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
_nMaxHitUser$ = 24					; size = 4
?DestoryObelisk@CAcheronGuardianEvent@@QAEXPAUOBJECTSTRUCT@@EEEH@Z PROC ; CAcheronGuardianEvent::DestoryObelisk, COMDAT
; _this$ = ecx

; 733  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b d9		 mov	 ebx, ecx
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0001b	89 9d f8 fd ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx

; 734  : 	int iItemCnt = this->GetDropItemCnt();

  00021	e8 00 00 00 00	 call	 ?GetDropItemCnt@CAcheronGuardianEvent@@QAEHXZ ; CAcheronGuardianEvent::GetDropItemCnt
  00026	8b f0		 mov	 esi, eax

; 735  : 
; 736  : 	if (iItemCnt <= 0 || iItemCnt > AE_REWARD_MAX_ITEMCOUNT)

  00028	85 f6		 test	 esi, esi
  0002a	7e 05		 jle	 SHORT $LN6@DestoryObe
  0002c	83 fe 05	 cmp	 esi, 5
  0002f	7e 1c		 jle	 SHORT $LN5@DestoryObe
$LN6@DestoryObe:

; 737  : 	{
; 738  : 		LogAddTD("[AcheronGuardianEvent][Error] Rand Drop Item Over - [%s][%s] ItemCnt[%d]",

  00031	56		 push	 esi
  00032	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  00035	50		 push	 eax
  00036	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  00039	50		 push	 eax
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@NOMDIPAC@?$FLAcheronGuardianEvent?$FN?$FLError?$FN?5Ra@
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00045	83 c4 10	 add	 esp, 16			; 00000010H

; 739  : 			lpObj->AccountID, lpObj->Name, iItemCnt);
; 740  : 		iItemCnt = 1;

  00048	be 01 00 00 00	 mov	 esi, 1
$LN5@DestoryObe:

; 741  : 	}
; 742  : 
; 743  : 	LogAddTD("[AcheronGuardianEvent] Destoryed an Obelisk. [%s][%s] Item Drop Cnt [%d]",

  0004d	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  00050	56		 push	 esi
  00051	50		 push	 eax
  00052	89 85 f4 fd ff
	ff		 mov	 DWORD PTR tv174[ebp], eax
  00058	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  0005b	50		 push	 eax
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@NHGLBLLG@?$FLAcheronGuardianEvent?$FN?5Destoryed@
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00067	83 c4 10	 add	 esp, 16			; 00000010H

; 744  : 		lpObj->AccountID, lpObj->Name, iItemCnt);
; 745  : 	//LogAddEvent("AcheronGuardianEvent:Destoryed an Obelisk", lpObj, ":ItemCnt[%d]", iItemCnt);
; 746  : 
; 747  : 	for (int i = 0; i < iItemCnt; i++)

  0006a	85 f6		 test	 esi, esi
  0006c	7e 26		 jle	 SHORT $LN3@DestoryObe

; 741  : 	}
; 742  : 
; 743  : 	LogAddTD("[AcheronGuardianEvent] Destoryed an Obelisk. [%s][%s] Item Drop Cnt [%d]",

  0006e	0f b6 7d 0c	 movzx	 edi, BYTE PTR _btMapNumber$[ebp]
  00072	8b 5d 18	 mov	 ebx, DWORD PTR _nMaxHitUser$[ebp]
$LL4@DestoryObe:

; 748  : 	{
; 749  : 		g_EventItemBagManager.OpenSpecial(EventBagSpecial::Acheron, nMaxHitUser, btMapNumber, cX, cY);

  00075	ff 75 14	 push	 DWORD PTR _cY$[ebp]
  00078	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_EventItemBagManager@@3VEventItemBagManager@@A ; g_EventItemBagManager
  0007d	ff 75 10	 push	 DWORD PTR _cX$[ebp]
  00080	57		 push	 edi
  00081	53		 push	 ebx
  00082	6a 1d		 push	 29			; 0000001dH
  00084	e8 00 00 00 00	 call	 ?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z ; EventItemBagManager::OpenSpecial
  00089	83 ee 01	 sub	 esi, 1
  0008c	75 e7		 jne	 SHORT $LL4@DestoryObe
  0008e	8b 9d f8 fd ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
$LN3@DestoryObe:

; 750  : 		//this->m_pAcheronEventRewardItem->DropEventItemEx()
; 751  : 	}
; 752  : 	
; 753  : 	char szTempMsg[256];
; 754  : 	sprintf(szTempMsg, lMsg.Get(MSGGET(13, 204)), lpObj->Name);

  00094	ff b5 f4 fd ff
	ff		 push	 DWORD PTR tv174[ebp]
  0009a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0009f	68 cc 0d 00 00	 push	 3532			; 00000dccH
  000a4	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000a9	50		 push	 eax
  000aa	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTempMsg$[ebp]
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 _sprintf
  000b6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 755  : 	this->SendMapServerGroupMsg(szTempMsg);

  000b9	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTempMsg$[ebp]
  000bf	8b cb		 mov	 ecx, ebx
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CAcheronGuardianEvent@@QAEXPAD@Z ; CAcheronGuardianEvent::SendMapServerGroupMsg

; 756  : 	
; 757  : 	char szTemp[256];
; 758  : 	sprintf(szTemp, lMsg.Get(MSGGET(13, 184)));

  000c7	68 b8 0d 00 00	 push	 3512			; 00000db8H
  000cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000d1	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000d6	50		 push	 eax
  000d7	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 _sprintf
  000e3	83 c4 08	 add	 esp, 8

; 759  : 	this->SendMapServerGroupMsg(szTemp);

  000e6	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  000ec	8b cb		 mov	 ecx, ebx
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CAcheronGuardianEvent@@QAEXPAD@Z ; CAcheronGuardianEvent::SendMapServerGroupMsg

; 762  : }

  000f4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h

; 212  :     void SetProcState(int iState) { this->m_iState = iState; };

  000f9	c7 43 04 06 00
	00 00		 mov	 DWORD PTR [ebx+4], 6
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 762  : }

  00100	33 cd		 xor	 ecx, ebp
  00102	5b		 pop	 ebx
  00103	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 14 00	 ret	 20			; 00000014H
?DestoryObelisk@CAcheronGuardianEvent@@QAEXPAUOBJECTSTRUCT@@EEEH@Z ENDP ; CAcheronGuardianEvent::DestoryObelisk
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?DelObelisk@CAcheronGuardianEvent@@QAEXXZ
_TEXT	SEGMENT
?DelObelisk@CAcheronGuardianEvent@@QAEXXZ PROC		; CAcheronGuardianEvent::DelObelisk, COMDAT
; _this$ = ecx

; 718  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 719  : 	for (int iCnt = 0; iCnt < AE_MAX_BATTLEPOS; iCnt++)

  00003	8d 79 60	 lea	 edi, DWORD PTR [ecx+96]
  00006	bb 05 00 00 00	 mov	 ebx, 5
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@DelObelisk:

; 720  : 	{
; 721  : 		int iIndex = this->m_stObeliskInfo[iCnt].m_iMonIndex;

  00010	8b 37		 mov	 esi, DWORD PTR [edi]

; 722  : 
; 723  : 		if (iIndex >= 0)

  00012	85 f6		 test	 esi, esi
  00014	78 15		 js	 SHORT $LN2@DelObelisk

; 724  : 		{
; 725  : 			LogAdd("[AcheronGuardianEvent][Obelisk] Delete Monster - %d ", iIndex);

  00016	56		 push	 esi
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@HLCAEGMB@?$FLAcheronGuardianEvent?$FN?$FLObelisk?$FN?5@
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 726  : 			//TRACE_LOG("[AcheronGuardianEvent][Obelisk] Delete Monster - %d ", iIndex);
; 727  : 			gObjDel(iIndex);

  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@DelObelisk:

; 719  : 	for (int iCnt = 0; iCnt < AE_MAX_BATTLEPOS; iCnt++)

  0002b	83 c7 1c	 add	 edi, 28			; 0000001cH
  0002e	83 eb 01	 sub	 ebx, 1
  00031	75 dd		 jne	 SHORT $LL4@DelObelisk

; 728  : 		}
; 729  : 	}
; 730  : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	c3		 ret	 0
?DelObelisk@CAcheronGuardianEvent@@QAEXXZ ENDP		; CAcheronGuardianEvent::DelObelisk
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?GenObelisk@CAcheronGuardianEvent@@QAEXH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_result$1$ = 8						; size = 4
_iGroupNum$ = 8						; size = 4
?GenObelisk@CAcheronGuardianEvent@@QAEXH@Z PROC		; CAcheronGuardianEvent::GenObelisk, COMDAT
; _this$ = ecx

; 691  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 692  : 	int result = gObjAddMonster(this->m_stObeliskInfo[iGroupNum].m_iMapIndex);

  00007	8b 7d 08	 mov	 edi, DWORD PTR _iGroupNum$[ebp]
  0000a	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	8d 04 fd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*8]
  00014	2b c7		 sub	 eax, edi
  00016	ff 74 81 50	 push	 DWORD PTR [ecx+eax*4+80]
  0001a	8d 1c 81	 lea	 ebx, DWORD PTR [ecx+eax*4]
  0001d	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00022	0f bf f0	 movsx	 esi, ax
  00025	83 c4 04	 add	 esp, 4
  00028	89 75 08	 mov	 DWORD PTR _result$1$[ebp], esi

; 693  : 
; 694  : 	if (result > 0)

  0002b	85 f6		 test	 esi, esi
  0002d	0f 8e 16 01 00
	00		 jle	 $LN2@GenObelisk

; 695  : 	{
; 696  : 		gObjSetMonster(result, this->m_stObeliskInfo[iGroupNum].m_iMonsterNum);

  00033	ff 73 5c	 push	 DWORD PTR [ebx+92]
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 697  : 		this->m_stObeliskInfo[iGroupNum].m_iMonIndex = result;
; 698  : 		gObj[result].Class = this->m_stObeliskInfo[iGroupNum].m_iMonsterNum;

  0003c	66 8b 4b 5c	 mov	 cx, WORD PTR [ebx+92]
  00040	89 73 60	 mov	 DWORD PTR [ebx+96], esi
  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00048	69 f6 40 27 00
	00		 imul	 esi, esi, 10048

; 699  : 		gObj[result].MapNumber = this->m_stObeliskInfo[iGroupNum].m_iMapIndex;
; 700  : 		gObj[result].X = this->m_stObeliskInfo[iGroupNum].m_iPosX;
; 701  : 		gObj[result].Y = this->m_stObeliskInfo[iGroupNum].m_iPosY;
; 702  : 		gObj[result].TX = this->m_stObeliskInfo[iGroupNum].m_iPosX;
; 703  : 		gObj[result].TY = this->m_stObeliskInfo[iGroupNum].m_iPosY;
; 704  : 		gObj[result].m_OldX = this->m_stObeliskInfo[iGroupNum].m_iPosX;
; 705  : 		gObj[result].m_OldY = this->m_stObeliskInfo[iGroupNum].m_iPosY;
; 706  : 		gObj[result].StartX = this->m_stObeliskInfo[iGroupNum].m_iPosX;
; 707  : 		gObj[result].StartY = this->m_stObeliskInfo[iGroupNum].m_iPosY;
; 708  : 		gObj[result].Dir = 1;
; 709  : 		gObj[result].Live = 1;
; 710  : 		gObj[result].DieRegen = 0;
; 711  : 		gObj[result].m_State = 1;
; 712  : 		gObj[result].MaxRegenTime = 0;
; 713  : 		LogAddTD("[AcheronGuardianEvent] (%d) Obelisk be created.", result);

  0004e	ff 75 08	 push	 DWORD PTR _result$1$[ebp]
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@MOMOIMJ@?$FLAcheronGuardianEvent?$FN?5?$CI?$CFd?$CJ?5Obel@
  00056	66 89 8c 06 90
	00 00 00	 mov	 WORD PTR [esi+eax+144], cx
  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00063	0f b6 4b 50	 movzx	 ecx, BYTE PTR [ebx+80]
  00067	88 8c 06 23 01
	00 00		 mov	 BYTE PTR [esi+eax+291], cl
  0006e	8d 4f 03	 lea	 ecx, DWORD PTR [edi+3]
  00071	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00078	2b c1		 sub	 eax, ecx
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0007d	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00085	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00088	88 8c 06 20 01
	00 00		 mov	 BYTE PTR [esi+eax+288], cl
  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00094	0f b6 4b 58	 movzx	 ecx, BYTE PTR [ebx+88]
  00098	88 8c 06 21 01
	00 00		 mov	 BYTE PTR [esi+eax+289], cl
  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a4	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000a7	88 8c 06 52 01
	00 00		 mov	 BYTE PTR [esi+eax+338], cl
  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b3	0f b6 4b 58	 movzx	 ecx, BYTE PTR [ebx+88]
  000b7	88 8c 06 53 01
	00 00		 mov	 BYTE PTR [esi+eax+339], cl
  000be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c3	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000c6	88 8c 06 50 01
	00 00		 mov	 BYTE PTR [esi+eax+336], cl
  000cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d2	0f b6 4b 58	 movzx	 ecx, BYTE PTR [ebx+88]
  000d6	88 8c 06 51 01
	00 00		 mov	 BYTE PTR [esi+eax+337], cl
  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e2	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  000e5	88 8c 06 4e 01
	00 00		 mov	 BYTE PTR [esi+eax+334], cl
  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f1	0f b6 4b 58	 movzx	 ecx, BYTE PTR [ebx+88]
  000f5	88 8c 06 4f 01
	00 00		 mov	 BYTE PTR [esi+eax+335], cl
  000fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00101	c6 84 06 22 01
	00 00 01	 mov	 BYTE PTR [esi+eax+290], 1
  00109	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0010e	c6 44 06 51 01	 mov	 BYTE PTR [esi+eax+81], 1
  00113	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00118	c6 84 06 8a 05
	00 00 00	 mov	 BYTE PTR [esi+eax+1418], 0
  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00125	c7 84 06 d0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR [esi+eax+464], 1
  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00135	c7 84 06 94 05
	00 00 00 00 00
	00		 mov	 DWORD PTR [esi+eax+1428], 0
  00140	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00146	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@GenObelisk:
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx

; 714  : 	}
; 715  : }

  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 04 00	 ret	 4
?GenObelisk@CAcheronGuardianEvent@@QAEXH@Z ENDP		; CAcheronGuardianEvent::GenObelisk
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?SetRandomObeliskAttr@CAcheronGuardianEvent@@QAEXXZ
_TEXT	SEGMENT
_this$GSCopy$1$ = -52					; size = 4
tv681 = -48						; size = 4
_iArrMonsterIndex$ = -44				; size = 20
_iArrObeliskAttr$ = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
?SetRandomObeliskAttr@CAcheronGuardianEvent@@QAEXXZ PROC ; CAcheronGuardianEvent::SetRandomObeliskAttr, COMDAT
; _this$ = ecx

; 660  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	0f 57 c0	 xorps	 xmm0, xmm0
  00014	89 4d cc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00017	56		 push	 esi
  00018	0f 11 45 e8	 movups	 XMMWORD PTR _iArrObeliskAttr$[ebp], xmm0

; 661  : 	int iArrObeliskAttr[] = { 0, 0, 0, 0, 0 };

  0001c	33 db		 xor	 ebx, ebx

; 662  : 	int iArrMonsterIndex[] = { 627, 628, 629, 630, 631 };

  0001e	c7 45 e4 77 02
	00 00		 mov	 DWORD PTR _iArrMonsterIndex$[ebp+16], 631 ; 00000277H
  00025	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000276000002750000027400000273

; 663  : 	
; 664  : 	for(int iObeliskAttrCnt = 0; iObeliskAttrCnt < AE_MAX_BATTLEPOS; iObeliskAttrCnt++)

  0002c	33 f6		 xor	 esi, esi
  0002e	57		 push	 edi
  0002f	8b 7d f4	 mov	 edi, DWORD PTR _iArrObeliskAttr$[ebp+12]
  00032	89 5d f8	 mov	 DWORD PTR _iArrObeliskAttr$[ebp+16], ebx
  00035	0f 11 45 d4	 movups	 XMMWORD PTR _iArrMonsterIndex$[ebp], xmm0
  00039	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR tv681[ebp], 1
$LL4@SetRandomO:

; 665  : 	{
; 666  : 		int iRand = rand() % AE_MAX_BATTLEPOS + 1;

  00040	e8 00 00 00 00	 call	 _rand
  00045	99		 cdq
  00046	b9 05 00 00 00	 mov	 ecx, 5
  0004b	f7 f9		 idiv	 ecx

; 667  : 		bool bflag = false;

  0004d	32 c0		 xor	 al, al

; 668  : 
; 669  : 		for (int i = 0; i < AE_MAX_BATTLEPOS; i++)
; 670  : 		{
; 671  : 			if (iArrObeliskAttr[i] == iRand)

  0004f	b9 01 00 00 00	 mov	 ecx, 1
  00054	42		 inc	 edx
  00055	0f b6 c0	 movzx	 eax, al
  00058	39 55 e8	 cmp	 DWORD PTR _iArrObeliskAttr$[ebp], edx
  0005b	0f 44 c1	 cmove	 eax, ecx
  0005e	39 55 ec	 cmp	 DWORD PTR _iArrObeliskAttr$[ebp+4], edx
  00061	0f b6 c0	 movzx	 eax, al
  00064	0f 44 c1	 cmove	 eax, ecx
  00067	8b 4d f0	 mov	 ecx, DWORD PTR _iArrObeliskAttr$[ebp+8]
  0006a	3b ca		 cmp	 ecx, edx
  0006c	0f b6 c0	 movzx	 eax, al
  0006f	0f 44 45 d0	 cmove	 eax, DWORD PTR tv681[ebp]
  00073	3b fa		 cmp	 edi, edx
  00075	0f b6 c0	 movzx	 eax, al
  00078	0f 44 45 d0	 cmove	 eax, DWORD PTR tv681[ebp]
  0007c	3b da		 cmp	 ebx, edx
  0007e	74 11		 je	 SHORT $LN2@SetRandomO

; 672  : 			{
; 673  : 				bflag = true;
; 674  : 			}
; 675  : 		}
; 676  : 
; 677  : 		if (!bflag)

  00080	84 c0		 test	 al, al
  00082	75 0d		 jne	 SHORT $LN2@SetRandomO

; 678  : 		{
; 679  : 			iArrObeliskAttr[iObeliskAttrCnt] = iRand;

  00084	89 54 b5 e8	 mov	 DWORD PTR _iArrObeliskAttr$[ebp+esi*4], edx
  00088	8b 5d f8	 mov	 ebx, DWORD PTR _iArrObeliskAttr$[ebp+16]
  0008b	8b 7d f4	 mov	 edi, DWORD PTR _iArrObeliskAttr$[ebp+12]
  0008e	8b 4d f0	 mov	 ecx, DWORD PTR _iArrObeliskAttr$[ebp+8]
$LN2@SetRandomO:

; 663  : 	
; 664  : 	for(int iObeliskAttrCnt = 0; iObeliskAttrCnt < AE_MAX_BATTLEPOS; iObeliskAttrCnt++)

  00091	46		 inc	 esi
  00092	83 fe 05	 cmp	 esi, 5
  00095	7c a9		 jl	 SHORT $LL4@SetRandomO

; 680  : 		}
; 681  : 	}
; 682  : 
; 683  : 	for (int j = 0; j < AE_MAX_BATTLEPOS; j++)
; 684  : 	{
; 685  : 		this->m_stObeliskInfo[j].m_iAttrKind = iArrObeliskAttr[j];

  00097	8b 7d cc	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  0009a	8b 45 e8	 mov	 eax, DWORD PTR _iArrObeliskAttr$[ebp]
  0009d	89 47 4c	 mov	 DWORD PTR [edi+76], eax

; 686  : 		this->m_stObeliskInfo[j].m_iMonsterNum = iArrMonsterIndex[iArrObeliskAttr[j]];

  000a0	8b 44 85 d4	 mov	 eax, DWORD PTR _iArrMonsterIndex$[ebp+eax*4]
  000a4	89 47 5c	 mov	 DWORD PTR [edi+92], eax
  000a7	8b 45 ec	 mov	 eax, DWORD PTR _iArrObeliskAttr$[ebp+4]
  000aa	89 47 68	 mov	 DWORD PTR [edi+104], eax
  000ad	89 8f 84 00 00
	00		 mov	 DWORD PTR [edi+132], ecx
  000b3	89 9f bc 00 00
	00		 mov	 DWORD PTR [edi+188], ebx
  000b9	8b 44 85 d4	 mov	 eax, DWORD PTR _iArrMonsterIndex$[ebp+eax*4]
  000bd	89 47 78	 mov	 DWORD PTR [edi+120], eax
  000c0	8b 44 8d d4	 mov	 eax, DWORD PTR _iArrMonsterIndex$[ebp+ecx*4]

; 687  : 	}
; 688  : }

  000c4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c7	89 87 94 00 00
	00		 mov	 DWORD PTR [edi+148], eax
  000cd	33 cd		 xor	 ecx, ebp
  000cf	8b 45 f4	 mov	 eax, DWORD PTR _iArrObeliskAttr$[ebp+12]
  000d2	89 87 a0 00 00
	00		 mov	 DWORD PTR [edi+160], eax
  000d8	8b 44 85 d4	 mov	 eax, DWORD PTR _iArrMonsterIndex$[ebp+eax*4]
  000dc	89 87 b0 00 00
	00		 mov	 DWORD PTR [edi+176], eax
  000e2	8b 44 9d d4	 mov	 eax, DWORD PTR _iArrMonsterIndex$[ebp+ebx*4]
  000e6	89 87 cc 00 00
	00		 mov	 DWORD PTR [edi+204], eax
  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx
  000ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
?SetRandomObeliskAttr@CAcheronGuardianEvent@@QAEXXZ ENDP ; CAcheronGuardianEvent::SetRandomObeliskAttr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?DGAnsAcheronEventProcMultiCast@CAcheronGuardianEvent@@QAEXPAU_tagPMSG_ANS_AE_PLAY_DS@@@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
?DGAnsAcheronEventProcMultiCast@CAcheronGuardianEvent@@QAEXPAU_tagPMSG_ANS_AE_PLAY_DS@@@Z PROC ; CAcheronGuardianEvent::DGAnsAcheronEventProcMultiCast, COMDAT
; _this$ = ecx

; 650  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 651  : 	if (!g_ArcaBattle.IsArcaBattleServer())

  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ArcaBattle@@3VCArcaBattle@@A ; g_ArcaBattle
  0000b	e8 00 00 00 00	 call	 ?IsArcaBattleServer@CArcaBattle@@QAEHXZ ; CArcaBattle::IsArcaBattleServer
  00010	8b 55 08	 mov	 edx, DWORD PTR _lpMsg$[ebp]
  00013	85 c0		 test	 eax, eax
  00015	75 07		 jne	 SHORT $LN2@DGAnsAcher
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h

; 215  :     void SetPlayStart(BYTE btAE_PLAY_START) { this->m_bAE_PLAY_START = btAE_PLAY_START; };

  00017	0f b6 42 04	 movzx	 eax, BYTE PTR [edx+4]
  0001b	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN2@DGAnsAcher:
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 656  : 	LogAddTD("[AcheronGuardianEvent] Acheron Event Play [%d]", lpMsg->btPlay);

  0001e	0f b6 42 04	 movzx	 eax, BYTE PTR [edx+4]
  00022	50		 push	 eax
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@JJGPLGEC@?$FLAcheronGuardianEvent?$FN?5Acheron?5E@
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0002e	83 c4 08	 add	 esp, 8
  00031	5e		 pop	 esi

; 657  : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?DGAnsAcheronEventProcMultiCast@CAcheronGuardianEvent@@QAEXPAU_tagPMSG_ANS_AE_PLAY_DS@@@Z ENDP ; CAcheronGuardianEvent::DGAnsAcheronEventProcMultiCast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.h
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.h
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?GDReqAcheronEventProcMultiCast@CAcheronGuardianEvent@@QAEXE@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 8
_btPlay$ = 8						; size = 1
?GDReqAcheronEventProcMultiCast@CAcheronGuardianEvent@@QAEXE@Z PROC ; CAcheronGuardianEvent::GDReqAcheronEventProcMultiCast, COMDAT
; _this$ = ecx

; 641  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 642  : 	_tagPMSG_REQ_AE_PLAY_DS pMsg;
; 643  : 	pMsg.h.set((LPBYTE)&pMsg, 0xF8, 0xF0, sizeof(_tagPMSG_REQ_AE_PLAY_DS));
; 644  : 	pMsg.btPlay = btPlay;

  00006	8a 45 08	 mov	 al, BYTE PTR _btPlay$[ebp]
  00009	88 45 fe	 mov	 BYTE PTR _pMsg$[ebp+6], al
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.h

; 55   : 		if ( this->m_lpThisMapSvrData != NULL )

  0000c	a1 f8 6a 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+92920
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00011	c7 45 f8 c1 08
	f8 f0		 mov	 DWORD PTR _pMsg$[ebp], -252180287 ; f0f808c1H
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.h

; 55   : 		if ( this->m_lpThisMapSvrData != NULL )

  00018	85 c0		 test	 eax, eax
  0001a	74 06		 je	 SHORT $LN8@GDReqAcher

; 56   : 		{
; 57   : 			return m_lpThisMapSvrData->m_btMAPSVR_GROUP;

  0001c	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00020	eb 03		 jmp	 SHORT $LN7@GDReqAcher
$LN8@GDReqAcher:

; 58   : 		}
; 59   : 		return -1;

  00022	83 c8 ff	 or	 eax, -1
$LN7@GDReqAcher:
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 645  : 	pMsg.wMapSvrNum = g_MapServerManager.GetMapSvrGroup();

  00025	66 89 45 fc	 mov	 WORD PTR _pMsg$[ebp+4], ax

; 646  : 	cDBSMng.Send((PCHAR)&pMsg, pMsg.h.size);

  00029	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0002e	6a 08		 push	 8
  00030	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 647  : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?GDReqAcheronEventProcMultiCast@CAcheronGuardianEvent@@QAEXE@Z ENDP ; CAcheronGuardianEvent::GDReqAcheronEventProcMultiCast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?CGReqAcheronEventEnter@CAcheronGuardianEvent@@QAEXPAU_tagPMSG_REQ_ACHERON_EVENT_ENTER@@H@Z
_TEXT	SEGMENT
_stEnterResult$1 = -16					; size = 8
_pMsg$2 = -8						; size = 5
_lpMsg$ = 8						; size = 4
_iIndex$ = 12						; size = 4
?CGReqAcheronEventEnter@CAcheronGuardianEvent@@QAEXPAU_tagPMSG_REQ_ACHERON_EVENT_ENTER@@H@Z PROC ; CAcheronGuardianEvent::CGReqAcheronEventEnter, COMDAT
; _this$ = ecx

; 592  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 593  : 	if (!OBJMAX_RANGE(iIndex))

  00008	8b 75 0c	 mov	 esi, DWORD PTR _iIndex$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	85 f6		 test	 esi, esi
  0000f	0f 88 e4 00 00
	00		 js	 $LN5@CGReqAcher
  00015	33 c0		 xor	 eax, eax
  00017	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  0001d	0f 9e c0	 setle	 al
  00020	85 c0		 test	 eax, eax
  00022	0f 84 d1 00 00
	00		 je	 $LN5@CGReqAcher

; 594  : 	{
; 595  : 		return;
; 596  : 	}
; 597  : 	
; 598  : 	LPOBJ lpObj = &gObj[iIndex];

  00028	57		 push	 edi
  00029	69 fe 40 27 00
	00		 imul	 edi, esi, 10048

; 599  : 
; 600  : 	if (!gObjIsConnected(iIndex))

  0002f	56		 push	 esi
  00030	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00036	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0003b	83 c4 04	 add	 esp, 4
  0003e	85 c0		 test	 eax, eax
  00040	0f 84 b2 00 00
	00		 je	 $LN19@CGReqAcher

; 601  : 	{
; 602  : 		return;
; 603  : 	}
; 604  : 
; 605  : 	if (lpObj->Teleport)

  00046	80 bf 88 05 00
	00 00		 cmp	 BYTE PTR [edi+1416], 0
  0004d	0f 85 a5 00 00
	00		 jne	 $LN19@CGReqAcher

; 606  :     {
; 607  : 		return;
; 608  : 	}
; 609  : 
; 610  : 	//missing m_ActState checks
; 611  : 	BYTE attr = MapC[lpObj->MapNumber].GetAttr(lpObj->X, lpObj->Y);

  00053	0f b6 87 21 01
	00 00		 movzx	 eax, BYTE PTR [edi+289]
  0005a	50		 push	 eax
  0005b	0f b6 87 20 01
	00 00		 movzx	 eax, BYTE PTR [edi+288]
  00062	50		 push	 eax
  00063	0f b6 87 23 01
	00 00		 movzx	 eax, BYTE PTR [edi+291]
  0006a	69 c8 28 38 05
	00		 imul	 ecx, eax, 342056
  00070	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00076	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 612  : 	
; 613  : 	if (attr & 1)

  0007b	a8 01		 test	 al, 1
  0007d	74 79		 je	 SHORT $LN19@CGReqAcher

; 614  :     {
; 615  : 		if (lpObj->m_bIsPartyMatch)

  0007f	80 bf cd 26 00
	00 00		 cmp	 BYTE PTR [edi+9933], 0
  00086	74 26		 je	 SHORT $LN6@CGReqAcher

; 616  : 		{
; 617  : 			_PMSG_ANS_NOTI_ENTER_EVENTMAP_ERROR stEnterResult;
; 618  : 			stEnterResult.h.set((LPBYTE)&stEnterResult, 0xEF, 0x09, sizeof(_PMSG_ANS_NOTI_ENTER_EVENTMAP_ERROR));
; 619  : 			stEnterResult.nResult = -1;
; 620  : 			DataSend(iIndex, (LPBYTE)&stEnterResult, stEnterResult.h.size);

  00088	6a 08		 push	 8
  0008a	8d 45 f0	 lea	 eax, DWORD PTR _stEnterResult$1[ebp]
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  0008d	c7 45 f0 c1 08
	ef 09		 mov	 DWORD PTR _stEnterResult$1[ebp], 166660289 ; 09ef08c1H
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 636  : 		DataSend(iIndex, (LPBYTE)&pMsg, pMsg.h.size);

  00094	50		 push	 eax
  00095	56		 push	 esi
  00096	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _stEnterResult$1[ebp+4], -1
  0009d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx

; 637  : 	}
; 638  : }

  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 08 00	 ret	 8
$LN6@CGReqAcher:

; 627  : 
; 628  : 		if (this->IsPlayStart())

  000ae	83 7b 0c 00	 cmp	 DWORD PTR [ebx+12], 0
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  000b2	c7 45 f8 c1 05
	f8 4c		 mov	 DWORD PTR _pMsg$2[ebp], 1291322817 ; 4cf805c1H
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 626  : 		pMsg.btResult = 1;

  000b9	c6 45 fc 01	 mov	 BYTE PTR _pMsg$2[ebp+4], 1

; 627  : 
; 628  : 		if (this->IsPlayStart())

  000bd	74 2a		 je	 SHORT $LN7@CGReqAcher

; 629  : 		{
; 630  : 			LogAddTD("[AcheronGuardianEvent] [%s][%s] Acheron Event Enter",

  000bf	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  000c2	50		 push	 eax
  000c3	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  000c6	50		 push	 eax
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IDPEIBEF@?$FLAcheronGuardianEvent?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 631  : 				lpObj->AccountID, lpObj->Name);
; 632  : 			gObjMoveGate(iIndex, 426);

  000d2	68 aa 01 00 00	 push	 426			; 000001aaH
  000d7	56		 push	 esi
  000d8	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  000dd	83 c4 14	 add	 esp, 20			; 00000014H
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx

; 637  : 	}
; 638  : }

  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c2 08 00	 ret	 8
$LN7@CGReqAcher:

; 636  : 		DataSend(iIndex, (LPBYTE)&pMsg, pMsg.h.size);

  000e9	6a 05		 push	 5
  000eb	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$2[ebp]
  000ee	50		 push	 eax
  000ef	56		 push	 esi
  000f0	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000f5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN19@CGReqAcher:
  000f8	5f		 pop	 edi
$LN5@CGReqAcher:
  000f9	5e		 pop	 esi
  000fa	5b		 pop	 ebx

; 637  : 	}
; 638  : }

  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c2 08 00	 ret	 8
?CGReqAcheronEventEnter@CAcheronGuardianEvent@@QAEXPAU_tagPMSG_REQ_ACHERON_EVENT_ENTER@@H@Z ENDP ; CAcheronGuardianEvent::CGReqAcheronEventEnter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
;	COMDAT ?SetPlayStart@CAcheronGuardianEvent@@QAEXE@Z
_TEXT	SEGMENT
_btAE_PLAY_START$ = 8					; size = 1
?SetPlayStart@CAcheronGuardianEvent@@QAEXE@Z PROC	; CAcheronGuardianEvent::SetPlayStart, COMDAT
; _this$ = ecx

; 215  :     void SetPlayStart(BYTE btAE_PLAY_START) { this->m_bAE_PLAY_START = btAE_PLAY_START; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _btAE_PLAY_START$[ebp]
  00007	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?SetPlayStart@CAcheronGuardianEvent@@QAEXE@Z ENDP	; CAcheronGuardianEvent::SetPlayStart
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
;	COMDAT ?IsPlayStart@CAcheronGuardianEvent@@QAEHXZ
_TEXT	SEGMENT
?IsPlayStart@CAcheronGuardianEvent@@QAEHXZ PROC		; CAcheronGuardianEvent::IsPlayStart, COMDAT
; _this$ = ecx

; 214  :     int IsPlayStart() { return this->m_bAE_PLAY_START; };

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	c3		 ret	 0
?IsPlayStart@CAcheronGuardianEvent@@QAEHXZ ENDP		; CAcheronGuardianEvent::IsPlayStart
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
;	COMDAT ?SetProcState@CAcheronGuardianEvent@@QAEXH@Z
_TEXT	SEGMENT
_iState$ = 8						; size = 4
?SetProcState@CAcheronGuardianEvent@@QAEXH@Z PROC	; CAcheronGuardianEvent::SetProcState, COMDAT
; _this$ = ecx

; 212  :     void SetProcState(int iState) { this->m_iState = iState; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iState$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetProcState@CAcheronGuardianEvent@@QAEXH@Z ENDP	; CAcheronGuardianEvent::SetProcState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?ProcStateChannelClose@CAcheronGuardianEvent@@QAEXXZ
_TEXT	SEGMENT
_pMsg$1 = -4						; size = 4
?ProcStateChannelClose@CAcheronGuardianEvent@@QAEXXZ PROC ; CAcheronGuardianEvent::ProcStateChannelClose, COMDAT
; _this$ = ecx

; 551  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 552  : 	DWORD iTICK_MSEC = GetTickCount() - this->m_iTICK_COUNT;

  00006	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetTickCount@0
  0000c	8b d9		 mov	 ebx, ecx
  0000e	ff d6		 call	 esi
  00010	2b 43 44	 sub	 eax, DWORD PTR [ebx+68]

; 553  : 
; 554  : 	if (iTICK_MSEC >= 1000)

  00013	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00018	0f 82 de 00 00
	00		 jb	 $LN11@ProcStateC

; 555  : 	{
; 556  : 		this->m_iREMAIN_MSEC -= iTICK_MSEC;

  0001e	29 43 40	 sub	 DWORD PTR [ebx+64], eax

; 557  : 		this->m_iTICK_COUNT = GetTickCount();

  00021	ff d6		 call	 esi

; 558  : 
; 559  : 		if (!this->m_bWindowClose && this->m_iREMAIN_MSEC <= 10000 && this->m_iREMAIN_MSEC > 0)

  00023	80 bb e8 19 00
	00 00		 cmp	 BYTE PTR [ebx+6632], 0
  0002a	89 43 44	 mov	 DWORD PTR [ebx+68], eax
  0002d	75 7a		 jne	 SHORT $LN9@ProcStateC
  0002f	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
  00032	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H
  00037	7f 70		 jg	 SHORT $LN9@ProcStateC
  00039	85 c0		 test	 eax, eax
  0003b	7e 6c		 jle	 SHORT $LN9@ProcStateC
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  0003d	c7 45 fc c1 04
	f8 4d		 mov	 DWORD PTR _pMsg$1[ebp], 1308099777 ; 4df804c1H

; 141  : 		lpBuf[1] = size;

  00044	b2 04		 mov	 dl, 4
  00046	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  0004b	0f 1f 44 00 00	 npad	 5
$LL4@ProcStateC:
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 566  : 				if (gObj[n].Connected == PLAYER_PLAYING && gObj[n].Type == OBJ_USER)

  00050	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00056	83 7c 31 04 03	 cmp	 DWORD PTR [ecx+esi+4], 3
  0005b	75 1d		 jne	 SHORT $LN2@ProcStateC
  0005d	80 7c 31 50 01	 cmp	 BYTE PTR [ecx+esi+80], 1
  00062	75 16		 jne	 SHORT $LN2@ProcStateC

; 567  : 				{
; 568  : 					DataSend(gObj[n].m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  00064	0f b6 c2	 movzx	 eax, dl
  00067	50		 push	 eax
  00068	8d 45 fc	 lea	 eax, DWORD PTR _pMsg$1[ebp]
  0006b	50		 push	 eax
  0006c	ff 34 31	 push	 DWORD PTR [ecx+esi]
  0006f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00074	8a 55 fd	 mov	 dl, BYTE PTR _pMsg$1[ebp+1]
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@ProcStateC:

; 560  : 		{
; 561  : 			_tagPMSG_SEND_WINDOW_CLOSE pMsg;
; 562  : 			pMsg.h.set((LPBYTE)&pMsg, 0xF8, 0x4D, sizeof(_tagPMSG_SEND_WINDOW_CLOSE));
; 563  : 
; 564  : 			for (int n = OBJ_STARTUSERINDEX; n < OBJMAX; n++)

  0007a	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00080	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  00086	7c c8		 jl	 SHORT $LL4@ProcStateC

; 569  : 				}
; 570  : 			}
; 571  : 
; 572  : 			LogAddTD("[AcheronGuardianEvent] Send Close Window Sec[%d]", this->m_iREMAIN_MSEC / 1000);

  00088	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  0008d	f7 6b 40	 imul	 DWORD PTR [ebx+64]
  00090	c1 fa 06	 sar	 edx, 6
  00093	8b c2		 mov	 eax, edx
  00095	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00098	03 c2		 add	 eax, edx
  0009a	50		 push	 eax
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@MDAPBPAD@?$FLAcheronGuardianEvent?$FN?5Send?5Clos@
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000a6	83 c4 08	 add	 esp, 8
$LN9@ProcStateC:

; 573  : 		}
; 574  : 
; 575  : 		if (this->m_iREMAIN_MSEC <= 0)

  000a9	83 7b 40 00	 cmp	 DWORD PTR [ebx+64], 0
  000ad	7f 4d		 jg	 SHORT $LN11@ProcStateC

; 576  : 		{
; 577  : 			for (int aIndex = OBJ_STARTUSERINDEX; aIndex < OBJMAX; aIndex++)

  000af	57		 push	 edi
  000b0	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  000b5	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  000ba	66 0f 1f 44 00
	00		 npad	 6
$LL7@ProcStateC:

; 578  : 			{
; 579  : 				if (gObj[aIndex].Connected == PLAYER_PLAYING && gObj[aIndex].Type == OBJ_USER)

  000c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c5	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  000ca	75 12		 jne	 SHORT $LN5@ProcStateC
  000cc	80 7c 06 50 01	 cmp	 BYTE PTR [esi+eax+80], 1
  000d1	75 0b		 jne	 SHORT $LN5@ProcStateC

; 580  : 				{
; 581  : 					gObjMoveGate(aIndex, 27);

  000d3	6a 1b		 push	 27			; 0000001bH
  000d5	57		 push	 edi
  000d6	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  000db	83 c4 08	 add	 esp, 8
$LN5@ProcStateC:

; 576  : 		{
; 577  : 			for (int aIndex = OBJ_STARTUSERINDEX; aIndex < OBJMAX; aIndex++)

  000de	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  000e4	47		 inc	 edi
  000e5	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  000eb	7c d3		 jl	 SHORT $LL7@ProcStateC

; 582  : 				}
; 583  : 			}
; 584  : 
; 585  : 			this->Clear();

  000ed	8b cb		 mov	 ecx, ebx
  000ef	e8 00 00 00 00	 call	 ?Clear@CAcheronGuardianEvent@@QAEXXZ ; CAcheronGuardianEvent::Clear
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h

; 212  :     void SetProcState(int iState) { this->m_iState = iState; };

  000f4	c7 43 04 01 00
	00 00		 mov	 DWORD PTR [ebx+4], 1
  000fb	5f		 pop	 edi
$LN11@ProcStateC:
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 589  : }

  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c3		 ret	 0
?ProcStateChannelClose@CAcheronGuardianEvent@@QAEXXZ ENDP ; CAcheronGuardianEvent::ProcStateChannelClose
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?ProcStatePlayEnd@CAcheronGuardianEvent@@QAEXXZ
_TEXT	SEGMENT
?ProcStatePlayEnd@CAcheronGuardianEvent@@QAEXXZ PROC	; CAcheronGuardianEvent::ProcStatePlayEnd, COMDAT
; _this$ = ecx

; 547  : 	//not filled
; 548  : }

  00000	c3		 ret	 0
?ProcStatePlayEnd@CAcheronGuardianEvent@@QAEXXZ ENDP	; CAcheronGuardianEvent::ProcStatePlayEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?ProcStatePlaying@CAcheronGuardianEvent@@QAEXXZ
_TEXT	SEGMENT
_szTemp$1 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
?ProcStatePlaying@CAcheronGuardianEvent@@QAEXXZ PROC	; CAcheronGuardianEvent::ProcStatePlaying, COMDAT
; _this$ = ecx

; 524  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 525  : 	DWORD iTICK_MSEC = GetTickCount() - this->m_iTICK_COUNT;

  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0001c	2b 46 44	 sub	 eax, DWORD PTR [esi+68]

; 526  : 
; 527  : 	if (iTICK_MSEC >= 1000)

  0001f	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00024	72 13		 jb	 SHORT $LN2@ProcStateP

; 528  : 	{
; 529  : 		this->m_iREMAIN_MSEC -= iTICK_MSEC;

  00026	29 46 40	 sub	 DWORD PTR [esi+64], eax

; 530  : 		this->m_iTICK_COUNT = GetTickCount();

  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 531  : 		this->RegenMonsterRun();

  0002f	8b ce		 mov	 ecx, esi
  00031	89 46 44	 mov	 DWORD PTR [esi+68], eax
  00034	e8 00 00 00 00	 call	 ?RegenMonsterRun@CAcheronGuardianEvent@@QAEXXZ ; CAcheronGuardianEvent::RegenMonsterRun
$LN2@ProcStateP:

; 532  : 	}
; 533  : 
; 534  : 	if (this->m_iREMAIN_MSEC <= 0)

  00039	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  0003d	7f 58		 jg	 SHORT $LN3@ProcStateP

; 535  : 	{
; 536  : 		char szTemp[256] = { 0 };
; 537  : 		sprintf(szTemp, lMsg.Get(MSGGET(13, 185)));

  0003f	68 00 01 00 00	 push	 256			; 00000100H
  00044	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$1[ebp]
  0004a	6a 00		 push	 0
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _memset
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0005a	68 b9 0d 00 00	 push	 3513			; 00000db9H
  0005f	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00064	50		 push	 eax
  00065	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$1[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 _sprintf
  00071	83 c4 08	 add	 esp, 8

; 538  : 		this->SendMapServerGroupMsg(szTemp);

  00074	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$1[ebp]
  0007a	8b ce		 mov	 ecx, esi
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CAcheronGuardianEvent@@QAEXPAD@Z ; CAcheronGuardianEvent::SendMapServerGroupMsg

; 539  : 		this->m_iREMAIN_MSEC = 0;
; 540  : 		this->DeleteArcaBattleAllMonster();

  00082	8b ce		 mov	 ecx, esi
  00084	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  0008b	e8 00 00 00 00	 call	 ?DeleteArcaBattleAllMonster@CAcheronGuardianEvent@@QAEXXZ ; CAcheronGuardianEvent::DeleteArcaBattleAllMonster
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h

; 212  :     void SetProcState(int iState) { this->m_iState = iState; };

  00090	c7 46 04 06 00
	00 00		 mov	 DWORD PTR [esi+4], 6
$LN3@ProcStateP:
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 543  : }

  00097	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009a	33 cd		 xor	 ecx, ebp
  0009c	5e		 pop	 esi
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
?ProcStatePlaying@CAcheronGuardianEvent@@QAEXXZ ENDP	; CAcheronGuardianEvent::ProcStatePlaying
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?ProcStateReady@CAcheronGuardianEvent@@QAEXXZ
_TEXT	SEGMENT
_szTemp$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
?ProcStateReady@CAcheronGuardianEvent@@QAEXXZ PROC	; CAcheronGuardianEvent::ProcStateReady, COMDAT
; _this$ = ecx

; 497  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 498  : 	this->m_iREMAIN_MSEC = 60000 * this->m_iAB_PlayTimeMin;

  00016	69 46 10 60 ea
	00 00		 imul	 eax, DWORD PTR [esi+16], 60000
  0001d	89 46 40	 mov	 DWORD PTR [esi+64], eax

; 499  : 	this->m_iTICK_COUNT = GetTickCount();

  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00026	89 46 44	 mov	 DWORD PTR [esi+68], eax

; 500  : 	this->m_bAE_PLAY_START = 1;
; 501  : 	this->GDReqAcheronEventProcMultiCast(this->m_bAE_PLAY_START);

  00029	8b ce		 mov	 ecx, esi
  0002b	c7 46 0c 01 00
	00 00		 mov	 DWORD PTR [esi+12], 1
  00032	0f b6 46 0c	 movzx	 eax, BYTE PTR [esi+12]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?GDReqAcheronEventProcMultiCast@CAcheronGuardianEvent@@QAEXE@Z ; CAcheronGuardianEvent::GDReqAcheronEventProcMultiCast

; 502  : 	this->m_iGroupNum = rand() % 3;

  0003c	e8 00 00 00 00	 call	 _rand
  00041	99		 cdq
  00042	b9 03 00 00 00	 mov	 ecx, 3
  00047	f7 f9		 idiv	 ecx
  00049	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 503  : 
; 504  : 	if (this->m_iGroupNum < 0 || this->m_iGroupNum > 2)

  0004c	85 d2		 test	 edx, edx
  0004e	78 05		 js	 SHORT $LN3@ProcStateR
  00050	83 fa 02	 cmp	 edx, 2
  00053	7e 16		 jle	 SHORT $LN2@ProcStateR
$LN3@ProcStateR:

; 505  : 	{
; 506  : 		LogAddTD("[AcheronGuardianEvent] Error Obelisk GroupNum [%d]", this->m_iGroupNum);

  00055	52		 push	 edx
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@BMDDCFGO@?$FLAcheronGuardianEvent?$FN?5Error?5Obe@
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00061	83 c4 08	 add	 esp, 8

; 507  : 		this->m_iGroupNum = 0;

  00064	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@ProcStateR:

; 508  : 	}
; 509  : 
; 510  : 	LogAddTD("[AcheronGuardianEvent] Obelisk GroupNum %d", this->m_iGroupNum);

  0006b	ff 76 08	 push	 DWORD PTR [esi+8]
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@JNGDLOMC@?$FLAcheronGuardianEvent?$FN?5Obelisk?5G@
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00079	83 c4 08	 add	 esp, 8

; 511  : 	
; 512  : 	this->SetRandomObeliskAttr();

  0007c	8b ce		 mov	 ecx, esi
  0007e	e8 00 00 00 00	 call	 ?SetRandomObeliskAttr@CAcheronGuardianEvent@@QAEXXZ ; CAcheronGuardianEvent::SetRandomObeliskAttr

; 513  : 	this->GenObelisk(this->m_iGroupNum);

  00083	ff 76 08	 push	 DWORD PTR [esi+8]
  00086	8b ce		 mov	 ecx, esi
  00088	e8 00 00 00 00	 call	 ?GenObelisk@CAcheronGuardianEvent@@QAEXH@Z ; CAcheronGuardianEvent::GenObelisk

; 514  : 	this->RegenMonster(this->m_iGroupNum, 1, 10);

  0008d	6a 0a		 push	 10			; 0000000aH
  0008f	6a 01		 push	 1
  00091	ff 76 08	 push	 DWORD PTR [esi+8]
  00094	8b ce		 mov	 ecx, esi
  00096	e8 00 00 00 00	 call	 ?RegenMonster@CAcheronGuardianEvent@@QAEXHHH@Z ; CAcheronGuardianEvent::RegenMonster

; 515  : 	this->ResetGenTime();

  0009b	8b ce		 mov	 ecx, esi
  0009d	e8 00 00 00 00	 call	 ?ResetGenTime@CAcheronGuardianEvent@@QAEXXZ ; CAcheronGuardianEvent::ResetGenTime
  000a2	68 00 01 00 00	 push	 256			; 00000100H
  000a7	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  000ad	6a 00		 push	 0
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 _memset
  000b5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 516  : 
; 517  : 	char szTemp[256] = { 0 };
; 518  : 	sprintf(szTemp, lMsg.Get(MSGGET(13, 183)));

  000b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000bd	68 b7 0d 00 00	 push	 3511			; 00000db7H
  000c2	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000c7	50		 push	 eax
  000c8	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _sprintf
  000d4	83 c4 08	 add	 esp, 8

; 519  : 	this->SendMapServerGroupMsg(szTemp);

  000d7	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  000dd	8b ce		 mov	 ecx, esi
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CAcheronGuardianEvent@@QAEXPAD@Z ; CAcheronGuardianEvent::SendMapServerGroupMsg

; 521  : }

  000e5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h

; 212  :     void SetProcState(int iState) { this->m_iState = iState; };

  000e8	c7 46 04 04 00
	00 00		 mov	 DWORD PTR [esi+4], 4
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 521  : }

  000ef	33 cd		 xor	 ecx, ebp
  000f1	5e		 pop	 esi
  000f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c3		 ret	 0
?ProcStateReady@CAcheronGuardianEvent@@QAEXXZ ENDP	; CAcheronGuardianEvent::ProcStateReady
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?ProcStateClosed@CAcheronGuardianEvent@@QAEXXZ
_TEXT	SEGMENT
?ProcStateClosed@CAcheronGuardianEvent@@QAEXXZ PROC	; CAcheronGuardianEvent::ProcStateClosed, COMDAT
; _this$ = ecx

; 478  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 479  : 	if (this->m_iREMAIN_MSEC != -100)

  00003	83 7e 40 9c	 cmp	 DWORD PTR [esi+64], -100 ; ffffff9cH
  00007	74 29		 je	 SHORT $LN4@ProcStateC

; 480  : 	{
; 481  : 		int iTICK_MSEC = GetTickCount() - this->m_iTICK_COUNT;

  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0000f	2b 46 44	 sub	 eax, DWORD PTR [esi+68]

; 482  : 		
; 483  : 		if (iTICK_MSEC >= 1000)

  00012	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00017	7c 19		 jl	 SHORT $LN4@ProcStateC

; 484  : 		{
; 485  : 			this->m_iREMAIN_MSEC -= iTICK_MSEC;

  00019	29 46 40	 sub	 DWORD PTR [esi+64], eax

; 486  : 			this->m_iTICK_COUNT = GetTickCount();

  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 487  : 
; 488  : 			if (this->m_iREMAIN_MSEC <= 0)

  00022	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  00026	89 46 44	 mov	 DWORD PTR [esi+68], eax
  00029	7f 07		 jg	 SHORT $LN4@ProcStateC
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h

; 212  :     void SetProcState(int iState) { this->m_iState = iState; };

  0002b	c7 46 04 03 00
	00 00		 mov	 DWORD PTR [esi+4], 3
$LN4@ProcStateC:
  00032	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 494  : }

  00033	c3		 ret	 0
?ProcStateClosed@CAcheronGuardianEvent@@QAEXXZ ENDP	; CAcheronGuardianEvent::ProcStateClosed
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?ProcStateEnd@CAcheronGuardianEvent@@QAEXXZ
_TEXT	SEGMENT
_pMsg$ = -276						; size = 272
__$ArrayPad$ = -4					; size = 4
?ProcStateEnd@CAcheronGuardianEvent@@QAEXXZ PROC	; CAcheronGuardianEvent::ProcStateEnd, COMDAT
; _this$ = ecx

; 463  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 464  : 	PMSG_NOTICE pMsg;
; 465  : 	TNotice::MakeNoticeMsgEx(&pMsg, 0, lMsg.Get(MSGGET(13, 186)));

  00016	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0001b	68 ba 0d 00 00	 push	 3514			; 00000dbaH
  00020	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00025	50		 push	 eax
  00026	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0002c	6a 00		 push	 0
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx

; 466  : 	TNotice::SetNoticeProperty(&pMsg, 0, _ARGB(0xFF, 0xFF, 0xC8, 0x50), 1, 0, 20);

  00034	6a 14		 push	 20			; 00000014H
  00036	6a 00		 push	 0
  00038	6a 01		 push	 1
  0003a	68 ff c8 50 ff	 push	 -11482881		; ff50c8ffH
  0003f	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00045	6a 00		 push	 0
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?SetNoticeProperty@TNotice@@SAXPAXEKEGE@Z ; TNotice::SetNoticeProperty

; 467  : 	TNotice::SendNoticeToAllUser(&pMsg);

  0004d	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?SendNoticeToAllUser@TNotice@@SAXPAX@Z ; TNotice::SendNoticeToAllUser
  00059	83 c4 28	 add	 esp, 40			; 00000028H

; 468  : 	this->DelObelisk();

  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ?DelObelisk@CAcheronGuardianEvent@@QAEXXZ ; CAcheronGuardianEvent::DelObelisk

; 469  : 	this->DeleteArcaBattleAllMonster();

  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?DeleteArcaBattleAllMonster@CAcheronGuardianEvent@@QAEXXZ ; CAcheronGuardianEvent::DeleteArcaBattleAllMonster

; 470  : 	this->m_bAE_PLAY_START = 0;

  0006a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 471  : 	this->GDReqAcheronEventProcMultiCast(this->m_bAE_PLAY_START);

  00071	8b ce		 mov	 ecx, esi
  00073	0f b6 46 0c	 movzx	 eax, BYTE PTR [esi+12]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?GDReqAcheronEventProcMultiCast@CAcheronGuardianEvent@@QAEXE@Z ; CAcheronGuardianEvent::GDReqAcheronEventProcMultiCast

; 472  : 	this->m_iREMAIN_MSEC = 60000 * this->m_iAB_ChCloseMin;

  0007d	69 46 14 60 ea
	00 00		 imul	 eax, DWORD PTR [esi+20], 60000
  00084	89 46 40	 mov	 DWORD PTR [esi+64], eax

; 473  : 	this->m_iTICK_COUNT = GetTickCount();

  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 475  : }

  0008d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00090	89 46 44	 mov	 DWORD PTR [esi+68], eax
  00093	33 cd		 xor	 ecx, ebp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h

; 212  :     void SetProcState(int iState) { this->m_iState = iState; };

  00095	c7 46 04 05 00
	00 00		 mov	 DWORD PTR [esi+4], 5
  0009c	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 475  : }

  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
?ProcStateEnd@CAcheronGuardianEvent@@QAEXXZ ENDP	; CAcheronGuardianEvent::ProcStateEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?Run@CAcheronGuardianEvent@@QAEXXZ
_TEXT	SEGMENT
?Run@CAcheronGuardianEvent@@QAEXXZ PROC			; CAcheronGuardianEvent::Run, COMDAT
; _this$ = ecx

; 433  : //	if (!g_ArcaBattle.IsArcaBattleServer())
; 434  : //	{
; 435  : //		return;
; 436  : //	}
; 437  : 	//LogAddC(2, "[DEBUG] Acheron State: %d", this->m_iState);
; 438  : 
; 439  : 	switch (this->m_iState)

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	48		 dec	 eax
  00004	83 f8 05	 cmp	 eax, 5
  00007	77 25		 ja	 SHORT $LN2@Run
  00009	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN13@Run[eax*4]
$LN4@Run:

; 440  : 	{
; 441  : 	  case AE_STATE_NONE:
; 442  : 		this->CheckSync();

  00010	e9 00 00 00 00	 jmp	 ?CheckSync@CAcheronGuardianEvent@@QAEHXZ ; CAcheronGuardianEvent::CheckSync
$LN5@Run:

; 443  : 		break;
; 444  : 	  case AE_STATE_CLOSED:
; 445  : 		this->ProcStateClosed();

  00015	e9 00 00 00 00	 jmp	 ?ProcStateClosed@CAcheronGuardianEvent@@QAEXXZ ; CAcheronGuardianEvent::ProcStateClosed
$LN6@Run:

; 446  : 		break;
; 447  : 	  case AE_STATE_READY:
; 448  : 		this->ProcStateReady();

  0001a	e9 00 00 00 00	 jmp	 ?ProcStateReady@CAcheronGuardianEvent@@QAEXXZ ; CAcheronGuardianEvent::ProcStateReady
$LN7@Run:

; 449  : 		break;
; 450  : 	  case AE_STATE_PLAYING:
; 451  : 		this->ProcStatePlaying();

  0001f	e9 00 00 00 00	 jmp	 ?ProcStatePlaying@CAcheronGuardianEvent@@QAEXXZ ; CAcheronGuardianEvent::ProcStatePlaying
$LN8@Run:

; 452  : 		break;
; 453  : 	  case AE_STATE_CLOSE:
; 454  : 		this->ProcStateChannelClose();

  00024	e9 00 00 00 00	 jmp	 ?ProcStateChannelClose@CAcheronGuardianEvent@@QAEXXZ ; CAcheronGuardianEvent::ProcStateChannelClose
$LN9@Run:

; 455  : 		break;
; 456  : 	  case AE_STATE_END:
; 457  : 		this->ProcStateEnd();

  00029	e9 00 00 00 00	 jmp	 ?ProcStateEnd@CAcheronGuardianEvent@@QAEXXZ ; CAcheronGuardianEvent::ProcStateEnd
$LN2@Run:

; 458  : 		break;
; 459  : 	}
; 460  : }

  0002e	c3		 ret	 0
  0002f	90		 npad	 1
$LN13@Run:
  00030	00 00 00 00	 DD	 $LN4@Run
  00034	00 00 00 00	 DD	 $LN5@Run
  00038	00 00 00 00	 DD	 $LN6@Run
  0003c	00 00 00 00	 DD	 $LN7@Run
  00040	00 00 00 00	 DD	 $LN8@Run
  00044	00 00 00 00	 DD	 $LN9@Run
?Run@CAcheronGuardianEvent@@QAEXXZ ENDP			; CAcheronGuardianEvent::Run
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?CheckSync@CAcheronGuardianEvent@@QAEHXZ
_TEXT	SEGMENT
$T1 = -68						; size = 4
_it$2$ = -64						; size = 4
tv856 = -60						; size = 4
tv854 = -56						; size = 4
_this$GSCopy$1$ = -52					; size = 4
_bTIME_CHANGED$1$ = -48					; size = 4
tv853 = -44						; size = 4
_iMIN_HOUR$1$ = -44					; size = 4
_iMIN_MINUTE$1$ = -40					; size = 4
_tmToDay$ = -36						; size = 16
_sysTime$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?CheckSync@CAcheronGuardianEvent@@QAEHXZ PROC		; CAcheronGuardianEvent::CheckSync, COMDAT
; _this$ = ecx

; 334  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi

; 335  : //	if (!g_ArcaBattle.IsArcaBattleServer())
; 336  : //	{
; 337  : //		return 0;
; 338  : //	}
; 339  : 
; 340  : 	_SYSTEMTIME tmToDay;
; 341  : 	GetLocalTime(&tmToDay);

  00012	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetLocalTime@4
  00018	8d 45 dc	 lea	 eax, DWORD PTR _tmToDay$[ebp]
  0001b	8b d9		 mov	 ebx, ecx
  0001d	50		 push	 eax
  0001e	89 5d cc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  00021	ff d6		 call	 esi

; 342  : 	int iTODAY_DATE_NUM = MAKELONG(MAKEWORD(tmToDay.wDay, tmToDay.wMonth), tmToDay.wYear);
; 343  : 	WORD wDayOfWeek = tmToDay.wDayOfWeek;
; 344  : 
; 345  : 	if (wDayOfWeek >= 7)

  00023	66 8b 45 e0	 mov	 ax, WORD PTR _tmToDay$[ebp+4]
  00027	66 83 f8 07	 cmp	 ax, 7

; 346  : 	{
; 347  : 		LogAddC(2, "[AcheronEvent] Error DayOfWeek -  wDayOfWeek [%d]", wDayOfWeek);

  0002b	0f b7 c0	 movzx	 eax, ax
  0002e	72 23		 jb	 SHORT $LN6@CheckSync
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@NCPKNLFE@?$FLAcheronEvent?$FN?5Error?5DayOfWeek?5?9@
  00036	6a 02		 push	 2
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 348  : 		return 0;

  00041	33 c0		 xor	 eax, eax
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx

; 429  : }

  00045	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00048	33 cd		 xor	 ecx, ebp
  0004a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN6@CheckSync:

; 349  : 	}
; 350  : 
; 351  : 	if (this->m_iDayOfWeekCycle[wDayOfWeek] != 1)

  00053	83 7c 83 18 01	 cmp	 DWORD PTR [ebx+eax*4+24], 1
  00058	74 20		 je	 SHORT $LN7@CheckSync

; 352  : 	{
; 353  : 		LogAddTD("[AcheronEvent] Disabled for today");

  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@CJDKFKFK@?$FLAcheronEvent?$FN?5Disabled?5for?5toda@
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00065	83 c4 04	 add	 esp, 4

; 354  : 		return 0;

  00068	33 c0		 xor	 eax, eax
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx

; 429  : }

  0006c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006f	33 cd		 xor	 ecx, ebp
  00071	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
$LN7@CheckSync:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  0007a	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]
  0007d	3b 43 38	 cmp	 eax, DWORD PTR [ebx+56]
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 357  : 	if (this->m_vtAcheronEventTime.empty())

  00080	75 22		 jne	 SHORT $LN8@CheckSync

; 358  : 	{
; 359  : 		LogAddC(2, "[AcheronEvent] No Schedule Time Data -  (m_vtAcheronEventTime.empty())");

  00082	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@JFKCDOFM@?$FLAcheronEvent?$FN?5No?5Schedule?5Time?5@
  00087	6a 02		 push	 2
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0008f	83 c4 08	 add	 esp, 8

; 360  : 		return 0;

  00092	33 c0		 xor	 eax, eax
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx

; 429  : }

  00096	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00099	33 cd		 xor	 ecx, ebp
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
$LN8@CheckSync:
  000a4	57		 push	 edi

; 361  : 	}
; 362  : 
; 363  : 	_SYSTEMTIME sysTime;
; 364  : 	GetLocalTime(&sysTime);

  000a5	8d 45 ec	 lea	 eax, DWORD PTR _sysTime$[ebp]
  000a8	50		 push	 eax
  000a9	ff d6		 call	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  000ab	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 367  :     int bTIME_CHANGED = 0;

  000ae	33 ff		 xor	 edi, edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  000b0	8b 73 38	 mov	 esi, DWORD PTR [ebx+56]
  000b3	8b c8		 mov	 ecx, eax
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 366  :     int iMIN_MINUTE = 60;

  000b5	c7 45 d8 3c 00
	00 00		 mov	 DWORD PTR _iMIN_MINUTE$1$[ebp], 60 ; 0000003cH

; 367  :     int bTIME_CHANGED = 0;

  000bc	89 7d d0	 mov	 DWORD PTR _bTIME_CHANGED$1$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  000bf	89 45 c0	 mov	 DWORD PTR _it$2$[ebp], eax
  000c2	89 75 bc	 mov	 DWORD PTR $T1[ebp], esi

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000c5	3b ce		 cmp	 ecx, esi
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 371  : 	while (it != this->m_vtAcheronEventTime.end())

  000c7	74 6e		 je	 SHORT $LN319@CheckSync
  000c9	0f b7 7d f4	 movzx	 edi, WORD PTR _sysTime$[ebp+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));

  000cd	8b d6		 mov	 edx, esi
  000cf	8b df		 mov	 ebx, edi
  000d1	c1 e3 04	 shl	 ebx, 4
  000d4	2b df		 sub	 ebx, edi
  000d6	0f b7 7d f6	 movzx	 edi, WORD PTR _sysTime$[ebp+10]
  000da	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
  000dd	89 45 d4	 mov	 DWORD PTR tv853[ebp], eax
  000e0	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
$LL2@CheckSync:
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 375  : 		if (sysTime.wMinute + 60 * sysTime.wHour < it->m_iMinute + 60 * it->m_iHour)

  000e5	8b 19		 mov	 ebx, DWORD PTR [ecx]
  000e7	8b fb		 mov	 edi, ebx
  000e9	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  000ec	c1 e7 04	 shl	 edi, 4
  000ef	2b fb		 sub	 edi, ebx
  000f1	8d 34 be	 lea	 esi, DWORD PTR [esi+edi*4]
  000f4	39 75 d4	 cmp	 DWORD PTR tv853[ebp], esi
  000f7	89 75 c8	 mov	 DWORD PTR tv854[ebp], esi
  000fa	8b 75 d8	 mov	 esi, DWORD PTR _iMIN_MINUTE$1$[ebp]
  000fd	7d 21		 jge	 SHORT $LN321@CheckSync

; 376  : 		{
; 377  : 			if (iMIN_MINUTE + 60 * iMIN_HOUR > it->m_iMinute + 60 * it->m_iHour)

  000ff	8b f8		 mov	 edi, eax
  00101	c1 e7 04	 shl	 edi, 4
  00104	2b f8		 sub	 edi, eax
  00106	8d 3c be	 lea	 edi, DWORD PTR [esi+edi*4]
  00109	3b 7d c8	 cmp	 edi, DWORD PTR tv854[ebp]
  0010c	7e 12		 jle	 SHORT $LN321@CheckSync

; 378  : 			{
; 379  :                 bTIME_CHANGED = 1;
; 380  :                 iMIN_HOUR = it->m_iHour;
; 381  : 				iMIN_MINUTE = it->m_iMinute;

  0010e	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00111	bf 01 00 00 00	 mov	 edi, 1
  00116	89 7d d0	 mov	 DWORD PTR _bTIME_CHANGED$1$[ebp], edi
  00119	8b c3		 mov	 eax, ebx
  0011b	89 75 d8	 mov	 DWORD PTR _iMIN_MINUTE$1$[ebp], esi
  0011e	eb 03		 jmp	 SHORT $LN10@CheckSync
$LN321@CheckSync:
  00120	8b 7d d0	 mov	 edi, DWORD PTR _bTIME_CHANGED$1$[ebp]
$LN10@CheckSync:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  00123	83 c1 0c	 add	 ecx, 12			; 0000000cH

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00126	3b ca		 cmp	 ecx, edx
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 371  : 	while (it != this->m_vtAcheronEventTime.end())

  00128	75 bb		 jne	 SHORT $LL2@CheckSync

; 382  : 			}
; 383  : 		}
; 384  : 
; 385  : 		it++;
; 386  : 	}
; 387  : 
; 388  : 	if (bTIME_CHANGED == 0)

  0012a	8b 75 bc	 mov	 esi, DWORD PTR $T1[ebp]
  0012d	89 45 d4	 mov	 DWORD PTR _iMIN_HOUR$1$[ebp], eax
  00130	8b 45 c0	 mov	 eax, DWORD PTR _it$2$[ebp]
  00133	85 ff		 test	 edi, edi
  00135	75 56		 jne	 SHORT $LN5@CheckSync
$LN319@CheckSync:

; 389  : 	{
; 390  : 		iMIN_HOUR = 24;
; 391  : 		iMIN_MINUTE = 60;

  00137	c7 45 d8 3c 00
	00 00		 mov	 DWORD PTR _iMIN_MINUTE$1$[ebp], 60 ; 0000003cH
  0013e	bb 18 00 00 00	 mov	 ebx, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00143	3b c6		 cmp	 eax, esi
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 394  : 		while (it != this->m_vtAcheronEventTime.end())

  00145	0f 84 b9 00 00
	00		 je	 $LN15@CheckSync
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));

  0014b	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0014e	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
$LL4@CheckSync:
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 398  : 			if (iMIN_MINUTE + 60 * iMIN_HOUR > it->m_iMinute + 60 * it->m_iHour)

  00151	8b 10		 mov	 edx, DWORD PTR [eax]
  00153	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00156	8b 7d d8	 mov	 edi, DWORD PTR _iMIN_MINUTE$1$[ebp]
  00159	c1 e2 04	 shl	 edx, 4
  0015c	2b 10		 sub	 edx, DWORD PTR [eax]
  0015e	8d 34 96	 lea	 esi, DWORD PTR [esi+edx*4]
  00161	8b d3		 mov	 edx, ebx
  00163	c1 e2 04	 shl	 edx, 4
  00166	2b d3		 sub	 edx, ebx
  00168	8d 14 97	 lea	 edx, DWORD PTR [edi+edx*4]
  0016b	8b 38		 mov	 edi, DWORD PTR [eax]
  0016d	3b d6		 cmp	 edx, esi
  0016f	7e 0f		 jle	 SHORT $LN12@CheckSync

; 399  : 			{
; 400  :                 bTIME_CHANGED = 2;
; 401  :                 iMIN_HOUR = it->m_iHour;
; 402  :                 iMIN_MINUTE = it->m_iMinute;

  00171	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00174	8b df		 mov	 ebx, edi
  00176	c7 45 d0 02 00
	00 00		 mov	 DWORD PTR _bTIME_CHANGED$1$[ebp], 2
  0017d	89 55 d8	 mov	 DWORD PTR _iMIN_MINUTE$1$[ebp], edx
$LN12@CheckSync:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  00180	83 c0 0c	 add	 eax, 12			; 0000000cH

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00183	3b c1		 cmp	 eax, ecx
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 394  : 		while (it != this->m_vtAcheronEventTime.end())

  00185	75 ca		 jne	 SHORT $LL4@CheckSync
  00187	8b 7d d0	 mov	 edi, DWORD PTR _bTIME_CHANGED$1$[ebp]
  0018a	89 5d d4	 mov	 DWORD PTR _iMIN_HOUR$1$[ebp], ebx
$LN5@CheckSync:

; 403  : 			}
; 404  : 
; 405  : 			it++;
; 406  : 		}
; 407  : 	}
; 408  : 
; 409  : 	if (bTIME_CHANGED == 1)

  0018d	83 ff 01	 cmp	 edi, 1
  00190	75 41		 jne	 SHORT $LN13@CheckSync

; 410  : 	{
; 411  : 		this->m_iREMAIN_MSEC = 1000 * (60 * iMIN_MINUTE + 3600 * iMIN_HOUR - (sysTime.wSecond + 60 * sysTime.wMinute + 3600 * sysTime.wHour));

  00192	0f b7 45 f4	 movzx	 eax, WORD PTR _sysTime$[ebp+8]
  00196	8b 4d d4	 mov	 ecx, DWORD PTR _iMIN_HOUR$1$[ebp]
  00199	2b c8		 sub	 ecx, eax
  0019b	0f b7 45 f6	 movzx	 eax, WORD PTR _sysTime$[ebp+10]
  0019f	8b d1		 mov	 edx, ecx
  001a1	c1 e2 04	 shl	 edx, 4
  001a4	2b d1		 sub	 edx, ecx
  001a6	c1 e2 02	 shl	 edx, 2
  001a9	2b d0		 sub	 edx, eax
  001ab	0f b7 45 f8	 movzx	 eax, WORD PTR _sysTime$[ebp+12]
  001af	03 55 d8	 add	 edx, DWORD PTR _iMIN_MINUTE$1$[ebp]
  001b2	8b ca		 mov	 ecx, edx
  001b4	c1 e1 04	 shl	 ecx, 4
  001b7	2b ca		 sub	 ecx, edx
  001b9	c1 e1 02	 shl	 ecx, 2
  001bc	2b c8		 sub	 ecx, eax
  001be	69 c1 e8 03 00
	00		 imul	 eax, ecx, 1000
  001c4	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001c7	89 41 40	 mov	 DWORD PTR [ecx+64], eax
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h

; 212  :     void SetProcState(int iState) { this->m_iState = iState; };

  001ca	c7 41 04 02 00
	00 00		 mov	 DWORD PTR [ecx+4], 2
  001d1	eb 0f		 jmp	 SHORT $LN16@CheckSync
$LN13@CheckSync:
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 414  : 	else if (bTIME_CHANGED == 2)

  001d3	83 ff 02	 cmp	 edi, 2
  001d6	75 2c		 jne	 SHORT $LN15@CheckSync

; 415  : 	{
; 416  : 		this->m_iREMAIN_MSEC = -100;

  001d8	8b 45 cc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  001db	c7 40 40 9c ff
	ff ff		 mov	 DWORD PTR [eax+64], -100 ; ffffff9cH
$LN16@CheckSync:

; 421  : 		return 0;
; 422  : 	}
; 423  : 
; 424  : 	this->m_iTICK_COUNT = GetTickCount();

  001e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  001e8	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001eb	5f		 pop	 edi
  001ec	5e		 pop	 esi
  001ed	5b		 pop	 ebx
  001ee	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 425  : 	//TRACE_LOG("m_iREMAIN_MSEC %d", this->m_iTICK_COUNT);
; 426  : 	//LogAddTD("[AcheronEvent] Sync Start Time. [%d] min remain (START HOUR:%d, MIN:%d)",
; 427  : 	//	this->m_iREMAIN_MSEC / 60000, iMIN_HOUR, iMIN_MINUTE);
; 428  : 	return 1;

  001f1	b8 01 00 00 00	 mov	 eax, 1

; 429  : }

  001f6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f9	33 cd		 xor	 ecx, ebp
  001fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00200	8b e5		 mov	 esp, ebp
  00202	5d		 pop	 ebp
  00203	c3		 ret	 0
$LN15@CheckSync:

; 417  : 	}
; 418  : 	else
; 419  : 	{
; 420  : 		LogAddC(2, "[AcheronEvent] No Schedule Time Data - Chaos Castle Terminated (bTIME_CHANGED=%d)", bTIME_CHANGED);

  00204	57		 push	 edi
  00205	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@GHNPHKMH@?$FLAcheronEvent?$FN?5No?5Schedule?5Time?5@
  0020a	6a 02		 push	 2
  0020c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 429  : }

  00212	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00215	83 c4 0c	 add	 esp, 12			; 0000000cH
  00218	33 cd		 xor	 ecx, ebp
  0021a	33 c0		 xor	 eax, eax
  0021c	5f		 pop	 edi
  0021d	5e		 pop	 esi
  0021e	5b		 pop	 ebx
  0021f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00224	8b e5		 mov	 esp, ebp
  00226	5d		 pop	 ebp
  00227	c3		 ret	 0
?CheckSync@CAcheronGuardianEvent@@QAEHXZ ENDP		; CAcheronGuardianEvent::CheckSync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?Clear@CAcheronGuardianEvent@@QAEXXZ
_TEXT	SEGMENT
?Clear@CAcheronGuardianEvent@@QAEXXZ PROC		; CAcheronGuardianEvent::Clear, COMDAT
; _this$ = ecx
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h

; 45   : 		this->m_iMonIndex = -1;

  00000	c7 41 60 ff ff
	ff ff		 mov	 DWORD PTR [ecx+96], -1
  00007	c7 41 7c ff ff
	ff ff		 mov	 DWORD PTR [ecx+124], -1
  0000e	c7 81 98 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+152], -1
  00018	c7 81 b4 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+180], -1
  00022	c7 81 d0 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+208], -1
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 326  : 		this->m_stMonsterGroupInfo[nGroupNumber].m_nGenTotCnt = 0;

  0002c	c7 81 6c 15 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+5484], 0
  00036	c7 81 4c 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+5708], 0
  00040	c7 81 2c 17 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+5932], 0
  0004a	c7 81 0c 18 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+6156], 0
  00054	c7 81 ec 18 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+6380], 0

; 327  : 	}
; 328  : 	
; 329  : 	this->m_bAE_PLAY_START = 0;

  0005e	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 330  : 	this->m_bWindowClose = 0;

  00065	c6 81 e8 19 00
	00 00		 mov	 BYTE PTR [ecx+6632], 0

; 331  : }

  0006c	c3		 ret	 0
?Clear@CAcheronGuardianEvent@@QAEXXZ ENDP		; CAcheronGuardianEvent::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?GetDropItemCnt@CAcheronGuardianEvent@@QAEHXZ
_TEXT	SEGMENT
?GetDropItemCnt@CAcheronGuardianEvent@@QAEHXZ PROC	; CAcheronGuardianEvent::GetDropItemCnt, COMDAT
; _this$ = ecx

; 300  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 301  : 	DWORD dwRandTmp = GetLargeRand() % 1000000;

  00004	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00009	33 d2		 xor	 edx, edx
  0000b	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00010	f7 f1		 div	 ecx

; 302  : 	DWORD dwRandRate = 0;

  00012	33 f6		 xor	 esi, esi
  00014	8d 8f c4 19 00
	00		 lea	 ecx, DWORD PTR [edi+6596]

; 303  : 	  
; 304  : 	for (int i = 0; i < 5; i++)

  0001a	33 c0		 xor	 eax, eax
  0001c	0f 1f 40 00	 npad	 4
$LL4@GetDropIte:

; 305  : 	{
; 306  : 		dwRandRate += this->m_stItemDropCntRate[i].iRate;

  00020	03 31		 add	 esi, DWORD PTR [ecx]

; 307  : 
; 308  : 		if (dwRandTmp <= dwRandRate)

  00022	3b d6		 cmp	 edx, esi
  00024	76 0f		 jbe	 SHORT $LN8@GetDropIte

; 303  : 	  
; 304  : 	for (int i = 0; i < 5; i++)

  00026	40		 inc	 eax
  00027	83 c1 08	 add	 ecx, 8
  0002a	83 f8 05	 cmp	 eax, 5
  0002d	7c f1		 jl	 SHORT $LL4@GetDropIte

; 311  : 		}
; 312  : 	}
; 313  : 
; 314  : 	return -1;

  0002f	5f		 pop	 edi
  00030	83 c8 ff	 or	 eax, -1
  00033	5e		 pop	 esi

; 315  : }

  00034	c3		 ret	 0
$LN8@GetDropIte:

; 309  : 		{
; 310  : 			return this->m_stItemDropCntRate[i].iCnt;

  00035	8b 84 c7 c0 19
	00 00		 mov	 eax, DWORD PTR [edi+eax*8+6592]
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 315  : }

  0003e	c3		 ret	 0
?GetDropItemCnt@CAcheronGuardianEvent@@QAEHXZ ENDP	; CAcheronGuardianEvent::GetDropItemCnt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?SetAcheronEventProcMultiCast@CAcheronGuardianEvent@@QAEXH@Z
_TEXT	SEGMENT
_bABInitState$ = 8					; size = 4
?SetAcheronEventProcMultiCast@CAcheronGuardianEvent@@QAEXH@Z PROC ; CAcheronGuardianEvent::SetAcheronEventProcMultiCast, COMDAT
; _this$ = ecx

; 294  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 295  : 	this->m_bAEInitState = bABInitState;

  00003	8b 45 08	 mov	 eax, DWORD PTR _bABInitState$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 296  : 	this->GDReqAcheronEventProcMultiCast(this->IsPlayStart());

  00008	0f b6 41 0c	 movzx	 eax, BYTE PTR [ecx+12]
  0000c	89 45 08	 mov	 DWORD PTR _bABInitState$[ebp], eax

; 297  : }

  0000f	5d		 pop	 ebp

; 296  : 	this->GDReqAcheronEventProcMultiCast(this->IsPlayStart());

  00010	e9 00 00 00 00	 jmp	 ?GDReqAcheronEventProcMultiCast@CAcheronGuardianEvent@@QAEXE@Z ; CAcheronGuardianEvent::GDReqAcheronEventProcMultiCast
?SetAcheronEventProcMultiCast@CAcheronGuardianEvent@@QAEXH@Z ENDP ; CAcheronGuardianEvent::SetAcheronEventProcMultiCast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?LoadScriptAcheronEvent@CAcheronGuardianEvent@@QAEHPAD@Z
_TEXT	SEGMENT
_pRET$1 = -20						; size = 12
_nTempGroupNumber$1$ = -8				; size = 4
_nTempGroupNumber$1$ = -8				; size = 4
_this$1$ = -4						; size = 4
_iDayOfWeekCycleCnt$1$ = 8				; size = 4
_lpszFileName$ = 8					; size = 4
?LoadScriptAcheronEvent@CAcheronGuardianEvent@@QAEHPAD@Z PROC ; CAcheronGuardianEvent::LoadScriptAcheronEvent, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 35   : 	if (lpszFileName == NULL || !strcmp(lpszFileName, ""))

  00008	8b 75 08	 mov	 esi, DWORD PTR _lpszFileName$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00010	85 f6		 test	 esi, esi
  00012	0f 84 02 08 00
	00		 je	 $LN21@LoadScript
  00018	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0001d	8b c6		 mov	 eax, esi
  0001f	90		 npad	 1
$LL113@LoadScript:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	3a 0a		 cmp	 cl, BYTE PTR [edx]
  00024	75 1a		 jne	 SHORT $LN114@LoadScript
  00026	84 c9		 test	 cl, cl
  00028	74 12		 je	 SHORT $LN115@LoadScript
  0002a	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0002d	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  00030	75 0e		 jne	 SHORT $LN114@LoadScript
  00032	83 c0 02	 add	 eax, 2
  00035	83 c2 02	 add	 edx, 2
  00038	84 c9		 test	 cl, cl
  0003a	75 e4		 jne	 SHORT $LL113@LoadScript
$LN115@LoadScript:
  0003c	33 c0		 xor	 eax, eax
  0003e	eb 05		 jmp	 SHORT $LN116@LoadScript
$LN114@LoadScript:
  00040	1b c0		 sbb	 eax, eax
  00042	83 c8 01	 or	 eax, 1
$LN116@LoadScript:
  00045	85 c0		 test	 eax, eax
  00047	0f 84 cd 07 00
	00		 je	 $LN21@LoadScript

; 38   : 		return 0;
; 39   : 	}
; 40   : 
; 41   : 	SMDFile = fopen(lpszFileName, "r");

  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00052	56		 push	 esi
  00053	e8 00 00 00 00	 call	 _fopen
  00058	83 c4 08	 add	 esp, 8
  0005b	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 42   : 
; 43   : 	if (!SMDFile)

  00060	85 c0		 test	 eax, eax
  00062	75 17		 jne	 SHORT $LN22@LoadScript

; 44   : 	{
; 45   : 		MsgBox("[AcheronGuardianEvent] file load error - fopen() : %s");

  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@MPEIMLJB@?$FLAcheronGuardianEvent?$FN?5file?5load@
  00069	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0006e	83 c4 04	 add	 esp, 4

; 241  : 						return 0;

  00071	33 c0		 xor	 eax, eax
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 290  : 	return 0;
; 291  : }

  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
$LN22@LoadScript:
  0007b	57		 push	 edi

; 46   : 		return 0;
; 47   : 	}
; 48   : 
; 49   : 	int type = -1;
; 50   : 	int iDayOfWeekCycleCnt = 0;

  0007c	33 ff		 xor	 edi, edi
  0007e	89 7d 08	 mov	 DWORD PTR _iDayOfWeekCycleCnt$1$[ebp], edi

; 51   : 
; 52   : 	while (true)
; 53   : 	{
; 54   : 		SMDToken Token = GetToken();

  00081	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 55   : 
; 56   : 		if (Token == END)

  00086	83 f8 02	 cmp	 eax, 2
  00089	0f 84 3a 05 00
	00		 je	 $LN86@LoadScript
  0008f	90		 npad	 1
$LL2@LoadScript:

; 57   : 		{
; 58   : 			break;
; 59   : 		}
; 60   : 
; 61   : 		type = TokenNumber;

  00090	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA

; 62   : 
; 63   : 		if (Token == NUMBER)

  00098	83 f8 01	 cmp	 eax, 1
  0009b	0f 85 1a 05 00
	00		 jne	 $LN85@LoadScript

; 64   : 		{
; 65   : 			if (type == 1)

  000a1	3b c8		 cmp	 ecx, eax
  000a3	0f 85 98 00 00
	00		 jne	 $LN25@LoadScript

; 66   : 			{
; 67   : 				while (true)
; 68   : 				{
; 69   : 					Token = GetToken();

  000a9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 70   : 
; 71   : 					if (!strcmp("end", TokenString))

  000ae	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  000b3	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL117@LoadScript:
  000b8	8a 10		 mov	 dl, BYTE PTR [eax]
  000ba	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000bc	75 1a		 jne	 SHORT $LN118@LoadScript
  000be	84 d2		 test	 dl, dl
  000c0	74 12		 je	 SHORT $LN119@LoadScript
  000c2	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000c5	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000c8	75 0e		 jne	 SHORT $LN118@LoadScript
  000ca	83 c0 02	 add	 eax, 2
  000cd	83 c1 02	 add	 ecx, 2
  000d0	84 d2		 test	 dl, dl
  000d2	75 e4		 jne	 SHORT $LL117@LoadScript
$LN119@LoadScript:
  000d4	33 c0		 xor	 eax, eax
  000d6	eb 05		 jmp	 SHORT $LN120@LoadScript
$LN118@LoadScript:
  000d8	1b c0		 sbb	 eax, eax
  000da	83 c8 01	 or	 eax, 1
$LN120@LoadScript:
  000dd	85 c0		 test	 eax, eax
  000df	0f 84 d6 04 00
	00		 je	 $LN85@LoadScript

; 66   : 			{
; 67   : 				while (true)
; 68   : 				{
; 69   : 					Token = GetToken();

  000e5	8d 77 06	 lea	 esi, DWORD PTR [edi+6]
  000e8	8d 34 b3	 lea	 esi, DWORD PTR [ebx+esi*4]
  000eb	0f 1f 44 00 00	 npad	 5
$LL4@LoadScript:

; 72   : 					{
; 73   : 						break;
; 74   : 					}
; 75   : 
; 76   : 					this->m_iDayOfWeekCycle[iDayOfWeekCycleCnt] = TokenNumber;

  000f0	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 77   : 					iDayOfWeekCycleCnt++;

  000f8	47		 inc	 edi
  000f9	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  000fc	89 46 fc	 mov	 DWORD PTR [esi-4], eax
  000ff	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00104	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00109	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0010e	66 90		 npad	 2
$LL121@LoadScript:

; 70   : 
; 71   : 					if (!strcmp("end", TokenString))

  00110	8a 10		 mov	 dl, BYTE PTR [eax]
  00112	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00114	75 1a		 jne	 SHORT $LN122@LoadScript
  00116	84 d2		 test	 dl, dl
  00118	74 12		 je	 SHORT $LN123@LoadScript
  0011a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0011d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00120	75 0e		 jne	 SHORT $LN122@LoadScript
  00122	83 c0 02	 add	 eax, 2
  00125	83 c1 02	 add	 ecx, 2
  00128	84 d2		 test	 dl, dl
  0012a	75 e4		 jne	 SHORT $LL121@LoadScript
$LN123@LoadScript:
  0012c	33 c0		 xor	 eax, eax
  0012e	eb 05		 jmp	 SHORT $LN124@LoadScript
$LN122@LoadScript:
  00130	1b c0		 sbb	 eax, eax
  00132	83 c8 01	 or	 eax, 1
$LN124@LoadScript:
  00135	85 c0		 test	 eax, eax
  00137	75 b7		 jne	 SHORT $LL4@LoadScript
  00139	89 7d 08	 mov	 DWORD PTR _iDayOfWeekCycleCnt$1$[ebp], edi

; 78   : 				}
; 79   : 			}
; 80   : 			else if (type == 2)

  0013c	e9 7a 04 00 00	 jmp	 $LN85@LoadScript
$LN25@LoadScript:
  00141	83 f9 02	 cmp	 ecx, 2
  00144	0f 85 a4 00 00
	00		 jne	 $LN28@LoadScript

; 81   : 			{
; 82   : 				while (true)
; 83   : 				{
; 84   : 					Token = GetToken();

  0014a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 85   : 
; 86   : 					if (!strcmp("end", TokenString))

  0014f	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00154	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00159	0f 1f 80 00 00
	00 00		 npad	 7
$LL125@LoadScript:
  00160	8a 10		 mov	 dl, BYTE PTR [eax]
  00162	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00164	75 1a		 jne	 SHORT $LN126@LoadScript
  00166	84 d2		 test	 dl, dl
  00168	74 12		 je	 SHORT $LN127@LoadScript
  0016a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0016d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00170	75 0e		 jne	 SHORT $LN126@LoadScript
  00172	83 c0 02	 add	 eax, 2
  00175	83 c1 02	 add	 ecx, 2
  00178	84 d2		 test	 dl, dl
  0017a	75 e4		 jne	 SHORT $LL125@LoadScript
$LN127@LoadScript:
  0017c	33 c0		 xor	 eax, eax
  0017e	eb 05		 jmp	 SHORT $LN128@LoadScript
$LN126@LoadScript:
  00180	1b c0		 sbb	 eax, eax
  00182	83 c8 01	 or	 eax, 1
$LN128@LoadScript:
  00185	85 c0		 test	 eax, eax
  00187	0f 84 2e 04 00
	00		 je	 $LN85@LoadScript
  0018d	0f 1f 00	 npad	 3
$LL6@LoadScript:

; 87   : 					{
; 88   : 						break;
; 89   : 					}
; 90   : 			
; 91   : 					int iAB_PlayTimeMin = TokenNumber;

  00190	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA

; 92   : 					Token = GetToken();

  00198	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 93   : 					int iAB_ChCloseMin = TokenNumber;
; 94   : 					this->m_iAB_PlayTimeMin = iAB_PlayTimeMin;

  0019d	89 73 10	 mov	 DWORD PTR [ebx+16], esi
  001a0	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 95   : 					this->m_iAB_ChCloseMin = iAB_ChCloseMin;

  001a8	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  001ab	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  001b0	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  001b5	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  001ba	66 0f 1f 44 00
	00		 npad	 6
$LL129@LoadScript:

; 85   : 
; 86   : 					if (!strcmp("end", TokenString))

  001c0	8a 10		 mov	 dl, BYTE PTR [eax]
  001c2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  001c4	75 1a		 jne	 SHORT $LN130@LoadScript
  001c6	84 d2		 test	 dl, dl
  001c8	74 12		 je	 SHORT $LN131@LoadScript
  001ca	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  001cd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  001d0	75 0e		 jne	 SHORT $LN130@LoadScript
  001d2	83 c0 02	 add	 eax, 2
  001d5	83 c1 02	 add	 ecx, 2
  001d8	84 d2		 test	 dl, dl
  001da	75 e4		 jne	 SHORT $LL129@LoadScript
$LN131@LoadScript:
  001dc	33 c0		 xor	 eax, eax
  001de	eb 05		 jmp	 SHORT $LN132@LoadScript
$LN130@LoadScript:
  001e0	1b c0		 sbb	 eax, eax
  001e2	83 c8 01	 or	 eax, 1
$LN132@LoadScript:
  001e5	85 c0		 test	 eax, eax
  001e7	75 a7		 jne	 SHORT $LL6@LoadScript

; 96   : 				}
; 97   : 			}
; 98   : 			else if (type == 3)

  001e9	e9 cd 03 00 00	 jmp	 $LN85@LoadScript
$LN28@LoadScript:
  001ee	83 f9 03	 cmp	 ecx, 3
  001f1	0f 85 bd 00 00
	00		 jne	 $LN31@LoadScript

; 99   : 			{
; 100  : 				while (true)
; 101  : 				{
; 102  : 					Token = GetToken();

  001f7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 103  : 
; 104  : 					if (!strcmp("end", TokenString))

  001fc	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00201	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL133@LoadScript:
  00206	8a 10		 mov	 dl, BYTE PTR [eax]
  00208	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0020a	75 1a		 jne	 SHORT $LN134@LoadScript
  0020c	84 d2		 test	 dl, dl
  0020e	74 12		 je	 SHORT $LN135@LoadScript
  00210	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00213	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00216	75 0e		 jne	 SHORT $LN134@LoadScript
  00218	83 c0 02	 add	 eax, 2
  0021b	83 c1 02	 add	 ecx, 2
  0021e	84 d2		 test	 dl, dl
  00220	75 e4		 jne	 SHORT $LL133@LoadScript
$LN135@LoadScript:
  00222	33 c0		 xor	 eax, eax
  00224	eb 05		 jmp	 SHORT $LN136@LoadScript
$LN134@LoadScript:
  00226	1b c0		 sbb	 eax, eax
  00228	83 c8 01	 or	 eax, 1
$LN136@LoadScript:
  0022b	85 c0		 test	 eax, eax
  0022d	0f 84 88 03 00
	00		 je	 $LN85@LoadScript
  00233	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL8@LoadScript:

; 105  : 					{
; 106  : 						break;
; 107  : 					}
; 108  : 
; 109  : 					_tagAcheronEventTime pRET;
; 110  : 					pRET.m_iHour = TokenNumber;

  00240	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00248	89 45 ec	 mov	 DWORD PTR _pRET$1[ebp], eax

; 111  : 					Token = GetToken();

  0024b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 112  : 					pRET.m_iMinute = TokenNumber;

  00250	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00258	89 45 f0	 mov	 DWORD PTR _pRET$1[ebp+4], eax

; 113  : 					Token = GetToken();

  0025b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 114  : 					pRET.m_btEvent = TokenNumber;

  00260	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 115  : 					this->m_vtAcheronEventTime.push_back(pRET);

  00268	8d 4b 34	 lea	 ecx, DWORD PTR [ebx+52]
  0026b	88 45 f4	 mov	 BYTE PTR _pRET$1[ebp+8], al
  0026e	8d 45 ec	 lea	 eax, DWORD PTR _pRET$1[ebp]
  00271	50		 push	 eax
  00272	e8 00 00 00 00	 call	 ?push_back@?$vector@U_tagAcheronEventTime@@V?$allocator@U_tagAcheronEventTime@@@std@@@std@@QAEXABU_tagAcheronEventTime@@@Z ; std::vector<_tagAcheronEventTime,std::allocator<_tagAcheronEventTime> >::push_back
  00277	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0027c	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00281	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL137@LoadScript:

; 103  : 
; 104  : 					if (!strcmp("end", TokenString))

  00286	8a 10		 mov	 dl, BYTE PTR [eax]
  00288	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0028a	75 1a		 jne	 SHORT $LN138@LoadScript
  0028c	84 d2		 test	 dl, dl
  0028e	74 12		 je	 SHORT $LN139@LoadScript
  00290	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00293	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00296	75 0e		 jne	 SHORT $LN138@LoadScript
  00298	83 c0 02	 add	 eax, 2
  0029b	83 c1 02	 add	 ecx, 2
  0029e	84 d2		 test	 dl, dl
  002a0	75 e4		 jne	 SHORT $LL137@LoadScript
$LN139@LoadScript:
  002a2	33 c0		 xor	 eax, eax
  002a4	eb 05		 jmp	 SHORT $LN140@LoadScript
$LN138@LoadScript:
  002a6	1b c0		 sbb	 eax, eax
  002a8	83 c8 01	 or	 eax, 1
$LN140@LoadScript:
  002ab	85 c0		 test	 eax, eax
  002ad	75 91		 jne	 SHORT $LL8@LoadScript

; 116  : 				}
; 117  : 			}
; 118  : 			else if (type == 4)

  002af	e9 07 03 00 00	 jmp	 $LN85@LoadScript
$LN31@LoadScript:
  002b4	83 f9 04	 cmp	 ecx, 4
  002b7	0f 85 ee 00 00
	00		 jne	 $LN34@LoadScript

; 119  : 			{
; 120  : 				while (true)
; 121  : 				{
; 122  : 					Token = GetToken();

  002bd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 123  : 
; 124  : 					if (!strcmp("end", TokenString))

  002c2	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  002c7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  002cc	0f 1f 40 00	 npad	 4
$LL141@LoadScript:
  002d0	8a 10		 mov	 dl, BYTE PTR [eax]
  002d2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  002d4	75 1a		 jne	 SHORT $LN142@LoadScript
  002d6	84 d2		 test	 dl, dl
  002d8	74 12		 je	 SHORT $LN143@LoadScript
  002da	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  002dd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  002e0	75 0e		 jne	 SHORT $LN142@LoadScript
  002e2	83 c0 02	 add	 eax, 2
  002e5	83 c1 02	 add	 ecx, 2
  002e8	84 d2		 test	 dl, dl
  002ea	75 e4		 jne	 SHORT $LL141@LoadScript
$LN143@LoadScript:
  002ec	33 c0		 xor	 eax, eax
  002ee	eb 05		 jmp	 SHORT $LN144@LoadScript
$LN142@LoadScript:
  002f0	1b c0		 sbb	 eax, eax
  002f2	83 c8 01	 or	 eax, 1
$LN144@LoadScript:
  002f5	85 c0		 test	 eax, eax
  002f7	0f 84 be 02 00
	00		 je	 $LN85@LoadScript
  002fd	0f 1f 00	 npad	 3
$LL10@LoadScript:

; 125  : 					{
; 126  : 						break;
; 127  : 					}
; 128  : 
; 129  : 					int nGourpNumber = (int)TokenNumber - 1;

  00300	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00308	8d 78 ff	 lea	 edi, DWORD PTR [eax-1]

; 130  : 
; 131  : 					if (nGourpNumber < 0 || nGourpNumber > 5)

  0030b	83 ff 05	 cmp	 edi, 5
  0030e	0f 87 ba 04 00
	00		 ja	 $LN76@LoadScript

; 134  : 						return 0;
; 135  : 					}
; 136  : 
; 137  : 					this->m_stObeliskInfo[nGourpNumber].m_iGroupNumber = TokenNumber;

  00314	8d 34 fd 00 00
	00 00		 lea	 esi, DWORD PTR [edi*8]
  0031b	2b f7		 sub	 esi, edi
  0031d	89 44 b3 48	 mov	 DWORD PTR [ebx+esi*4+72], eax

; 138  : 					this->m_stObeliskInfo[nGourpNumber].m_iAttrKind = 1;

  00321	c7 44 b3 4c 01
	00 00 00	 mov	 DWORD PTR [ebx+esi*4+76], 1

; 139  : 					Token = GetToken();

  00329	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 140  : 					this->m_stObeliskInfo[nGourpNumber].m_iMapIndex = TokenNumber;

  0032e	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00336	89 44 b3 50	 mov	 DWORD PTR [ebx+esi*4+80], eax

; 141  : 					Token = GetToken();

  0033a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 142  : 					this->m_stObeliskInfo[nGourpNumber].m_iPosX = TokenNumber;

  0033f	f3 0f 2c 15 00
	00 00 00	 cvttss2si edx, DWORD PTR ?TokenNumber@@3MA
  00347	8d 4f 03	 lea	 ecx, DWORD PTR [edi+3]
  0034a	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00351	2b c1		 sub	 eax, ecx
  00353	89 14 83	 mov	 DWORD PTR [ebx+eax*4], edx

; 143  : 					Token = GetToken();

  00356	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 144  : 					this->m_stObeliskInfo[nGourpNumber].m_iPosY = TokenNumber;

  0035b	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00363	89 44 b3 58	 mov	 DWORD PTR [ebx+esi*4+88], eax
  00367	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0036c	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00371	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL145@LoadScript:

; 123  : 
; 124  : 					if (!strcmp("end", TokenString))

  00376	8a 10		 mov	 dl, BYTE PTR [eax]
  00378	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0037a	75 1a		 jne	 SHORT $LN146@LoadScript
  0037c	84 d2		 test	 dl, dl
  0037e	74 12		 je	 SHORT $LN147@LoadScript
  00380	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00383	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00386	75 0e		 jne	 SHORT $LN146@LoadScript
  00388	83 c0 02	 add	 eax, 2
  0038b	83 c1 02	 add	 ecx, 2
  0038e	84 d2		 test	 dl, dl
  00390	75 e4		 jne	 SHORT $LL145@LoadScript
$LN147@LoadScript:
  00392	33 c0		 xor	 eax, eax
  00394	eb 05		 jmp	 SHORT $LN148@LoadScript
$LN146@LoadScript:
  00396	1b c0		 sbb	 eax, eax
  00398	83 c8 01	 or	 eax, 1
$LN148@LoadScript:
  0039b	85 c0		 test	 eax, eax
  0039d	0f 85 5d ff ff
	ff		 jne	 $LL10@LoadScript

; 145  : 				}
; 146  : 			}
; 147  : 			else if (type == 5)

  003a3	8b 7d 08	 mov	 edi, DWORD PTR _iDayOfWeekCycleCnt$1$[ebp]
  003a6	e9 10 02 00 00	 jmp	 $LN85@LoadScript
$LN34@LoadScript:
  003ab	83 f9 05	 cmp	 ecx, 5
  003ae	0f 85 de 00 00
	00		 jne	 $LN39@LoadScript

; 148  : 			{
; 149  : 				while (true)
; 150  : 				{
; 151  : 					Token = GetToken();

  003b4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 152  : 
; 153  : 					if (!strcmp("end", TokenString))

  003b9	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  003be	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL149@LoadScript:
  003c3	8a 10		 mov	 dl, BYTE PTR [eax]
  003c5	3a 11		 cmp	 dl, BYTE PTR [ecx]
  003c7	75 1a		 jne	 SHORT $LN150@LoadScript
  003c9	84 d2		 test	 dl, dl
  003cb	74 12		 je	 SHORT $LN151@LoadScript
  003cd	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  003d0	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  003d3	75 0e		 jne	 SHORT $LN150@LoadScript
  003d5	83 c0 02	 add	 eax, 2
  003d8	83 c1 02	 add	 ecx, 2
  003db	84 d2		 test	 dl, dl
  003dd	75 e4		 jne	 SHORT $LL149@LoadScript
$LN151@LoadScript:
  003df	33 c0		 xor	 eax, eax
  003e1	eb 05		 jmp	 SHORT $LN152@LoadScript
$LN150@LoadScript:
  003e3	1b c0		 sbb	 eax, eax
  003e5	83 c8 01	 or	 eax, 1
$LN152@LoadScript:
  003e8	85 c0		 test	 eax, eax
  003ea	0f 84 cb 01 00
	00		 je	 $LN85@LoadScript
$LL12@LoadScript:

; 154  : 					{
; 155  : 						break;
; 156  : 					}
; 157  : 					
; 158  : 					int nTempGourpNumber = TokenNumber;

  003f0	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 159  : 
; 160  : 					if (nTempGourpNumber < 0 || nTempGourpNumber > 50)

  003f8	83 f8 32	 cmp	 eax, 50			; 00000032H
  003fb	0f 87 00 04 00
	00		 ja	 $LN55@LoadScript

; 161  : 					{
; 162  : 						LogAdd("[AcheronGuardianEvent][MonsterGroupRegen] Invalid monster groupNumber");
; 163  : 						return 0;
; 164  : 					}
; 165  : 
; 166  : 					this->m_stMonsterGroupInfo[nTempGourpNumber].m_nGroupNumber = nTempGourpNumber;

  00401	8d 34 c5 00 00
	00 00		 lea	 esi, DWORD PTR [eax*8]
  00408	2b f0		 sub	 esi, eax
  0040a	c1 e6 05	 shl	 esi, 5
  0040d	89 84 1e 60 15
	00 00		 mov	 DWORD PTR [esi+ebx+5472], eax

; 167  : 					Token = GetToken();

  00414	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 168  : 					this->m_stMonsterGroupInfo[nTempGourpNumber].m_nMapNumber = TokenNumber;

  00419	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00421	89 84 1e 64 15
	00 00		 mov	 DWORD PTR [esi+ebx+5476], eax

; 169  : 					Token = GetToken();

  00428	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 170  : 					this->m_stMonsterGroupInfo[nTempGourpNumber].m_nCnt = TokenNumber;

  0042d	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00435	89 84 1e 68 15
	00 00		 mov	 DWORD PTR [esi+ebx+5480], eax

; 171  : 					Token = GetToken();

  0043c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 172  : 					this->m_stMonsterGroupInfo[nTempGourpNumber].m_nRegenTimeMin = TokenNumber;

  00441	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00449	89 84 1e 70 15
	00 00		 mov	 DWORD PTR [esi+ebx+5488], eax
  00450	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00455	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0045a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0045f	90		 npad	 1
$LL153@LoadScript:

; 152  : 
; 153  : 					if (!strcmp("end", TokenString))

  00460	8a 10		 mov	 dl, BYTE PTR [eax]
  00462	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00464	75 1a		 jne	 SHORT $LN154@LoadScript
  00466	84 d2		 test	 dl, dl
  00468	74 12		 je	 SHORT $LN155@LoadScript
  0046a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0046d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00470	75 0e		 jne	 SHORT $LN154@LoadScript
  00472	83 c0 02	 add	 eax, 2
  00475	83 c1 02	 add	 ecx, 2
  00478	84 d2		 test	 dl, dl
  0047a	75 e4		 jne	 SHORT $LL153@LoadScript
$LN155@LoadScript:
  0047c	33 c0		 xor	 eax, eax
  0047e	eb 05		 jmp	 SHORT $LN156@LoadScript
$LN154@LoadScript:
  00480	1b c0		 sbb	 eax, eax
  00482	83 c8 01	 or	 eax, 1
$LN156@LoadScript:
  00485	85 c0		 test	 eax, eax
  00487	0f 85 63 ff ff
	ff		 jne	 $LL12@LoadScript

; 173  : 				}
; 174  : 			}
; 175  : 			else if (type == 6)

  0048d	e9 29 01 00 00	 jmp	 $LN85@LoadScript
$LN39@LoadScript:
  00492	83 f9 06	 cmp	 ecx, 6
  00495	0f 85 47 01 00
	00		 jne	 $LN44@LoadScript

; 176  : 			{
; 177  : 				int nAreaCnt = 0;
; 178  : 				int nTempGroupNumber = 0;

  0049b	33 f6		 xor	 esi, esi
  0049d	33 db		 xor	 ebx, ebx
  0049f	89 75 f8	 mov	 DWORD PTR _nTempGroupNumber$1$[ebp], esi

; 179  : 
; 180  : 				while (true)
; 181  : 				{
; 182  : 					Token = GetToken();

  004a2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 183  : 
; 184  : 					if (!strcmp("end", TokenString))

  004a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  004ac	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL157@LoadScript:
  004b1	8a 10		 mov	 dl, BYTE PTR [eax]
  004b3	3a 11		 cmp	 dl, BYTE PTR [ecx]
  004b5	75 1a		 jne	 SHORT $LN158@LoadScript
  004b7	84 d2		 test	 dl, dl
  004b9	74 12		 je	 SHORT $LN159@LoadScript
  004bb	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  004be	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  004c1	75 0e		 jne	 SHORT $LN158@LoadScript
  004c3	83 c0 02	 add	 eax, 2
  004c6	83 c1 02	 add	 ecx, 2
  004c9	84 d2		 test	 dl, dl
  004cb	75 e4		 jne	 SHORT $LL157@LoadScript
$LN159@LoadScript:
  004cd	33 c0		 xor	 eax, eax
  004cf	eb 05		 jmp	 SHORT $LN160@LoadScript
$LN158@LoadScript:
  004d1	1b c0		 sbb	 eax, eax
  004d3	83 c8 01	 or	 eax, 1
$LN160@LoadScript:
  004d6	85 c0		 test	 eax, eax
  004d8	0f 84 da 00 00
	00		 je	 $LN182@LoadScript
  004de	66 90		 npad	 2
$LL14@LoadScript:

; 185  : 					{
; 186  : 						break;
; 187  : 					}
; 188  : 
; 189  : 					int nGroupNumber = TokenNumber;

  004e0	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 190  : 					
; 191  : 					if (nTempGroupNumber != nGroupNumber)

  004e8	3b f0		 cmp	 esi, eax
  004ea	74 05		 je	 SHORT $LN47@LoadScript

; 192  : 					{
; 193  : 						nTempGroupNumber = nGroupNumber;

  004ec	89 45 f8	 mov	 DWORD PTR _nTempGroupNumber$1$[ebp], eax

; 194  : 						nAreaCnt = 0;

  004ef	33 db		 xor	 ebx, ebx
$LN47@LoadScript:

; 195  : 					}
; 196  : 
; 197  : 					if (nGroupNumber < 0 || nGroupNumber > 50)

  004f1	83 f8 32	 cmp	 eax, 50			; 00000032H
  004f4	0f 87 07 03 00
	00		 ja	 $LN55@LoadScript

; 198  : 					{
; 199  : 						LogAdd("[AcheronGuardianEvent][MonsterGroupRegen] Invalid monster groupNumber");
; 200  : 						return 0;
; 201  : 					}
; 202  : 
; 203  : 					this->m_stMonsterPosition[nGroupNumber].m_nGroupNumber = nGroupNumber;

  004fa	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
  004fd	69 f8 1c 04 00
	00		 imul	 edi, eax, 1052
  00503	89 84 37 d4 00
	00 00		 mov	 DWORD PTR [edi+esi+212], eax

; 204  : 					Token = GetToken();

  0050a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 205  : 					this->m_stMonsterPosition[nGroupNumber].m_stRegenArea[nAreaCnt].m_nBeginX = TokenNumber;

  0050f	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA
  00517	8d 43 0e	 lea	 eax, DWORD PTR [ebx+14]
  0051a	c1 e0 04	 shl	 eax, 4
  0051d	03 c7		 add	 eax, edi
  0051f	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 206  : 					Token = GetToken();

  00522	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 207  : 					this->m_stMonsterPosition[nGroupNumber].m_stRegenArea[nAreaCnt].m_nBeginY = TokenNumber;

  00527	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0052f	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00532	8b f3		 mov	 esi, ebx
  00534	c1 e6 04	 shl	 esi, 4
  00537	03 f7		 add	 esi, edi
  00539	89 84 0e e4 00
	00 00		 mov	 DWORD PTR [esi+ecx+228], eax

; 208  : 					Token = GetToken();

  00540	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 209  : 					this->m_stMonsterPosition[nGroupNumber].m_stRegenArea[nAreaCnt].m_nEndX = TokenNumber;

  00545	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0054d	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00550	89 84 0e e8 00
	00 00		 mov	 DWORD PTR [esi+ecx+232], eax

; 210  : 					Token = GetToken();

  00557	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 211  : 					this->m_stMonsterPosition[nGroupNumber].m_stRegenArea[nAreaCnt].m_nEndY = TokenNumber;

  0055c	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00564	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]

; 212  : 					nAreaCnt++;

  00567	43		 inc	 ebx
  00568	89 84 0e ec 00
	00 00		 mov	 DWORD PTR [esi+ecx+236], eax

; 213  : 					this->m_stMonsterPosition[nGroupNumber].m_nRegenAreaCnt = nAreaCnt;

  0056f	89 9c 0f d8 00
	00 00		 mov	 DWORD PTR [edi+ecx+216], ebx
  00576	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0057b	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00580	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL161@LoadScript:

; 183  : 
; 184  : 					if (!strcmp("end", TokenString))

  00585	8a 10		 mov	 dl, BYTE PTR [eax]
  00587	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00589	75 1a		 jne	 SHORT $LN162@LoadScript
  0058b	84 d2		 test	 dl, dl
  0058d	74 12		 je	 SHORT $LN163@LoadScript
  0058f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00592	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00595	75 0e		 jne	 SHORT $LN162@LoadScript
  00597	83 c0 02	 add	 eax, 2
  0059a	83 c1 02	 add	 ecx, 2
  0059d	84 d2		 test	 dl, dl
  0059f	75 e4		 jne	 SHORT $LL161@LoadScript
$LN163@LoadScript:
  005a1	33 c0		 xor	 eax, eax
  005a3	eb 05		 jmp	 SHORT $LN164@LoadScript
$LN162@LoadScript:
  005a5	1b c0		 sbb	 eax, eax
  005a7	83 c8 01	 or	 eax, 1
$LN164@LoadScript:
  005aa	8b 75 f8	 mov	 esi, DWORD PTR _nTempGroupNumber$1$[ebp]
  005ad	85 c0		 test	 eax, eax
  005af	0f 85 2b ff ff
	ff		 jne	 $LL14@LoadScript
$LN184@LoadScript:

; 226  : 					{
; 227  : 						break;

  005b5	8b 7d 08	 mov	 edi, DWORD PTR _iDayOfWeekCycleCnt$1$[ebp]
$LN182@LoadScript:
  005b8	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN85@LoadScript:

; 51   : 
; 52   : 	while (true)
; 53   : 	{
; 54   : 		SMDToken Token = GetToken();

  005bb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 55   : 
; 56   : 		if (Token == END)

  005c0	83 f8 02	 cmp	 eax, 2
  005c3	0f 85 c7 fa ff
	ff		 jne	 $LL2@LoadScript
$LN86@LoadScript:

; 284  : 				}
; 285  : 			}
; 286  : 		}
; 287  : 	}
; 288  : 	
; 289  : 	fclose(SMDFile);

  005c9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  005cf	e8 00 00 00 00	 call	 _fclose
  005d4	83 c4 04	 add	 esp, 4
  005d7	33 c0		 xor	 eax, eax
  005d9	5f		 pop	 edi
  005da	5e		 pop	 esi
  005db	5b		 pop	 ebx

; 290  : 	return 0;
; 291  : }

  005dc	8b e5		 mov	 esp, ebp
  005de	5d		 pop	 ebp
  005df	c2 04 00	 ret	 4
$LN44@LoadScript:

; 214  : 				}
; 215  : 			}
; 216  : 			else if (type == 7)

  005e2	83 f9 07	 cmp	 ecx, 7
  005e5	0f 85 32 01 00
	00		 jne	 $LN50@LoadScript

; 217  : 			{
; 218  : 				int nArrayIndex = 0;
; 219  : 				int nTempGroupNumber = 0;

  005eb	33 f6		 xor	 esi, esi
  005ed	33 db		 xor	 ebx, ebx
  005ef	89 75 f8	 mov	 DWORD PTR _nTempGroupNumber$1$[ebp], esi

; 220  : 
; 221  : 				while (true)
; 222  : 				{
; 223  : 					Token = GetToken();

  005f2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 224  : 
; 225  : 					if (!strcmp("end", TokenString))

  005f7	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  005fc	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL165@LoadScript:
  00601	8a 10		 mov	 dl, BYTE PTR [eax]
  00603	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00605	75 1a		 jne	 SHORT $LN166@LoadScript
  00607	84 d2		 test	 dl, dl
  00609	74 12		 je	 SHORT $LN167@LoadScript
  0060b	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0060e	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00611	75 0e		 jne	 SHORT $LN166@LoadScript
  00613	83 c0 02	 add	 eax, 2
  00616	83 c1 02	 add	 ecx, 2
  00619	84 d2		 test	 dl, dl
  0061b	75 e4		 jne	 SHORT $LL165@LoadScript
$LN167@LoadScript:
  0061d	33 c0		 xor	 eax, eax
  0061f	eb 05		 jmp	 SHORT $LN168@LoadScript
$LN166@LoadScript:
  00621	1b c0		 sbb	 eax, eax
  00623	83 c8 01	 or	 eax, 1
$LN168@LoadScript:
  00626	85 c0		 test	 eax, eax
  00628	74 8e		 je	 SHORT $LN182@LoadScript
  0062a	66 0f 1f 44 00
	00		 npad	 6
$LL16@LoadScript:

; 228  : 					}
; 229  : 						
; 230  : 					int nGroupNumber = TokenNumber;

  00630	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 231  : 					
; 232  : 					if (nTempGroupNumber != nGroupNumber)

  00638	3b f0		 cmp	 esi, eax
  0063a	74 05		 je	 SHORT $LN53@LoadScript

; 233  : 					{
; 234  : 						nTempGroupNumber = nGroupNumber;

  0063c	89 45 f8	 mov	 DWORD PTR _nTempGroupNumber$1$[ebp], eax

; 235  : 						nArrayIndex = 0;

  0063f	33 db		 xor	 ebx, ebx
$LN53@LoadScript:

; 236  : 					}
; 237  : 
; 238  : 					if (nGroupNumber < 0 || nGroupNumber > 50)

  00641	85 c0		 test	 eax, eax
  00643	0f 88 b8 01 00
	00		 js	 $LN55@LoadScript
  00649	83 f8 32	 cmp	 eax, 50			; 00000032H
  0064c	0f 8f af 01 00
	00		 jg	 $LN55@LoadScript

; 242  : 					}
; 243  : 
; 244  : 					if (this->m_stMonsterPosition[nGroupNumber].m_nGroupNumber < 0)

  00652	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00655	69 f8 1c 04 00
	00		 imul	 edi, eax, 1052
  0065b	83 bc 0f d4 00
	00 00 00	 cmp	 DWORD PTR [edi+ecx+212], 0
  00663	0f 8c 7e 01 00
	00		 jl	 $LN83@LoadScript

; 247  : 						return 0;
; 248  : 					}
; 249  : 
; 250  : 					Token = GetToken();

  00669	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 251  : 					this->m_stMonsterPosition[nGroupNumber].m_stMonsterIndexInfo[nArrayIndex].m_nMonsterIndex = TokenNumber;

  0066e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00671	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  00674	8d 34 87	 lea	 esi, DWORD PTR [edi+eax*4]
  00677	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0067f	89 84 0e 00 04
	00 00		 mov	 DWORD PTR [esi+ecx+1024], eax

; 252  : 					Token = GetToken();

  00686	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 253  : 					this->m_stMonsterPosition[nGroupNumber].m_stMonsterIndexInfo[nArrayIndex].m_nGenSqe = TokenNumber;

  0068b	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00693	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00696	89 84 0e 04 04
	00 00		 mov	 DWORD PTR [esi+ecx+1028], eax

; 254  : 					Token = GetToken();

  0069d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 255  : 					this->m_stMonsterPosition[nGroupNumber].m_stMonsterIndexInfo[nArrayIndex].m_nMonAttr = TokenNumber;

  006a2	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA
  006aa	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  006ad	8d 43 56	 lea	 eax, DWORD PTR [ebx+86]
  006b0	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]

; 256  : 					nArrayIndex++;

  006b3	43		 inc	 ebx
  006b4	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  006b7	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 257  : 
; 258  : 					if (nArrayIndex >= 20)

  006ba	83 fb 14	 cmp	 ebx, 20			; 00000014H
  006bd	7d 4b		 jge	 SHORT $LN84@LoadScript

; 261  : 						break;
; 262  : 					}
; 263  : 
; 264  : 					this->m_stMonsterPosition[nGroupNumber].m_nMonsterKindCnt = nArrayIndex;

  006bf	89 9c 17 dc 00
	00 00		 mov	 DWORD PTR [edi+edx+220], ebx
  006c6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  006cb	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  006d0	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL169@LoadScript:

; 224  : 
; 225  : 					if (!strcmp("end", TokenString))

  006d5	8a 10		 mov	 dl, BYTE PTR [eax]
  006d7	3a 11		 cmp	 dl, BYTE PTR [ecx]
  006d9	75 1a		 jne	 SHORT $LN170@LoadScript
  006db	84 d2		 test	 dl, dl
  006dd	74 12		 je	 SHORT $LN171@LoadScript
  006df	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  006e2	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  006e5	75 0e		 jne	 SHORT $LN170@LoadScript
  006e7	83 c0 02	 add	 eax, 2
  006ea	83 c1 02	 add	 ecx, 2
  006ed	84 d2		 test	 dl, dl
  006ef	75 e4		 jne	 SHORT $LL169@LoadScript
$LN171@LoadScript:
  006f1	33 c0		 xor	 eax, eax
  006f3	eb 05		 jmp	 SHORT $LN172@LoadScript
$LN170@LoadScript:
  006f5	1b c0		 sbb	 eax, eax
  006f7	83 c8 01	 or	 eax, 1
$LN172@LoadScript:
  006fa	8b 75 f8	 mov	 esi, DWORD PTR _nTempGroupNumber$1$[ebp]
  006fd	85 c0		 test	 eax, eax
  006ff	0f 85 2b ff ff
	ff		 jne	 $LL16@LoadScript

; 226  : 					{
; 227  : 						break;

  00705	e9 ab fe ff ff	 jmp	 $LN184@LoadScript
$LN84@LoadScript:

; 259  : 					{
; 260  : 						LogAdd("[AcheronGuardianEvent][MonsterGroupRegen] Out of Max MonsterKindIndex ");

  0070a	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@COGMNBGC@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@
  0070f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00715	83 c4 04	 add	 esp, 4

; 265  : 				}
; 266  : 			}
; 267  : 			else if (type == 8)

  00718	e9 98 fe ff ff	 jmp	 $LN184@LoadScript
$LN50@LoadScript:
  0071d	83 f9 08	 cmp	 ecx, 8
  00720	0f 85 95 fe ff
	ff		 jne	 $LN85@LoadScript

; 270  : 
; 271  : 				while (true)
; 272  : 				{
; 273  : 					Token = GetToken();

  00726	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 274  : 
; 275  : 					if (!strcmp("end", TokenString))

  0072b	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00730	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL173@LoadScript:
  00735	8a 10		 mov	 dl, BYTE PTR [eax]
  00737	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00739	75 1a		 jne	 SHORT $LN174@LoadScript
  0073b	84 d2		 test	 dl, dl
  0073d	74 12		 je	 SHORT $LN175@LoadScript
  0073f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00742	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00745	75 0e		 jne	 SHORT $LN174@LoadScript
  00747	83 c0 02	 add	 eax, 2
  0074a	83 c1 02	 add	 ecx, 2
  0074d	84 d2		 test	 dl, dl
  0074f	75 e4		 jne	 SHORT $LL173@LoadScript
$LN175@LoadScript:
  00751	33 c0		 xor	 eax, eax
  00753	eb 05		 jmp	 SHORT $LN176@LoadScript
$LN174@LoadScript:
  00755	1b c0		 sbb	 eax, eax
  00757	83 c8 01	 or	 eax, 1
$LN176@LoadScript:
  0075a	85 c0		 test	 eax, eax
  0075c	0f 84 59 fe ff
	ff		 je	 $LN85@LoadScript

; 268  : 			{
; 269  : 				int iCount = 0;

  00762	8d b3 c4 19 00
	00		 lea	 esi, DWORD PTR [ebx+6596]
  00768	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL18@LoadScript:

; 276  : 					{
; 277  : 						break;
; 278  : 					}
; 279  : 
; 280  : 					this->m_stItemDropCntRate[iCount].iCnt = TokenNumber;

  00770	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00778	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 281  : 					Token = GetToken();

  0077b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 282  : 					this->m_stItemDropCntRate[iCount].iRate = TokenNumber;

  00780	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 283  : 					iCount++;

  00788	8d 76 08	 lea	 esi, DWORD PTR [esi+8]
  0078b	89 46 f8	 mov	 DWORD PTR [esi-8], eax
  0078e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00793	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00798	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0079d	0f 1f 00	 npad	 3
$LL177@LoadScript:

; 274  : 
; 275  : 					if (!strcmp("end", TokenString))

  007a0	8a 10		 mov	 dl, BYTE PTR [eax]
  007a2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  007a4	75 1a		 jne	 SHORT $LN178@LoadScript
  007a6	84 d2		 test	 dl, dl
  007a8	74 12		 je	 SHORT $LN179@LoadScript
  007aa	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  007ad	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  007b0	75 0e		 jne	 SHORT $LN178@LoadScript
  007b2	83 c0 02	 add	 eax, 2
  007b5	83 c1 02	 add	 ecx, 2
  007b8	84 d2		 test	 dl, dl
  007ba	75 e4		 jne	 SHORT $LL177@LoadScript
$LN179@LoadScript:
  007bc	33 c0		 xor	 eax, eax
  007be	eb 05		 jmp	 SHORT $LN180@LoadScript
$LN178@LoadScript:
  007c0	1b c0		 sbb	 eax, eax
  007c2	83 c8 01	 or	 eax, 1
$LN180@LoadScript:
  007c5	85 c0		 test	 eax, eax
  007c7	75 a7		 jne	 SHORT $LL18@LoadScript
  007c9	e9 ed fd ff ff	 jmp	 $LN85@LoadScript
$LN76@LoadScript:

; 132  : 					{
; 133  : 						LogAdd("[ArcaBattle][MonsterGroupRegen] Invalid Aura groupNumber");

  007ce	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@MPLGDGHP@?$FLArcaBattle?$FN?$FLMonsterGroupRegen?$FN?5@
  007d3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 239  : 					{
; 240  : 						LogAdd("[AcheronGuardianEvent][MonsterGroupRegen] Invalid monster groupNumber");

  007d9	83 c4 04	 add	 esp, 4

; 241  : 						return 0;

  007dc	33 c0		 xor	 eax, eax
  007de	5f		 pop	 edi
  007df	5e		 pop	 esi
  007e0	5b		 pop	 ebx

; 290  : 	return 0;
; 291  : }

  007e1	8b e5		 mov	 esp, ebp
  007e3	5d		 pop	 ebp
  007e4	c2 04 00	 ret	 4
$LN83@LoadScript:

; 245  : 					{
; 246  : 						LogAdd("[AcheronGuardianEvent][MonsterGroupRegen] Invalid groupNumber(%d)", nGroupNumber);

  007e7	50		 push	 eax
  007e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FLBCMFCC@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@
  007ed	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  007f3	83 c4 08	 add	 esp, 8
  007f6	33 c0		 xor	 eax, eax
  007f8	5f		 pop	 edi
  007f9	5e		 pop	 esi
  007fa	5b		 pop	 ebx

; 290  : 	return 0;
; 291  : }

  007fb	8b e5		 mov	 esp, ebp
  007fd	5d		 pop	 ebp
  007fe	c2 04 00	 ret	 4
$LN55@LoadScript:

; 239  : 					{
; 240  : 						LogAdd("[AcheronGuardianEvent][MonsterGroupRegen] Invalid monster groupNumber");

  00801	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@NPJIIJLH@?$FLAcheronGuardianEvent?$FN?$FLMonsterGr@
  00806	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0080c	83 c4 04	 add	 esp, 4

; 241  : 						return 0;

  0080f	33 c0		 xor	 eax, eax
  00811	5f		 pop	 edi
  00812	5e		 pop	 esi
  00813	5b		 pop	 ebx

; 290  : 	return 0;
; 291  : }

  00814	8b e5		 mov	 esp, ebp
  00816	5d		 pop	 ebp
  00817	c2 04 00	 ret	 4
$LN21@LoadScript:

; 36   : 	{
; 37   : 		MsgBox("[AcheronGuardianEvent] file load error - File Name Error");

  0081a	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@DAPPLEIO@?$FLAcheronGuardianEvent?$FN?5file?5load@
  0081f	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00824	83 c4 04	 add	 esp, 4

; 241  : 						return 0;

  00827	33 c0		 xor	 eax, eax
  00829	5e		 pop	 esi
  0082a	5b		 pop	 ebx

; 290  : 	return 0;
; 291  : }

  0082b	8b e5		 mov	 esp, ebp
  0082d	5d		 pop	 ebp
  0082e	c2 04 00	 ret	 4
?LoadScriptAcheronEvent@CAcheronGuardianEvent@@QAEHPAD@Z ENDP ; CAcheronGuardianEvent::LoadScriptAcheronEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ??1CAcheronGuardianEvent@@QAE@XZ
_TEXT	SEGMENT
??1CAcheronGuardianEvent@@QAE@XZ PROC			; CAcheronGuardianEvent::~CAcheronGuardianEvent, COMDAT
; _this$ = ecx

; 29   : {

  00000	56		 push	 esi

; 31   : }

  00001	8d 71 34	 lea	 esi, DWORD PTR [ecx+52]
  00004	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00005	8b 3e		 mov	 edi, DWORD PTR [esi]
  00007	85 ff		 test	 edi, edi
  00009	74 32		 je	 SHORT $LN7@CAcheronGu

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0000b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00013	2b cf		 sub	 ecx, edi
  00015	f7 e9		 imul	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00017	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00019	d1 fa		 sar	 edx, 1
  0001b	8b c2		 mov	 eax, edx
  0001d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00020	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00022	50		 push	 eax
  00023	57		 push	 edi
  00024	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_tagAcheronEventTime@@@std@@QAEXPAU_tagAcheronEventTime@@I@Z ; std::allocator<_tagAcheronEventTime>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00036	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN7@CAcheronGu:
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 31   : }

  0003f	c3		 ret	 0
??1CAcheronGuardianEvent@@QAE@XZ ENDP			; CAcheronGuardianEvent::~CAcheronGuardianEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ??0CAcheronGuardianEvent@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CAcheronGuardianEvent@@QAE@XZ PROC			; CAcheronGuardianEvent::CAcheronGuardianEvent, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b d1		 mov	 edx, ecx
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00009	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h

; 243  :     int m_iTICK_COUNT;

  00010	8d b2 d4 00 00
	00		 lea	 esi, DWORD PTR [edx+212]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00016	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], 0
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h

; 243  :     int m_iTICK_COUNT;

  0001d	bf 05 00 00 00	 mov	 edi, 5
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 482  : 		_Myend = pointer();

  00022	c7 42 3c 00 00
	00 00		 mov	 DWORD PTR [edx+60], 0
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 18   : {

  00029	89 55 fc	 mov	 DWORD PTR _this$[ebp], edx
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h

; 34   : 		this->m_iGroupNumber = 0;

  0002c	c7 42 48 00 00
	00 00		 mov	 DWORD PTR [edx+72], 0

; 35   : 		this->m_iAttrKind = 0;

  00033	c7 42 4c 00 00
	00 00		 mov	 DWORD PTR [edx+76], 0

; 36   : 		this->m_iMapIndex = 0;

  0003a	c7 42 50 00 00
	00 00		 mov	 DWORD PTR [edx+80], 0

; 37   : 		this->m_iPosX = 0;

  00041	c7 42 54 00 00
	00 00		 mov	 DWORD PTR [edx+84], 0

; 38   : 		this->m_iPosY = 0;

  00048	c7 42 58 00 00
	00 00		 mov	 DWORD PTR [edx+88], 0

; 39   : 		this->m_iMonsterNum = 0;

  0004f	c7 42 5c 00 00
	00 00		 mov	 DWORD PTR [edx+92], 0

; 40   : 		this->m_iMonIndex = -1;

  00056	c7 42 60 ff ff
	ff ff		 mov	 DWORD PTR [edx+96], -1
  0005d	c7 42 64 00 00
	00 00		 mov	 DWORD PTR [edx+100], 0
  00064	c7 42 68 00 00
	00 00		 mov	 DWORD PTR [edx+104], 0
  0006b	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0
  00072	c7 42 70 00 00
	00 00		 mov	 DWORD PTR [edx+112], 0
  00079	c7 42 74 00 00
	00 00		 mov	 DWORD PTR [edx+116], 0
  00080	c7 42 78 00 00
	00 00		 mov	 DWORD PTR [edx+120], 0
  00087	c7 42 7c ff ff
	ff ff		 mov	 DWORD PTR [edx+124], -1
  0008e	c7 82 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+128], 0
  00098	c7 82 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+132], 0
  000a2	c7 82 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+136], 0
  000ac	c7 82 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+140], 0
  000b6	c7 82 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+144], 0
  000c0	c7 82 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+148], 0
  000ca	c7 82 98 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [edx+152], -1
  000d4	c7 82 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+156], 0
  000de	c7 82 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+160], 0
  000e8	c7 82 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+164], 0
  000f2	c7 82 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+168], 0
  000fc	c7 82 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+172], 0
  00106	c7 82 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+176], 0
  00110	c7 82 b4 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [edx+180], -1
  0011a	c7 82 b8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+184], 0
  00124	c7 82 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+188], 0
  0012e	c7 82 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+192], 0
  00138	c7 82 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+196], 0
  00142	c7 82 c8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+200], 0
  0014c	c7 82 cc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+204], 0
  00156	c7 82 d0 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [edx+208], -1
$LL26@CAcheronGu:
  00160	4f		 dec	 edi
  00161	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00164	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00169	0f 1f 80 00 00
	00 00		 npad	 7
$LL32@CAcheronGu:

; 41   : 	}
; 42   : 
; 43   :     void Clear()
; 44   : 	{
; 45   : 		this->m_iMonIndex = -1;
; 46   : 	};
; 47   : 
; 48   :     int m_iGroupNumber;
; 49   :     int m_iAttrKind;
; 50   :     int m_iMapIndex;
; 51   :     int m_iPosX;
; 52   :     int m_iPosY;
; 53   :     int m_iMonsterNum;
; 54   :     int m_iMonIndex;
; 55   : };
; 56   : 
; 57   : struct _stAEMonRegenArea
; 58   : {
; 59   :     _stAEMonRegenArea()
; 60   : 	{
; 61   : 		this->m_nBeginX = -1;

  00170	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  00176	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 62   : 		this->m_nBeginY = -1;

  00179	c7 40 f4 ff ff
	ff ff		 mov	 DWORD PTR [eax-12], -1

; 63   : 		this->m_nEndX = -1;

  00180	c7 40 f8 ff ff
	ff ff		 mov	 DWORD PTR [eax-8], -1

; 64   : 		this->m_nEndY = -1;

  00187	c7 40 fc ff ff
	ff ff		 mov	 DWORD PTR [eax-4], -1
  0018e	83 e9 01	 sub	 ecx, 1
  00191	75 dd		 jne	 SHORT $LL32@CAcheronGu
  00193	8d 86 2c 03 00
	00		 lea	 eax, DWORD PTR [esi+812]
  00199	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0019e	66 90		 npad	 2
$LL38@CAcheronGu:

; 65   : 	};
; 66   : 
; 67   :     int m_nBeginX;
; 68   :     int m_nBeginY;
; 69   :     int m_nEndX;
; 70   :     int m_nEndY;
; 71   : };
; 72   : 
; 73   : struct _stAEMonIndexInf
; 74   : {
; 75   :     _stAEMonIndexInf()
; 76   : 	{
; 77   : 		this->m_nMonsterIndex = -1;

  001a0	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  001a6	8d 40 0c	 lea	 eax, DWORD PTR [eax+12]
  001a9	83 e9 01	 sub	 ecx, 1
  001ac	75 f2		 jne	 SHORT $LL38@CAcheronGu

; 78   : 	};
; 79   : 
; 80   :     int m_nMonsterIndex;
; 81   :     int m_nGenSqe;
; 82   :     int m_nMonAttr;
; 83   : };
; 84   : 
; 85   : struct _stAEMonPosition
; 86   : {
; 87   :     _stAEMonPosition()
; 88   : 	{
; 89   : 		this->m_nGroupNumber = -1;

  001ae	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1

; 90   : 		this->m_nRegenAreaCnt = 0;

  001b4	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  001b7	81 c6 1c 04 00
	00		 add	 esi, 1052		; 0000041cH
  001bd	85 ff		 test	 edi, edi
  001bf	75 9f		 jne	 SHORT $LL26@CAcheronGu

; 243  :     int m_iTICK_COUNT;

  001c1	8d 59 05	 lea	 ebx, DWORD PTR [ecx+5]
  001c4	8d b2 60 15 00
	00		 lea	 esi, DWORD PTR [edx+5472]
  001ca	66 0f 1f 44 00
	00		 npad	 6
$LL44@CAcheronGu:

; 91   : 	};
; 92   : 
; 93   :     int m_nGroupNumber;
; 94   :     int m_nRegenAreaCnt;
; 95   :     int m_nMonsterKindCnt;
; 96   :     _stAEMonRegenArea m_stRegenArea[AE_MAX_MONGROUP]; 
; 97   :     _stAEMonIndexInf m_stMonsterIndexInfo[20];
; 98   : };
; 99   : 
; 100  : struct _stAEMonAccountNumInfo
; 101  : {
; 102  :     _stAEMonAccountNumInfo()
; 103  : 	{
; 104  : 		this->m_nIndex = -1;

  001d0	83 c8 ff	 or	 eax, -1
  001d3	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  001d6	8d b6 e0 00 00
	00		 lea	 esi, DWORD PTR [esi+224]
  001dc	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  001e1	f3 ab		 rep stosd

; 105  : 	};
; 106  : 
; 107  :     int m_nIndex;
; 108  : };
; 109  : 
; 110  : struct _stAEMonGroupInfo
; 111  : {
; 112  :     _stAEMonGroupInfo()
; 113  : 	{
; 114  : 		this->m_nGroupNumber = -1;

  001e3	89 86 20 ff ff
	ff		 mov	 DWORD PTR [esi-224], eax

; 115  : 		this->m_nMapNumber = -1;

  001e9	89 86 24 ff ff
	ff		 mov	 DWORD PTR [esi-220], eax

; 116  : 		this->m_nCnt = 0;

  001ef	c7 86 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR [esi-216], 0

; 117  : 		this->m_nRegenTimeMin = 0;

  001f9	c7 86 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR [esi-208], 0

; 118  : 		this->m_dwNextRegenTime = 0;

  00203	c7 86 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR [esi-204], 0

; 119  : 		this->m_nGenTotCnt = 0;

  0020d	c7 86 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR [esi-212], 0
  00217	83 eb 01	 sub	 ebx, 1
  0021a	75 b4		 jne	 SHORT $LL44@CAcheronGu

; 120  : 	};
; 121  : 
; 122  :     int m_nGroupNumber;
; 123  :     int m_nMapNumber;
; 124  :     int m_nCnt;
; 125  :     int m_nGenTotCnt;
; 126  :     int m_nRegenTimeMin;
; 127  :     DWORD m_dwNextRegenTime;
; 128  :     _stAEMonAccountNumInfo m_stMonsterAccountNumInfo[AE_MAX_MONGROUP];
; 129  : };
; 130  : 
; 131  : struct _ITEM_DROP_CNT_RATE
; 132  : {
; 133  :     _ITEM_DROP_CNT_RATE()
; 134  : 	{
; 135  : 		this->iCnt = 0;

  0021c	89 9a c0 19 00
	00		 mov	 DWORD PTR [edx+6592], ebx
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 26   : }

  00222	8b c2		 mov	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h

; 136  : 		this->iRate = 0;

  00224	89 9a c4 19 00
	00		 mov	 DWORD PTR [edx+6596], ebx
  0022a	89 9a c8 19 00
	00		 mov	 DWORD PTR [edx+6600], ebx
  00230	89 9a cc 19 00
	00		 mov	 DWORD PTR [edx+6604], ebx
  00236	89 9a d0 19 00
	00		 mov	 DWORD PTR [edx+6608], ebx
  0023c	89 9a d4 19 00
	00		 mov	 DWORD PTR [edx+6612], ebx
  00242	89 9a d8 19 00
	00		 mov	 DWORD PTR [edx+6616], ebx
  00248	89 9a dc 19 00
	00		 mov	 DWORD PTR [edx+6620], ebx
  0024e	89 9a e0 19 00
	00		 mov	 DWORD PTR [edx+6624], ebx
  00254	89 9a e4 19 00
	00		 mov	 DWORD PTR [edx+6628], ebx
  0025a	5f		 pop	 edi
  0025b	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp

; 19   : 	this->m_iREMAIN_MSEC = 0;

  0025c	89 5a 40	 mov	 DWORD PTR [edx+64], ebx

; 20   : 	this->m_iTICK_COUNT = 0;

  0025f	89 5a 44	 mov	 DWORD PTR [edx+68], ebx

; 21   : 	this->m_iState = 1;
; 22   : 	this->m_bAE_PLAY_START = 0;

  00262	89 5a 0c	 mov	 DWORD PTR [edx+12], ebx

; 23   : //	this->m_pAcheronEventRewardItem = 0;
; 24   : 	this->m_bAEInitState = 0;

  00265	89 1a		 mov	 DWORD PTR [edx], ebx

; 25   : 	this->m_bWindowClose = 0;

  00267	88 9a e8 19 00
	00		 mov	 BYTE PTR [edx+6632], bl
  0026d	c7 42 04 01 00
	00 00		 mov	 DWORD PTR [edx+4], 1
  00274	5b		 pop	 ebx

; 26   : }

  00275	8b e5		 mov	 esp, ebp
  00277	5d		 pop	 ebp
  00278	c3		 ret	 0
??0CAcheronGuardianEvent@@QAE@XZ ENDP			; CAcheronGuardianEvent::CAcheronGuardianEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
;	COMDAT ??0_tagPMSG_REQ_AE_PLAY_DS@@QAE@XZ
_TEXT	SEGMENT
??0_tagPMSG_REQ_AE_PLAY_DS@@QAE@XZ PROC			; _tagPMSG_REQ_AE_PLAY_DS::_tagPMSG_REQ_AE_PLAY_DS, COMDAT
; _this$ = ecx

; 184  : 	{
; 185  : 		this->btPlay = 0;

  00000	c6 41 06 00	 mov	 BYTE PTR [ecx+6], 0

; 186  : 	};

  00004	8b c1		 mov	 eax, ecx
  00006	c3		 ret	 0
??0_tagPMSG_REQ_AE_PLAY_DS@@QAE@XZ ENDP			; _tagPMSG_REQ_AE_PLAY_DS::_tagPMSG_REQ_AE_PLAY_DS
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
;	COMDAT ??0_tagPMSG_ANS_ACHERON_EVENT_ENTER@@QAE@XZ
_TEXT	SEGMENT
??0_tagPMSG_ANS_ACHERON_EVENT_ENTER@@QAE@XZ PROC	; _tagPMSG_ANS_ACHERON_EVENT_ENTER::_tagPMSG_ANS_ACHERON_EVENT_ENTER, COMDAT
; _this$ = ecx

; 173  : 	{
; 174  : 		this->btResult = 0;

  00000	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0

; 175  : 	};

  00004	8b c1		 mov	 eax, ecx
  00006	c3		 ret	 0
??0_tagPMSG_ANS_ACHERON_EVENT_ENTER@@QAE@XZ ENDP	; _tagPMSG_ANS_ACHERON_EVENT_ENTER::_tagPMSG_ANS_ACHERON_EVENT_ENTER
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
;	COMDAT ??0_ITEM_DROP_CNT_RATE@@QAE@XZ
_TEXT	SEGMENT
??0_ITEM_DROP_CNT_RATE@@QAE@XZ PROC			; _ITEM_DROP_CNT_RATE::_ITEM_DROP_CNT_RATE, COMDAT
; _this$ = ecx

; 134  : 	{
; 135  : 		this->iCnt = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 136  : 		this->iRate = 0;
; 137  : 	};

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0_ITEM_DROP_CNT_RATE@@QAE@XZ ENDP			; _ITEM_DROP_CNT_RATE::_ITEM_DROP_CNT_RATE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
;	COMDAT ??0_stAEMonGroupInfo@@QAE@XZ
_TEXT	SEGMENT
??0_stAEMonGroupInfo@@QAE@XZ PROC			; _stAEMonGroupInfo::_stAEMonGroupInfo, COMDAT
; _this$ = ecx

; 112  :     _stAEMonGroupInfo()

  00000	8b d1		 mov	 edx, ecx

; 104  : 		this->m_nIndex = -1;

  00002	83 c8 ff	 or	 eax, -1
  00005	57		 push	 edi
  00006	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H

; 121  : 
; 122  :     int m_nGroupNumber;
; 123  :     int m_nMapNumber;
; 124  :     int m_nCnt;
; 125  :     int m_nGenTotCnt;
; 126  :     int m_nRegenTimeMin;
; 127  :     DWORD m_dwNextRegenTime;

  0000b	8d 7a 18	 lea	 edi, DWORD PTR [edx+24]

; 104  : 		this->m_nIndex = -1;

  0000e	f3 ab		 rep stosd

; 113  : 	{
; 114  : 		this->m_nGroupNumber = -1;

  00010	89 02		 mov	 DWORD PTR [edx], eax

; 115  : 		this->m_nMapNumber = -1;

  00012	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 116  : 		this->m_nCnt = 0;
; 117  : 		this->m_nRegenTimeMin = 0;
; 118  : 		this->m_dwNextRegenTime = 0;
; 119  : 		this->m_nGenTotCnt = 0;
; 120  : 	};

  00015	8b c2		 mov	 eax, edx
  00017	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  0001e	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
  00025	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0
  0002c	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  00033	5f		 pop	 edi
  00034	c3		 ret	 0
??0_stAEMonGroupInfo@@QAE@XZ ENDP			; _stAEMonGroupInfo::_stAEMonGroupInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
;	COMDAT ??0_stAEMonAccountNumInfo@@QAE@XZ
_TEXT	SEGMENT
??0_stAEMonAccountNumInfo@@QAE@XZ PROC			; _stAEMonAccountNumInfo::_stAEMonAccountNumInfo, COMDAT
; _this$ = ecx

; 103  : 	{
; 104  : 		this->m_nIndex = -1;

  00000	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 105  : 	};

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0_stAEMonAccountNumInfo@@QAE@XZ ENDP			; _stAEMonAccountNumInfo::_stAEMonAccountNumInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
;	COMDAT ??0_stAEMonPosition@@QAE@XZ
_TEXT	SEGMENT
??0_stAEMonPosition@@QAE@XZ PROC			; _stAEMonPosition::_stAEMonPosition, COMDAT
; _this$ = ecx

; 87   :     _stAEMonPosition()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ba 32 00 00 00	 mov	 edx, 50			; 00000032H

; 92   : 
; 93   :     int m_nGroupNumber;
; 94   :     int m_nRegenAreaCnt;
; 95   :     int m_nMonsterKindCnt;

  00008	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@stAEMonPos:

; 61   : 		this->m_nBeginX = -1;

  00010	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  00016	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 62   : 		this->m_nBeginY = -1;

  00019	c7 40 f4 ff ff
	ff ff		 mov	 DWORD PTR [eax-12], -1

; 63   : 		this->m_nEndX = -1;

  00020	c7 40 f8 ff ff
	ff ff		 mov	 DWORD PTR [eax-8], -1

; 64   : 		this->m_nEndY = -1;

  00027	c7 40 fc ff ff
	ff ff		 mov	 DWORD PTR [eax-4], -1
  0002e	83 ea 01	 sub	 edx, 1
  00031	75 dd		 jne	 SHORT $LL4@stAEMonPos

; 92   : 
; 93   :     int m_nGroupNumber;
; 94   :     int m_nRegenAreaCnt;
; 95   :     int m_nMonsterKindCnt;

  00033	8d 86 2c 03 00
	00		 lea	 eax, DWORD PTR [esi+812]
  00039	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0003e	66 90		 npad	 2
$LL10@stAEMonPos:

; 65   : 	};
; 66   : 
; 67   :     int m_nBeginX;
; 68   :     int m_nBeginY;
; 69   :     int m_nEndX;
; 70   :     int m_nEndY;
; 71   : };
; 72   : 
; 73   : struct _stAEMonIndexInf
; 74   : {
; 75   :     _stAEMonIndexInf()
; 76   : 	{
; 77   : 		this->m_nMonsterIndex = -1;

  00040	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  00046	8d 40 0c	 lea	 eax, DWORD PTR [eax+12]
  00049	83 e9 01	 sub	 ecx, 1
  0004c	75 f2		 jne	 SHORT $LL10@stAEMonPos

; 88   : 	{
; 89   : 		this->m_nGroupNumber = -1;

  0004e	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1

; 90   : 		this->m_nRegenAreaCnt = 0;
; 91   : 	};

  00054	8b c6		 mov	 eax, esi
  00056	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00059	5e		 pop	 esi
  0005a	c3		 ret	 0
??0_stAEMonPosition@@QAE@XZ ENDP			; _stAEMonPosition::_stAEMonPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
;	COMDAT ??0_stAEMonIndexInf@@QAE@XZ
_TEXT	SEGMENT
??0_stAEMonIndexInf@@QAE@XZ PROC			; _stAEMonIndexInf::_stAEMonIndexInf, COMDAT
; _this$ = ecx

; 76   : 	{
; 77   : 		this->m_nMonsterIndex = -1;

  00000	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 78   : 	};

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0_stAEMonIndexInf@@QAE@XZ ENDP			; _stAEMonIndexInf::_stAEMonIndexInf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
;	COMDAT ??0_stAEMonRegenArea@@QAE@XZ
_TEXT	SEGMENT
??0_stAEMonRegenArea@@QAE@XZ PROC			; _stAEMonRegenArea::_stAEMonRegenArea, COMDAT
; _this$ = ecx

; 60   : 	{
; 61   : 		this->m_nBeginX = -1;

  00000	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 62   : 		this->m_nBeginY = -1;
; 63   : 		this->m_nEndX = -1;
; 64   : 		this->m_nEndY = -1;
; 65   : 	};

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
  0000f	c7 41 08 ff ff
	ff ff		 mov	 DWORD PTR [ecx+8], -1
  00016	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1
  0001d	c3		 ret	 0
??0_stAEMonRegenArea@@QAE@XZ ENDP			; _stAEMonRegenArea::_stAEMonRegenArea
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
;	COMDAT ?Clear@_tagAE_OBELISK_INFO@@QAEXXZ
_TEXT	SEGMENT
?Clear@_tagAE_OBELISK_INFO@@QAEXXZ PROC			; _tagAE_OBELISK_INFO::Clear, COMDAT
; _this$ = ecx

; 45   : 		this->m_iMonIndex = -1;

  00000	c7 41 18 ff ff
	ff ff		 mov	 DWORD PTR [ecx+24], -1

; 46   : 	};

  00007	c3		 ret	 0
?Clear@_tagAE_OBELISK_INFO@@QAEXXZ ENDP			; _tagAE_OBELISK_INFO::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
;	COMDAT ??0_tagAE_OBELISK_INFO@@QAE@XZ
_TEXT	SEGMENT
??0_tagAE_OBELISK_INFO@@QAE@XZ PROC			; _tagAE_OBELISK_INFO::_tagAE_OBELISK_INFO, COMDAT
; _this$ = ecx

; 33   : 	{
; 34   : 		this->m_iGroupNumber = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 35   : 		this->m_iAttrKind = 0;
; 36   : 		this->m_iMapIndex = 0;
; 37   : 		this->m_iPosX = 0;
; 38   : 		this->m_iPosY = 0;
; 39   : 		this->m_iMonsterNum = 0;
; 40   : 		this->m_iMonIndex = -1;
; 41   : 	}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00024	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0002b	c7 41 18 ff ff
	ff ff		 mov	 DWORD PTR [ecx+24], -1
  00032	c3		 ret	 0
??0_tagAE_OBELISK_INFO@@QAE@XZ ENDP			; _tagAE_OBELISK_INFO::_tagAE_OBELISK_INFO
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.h
;	COMDAT ??0_tagAcheronEventTime@@QAE@XZ
_TEXT	SEGMENT
??0_tagAcheronEventTime@@QAE@XZ PROC			; _tagAcheronEventTime::_tagAcheronEventTime, COMDAT
; _this$ = ecx

; 19   : 	{
; 20   : 		this->m_iHour = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 21   : 		this->m_iMinute = 0;
; 22   : 		this->m_btEvent = 0;
; 23   : 	};

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c6 41 08 00	 mov	 BYTE PTR [ecx+8], 0
  00013	c3		 ret	 0
??0_tagAcheronEventTime@@QAE@XZ ENDP			; _tagAcheronEventTime::_tagAcheronEventTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 139  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 140  : 		lpBuf[0] = 0xC1;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]

; 141  : 		lpBuf[1] = size;

  00006	8a 45 14	 mov	 al, BYTE PTR _size$[ebp]
  00009	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 142  : 		lpBuf[2] = head;

  0000c	8a 45 0c	 mov	 al, BYTE PTR _head$[ebp]
  0000f	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 143  : 		lpBuf[3] = sub;

  00012	8a 45 10	 mov	 al, BYTE PTR _sub$[ebp]
  00015	c6 01 c1	 mov	 BYTE PTR [ecx], 193	; 000000c1H
  00018	88 41 03	 mov	 BYTE PTR [ecx+3], al

; 144  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ PROC ; std::_Iterator_base0::_Getcont, COMDAT
; _this$ = ecx

; 59   : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 60   : 		}

  00002	c3		 ret	 0
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ENDP ; std::_Iterator_base0::_Getcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);
; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 1459 :     #pragma warning(pop)
; 1460 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\acheronevent.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 1003 : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
