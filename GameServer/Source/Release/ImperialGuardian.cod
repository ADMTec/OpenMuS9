; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\ImperialGuardian.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gFreeServer@@3HA				; gFreeServer
PUBLIC	?g_nMysteriousPaperDropRate@@3HA		; g_nMysteriousPaperDropRate
_BSS	SEGMENT
?gFreeServer@@3HA DD 01H DUP (?)			; gFreeServer
?g_nMysteriousPaperDropRate@@3HA DD 01H DUP (?)		; g_nMysteriousPaperDropRate
_BSS	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_sprintf
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
PUBLIC	?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z	; ATL::CTime::GetLocalTm
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0_stZoneInfo@@QAE@XZ				; _stZoneInfo::_stZoneInfo
PUBLIC	?allocate@?$allocator@U_stMonsterIndexInfo@@@std@@QAEPAU_stMonsterIndexInfo@@I@Z ; std::allocator<_stMonsterIndexInfo>::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@I@Z ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::deallocate
PUBLIC	??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >
PUBLIC	??1?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@XZ ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::~vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >
PUBLIC	?push_back@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXABU_stMonsterIndexInfo@@@Z ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::push_back
PUBLIC	?_Reallocate@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Reallocate
PUBLIC	?_Reserve@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Reserve
PUBLIC	?_Tidy@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXXZ ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Tidy
PUBLIC	?allocate@?$allocator@H@std@@QAEPAHI@Z		; std::allocator<int>::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reallocate
PUBLIC	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
PUBLIC	??1_stZoneInfo@@QAE@XZ				; _stZoneInfo::~_stZoneInfo
PUBLIC	??0_stZoneInfo@@QAE@ABU0@@Z			; _stZoneInfo::_stZoneInfo
PUBLIC	??0CImperialGuardian@@QAE@XZ			; CImperialGuardian::CImperialGuardian
PUBLIC	??1CImperialGuardian@@UAE@XZ			; CImperialGuardian::~CImperialGuardian
PUBLIC	?Init@CImperialGuardian@@QAEXXZ			; CImperialGuardian::Init
PUBLIC	?InitEventDungeon@CImperialGuardian@@QAEXXZ	; CImperialGuardian::InitEventDungeon
PUBLIC	?LoadScript@CImperialGuardian@@QAEXPBD@Z	; CImperialGuardian::LoadScript
PUBLIC	?Run@CImperialGuardian@@QAEXXZ			; CImperialGuardian::Run
PUBLIC	?ProcReady@CImperialGuardian@@QAEXH@Z		; CImperialGuardian::ProcReady
PUBLIC	?ProcBeginTimeAttack@CImperialGuardian@@QAEXH@Z	; CImperialGuardian::ProcBeginTimeAttack
PUBLIC	?ProcBeginLootTime@CImperialGuardian@@QAEXH@Z	; CImperialGuardian::ProcBeginLootTime
PUBLIC	?ProcBeginWaitPlayer@CImperialGuardian@@QAEXH@Z	; CImperialGuardian::ProcBeginWaitPlayer
PUBLIC	?ProcAllWarpNextZone@CImperialGuardian@@QAEXH@Z	; CImperialGuardian::ProcAllWarpNextZone
PUBLIC	?ProcAllKick@CImperialGuardian@@QAEXH@Z		; CImperialGuardian::ProcAllKick
PUBLIC	?ProcMissionFail@CImperialGuardian@@QAEXH@Z	; CImperialGuardian::ProcMissionFail
PUBLIC	?ProcMissionClear@CImperialGuardian@@QAEXH@Z	; CImperialGuardian::ProcMissionClear
PUBLIC	?IsEmptyZone@CImperialGuardian@@QAE_NH@Z	; CImperialGuardian::IsEmptyZone
PUBLIC	?KickInvalidUser@CImperialGuardian@@QAEXXZ	; CImperialGuardian::KickInvalidUser
PUBLIC	?CheckValidUser@CImperialGuardian@@QAE_NH@Z	; CImperialGuardian::CheckValidUser
PUBLIC	?GetZoneState@CImperialGuardian@@QAEHH@Z	; CImperialGuardian::GetZoneState
PUBLIC	?SetZoneState@CImperialGuardian@@QAE_NHH@Z	; CImperialGuardian::SetZoneState
PUBLIC	?CGEnterPortal@CImperialGuardian@@QAEXHH@Z	; CImperialGuardian::CGEnterPortal
PUBLIC	?RegenMonster@CImperialGuardian@@QAEXHHH_N@Z	; CImperialGuardian::RegenMonster
PUBLIC	?DeleteMonster@CImperialGuardian@@QAEXHH@Z	; CImperialGuardian::DeleteMonster
PUBLIC	?InitZone@CImperialGuardian@@QAEXH@Z		; CImperialGuardian::InitZone
PUBLIC	?SetMonster@CImperialGuardian@@QAE_NHHH@Z	; CImperialGuardian::SetMonster
PUBLIC	?GetGateNumber@CImperialGuardian@@QAEHHH@Z	; CImperialGuardian::GetGateNumber
PUBLIC	?GetMapNumber@CImperialGuardian@@QAEHH@Z	; CImperialGuardian::GetMapNumber
PUBLIC	?ProcCheckDungeon@CImperialGuardian@@QAEXH@Z	; CImperialGuardian::ProcCheckDungeon
PUBLIC	?GetLiveMonsterCount@CImperialGuardian@@QAEHH@Z	; CImperialGuardian::GetLiveMonsterCount
PUBLIC	?CheckLiveMonster@CImperialGuardian@@QAEXH@Z	; CImperialGuardian::CheckLiveMonster
PUBLIC	?GetCurrentZoneIndex@CImperialGuardian@@QAEHH@Z	; CImperialGuardian::GetCurrentZoneIndex
PUBLIC	?AddUserInZone@CImperialGuardian@@QAE_NHH@Z	; CImperialGuardian::AddUserInZone
PUBLIC	?RemoveUserInZone@CImperialGuardian@@QAEXHH@Z	; CImperialGuardian::RemoveUserInZone
PUBLIC	?RemoveUserInAllZone@CImperialGuardian@@QAEXH@Z	; CImperialGuardian::RemoveUserInAllZone
PUBLIC	?GetPlayerCount@CImperialGuardian@@QAEHH@Z	; CImperialGuardian::GetPlayerCount
PUBLIC	?GetTotalPlayerCount@CImperialGuardian@@QAEHXZ	; CImperialGuardian::GetTotalPlayerCount
PUBLIC	?IsLastZone@CImperialGuardian@@QAE_NH@Z		; CImperialGuardian::IsLastZone
PUBLIC	?GCNotifyZoneClear@CImperialGuardian@@QAE_NH@Z	; CImperialGuardian::GCNotifyZoneClear
PUBLIC	?GCNotifyAllZoneClear@CImperialGuardian@@QAE_NH@Z ; CImperialGuardian::GCNotifyAllZoneClear
PUBLIC	?GCMissionFail@CImperialGuardian@@QAEXH@Z	; CImperialGuardian::GCMissionFail
PUBLIC	?GCMissionFailUseDie@CImperialGuardian@@QAEXH@Z	; CImperialGuardian::GCMissionFailUseDie
PUBLIC	?GCSendDataToUser@CImperialGuardian@@QAEXHPAEH@Z ; CImperialGuardian::GCSendDataToUser
PUBLIC	?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z ; CImperialGuardian::GCNotifyRemainTickCount
PUBLIC	?SetGateBlockState@CImperialGuardian@@QAEXHHHHHH@Z ; CImperialGuardian::SetGateBlockState
PUBLIC	?GCSendCastleGateInfo@CImperialGuardian@@QAEXHHH@Z ; CImperialGuardian::GCSendCastleGateInfo
PUBLIC	?DropItem@CImperialGuardian@@QAEXHH@Z		; CImperialGuardian::DropItem
PUBLIC	?CheckOverlapMysteriousPaper@CImperialGuardian@@QAEHHH@Z ; CImperialGuardian::CheckOverlapMysteriousPaper
PUBLIC	?RollBackUserPos@CImperialGuardian@@QAEXH@Z	; CImperialGuardian::RollBackUserPos
PUBLIC	?CheckGaionOrderPaper@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::CheckGaionOrderPaper
PUBLIC	?CheckFullSecromicon@CImperialGuardian@@QAEHH@Z	; CImperialGuardian::CheckFullSecromicon
PUBLIC	?IsAttackAbleMonster@CImperialGuardian@@QAE_NH@Z ; CImperialGuardian::IsAttackAbleMonster
PUBLIC	?SetAtackAbleState@CImperialGuardian@@QAEXHH_N@Z ; CImperialGuardian::SetAtackAbleState
PUBLIC	?SetDayOfWeekGM@CImperialGuardian@@QAEXH@Z	; CImperialGuardian::SetDayOfWeekGM
PUBLIC	?SetCheatModeGM@CImperialGuardian@@QAEXF@Z	; CImperialGuardian::SetCheatModeGM
PUBLIC	?WarpZoneGM@CImperialGuardian@@QAEXHH@Z		; CImperialGuardian::WarpZoneGM
PUBLIC	?SetTargetMoveAllMonster@CImperialGuardian@@QAEXHH@Z ; CImperialGuardian::SetTargetMoveAllMonster
PUBLIC	?DestroyGate@CImperialGuardian@@QAEXHHH@Z	; CImperialGuardian::DestroyGate
PUBLIC	?GetZoneInfo@CImperialGuardian@@QAE?AU_stZoneInfo@@H@Z ; CImperialGuardian::GetZoneInfo
PUBLIC	?GCSendServerMsgAll@CImperialGuardian@@QAEXHPAD@Z ; CImperialGuardian::GCSendServerMsgAll
PUBLIC	?ImperialGuardianLevelUp@CImperialGuardian@@QAEHHH@Z ; CImperialGuardian::ImperialGuardianLevelUp
PUBLIC	?RegAllPartyUser@CImperialGuardian@@QAEXHH@Z	; CImperialGuardian::RegAllPartyUser
PUBLIC	?IsRegPartyUser@CImperialGuardian@@QAE_NHH@Z	; CImperialGuardian::IsRegPartyUser
PUBLIC	?UserMonsterCountCheck@CImperialGuardian@@QAEXXZ ; CImperialGuardian::UserMonsterCountCheck
PUBLIC	?MonsterBaseAct@CImperialGuardian@@QAEXPAUOBJECTSTRUCT@@@Z ; CImperialGuardian::MonsterBaseAct
PUBLIC	?ChangeUserIndex@CImperialGuardian@@QAEHHHH@Z	; CImperialGuardian::ChangeUserIndex
PUBLIC	?SendCurStateToUser@CImperialGuardian@@QAEHHH@Z	; CImperialGuardian::SendCurStateToUser
PUBLIC	?SendCurGateInfoToUser@CImperialGuardian@@QAEHHH@Z ; CImperialGuardian::SendCurGateInfoToUser
PUBLIC	?GetPlayUserCountRightNow@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetPlayUserCountRightNow
PUBLIC	??_GCImperialGuardian@@UAEPAXI@Z		; CImperialGuardian::`scalar deleting destructor'
PUBLIC	?gGetPartyMaxLevel@@YAHH@Z			; gGetPartyMaxLevel
PUBLIC	??$_Uninit_copy@PBU_stMonsterIndexInfo@@PAU1@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@YAPAU_stMonsterIndexInfo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<_stMonsterIndexInfo const *,_stMonsterIndexInfo *,std::allocator<_stMonsterIndexInfo> >
PUBLIC	??$_Uninit_move@PAU_stMonsterIndexInfo@@PAU1@V?$allocator@U_stMonsterIndexInfo@@@std@@U1@@std@@YAPAU_stMonsterIndexInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stMonsterIndexInfo *,_stMonsterIndexInfo *,std::allocator<_stMonsterIndexInfo>,_stMonsterIndexInfo>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7CImperialGuardian@@6B@			; CImperialGuardian::`vftable'
PUBLIC	?g_ImperialGuardian@@3VCImperialGuardian@@A	; g_ImperialGuardian
PUBLIC	??_C@_09DADCBAGP@IGEventOn?$AA@			; `string'
PUBLIC	??_C@_0P@EMJDPFDH@GameServerInfo?$AA@		; `string'
PUBLIC	??_C@_08BGOOMMJN@LootTime?$AA@			; `string'
PUBLIC	??_C@_0P@IFHCOMEP@WaitPlayerTime?$AA@		; `string'
PUBLIC	??_C@_0P@KFFDMCNL@TimeAttackTime?$AA@		; `string'
PUBLIC	??_C@_0L@CPONAIFB@MixNeedZen?$AA@		; `string'
PUBLIC	??_C@_0BI@LHIDHHFN@MysteriousPaperDropRate?$AA@	; `string'
PUBLIC	??_C@_0O@GIJEGFIP@IGPromotionOn?$AA@		; `string'
PUBLIC	??_C@_0CB@KDEFHMMJ@Event?2ImperialGuardianReward?4dat@ ; `string'
PUBLIC	??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@	; `string'
PUBLIC	??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0DC@GLEDMLHG@?$FLIMPERIALGUARDIAN?$FN?5BEGIN?5TIMEATT@ ; `string'
PUBLIC	??_C@_0DI@KMNKLEEH@?$FLIMPERIALGUARDIAN?$FN?5OBJECT?5COUNT?5@ ; `string'
PUBLIC	??_C@_0DA@DCFNIECJ@?$FLIMPERIALGUARDIAN?$FN?5END?5TIMEATTAC@ ; `string'
PUBLIC	??_C@_0DA@EDOFHFCG@?$FLIMPERIALGUARDIAN?$FN?5BEGIN?5LOOTTIM@ ; `string'
PUBLIC	??_C@_0CO@FGCFEPEM@?$FLIMPERIALGUARDIAN?$FN?5END?5LOOTTIME?5@ ; `string'
PUBLIC	??_C@_0DC@BDFBOBIA@?$FLIMPERIALGUARDIAN?$FN?5BEGIN?5WAITPLA@ ; `string'
PUBLIC	??_C@_0EM@KDFOBECC@?$FLIMPERIALGUARDIAN?$FN?5Leave?5Player?5@ ; `string'
PUBLIC	??_C@_0CP@HMEEDDK@?$FLIMPERIALGUARDIAN?$FN?5ALL?5KICK?5USER@ ; `string'
PUBLIC	??_C@_0CO@HOFCCJKC@?$FLIMPERIALGUARDIAN?$FN?5MISSION?5FAIL?5@ ; `string'
PUBLIC	??_C@_0EC@LFDAMNEF@?$FLIMPERIALGUARDIAN?$FN?5MISSION?5CLEAR@ ; `string'
PUBLIC	??_C@_0CN@EBJLDAME@?$FLIMPERIALGUARDIAN?$FN?$FL?5Invalid?5User@ ; `string'
PUBLIC	??_C@_0EB@JMFDLKOB@?$FLIMPERIALGUARDIAN?$FN?$FL?5Invalid?5User@ ; `string'
PUBLIC	??_C@_0EK@OILHLBMJ@?$FLIMPERIALGUARDIAN?$FN?5Enter?5Zone?5Us@ ; `string'
PUBLIC	??_C@_0CP@EJIDDFJD@?$FLIMPERIALGUARDIAN?$FN?5?$FL?$CFd?5ZONE?5USER@ ; `string'
PUBLIC	??_C@_0EA@OPEPFPC@?$FLIMPERIALGUARDIAN?$FN?$FLRegenMonsterF@ ; `string'
PUBLIC	??_C@_0EN@DCMGCKOE@?$FLIMPERIALGUARDIAN?$FN?$FLRegenMonsterF@ ; `string'
PUBLIC	??_C@_0FG@KMFHIHOJ@?$FLIMPERIALGUARDIAN?$FN?5AddGate?5?$DN?$DO?5?$CFs@ ; `string'
PUBLIC	??_C@_0HH@NPLECNJH@?$FLIMPERIALGUARDIAN?$FN?5AddMonster?5?$DN?$DO@ ; `string'
PUBLIC	??_C@_0FL@DNMPJOJF@?$FLIMPERIALGUARDIAN?$FN?$FLRegenMonsterF@ ; `string'
PUBLIC	??_C@_0DP@HBNLDLKJ@?$FLIMPERIALGUARDIAN?$FN?5DELETE?5ALL?5MO@ ; `string'
PUBLIC	??_C@_0CG@PIAPLIPD@?$FLEVENTDUNGEON?$FN?5script?5file?5not?5l@ ; `string'
PUBLIC	??_C@_0DO@ELCKLNIA@?$FLIMPERIALGUARDIAN?$FN?$FLGetGateNumber@ ; `string'
PUBLIC	??_C@_0EG@MJKDFELM@?$FLIMPERIALGUARDIAN?$FN?$FLRESTORE?$FN?5?$FLNAM@ ; `string'
PUBLIC	??_C@_0EK@BDGBBCGM@?$FLIMPERIALGUARDIAN?$FN?5Leave?5Player?5@ ; `string'
PUBLIC	??_C@_0EB@JAMFMLDI@?$FLIMPERIALGUARDIAN?$FN?5?$FLACCOUNTID?$FN?3?$CF@ ; `string'
PUBLIC	??_C@_0EG@HBDBBIDA@?$FLIMPERIALGUARDIAN?$FN?$FLGCNotifyRemai@ ; `string'
PUBLIC	??_C@_0FF@BCELDKGP@?$FLIMPERIALGUARDIAN?$FN?5SEND?5GATE?5STA@ ; `string'
PUBLIC	??_C@_0ED@BNJJBHBK@?$FLIMPERIALGUARDIAN?$FN?5beginX?5?3?5?$CFd?0?5@ ; `string'
PUBLIC	??_C@_0FC@NEILDHCA@?$FLIMPERIALGUARDIAN?$FN?5Kill?5the?5boss@ ; `string'
PUBLIC	??_C@_0EK@DHNAFKCL@?$FLIMPERIALGUARDIAN?$FN?5Broken?5Statue@ ; `string'
PUBLIC	??_C@_0FF@DICKNCPB@?$FLIMPERIALGUARDIAN?$FN?5Drop?5Item?5?3?5?$CI@ ; `string'
PUBLIC	??_C@_0GK@NPJHELF@?$FLIMPERIALGUARDIAN?$FN?5DestroyGate?5?9@ ; `string'
PUBLIC	??_C@_0DE@DKMMCBLO@Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5?$FL?$CFs@ ; `string'
PUBLIC	??_C@_0DA@KDBPKGIM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5LevelUp?5PlusStatQuest?5C@ ; `string'
PUBLIC	??_C@_0BM@DJAOLMAF@400?5LevelUp?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Party?5?$AA@ ; `string'
PUBLIC	??_C@_0L@MNKEEMGH@?0?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5?$AA@ ; `string'
PUBLIC	??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CImperialGuardian@@6B@			; CImperialGuardian::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCImperialGuardian@@@8			; CImperialGuardian `RTTI Type Descriptor'
PUBLIC	??_R3CImperialGuardian@@8			; CImperialGuardian::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CImperialGuardian@@8			; CImperialGuardian::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CImperialGuardian@@8		; CImperialGuardian::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_rand:PROC
EXTRN	__localtime64_s:PROC
EXTRN	__time64:PROC
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
EXTRN	?AfxThrowOleException@@YGXJ@Z:PROC		; AfxThrowOleException
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	??0CImperialGuardianRewardExp@@QAE@XZ:PROC	; CImperialGuardianRewardExp::CImperialGuardianRewardExp
EXTRN	??1CImperialGuardianRewardExp@@UAE@XZ:PROC	; CImperialGuardianRewardExp::~CImperialGuardianRewardExp
EXTRN	?LoadScript@CImperialGuardianRewardExp@@QAEXPAD@Z:PROC ; CImperialGuardianRewardExp::LoadScript
EXTRN	?GetRewardExp@CImperialGuardianRewardExp@@QAEHH@Z:PROC ; CImperialGuardianRewardExp::GetRewardExp
EXTRN	?DropReward@CImperialGuardianRewardExp@@QAEXHH@Z:PROC ; CImperialGuardianRewardExp::DropReward
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?ItemGetNumberMake@@YAHHH@Z:PROC		; ItemGetNumberMake
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?CheckWall@MapClass@@QAEHHHHH@Z:PROC		; MapClass::CheckWall
EXTRN	?SetStandAttr@MapClass@@QAEXHH@Z:PROC		; MapClass::SetStandAttr
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?GCLevelUpMsgSend@@YAXHH@Z:PROC			; GCLevelUpMsgSend
EXTRN	?CGPShopReqClose@@YAXH@Z:PROC			; CGPShopReqClose
EXTRN	?GCTeleportSend@@YAXPAUOBJECTSTRUCT@@HEEEE@Z:PROC ; GCTeleportSend
EXTRN	?GCInventoryItemDeleteSend@@YAXHEE@Z:PROC	; GCInventoryItemDeleteSend
EXTRN	?GCItemDurSend2@@YAXHEEE@Z:PROC			; GCItemDurSend2
EXTRN	?GCSendExp@@YAXHH_JHH@Z:PROC			; GCSendExp
EXTRN	?gObjClearViewport@@YAXPAUOBJECTSTRUCT@@@Z:PROC	; gObjClearViewport
EXTRN	?gObjSetBP@@YAXH@Z:PROC				; gObjSetBP
EXTRN	?gObjSetPosMonster@@YAHHH@Z:PROC		; gObjSetPosMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
EXTRN	?GetPathPacketDirPos@@YAEHH@Z:PROC		; GetPathPacketDirPos
EXTRN	?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjCalDistance
EXTRN	?gObjSetInventory1Pointer@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjSetInventory1Pointer
EXTRN	?gObjNextExpCal@@YAXPAUOBJECTSTRUCT@@@Z:PROC	; gObjNextExpCal
EXTRN	?gObjInventoryDeleteItem@@YAEHH@Z:PROC		; gObjInventoryDeleteItem
EXTRN	?CreateFrustrum@@YAXHHH@Z:PROC			; CreateFrustrum
EXTRN	?gObjViewportListProtocolCreate@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjViewportListProtocolCreate
EXTRN	?gObjMoveGate@@YAHHH@Z:PROC			; gObjMoveGate
EXTRN	?gObjMonsterMagicAdd@@YAHPAUOBJECTSTRUCT@@GE@Z:PROC ; gObjMonsterMagicAdd
EXTRN	?gObjSetExpPetItem@@YAXHH@Z:PROC		; gObjSetExpPetItem
EXTRN	?gObjGetRandomItemDropLocation@@YAHHAAE0HHH@Z:PROC ; gObjGetRandomItemDropLocation
EXTRN	??_ECImperialGuardian@@UAEPAXI@Z:PROC		; CImperialGuardian::`vector deleting destructor'
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?GetPartyCount@PartyClass@@QAEHH@Z:PROC		; PartyClass::GetPartyCount
EXTRN	?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z:PROC ; gObjRemoveBuffEffect
EXTRN	?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z:PROC ; gObjCheckUsedBuffEffect
EXTRN	?ConvertMonsterStat@CMonsterStatCalc@@QAEHPAUOBJECTSTRUCT@@HH@Z:PROC ; CMonsterStatCalc::ConvertMonsterStat
EXTRN	?gObjMonsterHitDamageInit@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjMonsterHitDamageInit
EXTRN	?gObjMonsterGetTargetPos@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjMonsterGetTargetPos
EXTRN	?gObjGetTargetPos@@YAHPAUOBJECTSTRUCT@@HHAAH1@Z:PROC ; gObjGetTargetPos
EXTRN	?gObjMonsterSearchEnemy@@YAHPAUOBJECTSTRUCT@@E@Z:PROC ; gObjMonsterSearchEnemy
EXTRN	?gObjMonsterMoveAction@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjMonsterMoveAction
EXTRN	?LevelUp@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@_J@Z:PROC ; CMasterExperience::LevelUp
EXTRN	?IsEnabled@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CMasterExperience::IsEnabled
EXTRN	?GJSetCharacterInfo@@YAXPAUOBJECTSTRUCT@@HHH@Z:PROC ; GJSetCharacterInfo
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z:PROC ; ItemSerialCreateSend
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
EXTRN	?GetLevelPoint@ClassCalc@@QAEGPAUOBJECTSTRUCT@@EE@Z:PROC ; ClassCalc::GetLevelPoint
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	?gMSetBase@@3VCMonsterSetBase@@A:BYTE		; gMSetBase
EXTRN	?DCInfo@@3Vclassdef@@A:BYTE			; DCInfo
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?g_MonsterStatCalc@@3VCMonsterStatCalc@@A:BYTE	; g_MonsterStatCalc
EXTRN	?g_MasterExp@@3VCMasterExperience@@A:BYTE	; g_MasterExp
EXTRN	?g_ClassCalc@@3VClassCalc@@A:BYTE		; g_ClassCalc
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?g_ImperialGuardian@@3VCImperialGuardian@@A DB 01e4H DUP (?) ; g_ImperialGuardian
_BSS	ENDS
CRT$XCU	SEGMENT
?g_ImperialGuardian$initializer$@@3P6AXXZA DD FLAT:??__Eg_ImperialGuardian@@YAXXZ ; g_ImperialGuardian$initializer$
CRT$XCU	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CImperialGuardian@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CImperialGuardian@@8 DD FLAT:??_R0?AVCImperialGuardian@@@8 ; CImperialGuardian::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CImperialGuardian@@8
rdata$r	ENDS
;	COMDAT ??_R2CImperialGuardian@@8
rdata$r	SEGMENT
??_R2CImperialGuardian@@8 DD FLAT:??_R1A@?0A@EA@CImperialGuardian@@8 ; CImperialGuardian::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CImperialGuardian@@8
rdata$r	SEGMENT
??_R3CImperialGuardian@@8 DD 00H			; CImperialGuardian::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CImperialGuardian@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCImperialGuardian@@@8
data$r	SEGMENT
??_R0?AVCImperialGuardian@@@8 DD FLAT:??_7type_info@@6B@ ; CImperialGuardian `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCImperialGuardian@@', 00H
data$r	ENDS
;	COMDAT ??_R4CImperialGuardian@@6B@
rdata$r	SEGMENT
??_R4CImperialGuardian@@6B@ DD 00H			; CImperialGuardian::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCImperialGuardian@@@8
	DD	FLAT:??_R3CImperialGuardian@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
CONST	SEGMENT
??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ DB 'invalid v'
	DB	'ector<T> subscript', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MNKEEMGH@?0?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5?$AA@
CONST	SEGMENT
??_C@_0L@MNKEEMGH@?0?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5?$AA@ DB ',(%s)(%s) ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DJAOLMAF@400?5LevelUp?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Party?5?$AA@
CONST	SEGMENT
??_C@_0BM@DJAOLMAF@400?5LevelUp?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Party?5?$AA@ DB '4'
	DB	'00 LevelUp (%s)(%s) Party ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@KDBPKGIM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5LevelUp?5PlusStatQuest?5C@
CONST	SEGMENT
??_C@_0DA@KDBPKGIM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5LevelUp?5PlusStatQuest?5C@ DB '['
	DB	'%s][%s] LevelUp PlusStatQuest Clear AddStat %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@DKMMCBLO@Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5?$FL?$CFs@
CONST	SEGMENT
??_C@_0DE@DKMMCBLO@Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5?$FL?$CFs@ DB 'E'
	DB	'xperience : Map[%d]-(%d,%d) [%s][%s](%d) %I64u %d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@NPJHELF@?$FLIMPERIALGUARDIAN?$FN?5DestroyGate?5?9@
CONST	SEGMENT
??_C@_0GK@NPJHELF@?$FLIMPERIALGUARDIAN?$FN?5DestroyGate?5?9@ DB '[IMPERIA'
	DB	'LGUARDIAN] DestroyGate -> [ZONE]:%d, [AccountID]:%s, [NAME]:%'
	DB	's, [GATE INDEX]:%d, [USER COUNT]:%d ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@DICKNCPB@?$FLIMPERIALGUARDIAN?$FN?5Drop?5Item?5?3?5?$CI@
CONST	SEGMENT
??_C@_0FF@DICKNCPB@?$FLIMPERIALGUARDIAN?$FN?5Drop?5Item?5?3?5?$CI@ DB '[I'
	DB	'MPERIALGUARDIAN] Drop Item : (%d)(%d/%d) Item:(%s)%d Level:%d'
	DB	' op1:%d op2:%d op3:%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@DHNAFKCL@?$FLIMPERIALGUARDIAN?$FN?5Broken?5Statue@
CONST	SEGMENT
??_C@_0EK@DHNAFKCL@?$FLIMPERIALGUARDIAN?$FN?5Broken?5Statue@ DB '[IMPERIA'
	DB	'LGUARDIAN] Broken Statue => %s [ZONE]:%d [AccountID]:%s [Name'
	DB	']:%s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@NEILDHCA@?$FLIMPERIALGUARDIAN?$FN?5Kill?5the?5boss@
CONST	SEGMENT
??_C@_0FC@NEILDHCA@?$FLIMPERIALGUARDIAN?$FN?5Kill?5the?5boss@ DB '[IMPERI'
	DB	'ALGUARDIAN] Kill the boss monster => %s [ZONE]:%d [AccountID]'
	DB	':%s [Name]:%s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@BNJJBHBK@?$FLIMPERIALGUARDIAN?$FN?5beginX?5?3?5?$CFd?0?5@
CONST	SEGMENT
??_C@_0ED@BNJJBHBK@?$FLIMPERIALGUARDIAN?$FN?5beginX?5?3?5?$CFd?0?5@ DB '['
	DB	'IMPERIALGUARDIAN] beginX : %d, beginY : %d , endX :%d , endY '
	DB	': %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@BCELDKGP@?$FLIMPERIALGUARDIAN?$FN?5SEND?5GATE?5STA@
CONST	SEGMENT
??_C@_0FF@BCELDKGP@?$FLIMPERIALGUARDIAN?$FN?5SEND?5GATE?5STA@ DB '[IMPERI'
	DB	'ALGUARDIAN] SEND GATE STATE -> [ZONE]:%d [AccountID]:%s, [NAM'
	DB	'E]:%s [STATE]:%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@HBDBBIDA@?$FLIMPERIALGUARDIAN?$FN?$FLGCNotifyRemai@
CONST	SEGMENT
??_C@_0EG@HBDBBIDA@?$FLIMPERIALGUARDIAN?$FN?$FLGCNotifyRemai@ DB '[IMPERI'
	DB	'ALGUARDIAN][GCNotifyRemainTickCountFunc] Invalid MsgType : %d'
	DB	' ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@JAMFMLDI@?$FLIMPERIALGUARDIAN?$FN?5?$FLACCOUNTID?$FN?3?$CF@
CONST	SEGMENT
??_C@_0EB@JAMFMLDI@?$FLIMPERIALGUARDIAN?$FN?5?$FLACCOUNTID?$FN?3?$CF@ DB '['
	DB	'IMPERIALGUARDIAN] [ACCOUNTID]:%s, [NAME]:%s, [Reward Exp] : %'
	DB	'd ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@BDGBBCGM@?$FLIMPERIALGUARDIAN?$FN?5Leave?5Player?5@
CONST	SEGMENT
??_C@_0EK@BDGBBCGM@?$FLIMPERIALGUARDIAN?$FN?5Leave?5Player?5@ DB '[IMPERI'
	DB	'ALGUARDIAN] Leave Player Zone [ZONE]:%d, [AccountID]:%s, [Nam'
	DB	'e]:%s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@MJKDFELM@?$FLIMPERIALGUARDIAN?$FN?$FLRESTORE?$FN?5?$FLNAM@
CONST	SEGMENT
??_C@_0EG@MJKDFELM@?$FLIMPERIALGUARDIAN?$FN?$FLRESTORE?$FN?5?$FLNAM@ DB '['
	DB	'IMPERIALGUARDIAN][RESTORE] [NAME]:%s [INDEX]:%d [TYPE]:%d [ST'
	DB	'ATE]:%d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@ELCKLNIA@?$FLIMPERIALGUARDIAN?$FN?$FLGetGateNumber@
CONST	SEGMENT
??_C@_0DO@ELCKLNIA@?$FLIMPERIALGUARDIAN?$FN?$FLGetGateNumber@ DB '[IMPERI'
	DB	'ALGUARDIAN][GetGateNumberFunc] Invalid zoneIndex : %d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@PIAPLIPD@?$FLEVENTDUNGEON?$FN?5script?5file?5not?5l@
CONST	SEGMENT
??_C@_0CG@PIAPLIPD@?$FLEVENTDUNGEON?$FN?5script?5file?5not?5l@ DB '[EVENT'
	DB	'DUNGEON] script file not loaded', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@HBNLDLKJ@?$FLIMPERIALGUARDIAN?$FN?5DELETE?5ALL?5MO@
CONST	SEGMENT
??_C@_0DP@HBNLDLKJ@?$FLIMPERIALGUARDIAN?$FN?5DELETE?5ALL?5MO@ DB '[IMPERI'
	DB	'ALGUARDIAN] DELETE ALL MONSTER -> [ZONE]:%d [COUNT]:%d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FL@DNMPJOJF@?$FLIMPERIALGUARDIAN?$FN?$FLRegenMonsterF@
CONST	SEGMENT
??_C@_0FL@DNMPJOJF@?$FLIMPERIALGUARDIAN?$FN?$FLRegenMonsterF@ DB '[IMPERI'
	DB	'ALGUARDIAN][RegenMonsterFunc] gObjAddMonster fail (ErrorCode:'
	DB	' %d, MonsterClass: %d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HH@NPLECNJH@?$FLIMPERIALGUARDIAN?$FN?5AddMonster?5?$DN?$DO@
CONST	SEGMENT
??_C@_0HH@NPLECNJH@?$FLIMPERIALGUARDIAN?$FN?5AddMonster?5?$DN?$DO@ DB '[I'
	DB	'MPERIALGUARDIAN] AddMonster => %s, MapNumber => %d ,Zone => %'
	DB	'd PosX => %d, PosY => %d, Connected => %d, STATE => %d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@KMFHIHOJ@?$FLIMPERIALGUARDIAN?$FN?5AddGate?5?$DN?$DO?5?$CFs@
CONST	SEGMENT
??_C@_0FG@KMFHIHOJ@?$FLIMPERIALGUARDIAN?$FN?5AddGate?5?$DN?$DO?5?$CFs@ DB '['
	DB	'IMPERIALGUARDIAN] AddGate => %s, MapNumber => %d ,Zone => %d '
	DB	'PosX => %d, PosY => %d ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@DCMGCKOE@?$FLIMPERIALGUARDIAN?$FN?$FLRegenMonsterF@
CONST	SEGMENT
??_C@_0EN@DCMGCKOE@?$FLIMPERIALGUARDIAN?$FN?$FLRegenMonsterF@ DB '[IMPERI'
	DB	'ALGUARDIAN][RegenMonsterFunc] Invalid MonsterRegenTable Index'
	DB	' => %d  ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@OPEPFPC@?$FLIMPERIALGUARDIAN?$FN?$FLRegenMonsterF@
CONST	SEGMENT
??_C@_0EA@OPEPFPC@?$FLIMPERIALGUARDIAN?$FN?$FLRegenMonsterF@ DB '[IMPERIA'
	DB	'LGUARDIAN][RegenMonsterFunc] Invalid zone index => %d  ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@EJIDDFJD@?$FLIMPERIALGUARDIAN?$FN?5?$FL?$CFd?5ZONE?5USER@
CONST	SEGMENT
??_C@_0CP@EJIDDFJD@?$FLIMPERIALGUARDIAN?$FN?5?$FL?$CFd?5ZONE?5USER@ DB '['
	DB	'IMPERIALGUARDIAN] [%d ZONE USER COUNT] : %d  ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@OILHLBMJ@?$FLIMPERIALGUARDIAN?$FN?5Enter?5Zone?5Us@
CONST	SEGMENT
??_C@_0EK@OILHLBMJ@?$FLIMPERIALGUARDIAN?$FN?5Enter?5Zone?5Us@ DB '[IMPERI'
	DB	'ALGUARDIAN] Enter Zone User -> [AccountID]:%s [NAME]:%s [ZONE'
	DB	']:%d ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@JMFDLKOB@?$FLIMPERIALGUARDIAN?$FN?$FL?5Invalid?5User@
CONST	SEGMENT
??_C@_0EB@JMFDLKOB@?$FLIMPERIALGUARDIAN?$FN?$FL?5Invalid?5User@ DB '[IMPE'
	DB	'RIALGUARDIAN][ Invalid User ] User is not a party [%s][%s] ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@EBJLDAME@?$FLIMPERIALGUARDIAN?$FN?$FL?5Invalid?5User@
CONST	SEGMENT
??_C@_0CN@EBJLDAME@?$FLIMPERIALGUARDIAN?$FN?$FL?5Invalid?5User@ DB '[IMPE'
	DB	'RIALGUARDIAN][ Invalid User ] [%s][%s] ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@LFDAMNEF@?$FLIMPERIALGUARDIAN?$FN?5MISSION?5CLEAR@
CONST	SEGMENT
??_C@_0EC@LFDAMNEF@?$FLIMPERIALGUARDIAN?$FN?5MISSION?5CLEAR@ DB '[IMPERIA'
	DB	'LGUARDIAN] MISSION CLEAR USER ->[AccountID]:%s [Name]:%s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@HOFCCJKC@?$FLIMPERIALGUARDIAN?$FN?5MISSION?5FAIL?5@
CONST	SEGMENT
??_C@_0CO@HOFCCJKC@?$FLIMPERIALGUARDIAN?$FN?5MISSION?5FAIL?5@ DB '[IMPERI'
	DB	'ALGUARDIAN] MISSION FAIL -> [ZONE]:%d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HMEEDDK@?$FLIMPERIALGUARDIAN?$FN?5ALL?5KICK?5USER@
CONST	SEGMENT
??_C@_0CP@HMEEDDK@?$FLIMPERIALGUARDIAN?$FN?5ALL?5KICK?5USER@ DB '[IMPERIA'
	DB	'LGUARDIAN] ALL KICK USER -> [ZONE]:%d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@KDFOBECC@?$FLIMPERIALGUARDIAN?$FN?5Leave?5Player?5@
CONST	SEGMENT
??_C@_0EM@KDFOBECC@?$FLIMPERIALGUARDIAN?$FN?5Leave?5Player?5@ DB '[IMPERI'
	DB	'ALGUARDIAN] Leave Player Zone -> [ZONE]:%d [AccountID]:%s [Na'
	DB	'me]:%s ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@BDFBOBIA@?$FLIMPERIALGUARDIAN?$FN?5BEGIN?5WAITPLA@
CONST	SEGMENT
??_C@_0DC@BDFBOBIA@?$FLIMPERIALGUARDIAN?$FN?5BEGIN?5WAITPLA@ DB '[IMPERIA'
	DB	'LGUARDIAN] BEGIN WAITPLAYER -> [ZONE]:%d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FGCFEPEM@?$FLIMPERIALGUARDIAN?$FN?5END?5LOOTTIME?5@
CONST	SEGMENT
??_C@_0CO@FGCFEPEM@?$FLIMPERIALGUARDIAN?$FN?5END?5LOOTTIME?5@ DB '[IMPERI'
	DB	'ALGUARDIAN] END LOOTTIME -> [ZONE]:%d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@EDOFHFCG@?$FLIMPERIALGUARDIAN?$FN?5BEGIN?5LOOTTIM@
CONST	SEGMENT
??_C@_0DA@EDOFHFCG@?$FLIMPERIALGUARDIAN?$FN?5BEGIN?5LOOTTIM@ DB '[IMPERIA'
	DB	'LGUARDIAN] BEGIN LOOTTIME -> [ZONE]:%d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@DCFNIECJ@?$FLIMPERIALGUARDIAN?$FN?5END?5TIMEATTAC@
CONST	SEGMENT
??_C@_0DA@DCFNIECJ@?$FLIMPERIALGUARDIAN?$FN?5END?5TIMEATTAC@ DB '[IMPERIA'
	DB	'LGUARDIAN] END TIMEATTACK -> [ZONE]:%d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@KMNKLEEH@?$FLIMPERIALGUARDIAN?$FN?5OBJECT?5COUNT?5@
CONST	SEGMENT
??_C@_0DI@KMNKLEEH@?$FLIMPERIALGUARDIAN?$FN?5OBJECT?5COUNT?5@ DB '[IMPERI'
	DB	'ALGUARDIAN] OBJECT COUNT -> [ZONE]:%d [COUNT]:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@GLEDMLHG@?$FLIMPERIALGUARDIAN?$FN?5BEGIN?5TIMEATT@
CONST	SEGMENT
??_C@_0DC@GLEDMLHG@?$FLIMPERIALGUARDIAN?$FN?5BEGIN?5TIMEATT@ DB '[IMPERIA'
	DB	'LGUARDIAN] BEGIN TIMEATTACK -> [ZONE]:%d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@ DB 'error : %s %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
CONST	SEGMENT
??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@ DB 'ImperialGuardian.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KDEFHMMJ@Event?2ImperialGuardianReward?4dat@
CONST	SEGMENT
??_C@_0CB@KDEFHMMJ@Event?2ImperialGuardianReward?4dat@ DB 'Event\Imperial'
	DB	'GuardianReward.dat', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GIJEGFIP@IGPromotionOn?$AA@
CONST	SEGMENT
??_C@_0O@GIJEGFIP@IGPromotionOn?$AA@ DB 'IGPromotionOn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LHIDHHFN@MysteriousPaperDropRate?$AA@
CONST	SEGMENT
??_C@_0BI@LHIDHHFN@MysteriousPaperDropRate?$AA@ DB 'MysteriousPaperDropRa'
	DB	'te', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CPONAIFB@MixNeedZen?$AA@
CONST	SEGMENT
??_C@_0L@CPONAIFB@MixNeedZen?$AA@ DB 'MixNeedZen', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KFFDMCNL@TimeAttackTime?$AA@
CONST	SEGMENT
??_C@_0P@KFFDMCNL@TimeAttackTime?$AA@ DB 'TimeAttackTime', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IFHCOMEP@WaitPlayerTime?$AA@
CONST	SEGMENT
??_C@_0P@IFHCOMEP@WaitPlayerTime?$AA@ DB 'WaitPlayerTime', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BGOOMMJN@LootTime?$AA@
CONST	SEGMENT
??_C@_08BGOOMMJN@LootTime?$AA@ DB 'LootTime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
CONST	SEGMENT
??_C@_0P@EMJDPFDH@GameServerInfo?$AA@ DB 'GameServerInfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DADCBAGP@IGEventOn?$AA@
CONST	SEGMENT
??_C@_09DADCBAGP@IGEventOn?$AA@ DB 'IGEventOn', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7CImperialGuardian@@6B@
CONST	SEGMENT
??_7CImperialGuardian@@6B@ DD FLAT:??_R4CImperialGuardian@@6B@ ; CImperialGuardian::`vftable'
	DD	FLAT:??_ECImperialGuardian@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GCSendServerMsgAll@CImperialGuardian@@QAEXHPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GCSendServerMsgAll@CImperialGuardian@@QAEXHPAD@Z$0
__ehfuncinfo$?GCSendServerMsgAll@CImperialGuardian@@QAEXHPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GCSendServerMsgAll@CImperialGuardian@@QAEXHPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z$0
__ehfuncinfo$?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GCMissionFail@CImperialGuardian@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GCMissionFail@CImperialGuardian@@QAEXH@Z$0
__ehfuncinfo$?GCMissionFail@CImperialGuardian@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GCMissionFail@CImperialGuardian@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GCNotifyAllZoneClear@CImperialGuardian@@QAE_NH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GCNotifyAllZoneClear@CImperialGuardian@@QAE_NH@Z$0
__ehfuncinfo$?GCNotifyAllZoneClear@CImperialGuardian@@QAE_NH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GCNotifyAllZoneClear@CImperialGuardian@@QAE_NH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GCNotifyZoneClear@CImperialGuardian@@QAE_NH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GCNotifyZoneClear@CImperialGuardian@@QAE_NH@Z$0
__ehfuncinfo$?GCNotifyZoneClear@CImperialGuardian@@QAE_NH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GCNotifyZoneClear@CImperialGuardian@@QAE_NH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ProcMissionClear@CImperialGuardian@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcMissionClear@CImperialGuardian@@QAEXH@Z$0
__ehfuncinfo$?ProcMissionClear@CImperialGuardian@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ProcMissionClear@CImperialGuardian@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ProcAllKick@CImperialGuardian@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcAllKick@CImperialGuardian@@QAEXH@Z$0
__ehfuncinfo$?ProcAllKick@CImperialGuardian@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ProcAllKick@CImperialGuardian@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ProcAllWarpNextZone@CImperialGuardian@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcAllWarpNextZone@CImperialGuardian@@QAEXH@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcAllWarpNextZone@CImperialGuardian@@QAEXH@Z$1
__ehfuncinfo$?ProcAllWarpNextZone@CImperialGuardian@@QAEXH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ProcAllWarpNextZone@CImperialGuardian@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CImperialGuardian@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CImperialGuardian@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CImperialGuardian@@QAE@XZ$0
__ehfuncinfo$??0CImperialGuardian@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CImperialGuardian@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_stZoneInfo@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_stZoneInfo@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_stZoneInfo@@QAE@ABU0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_stZoneInfo@@QAE@ABU0@@Z$2
__ehfuncinfo$??0_stZoneInfo@@QAE@ABU0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0_stZoneInfo@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z$50
__ehfuncinfo$?_Reallocate@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV01@@Z$66 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV01@@Z$0
__unwindtable$??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV01@@Z$66
__ehfuncinfo$??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stMonsterIndexInfo@@U1@@?$allocator@U_stMonsterIndexInfo@@@std@@QAEXPAU_stMonsterIndexInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stMonsterIndexInfo@@U1@@?$allocator@U_stMonsterIndexInfo@@@std@@QAEXPAU_stMonsterIndexInfo@@$$QAU2@@Z PROC ; std::allocator<_stMonsterIndexInfo>::construct<_stMonsterIndexInfo,_stMonsterIndexInfo>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 656  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@U_stMonsterIndexInfo@@U1@@?$allocator@U_stMonsterIndexInfo@@@std@@QAEXPAU_stMonsterIndexInfo@@$$QAU2@@Z ENDP ; std::allocator<_stMonsterIndexInfo>::construct<_stMonsterIndexInfo,_stMonsterIndexInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stMonsterIndexInfo@@U1@@?$allocator_traits@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@SAXAAV?$allocator@U_stMonsterIndexInfo@@@1@PAU_stMonsterIndexInfo@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_stMonsterIndexInfo@@U1@@?$allocator_traits@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@SAXAAV?$allocator@U_stMonsterIndexInfo@@@1@PAU_stMonsterIndexInfo@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<_stMonsterIndexInfo> >::construct<_stMonsterIndexInfo,_stMonsterIndexInfo>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@U_stMonsterIndexInfo@@U1@@?$allocator_traits@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@SAXAAV?$allocator@U_stMonsterIndexInfo@@@1@PAU_stMonsterIndexInfo@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<_stMonsterIndexInfo> >::construct<_stMonsterIndexInfo,_stMonsterIndexInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U_stMonsterIndexInfo@@@std@@YA$$QAU_stMonsterIndexInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_stMonsterIndexInfo@@@std@@YA$$QAU_stMonsterIndexInfo@@AAU1@@Z PROC ; std::forward<_stMonsterIndexInfo>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_stMonsterIndexInfo@@@std@@YA$$QAU_stMonsterIndexInfo@@AAU1@@Z ENDP ; std::forward<_stMonsterIndexInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stMonsterIndexInfo@@U1@@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stMonsterIndexInfo@@U1@@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::construct<_stMonsterIndexInfo,_stMonsterIndexInfo>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@U_stMonsterIndexInfo@@U1@@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::construct<_stMonsterIndexInfo,_stMonsterIndexInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_stMonsterIndexInfo@@@?$allocator@U_stMonsterIndexInfo@@@std@@QAEXPAU_stMonsterIndexInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U_stMonsterIndexInfo@@@?$allocator@U_stMonsterIndexInfo@@@std@@QAEXPAU_stMonsterIndexInfo@@@Z PROC ; std::allocator<_stMonsterIndexInfo>::destroy<_stMonsterIndexInfo>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U_stMonsterIndexInfo@@@?$allocator@U_stMonsterIndexInfo@@@std@@QAEXPAU_stMonsterIndexInfo@@@Z ENDP ; std::allocator<_stMonsterIndexInfo>::destroy<_stMonsterIndexInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAU_stMonsterIndexInfo@@PAU1@V?$allocator@U_stMonsterIndexInfo@@@std@@U1@@std@@YAPAU_stMonsterIndexInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAU_stMonsterIndexInfo@@PAU1@V?$allocator@U_stMonsterIndexInfo@@@std@@U1@@std@@YAPAU_stMonsterIndexInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<_stMonsterIndexInfo *,_stMonsterIndexInfo *,std::allocator<_stMonsterIndexInfo>,_stMonsterIndexInfo>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000a	3b cf		 cmp	 ecx, edi
  0000c	74 22		 je	 SHORT $LN37@Uninit_mov
  0000e	56		 push	 esi
  0000f	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
$LL4@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00012	85 f6		 test	 esi, esi
  00014	74 0a		 je	 SHORT $LN2@Uninit_mov
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	89 06		 mov	 DWORD PTR [esi], eax
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN2@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00020	83 c1 08	 add	 ecx, 8
  00023	83 c6 08	 add	 esi, 8
  00026	3b cf		 cmp	 ecx, edi
  00028	75 e8		 jne	 SHORT $LL4@Uninit_mov

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5f		 pop	 edi

; 450  : 	}

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN37@Uninit_mov:

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);

  00030	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00033	5f		 pop	 edi

; 450  : 	}

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??$_Uninit_move@PAU_stMonsterIndexInfo@@PAU1@V?$allocator@U_stMonsterIndexInfo@@@std@@U1@@std@@YAPAU_stMonsterIndexInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<_stMonsterIndexInfo *,_stMonsterIndexInfo *,std::allocator<_stMonsterIndexInfo>,_stMonsterIndexInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAU_stMonsterIndexInfo@@@std@@YAPAU_stMonsterIndexInfo@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAU_stMonsterIndexInfo@@@std@@YAPAU_stMonsterIndexInfo@@PAU1@@Z PROC ; std::_Val_type<_stMonsterIndexInfo *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAU_stMonsterIndexInfo@@@std@@YAPAU_stMonsterIndexInfo@@PAU1@@Z ENDP ; std::_Val_type<_stMonsterIndexInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<int,int,int>, COMDAT

; 468  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 469  : 	_DEBUG_RANGE_PTR(_First, _Last, _Dest);
; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 472  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move
; 473  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<int,int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAH@std@@YAPAHPAH@Z PROC			; std::_Val_type<int *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAH@std@@YAPAHPAH@Z ENDP			; std::_Val_type<int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_stMonsterIndexInfo@@@?$allocator_traits@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@SAXAAV?$allocator@U_stMonsterIndexInfo@@@1@PAU_stMonsterIndexInfo@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_stMonsterIndexInfo@@@?$allocator_traits@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@SAXAAV?$allocator@U_stMonsterIndexInfo@@@1@PAU_stMonsterIndexInfo@@@Z PROC ; std::allocator_traits<std::allocator<_stMonsterIndexInfo> >::destroy<_stMonsterIndexInfo>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@U_stMonsterIndexInfo@@@?$allocator_traits@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@SAXAAV?$allocator@U_stMonsterIndexInfo@@@1@PAU_stMonsterIndexInfo@@@Z ENDP ; std::allocator_traits<std::allocator<_stMonsterIndexInfo> >::destroy<_stMonsterIndexInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@PBU_stMonsterIndexInfo@@PAU1@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@YAPAU_stMonsterIndexInfo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PBU_stMonsterIndexInfo@@PAU1@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@YAPAU_stMonsterIndexInfo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<_stMonsterIndexInfo const *,_stMonsterIndexInfo *,std::allocator<_stMonsterIndexInfo> >, COMDAT

; 373  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 378  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000a	3b cf		 cmp	 ecx, edi
  0000c	74 22		 je	 SHORT $LN37@Uninit_cop
  0000e	56		 push	 esi
  0000f	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
$LL4@Uninit_cop:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00012	85 f6		 test	 esi, esi
  00014	74 0a		 je	 SHORT $LN2@Uninit_cop
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	89 06		 mov	 DWORD PTR [esi], eax
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN2@Uninit_cop:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 378  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00020	83 c1 08	 add	 ecx, 8
  00023	83 c6 08	 add	 esi, 8
  00026	3b cf		 cmp	 ecx, edi
  00028	75 e8		 jne	 SHORT $LL4@Uninit_cop

; 379  : 		_Al.construct(_Dest, *_First);
; 380  : 	_CATCH_ALL
; 381  : 	for (; _Next != _Dest; ++_Next)
; 382  : 		_Al.destroy(_Next);
; 383  : 	_RERAISE;
; 384  : 	_CATCH_END
; 385  : 	return (_Dest);

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5f		 pop	 edi

; 386  : 	}

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN37@Uninit_cop:

; 379  : 		_Al.construct(_Dest, *_First);
; 380  : 	_CATCH_ALL
; 381  : 	for (; _Next != _Dest; ++_Next)
; 382  : 		_Al.destroy(_Next);
; 383  : 	_RERAISE;
; 384  : 	_CATCH_END
; 385  : 	return (_Dest);

  00030	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00033	5f		 pop	 edi

; 386  : 	}

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??$_Uninit_copy@PBU_stMonsterIndexInfo@@PAU1@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@YAPAU_stMonsterIndexInfo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<_stMonsterIndexInfo const *,_stMonsterIndexInfo *,std::allocator<_stMonsterIndexInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@$$CBHH@std@@YAPAHPBH0PAHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@$$CBHH@std@@YAPAHPBH0PAHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<int const ,int>, COMDAT

; 402  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 403  : 	_DEBUG_RANGE_PTR(_First, _Last, _Dest);
; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move
; 407  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_copy@$$CBHH@std@@YAPAHPBH0PAHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<int const ,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAU_stMonsterIndexInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@YAPAU_stMonsterIndexInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAU_stMonsterIndexInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@YAPAU_stMonsterIndexInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@@Z PROC ; std::_Uninit_move<_stMonsterIndexInfo *,_stMonsterIndexInfo *,std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_stMonsterIndexInfo@@PAU1@V?$allocator@U_stMonsterIndexInfo@@@std@@U1@@std@@YAPAU_stMonsterIndexInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stMonsterIndexInfo *,_stMonsterIndexInfo *,std::allocator<_stMonsterIndexInfo>,_stMonsterIndexInfo>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAU_stMonsterIndexInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@YAPAU_stMonsterIndexInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@@Z ENDP ; std::_Uninit_move<_stMonsterIndexInfo *,_stMonsterIndexInfo *,std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_stMonsterIndexInfo@@@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U_stMonsterIndexInfo@@@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@@Z PROC ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::destroy<_stMonsterIndexInfo>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U_stMonsterIndexInfo@@@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::destroy<_stMonsterIndexInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAU_stMonsterIndexInfo@@PAU1@@std@@YAAAPAU_stMonsterIndexInfo@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAU_stMonsterIndexInfo@@PAU1@@std@@YAAAPAU_stMonsterIndexInfo@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<_stMonsterIndexInfo *,_stMonsterIndexInfo *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAU_stMonsterIndexInfo@@PAU1@@std@@YAAAPAU_stMonsterIndexInfo@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<_stMonsterIndexInfo *,_stMonsterIndexInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@PBU_stMonsterIndexInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@YAPAU_stMonsterIndexInfo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_copy@PBU_stMonsterIndexInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@YAPAU_stMonsterIndexInfo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@@Z PROC ; std::_Uninit_copy<_stMonsterIndexInfo const *,_stMonsterIndexInfo *,std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> > >, COMDAT

; 414  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 415  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00010	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBU_stMonsterIndexInfo@@PAU1@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@YAPAU_stMonsterIndexInfo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<_stMonsterIndexInfo const *,_stMonsterIndexInfo *,std::allocator<_stMonsterIndexInfo> >
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 416  : 		_Ptr_cat(_First, _Dest)));
; 417  : 	}

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Uninit_copy@PBU_stMonsterIndexInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@YAPAU_stMonsterIndexInfo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@@Z ENDP ; std::_Uninit_copy<_stMonsterIndexInfo const *,_stMonsterIndexInfo *,std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAU_stMonsterIndexInfo@@@std@@YAPAU_stMonsterIndexInfo@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAU_stMonsterIndexInfo@@@std@@YAPAU_stMonsterIndexInfo@@PAU1@@Z PROC ; std::_Unchecked<_stMonsterIndexInfo *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAU_stMonsterIndexInfo@@@std@@YAPAU_stMonsterIndexInfo@@PAU1@@Z ENDP ; std::_Unchecked<_stMonsterIndexInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@YAPBU_stMonsterIndexInfo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@YAPBU_stMonsterIndexInfo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >, COMDAT

; 265  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 266  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 267  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@YAPBU_stMonsterIndexInfo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stMonsterIndexInfo@@ABU1@@?$allocator@U_stMonsterIndexInfo@@@std@@QAEXPAU_stMonsterIndexInfo@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stMonsterIndexInfo@@ABU1@@?$allocator@U_stMonsterIndexInfo@@@std@@QAEXPAU_stMonsterIndexInfo@@ABU2@@Z PROC ; std::allocator<_stMonsterIndexInfo>::construct<_stMonsterIndexInfo,_stMonsterIndexInfo const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 656  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@U_stMonsterIndexInfo@@ABU1@@?$allocator@U_stMonsterIndexInfo@@@std@@QAEXPAU_stMonsterIndexInfo@@ABU2@@Z ENDP ; std::allocator<_stMonsterIndexInfo>::construct<_stMonsterIndexInfo,_stMonsterIndexInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stMonsterIndexInfo@@AAU1@@?$allocator@U_stMonsterIndexInfo@@@std@@QAEXPAU_stMonsterIndexInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stMonsterIndexInfo@@AAU1@@?$allocator@U_stMonsterIndexInfo@@@std@@QAEXPAU_stMonsterIndexInfo@@AAU2@@Z PROC ; std::allocator<_stMonsterIndexInfo>::construct<_stMonsterIndexInfo,_stMonsterIndexInfo &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 656  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@U_stMonsterIndexInfo@@AAU1@@?$allocator@U_stMonsterIndexInfo@@@std@@QAEXPAU_stMonsterIndexInfo@@AAU2@@Z ENDP ; std::allocator<_stMonsterIndexInfo>::construct<_stMonsterIndexInfo,_stMonsterIndexInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z PROC	; std::_Rechecked<int *,int *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z ENDP	; std::_Rechecked<int *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@PBHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPBH0PAHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_copy@PBHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPBH0PAHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Uninit_copy<int const *,int *,std::_Wrap_alloc<std::allocator<int> > >, COMDAT

; 414  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 415  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 416  : 		_Ptr_cat(_First, _Dest)));
; 417  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_copy@PBHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPBH0PAHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Uninit_copy<int const *,int *,std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAH@std@@YAPAHPAH@Z PROC			; std::_Unchecked<int *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAH@std@@YAPAHPAH@Z ENDP			; std::_Unchecked<int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPBHV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPBHV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<std::_Simple_types<int> > >, COMDAT

; 265  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 266  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 267  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPBHV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<std::_Simple_types<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HABH@?$allocator@H@std@@QAEXPAHABH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@HABH@?$allocator@H@std@@QAEXPAHABH@Z PROC	; std::allocator<int>::construct<int,int const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@HABH@?$allocator@H@std@@QAEXPAHABH@Z ENDP	; std::allocator<int>::construct<int,int const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z PROC	; std::allocator<int>::construct<int,int &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z ENDP	; std::allocator<int>::construct<int,int &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAU_stMonsterIndexInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@YAPAU_stMonsterIndexInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAU_stMonsterIndexInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@YAPAU_stMonsterIndexInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@@Z PROC ; std::_Uninitialized_move<_stMonsterIndexInfo *,_stMonsterIndexInfo *,std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_stMonsterIndexInfo@@PAU1@V?$allocator@U_stMonsterIndexInfo@@@std@@U1@@std@@YAPAU_stMonsterIndexInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stMonsterIndexInfo *,_stMonsterIndexInfo *,std::allocator<_stMonsterIndexInfo>,_stMonsterIndexInfo>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAU_stMonsterIndexInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@YAPAU_stMonsterIndexInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<_stMonsterIndexInfo *,_stMonsterIndexInfo *,std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@YAXPAU_stMonsterIndexInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@YAXPAU_stMonsterIndexInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> > >, COMDAT

; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@YAXPAU_stMonsterIndexInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@U_stMonsterIndexInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_stMonsterIndexInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@U_stMonsterIndexInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_stMonsterIndexInfo@@0@Z PROC ; std::_Ptr_cat<_stMonsterIndexInfo,_stMonsterIndexInfo>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@U_stMonsterIndexInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_stMonsterIndexInfo@@0@Z ENDP ; std::_Ptr_cat<_stMonsterIndexInfo,_stMonsterIndexInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@U_stMonsterIndexInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBU_stMonsterIndexInfo@@PAU2@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@U_stMonsterIndexInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBU_stMonsterIndexInfo@@PAU2@@Z PROC ; std::_Ptr_cat<_stMonsterIndexInfo,_stMonsterIndexInfo>, COMDAT

; 649  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 650  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 651  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 652  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@U_stMonsterIndexInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBU_stMonsterIndexInfo@@PAU2@@Z ENDP ; std::_Ptr_cat<_stMonsterIndexInfo,_stMonsterIndexInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@U_stMonsterIndexInfo@@@std@@@std@@YAABV?$allocator@U_stMonsterIndexInfo@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@U_stMonsterIndexInfo@@@std@@@std@@YAABV?$allocator@U_stMonsterIndexInfo@@@0@ABV10@@Z PROC ; std::forward<std::allocator<_stMonsterIndexInfo> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@U_stMonsterIndexInfo@@@std@@@std@@YAABV?$allocator@U_stMonsterIndexInfo@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<_stMonsterIndexInfo> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@YA$$QAV?$allocator@U_stMonsterIndexInfo@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@YA$$QAV?$allocator@U_stMonsterIndexInfo@@@0@AAV10@@Z PROC ; std::forward<std::allocator<_stMonsterIndexInfo> >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@YA$$QAV?$allocator@U_stMonsterIndexInfo@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<_stMonsterIndexInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >, COMDAT

; 180  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@H@std@@@std@@YAABV?$allocator@H@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@H@std@@@std@@YAABV?$allocator@H@0@ABV10@@Z PROC ; std::forward<std::allocator<int> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@H@std@@@std@@YAABV?$allocator@H@0@ABV10@@Z ENDP ; std::forward<std::allocator<int> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$allocator@H@std@@@std@@YA$$QAV?$allocator@H@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@H@std@@@std@@YA$$QAV?$allocator@H@0@AAV10@@Z PROC ; std::forward<std::allocator<int> >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@H@std@@@std@@YA$$QAV?$allocator@H@0@AAV10@@Z ENDP ; std::forward<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@U_stMonsterIndexInfo@@@std@@YAPAU_stMonsterIndexInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@U_stMonsterIndexInfo@@@std@@YAPAU_stMonsterIndexInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<_stMonsterIndexInfo>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@U_stMonsterIndexInfo@@@std@@YAPAU_stMonsterIndexInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<_stMonsterIndexInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@PAU_stMonsterIndexInfo@@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@2@@std@@YAPAU_stMonsterIndexInfo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@PAU_stMonsterIndexInfo@@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@2@@std@@YAPAU_stMonsterIndexInfo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >,_stMonsterIndexInfo *,std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> > >, COMDAT

; 424  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 415  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBU_stMonsterIndexInfo@@PAU1@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@YAPAU_stMonsterIndexInfo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<_stMonsterIndexInfo const *,_stMonsterIndexInfo *,std::allocator<_stMonsterIndexInfo> >
  00017	83 c4 14	 add	 esp, 20			; 00000014H

; 425  : 	return (_Rechecked(_Dest,
; 426  : 		_Uninit_copy(_Unchecked(_First), _Unchecked(_Last),
; 427  : 			_Unchecked(_Dest), _Al)));
; 428  : 	}

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@PAU_stMonsterIndexInfo@@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@2@@std@@YAPAU_stMonsterIndexInfo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >,_stMonsterIndexInfo *,std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stMonsterIndexInfo@@ABU1@@?$allocator_traits@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@SAXAAV?$allocator@U_stMonsterIndexInfo@@@1@PAU_stMonsterIndexInfo@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_stMonsterIndexInfo@@ABU1@@?$allocator_traits@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@SAXAAV?$allocator@U_stMonsterIndexInfo@@@1@PAU_stMonsterIndexInfo@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<_stMonsterIndexInfo> >::construct<_stMonsterIndexInfo,_stMonsterIndexInfo const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@U_stMonsterIndexInfo@@ABU1@@?$allocator_traits@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@SAXAAV?$allocator@U_stMonsterIndexInfo@@@1@PAU_stMonsterIndexInfo@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<_stMonsterIndexInfo> >::construct<_stMonsterIndexInfo,_stMonsterIndexInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABU_stMonsterIndexInfo@@@std@@YAABU_stMonsterIndexInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU_stMonsterIndexInfo@@@std@@YAABU_stMonsterIndexInfo@@ABU1@@Z PROC ; std::forward<_stMonsterIndexInfo const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABU_stMonsterIndexInfo@@@std@@YAABU_stMonsterIndexInfo@@ABU1@@Z ENDP ; std::forward<_stMonsterIndexInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stMonsterIndexInfo@@AAU1@@?$allocator_traits@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@SAXAAV?$allocator@U_stMonsterIndexInfo@@@1@PAU_stMonsterIndexInfo@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_stMonsterIndexInfo@@AAU1@@?$allocator_traits@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@SAXAAV?$allocator@U_stMonsterIndexInfo@@@1@PAU_stMonsterIndexInfo@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<_stMonsterIndexInfo> >::construct<_stMonsterIndexInfo,_stMonsterIndexInfo &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@U_stMonsterIndexInfo@@AAU1@@?$allocator_traits@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@SAXAAV?$allocator@U_stMonsterIndexInfo@@@1@PAU_stMonsterIndexInfo@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<_stMonsterIndexInfo> >::construct<_stMonsterIndexInfo,_stMonsterIndexInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAU_stMonsterIndexInfo@@@std@@YAAAU_stMonsterIndexInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU_stMonsterIndexInfo@@@std@@YAAAU_stMonsterIndexInfo@@AAU1@@Z PROC ; std::forward<_stMonsterIndexInfo &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU_stMonsterIndexInfo@@@std@@YAAAU_stMonsterIndexInfo@@AAU1@@Z ENDP ; std::forward<_stMonsterIndexInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBU_stMonsterIndexInfo@@@std@@YAPBU_stMonsterIndexInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBU_stMonsterIndexInfo@@@std@@YAPBU_stMonsterIndexInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<_stMonsterIndexInfo const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBU_stMonsterIndexInfo@@@std@@YAPBU_stMonsterIndexInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<_stMonsterIndexInfo const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@PAHU?$_Wrap_alloc@V?$allocator@H@std@@@2@@std@@YAPAHV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PAHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@PAHU?$_Wrap_alloc@V?$allocator@H@std@@@2@@std@@YAPAHV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PAHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >,int *,std::_Wrap_alloc<std::allocator<int> > >, COMDAT

; 424  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	2b c8		 sub	 ecx, eax
  0000b	c1 f9 02	 sar	 ecx, 2
  0000e	56		 push	 esi

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 8d 00 00
	00 00		 lea	 esi, DWORD PTR [ecx*4]
  00016	56		 push	 esi
  00017	50		 push	 eax
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 425  : 	return (_Rechecked(_Dest,
; 426  : 		_Uninit_copy(_Unchecked(_First), _Unchecked(_Last),
; 427  : 			_Unchecked(_Dest), _Al)));
; 428  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@PAHU?$_Wrap_alloc@V?$allocator@H@std@@@2@@std@@YAPAHV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PAHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >,int *,std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HABH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHABH@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@HABH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHABH@Z PROC ; std::allocator_traits<std::allocator<int> >::construct<int,int const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@HABH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHABH@Z ENDP ; std::allocator_traits<std::allocator<int> >::construct<int,int const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABH@std@@YAABHABH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABH@std@@YAABHABH@Z PROC			; std::forward<int const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABH@std@@YAABHABH@Z ENDP			; std::forward<int const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HAAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHAAH@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@HAAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHAAH@Z PROC ; std::allocator_traits<std::allocator<int> >::construct<int,int &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@HAAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHAAH@Z ENDP ; std::allocator_traits<std::allocator<int> >::construct<int,int &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAH@std@@YAAAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAH@std@@YAAAHAAH@Z PROC			; std::forward<int &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAH@std@@YAAAHAAH@Z ENDP			; std::forward<int &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBH@std@@YAPBHABHU?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBH@std@@YAPBHABHU?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<int const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBH@std@@YAPBHABHU?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<int const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<int *,int *>, COMDAT

; 2526 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2527 : 	ptrdiff_t _Count = _Last - _First;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	56		 push	 esi

; 2528 : 	_CSTD memmove(&*_Dest, &*_First,

  0000c	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000f	c1 f8 02	 sar	 eax, 2
  00012	57		 push	 edi
  00013	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2529 : 		_Count * sizeof (*_First));
; 2530 : 	return (_Dest + _Count);

  00025	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 2531 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<int *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z PROC ; std::_Ptr_cat<int,int>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ENDP ; std::_Ptr_cat<int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PBHPAH@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PBHPAH@Z PROC ; std::_Ptr_cat<int,int>, COMDAT

; 649  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 650  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 651  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 652  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PBHPAH@Z ENDP ; std::_Ptr_cat<int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAU_stMonsterIndexInfo@@@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEPAU_stMonsterIndexInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAU_stMonsterIndexInfo@@@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEPAU_stMonsterIndexInfo@@PAU2@00@Z PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Umove<_stMonsterIndexInfo *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_stMonsterIndexInfo@@PAU1@V?$allocator@U_stMonsterIndexInfo@@@std@@U1@@std@@YAPAU_stMonsterIndexInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stMonsterIndexInfo *,_stMonsterIndexInfo *,std::allocator<_stMonsterIndexInfo>,_stMonsterIndexInfo>
  00017	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAU_stMonsterIndexInfo@@@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEPAU_stMonsterIndexInfo@@PAU2@00@Z ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Umove<_stMonsterIndexInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Umove<int *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Umove<int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@YAXPAU_stMonsterIndexInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@YAXPAU_stMonsterIndexInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@YAXPAU_stMonsterIndexInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@U_stMonsterIndexInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U_stMonsterIndexInfo@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@U_stMonsterIndexInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U_stMonsterIndexInfo@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >,std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >,std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >,1><std::allocator<_stMonsterIndexInfo> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@U_stMonsterIndexInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U_stMonsterIndexInfo@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >,std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >,std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >,1><std::allocator<_stMonsterIndexInfo> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0V?$allocator@U_stMonsterIndexInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@U_stMonsterIndexInfo@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@U_stMonsterIndexInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@U_stMonsterIndexInfo@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >,std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >,std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >,1><std::allocator<_stMonsterIndexInfo> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0V?$allocator@U_stMonsterIndexInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@U_stMonsterIndexInfo@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >,std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >,std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >,1><std::allocator<_stMonsterIndexInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAV?$allocator@U_stMonsterIndexInfo@@@std@@@std@@YA$$QAV?$allocator@U_stMonsterIndexInfo@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@U_stMonsterIndexInfo@@@std@@@std@@YA$$QAV?$allocator@U_stMonsterIndexInfo@@@0@AAV10@@Z PROC ; std::move<std::allocator<_stMonsterIndexInfo> &>, COMDAT

; 1249 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1250 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1251 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$allocator@U_stMonsterIndexInfo@@@std@@@std@@YA$$QAV?$allocator@U_stMonsterIndexInfo@@@0@AAV10@@Z ENDP ; std::move<std::allocator<_stMonsterIndexInfo> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@H@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@H@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@H@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@H@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@H@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0V?$allocator@H@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@H@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@H@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@H@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0V?$allocator@H@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@H@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAV?$allocator@H@std@@@std@@YA$$QAV?$allocator@H@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@H@std@@@std@@YA$$QAV?$allocator@H@0@AAV10@@Z PROC ; std::move<std::allocator<int> &>, COMDAT

; 1249 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1250 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1251 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$allocator@H@std@@@std@@YA$$QAV?$allocator@H@0@AAV10@@Z ENDP ; std::move<std::allocator<int> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@U_stMonsterIndexInfo@@@std@@YAPAU_stMonsterIndexInfo@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_stMonsterIndexInfo@@@std@@YAPAU_stMonsterIndexInfo@@AAU1@@Z PROC ; std::addressof<_stMonsterIndexInfo>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U_stMonsterIndexInfo@@@std@@YAPAU_stMonsterIndexInfo@@AAU1@@Z ENDP ; std::addressof<_stMonsterIndexInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEPAU_stMonsterIndexInfo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@1@0PAU2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEPAU_stMonsterIndexInfo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@1@0PAU2@@Z PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > > >, COMDAT
; _this$ = ecx

; 1670 : 		{	// copy initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 415  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBU_stMonsterIndexInfo@@PAU1@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@YAPAU_stMonsterIndexInfo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<_stMonsterIndexInfo const *,_stMonsterIndexInfo *,std::allocator<_stMonsterIndexInfo> >
  00015	83 c4 14	 add	 esp, 20			; 00000014H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1673 : 		}

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEPAU_stMonsterIndexInfo@@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@1@0PAU2@@Z ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stMonsterIndexInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stMonsterIndexInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::construct<_stMonsterIndexInfo,_stMonsterIndexInfo const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@U_stMonsterIndexInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::construct<_stMonsterIndexInfo,_stMonsterIndexInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stMonsterIndexInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stMonsterIndexInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::construct<_stMonsterIndexInfo,_stMonsterIndexInfo &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@U_stMonsterIndexInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::construct<_stMonsterIndexInfo,_stMonsterIndexInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBU_stMonsterIndexInfo@@@std@@YAPBU_stMonsterIndexInfo@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBU_stMonsterIndexInfo@@@std@@YAPBU_stMonsterIndexInfo@@ABU1@@Z PROC ; std::addressof<_stMonsterIndexInfo const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBU_stMonsterIndexInfo@@@std@@YAPBU_stMonsterIndexInfo@@ABU1@@Z ENDP ; std::addressof<_stMonsterIndexInfo const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU_stMonsterIndexInfo@@@std@@SAPAU_stMonsterIndexInfo@@AAU3@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU_stMonsterIndexInfo@@@std@@SAPAU_stMonsterIndexInfo@@AAU3@@Z PROC ; std::pointer_traits<_stMonsterIndexInfo *>::pointer_to, COMDAT

; 316  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 318  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?pointer_to@?$pointer_traits@PAU_stMonsterIndexInfo@@@std@@SAPAU_stMonsterIndexInfo@@AAU3@@Z ENDP ; std::pointer_traits<_stMonsterIndexInfo *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@?$vector@HV?$allocator@H@std@@@std@@IAEPAHV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@0PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@?$vector@HV?$allocator@H@std@@@std@@IAEPAHV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@0PAH@Z PROC ; std::vector<int,std::allocator<int> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > >, COMDAT
; _this$ = ecx

; 1670 : 		{	// copy initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	2b c8		 sub	 ecx, eax
  0000b	c1 f9 02	 sar	 ecx, 2
  0000e	56		 push	 esi

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 8d 00 00
	00 00		 lea	 esi, DWORD PTR [ecx*4]
  00016	56		 push	 esi
  00017	50		 push	 eax
  00018	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1673 : 		}

  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@?$vector@HV?$allocator@H@std@@@std@@IAEPAHV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@1@0PAH@Z ENDP ; std::vector<int,std::allocator<int> >::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HABH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHABH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@HABH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHABH@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@HABH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHABH@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HAAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHAAH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@HAAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHAAH@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@HAAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHAAH@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBH@std@@YAPBHABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBH@std@@YAPBHABH@Z PROC			; std::addressof<int const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBH@std@@YAPBHABH@Z ENDP			; std::addressof<int const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Move@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAHPAH@std@@YAPAHPAH00@Z PROC			; std::_Move<int *,int *>, COMDAT

; 2537 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2527 : 	ptrdiff_t _Count = _Last - _First;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	56		 push	 esi

; 2528 : 	_CSTD memmove(&*_Dest, &*_First,

  0000c	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000f	c1 f8 02	 sar	 eax, 2
  00012	57		 push	 edi
  00013	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2529 : 		_Count * sizeof (*_First));
; 2530 : 	return (_Dest + _Count);

  00025	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 2538 : 	return (_Move(_First, _Last,
; 2539 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2540 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Move@PAHPAH@std@@YAPAHPAH00@Z ENDP			; std::_Move<int *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::operator++, COMDAT
; _this$ = ecx

; 340  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 341  : 		_Myiter _Tmp = *this;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 112  : 		++this->_Ptr;

  0000a	83 c2 08	 add	 edx, 8
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::operator++, COMDAT
; _this$ = ecx

; 112  : 		++this->_Ptr;

  00000	83 01 08	 add	 DWORD PTR [ecx], 8

; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 337  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEPAU_stMonsterIndexInfo@@XZ
_TEXT	SEGMENT
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEPAU_stMonsterIndexInfo@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::operator->, COMDAT
; _this$ = ecx

; 330  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 331  : 		}

  00002	c3		 ret	 0
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEPAU_stMonsterIndexInfo@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEAAU_stMonsterIndexInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEAAU_stMonsterIndexInfo@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::operator*, COMDAT
; _this$ = ecx

; 325  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEAAU_stMonsterIndexInfo@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAE@PAU_stMonsterIndexInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAE@PAU_stMonsterIndexInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >, COMDAT
; _this$ = ecx

; 307  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 308  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAE@PAU_stMonsterIndexInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 256  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 210  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 212  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 207  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::operator++, COMDAT
; _this$ = ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  00000	83 01 08	 add	 DWORD PTR [ecx], 8

; 113  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 114  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEABU_stMonsterIndexInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEABU_stMonsterIndexInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 87   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEABU_stMonsterIndexInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEPBU_stMonsterIndexInfo@@XZ
_TEXT	SEGMENT
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEPBU_stMonsterIndexInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::_Unchecked, COMDAT
; _this$ = ecx

; 61   : 		return (_Unchecked_type(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 62   : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEPBU_stMonsterIndexInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAE@PAU_stMonsterIndexInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAE@PAU_stMonsterIndexInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAE@PAU_stMonsterIndexInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator++, COMDAT
; _this$ = ecx

; 340  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 341  : 		_Myiter _Tmp = *this;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 112  : 		++this->_Ptr;

  0000a	83 c2 04	 add	 edx, 4
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator++, COMDAT
; _this$ = ecx

; 112  : 		++this->_Ptr;

  00000	83 01 04	 add	 DWORD PTR [ecx], 4

; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 337  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*, COMDAT
; _this$ = ecx

; 325  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx

; 307  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 308  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Compat, COMDAT
; _this$ = ecx

; 256  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator!=, COMDAT
; _this$ = ecx

; 210  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 212  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 207  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator++, COMDAT
; _this$ = ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  00000	83 01 04	 add	 DWORD PTR [ecx], 4

; 113  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 114  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEABHXZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEABHXZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 87   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEABHXZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPBHXZ
_TEXT	SEGMENT
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPBHXZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Unchecked, COMDAT
; _this$ = ecx

; 61   : 		return (_Unchecked_type(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 62   : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPBHXZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_ImperialGuardian@@YAXXZ
text$yd	SEGMENT
??__Fg_ImperialGuardian@@YAXXZ PROC			; `dynamic atexit destructor for 'g_ImperialGuardian'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ImperialGuardian@@3VCImperialGuardian@@A ; g_ImperialGuardian
  00005	e9 00 00 00 00	 jmp	 ??1CImperialGuardian@@UAE@XZ ; CImperialGuardian::~CImperialGuardian
??__Fg_ImperialGuardian@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_ImperialGuardian''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ??__Eg_ImperialGuardian@@YAXXZ
text$di	SEGMENT
??__Eg_ImperialGuardian@@YAXXZ PROC			; `dynamic initializer for 'g_ImperialGuardian'', COMDAT

; 20   : CImperialGuardian g_ImperialGuardian;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ImperialGuardian@@3VCImperialGuardian@@A ; g_ImperialGuardian
  00005	e8 00 00 00 00	 call	 ??0CImperialGuardian@@QAE@XZ ; CImperialGuardian::CImperialGuardian
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_ImperialGuardian@@YAXXZ ; `dynamic atexit destructor for 'g_ImperialGuardian''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_ImperialGuardian@@YAXXZ ENDP			; `dynamic initializer for 'g_ImperialGuardian''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?gGetPartyMaxLevel@@YAHH@Z
_TEXT	SEGMENT
_nPartyNumber$ = 8					; size = 4
?gGetPartyMaxLevel@@YAHH@Z PROC				; gGetPartyMaxLevel, COMDAT

; 2566 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2567 : 	int nResult = -1;
; 2568 : 	int nLevel = 0;
; 2569 : 
; 2570 : 	for(int i = 0; i < MAX_USER_IN_PARTY; i++)
; 2571 : 	{
; 2572 : 		if( gParty.m_PartyS[nPartyNumber].Number[i] > 0 )

  00003	8b 55 08	 mov	 edx, DWORD PTR _nPartyNumber$[ebp]
  00006	c1 e2 04	 shl	 edx, 4
  00009	2b 55 08	 sub	 edx, DWORD PTR _nPartyNumber$[ebp]
  0000c	56		 push	 esi
  0000d	83 ce ff	 or	 esi, -1
  00010	57		 push	 edi
  00011	8b 04 95 0c 00
	00 00		 mov	 eax, DWORD PTR ?gParty@@3VPartyClass@@A[edx*4+12]
  00018	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001e	85 c0		 test	 eax, eax
  00020	7e 1d		 jle	 SHORT $LN2@gGetPartyM

; 2573 : 		{
; 2574 : 			int nUserIndex = gParty.m_PartyS[nPartyNumber].Number[i];
; 2575 : 			nLevel = gObj[nUserIndex].Level + gObj[nUserIndex].MasterLevel;

  00022	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00028	0f bf 8c 38 a8
	00 00 00	 movsx	 ecx, WORD PTR [eax+edi+168]
  00030	0f bf 84 38 96
	00 00 00	 movsx	 eax, WORD PTR [eax+edi+150]
  00038	03 c8		 add	 ecx, eax

; 2576 : 
; 2577 : 			if( nResult < nLevel )

  0003a	3b ce		 cmp	 ecx, esi
  0003c	0f 4f f1	 cmovg	 esi, ecx
$LN2@gGetPartyM:

; 2567 : 	int nResult = -1;
; 2568 : 	int nLevel = 0;
; 2569 : 
; 2570 : 	for(int i = 0; i < MAX_USER_IN_PARTY; i++)
; 2571 : 	{
; 2572 : 		if( gParty.m_PartyS[nPartyNumber].Number[i] > 0 )

  0003f	8b 04 95 10 00
	00 00		 mov	 eax, DWORD PTR ?gParty@@3VPartyClass@@A[edx*4+16]
  00046	85 c0		 test	 eax, eax
  00048	7e 1d		 jle	 SHORT $LN15@gGetPartyM

; 2573 : 		{
; 2574 : 			int nUserIndex = gParty.m_PartyS[nPartyNumber].Number[i];
; 2575 : 			nLevel = gObj[nUserIndex].Level + gObj[nUserIndex].MasterLevel;

  0004a	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00050	0f bf 8c 38 a8
	00 00 00	 movsx	 ecx, WORD PTR [eax+edi+168]
  00058	0f bf 84 38 96
	00 00 00	 movsx	 eax, WORD PTR [eax+edi+150]
  00060	03 c8		 add	 ecx, eax

; 2576 : 
; 2577 : 			if( nResult < nLevel )

  00062	3b f1		 cmp	 esi, ecx
  00064	0f 4c f1	 cmovl	 esi, ecx
$LN15@gGetPartyM:

; 2567 : 	int nResult = -1;
; 2568 : 	int nLevel = 0;
; 2569 : 
; 2570 : 	for(int i = 0; i < MAX_USER_IN_PARTY; i++)
; 2571 : 	{
; 2572 : 		if( gParty.m_PartyS[nPartyNumber].Number[i] > 0 )

  00067	8b 04 95 14 00
	00 00		 mov	 eax, DWORD PTR ?gParty@@3VPartyClass@@A[edx*4+20]
  0006e	85 c0		 test	 eax, eax
  00070	7e 1d		 jle	 SHORT $LN17@gGetPartyM

; 2573 : 		{
; 2574 : 			int nUserIndex = gParty.m_PartyS[nPartyNumber].Number[i];
; 2575 : 			nLevel = gObj[nUserIndex].Level + gObj[nUserIndex].MasterLevel;

  00072	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00078	0f bf 8c 38 a8
	00 00 00	 movsx	 ecx, WORD PTR [eax+edi+168]
  00080	0f bf 84 38 96
	00 00 00	 movsx	 eax, WORD PTR [eax+edi+150]
  00088	03 c8		 add	 ecx, eax

; 2576 : 
; 2577 : 			if( nResult < nLevel )

  0008a	3b f1		 cmp	 esi, ecx
  0008c	0f 4c f1	 cmovl	 esi, ecx
$LN17@gGetPartyM:

; 2567 : 	int nResult = -1;
; 2568 : 	int nLevel = 0;
; 2569 : 
; 2570 : 	for(int i = 0; i < MAX_USER_IN_PARTY; i++)
; 2571 : 	{
; 2572 : 		if( gParty.m_PartyS[nPartyNumber].Number[i] > 0 )

  0008f	8b 04 95 18 00
	00 00		 mov	 eax, DWORD PTR ?gParty@@3VPartyClass@@A[edx*4+24]
  00096	85 c0		 test	 eax, eax
  00098	7e 1d		 jle	 SHORT $LN19@gGetPartyM

; 2573 : 		{
; 2574 : 			int nUserIndex = gParty.m_PartyS[nPartyNumber].Number[i];
; 2575 : 			nLevel = gObj[nUserIndex].Level + gObj[nUserIndex].MasterLevel;

  0009a	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  000a0	0f bf 8c 38 a8
	00 00 00	 movsx	 ecx, WORD PTR [eax+edi+168]
  000a8	0f bf 84 38 96
	00 00 00	 movsx	 eax, WORD PTR [eax+edi+150]
  000b0	03 c8		 add	 ecx, eax

; 2576 : 
; 2577 : 			if( nResult < nLevel )

  000b2	3b f1		 cmp	 esi, ecx
  000b4	0f 4c f1	 cmovl	 esi, ecx
$LN19@gGetPartyM:

; 2567 : 	int nResult = -1;
; 2568 : 	int nLevel = 0;
; 2569 : 
; 2570 : 	for(int i = 0; i < MAX_USER_IN_PARTY; i++)
; 2571 : 	{
; 2572 : 		if( gParty.m_PartyS[nPartyNumber].Number[i] > 0 )

  000b7	8b 04 95 1c 00
	00 00		 mov	 eax, DWORD PTR ?gParty@@3VPartyClass@@A[edx*4+28]
  000be	85 c0		 test	 eax, eax
  000c0	7e 1d		 jle	 SHORT $LN22@gGetPartyM

; 2573 : 		{
; 2574 : 			int nUserIndex = gParty.m_PartyS[nPartyNumber].Number[i];
; 2575 : 			nLevel = gObj[nUserIndex].Level + gObj[nUserIndex].MasterLevel;

  000c2	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  000c8	0f bf 94 38 a8
	00 00 00	 movsx	 edx, WORD PTR [eax+edi+168]
  000d0	0f bf 8c 38 96
	00 00 00	 movsx	 ecx, WORD PTR [eax+edi+150]
  000d8	03 d1		 add	 edx, ecx

; 2576 : 
; 2577 : 			if( nResult < nLevel )

  000da	3b f2		 cmp	 esi, edx
  000dc	0f 4c f2	 cmovl	 esi, edx
$LN22@gGetPartyM:

; 2578 : 			{
; 2579 : 				nResult = nLevel;
; 2580 : 			}
; 2581 : 		}
; 2582 : 	}
; 2583 : return nResult;

  000df	5f		 pop	 edi
  000e0	8b c6		 mov	 eax, esi
  000e2	5e		 pop	 esi

; 2584 : }

  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
?gGetPartyMaxLevel@@YAHH@Z ENDP				; gGetPartyMaxLevel
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCImperialGuardian@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCImperialGuardian@@UAEPAXI@Z PROC			; CImperialGuardian::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CImperialGuardian@@UAE@XZ ; CImperialGuardian::~CImperialGuardian
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 e4 01 00 00	 push	 484			; 000001e4H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCImperialGuardian@@UAEPAXI@Z ENDP			; CImperialGuardian::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?GetPlayUserCountRightNow@CImperialGuardian@@QAEHH@Z
_TEXT	SEGMENT
_vtTemp$ = -12						; size = 12
_nZoneIndex$ = 8					; size = 4
?GetPlayUserCountRightNow@CImperialGuardian@@QAEHH@Z PROC ; CImperialGuardian::GetPlayUserCountRightNow, COMDAT
; _this$ = ecx

; 2537 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2538 : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _nZoneIndex$[ebp]
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	85 d2		 test	 edx, edx
  0000b	0f 88 ce 00 00
	00		 js	 $LN199@GetPlayUse
  00011	33 c0		 xor	 eax, eax
  00013	83 fa 03	 cmp	 edx, 3
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	0f 84 be 00 00
	00		 je	 $LN199@GetPlayUse

; 2542 : 	}
; 2543 : 
; 2544 : 	int nPlayUserCount = 0;
; 2545 : 
; 2546 : 	std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  00021	53		 push	 ebx
  00022	6b c2 64	 imul	 eax, edx, 100
  00025	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00028	56		 push	 esi
  00029	57		 push	 edi
  0002a	33 f6		 xor	 esi, esi
  0002c	03 c1		 add	 eax, ecx
  0002e	8d 4d f4	 lea	 ecx, DWORD PTR _vtTemp$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  00037	8b 5d f4	 mov	 ebx, DWORD PTR _vtTemp$[ebp]
  0003a	8b c3		 mov	 eax, ebx

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  0003c	8b 7d f8	 mov	 edi, DWORD PTR _vtTemp$[ebp+4]
  0003f	3b df		 cmp	 ebx, edi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2549 : 	for( ; it != vtTemp.end(); it++)

  00041	74 51		 je	 SHORT $LN3@GetPlayUse
  00043	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@GetPlayUse:

; 2550 : 	{
; 2551 : 		int nResult = *it;

  00050	8b 10		 mov	 edx, DWORD PTR [eax]

; 2552 : 
; 2553 : 		if( !OBJMAX_RANGE(nResult) )

  00052	85 d2		 test	 edx, edx
  00054	78 34		 js	 SHORT $LN2@GetPlayUse
  00056	33 c9		 xor	 ecx, ecx
  00058	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  0005e	0f 9e c1	 setle	 cl
  00061	85 c9		 test	 ecx, ecx
  00063	74 25		 je	 SHORT $LN2@GetPlayUse

; 2554 : 			continue;
; 2555 : 
; 2556 : 		if( gObj[nResult].Connected == PLAYER_PLAYING &&

  00065	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  0006b	83 7c 19 04 03	 cmp	 DWORD PTR [ecx+ebx+4], 3
  00070	75 18		 jne	 SHORT $LN2@GetPlayUse
  00072	8a 8c 19 23 01
	00 00		 mov	 cl, BYTE PTR [ecx+ebx+291]
  00079	80 f9 45	 cmp	 cl, 69			; 00000045H
  0007c	72 0c		 jb	 SHORT $LN2@GetPlayUse
  0007e	b2 48		 mov	 dl, 72			; 00000048H
  00080	3a d1		 cmp	 dl, cl
  00082	1b c9		 sbb	 ecx, ecx
  00084	83 c1 01	 add	 ecx, 1
  00087	74 01		 je	 SHORT $LN2@GetPlayUse

; 2557 : 			IF_MAP_RANGE(gObj[nResult].MapNumber) )
; 2558 : 		{
; 2559 : 			nPlayUserCount++;

  00089	46		 inc	 esi
$LN2@GetPlayUse:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  0008a	83 c0 04	 add	 eax, 4

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  0008d	3b c7		 cmp	 eax, edi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2549 : 	for( ; it != vtTemp.end(); it++)

  0008f	75 bf		 jne	 SHORT $LL4@GetPlayUse
  00091	8b 5d f4	 mov	 ebx, DWORD PTR _vtTemp$[ebp]
$LN3@GetPlayUse:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00094	85 db		 test	 ebx, ebx
  00096	74 3c		 je	 SHORT $LN89@GetPlayUse

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00098	8b 45 fc	 mov	 eax, DWORD PTR _vtTemp$[ebp+8]
  0009b	2b c3		 sub	 eax, ebx
  0009d	c1 f8 02	 sar	 eax, 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  000a0	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  000a5	77 59		 ja	 SHORT $LN201@GetPlayUse

; 101  : 	const size_t _User_size = _Count * _Sz;

  000a7	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  000aa	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000af	72 1a		 jb	 SHORT $LN157@GetPlayUse

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  000b1	f6 c3 1f	 test	 bl, 31			; 0000001fH
  000b4	75 4f		 jne	 SHORT $LN203@GetPlayUse

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  000b6	8b 43 fc	 mov	 eax, DWORD PTR [ebx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  000b9	3b c3		 cmp	 eax, ebx
  000bb	73 4d		 jae	 SHORT $LN204@GetPlayUse

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  000bd	2b d8		 sub	 ebx, eax
  000bf	83 fb 04	 cmp	 ebx, 4
  000c2	72 4b		 jb	 SHORT $LN205@GetPlayUse

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  000c4	83 fb 23	 cmp	 ebx, 35			; 00000023H
  000c7	77 4b		 ja	 SHORT $LN206@GetPlayUse

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000c9	8b d8		 mov	 ebx, eax
$LN157@GetPlayUse:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  000cb	53		 push	 ebx
  000cc	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d1	83 c4 04	 add	 esp, 4
$LN89@GetPlayUse:
  000d4	5f		 pop	 edi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2562 : 	return nPlayUserCount;

  000d5	8b c6		 mov	 eax, esi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx

; 2563 : }

  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 04 00	 ret	 4
$LN199@GetPlayUse:

; 2539 : 	{
; 2540 : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  000df	68 ec 09 00 00	 push	 2540			; 000009ecH
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2541 : 		return -1;

  000f7	83 c8 ff	 or	 eax, -1

; 2563 : }

  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c2 04 00	 ret	 4
$LN201@GetPlayUse:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00100	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN207@GetPlayUse:
$LN203@GetPlayUse:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00105	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN208@GetPlayUse:
$LN204@GetPlayUse:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0010a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN209@GetPlayUse:
$LN205@GetPlayUse:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0010f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN210@GetPlayUse:
$LN206@GetPlayUse:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00114	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN211@GetPlayUse:
$LN200@GetPlayUse:
  00119	cc		 int	 3
?GetPlayUserCountRightNow@CImperialGuardian@@QAEHH@Z ENDP ; CImperialGuardian::GetPlayUserCountRightNow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?SendCurGateInfoToUser@CImperialGuardian@@QAEHHH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_nUserIndex$ = 8					; size = 4
_nSize$1$ = 12						; size = 4
_nZoneIndex$ = 12					; size = 4
?SendCurGateInfoToUser@CImperialGuardian@@QAEHHH@Z PROC	; CImperialGuardian::SendCurGateInfoToUser, COMDAT
; _this$ = ecx

; 2519 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 2520 : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR _nZoneIndex$[ebp]
  00008	8b d1		 mov	 edx, ecx
  0000a	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
  0000d	85 db		 test	 ebx, ebx
  0000f	78 59		 js	 SHORT $LN72@SendCurGat
  00011	33 c0		 xor	 eax, eax
  00013	83 fb 03	 cmp	 ebx, 3
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	74 4d		 je	 SHORT $LN72@SendCurGat

; 2524 : 	}
; 2525 : 
; 2526 : 	int nSize = this->m_ZoneInfo[nZoneIndex].m_vtDestroyedGate.size();

  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	6b fb 64	 imul	 edi, ebx, 100

; 2528 : 	for(int i = 0; i < nSize; i++)

  00022	33 f6		 xor	 esi, esi
  00024	03 fa		 add	 edi, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00026	8b 47 70	 mov	 eax, DWORD PTR [edi+112]
  00029	2b 47 6c	 sub	 eax, DWORD PTR [edi+108]
  0002c	c1 f8 02	 sar	 eax, 2
  0002f	89 45 0c	 mov	 DWORD PTR _nSize$1$[ebp], eax
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2528 : 	for(int i = 0; i < nSize; i++)

  00032	85 c0		 test	 eax, eax
  00034	7e 26		 jle	 SHORT $LN3@SendCurGat
$LL4@SendCurGat:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00036	8b 47 70	 mov	 eax, DWORD PTR [edi+112]
  00039	8b 4f 6c	 mov	 ecx, DWORD PTR [edi+108]
  0003c	2b c1		 sub	 eax, ecx
  0003e	c1 f8 02	 sar	 eax, 2

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)

  00041	3b c6		 cmp	 eax, esi
  00043	76 46		 jbe	 SHORT $LN74@SendCurGat
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2531 : 		this->GCSendCastleGateInfo(nGateIndex,nZoneIndex,nUserIndex);

  00045	ff 75 08	 push	 DWORD PTR _nUserIndex$[ebp]
  00048	53		 push	 ebx
  00049	ff 34 b1	 push	 DWORD PTR [ecx+esi*4]
  0004c	8b ca		 mov	 ecx, edx
  0004e	e8 00 00 00 00	 call	 ?GCSendCastleGateInfo@CImperialGuardian@@QAEXHHH@Z ; CImperialGuardian::GCSendCastleGateInfo
  00053	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  00056	46		 inc	 esi
  00057	3b 75 0c	 cmp	 esi, DWORD PTR _nSize$1$[ebp]
  0005a	7c da		 jl	 SHORT $LL4@SendCurGat
$LN3@SendCurGat:
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi

; 2532 : 	}
; 2533 : return true;

  0005e	b8 01 00 00 00	 mov	 eax, 1
  00063	5b		 pop	 ebx

; 2534 : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
$LN72@SendCurGat:

; 2521 : 	{
; 2522 : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  0006a	68 da 09 00 00	 push	 2522			; 000009daH
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2523 : 		return 0;

  00082	33 c0		 xor	 eax, eax
  00084	5b		 pop	 ebx

; 2534 : }

  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 08 00	 ret	 8
$LN74@SendCurGat:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1789 : 		_Xout_of_range("invalid vector<T> subscript");

  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
  00090	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN75@SendCurGat:
$LN73@SendCurGat:
  00095	cc		 int	 3
?SendCurGateInfoToUser@CImperialGuardian@@QAEHHH@Z ENDP	; CImperialGuardian::SendCurGateInfoToUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?SendCurStateToUser@CImperialGuardian@@QAEHHH@Z
_TEXT	SEGMENT
_tCurrentTime$1 = -68					; size = 8
_this$GSCopy$1$ = -60					; size = 4
_nDayOfWeek$1$ = -56					; size = 4
_ptmTemp$2 = -52					; size = 36
_pMsg$3 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_nUserIndex$ = 8					; size = 4
_nZoneIndex$ = 12					; size = 4
?SendCurStateToUser@CImperialGuardian@@QAEHHH@Z PROC	; CImperialGuardian::SendCurStateToUser, COMDAT
; _this$ = ecx

; 2487 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _nZoneIndex$[ebp]
  00014	89 4d c4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx

; 2488 : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  00017	85 db		 test	 ebx, ebx
  00019	0f 88 f3 00 00
	00		 js	 $LN68@SendCurSta
  0001f	33 c0		 xor	 eax, eax
  00021	83 fb 03	 cmp	 ebx, 3
  00024	0f 9e c0	 setle	 al
  00027	85 c0		 test	 eax, eax
  00029	0f 84 e3 00 00
	00		 je	 $LN68@SendCurSta

; 2491 : 		return 0;
; 2492 : 	}
; 2493 : 
; 2494 : 	int nTotalUserCount = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex.size();

  0002f	56		 push	 esi
  00030	57		 push	 edi
  00031	6b fb 64	 imul	 edi, ebx, 100
  00034	03 f9		 add	 edi, ecx

; 2496 : 	for(int n = 0; n < nTotalUserCount; n++)

  00036	33 c9		 xor	 ecx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00038	8b 57 40	 mov	 edx, DWORD PTR [edi+64]
  0003b	2b 57 3c	 sub	 edx, DWORD PTR [edi+60]
  0003e	c1 fa 02	 sar	 edx, 2
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2496 : 	for(int n = 0; n < nTotalUserCount; n++)

  00041	85 d2		 test	 edx, edx
  00043	7e 17		 jle	 SHORT $LN3@SendCurSta

; 2491 : 		return 0;
; 2492 : 	}
; 2493 : 
; 2494 : 	int nTotalUserCount = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex.size();

  00045	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  00048	8b 75 08	 mov	 esi, DWORD PTR _nUserIndex$[ebp]
  0004b	0f 1f 44 00 00	 npad	 5
$LL4@SendCurSta:

; 2497 : 	{
; 2498 : 		if( this->m_ZoneInfo[nZoneIndex].m_vtUserIndex[n] == nUserIndex )

  00050	39 30		 cmp	 DWORD PTR [eax], esi
  00052	74 1d		 je	 SHORT $LN64@SendCurSta

; 2496 : 	for(int n = 0; n < nTotalUserCount; n++)

  00054	41		 inc	 ecx
  00055	83 c0 04	 add	 eax, 4
  00058	3b ca		 cmp	 ecx, edx
  0005a	7c f4		 jl	 SHORT $LL4@SendCurSta
$LN3@SendCurSta:
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi

; 2513 : 		}
; 2514 : 	}
; 2515 : return false;

  0005e	33 c0		 xor	 eax, eax
  00060	5b		 pop	 ebx

; 2516 : }

  00061	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00064	33 cd		 xor	 ecx, ebp
  00066	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
$LN64@SendCurSta:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 374  : 	return( CTime( ::_time64( NULL ) ) );

  00071	6a 00		 push	 0
  00073	e8 00 00 00 00	 call	 __time64

; 375  : }
; 376  : 
; 377  : _Success_(return != false) inline bool CTime::GetAsDBTIMESTAMP(_Out_ DBTIMESTAMP& dbts) const throw()
; 378  : {
; 379  : 	struct tm tmLocal;
; 380  : 	if (GetLocalTm(&tmLocal) == nullptr) return false;
; 381  : 
; 382  : 	dbts.year = (SHORT) (1900 + tmLocal.tm_year);
; 383  : 	dbts.month = (USHORT) (1 + tmLocal.tm_mon);
; 384  : 	dbts.day = (USHORT) tmLocal.tm_mday;
; 385  : 	dbts.hour = (USHORT) tmLocal.tm_hour;
; 386  : 	dbts.minute = (USHORT) tmLocal.tm_min;
; 387  : 	dbts.second = (USHORT) tmLocal.tm_sec;
; 388  : 	dbts.fraction = 0;
; 389  : 
; 390  : 	return true;
; 391  : }
; 392  : 
; 393  : inline BOOL WINAPI CTime::IsValidFILETIME(_In_ const FILETIME& fileTime) throw()
; 394  : {
; 395  : 	FILETIME localTime;
; 396  : 	if (!FileTimeToLocalFileTime(&fileTime, &localTime))
; 397  : 	{
; 398  : 		return FALSE;
; 399  : 	}
; 400  : 
; 401  : 	// then convert that time to system time
; 402  : 	SYSTEMTIME sysTime;
; 403  : 	if (!FileTimeToSystemTime(&localTime, &sysTime))
; 404  : 	{
; 405  : 		return FALSE;
; 406  : 	}
; 407  : 
; 408  : 	return TRUE;
; 409  : }
; 410  : 
; 411  : inline CTime::CTime() throw() :
; 412  : 	m_time(0)
; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  00078	89 45 bc	 mov	 DWORD PTR _tCurrentTime$1[ebp], eax

; 418  : {
; 419  : }
; 420  : 
; 421  : inline CTime::CTime(
; 422  : 	_In_ int nYear,
; 423  : 	_In_ int nMonth,
; 424  : 	_In_ int nDay,
; 425  : 	_In_ int nHour,
; 426  : 	_In_ int nMin,
; 427  : 	_In_ int nSec,
; 428  : 	_In_ int nDST)
; 429  : {
; 430  : #pragma warning (push)
; 431  : #pragma warning (disable: 4127)  // conditional expression constant
; 432  : 
; 433  : 	ATLENSURE( nYear >= 1900 );
; 434  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );
; 435  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );
; 436  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );
; 437  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );
; 438  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );
; 439  : 
; 440  : #pragma warning (pop)
; 441  : 
; 442  : 	struct tm atm;
; 443  : 
; 444  : 	atm.tm_sec = nSec;
; 445  : 	atm.tm_min = nMin;
; 446  : 	atm.tm_hour = nHour;
; 447  : 	atm.tm_mday = nDay;
; 448  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based
; 449  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based
; 450  : 	atm.tm_isdst = nDST;
; 451  : 
; 452  : 	m_time = _mktime64(&atm);
; 453  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 454  : 	if(m_time == -1)
; 455  : 	{
; 456  : 		AtlThrow(E_INVALIDARG);
; 457  : 	}
; 458  : }
; 459  : 
; 460  : inline CTime::CTime(
; 461  : 	_In_ WORD wDosDate,
; 462  : 	_In_ WORD wDosTime,
; 463  : 	_In_ int nDST)
; 464  : {
; 465  : 	struct tm atm;
; 466  : 	atm.tm_sec = (wDosTime & ~0xFFE0) << 1;
; 467  : 	atm.tm_min = (wDosTime & ~0xF800) >> 5;
; 468  : 	atm.tm_hour = wDosTime >> 11;
; 469  : 
; 470  : 	atm.tm_mday = wDosDate & ~0xFFE0;
; 471  : 	atm.tm_mon = ((wDosDate & ~0xFE00) >> 5) - 1;
; 472  : 	atm.tm_year = (wDosDate >> 9) + 80;
; 473  : 	atm.tm_isdst = nDST;
; 474  : 	m_time = _mktime64(&atm);
; 475  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 476  : 
; 477  : 	if(m_time == -1)
; 478  : 		AtlThrow(E_INVALIDARG);
; 479  : 
; 480  : }
; 481  : 
; 482  : inline CTime::CTime(
; 483  : 	_In_ const SYSTEMTIME& sysTime,
; 484  : 	_In_ int nDST)
; 485  : {
; 486  : 	if (sysTime.wYear < 1900)
; 487  : 	{
; 488  : 		__time64_t time0 = 0L;
; 489  : 		CTime timeT(time0);
; 490  : 		*this = timeT;
; 491  : 	}
; 492  : 	else
; 493  : 	{
; 494  : 		CTime timeT(
; 495  : 			(int)sysTime.wYear, (int)sysTime.wMonth, (int)sysTime.wDay,
; 496  : 			(int)sysTime.wHour, (int)sysTime.wMinute, (int)sysTime.wSecond,
; 497  : 			nDST);
; 498  : 		*this = timeT;
; 499  : 	}
; 500  : }
; 501  : 
; 502  : inline CTime::CTime(
; 503  : 	_In_ const FILETIME& fileTime,
; 504  : 	_In_ int nDST)
; 505  : {
; 506  : 	SYSTEMTIME sysTime;
; 507  : 	SYSTEMTIME localTime;
; 508  : 	if (!FileTimeToSystemTime(&fileTime, &sysTime) || !SystemTimeToTzSpecificLocalTime(nullptr, &sysTime, &localTime))
; 509  : 	{
; 510  : 		m_time = 0;
; 511  : 		AtlThrow(E_INVALIDARG);
; 512  : 		return;
; 513  : 	}
; 514  : 
; 515  : 	// Convert the system time to a time_t (C-runtime local time)
; 516  : 	CTime timeT(localTime, nDST);
; 517  : 	*this = timeT;
; 518  : }
; 519  : 
; 520  : inline CTime& CTime::operator=(_In_ __time64_t time) throw()
; 521  : {
; 522  : 	m_time = time;
; 523  : 
; 524  : 	return( *this );
; 525  : }
; 526  : 
; 527  : inline CTime& CTime::operator+=(_In_ CTimeSpan span) throw()
; 528  : {
; 529  : 	m_time += span.GetTimeSpan();
; 530  : 
; 531  : 	return( *this );
; 532  : }
; 533  : 
; 534  : inline CTime& CTime::operator-=(_In_ CTimeSpan span) throw()
; 535  : {
; 536  : 	m_time -= span.GetTimeSpan();
; 537  : 
; 538  : 	return( *this );
; 539  : }
; 540  : 
; 541  : inline CTimeSpan CTime::operator-(_In_ CTime time) const throw()
; 542  : {
; 543  : 	return( CTimeSpan( m_time-time.m_time ) );
; 544  : }
; 545  : 
; 546  : inline CTime CTime::operator-(_In_ CTimeSpan span) const throw()
; 547  : {
; 548  : 	return( CTime( m_time-span.GetTimeSpan() ) );
; 549  : }
; 550  : 
; 551  : inline CTime CTime::operator+(_In_ CTimeSpan span) const throw()
; 552  : {
; 553  : 	return( CTime( m_time+span.GetTimeSpan() ) );
; 554  : }
; 555  : 
; 556  : inline bool CTime::operator==(_In_ CTime time) const throw()
; 557  : {
; 558  : 	return( m_time == time.m_time );
; 559  : }
; 560  : 
; 561  : inline bool CTime::operator!=(_In_ CTime time) const throw()
; 562  : {
; 563  : 	return( m_time != time.m_time );
; 564  : }
; 565  : 
; 566  : inline bool CTime::operator<(_In_ CTime time) const throw()
; 567  : {
; 568  : 	return( m_time < time.m_time );
; 569  : }
; 570  : 
; 571  : inline bool CTime::operator>(_In_ CTime time) const throw()
; 572  : {
; 573  : 	return( m_time > time.m_time );
; 574  : }
; 575  : 
; 576  : inline bool CTime::operator<=(_In_ CTime time) const throw()
; 577  : {
; 578  : 	return( m_time <= time.m_time );
; 579  : }
; 580  : 
; 581  : inline bool CTime::operator>=(_In_ CTime time) const throw()
; 582  : {
; 583  : 	return( m_time >= time.m_time );
; 584  : }
; 585  : 
; 586  : inline _Success_(return != NULL) struct tm* CTime::GetGmtTm(_Out_ struct tm* ptm) const
; 587  : {
; 588  : 	// Ensure ptm is valid
; 589  : 	ATLENSURE( ptm != NULL );
; 590  : 
; 591  : 	if (ptm != NULL)
; 592  : 	{
; 593  : 		struct tm ptmTemp;
; 594  : 		errno_t err = _gmtime64_s(&ptmTemp, &m_time);
; 595  : 
; 596  : 		// Be sure the call succeeded
; 597  : 		if(err != 0) { return NULL; }
; 598  : 
; 599  : 		*ptm = ptmTemp;
; 600  : 		return ptm;
; 601  : 	}
; 602  : 
; 603  : 	return NULL;
; 604  : }
; 605  : 
; 606  : inline _Success_(return != NULL) struct tm* CTime::GetLocalTm(_Out_ struct tm* ptm) const
; 607  : {
; 608  : 	// Ensure ptm is valid
; 609  : 	ATLENSURE( ptm != NULL );
; 610  : 
; 611  : 	if (ptm != NULL)
; 612  : 	{
; 613  : 		struct tm ptmTemp;
; 614  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);

  0007b	8d 45 bc	 lea	 eax, DWORD PTR _tCurrentTime$1[ebp]
  0007e	50		 push	 eax
  0007f	8d 45 cc	 lea	 eax, DWORD PTR _ptmTemp$2[ebp]

; 375  : }
; 376  : 
; 377  : _Success_(return != false) inline bool CTime::GetAsDBTIMESTAMP(_Out_ DBTIMESTAMP& dbts) const throw()
; 378  : {
; 379  : 	struct tm tmLocal;
; 380  : 	if (GetLocalTm(&tmLocal) == nullptr) return false;
; 381  : 
; 382  : 	dbts.year = (SHORT) (1900 + tmLocal.tm_year);
; 383  : 	dbts.month = (USHORT) (1 + tmLocal.tm_mon);
; 384  : 	dbts.day = (USHORT) tmLocal.tm_mday;
; 385  : 	dbts.hour = (USHORT) tmLocal.tm_hour;
; 386  : 	dbts.minute = (USHORT) tmLocal.tm_min;
; 387  : 	dbts.second = (USHORT) tmLocal.tm_sec;
; 388  : 	dbts.fraction = 0;
; 389  : 
; 390  : 	return true;
; 391  : }
; 392  : 
; 393  : inline BOOL WINAPI CTime::IsValidFILETIME(_In_ const FILETIME& fileTime) throw()
; 394  : {
; 395  : 	FILETIME localTime;
; 396  : 	if (!FileTimeToLocalFileTime(&fileTime, &localTime))
; 397  : 	{
; 398  : 		return FALSE;
; 399  : 	}
; 400  : 
; 401  : 	// then convert that time to system time
; 402  : 	SYSTEMTIME sysTime;
; 403  : 	if (!FileTimeToSystemTime(&localTime, &sysTime))
; 404  : 	{
; 405  : 		return FALSE;
; 406  : 	}
; 407  : 
; 408  : 	return TRUE;
; 409  : }
; 410  : 
; 411  : inline CTime::CTime() throw() :
; 412  : 	m_time(0)
; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  00082	89 55 c0	 mov	 DWORD PTR _tCurrentTime$1[ebp+4], edx

; 418  : {
; 419  : }
; 420  : 
; 421  : inline CTime::CTime(
; 422  : 	_In_ int nYear,
; 423  : 	_In_ int nMonth,
; 424  : 	_In_ int nDay,
; 425  : 	_In_ int nHour,
; 426  : 	_In_ int nMin,
; 427  : 	_In_ int nSec,
; 428  : 	_In_ int nDST)
; 429  : {
; 430  : #pragma warning (push)
; 431  : #pragma warning (disable: 4127)  // conditional expression constant
; 432  : 
; 433  : 	ATLENSURE( nYear >= 1900 );
; 434  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );
; 435  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );
; 436  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );
; 437  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );
; 438  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );
; 439  : 
; 440  : #pragma warning (pop)
; 441  : 
; 442  : 	struct tm atm;
; 443  : 
; 444  : 	atm.tm_sec = nSec;
; 445  : 	atm.tm_min = nMin;
; 446  : 	atm.tm_hour = nHour;
; 447  : 	atm.tm_mday = nDay;
; 448  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based
; 449  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based
; 450  : 	atm.tm_isdst = nDST;
; 451  : 
; 452  : 	m_time = _mktime64(&atm);
; 453  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 454  : 	if(m_time == -1)
; 455  : 	{
; 456  : 		AtlThrow(E_INVALIDARG);
; 457  : 	}
; 458  : }
; 459  : 
; 460  : inline CTime::CTime(
; 461  : 	_In_ WORD wDosDate,
; 462  : 	_In_ WORD wDosTime,
; 463  : 	_In_ int nDST)
; 464  : {
; 465  : 	struct tm atm;
; 466  : 	atm.tm_sec = (wDosTime & ~0xFFE0) << 1;
; 467  : 	atm.tm_min = (wDosTime & ~0xF800) >> 5;
; 468  : 	atm.tm_hour = wDosTime >> 11;
; 469  : 
; 470  : 	atm.tm_mday = wDosDate & ~0xFFE0;
; 471  : 	atm.tm_mon = ((wDosDate & ~0xFE00) >> 5) - 1;
; 472  : 	atm.tm_year = (wDosDate >> 9) + 80;
; 473  : 	atm.tm_isdst = nDST;
; 474  : 	m_time = _mktime64(&atm);
; 475  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 476  : 
; 477  : 	if(m_time == -1)
; 478  : 		AtlThrow(E_INVALIDARG);
; 479  : 
; 480  : }
; 481  : 
; 482  : inline CTime::CTime(
; 483  : 	_In_ const SYSTEMTIME& sysTime,
; 484  : 	_In_ int nDST)
; 485  : {
; 486  : 	if (sysTime.wYear < 1900)
; 487  : 	{
; 488  : 		__time64_t time0 = 0L;
; 489  : 		CTime timeT(time0);
; 490  : 		*this = timeT;
; 491  : 	}
; 492  : 	else
; 493  : 	{
; 494  : 		CTime timeT(
; 495  : 			(int)sysTime.wYear, (int)sysTime.wMonth, (int)sysTime.wDay,
; 496  : 			(int)sysTime.wHour, (int)sysTime.wMinute, (int)sysTime.wSecond,
; 497  : 			nDST);
; 498  : 		*this = timeT;
; 499  : 	}
; 500  : }
; 501  : 
; 502  : inline CTime::CTime(
; 503  : 	_In_ const FILETIME& fileTime,
; 504  : 	_In_ int nDST)
; 505  : {
; 506  : 	SYSTEMTIME sysTime;
; 507  : 	SYSTEMTIME localTime;
; 508  : 	if (!FileTimeToSystemTime(&fileTime, &sysTime) || !SystemTimeToTzSpecificLocalTime(nullptr, &sysTime, &localTime))
; 509  : 	{
; 510  : 		m_time = 0;
; 511  : 		AtlThrow(E_INVALIDARG);
; 512  : 		return;
; 513  : 	}
; 514  : 
; 515  : 	// Convert the system time to a time_t (C-runtime local time)
; 516  : 	CTime timeT(localTime, nDST);
; 517  : 	*this = timeT;
; 518  : }
; 519  : 
; 520  : inline CTime& CTime::operator=(_In_ __time64_t time) throw()
; 521  : {
; 522  : 	m_time = time;
; 523  : 
; 524  : 	return( *this );
; 525  : }
; 526  : 
; 527  : inline CTime& CTime::operator+=(_In_ CTimeSpan span) throw()
; 528  : {
; 529  : 	m_time += span.GetTimeSpan();
; 530  : 
; 531  : 	return( *this );
; 532  : }
; 533  : 
; 534  : inline CTime& CTime::operator-=(_In_ CTimeSpan span) throw()
; 535  : {
; 536  : 	m_time -= span.GetTimeSpan();
; 537  : 
; 538  : 	return( *this );
; 539  : }
; 540  : 
; 541  : inline CTimeSpan CTime::operator-(_In_ CTime time) const throw()
; 542  : {
; 543  : 	return( CTimeSpan( m_time-time.m_time ) );
; 544  : }
; 545  : 
; 546  : inline CTime CTime::operator-(_In_ CTimeSpan span) const throw()
; 547  : {
; 548  : 	return( CTime( m_time-span.GetTimeSpan() ) );
; 549  : }
; 550  : 
; 551  : inline CTime CTime::operator+(_In_ CTimeSpan span) const throw()
; 552  : {
; 553  : 	return( CTime( m_time+span.GetTimeSpan() ) );
; 554  : }
; 555  : 
; 556  : inline bool CTime::operator==(_In_ CTime time) const throw()
; 557  : {
; 558  : 	return( m_time == time.m_time );
; 559  : }
; 560  : 
; 561  : inline bool CTime::operator!=(_In_ CTime time) const throw()
; 562  : {
; 563  : 	return( m_time != time.m_time );
; 564  : }
; 565  : 
; 566  : inline bool CTime::operator<(_In_ CTime time) const throw()
; 567  : {
; 568  : 	return( m_time < time.m_time );
; 569  : }
; 570  : 
; 571  : inline bool CTime::operator>(_In_ CTime time) const throw()
; 572  : {
; 573  : 	return( m_time > time.m_time );
; 574  : }
; 575  : 
; 576  : inline bool CTime::operator<=(_In_ CTime time) const throw()
; 577  : {
; 578  : 	return( m_time <= time.m_time );
; 579  : }
; 580  : 
; 581  : inline bool CTime::operator>=(_In_ CTime time) const throw()
; 582  : {
; 583  : 	return( m_time >= time.m_time );
; 584  : }
; 585  : 
; 586  : inline _Success_(return != NULL) struct tm* CTime::GetGmtTm(_Out_ struct tm* ptm) const
; 587  : {
; 588  : 	// Ensure ptm is valid
; 589  : 	ATLENSURE( ptm != NULL );
; 590  : 
; 591  : 	if (ptm != NULL)
; 592  : 	{
; 593  : 		struct tm ptmTemp;
; 594  : 		errno_t err = _gmtime64_s(&ptmTemp, &m_time);
; 595  : 
; 596  : 		// Be sure the call succeeded
; 597  : 		if(err != 0) { return NULL; }
; 598  : 
; 599  : 		*ptm = ptmTemp;
; 600  : 		return ptm;
; 601  : 	}
; 602  : 
; 603  : 	return NULL;
; 604  : }
; 605  : 
; 606  : inline _Success_(return != NULL) struct tm* CTime::GetLocalTm(_Out_ struct tm* ptm) const
; 607  : {
; 608  : 	// Ensure ptm is valid
; 609  : 	ATLENSURE( ptm != NULL );
; 610  : 
; 611  : 	if (ptm != NULL)
; 612  : 	{
; 613  : 		struct tm ptmTemp;
; 614  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 __localtime64_s
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 615  : 
; 616  : 		if (err != 0)

  0008e	85 c0		 test	 eax, eax
  00090	75 06		 jne	 SHORT $LN48@SendCurSta

; 716  : 	return ptm ? ptm->tm_wday + 1 : 0 ;

  00092	8b 45 e4	 mov	 eax, DWORD PTR _ptmTemp$2[ebp+24]
  00095	40		 inc	 eax
  00096	eb 02		 jmp	 SHORT $LN72@SendCurSta
$LN48@SendCurSta:
  00098	33 c0		 xor	 eax, eax
$LN72@SendCurSta:
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2503 : 			PHeadSubSetB((LPBYTE)&pMsg,0xF7,0x02,sizeof(pMsg));

  0009a	6a 0c		 push	 12			; 0000000cH
  0009c	6a 02		 push	 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 716  : 	return ptm ? ptm->tm_wday + 1 : 0 ;

  0009e	89 45 c8	 mov	 DWORD PTR _nDayOfWeek$1$[ebp], eax
  000a1	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2503 : 			PHeadSubSetB((LPBYTE)&pMsg,0xF7,0x02,sizeof(pMsg));

  000a4	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$3[ebp]
  000a7	c6 45 f0 00	 mov	 BYTE PTR _pMsg$3[ebp], 0
  000ab	68 f7 00 00 00	 push	 247			; 000000f7H
  000b0	50		 push	 eax
  000b1	66 0f d6 45 f1	 movq	 QWORD PTR _pMsg$3[ebp+1], xmm0
  000b6	66 c7 45 f9 00
	00		 mov	 WORD PTR _pMsg$3[ebp+9], 0
  000bc	c6 45 fb 00	 mov	 BYTE PTR _pMsg$3[ebp+11], 0
  000c0	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 2504 : 
; 2505 : 			pMsg.btTmp = this->iUnk1;

  000c5	8b 4d c4	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000c8	83 c4 10	 add	 esp, 16			; 00000010H

; 2506 : 			pMsg.btResult = 0;
; 2507 : 			pMsg.btFortZone = nZoneIndex+1;

  000cb	fe c3		 inc	 bl
  000cd	c6 45 f4 00	 mov	 BYTE PTR _pMsg$3[ebp+4], 0
  000d1	88 5d f6	 mov	 BYTE PTR _pMsg$3[ebp+6], bl
  000d4	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]
  000d7	88 45 f7	 mov	 BYTE PTR _pMsg$3[ebp+7], al

; 2508 : 			pMsg.iTime = this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC+this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC2+this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC3;

  000da	8b 47 5c	 mov	 eax, DWORD PTR [edi+92]
  000dd	03 47 58	 add	 eax, DWORD PTR [edi+88]
  000e0	03 47 54	 add	 eax, DWORD PTR [edi+84]
  000e3	89 45 f8	 mov	 DWORD PTR _pMsg$3[ebp+8], eax

; 2509 : 			pMsg.btFortDay = nDayOfWeek-1;

  000e6	8b 45 c8	 mov	 eax, DWORD PTR _nDayOfWeek$1$[ebp]
  000e9	fe c8		 dec	 al
  000eb	88 45 f5	 mov	 BYTE PTR _pMsg$3[ebp+5], al

; 2510 : 
; 2511 : 			this->GCSendDataToUser(nUserIndex,(LPBYTE)&pMsg,sizeof(pMsg));

  000ee	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$3[ebp]
  000f1	6a 0c		 push	 12			; 0000000cH
  000f3	50		 push	 eax
  000f4	56		 push	 esi
  000f5	e8 00 00 00 00	 call	 ?GCSendDataToUser@CImperialGuardian@@QAEXHPAEH@Z ; CImperialGuardian::GCSendDataToUser
  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi

; 2512 : 			return true;

  000fc	b8 01 00 00 00	 mov	 eax, 1
  00101	5b		 pop	 ebx

; 2516 : }

  00102	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00105	33 cd		 xor	 ecx, ebp
  00107	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c2 08 00	 ret	 8
$LN68@SendCurSta:

; 2489 : 	{
; 2490 : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  00112	68 ba 09 00 00	 push	 2490			; 000009baH
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 2516 : }

  00127	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012d	33 cd		 xor	 ecx, ebp
  0012f	33 c0		 xor	 eax, eax
  00131	5b		 pop	 ebx
  00132	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c2 08 00	 ret	 8
?SendCurStateToUser@CImperialGuardian@@QAEHHH@Z ENDP	; CImperialGuardian::SendCurStateToUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?ChangeUserIndex@CImperialGuardian@@QAEHHHH@Z
_TEXT	SEGMENT
_nUserIndex$ = 8					; size = 4
_nCurrentUserIndex$ = 12				; size = 4
_nZoneIndex$ = 16					; size = 4
?ChangeUserIndex@CImperialGuardian@@QAEHHHH@Z PROC	; CImperialGuardian::ChangeUserIndex, COMDAT
; _this$ = ecx

; 2461 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 2462 : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  00005	8b 75 10	 mov	 esi, DWORD PTR _nZoneIndex$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	78 6c		 js	 SHORT $LN58@ChangeUser
  0000e	33 c0		 xor	 eax, eax
  00010	83 fe 03	 cmp	 esi, 3
  00013	0f 9e c0	 setle	 al
  00016	85 c0		 test	 eax, eax
  00018	74 60		 je	 SHORT $LN58@ChangeUser

; 2466 : 	}
; 2467 : 
; 2468 : 	EnterCriticalSection(&this->m_CritSection);

  0001a	57		 push	 edi
  0001b	8d bb cc 01 00
	00		 lea	 edi, DWORD PTR [ebx+460]
  00021	57		 push	 edi
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 2469 : 
; 2470 : 	int nTotalUserCount = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex.size();

  00028	6b c6 64	 imul	 eax, esi, 100

; 2472 : 	for(int n = 0; n < nTotalUserCount; n++)

  0002b	33 d2		 xor	 edx, edx
  0002d	03 d8		 add	 ebx, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0002f	8b 4b 40	 mov	 ecx, DWORD PTR [ebx+64]
  00032	2b 4b 3c	 sub	 ecx, DWORD PTR [ebx+60]
  00035	c1 f9 02	 sar	 ecx, 2
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2472 : 	for(int n = 0; n < nTotalUserCount; n++)

  00038	85 c9		 test	 ecx, ecx
  0003a	7e 12		 jle	 SHORT $LN3@ChangeUser
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  0003c	8b 43 3c	 mov	 eax, DWORD PTR [ebx+60]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2474 : 		if( this->m_ZoneInfo[nZoneIndex].m_vtUserIndex[n] == nUserIndex )

  0003f	8b 75 08	 mov	 esi, DWORD PTR _nUserIndex$[ebp]
$LL4@ChangeUser:
  00042	39 30		 cmp	 DWORD PTR [eax], esi
  00044	74 18		 je	 SHORT $LN54@ChangeUser

; 2472 : 	for(int n = 0; n < nTotalUserCount; n++)

  00046	42		 inc	 edx
  00047	83 c0 04	 add	 eax, 4
  0004a	3b d1		 cmp	 edx, ecx
  0004c	7c f4		 jl	 SHORT $LL4@ChangeUser
$LN3@ChangeUser:

; 2479 : 		}
; 2480 : 	}
; 2481 : 
; 2482 : 	LeaveCriticalSection(&this->m_CritSection);

  0004e	57		 push	 edi
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 2483 : 	return 0;

  00057	33 c0		 xor	 eax, eax
  00059	5b		 pop	 ebx

; 2484 : }

  0005a	5d		 pop	 ebp
  0005b	c2 0c 00	 ret	 12			; 0000000cH
$LN54@ChangeUser:

; 2475 : 		{
; 2476 : 			this->m_ZoneInfo[nZoneIndex].m_vtUserIndex[n] = nCurrentUserIndex;

  0005e	8b 4b 3c	 mov	 ecx, DWORD PTR [ebx+60]
  00061	8b 45 0c	 mov	 eax, DWORD PTR _nCurrentUserIndex$[ebp]

; 2477 : 			LeaveCriticalSection(&this->m_CritSection);

  00064	57		 push	 edi
  00065	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi

; 2478 : 			return true;

  00070	b8 01 00 00 00	 mov	 eax, 1
  00075	5b		 pop	 ebx

; 2484 : }

  00076	5d		 pop	 ebp
  00077	c2 0c 00	 ret	 12			; 0000000cH
$LN58@ChangeUser:

; 2463 : 	{
; 2464 : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  0007a	68 a0 09 00 00	 push	 2464			; 000009a0H
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2465 : 		return 0;

  00092	33 c0		 xor	 eax, eax
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx

; 2484 : }

  00096	5d		 pop	 ebp
  00097	c2 0c 00	 ret	 12			; 0000000cH
?ChangeUserIndex@CImperialGuardian@@QAEHHHH@Z ENDP	; CImperialGuardian::ChangeUserIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?MonsterBaseAct@CImperialGuardian@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_ty$1 = -4						; size = 4
tv602 = 8						; size = 4
_tx$2 = 8						; size = 4
_lpObj$ = 8						; size = 4
?MonsterBaseAct@CImperialGuardian@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CImperialGuardian::MonsterBaseAct, COMDAT
; _this$ = ecx

; 2304 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 2305 : 	LPOBJ lpTargetObj = NULL;
; 2306 : 
; 2307 : 	if( lpObj->TargetNumber >= 0 )

  00006	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	57		 push	 edi
  0000c	33 ff		 xor	 edi, edi
  0000e	0f b7 96 38 06
	00 00		 movzx	 edx, WORD PTR [esi+1592]
  00015	66 85 d2	 test	 dx, dx
  00018	78 11		 js	 SHORT $LN4@MonsterBas

; 2308 : 	{
; 2309 : 		lpTargetObj = &gObj[lpObj->TargetNumber];

  0001a	0f bf c2	 movsx	 eax, dx
  0001d	69 f8 40 27 00
	00		 imul	 edi, eax, 10048
  00023	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 2310 : 	}
; 2311 : 	else

  00029	eb 0a		 jmp	 SHORT $LN5@MonsterBas
$LN4@MonsterBas:

; 2312 : 	{
; 2313 : 		lpObj->m_ActState.Emotion = 0;

  0002b	81 a6 c8 01 00
	00 0f ff ff ff	 and	 DWORD PTR [esi+456], -241 ; ffffff0fH
$LN5@MonsterBas:

; 2314 : 	}
; 2315 : 
; 2316 : 	int actcode1;
; 2317 : 
; 2318 : 	switch( lpObj->m_ActState.Emotion )

  00035	8b 8e c8 01 00
	00		 mov	 ecx, DWORD PTR [esi+456]
  0003b	8b c1		 mov	 eax, ecx
  0003d	c1 e8 04	 shr	 eax, 4
  00040	83 e0 0f	 and	 eax, 15			; 0000000fH
  00043	83 e8 00	 sub	 eax, 0
  00046	0f 84 1b 03 00
	00		 je	 $LN6@MonsterBas
  0004c	83 e8 01	 sub	 eax, 1
  0004f	74 43		 je	 SHORT $LN11@MonsterBas
  00051	83 e8 02	 sub	 eax, 2
  00054	0f 85 a1 03 00
	00		 jne	 $LN10@MonsterBas

; 2435 : 							}
; 2436 : 						}
; 2437 : 					}
; 2438 : 				}
; 2439 : 			}
; 2440 : 		break;
; 2441 : 	case 3:
; 2442 : 			if ( lpObj->m_ActState.EmotionCount > 0 )

  0005a	8a 86 c9 01 00
	00		 mov	 al, BYTE PTR [esi+457]
  00060	84 c0		 test	 al, al
  00062	74 0a		 je	 SHORT $LN30@MonsterBas

; 2443 : 			{
; 2444 : 				lpObj->m_ActState.EmotionCount--;

  00064	fe c8		 dec	 al
  00066	88 86 c9 01 00
	00		 mov	 BYTE PTR [esi+457], al

; 2445 : 			}
; 2446 : 			else

  0006c	eb 0c		 jmp	 SHORT $LN31@MonsterBas
$LN30@MonsterBas:

; 2447 : 			{
; 2448 : 				lpObj->m_ActState.Emotion = 0;

  0006e	81 e1 0f ff ff
	ff		 and	 ecx, -241		; ffffff0fH
  00074	89 8e c8 01 00
	00		 mov	 DWORD PTR [esi+456], ecx
$LN31@MonsterBas:

; 2449 : 			}
; 2450 : 
; 2451 : 			lpObj->m_ActState.Move = 0;
; 2452 : 			lpObj->m_ActState.Attack = 0;

  0007a	83 a6 c8 01 00
	00 f9		 and	 DWORD PTR [esi+456], -7	; fffffff9H
  00081	5f		 pop	 edi

; 2453 : 			lpObj->NextActionTime = 400;

  00082	c7 86 a0 05 00
	00 90 01 00 00	 mov	 DWORD PTR [esi+1440], 400 ; 00000190H
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx

; 2454 : 		break;
; 2455 : 	default:
; 2456 : 		break;
; 2457 : 	}
; 2458 : }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
$LN11@MonsterBas:

; 2343 : 				}
; 2344 : 			}
; 2345 : 		break;
; 2346 : 	case 1:
; 2347 : 			if( lpObj->m_ActState.EmotionCount > 0 )

  00094	8a 86 c9 01 00
	00		 mov	 al, BYTE PTR [esi+457]
  0009a	84 c0		 test	 al, al
  0009c	74 0a		 je	 SHORT $LN12@MonsterBas

; 2348 : 			{
; 2349 : 				lpObj->m_ActState.EmotionCount--;

  0009e	fe c8		 dec	 al
  000a0	88 86 c9 01 00
	00		 mov	 BYTE PTR [esi+457], al

; 2350 : 			}
; 2351 : 			else

  000a6	eb 07		 jmp	 SHORT $LN13@MonsterBas
$LN12@MonsterBas:

; 2352 : 			{
; 2353 : 				lpObj->m_ActState.EmotionCount = 0;

  000a8	c6 86 c9 01 00
	00 00		 mov	 BYTE PTR [esi+457], 0
$LN13@MonsterBas:

; 2354 : 			}
; 2355 : 
; 2356 : 			if( lpObj->TargetNumber >= 0 && lpObj->PathStartEnd == 0 )

  000af	66 85 d2	 test	 dx, dx
  000b2	0f 88 43 03 00
	00		 js	 $LN10@MonsterBas
  000b8	80 be 60 01 00
	00 00		 cmp	 BYTE PTR [esi+352], 0
  000bf	0f 85 36 03 00
	00		 jne	 $LN10@MonsterBas

; 2357 : 			{
; 2358 : 				int dis = gObjCalDistance(lpObj,lpTargetObj);

  000c5	57		 push	 edi
  000c6	56		 push	 esi
  000c7	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance

; 2359 : 
; 2360 : 				int attackRange;
; 2361 : 
; 2362 : 				if ( lpObj->m_AttackType >= 100 )
; 2363 : 				{
; 2364 : 					attackRange = lpObj->m_AttackRange+2;

  000cc	0f bf 8e 90 06
	00 00		 movsx	 ecx, WORD PTR [esi+1680]
  000d3	83 c4 08	 add	 esp, 8
  000d6	66 83 be 92 06
	00 00 64	 cmp	 WORD PTR [esi+1682], 100 ; 00000064H
  000de	7c 03		 jl	 SHORT $LN16@MonsterBas
  000e0	83 c1 02	 add	 ecx, 2
$LN16@MonsterBas:

; 2365 : 				}
; 2366 : 				else
; 2367 : 				{
; 2368 : 					attackRange = lpObj->m_AttackRange;
; 2369 : 				}
; 2370 : 
; 2371 : 				if ( dis <= attackRange )

  000e3	3b c1		 cmp	 eax, ecx
  000e5	0f 8f 21 01 00
	00		 jg	 $LN17@MonsterBas

; 2372 : 				{
; 2373 : 					int tuser = lpObj->TargetNumber;

  000eb	0f bf 86 38 06
	00 00		 movsx	 eax, WORD PTR [esi+1592]

; 2374 : 					int map = gObj[tuser].MapNumber;

  000f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f8	69 d8 40 27 00
	00		 imul	 ebx, eax, 10048
  000fe	0f b6 84 19 23
	01 00 00	 movzx	 eax, BYTE PTR [ecx+ebx+291]

; 2375 : 					BYTE attr;
; 2376 : 
; 2377 : 					if ( MapC[map].CheckWall(lpObj->X, lpObj->Y, gObj[tuser].X, gObj[tuser].Y) == TRUE )

  00106	69 c0 28 38 05
	00		 imul	 eax, eax, 342056
  0010c	8d 90 00 00 00
	00		 lea	 edx, DWORD PTR ?MapC@@3PAVMapClass@@A[eax]
  00112	0f b6 84 19 21
	01 00 00	 movzx	 eax, BYTE PTR [ecx+ebx+289]
  0011a	50		 push	 eax
  0011b	0f b6 84 19 20
	01 00 00	 movzx	 eax, BYTE PTR [ecx+ebx+288]
  00123	8b ca		 mov	 ecx, edx
  00125	50		 push	 eax
  00126	0f b6 86 21 01
	00 00		 movzx	 eax, BYTE PTR [esi+289]
  0012d	50		 push	 eax
  0012e	0f b6 86 20 01
	00 00		 movzx	 eax, BYTE PTR [esi+288]
  00135	50		 push	 eax
  00136	89 55 08	 mov	 DWORD PTR tv602[ebp], edx
  00139	e8 00 00 00 00	 call	 ?CheckWall@MapClass@@QAEHHHHH@Z ; MapClass::CheckWall
  0013e	83 f8 01	 cmp	 eax, 1
  00141	0f 85 b4 02 00
	00		 jne	 $LN10@MonsterBas

; 2378 : 					{
; 2379 : 						attr = MapC[map].GetAttr(gObj[tuser].X, gObj[tuser].Y);

  00147	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0014d	8b 4d 08	 mov	 ecx, DWORD PTR tv602[ebp]
  00150	0f b6 84 1a 21
	01 00 00	 movzx	 eax, BYTE PTR [edx+ebx+289]
  00158	50		 push	 eax
  00159	0f b6 84 1a 20
	01 00 00	 movzx	 eax, BYTE PTR [edx+ebx+288]
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 2380 : 
; 2381 : 						if ( (attr&1) != 1 )

  00167	a8 01		 test	 al, 1
  00169	75 37		 jne	 SHORT $LN20@MonsterBas

; 2382 : 						{
; 2383 : 							lpObj->m_ActState.Attack = 1;

  0016b	83 8e c8 01 00
	00 02		 or	 DWORD PTR [esi+456], 2

; 2384 : 							lpObj->m_ActState.EmotionCount = 20+rand()%30;

  00172	e8 00 00 00 00	 call	 _rand
  00177	8b d8		 mov	 ebx, eax
  00179	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0017e	f7 eb		 imul	 ebx
  00180	03 d3		 add	 edx, ebx
  00182	c1 fa 04	 sar	 edx, 4
  00185	8b ca		 mov	 ecx, edx
  00187	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0018a	03 ca		 add	 ecx, edx
  0018c	8a c1		 mov	 al, cl
  0018e	c0 e0 04	 shl	 al, 4
  00191	2a c1		 sub	 al, cl
  00193	02 c0		 add	 al, al
  00195	2a d8		 sub	 bl, al
  00197	80 c3 14	 add	 bl, 20			; 00000014H
  0019a	88 9e c9 01 00
	00		 mov	 BYTE PTR [esi+457], bl

; 2385 : 						}
; 2386 : 						else

  001a0	eb 25		 jmp	 SHORT $LN21@MonsterBas
$LN20@MonsterBas:

; 2387 : 						{
; 2388 : 							lpObj->TargetNumber = -1;

  001a2	83 c8 ff	 or	 eax, -1

; 2389 : 							lpObj->m_ActState.EmotionCount = 30;

  001a5	c6 86 c9 01 00
	00 1e		 mov	 BYTE PTR [esi+457], 30	; 0000001eH
  001ac	66 89 86 38 06
	00 00		 mov	 WORD PTR [esi+1592], ax

; 2390 : 							lpObj->m_ActState.Emotion = 1;

  001b3	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  001b9	25 1f ff ff ff	 and	 eax, -225		; ffffff1fH
  001be	83 c8 10	 or	 eax, 16			; 00000010H
  001c1	89 86 c8 01 00
	00		 mov	 DWORD PTR [esi+456], eax
$LN21@MonsterBas:

; 2391 : 						}
; 2392 : 
; 2393 : 						lpObj->Dir = GetPathPacketDirPos(lpTargetObj->X-lpObj->X, lpTargetObj->Y-lpObj->Y);

  001c7	0f b6 86 21 01
	00 00		 movzx	 eax, BYTE PTR [esi+289]
  001ce	0f b6 8f 21 01
	00 00		 movzx	 ecx, BYTE PTR [edi+289]
  001d5	2b c8		 sub	 ecx, eax
  001d7	0f b6 86 20 01
	00 00		 movzx	 eax, BYTE PTR [esi+288]
  001de	51		 push	 ecx
  001df	0f b6 8f 20 01
	00 00		 movzx	 ecx, BYTE PTR [edi+288]
  001e6	2b c8		 sub	 ecx, eax
  001e8	51		 push	 ecx
  001e9	e8 00 00 00 00	 call	 ?GetPathPacketDirPos@@YAEHH@Z ; GetPathPacketDirPos
  001ee	83 c4 08	 add	 esp, 8
  001f1	88 86 22 01 00
	00		 mov	 BYTE PTR [esi+290], al

; 2394 : 						lpObj->NextActionTime = lpObj->m_AttackSpeed;

  001f7	8b 86 6c 06 00
	00		 mov	 eax, DWORD PTR [esi+1644]
  001fd	89 86 a0 05 00
	00		 mov	 DWORD PTR [esi+1440], eax
  00203	5f		 pop	 edi
  00204	5e		 pop	 esi
  00205	5b		 pop	 ebx

; 2454 : 		break;
; 2455 : 	default:
; 2456 : 		break;
; 2457 : 	}
; 2458 : }

  00206	8b e5		 mov	 esp, ebp
  00208	5d		 pop	 ebp
  00209	c2 04 00	 ret	 4
$LN17@MonsterBas:

; 2395 : 					}
; 2396 : 				}
; 2397 : 				else
; 2398 : 				{
; 2399 : 					if ( gObjMonsterGetTargetPos(lpObj) == TRUE )

  0020c	56		 push	 esi
  0020d	e8 00 00 00 00	 call	 ?gObjMonsterGetTargetPos@@YAHPAUOBJECTSTRUCT@@@Z ; gObjMonsterGetTargetPos
  00212	83 c4 04	 add	 esp, 4
  00215	83 f8 01	 cmp	 eax, 1
  00218	75 6e		 jne	 SHORT $LN22@MonsterBas

; 2400 : 					{
; 2401 : 						if ( MapC[lpObj->MapNumber].CheckWall(lpObj->X, lpObj->Y, lpObj->MTX, lpObj->MTY) == TRUE )

  0021a	0f b6 86 55 01
	00 00		 movzx	 eax, BYTE PTR [esi+341]
  00221	50		 push	 eax
  00222	0f b6 86 54 01
	00 00		 movzx	 eax, BYTE PTR [esi+340]
  00229	50		 push	 eax
  0022a	0f b6 86 21 01
	00 00		 movzx	 eax, BYTE PTR [esi+289]
  00231	50		 push	 eax
  00232	0f b6 86 20 01
	00 00		 movzx	 eax, BYTE PTR [esi+288]
  00239	50		 push	 eax
  0023a	0f b6 86 23 01
	00 00		 movzx	 eax, BYTE PTR [esi+291]
  00241	69 c8 28 38 05
	00		 imul	 ecx, eax, 342056
  00247	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  0024d	e8 00 00 00 00	 call	 ?CheckWall@MapClass@@QAEHHHHH@Z ; MapClass::CheckWall
  00252	83 f8 01	 cmp	 eax, 1
  00255	0f 84 c2 00 00
	00		 je	 $LN34@MonsterBas
$LN27@MonsterBas:

; 2429 : 							}
; 2430 : 							else
; 2431 : 							{
; 2432 : 								gObjMonsterMoveAction(lpObj);

  0025b	56		 push	 esi
  0025c	e8 00 00 00 00	 call	 ?gObjMonsterMoveAction@@YAXPAUOBJECTSTRUCT@@@Z ; gObjMonsterMoveAction

; 2433 : 								lpObj->m_ActState.Emotion = 3;

  00261	8b 86 c8 01 00
	00		 mov	 eax, DWORD PTR [esi+456]
  00267	83 c4 04	 add	 esp, 4
  0026a	25 3f ff ff ff	 and	 eax, -193		; ffffff3fH
  0026f	83 c8 30	 or	 eax, 48			; 00000030H
  00272	89 86 c8 01 00
	00		 mov	 DWORD PTR [esi+456], eax
  00278	5f		 pop	 edi

; 2434 : 								lpObj->m_ActState.EmotionCount = 10;

  00279	c6 86 c9 01 00
	00 0a		 mov	 BYTE PTR [esi+457], 10	; 0000000aH
  00280	5e		 pop	 esi
  00281	5b		 pop	 ebx

; 2454 : 		break;
; 2455 : 	default:
; 2456 : 		break;
; 2457 : 	}
; 2458 : }

  00282	8b e5		 mov	 esp, ebp
  00284	5d		 pop	 ebp
  00285	c2 04 00	 ret	 4
$LN22@MonsterBas:

; 2402 : 						{
; 2403 : 							lpObj->m_ActState.Move = 1;
; 2404 : 							lpObj->NextActionTime = 400;
; 2405 : 							lpObj->Dir = GetPathPacketDirPos(lpTargetObj->X-lpObj->X, lpTargetObj->Y-lpObj->Y);
; 2406 : 						}
; 2407 : 						else
; 2408 : 						{
; 2409 : 							gObjMonsterMoveAction(lpObj);
; 2410 : 							lpObj->m_ActState.Emotion = 3;
; 2411 : 							lpObj->m_ActState.EmotionCount = 10;
; 2412 : 						}
; 2413 : 					}
; 2414 : 					else
; 2415 : 					{
; 2416 : 						int tx = 0;
; 2417 : 						int ty = 0;
; 2418 : 
; 2419 : 						if( lpObj->Connected > PLAYER_LOGGED && gObjGetTargetPos(lpObj,lpObj->X,lpObj->Y,tx,ty) == TRUE )

  00288	83 7e 04 02	 cmp	 DWORD PTR [esi+4], 2
  0028c	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _tx$2[ebp], 0
  00293	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ty$1[ebp], 0
  0029a	0f 8e 5b 01 00
	00		 jle	 $LN10@MonsterBas
  002a0	8d 45 fc	 lea	 eax, DWORD PTR _ty$1[ebp]
  002a3	50		 push	 eax
  002a4	8d 45 08	 lea	 eax, DWORD PTR _tx$2[ebp]
  002a7	50		 push	 eax
  002a8	0f b6 86 21 01
	00 00		 movzx	 eax, BYTE PTR [esi+289]
  002af	50		 push	 eax
  002b0	0f b6 86 20 01
	00 00		 movzx	 eax, BYTE PTR [esi+288]
  002b7	50		 push	 eax
  002b8	56		 push	 esi
  002b9	e8 00 00 00 00	 call	 ?gObjGetTargetPos@@YAHPAUOBJECTSTRUCT@@HHAAH1@Z ; gObjGetTargetPos
  002be	83 c4 14	 add	 esp, 20			; 00000014H
  002c1	83 f8 01	 cmp	 eax, 1
  002c4	0f 85 31 01 00
	00		 jne	 $LN10@MonsterBas

; 2420 : 						{
; 2421 : 							if ( MapC[lpObj->MapNumber].CheckWall(lpObj->X, lpObj->Y, lpObj->MTX, lpObj->MTY) == TRUE )

  002ca	0f b6 86 55 01
	00 00		 movzx	 eax, BYTE PTR [esi+341]
  002d1	50		 push	 eax
  002d2	0f b6 86 54 01
	00 00		 movzx	 eax, BYTE PTR [esi+340]
  002d9	50		 push	 eax
  002da	0f b6 86 21 01
	00 00		 movzx	 eax, BYTE PTR [esi+289]
  002e1	50		 push	 eax
  002e2	0f b6 86 20 01
	00 00		 movzx	 eax, BYTE PTR [esi+288]
  002e9	50		 push	 eax
  002ea	0f b6 86 23 01
	00 00		 movzx	 eax, BYTE PTR [esi+291]
  002f1	69 c8 28 38 05
	00		 imul	 ecx, eax, 342056
  002f7	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  002fd	e8 00 00 00 00	 call	 ?CheckWall@MapClass@@QAEHHHHH@Z ; MapClass::CheckWall
  00302	83 f8 01	 cmp	 eax, 1
  00305	0f 85 50 ff ff
	ff		 jne	 $LN27@MonsterBas

; 2422 : 							{
; 2423 : 								lpObj->MTX = tx;

  0030b	8a 45 08	 mov	 al, BYTE PTR _tx$2[ebp]
  0030e	88 86 54 01 00
	00		 mov	 BYTE PTR [esi+340], al

; 2424 : 								lpObj->MTY = ty;

  00314	8a 45 fc	 mov	 al, BYTE PTR _ty$1[ebp]
  00317	88 86 55 01 00
	00		 mov	 BYTE PTR [esi+341], al
$LN34@MonsterBas:

; 2425 : 
; 2426 : 								lpObj->m_ActState.Move = 1;

  0031d	83 8e c8 01 00
	00 04		 or	 DWORD PTR [esi+456], 4

; 2427 : 								lpObj->NextActionTime = 400;
; 2428 : 								lpObj->Dir = GetPathPacketDirPos(lpTargetObj->X-lpObj->X, lpTargetObj->Y-lpObj->Y);

  00324	0f b6 86 21 01
	00 00		 movzx	 eax, BYTE PTR [esi+289]
  0032b	c7 86 a0 05 00
	00 90 01 00 00	 mov	 DWORD PTR [esi+1440], 400 ; 00000190H
  00335	0f b6 8f 21 01
	00 00		 movzx	 ecx, BYTE PTR [edi+289]
  0033c	2b c8		 sub	 ecx, eax
  0033e	0f b6 86 20 01
	00 00		 movzx	 eax, BYTE PTR [esi+288]
  00345	51		 push	 ecx
  00346	0f b6 8f 20 01
	00 00		 movzx	 ecx, BYTE PTR [edi+288]
  0034d	2b c8		 sub	 ecx, eax
  0034f	51		 push	 ecx
  00350	e8 00 00 00 00	 call	 ?GetPathPacketDirPos@@YAEHH@Z ; GetPathPacketDirPos
  00355	83 c4 08	 add	 esp, 8
  00358	88 86 22 01 00
	00		 mov	 BYTE PTR [esi+290], al
  0035e	5f		 pop	 edi
  0035f	5e		 pop	 esi
  00360	5b		 pop	 ebx

; 2454 : 		break;
; 2455 : 	default:
; 2456 : 		break;
; 2457 : 	}
; 2458 : }

  00361	8b e5		 mov	 esp, ebp
  00363	5d		 pop	 ebp
  00364	c2 04 00	 ret	 4
$LN6@MonsterBas:

; 2319 : 	{
; 2320 : 	case 0:
; 2321 : 			if ( lpObj->m_ActState.Attack )

  00367	f6 c1 02	 test	 cl, 2
  0036a	74 1d		 je	 SHORT $LN7@MonsterBas

; 2322 : 			{
; 2323 : 				lpObj->m_ActState.Attack = 0;

  0036c	83 e1 fd	 and	 ecx, -3			; fffffffdH

; 2324 : 				lpObj->TargetNumber = -1;
; 2325 : 				lpObj->NextActionTime = 500;

  0036f	c7 86 a0 05 00
	00 f4 01 00 00	 mov	 DWORD PTR [esi+1440], 500 ; 000001f4H
  00379	83 c8 ff	 or	 eax, -1
  0037c	89 8e c8 01 00
	00		 mov	 DWORD PTR [esi+456], ecx
  00382	66 89 86 38 06
	00 00		 mov	 WORD PTR [esi+1592], ax
$LN7@MonsterBas:

; 2326 : 			}
; 2327 : 
; 2328 : 			actcode1 = rand()%2;

  00389	e8 00 00 00 00	 call	 _rand

; 2329 : 
; 2330 : 			if( lpObj->m_MoveRange > 0 && !gObjCheckUsedBuffEffect(lpObj,AT_ICE_ARROW) )

  0038e	66 83 be 8e 06
	00 00 00	 cmp	 WORD PTR [esi+1678], 0
  00396	7e 18		 jle	 SHORT $LN8@MonsterBas
  00398	6a 39		 push	 57			; 00000039H
  0039a	56		 push	 esi
  0039b	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  003a0	83 c4 08	 add	 esp, 8
  003a3	84 c0		 test	 al, al
  003a5	75 09		 jne	 SHORT $LN8@MonsterBas

; 2331 : 				gObjMonsterMoveAction(lpObj);

  003a7	56		 push	 esi
  003a8	e8 00 00 00 00	 call	 ?gObjMonsterMoveAction@@YAXPAUOBJECTSTRUCT@@@Z ; gObjMonsterMoveAction
  003ad	83 c4 04	 add	 esp, 4
$LN8@MonsterBas:

; 2332 : 
; 2333 : 			if( lpObj->m_bIsMonsterAttackFirst != 0 )

  003b0	83 be 7c 14 00
	00 00		 cmp	 DWORD PTR [esi+5244], 0
  003b7	74 42		 je	 SHORT $LN10@MonsterBas

; 2334 : 			{
; 2335 : 				lpObj->TargetNumber = gObjMonsterSearchEnemy(lpObj,OBJ_USER);

  003b9	6a 01		 push	 1
  003bb	56		 push	 esi
  003bc	e8 00 00 00 00	 call	 ?gObjMonsterSearchEnemy@@YAHPAUOBJECTSTRUCT@@E@Z ; gObjMonsterSearchEnemy
  003c1	83 c4 08	 add	 esp, 8
  003c4	66 89 86 38 06
	00 00		 mov	 WORD PTR [esi+1592], ax

; 2336 : 
; 2337 : 				if( lpObj->TargetNumber >= 0 )

  003cb	66 85 c0	 test	 ax, ax
  003ce	78 2b		 js	 SHORT $LN10@MonsterBas

; 2338 : 				{
; 2339 : 					lpObj->m_ActState.EmotionCount = 100;

  003d0	c6 86 c9 01 00
	00 64		 mov	 BYTE PTR [esi+457], 100	; 00000064H

; 2340 : 					lpObj->m_ActState.Emotion = 1;

  003d7	8b 8e c8 01 00
	00		 mov	 ecx, DWORD PTR [esi+456]
  003dd	81 e1 1f ff ff
	ff		 and	 ecx, -225		; ffffff1fH

; 2341 : 
; 2342 : 					this->SetTargetMoveAllMonster(lpObj->m_ImperialGuardianZone,lpObj->TargetNumber);

  003e3	98		 cwde
  003e4	83 c9 10	 or	 ecx, 16			; 00000010H
  003e7	50		 push	 eax
  003e8	ff b6 b8 26 00
	00		 push	 DWORD PTR [esi+9912]
  003ee	89 8e c8 01 00
	00		 mov	 DWORD PTR [esi+456], ecx
  003f4	8b cb		 mov	 ecx, ebx
  003f6	e8 00 00 00 00	 call	 ?SetTargetMoveAllMonster@CImperialGuardian@@QAEXHH@Z ; CImperialGuardian::SetTargetMoveAllMonster
$LN10@MonsterBas:
  003fb	5f		 pop	 edi
  003fc	5e		 pop	 esi
  003fd	5b		 pop	 ebx

; 2454 : 		break;
; 2455 : 	default:
; 2456 : 		break;
; 2457 : 	}
; 2458 : }

  003fe	8b e5		 mov	 esp, ebp
  00400	5d		 pop	 ebp
  00401	c2 04 00	 ret	 4
?MonsterBaseAct@CImperialGuardian@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CImperialGuardian::MonsterBaseAct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?UserMonsterCountCheck@CImperialGuardian@@QAEXXZ
_TEXT	SEGMENT
?UserMonsterCountCheck@CImperialGuardian@@QAEXXZ PROC	; CImperialGuardian::UserMonsterCountCheck, COMDAT
; _this$ = ecx

; 2300 : 	// not used debug function
; 2301 : }

  00000	c3		 ret	 0
?UserMonsterCountCheck@CImperialGuardian@@QAEXXZ ENDP	; CImperialGuardian::UserMonsterCountCheck
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?IsRegPartyUser@CImperialGuardian@@QAE_NHH@Z
_TEXT	SEGMENT
tv234 = 8						; size = 4
_nZoneIndex$ = 8					; size = 4
_nUserIndex$ = 12					; size = 4
?IsRegPartyUser@CImperialGuardian@@QAE_NHH@Z PROC	; CImperialGuardian::IsRegPartyUser, COMDAT
; _this$ = ecx

; 2283 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2284 : 	bool bFlag = false;
; 2285 : 	int nSize = this->m_ZoneInfo[nZoneIndex].m_vtPartyUserIndex.size();

  00003	6b 45 08 64	 imul	 eax, DWORD PTR _nZoneIndex$[ebp], 100
  00007	32 d2		 xor	 dl, dl
  00009	03 c8		 add	 ecx, eax

; 2287 : 	for(int i = 0; i < nSize; i++)

  0000b	33 c0		 xor	 eax, eax
  0000d	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0000e	8b 71 4c	 mov	 esi, DWORD PTR [ecx+76]
  00011	2b 71 48	 sub	 esi, DWORD PTR [ecx+72]
  00014	c1 fe 02	 sar	 esi, 2
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2287 : 	for(int i = 0; i < nSize; i++)

  00017	85 f6		 test	 esi, esi
  00019	7e 2c		 jle	 SHORT $LN3@IsRegParty

; 2288 : 	{
; 2289 : 		int nResult = this->m_ZoneInfo[nZoneIndex].m_vtPartyUserIndex.at(i);

  0001b	53		 push	 ebx
  0001c	8b 5d 0c	 mov	 ebx, DWORD PTR _nUserIndex$[ebp]
  0001f	57		 push	 edi
  00020	8b 79 48	 mov	 edi, DWORD PTR [ecx+72]
  00023	8b 49 4c	 mov	 ecx, DWORD PTR [ecx+76]
  00026	2b cf		 sub	 ecx, edi
  00028	c7 45 08 01 00
	00 00		 mov	 DWORD PTR tv234[ebp], 1
  0002f	c1 f9 02	 sar	 ecx, 2
$LL4@IsRegParty:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1206 : 		if (size() <= _Pos)

  00032	3b c8		 cmp	 ecx, eax
  00034	76 18		 jbe	 SHORT $LN71@IsRegParty
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2291 : 		if( nResult == nUserIndex )

  00036	39 1c 87	 cmp	 DWORD PTR [edi+eax*4], ebx
  00039	0f b6 d2	 movzx	 edx, dl
  0003c	0f 44 55 08	 cmove	 edx, DWORD PTR tv234[ebp]
  00040	40		 inc	 eax
  00041	3b c6		 cmp	 eax, esi
  00043	7c ed		 jl	 SHORT $LL4@IsRegParty
  00045	5f		 pop	 edi
  00046	5b		 pop	 ebx
$LN3@IsRegParty:

; 2292 : 			bFlag = true;
; 2293 : 	}
; 2294 : 
; 2295 : 	return bFlag;

  00047	8a c2		 mov	 al, dl
  00049	5e		 pop	 esi

; 2296 : }

  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
$LN71@IsRegParty:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1789 : 		_Xout_of_range("invalid vector<T> subscript");

  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
  00053	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN72@IsRegParty:
$LN70@IsRegParty:
  00058	cc		 int	 3
?IsRegPartyUser@CImperialGuardian@@QAE_NHH@Z ENDP	; CImperialGuardian::IsRegPartyUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?RegAllPartyUser@CImperialGuardian@@QAEXHH@Z
_TEXT	SEGMENT
_nUserNumber$1 = 8					; size = 4
_nZoneIndex$ = 8					; size = 4
_nPartyCount$1$ = 12					; size = 4
_nFirstEnterUserIndex$ = 12				; size = 4
?RegAllPartyUser@CImperialGuardian@@QAEXHH@Z PROC	; CImperialGuardian::RegAllPartyUser, COMDAT
; _this$ = ecx

; 2267 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2268 : 	if( gObj[nFirstEnterUserIndex].Connected < 1 )

  00003	69 55 0c 40 27
	00 00		 imul	 edx, DWORD PTR _nFirstEnterUserIndex$[ebp], 10048
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000f	56		 push	 esi
  00010	8b f1		 mov	 esi, ecx
  00012	83 7c 02 04 01	 cmp	 DWORD PTR [edx+eax+4], 1
  00017	0f 8c a8 00 00
	00		 jl	 $LN3@RegAllPart

; 2269 : 		return;
; 2270 : 
; 2271 : 	BYTE bAddUser = TRUE;
; 2272 : 	int nPartyNumber = gObj[nFirstEnterUserIndex].PartyNumber;

  0001d	57		 push	 edi
  0001e	8b bc 02 0c 06
	00 00		 mov	 edi, DWORD PTR [edx+eax+1548]

; 2273 : 	int nPartyCount = gParty.GetPartyCount(nPartyNumber);

  00025	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 ?GetPartyCount@PartyClass@@QAEHH@Z ; PartyClass::GetPartyCount
  00030	8b d0		 mov	 edx, eax
  00032	89 55 0c	 mov	 DWORD PTR _nPartyCount$1$[ebp], edx

; 2275 : 	for(int i = 0; i < nPartyCount; i++)

  00035	85 d2		 test	 edx, edx
  00037	0f 8e 87 00 00
	00		 jle	 $LN232@RegAllPart

; 2269 : 		return;
; 2270 : 
; 2271 : 	BYTE bAddUser = TRUE;
; 2272 : 	int nPartyNumber = gObj[nFirstEnterUserIndex].PartyNumber;

  0003d	6b 4d 08 64	 imul	 ecx, DWORD PTR _nZoneIndex$[ebp], 100
  00041	53		 push	 ebx
  00042	03 f1		 add	 esi, ecx
  00044	8b cf		 mov	 ecx, edi
  00046	c1 e1 04	 shl	 ecx, 4
  00049	2b cf		 sub	 ecx, edi
  0004b	8d 1c 8d 0c 00
	00 00		 lea	 ebx, DWORD PTR ?gParty@@3VPartyClass@@A[ecx*4+12]
$LL4@RegAllPart:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00052	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00055	8d 4d 08	 lea	 ecx, DWORD PTR _nUserNumber$1[ebp]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2277 : 		int nUserNumber = gParty.m_PartyS[nPartyNumber].Number[i];

  00058	8b 3b		 mov	 edi, DWORD PTR [ebx]
  0005a	89 7d 08	 mov	 DWORD PTR _nUserNumber$1[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  0005d	3b c8		 cmp	 ecx, eax
  0005f	73 38		 jae	 SHORT $LN8@RegAllPart
  00061	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00064	8d 55 08	 lea	 edx, DWORD PTR _nUserNumber$1[ebp]
  00067	3b ca		 cmp	 ecx, edx
  00069	8b 55 0c	 mov	 edx, DWORD PTR _nPartyCount$1$[ebp]
  0006c	77 2b		 ja	 SHORT $LN8@RegAllPart

; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  0006e	8d 7d 08	 lea	 edi, DWORD PTR _nUserNumber$1[ebp]
  00071	2b f9		 sub	 edi, ecx
  00073	c1 ff 02	 sar	 edi, 2

; 1278 : 			if (this->_Mylast() == this->_Myend())

  00076	3b 46 50	 cmp	 eax, DWORD PTR [esi+80]
  00079	75 0d		 jne	 SHORT $LN10@RegAllPart

; 1279 : 				_Reserve(1);

  0007b	6a 01		 push	 1
  0007d	8d 4e 48	 lea	 ecx, DWORD PTR [esi+72]
  00080	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
  00085	8b 55 0c	 mov	 edx, DWORD PTR _nPartyCount$1$[ebp]
$LN10@RegAllPart:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00088	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  0008b	85 c9		 test	 ecx, ecx
  0008d	74 25		 je	 SHORT $LN211@RegAllPart
  0008f	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  00092	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00095	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1285 : 		else

  00097	eb 1b		 jmp	 SHORT $LN211@RegAllPart
$LN8@RegAllPart:

; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  00099	3b 46 50	 cmp	 eax, DWORD PTR [esi+80]
  0009c	75 0d		 jne	 SHORT $LN11@RegAllPart

; 1288 : 				_Reserve(1);

  0009e	6a 01		 push	 1
  000a0	8d 4e 48	 lea	 ecx, DWORD PTR [esi+72]
  000a3	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
  000a8	8b 55 0c	 mov	 edx, DWORD PTR _nPartyCount$1$[ebp]
$LN11@RegAllPart:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  000ab	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  000ae	85 c0		 test	 eax, eax
  000b0	74 02		 je	 SHORT $LN211@RegAllPart
  000b2	89 38		 mov	 DWORD PTR [eax], edi
$LN211@RegAllPart:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  000b4	83 46 4c 04	 add	 DWORD PTR [esi+76], 4
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2275 : 	for(int i = 0; i < nPartyCount; i++)

  000b8	83 c3 04	 add	 ebx, 4
  000bb	83 ea 01	 sub	 edx, 1
  000be	89 55 0c	 mov	 DWORD PTR _nPartyCount$1$[ebp], edx
  000c1	75 8f		 jne	 SHORT $LL4@RegAllPart
  000c3	5b		 pop	 ebx
$LN232@RegAllPart:
  000c4	5f		 pop	 edi
$LN3@RegAllPart:
  000c5	5e		 pop	 esi

; 2278 : 		this->m_ZoneInfo[nZoneIndex].m_vtPartyUserIndex.push_back(nUserNumber);
; 2279 : 	}
; 2280 : }

  000c6	5d		 pop	 ebp
  000c7	c2 08 00	 ret	 8
?RegAllPartyUser@CImperialGuardian@@QAEXHH@Z ENDP	; CImperialGuardian::RegAllPartyUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?ImperialGuardianLevelUp@CImperialGuardian@@QAEHHH@Z
_TEXT	SEGMENT
_iLEFT_EXP$1$ = -268					; size = 4
tv588 = -264						; size = 4
_partyLog$1 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_iIndex$ = 8						; size = 4
_iAddExp$ = 12						; size = 4
?ImperialGuardianLevelUp@CImperialGuardian@@QAEHHH@Z PROC ; CImperialGuardian::ImperialGuardianLevelUp, COMDAT
; _this$ = ecx

; 2174 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]

; 2175 : 	if( !OBJMAX_RANGE(iIndex) )

  00017	85 f6		 test	 esi, esi
  00019	0f 88 6e 03 00
	00		 js	 $LN20@ImperialGu
  0001f	33 c0		 xor	 eax, eax
  00021	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  00027	0f 9e c0	 setle	 al
  0002a	85 c0		 test	 eax, eax
  0002c	0f 84 5b 03 00
	00		 je	 $LN20@ImperialGu

; 2176 : 		return 0;
; 2177 : 
; 2178 : 	if( g_MasterExp.LevelUp(&gObj[iIndex],iAddExp) )

  00032	53		 push	 ebx
  00033	8b 5d 0c	 mov	 ebx, DWORD PTR _iAddExp$[ebp]
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterExp@@3VCMasterExperience@@A ; g_MasterExp
  0003b	57		 push	 edi
  0003c	8b c3		 mov	 eax, ebx
  0003e	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  00044	99		 cdq
  00045	52		 push	 edx
  00046	50		 push	 eax
  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004c	03 c7		 add	 eax, edi
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?LevelUp@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@_J@Z ; CMasterExperience::LevelUp
  00054	85 c0		 test	 eax, eax
  00056	0f 85 8c 00 00
	00		 jne	 $LN24@ImperialGu

; 2179 : 		return 0;
; 2180 : 
; 2181 : 	gObjSetExpPetItem(iIndex,iAddExp);

  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ?gObjSetExpPetItem@@YAXHH@Z ; gObjSetExpPetItem

; 2182 : 
; 2183 : 	int iLEFT_EXP = 0;
; 2184 : 
; 2185 : 	LogAddTD("Experience : Map[%d]-(%d,%d) [%s][%s](%d) %I64u %d ",

  00063	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00069	53		 push	 ebx
  0006a	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iLEFT_EXP$1$[ebp], 0
  00074	ff b4 0f a0 00
	00 00		 push	 DWORD PTR [edi+ecx+160]
  0007b	0f bf 84 0f 96
	00 00 00	 movsx	 eax, WORD PTR [edi+ecx+150]
  00083	50		 push	 eax
  00084	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00087	03 c7		 add	 eax, edi
  00089	50		 push	 eax
  0008a	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0008d	03 c7		 add	 eax, edi
  0008f	50		 push	 eax
  00090	0f b6 84 0f 21
	01 00 00	 movzx	 eax, BYTE PTR [edi+ecx+289]
  00098	50		 push	 eax
  00099	0f b6 84 0f 20
	01 00 00	 movzx	 eax, BYTE PTR [edi+ecx+288]
  000a1	50		 push	 eax
  000a2	0f b6 84 0f 23
	01 00 00	 movzx	 eax, BYTE PTR [edi+ecx+291]
  000aa	50		 push	 eax
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@DKMMCBLO@Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5?$FL?$CFs@
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2186 : 		gObj[iIndex].MapNumber,gObj[iIndex].X,gObj[iIndex].Y,
; 2187 : 		gObj[iIndex].AccountID,gObj[iIndex].Name,gObj[iIndex].Level,gObj[iIndex].Experience,iAddExp);
; 2188 : 
; 2189 : 
; 2190 : 	if( gObj[iIndex].Level >= 400 )

  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000bb	b9 90 01 00 00	 mov	 ecx, 400		; 00000190H
  000c0	83 c4 2c	 add	 esp, 44			; 0000002cH
  000c3	66 39 8c 07 96
	00 00 00	 cmp	 WORD PTR [edi+eax+150], cx
  000cb	7c 30		 jl	 SHORT $LN7@ImperialGu

; 2191 : 	{
; 2192 : 		GCServerMsgStringSend(lMsg.Get(MSGGET(4,112)),iIndex,1);

  000cd	6a 01		 push	 1
  000cf	56		 push	 esi
  000d0	68 70 04 00 00	 push	 1136			; 00000470H
  000d5	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000da	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN24@ImperialGu:

; 2193 : 		return 0;

  000e8	5f		 pop	 edi
  000e9	5b		 pop	 ebx
  000ea	33 c0		 xor	 eax, eax
  000ec	5e		 pop	 esi

; 2264 : }

  000ed	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f0	33 cd		 xor	 ecx, ebp
  000f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
$LN7@ImperialGu:

; 2194 : 	}
; 2195 : 
; 2196 : 	if ( (gObj[iIndex].Experience + iAddExp) < gObj[iIndex].NextExp )

  000fd	8b b4 07 a0 00
	00 00		 mov	 esi, DWORD PTR [edi+eax+160]
  00104	8b 94 07 a4 00
	00 00		 mov	 edx, DWORD PTR [edi+eax+164]
  0010b	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
  0010e	3b ca		 cmp	 ecx, edx
  00110	73 0c		 jae	 SHORT $LN8@ImperialGu

; 2197 : 	{
; 2198 : 		gObj[iIndex].Experience += iAddExp;

  00112	89 8c 07 a0 00
	00 00		 mov	 DWORD PTR [edi+eax+160], ecx

; 2199 : 	}
; 2200 : 	else

  00119	e9 3f 02 00 00	 jmp	 $LN11@ImperialGu
$LN8@ImperialGu:

; 2201 : 	{
; 2202 : 		iLEFT_EXP = gObj[iIndex].Experience + iAddExp - gObj[iIndex].NextExp;
; 2203 : 		gObj[iIndex].Experience = gObj[iIndex].NextExp;

  0011e	89 94 07 a0 00
	00 00		 mov	 DWORD PTR [edi+eax+160], edx
  00125	2b f2		 sub	 esi, edx

; 2204 : 		gObj[iIndex].Level++;

  00127	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0012c	03 f3		 add	 esi, ebx
  0012e	89 b5 f4 fe ff
	ff		 mov	 DWORD PTR _iLEFT_EXP$1$[ebp], esi

; 2205 : #if (ENABLE_CUSTOM_CLASSCALC == 1)
; 2206 : 		gObj[iIndex].LevelUpPoint += g_ClassCalc.GetLevelPoint(&gObj[iIndex], 0, 0);

  00134	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ClassCalc@@3VClassCalc@@A ; g_ClassCalc
  00139	6a 00		 push	 0
  0013b	6a 00		 push	 0
  0013d	66 ff 84 07 96
	00 00 00	 inc	 WORD PTR [edi+eax+150]
  00145	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0014b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ?GetLevelPoint@ClassCalc@@QAEGPAUOBJECTSTRUCT@@EE@Z ; ClassCalc::GetLevelPoint
  00154	0f b7 c0	 movzx	 eax, ax
  00157	01 84 37 98 00
	00 00		 add	 DWORD PTR [edi+esi+152], eax

; 2207 : #else
; 2208 : 		if( gObj[iIndex].Class == CLASS_DARKLORD || gObj[iIndex].Class == CLASS_MAGUMSA )
; 2209 : 		{
; 2210 : 			gObj[iIndex].LevelUpPoint += 7;
; 2211 : 		}
; 2212 : 		else
; 2213 : 		{
; 2214 : 			gObj[iIndex].LevelUpPoint += 5;
; 2215 : 		}
; 2216 : #endif
; 2217 : 
; 2218 : 		if( gObj[iIndex].PlusStatQuestClear != false )

  0015e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00164	80 7c 37 7c 00	 cmp	 BYTE PTR [edi+esi+124], 0
  00169	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0016c	74 46		 je	 SHORT $LN10@ImperialGu

; 2219 : 		{
; 2220 : #if (ENABLE_CUSTOM_CLASSCALC == 1)
; 2221 : 			gObj[iIndex].LevelUpPoint += g_ClassCalc.GetLevelPoint(&gObj[iIndex], 0, 1);

  0016e	6a 01		 push	 1
  00170	6a 00		 push	 0
  00172	50		 push	 eax
  00173	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ClassCalc@@3VClassCalc@@A ; g_ClassCalc
  00178	e8 00 00 00 00	 call	 ?GetLevelPoint@ClassCalc@@QAEGPAUOBJECTSTRUCT@@EE@Z ; ClassCalc::GetLevelPoint
  0017d	0f b7 c0	 movzx	 eax, ax
  00180	01 84 37 98 00
	00 00		 add	 DWORD PTR [edi+esi+152], eax

; 2222 : #else
; 2223 : 			gObj[iIndex].LevelUpPoint++;
; 2224 : #endif
; 2225 : 			LogAddTD("[%s][%s] LevelUp PlusStatQuest Clear AddStat %d",

  00187	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0018d	ff b4 0f 98 00
	00 00		 push	 DWORD PTR [edi+ecx+152]
  00194	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00197	03 c7		 add	 eax, edi
  00199	50		 push	 eax
  0019a	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0019d	03 c7		 add	 eax, edi
  0019f	50		 push	 eax
  001a0	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@KDBPKGIM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5LevelUp?5PlusStatQuest?5C@
  001a5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001ab	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001b1	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@ImperialGu:

; 2226 : 				gObj[iIndex].AccountID, gObj[iIndex].Name, gObj[iIndex].LevelUpPoint);
; 2227 : 		}
; 2228 : 
; 2229 : 		gObj[iIndex].MaxLife += DCInfo.DefClass[gObj[iIndex].Class].LevelLife;

  001b4	0f b7 84 37 90
	00 00 00	 movzx	 eax, WORD PTR [edi+esi+144]
  001bc	69 c0 c8 0b 00
	00		 imul	 eax, eax, 3016
  001c2	f3 0f 10 80 10
	00 00 00	 movss	 xmm0, DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+16]
  001ca	f3 0f 58 84 37
	dc 00 00 00	 addss	 xmm0, DWORD PTR [edi+esi+220]
  001d3	f3 0f 11 84 37
	dc 00 00 00	 movss	 DWORD PTR [edi+esi+220], xmm0

; 2230 : 		gObj[iIndex].MaxMana += DCInfo.DefClass[gObj[iIndex].Class].LevelMana;

  001dc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001e2	0f b7 84 0f 90
	00 00 00	 movzx	 eax, WORD PTR [edi+ecx+144]
  001ea	69 c0 c8 0b 00
	00		 imul	 eax, eax, 3016
  001f0	f3 0f 10 80 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+28]
  001f8	f3 0f 58 84 0f
	f0 00 00 00	 addss	 xmm0, DWORD PTR [edi+ecx+240]
  00201	f3 0f 11 84 0f
	f0 00 00 00	 movss	 DWORD PTR [edi+ecx+240], xmm0

; 2231 : 		gObj[iIndex].Life = gObj[iIndex].MaxLife;

  0020a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00210	8b 84 0f dc 00
	00 00		 mov	 eax, DWORD PTR [edi+ecx+220]
  00217	89 84 0f d8 00
	00 00		 mov	 DWORD PTR [edi+ecx+216], eax

; 2232 : 		gObj[iIndex].Mana = gObj[iIndex].MaxMana;

  0021e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00224	8b 84 0f f0 00
	00 00		 mov	 eax, DWORD PTR [edi+ecx+240]
  0022b	89 84 0f ec 00
	00 00		 mov	 DWORD PTR [edi+ecx+236], eax

; 2233 : 		gObjNextExpCal(&gObj[iIndex]);

  00232	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00237	03 c7		 add	 eax, edi
  00239	50		 push	 eax
  0023a	e8 00 00 00 00	 call	 ?gObjNextExpCal@@YAXPAUOBJECTSTRUCT@@@Z ; gObjNextExpCal

; 2234 : 		gObjSetBP(gObj[iIndex].m_Index);

  0023f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00244	ff 34 07	 push	 DWORD PTR [edi+eax]
  00247	e8 00 00 00 00	 call	 ?gObjSetBP@@YAXH@Z	; gObjSetBP

; 2235 : 
; 2236 : 		GCLevelUpMsgSend(gObj[iIndex].m_Index, 1);

  0024c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00251	6a 01		 push	 1
  00253	ff 34 07	 push	 DWORD PTR [edi+eax]
  00256	e8 00 00 00 00	 call	 ?GCLevelUpMsgSend@@YAXHH@Z ; GCLevelUpMsgSend

; 2237 : 
; 2238 : //		gObjCalcMaxLifePower(gObj[iIndex].m_Index);
; 2239 : 		LogAddTD(lMsg.Get(MSGGET(2, 8)), gObj[iIndex].AccountID, gObj[iIndex].Name, gObj[iIndex].Level);

  0025b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00261	83 c4 10	 add	 esp, 16			; 00000010H
  00264	0f bf 84 0f 96
	00 00 00	 movsx	 eax, WORD PTR [edi+ecx+150]
  0026c	50		 push	 eax
  0026d	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00270	03 c7		 add	 eax, edi
  00272	50		 push	 eax
  00273	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00276	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0027b	03 c7		 add	 eax, edi
  0027d	50		 push	 eax
  0027e	68 08 02 00 00	 push	 520			; 00000208H
  00283	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00288	50		 push	 eax
  00289	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2240 : 
; 2241 : 		if( gObj[iIndex].Level == 400 && gObj[iIndex].PartyNumber >= 0 )

  0028f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00295	b8 90 01 00 00	 mov	 eax, 400		; 00000190H
  0029a	83 c4 10	 add	 esp, 16			; 00000010H
  0029d	66 39 84 0f 96
	00 00 00	 cmp	 WORD PTR [edi+ecx+150], ax
  002a5	0f 85 b2 00 00
	00		 jne	 $LN11@ImperialGu
  002ab	8b b4 0f 0c 06
	00 00		 mov	 esi, DWORD PTR [edi+ecx+1548]
  002b2	85 f6		 test	 esi, esi
  002b4	0f 88 a3 00 00
	00		 js	 $LN11@ImperialGu

; 2242 : 		{
; 2243 : 			int partynum = gObj[iIndex].PartyNumber;
; 2244 : 			char partyLog[256];
; 2245 : 			sprintf(partyLog,"400 LevelUp (%s)(%s) Party ",gObj[iIndex].AccountID,gObj[iIndex].Name);

  002ba	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  002bd	03 c7		 add	 eax, edi
  002bf	50		 push	 eax
  002c0	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  002c3	03 c7		 add	 eax, edi
  002c5	50		 push	 eax
  002c6	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _partyLog$1[ebp]
  002cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DJAOLMAF@400?5LevelUp?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Party?5?$AA@
  002d1	50		 push	 eax
  002d2	e8 00 00 00 00	 call	 _sprintf
  002d7	8b c6		 mov	 eax, esi
  002d9	83 c4 10	 add	 esp, 16			; 00000010H
  002dc	c1 e0 04	 shl	 eax, 4
  002df	2b c6		 sub	 eax, esi
  002e1	8d 1c 85 0c 00
	00 00		 lea	 ebx, DWORD PTR ?gParty@@3VPartyClass@@A[eax*4+12]
  002e8	b8 05 00 00 00	 mov	 eax, 5
  002ed	89 85 f8 fe ff
	ff		 mov	 DWORD PTR tv588[ebp], eax
$LL4@ImperialGu:

; 2249 : 			{
; 2250 : 				number = gParty.m_PartyS[partynum].Number[n];

  002f3	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 2251 : 
; 2252 : 				if( number >= 0  )

  002f5	85 c9		 test	 ecx, ecx
  002f7	78 46		 js	 SHORT $LN2@ImperialGu

; 2253 : 				{
; 2254 : 					int noffSet = strlen(partyLog);

  002f9	8d b5 fc fe ff
	ff		 lea	 esi, DWORD PTR _partyLog$1[ebp]
  002ff	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
$LL21@ImperialGu:
  00302	8a 06		 mov	 al, BYTE PTR [esi]
  00304	46		 inc	 esi
  00305	84 c0		 test	 al, al
  00307	75 f9		 jne	 SHORT $LL21@ImperialGu
  00309	2b f2		 sub	 esi, edx

; 2255 : 					sprintf(&partyLog[noffSet],",(%s)(%s) ",gObj[number].AccountID,gObj[number].Name);

  0030b	69 d1 40 27 00
	00		 imul	 edx, ecx, 10048
  00311	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00317	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0031a	03 c2		 add	 eax, edx
  0031c	50		 push	 eax
  0031d	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00320	03 c2		 add	 eax, edx
  00322	50		 push	 eax
  00323	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _partyLog$1[ebp]
  00329	03 c6		 add	 eax, esi
  0032b	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MNKEEMGH@?0?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5?$AA@
  00330	50		 push	 eax
  00331	e8 00 00 00 00	 call	 _sprintf
  00336	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR tv588[ebp]
  0033c	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@ImperialGu:

; 2246 : 			int number;
; 2247 : 
; 2248 : 			for( int n = 0; n<MAX_USER_IN_PARTY; n++ )

  0033f	83 c3 04	 add	 ebx, 4
  00342	83 e8 01	 sub	 eax, 1
  00345	89 85 f8 fe ff
	ff		 mov	 DWORD PTR tv588[ebp], eax
  0034b	75 a6		 jne	 SHORT $LL4@ImperialGu

; 2256 : 				}
; 2257 : 			}
; 2258 : 			LogAddTD(partyLog);

  0034d	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _partyLog$1[ebp]
  00353	50		 push	 eax
  00354	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0035a	83 c4 04	 add	 esp, 4
$LN11@ImperialGu:

; 2259 : 		}
; 2260 : 	}
; 2261 : 	
; 2262 : 	GJSetCharacterInfo(&gObj[iIndex], gObj[iIndex].m_Index, 0);

  0035d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00363	03 cf		 add	 ecx, edi
  00365	6a 01		 push	 1
  00367	6a 00		 push	 0
  00369	ff 31		 push	 DWORD PTR [ecx]
  0036b	51		 push	 ecx
  0036c	e8 00 00 00 00	 call	 ?GJSetCharacterInfo@@YAXPAUOBJECTSTRUCT@@HHH@Z ; GJSetCharacterInfo

; 2263 : 	return iLEFT_EXP;

  00371	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _iLEFT_EXP$1$[ebp]
  00377	83 c4 10	 add	 esp, 16			; 00000010H
  0037a	5f		 pop	 edi
  0037b	5b		 pop	 ebx
  0037c	5e		 pop	 esi

; 2264 : }

  0037d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00380	33 cd		 xor	 ecx, ebp
  00382	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00387	8b e5		 mov	 esp, ebp
  00389	5d		 pop	 ebp
  0038a	c2 08 00	 ret	 8
$LN20@ImperialGu:
  0038d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00390	33 c0		 xor	 eax, eax
  00392	33 cd		 xor	 ecx, ebp
  00394	5e		 pop	 esi
  00395	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0039a	8b e5		 mov	 esp, ebp
  0039c	5d		 pop	 ebp
  0039d	c2 08 00	 ret	 8
?ImperialGuardianLevelUp@CImperialGuardian@@QAEHHH@Z ENDP ; CImperialGuardian::ImperialGuardianLevelUp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?GCSendServerMsgAll@CImperialGuardian@@QAEXHPAD@Z
_TEXT	SEGMENT
_vtTemp$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
_nZoneIndex$ = 8					; size = 4
_szMsg$ = 12						; size = 4
?GCSendServerMsgAll@CImperialGuardian@@QAEXHPAD@Z PROC	; CImperialGuardian::GCSendServerMsgAll, COMDAT
; _this$ = ecx

; 2158 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GCSendServerMsgAll@CImperialGuardian@@QAEXHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2159 : 	std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  00028	6b 45 08 64	 imul	 eax, DWORD PTR _nZoneIndex$[ebp], 100
  0002c	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0002f	03 c1		 add	 eax, ecx
  00031	8d 4d e8	 lea	 ecx, DWORD PTR _vtTemp$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  0003a	8b 5d e8	 mov	 ebx, DWORD PTR _vtTemp$[ebp]
  0003d	8b f3		 mov	 esi, ebx

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0003f	8b 7d ec	 mov	 edi, DWORD PTR _vtTemp$[ebp+4]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2159 : 	std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00049	3b df		 cmp	 ebx, edi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2162 : 	for( ; it != vtTemp.end(); it++)

  0004b	74 2c		 je	 SHORT $LN3@GCSendServ
  0004d	0f 1f 00	 npad	 3
$LL4@GCSendServ:

; 2163 : 	{
; 2164 : 		int nResult = *it;

  00050	8b 16		 mov	 edx, DWORD PTR [esi]

; 2165 : 
; 2166 : 		if( gObj[nResult].Connected > 0 )

  00052	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00057	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  0005d	83 7c 01 04 00	 cmp	 DWORD PTR [ecx+eax+4], 0
  00062	7e 0e		 jle	 SHORT $LN2@GCSendServ

; 2167 : 		{
; 2168 : 			GCServerMsgStringSend(szMsg,nResult,0);

  00064	6a 00		 push	 0
  00066	52		 push	 edx
  00067	ff 75 0c	 push	 DWORD PTR _szMsg$[ebp]
  0006a	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@GCSendServ:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  00072	83 c6 04	 add	 esi, 4

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00075	3b f7		 cmp	 esi, edi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2162 : 	for( ; it != vtTemp.end(); it++)

  00077	75 d7		 jne	 SHORT $LL4@GCSendServ
$LN3@GCSendServ:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00079	85 db		 test	 ebx, ebx
  0007b	74 55		 je	 SHORT $LN81@GCSendServ

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0007d	8b 45 f0	 mov	 eax, DWORD PTR _vtTemp$[ebp+8]
  00080	2b c3		 sub	 eax, ebx
  00082	c1 f8 02	 sar	 eax, 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00085	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0008a	76 05		 jbe	 SHORT $LN148@GCSendServ
  0008c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN193@GCSendServ:
$LN148@GCSendServ:

; 101  : 	const size_t _User_size = _Count * _Sz;

  00091	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00094	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00099	72 2e		 jb	 SHORT $LN149@GCSendServ

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0009b	f6 c3 1f	 test	 bl, 31			; 0000001fH
  0009e	74 05		 je	 SHORT $LN150@GCSendServ
  000a0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN194@GCSendServ:
$LN150@GCSendServ:

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  000a5	8b 43 fc	 mov	 eax, DWORD PTR [ebx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  000a8	3b c3		 cmp	 eax, ebx
  000aa	72 05		 jb	 SHORT $LN151@GCSendServ
  000ac	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN195@GCSendServ:
$LN151@GCSendServ:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  000b1	2b d8		 sub	 ebx, eax
  000b3	83 fb 04	 cmp	 ebx, 4
  000b6	73 05		 jae	 SHORT $LN152@GCSendServ
  000b8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN196@GCSendServ:
$LN152@GCSendServ:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  000bd	83 fb 23	 cmp	 ebx, 35			; 00000023H
  000c0	76 05		 jbe	 SHORT $LN153@GCSendServ
  000c2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN197@GCSendServ:
$LN153@GCSendServ:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000c7	8b d8		 mov	 ebx, eax
$LN149@GCSendServ:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  000c9	53		 push	 ebx
  000ca	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000cf	83 c4 04	 add	 esp, 4
$LN81@GCSendServ:
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2171 : }

  000d2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000dc	59		 pop	 ecx
  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
$LN192@GCSendServ:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GCSendServerMsgAll@CImperialGuardian@@QAEXHPAD@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _vtTemp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$?GCSendServerMsgAll@CImperialGuardian@@QAEXHPAD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GCSendServerMsgAll@CImperialGuardian@@QAEXHPAD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GCSendServerMsgAll@CImperialGuardian@@QAEXHPAD@Z ENDP	; CImperialGuardian::GCSendServerMsgAll
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?GetZoneInfo@CImperialGuardian@@QAE?AU_stZoneInfo@@H@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_nZoneIndex$ = 12					; size = 4
?GetZoneInfo@CImperialGuardian@@QAE?AU_stZoneInfo@@H@Z PROC ; CImperialGuardian::GetZoneInfo, COMDAT
; _this$ = ecx

; 2090 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2091 : 	return this->m_ZoneInfo[nZoneIndex];

  00004	6b 45 0c 64	 imul	 eax, DWORD PTR _nZoneIndex$[ebp], 100
  00008	83 c1 14	 add	 ecx, 20			; 00000014H
  0000b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00012	03 c1		 add	 eax, ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??0_stZoneInfo@@QAE@ABU0@@Z
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2092 : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?GetZoneInfo@CImperialGuardian@@QAE?AU_stZoneInfo@@H@Z ENDP ; CImperialGuardian::GetZoneInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?DestroyGate@CImperialGuardian@@QAEXHHH@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_nSize$1$ = -4						; size = 4
_nZoneIndex$ = 8					; size = 4
_nIndex$ = 12						; size = 4
_nTargetIndex$ = 16					; size = 4
?DestroyGate@CImperialGuardian@@QAEXHHH@Z PROC		; CImperialGuardian::DestroyGate, COMDAT
; _this$ = ecx

; 2140 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 2141 : 	this->SetGateBlockState(gObj[nIndex].MapNumber,nZoneIndex,gObj[nIndex].X,gObj[nIndex].Y,0,gObj[nIndex].Dir);

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _nIndex$[ebp]
  0000a	69 d3 40 27 00
	00		 imul	 edx, ebx, 10048
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b f1		 mov	 esi, ecx
  00014	89 75 f8	 mov	 DWORD PTR _this$1$[ebp], esi
  00017	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001d	0f b6 82 22 01
	00 00		 movzx	 eax, BYTE PTR [edx+290]
  00024	50		 push	 eax
  00025	0f b6 82 21 01
	00 00		 movzx	 eax, BYTE PTR [edx+289]
  0002c	6a 00		 push	 0
  0002e	50		 push	 eax
  0002f	0f b6 82 20 01
	00 00		 movzx	 eax, BYTE PTR [edx+288]
  00036	50		 push	 eax
  00037	8b 45 08	 mov	 eax, DWORD PTR _nZoneIndex$[ebp]
  0003a	50		 push	 eax
  0003b	0f b6 82 23 01
	00 00		 movzx	 eax, BYTE PTR [edx+291]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?SetGateBlockState@CImperialGuardian@@QAEXHHHHHH@Z ; CImperialGuardian::SetGateBlockState

; 2142 : 
; 2143 : 	int nSize = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex.size();

  00048	8b 55 08	 mov	 edx, DWORD PTR _nZoneIndex$[ebp]
  0004b	6b fa 64	 imul	 edi, edx, 100
  0004e	03 fe		 add	 edi, esi

; 2145 : 	for( int i = 0; i < nSize; i++)

  00050	33 f6		 xor	 esi, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00052	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  00055	2b 47 3c	 sub	 eax, DWORD PTR [edi+60]
  00058	c1 f8 02	 sar	 eax, 2
  0005b	89 45 fc	 mov	 DWORD PTR _nSize$1$[ebp], eax
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2145 : 	for( int i = 0; i < nSize; i++)

  0005e	85 c0		 test	 eax, eax
  00060	7e 29		 jle	 SHORT $LN3@DestroyGat
$LL4@DestroyGat:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00062	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  00065	8b 4f 3c	 mov	 ecx, DWORD PTR [edi+60]
  00068	2b c1		 sub	 eax, ecx
  0006a	c1 f8 02	 sar	 eax, 2

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)

  0006d	3b c6		 cmp	 eax, esi
  0006f	0f 86 a1 00 00
	00		 jbe	 $LN291@DestroyGat
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2148 : 		this->GCSendCastleGateInfo(nIndex,nZoneIndex,nUserIndex);

  00075	ff 34 b1	 push	 DWORD PTR [ecx+esi*4]
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0007b	52		 push	 edx
  0007c	53		 push	 ebx
  0007d	e8 00 00 00 00	 call	 ?GCSendCastleGateInfo@CImperialGuardian@@QAEXHHH@Z ; CImperialGuardian::GCSendCastleGateInfo
  00082	8b 55 08	 mov	 edx, DWORD PTR _nZoneIndex$[ebp]
  00085	46		 inc	 esi
  00086	3b 75 fc	 cmp	 esi, DWORD PTR _nSize$1$[ebp]
  00089	7c d7		 jl	 SHORT $LL4@DestroyGat
$LN3@DestroyGat:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  0008b	8b 47 70	 mov	 eax, DWORD PTR [edi+112]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2151 : 	this->m_ZoneInfo[nZoneIndex].m_vtDestroyedGate.push_back(nIndex);

  0008e	8d 77 6c	 lea	 esi, DWORD PTR [edi+108]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00091	8d 4d 0c	 lea	 ecx, DWORD PTR _nIndex$[ebp]
  00094	3b c8		 cmp	 ecx, eax
  00096	73 2e		 jae	 SHORT $LN65@DestroyGat
  00098	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0009a	8d 55 0c	 lea	 edx, DWORD PTR _nIndex$[ebp]
  0009d	3b ca		 cmp	 ecx, edx
  0009f	77 25		 ja	 SHORT $LN65@DestroyGat

; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  000a1	8b fa		 mov	 edi, edx
  000a3	2b f9		 sub	 edi, ecx
  000a5	c1 ff 02	 sar	 edi, 2

; 1278 : 			if (this->_Mylast() == this->_Myend())

  000a8	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  000ab	75 09		 jne	 SHORT $LN67@DestroyGat

; 1279 : 				_Reserve(1);

  000ad	6a 01		 push	 1
  000af	8b ce		 mov	 ecx, esi
  000b1	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN67@DestroyGat:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  000b6	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000b9	85 c9		 test	 ecx, ecx
  000bb	74 20		 je	 SHORT $LN268@DestroyGat
  000bd	8b 06		 mov	 eax, DWORD PTR [esi]
  000bf	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  000c2	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1285 : 		else

  000c4	eb 17		 jmp	 SHORT $LN268@DestroyGat
$LN65@DestroyGat:

; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  000c6	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  000c9	75 09		 jne	 SHORT $LN68@DestroyGat

; 1288 : 				_Reserve(1);

  000cb	6a 01		 push	 1
  000cd	8b ce		 mov	 ecx, esi
  000cf	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN68@DestroyGat:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  000d4	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000d7	85 c0		 test	 eax, eax
  000d9	74 02		 je	 SHORT $LN268@DestroyGat
  000db	89 18		 mov	 DWORD PTR [eax], ebx
$LN268@DestroyGat:
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2152 : 	LogAddTD("[IMPERIALGUARDIAN] DestroyGate -> [ZONE]:%d, [AccountID]:%s, [NAME]:%s, [GATE INDEX]:%d, [USER COUNT]:%d ",

  000dd	69 4d 10 40 27
	00 00		 imul	 ecx, DWORD PTR _nTargetIndex$[ebp], 10048
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  000e4	83 46 04 04	 add	 DWORD PTR [esi+4], 4
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2152 : 	LogAddTD("[IMPERIALGUARDIAN] DestroyGate -> [ZONE]:%d, [AccountID]:%s, [NAME]:%s, [GATE INDEX]:%d, [USER COUNT]:%d ",

  000e8	ff 75 fc	 push	 DWORD PTR _nSize$1$[ebp]
  000eb	53		 push	 ebx
  000ec	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f2	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  000f5	50		 push	 eax
  000f6	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  000f9	50		 push	 eax
  000fa	8b 45 08	 mov	 eax, DWORD PTR _nZoneIndex$[ebp]
  000fd	40		 inc	 eax
  000fe	50		 push	 eax
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@NPJHELF@?$FLIMPERIALGUARDIAN?$FN?5DestroyGate?5?9@
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0010a	83 c4 18	 add	 esp, 24			; 00000018H
  0010d	5f		 pop	 edi
  0010e	5e		 pop	 esi
  0010f	5b		 pop	 ebx

; 2155 : }

  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c2 0c 00	 ret	 12			; 0000000cH
$LN291@DestroyGat:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1789 : 		_Xout_of_range("invalid vector<T> subscript");

  00116	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
  0011b	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN292@DestroyGat:
$LN290@DestroyGat:
  00120	cc		 int	 3
?DestroyGate@CImperialGuardian@@QAEXHHH@Z ENDP		; CImperialGuardian::DestroyGate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?SetTargetMoveAllMonster@CImperialGuardian@@QAEXHH@Z
_TEXT	SEGMENT
tv394 = 8						; size = 4
_nZoneIndex$ = 8					; size = 4
_nTargetNumber$ = 12					; size = 4
?SetTargetMoveAllMonster@CImperialGuardian@@QAEXHH@Z PROC ; CImperialGuardian::SetTargetMoveAllMonster, COMDAT
; _this$ = ecx

; 2095 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2096 : 	std::vector<_stMonsterIndexInfo>::iterator it = this->m_ZoneInfo[nZoneIndex].m_vtMonsterIndexInfo.begin();

  00003	6b 45 08 64	 imul	 eax, DWORD PTR _nZoneIndex$[ebp], 100
  00007	03 c1		 add	 eax, ecx
  00009	53		 push	 ebx

; 2099 : 	if( !OBJMAX_RANGE(nTargetNumber) )

  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR _nTargetNumber$[ebp]
  0000d	89 45 08	 mov	 DWORD PTR tv394[ebp], eax
  00010	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  00011	8b 70 30	 mov	 esi, DWORD PTR [eax+48]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2099 : 	if( !OBJMAX_RANGE(nTargetNumber) )

  00014	85 db		 test	 ebx, ebx
  00016	0f 88 b4 00 00
	00		 js	 $LN88@SetTargetM
  0001c	33 c0		 xor	 eax, eax
  0001e	81 fb eb 2c 00
	00		 cmp	 ebx, 11499		; 00002cebH
  00024	0f 9e c0	 setle	 al
  00027	85 c0		 test	 eax, eax
  00029	0f 84 a1 00 00
	00		 je	 $LN88@SetTargetM

; 2102 : 		return;
; 2103 : 	}
; 2104 : 
; 2105 : 	if( gObj[nTargetNumber].Connected < PLAYER_CONNECTED )

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00034	69 cb 40 27 00
	00		 imul	 ecx, ebx, 10048
  0003a	83 7c 01 04 01	 cmp	 DWORD PTR [ecx+eax+4], 1
  0003f	7d 0a		 jge	 SHORT $LN6@SetTargetM

; 2106 : 	{
; 2107 : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  00041	68 3b 08 00 00	 push	 2107			; 0000083bH

; 2108 : 		return;

  00046	e9 8a 00 00 00	 jmp	 $LN90@SetTargetM
$LN6@SetTargetM:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0004b	8b 45 08	 mov	 eax, DWORD PTR tv394[ebp]
  0004e	3b 70 34	 cmp	 esi, DWORD PTR [eax+52]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2111 : 	for( ; it != this->m_ZoneInfo[nZoneIndex].m_vtMonsterIndexInfo.end(); it++)

  00051	0f 84 91 00 00
	00		 je	 $LN3@SetTargetM
  00057	57		 push	 edi
$LL4@SetTargetM:

; 2112 : 	{
; 2113 : 		_stMonsterIndexInfo stMonsterIndex = *it;
; 2114 : 
; 2115 : 		if( stMonsterIndex.m_bLiveMonster == 1)

  00058	80 7e 04 01	 cmp	 BYTE PTR [esi+4], 1
  0005c	8b 06		 mov	 eax, DWORD PTR [esi]
  0005e	75 5e		 jne	 SHORT $LN2@SetTargetM

; 2116 : 		{
; 2117 : 			LPOBJ lpObj = &gObj[stMonsterIndex.m_iIndex];

  00060	69 f8 40 27 00
	00		 imul	 edi, eax, 10048
  00066	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 2118 : 			LPOBJ lpTargetObj = &gObj[lpObj->TargetNumber];
; 2119 : 
; 2120 : 			if( lpObj->TargetNumber == -1 && lpObj->m_ActState.Emotion )

  0006c	0f b7 8f 38 06
	00 00		 movzx	 ecx, WORD PTR [edi+1592]
  00073	66 83 f9 ff	 cmp	 cx, -1
  00077	75 0a		 jne	 SHORT $LN8@SetTargetM
  00079	8b 87 c8 01 00
	00		 mov	 eax, DWORD PTR [edi+456]
  0007f	a8 f0		 test	 al, 240			; 000000f0H
  00081	75 1f		 jne	 SHORT $LN91@SetTargetM
$LN8@SetTargetM:

; 2121 : 			{
; 2122 : 				lpObj->TargetNumber = nTargetNumber;
; 2123 : 				lpObj->m_ActState.Emotion = 1;
; 2124 : 				lpObj->m_ActState.EmotionCount = 50;
; 2125 : 			}
; 2126 : 			else if( lpObj->TargetNumber != nTargetNumber )

  00083	0f bf c1	 movsx	 eax, cx
  00086	3b c3		 cmp	 eax, ebx
  00088	74 34		 je	 SHORT $LN2@SetTargetM

; 2127 : 			{
; 2128 : 				if( rand()%100 < 30 )

  0008a	e8 00 00 00 00	 call	 _rand
  0008f	99		 cdq
  00090	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00095	f7 f9		 idiv	 ecx
  00097	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  0009a	7d 22		 jge	 SHORT $LN2@SetTargetM

; 2129 : 				{
; 2130 : 					lpObj->TargetNumber = nTargetNumber;
; 2131 : 					lpObj->m_ActState.Emotion = 1;

  0009c	8b 87 c8 01 00
	00		 mov	 eax, DWORD PTR [edi+456]
$LN91@SetTargetM:
  000a2	25 1f ff ff ff	 and	 eax, -225		; ffffff1fH
  000a7	66 89 9f 38 06
	00 00		 mov	 WORD PTR [edi+1592], bx
  000ae	83 c8 10	 or	 eax, 16			; 00000010H
  000b1	89 87 c8 01 00
	00		 mov	 DWORD PTR [edi+456], eax

; 2132 : 					lpObj->m_ActState.EmotionCount = 50;

  000b7	c6 87 c9 01 00
	00 32		 mov	 BYTE PTR [edi+457], 50	; 00000032H
$LN2@SetTargetM:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000be	8b 45 08	 mov	 eax, DWORD PTR tv394[ebp]

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  000c1	83 c6 08	 add	 esi, 8

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000c4	3b 70 34	 cmp	 esi, DWORD PTR [eax+52]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2111 : 	for( ; it != this->m_ZoneInfo[nZoneIndex].m_vtMonsterIndexInfo.end(); it++)

  000c7	75 8f		 jne	 SHORT $LL4@SetTargetM
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx

; 2133 : 				}
; 2134 : 			}
; 2135 : 		}
; 2136 : 	}
; 2137 : }

  000cc	5d		 pop	 ebp
  000cd	c2 08 00	 ret	 8
$LN88@SetTargetM:

; 2100 : 	{
; 2101 : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  000d0	68 35 08 00 00	 push	 2101			; 00000835H
$LN90@SetTargetM:
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@SetTargetM:
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx

; 2133 : 				}
; 2134 : 			}
; 2135 : 		}
; 2136 : 	}
; 2137 : }

  000ea	5d		 pop	 ebp
  000eb	c2 08 00	 ret	 8
?SetTargetMoveAllMonster@CImperialGuardian@@QAEXHH@Z ENDP ; CImperialGuardian::SetTargetMoveAllMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?WarpZoneGM@CImperialGuardian@@QAEXHH@Z
_TEXT	SEGMENT
_nUserIndex$ = 8					; size = 4
_nZoneIndex$ = 12					; size = 4
?WarpZoneGM@CImperialGuardian@@QAEXHH@Z PROC		; CImperialGuardian::WarpZoneGM, COMDAT
; _this$ = ecx

; 2082 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2083 : 	if( this->m_wCheatMode )

  00003	66 83 79 04 00	 cmp	 WORD PTR [ecx+4], 0
  00008	74 06		 je	 SHORT $LN2@WarpZoneGM

; 2086 : 	}
; 2087 : }

  0000a	5d		 pop	 ebp

; 2084 : 	{
; 2085 : 		this->CGEnterPortal(nUserIndex,nZoneIndex);

  0000b	e9 00 00 00 00	 jmp	 ?CGEnterPortal@CImperialGuardian@@QAEXHH@Z ; CImperialGuardian::CGEnterPortal
$LN2@WarpZoneGM:

; 2086 : 	}
; 2087 : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?WarpZoneGM@CImperialGuardian@@QAEXHH@Z ENDP		; CImperialGuardian::WarpZoneGM
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?SetCheatModeGM@CImperialGuardian@@QAEXF@Z
_TEXT	SEGMENT
_nCheatMode$ = 8					; size = 2
?SetCheatModeGM@CImperialGuardian@@QAEXF@Z PROC		; CImperialGuardian::SetCheatModeGM, COMDAT
; _this$ = ecx

; 2077 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2078 : 	this->m_wCheatMode = nCheatMode;

  00003	66 8b 45 08	 mov	 ax, WORD PTR _nCheatMode$[ebp]
  00007	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 2079 : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?SetCheatModeGM@CImperialGuardian@@QAEXF@Z ENDP		; CImperialGuardian::SetCheatModeGM
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?SetDayOfWeekGM@CImperialGuardian@@QAEXH@Z
_TEXT	SEGMENT
_nDayOfWeeks$ = 8					; size = 4
?SetDayOfWeekGM@CImperialGuardian@@QAEXH@Z PROC		; CImperialGuardian::SetDayOfWeekGM, COMDAT
; _this$ = ecx

; 2072 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2073 : 	this->m_wDayOfWeek = nDayOfWeeks;

  00003	66 8b 45 08	 mov	 ax, WORD PTR _nDayOfWeeks$[ebp]
  00007	66 89 81 a4 01
	00 00		 mov	 WORD PTR [ecx+420], ax

; 2074 : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?SetDayOfWeekGM@CImperialGuardian@@QAEXH@Z ENDP		; CImperialGuardian::SetDayOfWeekGM
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?SetAtackAbleState@CImperialGuardian@@QAEXHH_N@Z
_TEXT	SEGMENT
_nZoneIndex$ = 8					; size = 4
_nMonsterClass$ = 12					; size = 4
_bState$ = 16						; size = 1
?SetAtackAbleState@CImperialGuardian@@QAEXHH_N@Z PROC	; CImperialGuardian::SetAtackAbleState, COMDAT
; _this$ = ecx

; 2045 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2046 : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _nZoneIndex$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	85 d2		 test	 edx, edx
  0000b	78 7f		 js	 SHORT $LN119@SetAtackAb
  0000d	33 c0		 xor	 eax, eax
  0000f	83 fa 03	 cmp	 edx, 3
  00012	0f 9e c0	 setle	 al
  00015	85 c0		 test	 eax, eax
  00017	74 73		 je	 SHORT $LN119@SetAtackAb

; 2052 : 	if( this->m_ZoneInfo[nZoneIndex].m_vtMonsterIndexInfo.size() < 1 )

  00019	56		 push	 esi
  0001a	6b f2 64	 imul	 esi, edx, 100
  0001d	03 f1		 add	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0001f	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00022	2b 46 30	 sub	 eax, DWORD PTR [esi+48]
  00025	c1 f8 03	 sar	 eax, 3
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2052 : 	if( this->m_ZoneInfo[nZoneIndex].m_vtMonsterIndexInfo.size() < 1 )

  00028	83 f8 01	 cmp	 eax, 1
  0002b	73 1f		 jae	 SHORT $LN6@SetAtackAb

; 2053 : 	{
; 2054 : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  0002d	68 06 08 00 00	 push	 2054			; 00000806H
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN120@SetAtackAb:
  00045	5e		 pop	 esi

; 2068 : 	}
; 2069 : }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
$LN6@SetAtackAb:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  0004c	8b 46 30	 mov	 eax, DWORD PTR [esi+48]

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  0004f	3b 46 34	 cmp	 eax, DWORD PTR [esi+52]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2061 : 	for( ; it != this->m_ZoneInfo[nZoneIndex].m_vtMonsterIndexInfo.end(); it++)

  00052	74 f1		 je	 SHORT $LN120@SetAtackAb
  00054	53		 push	 ebx
  00055	8a 5d 10	 mov	 bl, BYTE PTR _bState$[ebp]
  00058	57		 push	 edi
  00059	8b 7d 0c	 mov	 edi, DWORD PTR _nMonsterClass$[ebp]
  0005c	0f 1f 40 00	 npad	 4
$LL4@SetAtackAb:

; 2062 : 	{
; 2063 : 		_stMonsterIndexInfo stMonsterIndex = *it;
; 2064 : 		lpObj = &gObj[stMonsterIndex.m_iIndex];

  00060	69 10 40 27 00
	00		 imul	 edx, DWORD PTR [eax], 10048

; 2065 : 
; 2066 : 		if( lpObj->Class == nMonsterClass )

  00066	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006c	0f b7 8c 0a 90
	00 00 00	 movzx	 ecx, WORD PTR [edx+ecx+144]
  00074	3b cf		 cmp	 ecx, edi
  00076	75 03		 jne	 SHORT $LN2@SetAtackAb

; 2067 : 			it->m_bAttack = bState;

  00078	88 58 05	 mov	 BYTE PTR [eax+5], bl
$LN2@SetAtackAb:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  0007b	83 c0 08	 add	 eax, 8

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  0007e	3b 46 34	 cmp	 eax, DWORD PTR [esi+52]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2061 : 	for( ; it != this->m_ZoneInfo[nZoneIndex].m_vtMonsterIndexInfo.end(); it++)

  00081	75 dd		 jne	 SHORT $LL4@SetAtackAb
  00083	5f		 pop	 edi
  00084	5b		 pop	 ebx
  00085	5e		 pop	 esi

; 2068 : 	}
; 2069 : }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 0c 00	 ret	 12			; 0000000cH
$LN119@SetAtackAb:

; 2047 : 	{
; 2048 : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  0008c	68 00 08 00 00	 push	 2048			; 00000800H
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2068 : 	}
; 2069 : }

  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c2 0c 00	 ret	 12			; 0000000cH
?SetAtackAbleState@CImperialGuardian@@QAEXHH_N@Z ENDP	; CImperialGuardian::SetAtackAbleState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?IsAttackAbleMonster@CImperialGuardian@@QAE_NH@Z
_TEXT	SEGMENT
_nMonsterIndex$ = 8					; size = 4
?IsAttackAbleMonster@CImperialGuardian@@QAE_NH@Z PROC	; CImperialGuardian::IsAttackAbleMonster, COMDAT
; _this$ = ecx

; 2028 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 2029 : 	for(int i = 0; i < IMPERIAL_GUARDIAN_MAXZONE; i++)

  00006	33 ff		 xor	 edi, edi
  00008	8d 71 30	 lea	 esi, DWORD PTR [ecx+48]
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@IsAttackAb:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00010	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2033 : 		for( int k = 0; k < nSize; k++)

  00013	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00015	8b 16		 mov	 edx, DWORD PTR [esi]
  00017	2b ca		 sub	 ecx, edx
  00019	c1 f9 03	 sar	 ecx, 3
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2033 : 		for( int k = 0; k < nSize; k++)

  0001c	85 c9		 test	 ecx, ecx
  0001e	7e 15		 jle	 SHORT $LN2@IsAttackAb
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1206 : 		if (size() <= _Pos)

  00020	3b c8		 cmp	 ecx, eax
$LN80@IsAttackAb:
  00022	76 2c		 jbe	 SHORT $LN81@IsAttackAb
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 2037 : 			if( monsterInfo.m_iIndex == nMonsterIndex )

  00024	8b 5d 08	 mov	 ebx, DWORD PTR _nMonsterIndex$[ebp]
  00027	39 1c c2	 cmp	 DWORD PTR [edx+eax*8], ebx
  0002a	8b 5c c2 04	 mov	 ebx, DWORD PTR [edx+eax*8+4]
  0002e	74 17		 je	 SHORT $LN71@IsAttackAb

; 2033 : 		for( int k = 0; k < nSize; k++)

  00030	40		 inc	 eax
  00031	3b c8		 cmp	 ecx, eax
  00033	7f ed		 jg	 SHORT $LN80@IsAttackAb
$LN2@IsAttackAb:

; 2029 : 	for(int i = 0; i < IMPERIAL_GUARDIAN_MAXZONE; i++)

  00035	47		 inc	 edi
  00036	83 c6 64	 add	 esi, 100		; 00000064H
  00039	83 ff 04	 cmp	 edi, 4
  0003c	7c d2		 jl	 SHORT $LL4@IsAttackAb

; 2039 : 		}
; 2040 : 	}
; 2041 : 	return false;

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	32 c0		 xor	 al, al
  00042	5b		 pop	 ebx

; 2042 : }

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN71@IsAttackAb:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 2038 : 				return monsterInfo.m_bAttack;

  00049	8a c7		 mov	 al, bh
  0004b	5b		 pop	 ebx

; 2042 : }

  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
$LN81@IsAttackAb:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1789 : 		_Xout_of_range("invalid vector<T> subscript");

  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
  00055	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN82@IsAttackAb:
$LN79@IsAttackAb:
  0005a	cc		 int	 3
?IsAttackAbleMonster@CImperialGuardian@@QAE_NH@Z ENDP	; CImperialGuardian::IsAttackAbleMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?CheckFullSecromicon@CImperialGuardian@@QAEHH@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?CheckFullSecromicon@CImperialGuardian@@QAEHH@Z PROC	; CImperialGuardian::CheckFullSecromicon, COMDAT
; _this$ = ecx

; 1985 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1986 : 	if( !OBJMAX_RANGE(nIndex) )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	0f 88 db 00 00
	00		 js	 $LN27@CheckFullS
  0000e	33 c0		 xor	 eax, eax
  00010	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	0f 84 c8 00 00
	00		 je	 $LN27@CheckFullS

; 1990 : 	}
; 1991 : 
; 1992 : 	LPOBJ lpObj = &gObj[nIndex];

  00021	57		 push	 edi
  00022	69 f9 40 27 00
	00		 imul	 edi, ecx, 10048
  00028	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1993 : 	int nPos;
; 1994 : 
; 1995 : 	if( lpObj->m_IfState.use > 0 )

  0002e	f6 87 b8 11 00
	00 03		 test	 BYTE PTR [edi+4536], 3
  00035	76 0a		 jbe	 SHORT $LN9@CheckFullS

; 1996 : 	{
; 1997 : 		return -3;

  00037	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH
  0003c	5f		 pop	 edi

; 2025 : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
$LN9@CheckFullS:

; 1998 : 	}
; 1999 : 
; 2000 : 	if( lpObj->Type != OBJ_USER || 

  00041	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00045	0f 85 94 00 00
	00		 jne	 $LN11@CheckFullS
  0004b	83 7f 04 02	 cmp	 DWORD PTR [edi+4], 2
  0004f	0f 8e 8a 00 00
	00		 jle	 $LN11@CheckFullS

; 2004 : 	}
; 2005 : 
; 2006 : 	for( nPos = 0; nPos < 204; nPos++)

  00055	53		 push	 ebx
  00056	56		 push	 esi
  00057	33 db		 xor	 ebx, ebx
  00059	33 f6		 xor	 esi, esi
  0005b	0f 1f 44 00 00	 npad	 5
$LL4@CheckFullS:

; 2007 : 	{
; 2008 : 		if( lpObj->pInventory[nPos].IsItem() == TRUE &&

  00060	8b 8f c0 11 00
	00		 mov	 ecx, DWORD PTR [edi+4544]
  00066	03 ce		 add	 ecx, esi
  00068	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0006d	83 f8 01	 cmp	 eax, 1
  00070	75 12		 jne	 SHORT $LN2@CheckFullS
  00072	8b 87 c0 11 00
	00		 mov	 eax, DWORD PTR [edi+4544]
  00078	b9 6d 1c 00 00	 mov	 ecx, 7277		; 00001c6dH
  0007d	66 39 4c 30 06	 cmp	 WORD PTR [eax+esi+6], cx
  00082	74 49		 je	 SHORT $LN19@CheckFullS
$LN2@CheckFullS:

; 2004 : 	}
; 2005 : 
; 2006 : 	for( nPos = 0; nPos < 204; nPos++)

  00084	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  0008a	43		 inc	 ebx
  0008b	81 fe f0 a8 00
	00		 cmp	 esi, 43248		; 0000a8f0H
  00091	7c cd		 jl	 SHORT $LL4@CheckFullS

; 2016 : 	{
; 2017 : 		if( lpObj->pInventory[nPos].m_Type == ITEMGET(13,127) && 

  00093	8b 87 c0 11 00
	00		 mov	 eax, DWORD PTR [edi+4544]
  00099	33 c9		 xor	 ecx, ecx
  0009b	83 c0 24	 add	 eax, 36			; 00000024H
  0009e	ba 7f 1a 00 00	 mov	 edx, 6783		; 00001a7fH
  000a3	0f 57 c9	 xorps	 xmm1, xmm1
$LL7@CheckFullS:
  000a6	66 39 50 e2	 cmp	 WORD PTR [eax-30], dx
  000aa	75 09		 jne	 SHORT $LN5@CheckFullS
  000ac	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000b0	0f 2f c1	 comiss	 xmm0, xmm1
  000b3	77 21		 ja	 SHORT $LN20@CheckFullS
$LN5@CheckFullS:

; 2012 : 		}
; 2013 : 	}
; 2014 : 
; 2015 : 	for( nPos = 0; nPos < 204; nPos++)

  000b5	41		 inc	 ecx
  000b6	05 d4 00 00 00	 add	 eax, 212		; 000000d4H
  000bb	81 f9 cc 00 00
	00		 cmp	 ecx, 204		; 000000ccH
  000c1	7c e3		 jl	 SHORT $LL7@CheckFullS

; 2021 : 		}
; 2022 : 	}
; 2023 : 
; 2024 : return -1;

  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx
  000c5	83 c8 ff	 or	 eax, -1
  000c8	5f		 pop	 edi

; 2025 : }

  000c9	5d		 pop	 ebp
  000ca	c2 04 00	 ret	 4
$LN19@CheckFullS:
  000cd	5e		 pop	 esi

; 2009 : 			lpObj->pInventory[nPos].m_Type == ITEMGET(14,109) )
; 2010 : 		{
; 2011 : 			return nPos;

  000ce	8b c3		 mov	 eax, ebx
  000d0	5b		 pop	 ebx
  000d1	5f		 pop	 edi

; 2025 : }

  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
$LN20@CheckFullS:
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx

; 2018 : 			lpObj->pInventory[nPos].m_Durability > 0.0f )
; 2019 : 		{
; 2020 : 			return nPos;

  000d8	8b c1		 mov	 eax, ecx
  000da	5f		 pop	 edi

; 2025 : }

  000db	5d		 pop	 ebp
  000dc	c2 04 00	 ret	 4
$LN11@CheckFullS:

; 2001 : 		lpObj->Connected <= PLAYER_LOGGED )
; 2002 : 	{
; 2003 : 		return -2;

  000df	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000e4	5f		 pop	 edi

; 2025 : }

  000e5	5d		 pop	 ebp
  000e6	c2 04 00	 ret	 4
$LN27@CheckFullS:

; 1987 : 	{
; 1988 : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  000e9	68 c4 07 00 00	 push	 1988			; 000007c4H
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000fe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1989 : 		return -2;

  00101	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 2025 : }

  00106	5d		 pop	 ebp
  00107	c2 04 00	 ret	 4
?CheckFullSecromicon@CImperialGuardian@@QAEHH@Z ENDP	; CImperialGuardian::CheckFullSecromicon
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?CheckGaionOrderPaper@CImperialGuardian@@QAEHH@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?CheckGaionOrderPaper@CImperialGuardian@@QAEHH@Z PROC	; CImperialGuardian::CheckGaionOrderPaper, COMDAT
; _this$ = ecx

; 1942 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1943 : 	if( !OBJMAX_RANGE(nIndex) )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	0f 88 db 00 00
	00		 js	 $LN27@CheckGaion
  0000e	33 c0		 xor	 eax, eax
  00010	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	0f 84 c8 00 00
	00		 je	 $LN27@CheckGaion

; 1947 : 	}
; 1948 : 
; 1949 : 	LPOBJ lpObj = &gObj[nIndex];

  00021	57		 push	 edi
  00022	69 f9 40 27 00
	00		 imul	 edi, ecx, 10048
  00028	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1950 : 	int nPos;
; 1951 : 
; 1952 : 	if( lpObj->m_IfState.use > 0 )

  0002e	f6 87 b8 11 00
	00 03		 test	 BYTE PTR [edi+4536], 3
  00035	76 0a		 jbe	 SHORT $LN9@CheckGaion

; 1953 : 	{
; 1954 : 		return -3;

  00037	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH
  0003c	5f		 pop	 edi

; 1982 : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
$LN9@CheckGaion:

; 1955 : 	}
; 1956 : 
; 1957 : 	if( lpObj->Type != OBJ_USER || 

  00041	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00045	0f 85 94 00 00
	00		 jne	 $LN11@CheckGaion
  0004b	83 7f 04 02	 cmp	 DWORD PTR [edi+4], 2
  0004f	0f 8e 8a 00 00
	00		 jle	 $LN11@CheckGaion

; 1961 : 	}
; 1962 : 
; 1963 : 	for( nPos = 0; nPos < 204; nPos++)

  00055	53		 push	 ebx
  00056	56		 push	 esi
  00057	33 db		 xor	 ebx, ebx
  00059	33 f6		 xor	 esi, esi
  0005b	0f 1f 44 00 00	 npad	 5
$LL4@CheckGaion:

; 1964 : 	{
; 1965 : 		if( lpObj->pInventory[nPos].IsItem() == TRUE &&

  00060	8b 8f c0 11 00
	00		 mov	 ecx, DWORD PTR [edi+4544]
  00066	03 ce		 add	 ecx, esi
  00068	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0006d	83 f8 01	 cmp	 eax, 1
  00070	75 12		 jne	 SHORT $LN2@CheckGaion
  00072	8b 87 c0 11 00
	00		 mov	 eax, DWORD PTR [edi+4544]
  00078	b9 66 1c 00 00	 mov	 ecx, 7270		; 00001c66H
  0007d	66 39 4c 30 06	 cmp	 WORD PTR [eax+esi+6], cx
  00082	74 49		 je	 SHORT $LN19@CheckGaion
$LN2@CheckGaion:

; 1961 : 	}
; 1962 : 
; 1963 : 	for( nPos = 0; nPos < 204; nPos++)

  00084	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  0008a	43		 inc	 ebx
  0008b	81 fe f0 a8 00
	00		 cmp	 esi, 43248		; 0000a8f0H
  00091	7c cd		 jl	 SHORT $LL4@CheckGaion

; 1973 : 	{
; 1974 : 		if( lpObj->pInventory[nPos].m_Type == ITEMGET(13,126) && 

  00093	8b 87 c0 11 00
	00		 mov	 eax, DWORD PTR [edi+4544]
  00099	33 c9		 xor	 ecx, ecx
  0009b	83 c0 24	 add	 eax, 36			; 00000024H
  0009e	ba 7e 1a 00 00	 mov	 edx, 6782		; 00001a7eH
  000a3	0f 57 c9	 xorps	 xmm1, xmm1
$LL7@CheckGaion:
  000a6	66 39 50 e2	 cmp	 WORD PTR [eax-30], dx
  000aa	75 09		 jne	 SHORT $LN5@CheckGaion
  000ac	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000b0	0f 2f c1	 comiss	 xmm0, xmm1
  000b3	77 21		 ja	 SHORT $LN20@CheckGaion
$LN5@CheckGaion:

; 1969 : 		}
; 1970 : 	}
; 1971 : 
; 1972 : 	for( nPos = 0; nPos < 204; nPos++)

  000b5	41		 inc	 ecx
  000b6	05 d4 00 00 00	 add	 eax, 212		; 000000d4H
  000bb	81 f9 cc 00 00
	00		 cmp	 ecx, 204		; 000000ccH
  000c1	7c e3		 jl	 SHORT $LL7@CheckGaion

; 1978 : 		}
; 1979 : 	}
; 1980 : 
; 1981 : return -1;

  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx
  000c5	83 c8 ff	 or	 eax, -1
  000c8	5f		 pop	 edi

; 1982 : }

  000c9	5d		 pop	 ebp
  000ca	c2 04 00	 ret	 4
$LN19@CheckGaion:
  000cd	5e		 pop	 esi

; 1966 : 			lpObj->pInventory[nPos].m_Type == ITEMGET(14,102) )
; 1967 : 		{
; 1968 : 			return nPos;

  000ce	8b c3		 mov	 eax, ebx
  000d0	5b		 pop	 ebx
  000d1	5f		 pop	 edi

; 1982 : }

  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
$LN20@CheckGaion:
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx

; 1975 : 			lpObj->pInventory[nPos].m_Durability > 0.0f )
; 1976 : 		{
; 1977 : 			return nPos;

  000d8	8b c1		 mov	 eax, ecx
  000da	5f		 pop	 edi

; 1982 : }

  000db	5d		 pop	 ebp
  000dc	c2 04 00	 ret	 4
$LN11@CheckGaion:

; 1958 : 		lpObj->Connected <= PLAYER_LOGGED )
; 1959 : 	{
; 1960 : 		return -2;

  000df	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000e4	5f		 pop	 edi

; 1982 : }

  000e5	5d		 pop	 ebp
  000e6	c2 04 00	 ret	 4
$LN27@CheckGaion:

; 1944 : 	{
; 1945 : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  000e9	68 99 07 00 00	 push	 1945			; 00000799H
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000fe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1946 : 		return -2;

  00101	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1982 : }

  00106	5d		 pop	 ebp
  00107	c2 04 00	 ret	 4
?CheckGaionOrderPaper@CImperialGuardian@@QAEHH@Z ENDP	; CImperialGuardian::CheckGaionOrderPaper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?RollBackUserPos@CImperialGuardian@@QAEXH@Z
_TEXT	SEGMENT
_nUserNumber$ = 8					; size = 4
?RollBackUserPos@CImperialGuardian@@QAEXH@Z PROC	; CImperialGuardian::RollBackUserPos, COMDAT
; _this$ = ecx

; 1916 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1917 : 	if( gObj[nUserNumber].Type != OBJ_USER ||

  00004	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000a	57		 push	 edi
  0000b	69 7d 08 40 27
	00 00		 imul	 edi, DWORD PTR _nUserNumber$[ebp], 10048
  00012	03 df		 add	 ebx, edi
  00014	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  00018	0f 85 a2 00 00
	00		 jne	 $LN3@RollBackUs
  0001e	83 7b 04 02	 cmp	 DWORD PTR [ebx+4], 2
  00022	0f 8e 98 00 00
	00		 jle	 $LN3@RollBackUs

; 1918 : 		gObj[nUserNumber].Connected <= PLAYER_LOGGED )
; 1919 : 		return;
; 1920 : 
; 1921 : 	int x = gObj[nUserNumber].X;
; 1922 : 	int y = gObj[nUserNumber].Y;
; 1923 : 	int mapNumber = gObj[nUserNumber].MapNumber;

  00028	8a 83 23 01 00
	00		 mov	 al, BYTE PTR [ebx+291]
  0002e	0f b6 8b 20 01
	00 00		 movzx	 ecx, BYTE PTR [ebx+288]
  00035	0f b6 93 21 01
	00 00		 movzx	 edx, BYTE PTR [ebx+289]

; 1924 : 	int dir = gObj[nUserNumber].Dir;
; 1925 : 
; 1926 : 	gObj[nUserNumber].RegenMapNumber = gObj[nUserNumber].MapNumber;

  0003c	88 83 8c 05 00
	00		 mov	 BYTE PTR [ebx+1420], al
  00042	56		 push	 esi
  00043	0f b6 f0	 movzx	 esi, al

; 1927 : 	gObj[nUserNumber].RegenMapX = x;

  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004b	88 8c 07 8d 05
	00 00		 mov	 BYTE PTR [edi+eax+1421], cl

; 1928 : 	gObj[nUserNumber].RegenMapY = y;

  00052	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00057	88 94 07 8e 05
	00 00		 mov	 BYTE PTR [edi+eax+1422], dl

; 1929 : 
; 1930 : 	gObjClearViewport(&gObj[nUserNumber]);

  0005e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00063	03 c7		 add	 eax, edi
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?gObjClearViewport@@YAXPAUOBJECTSTRUCT@@@Z ; gObjClearViewport

; 1931 : 
; 1932 : 	GCTeleportSend(&gObj[nUserNumber],-1,mapNumber,gObj[nUserNumber].X,gObj[nUserNumber].Y,gObj[nUserNumber].Dir);

  0006b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00071	03 cf		 add	 ecx, edi
  00073	0f b6 81 22 01
	00 00		 movzx	 eax, BYTE PTR [ecx+290]
  0007a	50		 push	 eax
  0007b	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  00082	50		 push	 eax
  00083	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  0008a	50		 push	 eax
  0008b	56		 push	 esi
  0008c	6a ff		 push	 -1
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ?GCTeleportSend@@YAXPAUOBJECTSTRUCT@@HEEEE@Z ; GCTeleportSend

; 1933 : 
; 1934 : 	if( gObj[nUserNumber].m_Change >= 0 )

  00094	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00099	83 c4 1c	 add	 esp, 28			; 0000001cH
  0009c	83 bc 07 34 06
	00 00 00	 cmp	 DWORD PTR [edi+eax+1588], 0
  000a4	8d 0c 07	 lea	 ecx, DWORD PTR [edi+eax]
  000a7	5e		 pop	 esi
  000a8	7c 0e		 jl	 SHORT $LN4@RollBackUs

; 1935 : 	{
; 1936 : 		gObjViewportListProtocolCreate(&gObj[nUserNumber]);

  000aa	51		 push	 ecx
  000ab	e8 00 00 00 00	 call	 ?gObjViewportListProtocolCreate@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportListProtocolCreate
  000b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b5	83 c4 04	 add	 esp, 4
$LN4@RollBackUs:

; 1937 : 	}
; 1938 : 	gObj[nUserNumber].RegenOk = TRUE;

  000b8	c6 84 07 8b 05
	00 00 01	 mov	 BYTE PTR [edi+eax+1419], 1
$LN3@RollBackUs:
  000c0	5f		 pop	 edi
  000c1	5b		 pop	 ebx

; 1939 : }

  000c2	5d		 pop	 ebp
  000c3	c2 04 00	 ret	 4
?RollBackUserPos@CImperialGuardian@@QAEXH@Z ENDP	; CImperialGuardian::RollBackUserPos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?CheckOverlapMysteriousPaper@CImperialGuardian@@QAEHHH@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
_nItemLevel$ = 12					; size = 4
?CheckOverlapMysteriousPaper@CImperialGuardian@@QAEHHH@Z PROC ; CImperialGuardian::CheckOverlapMysteriousPaper, COMDAT
; _this$ = ecx

; 1899 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1900 : 	for(int i = INVETORY_WEAR_SIZE; i < 204; i++)

  00003	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00009	53		 push	 ebx
  0000a	69 5d 08 40 27
	00 00		 imul	 ebx, DWORD PTR _nIndex$[ebp], 10048
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	bf 0c 00 00 00	 mov	 edi, 12			; 0000000cH
  00018	be f0 09 00 00	 mov	 esi, 2544		; 000009f0H
  0001d	0f 1f 00	 npad	 3
$LL4@CheckOverl:

; 1901 : 	{
; 1902 : 		if( gObj[nIndex].pInventory[i].IsItem() == TRUE &&
; 1903 : 			gObj[nIndex].pInventory[i].m_Type == ITEMGET(14,101) &&

  00020	8b 8c 13 c0 11
	00 00		 mov	 ecx, DWORD PTR [ebx+edx+4544]
  00027	03 ce		 add	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00034	83 f8 01	 cmp	 eax, 1
  00037	75 33		 jne	 SHORT $LN2@CheckOverl
  00039	8b 8c 13 c0 11
	00 00		 mov	 ecx, DWORD PTR [ebx+edx+4544]
  00040	b8 65 1c 00 00	 mov	 eax, 7269		; 00001c65H
  00045	66 39 44 31 06	 cmp	 WORD PTR [ecx+esi+6], ax
  0004a	75 20		 jne	 SHORT $LN2@CheckOverl
  0004c	0f bf 44 31 08	 movsx	 eax, WORD PTR [ecx+esi+8]
  00051	3b 45 0c	 cmp	 eax, DWORD PTR _nItemLevel$[ebp]
  00054	75 16		 jne	 SHORT $LN2@CheckOverl

; 1904 : 			gObj[nIndex].pInventory[i].m_Level == nItemLevel )
; 1905 : 		{
; 1906 : 			int nItemDur = (int)gObj[nIndex].pInventory[i].m_Durability;

  00056	f3 0f 2c 4c 31
	24		 cvttss2si ecx, DWORD PTR [ecx+esi+36]

; 1907 : 
; 1908 : 			if( ((nItemDur < 0) ? FALSE : (nItemDur <= 4)) != 0 )

  0005c	85 c9		 test	 ecx, ecx
  0005e	78 0c		 js	 SHORT $LN2@CheckOverl
  00060	33 c0		 xor	 eax, eax
  00062	83 f9 04	 cmp	 ecx, 4
  00065	0f 9e c0	 setle	 al
  00068	85 c0		 test	 eax, eax
  0006a	75 19		 jne	 SHORT $LN11@CheckOverl
$LN2@CheckOverl:

; 1900 : 	for(int i = INVETORY_WEAR_SIZE; i < 204; i++)

  0006c	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  00072	47		 inc	 edi
  00073	81 fe f0 a8 00
	00		 cmp	 esi, 43248		; 0000a8f0H
  00079	7c a5		 jl	 SHORT $LL4@CheckOverl

; 1910 : 		}
; 1911 : 	}
; 1912 : return -1;

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	83 c8 ff	 or	 eax, -1
  00080	5b		 pop	 ebx

; 1913 : }

  00081	5d		 pop	 ebp
  00082	c2 08 00	 ret	 8
$LN11@CheckOverl:

; 1909 : 				return i;

  00085	8b c7		 mov	 eax, edi
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx

; 1913 : }

  0008a	5d		 pop	 ebp
  0008b	c2 08 00	 ret	 8
?CheckOverlapMysteriousPaper@CImperialGuardian@@QAEHHH@Z ENDP ; CImperialGuardian::CheckOverlapMysteriousPaper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?DropItem@CImperialGuardian@@QAEXHH@Z
_TEXT	SEGMENT
tv414 = -8						; size = 4
_btDropX$1 = -4						; size = 1
tv421 = 8						; size = 4
_nIndex$ = 8						; size = 4
tv424 = 12						; size = 4
_btDropY$2 = 12						; size = 1
_nMonsterIndex$ = 12					; size = 4
?DropItem@CImperialGuardian@@QAEXHH@Z PROC		; CImperialGuardian::DropItem, COMDAT
; _this$ = ecx

; 1795 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 1796 : 	int nZoneIndex = this->GetCurrentZoneIndex(nIndex);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _nIndex$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	53		 push	 ebx
  0000d	8b f1		 mov	 esi, ecx
  0000f	e8 00 00 00 00	 call	 ?GetCurrentZoneIndex@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetCurrentZoneIndex
  00014	8b f8		 mov	 edi, eax

; 1797 : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  00016	85 ff		 test	 edi, edi
  00018	0f 88 7a 02 00
	00		 js	 $LN22@DropItem
  0001e	33 c9		 xor	 ecx, ecx
  00020	83 ff 03	 cmp	 edi, 3
  00023	0f 9e c1	 setle	 cl
  00026	85 c9		 test	 ecx, ecx
  00028	0f 84 6a 02 00
	00		 je	 $LN22@DropItem

; 1798 : 		return;
; 1799 : 
; 1800 : 	int nMaxLevel = this->m_ZoneInfo[nZoneIndex].m_iMaxLevel;
; 1801 : 	int nType = 0;	
; 1802 : 
; 1803 : 	if( nMaxLevel == 0 )
; 1804 : 	{
; 1805 : 		nMaxLevel = gObj[nIndex].Level + gObj[nIndex].MasterLevel;
; 1806 : 	}
; 1807 : 
; 1808 : 	if( gObj[nMonsterIndex].Class == 504 )

  0002e	69 45 0c 40 27
	00 00		 imul	 eax, DWORD PTR _nMonsterIndex$[ebp], 10048
  00035	b9 f8 01 00 00	 mov	 ecx, 504		; 000001f8H
  0003a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00040	89 45 0c	 mov	 DWORD PTR tv424[ebp], eax
  00043	0f b7 84 10 90
	00 00 00	 movzx	 eax, WORD PTR [eax+edx+144]
  0004b	66 3b c1	 cmp	 ax, cx
  0004e	75 39		 jne	 SHORT $LN7@DropItem

; 1809 : 	{
; 1810 : 		LogAddTD("[IMPERIALGUARDIAN] Kill the boss monster => %s [ZONE]:%d [AccountID]:%s [Name]:%s",

  00050	69 cb 40 27 00
	00		 imul	 ecx, ebx, 10048
  00056	8d 42 5d	 lea	 eax, DWORD PTR [edx+93]
  00059	03 c1		 add	 eax, ecx
  0005b	89 4d 08	 mov	 DWORD PTR tv421[ebp], ecx
  0005e	50		 push	 eax
  0005f	8d 42 52	 lea	 eax, DWORD PTR [edx+82]
  00062	03 c1		 add	 eax, ecx
  00064	8b 4d 0c	 mov	 ecx, DWORD PTR tv424[ebp]
  00067	50		 push	 eax
  00068	8b 84 11 b8 26
	00 00		 mov	 eax, DWORD PTR [ecx+edx+9912]
  0006f	40		 inc	 eax
  00070	50		 push	 eax
  00071	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00074	03 c2		 add	 eax, edx
  00076	50		 push	 eax
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@NEILDHCA@?$FLIMPERIALGUARDIAN?$FN?5Kill?5the?5boss@
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00082	83 c4 14	 add	 esp, 20			; 00000014H

; 1811 : 			gObj[nMonsterIndex].Name,gObj[nMonsterIndex].m_ImperialGuardianZone+1,gObj[nIndex].AccountID,gObj[nIndex].Name);
; 1812 : 		//pEventDugeonItemBagGaion->DropEventItem(nIndex,nMaxLevel);
; 1813 : 
; 1814 : 		this->m_RewardExp.DropReward(nIndex,2);

  00085	6a 02		 push	 2
  00087	eb 77		 jmp	 SHORT $LN39@DropItem
$LN7@DropItem:

; 1815 : 	}
; 1816 : 	else if( gObj[nMonsterIndex].Class == 526 )

  00089	b9 0e 02 00 00	 mov	 ecx, 526		; 0000020eH
  0008e	66 3b c1	 cmp	 ax, cx

; 1817 : 	{
; 1818 : 		LogAddTD("[IMPERIALGUARDIAN] Broken Statue => %s [ZONE]:%d [AccountID]:%s [Name]:%s",

  00091	8d 42 5d	 lea	 eax, DWORD PTR [edx+93]
  00094	75 36		 jne	 SHORT $LN9@DropItem
  00096	69 cb 40 27 00
	00		 imul	 ecx, ebx, 10048
  0009c	03 c1		 add	 eax, ecx
  0009e	89 4d 08	 mov	 DWORD PTR tv421[ebp], ecx
  000a1	50		 push	 eax
  000a2	8d 42 52	 lea	 eax, DWORD PTR [edx+82]
  000a5	03 c1		 add	 eax, ecx
  000a7	8b 4d 0c	 mov	 ecx, DWORD PTR tv424[ebp]
  000aa	50		 push	 eax
  000ab	8b 84 11 b8 26
	00 00		 mov	 eax, DWORD PTR [ecx+edx+9912]
  000b2	40		 inc	 eax
  000b3	50		 push	 eax
  000b4	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  000b7	03 c2		 add	 eax, edx
  000b9	50		 push	 eax
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DHNAFKCL@?$FLIMPERIALGUARDIAN?$FN?5Broken?5Statue@
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000c5	83 c4 14	 add	 esp, 20			; 00000014H

; 1819 : 			gObj[nMonsterIndex].Name,gObj[nMonsterIndex].m_ImperialGuardianZone+1,gObj[nIndex].AccountID,gObj[nIndex].Name);
; 1820 : 		//pEventDugeonItemBagStone->DropEventItem(nIndex,nMaxLevel);
; 1821 : 
; 1822 : 		this->m_RewardExp.DropReward(nIndex,1);

  000c8	6a 01		 push	 1

; 1823 : 	}
; 1824 : 	else

  000ca	eb 34		 jmp	 SHORT $LN39@DropItem
$LN9@DropItem:

; 1825 : 	{
; 1826 : 		LogAddTD("[IMPERIALGUARDIAN] Kill the boss monster => %s [ZONE]:%d [AccountID]:%s [Name]:%s",

  000cc	69 cb 40 27 00
	00		 imul	 ecx, ebx, 10048
  000d2	03 c1		 add	 eax, ecx
  000d4	89 4d 08	 mov	 DWORD PTR tv421[ebp], ecx
  000d7	50		 push	 eax
  000d8	8d 42 52	 lea	 eax, DWORD PTR [edx+82]
  000db	03 c1		 add	 eax, ecx
  000dd	8b 4d 0c	 mov	 ecx, DWORD PTR tv424[ebp]
  000e0	50		 push	 eax
  000e1	8b 84 11 b8 26
	00 00		 mov	 eax, DWORD PTR [ecx+edx+9912]
  000e8	40		 inc	 eax
  000e9	50		 push	 eax
  000ea	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  000ed	03 c2		 add	 eax, edx
  000ef	50		 push	 eax
  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@NEILDHCA@?$FLIMPERIALGUARDIAN?$FN?5Kill?5the?5boss@
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000fb	83 c4 14	 add	 esp, 20			; 00000014H

; 1827 : 			gObj[nMonsterIndex].Name,gObj[nMonsterIndex].m_ImperialGuardianZone+1,gObj[nIndex].AccountID,gObj[nIndex].Name);
; 1828 : 		//pEventDugeonItemBag->DropEventItem(nIndex,nMaxLevel);
; 1829 : 
; 1830 : 		this->m_RewardExp.DropReward(nIndex,0);

  000fe	6a 00		 push	 0
$LN39@DropItem:
  00100	53		 push	 ebx
  00101	8d 8e b8 01 00
	00		 lea	 ecx, DWORD PTR [esi+440]
  00107	e8 00 00 00 00	 call	 ?DropReward@CImperialGuardianRewardExp@@QAEXHH@Z ; CImperialGuardianRewardExp::DropReward

; 1831 : 	}
; 1832 : 
; 1833 : 	if( this->m_ZoneInfo[nZoneIndex].m_wMonsterRegenTable != 1)

  0010c	6b c7 64	 imul	 eax, edi, 100
  0010f	66 83 7c 30 24
	01		 cmp	 WORD PTR [eax+esi+36], 1
  00115	0f 84 7d 01 00
	00		 je	 $LN22@DropItem

; 1834 : 	{
; 1835 : 		if( gObj[nMonsterIndex].Class == 508 )

  0011b	8b 4d 0c	 mov	 ecx, DWORD PTR tv424[ebp]
  0011e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00123	0f b7 84 01 90
	00 00 00	 movzx	 eax, WORD PTR [ecx+eax+144]
  0012b	b9 fc 01 00 00	 mov	 ecx, 508		; 000001fcH
  00130	66 3b c1	 cmp	 ax, cx
  00133	75 04		 jne	 SHORT $LN12@DropItem

; 1836 : 		{
; 1837 : 			nType = ItemGetNumberMake(14,103);

  00135	6a 67		 push	 103			; 00000067H
  00137	eb 48		 jmp	 SHORT $LN40@DropItem
$LN12@DropItem:

; 1838 : 		}
; 1839 : 		else if( gObj[nMonsterIndex].Class == 509 )

  00139	b9 fd 01 00 00	 mov	 ecx, 509		; 000001fdH
  0013e	66 3b c1	 cmp	 ax, cx
  00141	75 04		 jne	 SHORT $LN14@DropItem

; 1840 : 		{
; 1841 : 			nType = ItemGetNumberMake(14,104);

  00143	6a 68		 push	 104			; 00000068H
  00145	eb 3a		 jmp	 SHORT $LN40@DropItem
$LN14@DropItem:

; 1842 : 		}
; 1843 : 		else if( gObj[nMonsterIndex].Class == 510 )

  00147	b9 fe 01 00 00	 mov	 ecx, 510		; 000001feH
  0014c	66 3b c1	 cmp	 ax, cx
  0014f	75 04		 jne	 SHORT $LN16@DropItem

; 1844 : 		{
; 1845 : 			nType = ItemGetNumberMake(14,105);

  00151	6a 69		 push	 105			; 00000069H
  00153	eb 2c		 jmp	 SHORT $LN40@DropItem
$LN16@DropItem:

; 1846 : 		}
; 1847 : 		else if( gObj[nMonsterIndex].Class == 511 )

  00155	b9 ff 01 00 00	 mov	 ecx, 511		; 000001ffH
  0015a	66 3b c1	 cmp	 ax, cx
  0015d	75 04		 jne	 SHORT $LN18@DropItem

; 1848 : 		{
; 1849 : 			nType = ItemGetNumberMake(14,106);

  0015f	6a 6a		 push	 106			; 0000006aH
  00161	eb 1e		 jmp	 SHORT $LN40@DropItem
$LN18@DropItem:

; 1850 : 		}
; 1851 : 		else if( gObj[nMonsterIndex].Class == 507 )

  00163	b9 fb 01 00 00	 mov	 ecx, 507		; 000001fbH
  00168	66 3b c1	 cmp	 ax, cx
  0016b	75 04		 jne	 SHORT $LN20@DropItem

; 1852 : 		{
; 1853 : 			nType = ItemGetNumberMake(14,107);

  0016d	6a 6b		 push	 107			; 0000006bH
  0016f	eb 10		 jmp	 SHORT $LN40@DropItem
$LN20@DropItem:

; 1854 : 		}
; 1855 : 		else if( gObj[nMonsterIndex].Class == 506 )

  00171	b9 fa 01 00 00	 mov	 ecx, 506		; 000001faH
  00176	66 3b c1	 cmp	 ax, cx
  00179	0f 85 19 01 00
	00		 jne	 $LN22@DropItem

; 1856 : 		{
; 1857 : 			nType = ItemGetNumberMake(14,108);

  0017f	6a 6c		 push	 108			; 0000006cH
$LN40@DropItem:
  00181	6a 0e		 push	 14			; 0000000eH
  00183	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  00188	83 c4 08	 add	 esp, 8
  0018b	8b f0		 mov	 esi, eax

; 1858 : 		}
; 1859 : 		else
; 1860 : 		{
; 1861 : 			return;
; 1862 : 		}
; 1863 : 
; 1864 : 		int nCount = 0;
; 1865 : 		int nRand = rand()%100;

  0018d	e8 00 00 00 00	 call	 _rand
  00192	99		 cdq
  00193	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00198	f7 f9		 idiv	 ecx

; 1866 : 
; 1867 : 		if( nRand >= 0 && nRand < 50 )

  0019a	85 d2		 test	 edx, edx
  0019c	78 0a		 js	 SHORT $LN24@DropItem
  0019e	83 fa 32	 cmp	 edx, 50			; 00000032H
  001a1	7d 0a		 jge	 SHORT $LN36@DropItem

; 1868 : 		{
; 1869 : 			nCount = 1;

  001a3	8d 79 9d	 lea	 edi, DWORD PTR [ecx-99]
  001a6	eb 14		 jmp	 SHORT $LN37@DropItem
$LN24@DropItem:

; 1870 : 		}
; 1871 : 		else if( nRand >= 50 && nRand < 79 )

  001a8	83 fa 32	 cmp	 edx, 50			; 00000032H
  001ab	7c 0a		 jl	 SHORT $LN26@DropItem
$LN36@DropItem:

; 1872 : 		{
; 1873 : 			nCount = 2;

  001ad	bf 02 00 00 00	 mov	 edi, 2
  001b2	83 fa 4f	 cmp	 edx, 79			; 0000004fH
  001b5	7c 05		 jl	 SHORT $LN37@DropItem
$LN26@DropItem:

; 1874 : 		}
; 1875 : 		else
; 1876 : 		{
; 1877 : 			nCount = 3;

  001b7	bf 03 00 00 00	 mov	 edi, 3
$LN37@DropItem:
  001bc	6b c6 70	 imul	 eax, esi, 112
  001bf	8d 80 00 00 00
	00		 lea	 eax, DWORD PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[eax]
  001c5	89 45 f8	 mov	 DWORD PTR tv414[ebp], eax
  001c8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@DropItem:

; 1878 : 		}
; 1879 : 
; 1880 : 		for(int i = 0; i < nCount; i++)
; 1881 : 		{
; 1882 : 			BYTE btDropX = gObj[nIndex].X;

  001d0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001d6	8b 55 08	 mov	 edx, DWORD PTR tv421[ebp]

; 1883 : 			BYTE btDropY = gObj[nIndex].Y;
; 1884 : 
; 1885 : 			if( !gObjGetRandomItemDropLocation(gObj[nIndex].MapNumber,btDropX,btDropY,2,2,10) )

  001d9	6a 0a		 push	 10			; 0000000aH
  001db	6a 02		 push	 2
  001dd	6a 02		 push	 2
  001df	0f b6 84 0a 20
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+288]
  001e7	88 45 fc	 mov	 BYTE PTR _btDropX$1[ebp], al
  001ea	0f b6 84 0a 21
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+289]
  001f2	88 45 0c	 mov	 BYTE PTR _btDropY$2[ebp], al
  001f5	8d 45 0c	 lea	 eax, DWORD PTR _btDropY$2[ebp]
  001f8	50		 push	 eax
  001f9	8d 45 fc	 lea	 eax, DWORD PTR _btDropX$1[ebp]
  001fc	50		 push	 eax
  001fd	0f b6 84 0a 23
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+291]
  00205	50		 push	 eax
  00206	e8 00 00 00 00	 call	 ?gObjGetRandomItemDropLocation@@YAHHAAE0HHH@Z ; gObjGetRandomItemDropLocation
  0020b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00211	83 c4 18	 add	 esp, 24			; 00000018H

; 1886 : 			{
; 1887 : 				btDropX = gObj[nIndex].X;

  00214	8b 55 08	 mov	 edx, DWORD PTR tv421[ebp]
  00217	85 c0		 test	 eax, eax
  00219	75 16		 jne	 SHORT $LN28@DropItem
  0021b	0f b6 84 0a 20
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+288]
  00223	88 45 fc	 mov	 BYTE PTR _btDropX$1[ebp], al

; 1888 : 				btDropY = gObj[nIndex].Y;

  00226	0f b6 84 0a 21
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+289]
  0022e	88 45 0c	 mov	 BYTE PTR _btDropY$2[ebp], al
$LN28@DropItem:

; 1889 : 			}
; 1890 : 
; 1891 : 			ItemSerialCreateSend(nIndex,gObj[nIndex].MapNumber,btDropX,btDropY,nType,0,0,0,0,0,nIndex,0,0);

  00231	6a 00		 push	 0
  00233	6a 00		 push	 0
  00235	6a 00		 push	 0
  00237	0f b6 84 0a 23
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+291]
  0023f	6a 00		 push	 0
  00241	53		 push	 ebx
  00242	6a 00		 push	 0
  00244	6a 00		 push	 0
  00246	6a 00		 push	 0
  00248	6a 00		 push	 0
  0024a	6a 00		 push	 0
  0024c	56		 push	 esi
  0024d	ff 75 0c	 push	 DWORD PTR _btDropY$2[ebp]
  00250	ff 75 fc	 push	 DWORD PTR _btDropX$1[ebp]
  00253	50		 push	 eax
  00254	53		 push	 ebx
  00255	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 1892 : 			LogAddTD("[IMPERIALGUARDIAN] Drop Item : (%d)(%d/%d) Item:(%s)%d Level:%d op1:%d op2:%d op3:%d",

  0025a	0f b6 45 0c	 movzx	 eax, BYTE PTR _btDropY$2[ebp]
  0025e	8b 4d 08	 mov	 ecx, DWORD PTR tv421[ebp]
  00261	6a 00		 push	 0
  00263	6a 00		 push	 0
  00265	6a 00		 push	 0
  00267	6a 00		 push	 0
  00269	56		 push	 esi
  0026a	ff 75 f8	 push	 DWORD PTR tv414[ebp]
  0026d	50		 push	 eax
  0026e	0f b6 45 fc	 movzx	 eax, BYTE PTR _btDropX$1[ebp]
  00272	50		 push	 eax
  00273	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00278	0f b6 84 01 23
	01 00 00	 movzx	 eax, BYTE PTR [ecx+eax+291]
  00280	50		 push	 eax
  00281	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DICKNCPB@?$FLIMPERIALGUARDIAN?$FN?5Drop?5Item?5?3?5?$CI@
  00286	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0028c	83 c4 64	 add	 esp, 100		; 00000064H
  0028f	83 ef 01	 sub	 edi, 1
  00292	0f 85 38 ff ff
	ff		 jne	 $LL4@DropItem
$LN22@DropItem:
  00298	5f		 pop	 edi
  00299	5e		 pop	 esi
  0029a	5b		 pop	 ebx

; 1893 : 				gObj[nIndex].MapNumber,btDropX,btDropY,ItemAttribute[nType].Name,nType,0,0,0,0);
; 1894 : 		}
; 1895 : 	}
; 1896 : }

  0029b	8b e5		 mov	 esp, ebp
  0029d	5d		 pop	 ebp
  0029e	c2 08 00	 ret	 8
?DropItem@CImperialGuardian@@QAEXHH@Z ENDP		; CImperialGuardian::DropItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?GCSendCastleGateInfo@CImperialGuardian@@QAEXHHH@Z
_TEXT	SEGMENT
_iGateState$1$ = -264					; size = 4
_cTEMP_BUF$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_nGateIndex$ = 8					; size = 4
_nZoneIndex$ = 12					; size = 4
_nUserIndex$ = 16					; size = 4
?GCSendCastleGateInfo@CImperialGuardian@@QAEXHHH@Z PROC	; CImperialGuardian::GCSendCastleGateInfo, COMDAT
; _this$ = ecx

; 1682 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 10	 mov	 edi, DWORD PTR _nUserIndex$[ebp]

; 1683 : 	BYTE cTEMP_BUF[256];
; 1684 : 
; 1685 : 	PMSG_SETMAPATTR_COUNT * lpMsg = (PMSG_SETMAPATTR_COUNT *)cTEMP_BUF;
; 1686 : 	PHeadSetB((LPBYTE)lpMsg, 0x46, sizeof(PMSG_SETMAPATTR_COUNT)+sizeof(PMSG_SETMAPATTR)*6);

  00019	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _cTEMP_BUF$[ebp]
  0001f	6a 13		 push	 19			; 00000013H
  00021	6a 46		 push	 70			; 00000046H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 1687 : 	PMSG_SETMAPATTR * lpMsgBody = (PMSG_SETMAPATTR *)(cTEMP_BUF+7);
; 1688 : 
; 1689 : 	lpMsg->btType = 0;
; 1690 : 	lpMsg->btCount = 1;
; 1691 : 	lpMsg->btMapAttr = 16;
; 1692 : 
; 1693 : 	int iGateState;
; 1694 : 
; 1695 : 	if( gObj[nGateIndex].Live )

  00029	69 45 08 40 27
	00 00		 imul	 eax, DWORD PTR _nGateIndex$[ebp], 10048
  00030	33 c9		 xor	 ecx, ecx
  00032	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	66 c7 85 ff fe
	ff ff 00 10	 mov	 WORD PTR _cTEMP_BUF$[ebp+3], 4096 ; 00001000H
  00044	c6 85 02 ff ff
	ff 01		 mov	 BYTE PTR _cTEMP_BUF$[ebp+6], 1
  0004b	38 4c 18 51	 cmp	 BYTE PTR [eax+ebx+81], cl

; 1696 : 	{
; 1697 : 		iGateState = 1;
; 1698 : 	}
; 1699 : 	else
; 1700 : 	{
; 1701 : 		iGateState = 0;
; 1702 : 	}
; 1703 : 
; 1704 : 	int nDir = gObj[nGateIndex].Dir;

  0004f	0f b6 b4 18 22
	01 00 00	 movzx	 esi, BYTE PTR [eax+ebx+290]

; 1705 : 	int nX = gObj[nGateIndex].X;
; 1706 : 	int nY = gObj[nGateIndex].Y;

  00057	0f b6 94 18 21
	01 00 00	 movzx	 edx, BYTE PTR [eax+ebx+289]
  0005f	0f 95 c1	 setne	 cl
  00062	89 8d f8 fe ff
	ff		 mov	 DWORD PTR _iGateState$1$[ebp], ecx
  00068	0f b6 8c 18 20
	01 00 00	 movzx	 ecx, BYTE PTR [eax+ebx+288]

; 1707 : 
; 1708 : 	switch( iGateState )

  00070	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _iGateState$1$[ebp]
  00076	83 e8 00	 sub	 eax, 0
  00079	74 7a		 je	 SHORT $LN15@GCSendCast
  0007b	83 e8 01	 sub	 eax, 1
  0007e	0f 85 f5 00 00
	00		 jne	 $LN22@GCSendCast

; 1709 : 	{
; 1710 : 	default:
; 1711 : 		break;
; 1712 : 	case 1:
; 1713 : 		if( nDir == 3 )

  00084	83 fe 03	 cmp	 esi, 3
  00087	75 14		 jne	 SHORT $LN8@GCSendCast

; 1714 : 		{
; 1715 : 			lpMsg->btMapSetType = 0;

  00089	88 85 01 ff ff
	ff		 mov	 BYTE PTR _cTEMP_BUF$[ebp+5], al

; 1716 : 			lpMsgBody[0].btX = nX-3;

  0008f	8d 41 fd	 lea	 eax, DWORD PTR [ecx-3]
  00092	88 85 03 ff ff
	ff		 mov	 BYTE PTR _cTEMP_BUF$[ebp+7], al

; 1717 : 			lpMsgBody[0].btY = nY-2;
; 1718 : 			lpMsgBody[1].btX = nX;
; 1719 : 			lpMsgBody[1].btY = nY+2;

  00098	e9 c4 00 00 00	 jmp	 $LN26@GCSendCast
$LN8@GCSendCast:

; 1720 : 		}
; 1721 : 		else if( nDir == 1 )

  0009d	83 fe 01	 cmp	 esi, 1
  000a0	75 21		 jne	 SHORT $LN10@GCSendCast

; 1722 : 		{
; 1723 : 			lpMsg->btMapSetType = 0;
; 1724 : 			lpMsgBody[0].btX = nX-2;

  000a2	8d 41 fe	 lea	 eax, DWORD PTR [ecx-2]

; 1725 : 			lpMsgBody[0].btY = nY;

  000a5	88 95 04 ff ff
	ff		 mov	 BYTE PTR _cTEMP_BUF$[ebp+8], dl

; 1726 : 			lpMsgBody[1].btX = nX+2;

  000ab	80 c1 02	 add	 cl, 2
  000ae	c6 85 01 ff ff
	ff 00		 mov	 BYTE PTR _cTEMP_BUF$[ebp+5], 0
  000b5	88 85 03 ff ff
	ff		 mov	 BYTE PTR _cTEMP_BUF$[ebp+7], al

; 1727 : 			lpMsgBody[1].btY = nY+3;

  000bb	80 c2 03	 add	 dl, 3
  000be	e9 aa 00 00 00	 jmp	 $LN27@GCSendCast
$LN10@GCSendCast:

; 1728 : 		}
; 1729 : 		else if( nDir == 5 )

  000c3	83 fe 05	 cmp	 esi, 5
  000c6	75 1b		 jne	 SHORT $LN12@GCSendCast

; 1730 : 		{
; 1731 : 			lpMsg->btMapSetType = 0;
; 1732 : 			lpMsgBody[0].btX = nX-2;

  000c8	8d 41 fe	 lea	 eax, DWORD PTR [ecx-2]
  000cb	c6 85 01 ff ff
	ff 00		 mov	 BYTE PTR _cTEMP_BUF$[ebp+5], 0
  000d2	88 85 03 ff ff
	ff		 mov	 BYTE PTR _cTEMP_BUF$[ebp+7], al

; 1733 : 			lpMsgBody[0].btY = nY-3;
; 1734 : 			lpMsgBody[1].btX = nX+2;

  000d8	80 c1 02	 add	 cl, 2
  000db	8d 42 fd	 lea	 eax, DWORD PTR [edx-3]

; 1735 : 			lpMsgBody[1].btY = nY;

  000de	e9 84 00 00 00	 jmp	 $LN28@GCSendCast
$LN12@GCSendCast:

; 1736 : 		}
; 1737 : 		else if( nDir == 7 )

  000e3	83 fe 07	 cmp	 esi, 7
  000e6	0f 85 8d 00 00
	00		 jne	 $LN22@GCSendCast

; 1738 : 		{
; 1739 : 			lpMsg->btMapSetType = 0;

  000ec	c6 85 01 ff ff
	ff 00		 mov	 BYTE PTR _cTEMP_BUF$[ebp+5], 0

; 1740 : 			lpMsgBody[0].btX = nX;
; 1741 : 			lpMsgBody[0].btY = nY-2;
; 1742 : 			lpMsgBody[1].btX = nX+3;
; 1743 : 			lpMsgBody[1].btY = nY+2;
; 1744 : 		}
; 1745 : 		break;

  000f3	eb 63		 jmp	 SHORT $LN29@GCSendCast
$LN15@GCSendCast:

; 1746 : 	case 0:
; 1747 : 		if( nDir == 3 )

  000f5	83 fe 03	 cmp	 esi, 3
  000f8	75 12		 jne	 SHORT $LN16@GCSendCast

; 1748 : 		{
; 1749 : 			lpMsg->btMapSetType = 1;
; 1750 : 			lpMsgBody[0].btX = nX-3;

  000fa	8d 41 fd	 lea	 eax, DWORD PTR [ecx-3]
  000fd	c6 85 01 ff ff
	ff 01		 mov	 BYTE PTR _cTEMP_BUF$[ebp+5], 1
  00104	88 85 03 ff ff
	ff		 mov	 BYTE PTR _cTEMP_BUF$[ebp+7], al

; 1751 : 			lpMsgBody[0].btY = nY-2;
; 1752 : 			lpMsgBody[1].btX = nX;
; 1753 : 			lpMsgBody[1].btY = nY+2;

  0010a	eb 55		 jmp	 SHORT $LN26@GCSendCast
$LN16@GCSendCast:

; 1754 : 		}
; 1755 : 		else if( nDir == 1 )

  0010c	83 fe 01	 cmp	 esi, 1
  0010f	75 1e		 jne	 SHORT $LN18@GCSendCast

; 1756 : 		{
; 1757 : 			lpMsg->btMapSetType = 1;
; 1758 : 			lpMsgBody[0].btX = nX-2;

  00111	8d 41 fe	 lea	 eax, DWORD PTR [ecx-2]

; 1759 : 			lpMsgBody[0].btY = nY;

  00114	88 95 04 ff ff
	ff		 mov	 BYTE PTR _cTEMP_BUF$[ebp+8], dl

; 1760 : 			lpMsgBody[1].btX = nX+2;

  0011a	80 c1 02	 add	 cl, 2
  0011d	c6 85 01 ff ff
	ff 01		 mov	 BYTE PTR _cTEMP_BUF$[ebp+5], 1
  00124	88 85 03 ff ff
	ff		 mov	 BYTE PTR _cTEMP_BUF$[ebp+7], al

; 1761 : 			lpMsgBody[1].btY = nY+3;

  0012a	80 c2 03	 add	 dl, 3
  0012d	eb 3e		 jmp	 SHORT $LN27@GCSendCast
$LN18@GCSendCast:

; 1762 : 		}
; 1763 : 		else if( nDir == 5 )

  0012f	83 fe 05	 cmp	 esi, 5
  00132	75 18		 jne	 SHORT $LN20@GCSendCast

; 1764 : 		{
; 1765 : 			lpMsg->btMapSetType = 1;
; 1766 : 			lpMsgBody[0].btX = nX-2;

  00134	8d 41 fe	 lea	 eax, DWORD PTR [ecx-2]
  00137	c6 85 01 ff ff
	ff 01		 mov	 BYTE PTR _cTEMP_BUF$[ebp+5], 1
  0013e	88 85 03 ff ff
	ff		 mov	 BYTE PTR _cTEMP_BUF$[ebp+7], al

; 1767 : 			lpMsgBody[0].btY = nY-3;
; 1768 : 			lpMsgBody[1].btX = nX+2;

  00144	80 c1 02	 add	 cl, 2
  00147	8d 42 fd	 lea	 eax, DWORD PTR [edx-3]

; 1769 : 			lpMsgBody[1].btY = nY;

  0014a	eb 1b		 jmp	 SHORT $LN28@GCSendCast
$LN20@GCSendCast:

; 1770 : 		}
; 1771 : 		else if( nDir == 7 )

  0014c	83 fe 07	 cmp	 esi, 7
  0014f	75 28		 jne	 SHORT $LN22@GCSendCast

; 1772 : 		{
; 1773 : 			lpMsg->btMapSetType = 1;

  00151	c6 85 01 ff ff
	ff 01		 mov	 BYTE PTR _cTEMP_BUF$[ebp+5], 1
$LN29@GCSendCast:

; 1774 : 			lpMsgBody[0].btX = nX;

  00158	88 8d 03 ff ff
	ff		 mov	 BYTE PTR _cTEMP_BUF$[ebp+7], cl

; 1776 : 			lpMsgBody[1].btX = nX+3;

  0015e	80 c1 03	 add	 cl, 3
$LN26@GCSendCast:

; 1777 : 			lpMsgBody[1].btY = nY+2;

  00161	8d 42 fe	 lea	 eax, DWORD PTR [edx-2]
  00164	80 c2 02	 add	 dl, 2
$LN28@GCSendCast:

; 1775 : 			lpMsgBody[0].btY = nY-2;

  00167	88 85 04 ff ff
	ff		 mov	 BYTE PTR _cTEMP_BUF$[ebp+8], al
$LN27@GCSendCast:

; 1777 : 			lpMsgBody[1].btY = nY+2;

  0016d	88 95 06 ff ff
	ff		 mov	 BYTE PTR _cTEMP_BUF$[ebp+10], dl
  00173	88 8d 05 ff ff
	ff		 mov	 BYTE PTR _cTEMP_BUF$[ebp+9], cl
$LN22@GCSendCast:

; 1778 : 		}
; 1779 : 		break;
; 1780 : 	}
; 1781 : 
; 1782 : 	if( gObj[nUserIndex].Connected == PLAYER_PLAYING )

  00179	69 f7 40 27 00
	00		 imul	 esi, edi, 10048
  0017f	83 7c 1e 04 03	 cmp	 DWORD PTR [esi+ebx+4], 3
  00184	75 72		 jne	 SHORT $LN24@GCSendCast

; 1783 : 	{
; 1784 : 		if( DataSend(nUserIndex,(LPBYTE)lpMsg,lpMsg->h.size) )

  00186	0f b6 85 fd fe
	ff ff		 movzx	 eax, BYTE PTR _cTEMP_BUF$[ebp+1]
  0018d	50		 push	 eax
  0018e	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _cTEMP_BUF$[ebp]
  00194	50		 push	 eax
  00195	57		 push	 edi
  00196	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0019b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0019e	85 c0		 test	 eax, eax
  001a0	74 56		 je	 SHORT $LN24@GCSendCast

; 1785 : 		{
; 1786 : 			LogAddTD("[IMPERIALGUARDIAN] SEND GATE STATE -> [ZONE]:%d [AccountID]:%s, [NAME]:%s [STATE]:%d",

  001a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001a8	ff b5 f8 fe ff
	ff		 push	 DWORD PTR _iGateState$1$[ebp]
  001ae	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  001b1	03 c6		 add	 eax, esi
  001b3	50		 push	 eax
  001b4	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  001b7	03 c6		 add	 eax, esi
  001b9	50		 push	 eax
  001ba	8b 45 0c	 mov	 eax, DWORD PTR _nZoneIndex$[ebp]
  001bd	40		 inc	 eax
  001be	50		 push	 eax
  001bf	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@BCELDKGP@?$FLIMPERIALGUARDIAN?$FN?5SEND?5GATE?5STA@
  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1787 : 				nZoneIndex+1,gObj[nUserIndex].AccountID,gObj[nUserIndex].Name,iGateState);
; 1788 : 			LogAddTD("[IMPERIALGUARDIAN] beginX : %d, beginY : %d , endX :%d , endY : %d",

  001ca	0f b6 85 06 ff
	ff ff		 movzx	 eax, BYTE PTR _cTEMP_BUF$[ebp+10]
  001d1	50		 push	 eax
  001d2	0f b6 85 05 ff
	ff ff		 movzx	 eax, BYTE PTR _cTEMP_BUF$[ebp+9]
  001d9	50		 push	 eax
  001da	0f b6 85 04 ff
	ff ff		 movzx	 eax, BYTE PTR _cTEMP_BUF$[ebp+8]
  001e1	50		 push	 eax
  001e2	0f b6 85 03 ff
	ff ff		 movzx	 eax, BYTE PTR _cTEMP_BUF$[ebp+7]
  001e9	50		 push	 eax
  001ea	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@BNJJBHBK@?$FLIMPERIALGUARDIAN?$FN?5beginX?5?3?5?$CFd?0?5@
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001f5	83 c4 28	 add	 esp, 40			; 00000028H
$LN24@GCSendCast:

; 1789 : 				lpMsgBody[0].btX,lpMsgBody[0].btY,lpMsgBody[1].btX,lpMsgBody[1].btY);
; 1790 : 		}
; 1791 : 	}
; 1792 : }

  001f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fb	5f		 pop	 edi
  001fc	5e		 pop	 esi
  001fd	33 cd		 xor	 ecx, ebp
  001ff	5b		 pop	 ebx
  00200	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00205	8b e5		 mov	 esp, ebp
  00207	5d		 pop	 ebp
  00208	c2 0c 00	 ret	 12			; 0000000cH
?GCSendCastleGateInfo@CImperialGuardian@@QAEXHHH@Z ENDP	; CImperialGuardian::GCSendCastleGateInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?SetGateBlockState@CImperialGuardian@@QAEXHHHHHH@Z
_TEXT	SEGMENT
_nMapNumber$ = 8					; size = 4
_nZoneIndex$ = 12					; size = 4
_nX$ = 16						; size = 4
_nY$ = 20						; size = 4
_iGateState$ = 24					; size = 4
_nDir$ = 28						; size = 4
?SetGateBlockState@CImperialGuardian@@QAEXHHHHHH@Z PROC	; CImperialGuardian::SetGateBlockState, COMDAT
; _this$ = ecx

; 1561 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1562 : 	if( !IMPERIAL_COORD_CHECK(nX) ||

  00003	8b 55 10	 mov	 edx, DWORD PTR _nX$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	0f 88 49 03 00
	00		 js	 $LN53@SetGateBlo
  0000e	33 c0		 xor	 eax, eax
  00010	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	0f 84 36 03 00
	00		 je	 $LN53@SetGateBlo
  00021	8b 45 14	 mov	 eax, DWORD PTR _nY$[ebp]
  00024	85 c0		 test	 eax, eax
  00026	0f 88 2b 03 00
	00		 js	 $LN53@SetGateBlo
  0002c	33 c9		 xor	 ecx, ecx
  0002e	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00033	0f 9e c1	 setle	 cl
  00036	85 c9		 test	 ecx, ecx
  00038	0f 84 19 03 00
	00		 je	 $LN53@SetGateBlo

; 1563 : 		!IMPERIAL_COORD_CHECK(nY) )
; 1564 : 		return;
; 1565 : 
; 1566 : 	switch( iGateState )

  0003e	8b 4d 18	 mov	 ecx, DWORD PTR _iGateState$[ebp]
  00041	53		 push	 ebx
  00042	56		 push	 esi
  00043	57		 push	 edi
  00044	83 e9 00	 sub	 ecx, 0
  00047	0f 84 8e 01 00
	00		 je	 $LN67@SetGateBlo
  0004d	83 e9 01	 sub	 ecx, 1
  00050	0f 85 fe 02 00
	00		 jne	 $LN148@SetGateBlo

; 1567 : 	{
; 1568 : 	default:
; 1569 : 		return;
; 1570 : 	case 1:
; 1571 : 		if( nDir == 3)

  00056	8b 4d 1c	 mov	 ecx, DWORD PTR _nDir$[ebp]
  00059	83 f9 03	 cmp	 ecx, 3
  0005c	75 5a		 jne	 SHORT $LN56@SetGateBlo

; 1572 : 		{
; 1573 : 			for(int i = nX-3; i <= nX; i++)

  0005e	8d 5a fd	 lea	 ebx, DWORD PTR [edx-3]
  00061	3b da		 cmp	 ebx, edx
  00063	0f 8f eb 02 00
	00		 jg	 $LN148@SetGateBlo
  00069	8d 70 fe	 lea	 esi, DWORD PTR [eax-2]
  0006c	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]
  0006f	90		 npad	 1
$LL6@SetGateBlo:

; 1574 : 			{
; 1575 : 				for(int j = nY-2; j <= nY+2; j++)

  00070	3b f1		 cmp	 esi, ecx
  00072	7f 35		 jg	 SHORT $LN4@SetGateBlo
  00074	8b fe		 mov	 edi, esi
  00076	c1 e7 08	 shl	 edi, 8
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@SetGateBlo:

; 1576 : 				{
; 1577 : 					if( i == nX && j == nY )

  00080	3b da		 cmp	 ebx, edx
  00082	75 04		 jne	 SHORT $LN58@SetGateBlo
  00084	3b f0		 cmp	 esi, eax
  00086	74 16		 je	 SHORT $LN7@SetGateBlo
$LN58@SetGateBlo:

; 1578 : 						continue;
; 1579 : 
; 1580 : 					MapC[nMapNumber].m_attrbuf[j*256+i] |= 16;

  00088	69 4d 08 28 38
	05 00		 imul	 ecx, DWORD PTR _nMapNumber$[ebp], 342056
  0008f	8b 89 10 00 00
	00		 mov	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[ecx+16]
  00095	03 cf		 add	 ecx, edi
  00097	80 0c 19 10	 or	 BYTE PTR [ecx+ebx], 16	; 00000010H
  0009b	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]
$LN7@SetGateBlo:

; 1574 : 			{
; 1575 : 				for(int j = nY-2; j <= nY+2; j++)

  0009e	46		 inc	 esi
  0009f	81 c7 00 01 00
	00		 add	 edi, 256		; 00000100H
  000a5	3b f1		 cmp	 esi, ecx
  000a7	7e d7		 jle	 SHORT $LL9@SetGateBlo
$LN4@SetGateBlo:

; 1572 : 		{
; 1573 : 			for(int i = nX-3; i <= nX; i++)

  000a9	43		 inc	 ebx
  000aa	8d 70 fe	 lea	 esi, DWORD PTR [eax-2]
  000ad	3b da		 cmp	 ebx, edx
  000af	7e bf		 jle	 SHORT $LL6@SetGateBlo
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx

; 1674 : 				}
; 1675 : 			}
; 1676 : 		}
; 1677 : 		break;
; 1678 : 	}
; 1679 : }

  000b4	5d		 pop	 ebp
  000b5	c2 18 00	 ret	 24			; 00000018H
$LN56@SetGateBlo:

; 1581 : 				}
; 1582 : 			}
; 1583 : 		}
; 1584 : 		else if( nDir == 1 )

  000b8	83 f9 01	 cmp	 ecx, 1
  000bb	75 5b		 jne	 SHORT $LN59@SetGateBlo

; 1585 : 		{
; 1586 : 			for(int i = nX-2; i <= nX+2; i++)

  000bd	8d 4a 02	 lea	 ecx, DWORD PTR [edx+2]
  000c0	8d 5a fe	 lea	 ebx, DWORD PTR [edx-2]
  000c3	3b d9		 cmp	 ebx, ecx
  000c5	0f 8f 89 02 00
	00		 jg	 $LN148@SetGateBlo
  000cb	8d 48 03	 lea	 ecx, DWORD PTR [eax+3]
  000ce	66 90		 npad	 2
$LL12@SetGateBlo:

; 1587 : 			{
; 1588 : 				for(int j = nY; j <= nY+3; j++)

  000d0	8b f0		 mov	 esi, eax
  000d2	3b c1		 cmp	 eax, ecx
  000d4	7f 33		 jg	 SHORT $LN10@SetGateBlo
  000d6	8b f8		 mov	 edi, eax
  000d8	c1 e7 08	 shl	 edi, 8
  000db	0f 1f 44 00 00	 npad	 5
$LL15@SetGateBlo:

; 1589 : 				{
; 1590 : 					if( i == nX && j == nY )

  000e0	3b da		 cmp	 ebx, edx
  000e2	75 04		 jne	 SHORT $LN61@SetGateBlo
  000e4	3b f0		 cmp	 esi, eax
  000e6	74 16		 je	 SHORT $LN13@SetGateBlo
$LN61@SetGateBlo:

; 1591 : 						continue;
; 1592 : 
; 1593 : 					MapC[nMapNumber].m_attrbuf[j*256+i] |= 16;

  000e8	69 4d 08 28 38
	05 00		 imul	 ecx, DWORD PTR _nMapNumber$[ebp], 342056
  000ef	8b 89 10 00 00
	00		 mov	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[ecx+16]
  000f5	03 cf		 add	 ecx, edi
  000f7	80 0c 19 10	 or	 BYTE PTR [ecx+ebx], 16	; 00000010H
  000fb	8d 48 03	 lea	 ecx, DWORD PTR [eax+3]
$LN13@SetGateBlo:

; 1587 : 			{
; 1588 : 				for(int j = nY; j <= nY+3; j++)

  000fe	46		 inc	 esi
  000ff	81 c7 00 01 00
	00		 add	 edi, 256		; 00000100H
  00105	3b f1		 cmp	 esi, ecx
  00107	7e d7		 jle	 SHORT $LL15@SetGateBlo
$LN10@SetGateBlo:

; 1585 : 		{
; 1586 : 			for(int i = nX-2; i <= nX+2; i++)

  00109	43		 inc	 ebx
  0010a	8d 72 02	 lea	 esi, DWORD PTR [edx+2]
  0010d	3b de		 cmp	 ebx, esi
  0010f	7e bf		 jle	 SHORT $LL12@SetGateBlo
  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	5b		 pop	 ebx

; 1674 : 				}
; 1675 : 			}
; 1676 : 		}
; 1677 : 		break;
; 1678 : 	}
; 1679 : }

  00114	5d		 pop	 ebp
  00115	c2 18 00	 ret	 24			; 00000018H
$LN59@SetGateBlo:

; 1594 : 				}
; 1595 : 			}
; 1596 : 		}
; 1597 : 		else if( nDir == 5 )

  00118	83 f9 05	 cmp	 ecx, 5
  0011b	75 5b		 jne	 SHORT $LN62@SetGateBlo

; 1598 : 		{
; 1599 : 			for(int i = nX-2; i <= nX+2; i++)

  0011d	8d 4a 02	 lea	 ecx, DWORD PTR [edx+2]
  00120	8d 5a fe	 lea	 ebx, DWORD PTR [edx-2]
  00123	3b d9		 cmp	 ebx, ecx
  00125	0f 8f 29 02 00
	00		 jg	 $LN148@SetGateBlo
  0012b	8d 48 fd	 lea	 ecx, DWORD PTR [eax-3]
  0012e	66 90		 npad	 2
$LL18@SetGateBlo:

; 1600 : 			{
; 1601 : 				for(int j = nY; j <= nY-3; j++)

  00130	8b f0		 mov	 esi, eax
  00132	3b c1		 cmp	 eax, ecx
  00134	7f 33		 jg	 SHORT $LN16@SetGateBlo
  00136	8b f8		 mov	 edi, eax
  00138	c1 e7 08	 shl	 edi, 8
  0013b	0f 1f 44 00 00	 npad	 5
$LL21@SetGateBlo:

; 1602 : 				{
; 1603 : 					if( i == nX && j == nY )

  00140	3b da		 cmp	 ebx, edx
  00142	75 04		 jne	 SHORT $LN64@SetGateBlo
  00144	3b f0		 cmp	 esi, eax
  00146	74 16		 je	 SHORT $LN19@SetGateBlo
$LN64@SetGateBlo:

; 1604 : 						continue;
; 1605 : 
; 1606 : 					MapC[nMapNumber].m_attrbuf[j*256+i] |= 16;

  00148	69 4d 08 28 38
	05 00		 imul	 ecx, DWORD PTR _nMapNumber$[ebp], 342056
  0014f	8b 89 10 00 00
	00		 mov	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[ecx+16]
  00155	03 cf		 add	 ecx, edi
  00157	80 0c 19 10	 or	 BYTE PTR [ecx+ebx], 16	; 00000010H
  0015b	8d 48 fd	 lea	 ecx, DWORD PTR [eax-3]
$LN19@SetGateBlo:

; 1600 : 			{
; 1601 : 				for(int j = nY; j <= nY-3; j++)

  0015e	46		 inc	 esi
  0015f	81 c7 00 01 00
	00		 add	 edi, 256		; 00000100H
  00165	3b f1		 cmp	 esi, ecx
  00167	7e d7		 jle	 SHORT $LL21@SetGateBlo
$LN16@SetGateBlo:

; 1598 : 		{
; 1599 : 			for(int i = nX-2; i <= nX+2; i++)

  00169	43		 inc	 ebx
  0016a	8d 72 02	 lea	 esi, DWORD PTR [edx+2]
  0016d	3b de		 cmp	 ebx, esi
  0016f	7e bf		 jle	 SHORT $LL18@SetGateBlo
  00171	5f		 pop	 edi
  00172	5e		 pop	 esi
  00173	5b		 pop	 ebx

; 1674 : 				}
; 1675 : 			}
; 1676 : 		}
; 1677 : 		break;
; 1678 : 	}
; 1679 : }

  00174	5d		 pop	 ebp
  00175	c2 18 00	 ret	 24			; 00000018H
$LN62@SetGateBlo:

; 1607 : 				}
; 1608 : 			}
; 1609 : 		}
; 1610 : 		else if( nDir == 7 )

  00178	83 f9 07	 cmp	 ecx, 7
  0017b	0f 85 d3 01 00
	00		 jne	 $LN148@SetGateBlo

; 1611 : 		{
; 1612 : 			for(int i = nX; i <= nX+3; i++)

  00181	8d 4a 03	 lea	 ecx, DWORD PTR [edx+3]
  00184	8b da		 mov	 ebx, edx
  00186	3b d1		 cmp	 edx, ecx
  00188	0f 8f c6 01 00
	00		 jg	 $LN148@SetGateBlo
  0018e	8d 70 fe	 lea	 esi, DWORD PTR [eax-2]
  00191	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]
$LL24@SetGateBlo:

; 1613 : 			{
; 1614 : 				for(int j = nY-2; j <= nY+2; j++)

  00194	3b f1		 cmp	 esi, ecx
  00196	7f 31		 jg	 SHORT $LN22@SetGateBlo
  00198	8b fe		 mov	 edi, esi
  0019a	c1 e7 08	 shl	 edi, 8
  0019d	0f 1f 00	 npad	 3
$LL27@SetGateBlo:

; 1615 : 				{
; 1616 : 					if( i == nX && j == nY )

  001a0	3b da		 cmp	 ebx, edx
  001a2	75 04		 jne	 SHORT $LN66@SetGateBlo
  001a4	3b f0		 cmp	 esi, eax
  001a6	74 16		 je	 SHORT $LN25@SetGateBlo
$LN66@SetGateBlo:

; 1617 : 						continue;
; 1618 : 
; 1619 : 					MapC[nMapNumber].m_attrbuf[j*256+i] |= 16;

  001a8	69 4d 08 28 38
	05 00		 imul	 ecx, DWORD PTR _nMapNumber$[ebp], 342056
  001af	8b 89 10 00 00
	00		 mov	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[ecx+16]
  001b5	03 cf		 add	 ecx, edi
  001b7	80 0c 19 10	 or	 BYTE PTR [ecx+ebx], 16	; 00000010H
  001bb	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]
$LN25@SetGateBlo:

; 1613 : 			{
; 1614 : 				for(int j = nY-2; j <= nY+2; j++)

  001be	46		 inc	 esi
  001bf	81 c7 00 01 00
	00		 add	 edi, 256		; 00000100H
  001c5	3b f1		 cmp	 esi, ecx
  001c7	7e d7		 jle	 SHORT $LL27@SetGateBlo
$LN22@SetGateBlo:

; 1611 : 		{
; 1612 : 			for(int i = nX; i <= nX+3; i++)

  001c9	8d 72 03	 lea	 esi, DWORD PTR [edx+3]
  001cc	43		 inc	 ebx
  001cd	3b de		 cmp	 ebx, esi
  001cf	8d 70 fe	 lea	 esi, DWORD PTR [eax-2]
  001d2	7e c0		 jle	 SHORT $LL24@SetGateBlo
  001d4	5f		 pop	 edi
  001d5	5e		 pop	 esi
  001d6	5b		 pop	 ebx

; 1674 : 				}
; 1675 : 			}
; 1676 : 		}
; 1677 : 		break;
; 1678 : 	}
; 1679 : }

  001d7	5d		 pop	 ebp
  001d8	c2 18 00	 ret	 24			; 00000018H
$LN67@SetGateBlo:

; 1620 : 				}
; 1621 : 			}
; 1622 : 		}
; 1623 : 		break;
; 1624 : 	case 0:
; 1625 : 		if( nDir == 3)

  001db	8b 4d 1c	 mov	 ecx, DWORD PTR _nDir$[ebp]
  001de	83 f9 03	 cmp	 ecx, 3
  001e1	75 55		 jne	 SHORT $LN68@SetGateBlo

; 1626 : 		{
; 1627 : 			for(int i = nX-3; i <= nX; i++)

  001e3	8d 5a fd	 lea	 ebx, DWORD PTR [edx-3]
  001e6	3b da		 cmp	 ebx, edx
  001e8	0f 8f 66 01 00
	00		 jg	 $LN148@SetGateBlo
  001ee	8d 70 fe	 lea	 esi, DWORD PTR [eax-2]
  001f1	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]
$LL30@SetGateBlo:

; 1628 : 			{
; 1629 : 				for(int j = nY-2; j <= nY+2; j++)

  001f4	3b f1		 cmp	 esi, ecx
  001f6	7f 31		 jg	 SHORT $LN28@SetGateBlo
  001f8	8b fe		 mov	 edi, esi
  001fa	c1 e7 08	 shl	 edi, 8
  001fd	0f 1f 00	 npad	 3
$LL33@SetGateBlo:

; 1630 : 				{
; 1631 : 					if( i == nX && j == nY )

  00200	3b da		 cmp	 ebx, edx
  00202	75 04		 jne	 SHORT $LN70@SetGateBlo
  00204	3b f0		 cmp	 esi, eax
  00206	74 16		 je	 SHORT $LN31@SetGateBlo
$LN70@SetGateBlo:

; 1632 : 						continue;
; 1633 : 
; 1634 : 					MapC[nMapNumber].m_attrbuf[j*256+i] &= ~16;

  00208	69 4d 08 28 38
	05 00		 imul	 ecx, DWORD PTR _nMapNumber$[ebp], 342056
  0020f	8b 89 10 00 00
	00		 mov	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[ecx+16]
  00215	03 cf		 add	 ecx, edi
  00217	80 24 19 ef	 and	 BYTE PTR [ecx+ebx], 239	; 000000efH
  0021b	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]
$LN31@SetGateBlo:

; 1628 : 			{
; 1629 : 				for(int j = nY-2; j <= nY+2; j++)

  0021e	46		 inc	 esi
  0021f	81 c7 00 01 00
	00		 add	 edi, 256		; 00000100H
  00225	3b f1		 cmp	 esi, ecx
  00227	7e d7		 jle	 SHORT $LL33@SetGateBlo
$LN28@SetGateBlo:

; 1626 : 		{
; 1627 : 			for(int i = nX-3; i <= nX; i++)

  00229	43		 inc	 ebx
  0022a	8d 70 fe	 lea	 esi, DWORD PTR [eax-2]
  0022d	3b da		 cmp	 ebx, edx
  0022f	7e c3		 jle	 SHORT $LL30@SetGateBlo
  00231	5f		 pop	 edi
  00232	5e		 pop	 esi
  00233	5b		 pop	 ebx

; 1674 : 				}
; 1675 : 			}
; 1676 : 		}
; 1677 : 		break;
; 1678 : 	}
; 1679 : }

  00234	5d		 pop	 ebp
  00235	c2 18 00	 ret	 24			; 00000018H
$LN68@SetGateBlo:

; 1635 : 				}
; 1636 : 			}
; 1637 : 		}
; 1638 : 		else if( nDir == 1 )

  00238	83 f9 01	 cmp	 ecx, 1
  0023b	75 5b		 jne	 SHORT $LN71@SetGateBlo

; 1639 : 		{
; 1640 : 			for(int i = nX-2; i <= nX+2; i++)

  0023d	8d 4a 02	 lea	 ecx, DWORD PTR [edx+2]
  00240	8d 5a fe	 lea	 ebx, DWORD PTR [edx-2]
  00243	3b d9		 cmp	 ebx, ecx
  00245	0f 8f 09 01 00
	00		 jg	 $LN148@SetGateBlo
  0024b	8d 48 03	 lea	 ecx, DWORD PTR [eax+3]
  0024e	66 90		 npad	 2
$LL36@SetGateBlo:

; 1641 : 			{
; 1642 : 				for(int j = nY; j <= nY+3; j++)

  00250	8b f0		 mov	 esi, eax
  00252	3b c1		 cmp	 eax, ecx
  00254	7f 33		 jg	 SHORT $LN34@SetGateBlo
  00256	8b f8		 mov	 edi, eax
  00258	c1 e7 08	 shl	 edi, 8
  0025b	0f 1f 44 00 00	 npad	 5
$LL39@SetGateBlo:

; 1643 : 				{
; 1644 : 					if( i == nX && j == nY )

  00260	3b da		 cmp	 ebx, edx
  00262	75 04		 jne	 SHORT $LN73@SetGateBlo
  00264	3b f0		 cmp	 esi, eax
  00266	74 16		 je	 SHORT $LN37@SetGateBlo
$LN73@SetGateBlo:

; 1645 : 						continue;
; 1646 : 
; 1647 : 					MapC[nMapNumber].m_attrbuf[j*256+i] &= ~16;

  00268	69 4d 08 28 38
	05 00		 imul	 ecx, DWORD PTR _nMapNumber$[ebp], 342056
  0026f	8b 89 10 00 00
	00		 mov	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[ecx+16]
  00275	03 cf		 add	 ecx, edi
  00277	80 24 19 ef	 and	 BYTE PTR [ecx+ebx], 239	; 000000efH
  0027b	8d 48 03	 lea	 ecx, DWORD PTR [eax+3]
$LN37@SetGateBlo:

; 1641 : 			{
; 1642 : 				for(int j = nY; j <= nY+3; j++)

  0027e	46		 inc	 esi
  0027f	81 c7 00 01 00
	00		 add	 edi, 256		; 00000100H
  00285	3b f1		 cmp	 esi, ecx
  00287	7e d7		 jle	 SHORT $LL39@SetGateBlo
$LN34@SetGateBlo:

; 1639 : 		{
; 1640 : 			for(int i = nX-2; i <= nX+2; i++)

  00289	43		 inc	 ebx
  0028a	8d 72 02	 lea	 esi, DWORD PTR [edx+2]
  0028d	3b de		 cmp	 ebx, esi
  0028f	7e bf		 jle	 SHORT $LL36@SetGateBlo
  00291	5f		 pop	 edi
  00292	5e		 pop	 esi
  00293	5b		 pop	 ebx

; 1674 : 				}
; 1675 : 			}
; 1676 : 		}
; 1677 : 		break;
; 1678 : 	}
; 1679 : }

  00294	5d		 pop	 ebp
  00295	c2 18 00	 ret	 24			; 00000018H
$LN71@SetGateBlo:

; 1648 : 				}
; 1649 : 			}
; 1650 : 		}
; 1651 : 		else if( nDir == 5 )

  00298	83 f9 05	 cmp	 ecx, 5
  0029b	75 5b		 jne	 SHORT $LN74@SetGateBlo

; 1652 : 		{
; 1653 : 			for(int i = nX-2; i <= nX+2; i++)

  0029d	8d 4a 02	 lea	 ecx, DWORD PTR [edx+2]
  002a0	8d 5a fe	 lea	 ebx, DWORD PTR [edx-2]
  002a3	3b d9		 cmp	 ebx, ecx
  002a5	0f 8f a9 00 00
	00		 jg	 $LN148@SetGateBlo
  002ab	8d 70 fd	 lea	 esi, DWORD PTR [eax-3]
  002ae	66 90		 npad	 2
$LL42@SetGateBlo:

; 1654 : 			{
; 1655 : 				for(int j = nY-3; j <= nY; j++)

  002b0	3b f0		 cmp	 esi, eax
  002b2	7f 35		 jg	 SHORT $LN40@SetGateBlo
  002b4	8b fe		 mov	 edi, esi
  002b6	c1 e7 08	 shl	 edi, 8
  002b9	0f 1f 80 00 00
	00 00		 npad	 7
$LL45@SetGateBlo:

; 1656 : 				{
; 1657 : 					if( i == nX && j == nY )

  002c0	3b da		 cmp	 ebx, edx
  002c2	75 04		 jne	 SHORT $LN76@SetGateBlo
  002c4	3b f0		 cmp	 esi, eax
  002c6	74 13		 je	 SHORT $LN43@SetGateBlo
$LN76@SetGateBlo:

; 1658 : 						continue;
; 1659 : 
; 1660 : 					MapC[nMapNumber].m_attrbuf[j*256+i] &= ~16;

  002c8	69 4d 08 28 38
	05 00		 imul	 ecx, DWORD PTR _nMapNumber$[ebp], 342056
  002cf	8b 89 10 00 00
	00		 mov	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[ecx+16]
  002d5	03 cf		 add	 ecx, edi
  002d7	80 24 19 ef	 and	 BYTE PTR [ecx+ebx], 239	; 000000efH
$LN43@SetGateBlo:

; 1654 : 			{
; 1655 : 				for(int j = nY-3; j <= nY; j++)

  002db	46		 inc	 esi
  002dc	81 c7 00 01 00
	00		 add	 edi, 256		; 00000100H
  002e2	3b f0		 cmp	 esi, eax
  002e4	7e da		 jle	 SHORT $LL45@SetGateBlo
  002e6	8d 4a 02	 lea	 ecx, DWORD PTR [edx+2]
$LN40@SetGateBlo:

; 1652 : 		{
; 1653 : 			for(int i = nX-2; i <= nX+2; i++)

  002e9	43		 inc	 ebx
  002ea	8d 70 fd	 lea	 esi, DWORD PTR [eax-3]
  002ed	3b d9		 cmp	 ebx, ecx
  002ef	7e bf		 jle	 SHORT $LL42@SetGateBlo
  002f1	5f		 pop	 edi
  002f2	5e		 pop	 esi
  002f3	5b		 pop	 ebx

; 1674 : 				}
; 1675 : 			}
; 1676 : 		}
; 1677 : 		break;
; 1678 : 	}
; 1679 : }

  002f4	5d		 pop	 ebp
  002f5	c2 18 00	 ret	 24			; 00000018H
$LN74@SetGateBlo:

; 1661 : 				}
; 1662 : 			}
; 1663 : 		}
; 1664 : 		else if( nDir == 7 )

  002f8	83 f9 07	 cmp	 ecx, 7
  002fb	75 57		 jne	 SHORT $LN148@SetGateBlo

; 1665 : 		{
; 1666 : 			for(int i = nX; i <= nX+3; i++)

  002fd	8d 4a 03	 lea	 ecx, DWORD PTR [edx+3]
  00300	8b da		 mov	 ebx, edx
  00302	3b d1		 cmp	 edx, ecx
  00304	7f 4e		 jg	 SHORT $LN148@SetGateBlo
  00306	8d 70 fe	 lea	 esi, DWORD PTR [eax-2]
  00309	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]
  0030c	0f 1f 40 00	 npad	 4
$LL48@SetGateBlo:

; 1667 : 			{
; 1668 : 				for(int j = nY-2; j <= nY+2; j++)

  00310	3b f1		 cmp	 esi, ecx
  00312	7f 35		 jg	 SHORT $LN46@SetGateBlo
  00314	8b fe		 mov	 edi, esi
  00316	c1 e7 08	 shl	 edi, 8
  00319	0f 1f 80 00 00
	00 00		 npad	 7
$LL51@SetGateBlo:

; 1669 : 				{
; 1670 : 					if( i == nX && j == nY )

  00320	3b da		 cmp	 ebx, edx
  00322	75 04		 jne	 SHORT $LN78@SetGateBlo
  00324	3b f0		 cmp	 esi, eax
  00326	74 16		 je	 SHORT $LN49@SetGateBlo
$LN78@SetGateBlo:

; 1671 : 						continue;
; 1672 : 
; 1673 : 					MapC[nMapNumber].m_attrbuf[j*256+i] &= ~16;

  00328	69 4d 08 28 38
	05 00		 imul	 ecx, DWORD PTR _nMapNumber$[ebp], 342056
  0032f	8b 89 10 00 00
	00		 mov	 ecx, DWORD PTR ?MapC@@3PAVMapClass@@A[ecx+16]
  00335	03 cf		 add	 ecx, edi
  00337	80 24 19 ef	 and	 BYTE PTR [ecx+ebx], 239	; 000000efH
  0033b	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]
$LN49@SetGateBlo:

; 1667 : 			{
; 1668 : 				for(int j = nY-2; j <= nY+2; j++)

  0033e	46		 inc	 esi
  0033f	81 c7 00 01 00
	00		 add	 edi, 256		; 00000100H
  00345	3b f1		 cmp	 esi, ecx
  00347	7e d7		 jle	 SHORT $LL51@SetGateBlo
$LN46@SetGateBlo:

; 1665 : 		{
; 1666 : 			for(int i = nX; i <= nX+3; i++)

  00349	8d 72 03	 lea	 esi, DWORD PTR [edx+3]
  0034c	43		 inc	 ebx
  0034d	3b de		 cmp	 ebx, esi
  0034f	8d 70 fe	 lea	 esi, DWORD PTR [eax-2]
  00352	7e bc		 jle	 SHORT $LL48@SetGateBlo
$LN148@SetGateBlo:
  00354	5f		 pop	 edi
  00355	5e		 pop	 esi
  00356	5b		 pop	 ebx
$LN53@SetGateBlo:

; 1674 : 				}
; 1675 : 			}
; 1676 : 		}
; 1677 : 		break;
; 1678 : 	}
; 1679 : }

  00357	5d		 pop	 ebp
  00358	c2 18 00	 ret	 24			; 00000018H
?SetGateBlockState@CImperialGuardian@@QAEXHHHHHH@Z ENDP	; CImperialGuardian::SetGateBlockState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z
_TEXT	SEGMENT
_vtTemp$ = -48						; size = 12
_this$GSCopy$1$ = -36					; size = 4
_pMsg$ = -32						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_nZoneIndex$ = 8					; size = 4
_btMsgType$ = 12					; size = 1
_dwRemainTick$ = 16					; size = 4
?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z PROC ; CImperialGuardian::GCNotifyRemainTickCount, COMDAT
; _this$ = ecx

; 1515 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 dc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00030	8b 5d 08	 mov	 ebx, DWORD PTR _nZoneIndex$[ebp]

; 1516 : 	PMSG_IMPERIALFORT_PLAYINFO pMsg = {0};
; 1517 : 	PHeadSubSetB((LPBYTE)&pMsg,0xF7,0x04,sizeof(pMsg));

  00033	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00036	6a 10		 push	 16			; 00000010H
  00038	6a 04		 push	 4
  0003a	0f 57 c0	 xorps	 xmm0, xmm0
  0003d	c6 45 e0 00	 mov	 BYTE PTR _pMsg$[ebp], 0
  00041	68 f7 00 00 00	 push	 247			; 000000f7H
  00046	50		 push	 eax
  00047	66 0f d6 45 e1	 movq	 QWORD PTR _pMsg$[ebp+1], xmm0
  0004c	c7 45 e9 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+9], 0
  00053	66 c7 45 ed 00
	00		 mov	 WORD PTR _pMsg$[ebp+13], 0
  00059	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+15], 0
  0005d	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 1518 : 
; 1519 : 	pMsg.btState = btMsgType;

  00062	8a 45 0c	 mov	 al, BYTE PTR _btMsgType$[ebp]
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	88 45 e4	 mov	 BYTE PTR _pMsg$[ebp+4], al

; 1520 : 	pMsg.btZoneIndex = nZoneIndex+1;
; 1521 : 	pMsg.iMonCount = this->GetLiveMonsterCount(nZoneIndex);

  0006b	8b ce		 mov	 ecx, esi
  0006d	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00070	88 45 e6	 mov	 BYTE PTR _pMsg$[ebp+6], al
  00073	53		 push	 ebx
  00074	e8 00 00 00 00	 call	 ?GetLiveMonsterCount@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetLiveMonsterCount

; 1522 : 	pMsg.btDayOfWeek = this->m_ZoneInfo[nZoneIndex].m_wMonsterRegenTable-1;

  00079	6b d3 64	 imul	 edx, ebx, 100
  0007c	03 d6		 add	 edx, esi
  0007e	88 45 ec	 mov	 BYTE PTR _pMsg$[ebp+12], al

; 1523 : 
; 1524 : 	if( pMsg.btDayOfWeek < 1 )

  00081	be 07 00 00 00	 mov	 esi, 7
  00086	8a 4a 24	 mov	 cl, BYTE PTR [edx+36]
  00089	fe c9		 dec	 cl
  0008b	80 f9 01	 cmp	 cl, 1
  0008e	0f b6 c1	 movzx	 eax, cl
  00091	0f 42 c6	 cmovb	 eax, esi
  00094	88 45 e5	 mov	 BYTE PTR _pMsg$[ebp+5], al

; 1525 : 		pMsg.btDayOfWeek = 7;
; 1526 : 
; 1527 : 	if( btMsgType == 0 )

  00097	8a 45 0c	 mov	 al, BYTE PTR _btMsgType$[ebp]
  0009a	84 c0		 test	 al, al
  0009c	75 05		 jne	 SHORT $LN6@GCNotifyRe

; 1528 : 	{
; 1529 : 		pMsg.iTime = this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC2;

  0009e	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  000a1	eb 14		 jmp	 SHORT $LN202@GCNotifyRe
$LN6@GCNotifyRe:

; 1530 : 	}
; 1531 : 	else if( btMsgType == 1 )

  000a3	3c 01		 cmp	 al, 1
  000a5	75 05		 jne	 SHORT $LN8@GCNotifyRe

; 1532 : 	{
; 1533 : 		pMsg.iTime = this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC3;

  000a7	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  000aa	eb 0b		 jmp	 SHORT $LN202@GCNotifyRe
$LN8@GCNotifyRe:

; 1534 : 	}
; 1535 : 	else if( btMsgType == 2 )

  000ac	3c 02		 cmp	 al, 2
  000ae	0f 85 c4 00 00
	00		 jne	 $LN10@GCNotifyRe

; 1536 : 	{
; 1537 : 		pMsg.iTime = this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC;

  000b4	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
$LN202@GCNotifyRe:
  000b7	89 45 e8	 mov	 DWORD PTR _pMsg$[ebp+8], eax

; 1545 : 	std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  000ba	8d 4d d0	 lea	 ecx, DWORD PTR _vtTemp$[ebp]
  000bd	8d 42 3c	 lea	 eax, DWORD PTR [edx+60]
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  000c6	8b 5d d0	 mov	 ebx, DWORD PTR _vtTemp$[ebp]
  000c9	8b f3		 mov	 esi, ebx

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000cb	8b 7d d4	 mov	 edi, DWORD PTR _vtTemp$[ebp+4]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1545 : 	std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  000ce	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000d5	3b df		 cmp	 ebx, edi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1548 : 	for( ; it != vtTemp.end(); it++)

  000d7	74 42		 je	 SHORT $LN3@GCNotifyRe
  000d9	8b 5d dc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  000dc	0f 1f 40 00	 npad	 4
$LL4@GCNotifyRe:

; 1549 : 	{
; 1550 : 		int nResult = *it;

  000e0	8b 16		 mov	 edx, DWORD PTR [esi]

; 1551 : 
; 1552 : 		if( IF_MAP_RANGE(gObj[nResult].MapNumber) != FALSE )

  000e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e7	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  000ed	8a 84 01 23 01
	00 00		 mov	 al, BYTE PTR [ecx+eax+291]
  000f4	3c 45		 cmp	 al, 69			; 00000045H
  000f6	72 19		 jb	 SHORT $LN2@GCNotifyRe
  000f8	b1 48		 mov	 cl, 72			; 00000048H
  000fa	3a c8		 cmp	 cl, al
  000fc	1b c0		 sbb	 eax, eax
  000fe	83 c0 01	 add	 eax, 1
  00101	74 0e		 je	 SHORT $LN2@GCNotifyRe

; 1553 : 		{
; 1554 : 			this->GCSendDataToUser(nResult,(LPBYTE)&pMsg,sizeof(pMsg));

  00103	6a 10		 push	 16			; 00000010H
  00105	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00108	8b cb		 mov	 ecx, ebx
  0010a	50		 push	 eax
  0010b	52		 push	 edx
  0010c	e8 00 00 00 00	 call	 ?GCSendDataToUser@CImperialGuardian@@QAEXHPAEH@Z ; CImperialGuardian::GCSendDataToUser
$LN2@GCNotifyRe:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  00111	83 c6 04	 add	 esi, 4

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00114	3b f7		 cmp	 esi, edi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1548 : 	for( ; it != vtTemp.end(); it++)

  00116	75 c8		 jne	 SHORT $LL4@GCNotifyRe
  00118	8b 5d d0	 mov	 ebx, DWORD PTR _vtTemp$[ebp]
$LN3@GCNotifyRe:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  0011b	85 db		 test	 ebx, ebx
  0011d	74 55		 je	 SHORT $LN90@GCNotifyRe

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0011f	8b 45 d8	 mov	 eax, DWORD PTR _vtTemp$[ebp+8]
  00122	2b c3		 sub	 eax, ebx
  00124	c1 f8 02	 sar	 eax, 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00127	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0012c	76 05		 jbe	 SHORT $LN157@GCNotifyRe
  0012e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN203@GCNotifyRe:
$LN157@GCNotifyRe:

; 101  : 	const size_t _User_size = _Count * _Sz;

  00133	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00136	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0013b	72 2e		 jb	 SHORT $LN158@GCNotifyRe

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0013d	f6 c3 1f	 test	 bl, 31			; 0000001fH
  00140	74 05		 je	 SHORT $LN159@GCNotifyRe
  00142	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN204@GCNotifyRe:
$LN159@GCNotifyRe:

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00147	8b 43 fc	 mov	 eax, DWORD PTR [ebx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0014a	3b c3		 cmp	 eax, ebx
  0014c	72 05		 jb	 SHORT $LN160@GCNotifyRe
  0014e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN205@GCNotifyRe:
$LN160@GCNotifyRe:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00153	2b d8		 sub	 ebx, eax
  00155	83 fb 04	 cmp	 ebx, 4
  00158	73 05		 jae	 SHORT $LN161@GCNotifyRe
  0015a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN206@GCNotifyRe:
$LN161@GCNotifyRe:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0015f	83 fb 23	 cmp	 ebx, 35			; 00000023H
  00162	76 05		 jbe	 SHORT $LN162@GCNotifyRe
  00164	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN207@GCNotifyRe:
$LN162@GCNotifyRe:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00169	8b d8		 mov	 ebx, eax
$LN158@GCNotifyRe:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  0016b	53		 push	 ebx
  0016c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00171	83 c4 04	 add	 esp, 4
$LN90@GCNotifyRe:
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1557 : 	return true;

  00174	b0 01		 mov	 al, 1
  00176	eb 14		 jmp	 SHORT $LN1@GCNotifyRe
$LN10@GCNotifyRe:

; 1538 : 	}
; 1539 : 	else
; 1540 : 	{
; 1541 : 		LogAddTD("[IMPERIALGUARDIAN][GCNotifyRemainTickCountFunc] Invalid MsgType : %d ",btMsgType);

  00178	0f b6 c0	 movzx	 eax, al
  0017b	50		 push	 eax
  0017c	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@HBDBBIDA@?$FLIMPERIALGUARDIAN?$FN?$FLGCNotifyRemai@
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00187	83 c4 08	 add	 esp, 8

; 1542 : 		return false;

  0018a	32 c0		 xor	 al, al
$LN1@GCNotifyRe:

; 1558 : }

  0018c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0018f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00196	59		 pop	 ecx
  00197	5f		 pop	 edi
  00198	5e		 pop	 esi
  00199	5b		 pop	 ebx
  0019a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019d	33 cd		 xor	 ecx, ebp
  0019f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c2 0c 00	 ret	 12			; 0000000cH
$LN201@GCNotifyRe:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _vtTemp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z ENDP ; CImperialGuardian::GCNotifyRemainTickCount
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?GCSendDataToUser@CImperialGuardian@@QAEXHPAEH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_lpMsg$ = 12						; size = 4
_nSize$ = 16						; size = 4
?GCSendDataToUser@CImperialGuardian@@QAEXHPAEH@Z PROC	; CImperialGuardian::GCSendDataToUser, COMDAT
; _this$ = ecx

; 1493 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1494 : 	if( !OBJMAX_RANGE(aIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 37		 js	 SHORT $LN3@GCSendData
  0000a	33 c0		 xor	 eax, eax
  0000c	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00012	0f 9e c0	 setle	 al
  00015	85 c0		 test	 eax, eax
  00017	74 28		 je	 SHORT $LN3@GCSendData

; 1495 : 		return;
; 1496 : 
; 1497 : 	if( gObj[aIndex].Connected == PLAYER_PLAYING &&

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001e	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00024	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  00029	75 16		 jne	 SHORT $LN3@GCSendData
  0002b	80 7c 01 50 01	 cmp	 BYTE PTR [ecx+eax+80], 1
  00030	75 0f		 jne	 SHORT $LN3@GCSendData

; 1498 : 		gObj[aIndex].Type == OBJ_USER )
; 1499 : 	{
; 1500 : 		DataSend(aIndex,lpMsg,nSize);

  00032	ff 75 10	 push	 DWORD PTR _nSize$[ebp]
  00035	ff 75 0c	 push	 DWORD PTR _lpMsg$[ebp]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@GCSendData:

; 1501 : 	}
; 1502 : }

  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
?GCSendDataToUser@CImperialGuardian@@QAEXHPAEH@Z ENDP	; CImperialGuardian::GCSendDataToUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?GCMissionFailUseDie@CImperialGuardian@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$ = -272						; size = 12
_szText$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_nUserIndex$ = 8					; size = 4
?GCMissionFailUseDie@CImperialGuardian@@QAEXH@Z PROC	; CImperialGuardian::GCMissionFailUseDie, COMDAT
; _this$ = ecx

; 1477 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi

; 1478 : 	if( !OBJMAX_RANGE(nUserIndex) )

  00014	8b 75 08	 mov	 esi, DWORD PTR _nUserIndex$[ebp]
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx
  0001a	85 f6		 test	 esi, esi
  0001c	0f 88 aa 00 00
	00		 js	 $LN1@GCMissionF
  00022	33 c0		 xor	 eax, eax
  00024	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  0002a	0f 9e c0	 setle	 al
  0002d	85 c0		 test	 eax, eax
  0002f	0f 84 97 00 00
	00		 je	 $LN1@GCMissionF

; 1479 : 		return;
; 1480 : 
; 1481 : 	PMSG_IMPERIALFORT_PLAYEND pMsg = {0};
; 1482 : 	PHeadSubSetB((LPBYTE)&pMsg,0xF7,0x06,sizeof(pMsg));

  00035	6a 0c		 push	 12			; 0000000cH
  00037	6a 06		 push	 6
  00039	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0003f	c6 85 f0 fe ff
	ff 00		 mov	 BYTE PTR _pMsg$[ebp], 0
  00046	0f 57 c0	 xorps	 xmm0, xmm0
  00049	66 c7 85 f9 fe
	ff ff 00 00	 mov	 WORD PTR _pMsg$[ebp+9], 0
  00052	68 f7 00 00 00	 push	 247			; 000000f7H
  00057	50		 push	 eax
  00058	66 0f d6 85 f1
	fe ff ff	 movq	 QWORD PTR _pMsg$[ebp+1], xmm0
  00060	c6 85 fb fe ff
	ff 00		 mov	 BYTE PTR _pMsg$[ebp+11], 0
  00067	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  0006c	83 c4 10	 add	 esp, 16			; 00000010H

; 1483 : 	pMsg.btResult = 0;

  0006f	c6 85 f4 fe ff
	ff 00		 mov	 BYTE PTR _pMsg$[ebp+4], 0

; 1484 : 
; 1485 : 	this->GCSendDataToUser(nUserIndex,(LPBYTE)&pMsg,sizeof(pMsg));

  00076	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0007c	8b cf		 mov	 ecx, edi
  0007e	6a 0c		 push	 12			; 0000000cH
  00080	50		 push	 eax
  00081	56		 push	 esi
  00082	e8 00 00 00 00	 call	 ?GCSendDataToUser@CImperialGuardian@@QAEXHPAEH@Z ; CImperialGuardian::GCSendDataToUser
  00087	68 00 01 00 00	 push	 256			; 00000100H
  0008c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  00092	6a 00		 push	 0
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 _memset
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1486 : 
; 1487 : 	char szText[256] = {0};
; 1488 : 	wsprintf(szText,lMsg.Get(MSGGET(13,111)));

  0009d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000a2	68 6f 0d 00 00	 push	 3439			; 00000d6fH
  000a7	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000ac	50		 push	 eax
  000ad	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  000b3	50		 push	 eax
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 1489 : 	GCServerMsgStringSend(szText,nUserIndex,0);

  000ba	6a 00		 push	 0
  000bc	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  000c2	56		 push	 esi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  000c9	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@GCMissionF:

; 1490 : }

  000cc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cf	5f		 pop	 edi
  000d0	33 cd		 xor	 ecx, ebp
  000d2	5e		 pop	 esi
  000d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c2 04 00	 ret	 4
?GCMissionFailUseDie@CImperialGuardian@@QAEXH@Z ENDP	; CImperialGuardian::GCMissionFailUseDie
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?GCMissionFail@CImperialGuardian@@QAEXH@Z
_TEXT	SEGMENT
_vtTemp$ = -300						; size = 12
_this$GSCopy$1$ = -288					; size = 4
_pMsg$ = -284						; size = 12
_szText$2 = -272					; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_nZoneIndex$ = 8					; size = 4
?GCMissionFail@CImperialGuardian@@QAEXH@Z PROC		; CImperialGuardian::GCMissionFail, COMDAT
; _this$ = ecx

; 1448 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GCMissionFail@CImperialGuardian@@QAEXH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b d9		 mov	 ebx, ecx
  00030	89 9d e0 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  00036	8b 75 08	 mov	 esi, DWORD PTR _nZoneIndex$[ebp]

; 1449 : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  00039	85 f6		 test	 esi, esi
  0003b	0f 88 7d 01 00
	00		 js	 $LN86@GCMissionF
  00041	33 c0		 xor	 eax, eax
  00043	83 fe 03	 cmp	 esi, 3
  00046	0f 9e c0	 setle	 al
  00049	85 c0		 test	 eax, eax
  0004b	0f 84 6d 01 00
	00		 je	 $LN86@GCMissionF

; 1450 : 	{
; 1451 : 		return;
; 1452 : 	}
; 1453 : 
; 1454 : 	PMSG_IMPERIALFORT_PLAYEND pMsg = {0};
; 1455 : 	PHeadSubSetB((LPBYTE)&pMsg,0xF7,0x06,sizeof(pMsg));

  00051	6a 0c		 push	 12			; 0000000cH
  00053	6a 06		 push	 6
  00055	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0005b	c6 85 e4 fe ff
	ff 00		 mov	 BYTE PTR _pMsg$[ebp], 0
  00062	0f 57 c0	 xorps	 xmm0, xmm0
  00065	66 c7 85 ed fe
	ff ff 00 00	 mov	 WORD PTR _pMsg$[ebp+9], 0
  0006e	68 f7 00 00 00	 push	 247			; 000000f7H
  00073	50		 push	 eax
  00074	66 0f d6 85 e5
	fe ff ff	 movq	 QWORD PTR _pMsg$[ebp+1], xmm0
  0007c	c6 85 ef fe ff
	ff 00		 mov	 BYTE PTR _pMsg$[ebp+11], 0
  00083	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 1458 : 		std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  00088	6b c6 64	 imul	 eax, esi, 100
  0008b	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _vtTemp$[ebp]
  00091	83 c4 10	 add	 esp, 16			; 00000010H
  00094	c6 85 e8 fe ff
	ff 00		 mov	 BYTE PTR _pMsg$[ebp+4], 0
  0009b	83 c3 3c	 add	 ebx, 60			; 0000003cH
  0009e	03 c3		 add	 eax, ebx
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  000a6	8b 9d d4 fe ff
	ff		 mov	 ebx, DWORD PTR _vtTemp$[ebp]
  000ac	8b f3		 mov	 esi, ebx
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1458 : 		std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  000ae	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000b5	3b 9d d8 fe ff
	ff		 cmp	 ebx, DWORD PTR _vtTemp$[ebp+4]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1461 : 	for( ; it != vtTemp.end(); it++ )

  000bb	0f 84 a1 00 00
	00		 je	 $LN3@GCMissionF
  000c1	8b 9d e0 fe ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  000c7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@GCMissionF:

; 1462 : 	{
; 1463 : 		int nResult = *it;

  000d0	8b 3e		 mov	 edi, DWORD PTR [esi]

; 1464 : 
; 1465 : 		if( IF_MAP_RANGE(gObj[nResult].MapNumber) != FALSE )

  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d7	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048
  000dd	8a 84 01 23 01
	00 00		 mov	 al, BYTE PTR [ecx+eax+291]
  000e4	3c 45		 cmp	 al, 69			; 00000045H
  000e6	73 04		 jae	 SHORT $LN10@GCMissionF
  000e8	33 c0		 xor	 eax, eax
  000ea	eb 07		 jmp	 SHORT $LN11@GCMissionF
$LN10@GCMissionF:
  000ec	b1 48		 mov	 cl, 72			; 00000048H
  000ee	3a c8		 cmp	 cl, al
  000f0	1b c0		 sbb	 eax, eax
  000f2	40		 inc	 eax
$LN11@GCMissionF:
  000f3	85 c0		 test	 eax, eax
  000f5	74 56		 je	 SHORT $LN2@GCMissionF

; 1466 : 		{
; 1467 : 			this->GCSendDataToUser(nResult,(LPBYTE)&pMsg,sizeof(pMsg));

  000f7	6a 0c		 push	 12			; 0000000cH
  000f9	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  000ff	8b cb		 mov	 ecx, ebx
  00101	50		 push	 eax
  00102	57		 push	 edi
  00103	e8 00 00 00 00	 call	 ?GCSendDataToUser@CImperialGuardian@@QAEXHPAEH@Z ; CImperialGuardian::GCSendDataToUser
  00108	68 00 01 00 00	 push	 256			; 00000100H
  0010d	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szText$2[ebp]
  00113	6a 00		 push	 0
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 _memset
  0011b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1468 : 
; 1469 : 			char szText[256] = {0};
; 1470 : 			wsprintf(szText,lMsg.Get(MSGGET(13,111)));

  0011e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00123	68 6f 0d 00 00	 push	 3439			; 00000d6fH
  00128	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0012d	50		 push	 eax
  0012e	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szText$2[ebp]
  00134	50		 push	 eax
  00135	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 1471 : 			GCServerMsgStringSend(szText,nResult,0);

  0013b	6a 00		 push	 0
  0013d	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szText$2[ebp]
  00143	57		 push	 edi
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0014a	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@GCMissionF:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  0014d	83 c6 04	 add	 esi, 4

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00150	3b b5 d8 fe ff
	ff		 cmp	 esi, DWORD PTR _vtTemp$[ebp+4]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1461 : 	for( ; it != vtTemp.end(); it++ )

  00156	0f 85 74 ff ff
	ff		 jne	 $LL4@GCMissionF
  0015c	8b 9d d4 fe ff
	ff		 mov	 ebx, DWORD PTR _vtTemp$[ebp]
$LN3@GCMissionF:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00162	85 db		 test	 ebx, ebx
  00164	74 58		 je	 SHORT $LN86@GCMissionF

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00166	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _vtTemp$[ebp+8]
  0016c	2b c3		 sub	 eax, ebx
  0016e	c1 f8 02	 sar	 eax, 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00171	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00176	76 05		 jbe	 SHORT $LN153@GCMissionF
  00178	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN198@GCMissionF:
$LN153@GCMissionF:

; 101  : 	const size_t _User_size = _Count * _Sz;

  0017d	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00180	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00185	72 2e		 jb	 SHORT $LN154@GCMissionF

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00187	f6 c3 1f	 test	 bl, 31			; 0000001fH
  0018a	74 05		 je	 SHORT $LN155@GCMissionF
  0018c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN199@GCMissionF:
$LN155@GCMissionF:

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00191	8b 43 fc	 mov	 eax, DWORD PTR [ebx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00194	3b c3		 cmp	 eax, ebx
  00196	72 05		 jb	 SHORT $LN156@GCMissionF
  00198	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN200@GCMissionF:
$LN156@GCMissionF:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0019d	2b d8		 sub	 ebx, eax
  0019f	83 fb 04	 cmp	 ebx, 4
  001a2	73 05		 jae	 SHORT $LN157@GCMissionF
  001a4	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN201@GCMissionF:
$LN157@GCMissionF:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  001a9	83 fb 23	 cmp	 ebx, 35			; 00000023H
  001ac	76 05		 jbe	 SHORT $LN158@GCMissionF
  001ae	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN202@GCMissionF:
$LN158@GCMissionF:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  001b3	8b d8		 mov	 ebx, eax
$LN154@GCMissionF:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  001b5	53		 push	 ebx
  001b6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001bb	83 c4 04	 add	 esp, 4
$LN86@GCMissionF:
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1474 : }

  001be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c8	59		 pop	 ecx
  001c9	5f		 pop	 edi
  001ca	5e		 pop	 esi
  001cb	5b		 pop	 ebx
  001cc	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001cf	33 cd		 xor	 ecx, ebp
  001d1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d6	8b e5		 mov	 esp, ebp
  001d8	5d		 pop	 ebp
  001d9	c2 04 00	 ret	 4
$LN197@GCMissionF:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GCMissionFail@CImperialGuardian@@QAEXH@Z$0:
  00000	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _vtTemp$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$?GCMissionFail@CImperialGuardian@@QAEXH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a d0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-304]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GCMissionFail@CImperialGuardian@@QAEXH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GCMissionFail@CImperialGuardian@@QAEXH@Z ENDP		; CImperialGuardian::GCMissionFail
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?GCNotifyAllZoneClear@CImperialGuardian@@QAE_NH@Z
_TEXT	SEGMENT
_vtTemp$ = -304						; size = 12
_nZoneIndex$GSCopy$1$ = -292				; size = 4
tv637 = -288						; size = 4
_this$GSCopy$1$ = -288					; size = 4
_pMsg$ = -284						; size = 12
_szText$2 = -272					; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_nZoneIndex$ = 8					; size = 4
?GCNotifyAllZoneClear@CImperialGuardian@@QAE_NH@Z PROC	; CImperialGuardian::GCNotifyAllZoneClear, COMDAT
; _this$ = ecx

; 1389 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GCNotifyAllZoneClear@CImperialGuardian@@QAE_NH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b d9		 mov	 ebx, ecx
  00030	89 9d e0 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  00036	8b 75 08	 mov	 esi, DWORD PTR _nZoneIndex$[ebp]
  00039	89 b5 dc fe ff
	ff		 mov	 DWORD PTR _nZoneIndex$GSCopy$1$[ebp], esi

; 1390 : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  0003f	85 f6		 test	 esi, esi
  00041	0f 88 50 02 00
	00		 js	 $LN200@GCNotifyAl
  00047	33 c0		 xor	 eax, eax
  00049	83 fe 03	 cmp	 esi, 3
  0004c	0f 9e c0	 setle	 al
  0004f	85 c0		 test	 eax, eax
  00051	0f 84 40 02 00
	00		 je	 $LN200@GCNotifyAl

; 1393 : 	}
; 1394 : 
; 1395 : 	PMSG_IMPERIALFORT_PLAYEND pMsg = {0};
; 1396 : 	PHeadSubSetB((LPBYTE)&pMsg,0xF7,0x06,sizeof(pMsg));

  00057	6a 0c		 push	 12			; 0000000cH
  00059	6a 06		 push	 6
  0005b	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00061	c6 85 e4 fe ff
	ff 00		 mov	 BYTE PTR _pMsg$[ebp], 0
  00068	0f 57 c0	 xorps	 xmm0, xmm0
  0006b	66 c7 85 ed fe
	ff ff 00 00	 mov	 WORD PTR _pMsg$[ebp+9], 0
  00074	68 f7 00 00 00	 push	 247			; 000000f7H
  00079	50		 push	 eax
  0007a	66 0f d6 85 e5
	fe ff ff	 movq	 QWORD PTR _pMsg$[ebp+1], xmm0
  00082	c6 85 ef fe ff
	ff 00		 mov	 BYTE PTR _pMsg$[ebp+11], 0
  00089	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 1399 : 	std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  0008e	6b c6 64	 imul	 eax, esi, 100
  00091	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _vtTemp$[ebp]
  00097	83 c4 10	 add	 esp, 16			; 00000010H
  0009a	c6 85 e8 fe ff
	ff 02		 mov	 BYTE PTR _pMsg$[ebp+4], 2
  000a1	83 c3 3c	 add	 ebx, 60			; 0000003cH
  000a4	03 c3		 add	 eax, ebx
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  000ac	8b 9d d0 fe ff
	ff		 mov	 ebx, DWORD PTR _vtTemp$[ebp]
  000b2	8b f3		 mov	 esi, ebx
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1399 : 	std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  000b4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000bb	3b 9d d4 fe ff
	ff		 cmp	 ebx, DWORD PTR _vtTemp$[ebp+4]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1402 : 	for( ; it != vtTemp.end(); it++ )

  000c1	0f 84 70 01 00
	00		 je	 $LN3@GCNotifyAl
  000c7	8b 9d e0 fe ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  000cd	0f 1f 00	 npad	 3
$LL4@GCNotifyAl:

; 1403 : 	{
; 1404 : 		int nResult = *it;

  000d0	8b 3e		 mov	 edi, DWORD PTR [esi]

; 1405 : 
; 1406 : 		if( IF_MAP_RANGE(gObj[nResult].MapNumber) != FALSE )

  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d7	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048
  000dd	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv637[ebp], ecx
  000e3	8a 84 01 23 01
	00 00		 mov	 al, BYTE PTR [ecx+eax+291]
  000ea	3c 45		 cmp	 al, 69			; 00000045H
  000ec	73 04		 jae	 SHORT $LN14@GCNotifyAl
  000ee	33 c0		 xor	 eax, eax
  000f0	eb 07		 jmp	 SHORT $LN15@GCNotifyAl
$LN14@GCNotifyAl:
  000f2	b1 48		 mov	 cl, 72			; 00000048H
  000f4	3a c8		 cmp	 cl, al
  000f6	1b c0		 sbb	 eax, eax
  000f8	40		 inc	 eax
$LN15@GCNotifyAl:
  000f9	85 c0		 test	 eax, eax
  000fb	0f 84 21 01 00
	00		 je	 $LN2@GCNotifyAl

; 1407 : 		{
; 1408 : #ifdef POINTEX
; 1409 : 			g_ShopPointEx.AddEventBonus(nResult, ShopPointExEvent::IG);
; 1410 : #endif
; 1411 : 			pMsg.iRewardExp = this->m_RewardExp.GetRewardExp(nResult);

  00101	57		 push	 edi
  00102	8d 8b b8 01 00
	00		 lea	 ecx, DWORD PTR [ebx+440]
  00108	e8 00 00 00 00	 call	 ?GetRewardExp@CImperialGuardianRewardExp@@QAEHH@Z ; CImperialGuardianRewardExp::GetRewardExp

; 1412 : 
; 1413 : 			if( nZoneIndex == 3 )

  0010d	83 bd dc fe ff
	ff 03		 cmp	 DWORD PTR _nZoneIndex$GSCopy$1$[ebp], 3
  00114	89 85 ec fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+8], eax
  0011a	75 08		 jne	 SHORT $LN7@GCNotifyAl

; 1414 : 				pMsg.iRewardExp *= 2;

  0011c	03 c0		 add	 eax, eax
  0011e	89 85 ec fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+8], eax
$LN7@GCNotifyAl:

; 1415 : 
; 1416 : 			if( gObjCheckUsedBuffEffect(&gObj[nResult],AT_CSHOP_SEAL_OF_SUSTENANCE) ||

  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00129	03 85 e0 fe ff
	ff		 add	 eax, DWORD PTR tv637[ebp]
  0012f	6a 2a		 push	 42			; 0000002aH
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00137	83 c4 08	 add	 esp, 8
  0013a	84 c0		 test	 al, al
  0013c	75 22		 jne	 SHORT $LN9@GCNotifyAl
  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00143	03 85 e0 fe ff
	ff		 add	 eax, DWORD PTR tv637[ebp]
  00149	6a 1f		 push	 31			; 0000001fH
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00151	83 c4 08	 add	 esp, 8
  00154	84 c0		 test	 al, al
  00156	75 08		 jne	 SHORT $LN9@GCNotifyAl

; 1417 : 				gObjCheckUsedBuffEffect(&gObj[nResult],AT_PCBANG_SEAL_OF_SUSTENANCE) )
; 1418 : 			{
; 1419 : 				pMsg.iRewardExp = 0;

  00158	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _pMsg$[ebp+8]
  0015e	eb 08		 jmp	 SHORT $LN8@GCNotifyAl
$LN9@GCNotifyAl:
  00160	33 c0		 xor	 eax, eax
  00162	89 85 ec fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+8], eax
$LN8@GCNotifyAl:

; 1420 : 			}
; 1421 : 
; 1422 : 			this->ImperialGuardianLevelUp(nResult,pMsg.iRewardExp);

  00168	50		 push	 eax
  00169	57		 push	 edi
  0016a	8b cb		 mov	 ecx, ebx
  0016c	e8 00 00 00 00	 call	 ?ImperialGuardianLevelUp@CImperialGuardian@@QAEHHH@Z ; CImperialGuardian::ImperialGuardianLevelUp

; 1423 : 			LogAddTD("[IMPERIALGUARDIAN] [ACCOUNTID]:%s, [NAME]:%s, [Reward Exp] : %d ",

  00171	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR tv637[ebp]
  00177	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0017d	ff b5 ec fe ff
	ff		 push	 DWORD PTR _pMsg$[ebp+8]
  00183	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00186	50		 push	 eax
  00187	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0018a	50		 push	 eax
  0018b	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@JAMFMLDI@?$FLIMPERIALGUARDIAN?$FN?5?$FLACCOUNTID?$FN?3?$CF@
  00190	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1424 : 				gObj[nResult].AccountID,gObj[nResult].Name,pMsg.iRewardExp);
; 1425 : 
; 1426 : 			if( g_MasterExp.IsEnabled(&gObj[nResult]) == FALSE) //season3 add-on

  00196	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0019b	83 c4 10	 add	 esp, 16			; 00000010H
  0019e	03 85 e0 fe ff
	ff		 add	 eax, DWORD PTR tv637[ebp]
  001a4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterExp@@3VCMasterExperience@@A ; g_MasterExp
  001a9	50		 push	 eax
  001aa	e8 00 00 00 00	 call	 ?IsEnabled@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterExperience::IsEnabled
  001af	85 c0		 test	 eax, eax
  001b1	75 19		 jne	 SHORT $LN10@GCNotifyAl

; 1427 : 			{
; 1428 : 				GCSendExp(nResult, (WORD)-1, pMsg.iRewardExp, 0, 0);

  001b3	50		 push	 eax
  001b4	50		 push	 eax
  001b5	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _pMsg$[ebp+8]
  001bb	99		 cdq
  001bc	52		 push	 edx
  001bd	50		 push	 eax
  001be	68 ff ff 00 00	 push	 65535			; 0000ffffH
  001c3	57		 push	 edi
  001c4	e8 00 00 00 00	 call	 ?GCSendExp@@YAXHH_JHH@Z	; GCSendExp
  001c9	83 c4 18	 add	 esp, 24			; 00000018H
$LN10@GCNotifyAl:

; 1429 : 			}
; 1430 : 
; 1431 : 			this->GCSendDataToUser(nResult,(LPBYTE)&pMsg,sizeof(pMsg));

  001cc	6a 0c		 push	 12			; 0000000cH
  001ce	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  001d4	8b cb		 mov	 ecx, ebx
  001d6	50		 push	 eax
  001d7	57		 push	 edi
  001d8	e8 00 00 00 00	 call	 ?GCSendDataToUser@CImperialGuardian@@QAEXHPAEH@Z ; CImperialGuardian::GCSendDataToUser
  001dd	68 00 01 00 00	 push	 256			; 00000100H
  001e2	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szText$2[ebp]
  001e8	6a 00		 push	 0
  001ea	50		 push	 eax
  001eb	e8 00 00 00 00	 call	 _memset
  001f0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1432 : 
; 1433 : 			// original code
; 1434 : 			//if(g_MasterExp.IsMasterLevelUser(&gObj[iUserIndex]))
; 1435 : 			//{
; 1436 : 			//	GCSendExp_INT64(iUserIndex, -1, iRewardExp, 0, 0);
; 1437 : 			//}
; 1438 : 
; 1439 : 			char szText[256] = {0};
; 1440 : 			wsprintf(szText,lMsg.Get(MSGGET(13,110)));

  001f3	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  001f8	68 6e 0d 00 00	 push	 3438			; 00000d6eH
  001fd	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00202	50		 push	 eax
  00203	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szText$2[ebp]
  00209	50		 push	 eax
  0020a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 1441 : 			GCServerMsgStringSend(szText,nResult,0);

  00210	6a 00		 push	 0
  00212	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _szText$2[ebp]
  00218	57		 push	 edi
  00219	50		 push	 eax
  0021a	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0021f	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@GCNotifyAl:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  00222	83 c6 04	 add	 esi, 4

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00225	3b b5 d4 fe ff
	ff		 cmp	 esi, DWORD PTR _vtTemp$[ebp+4]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1402 : 	for( ; it != vtTemp.end(); it++ )

  0022b	0f 85 9f fe ff
	ff		 jne	 $LL4@GCNotifyAl
  00231	8b 9d d0 fe ff
	ff		 mov	 ebx, DWORD PTR _vtTemp$[ebp]
$LN3@GCNotifyAl:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00237	85 db		 test	 ebx, ebx
  00239	74 58		 je	 SHORT $LN90@GCNotifyAl

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0023b	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _vtTemp$[ebp+8]
  00241	2b c3		 sub	 eax, ebx
  00243	c1 f8 02	 sar	 eax, 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00246	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0024b	76 05		 jbe	 SHORT $LN157@GCNotifyAl
  0024d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN204@GCNotifyAl:
$LN157@GCNotifyAl:

; 101  : 	const size_t _User_size = _Count * _Sz;

  00252	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00255	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0025a	72 2e		 jb	 SHORT $LN158@GCNotifyAl

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0025c	f6 c3 1f	 test	 bl, 31			; 0000001fH
  0025f	74 05		 je	 SHORT $LN159@GCNotifyAl
  00261	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN205@GCNotifyAl:
$LN159@GCNotifyAl:

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00266	8b 43 fc	 mov	 eax, DWORD PTR [ebx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00269	3b c3		 cmp	 eax, ebx
  0026b	72 05		 jb	 SHORT $LN160@GCNotifyAl
  0026d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN206@GCNotifyAl:
$LN160@GCNotifyAl:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00272	2b d8		 sub	 ebx, eax
  00274	83 fb 04	 cmp	 ebx, 4
  00277	73 05		 jae	 SHORT $LN161@GCNotifyAl
  00279	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN207@GCNotifyAl:
$LN161@GCNotifyAl:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0027e	83 fb 23	 cmp	 ebx, 35			; 00000023H
  00281	76 05		 jbe	 SHORT $LN162@GCNotifyAl
  00283	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN208@GCNotifyAl:
$LN162@GCNotifyAl:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00288	8b d8		 mov	 ebx, eax
$LN158@GCNotifyAl:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  0028a	53		 push	 ebx
  0028b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00290	83 c4 04	 add	 esp, 4
$LN90@GCNotifyAl:
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1444 : 	return true;

  00293	b0 01		 mov	 al, 1
  00295	eb 02		 jmp	 SHORT $LN1@GCNotifyAl
$LN200@GCNotifyAl:

; 1391 : 	{
; 1392 : 		return false;

  00297	32 c0		 xor	 al, al
$LN1@GCNotifyAl:

; 1445 : }

  00299	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0029c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002a3	59		 pop	 ecx
  002a4	5f		 pop	 edi
  002a5	5e		 pop	 esi
  002a6	5b		 pop	 ebx
  002a7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002aa	33 cd		 xor	 ecx, ebp
  002ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b1	8b e5		 mov	 esp, ebp
  002b3	5d		 pop	 ebp
  002b4	c2 04 00	 ret	 4
$LN203@GCNotifyAl:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GCNotifyAllZoneClear@CImperialGuardian@@QAE_NH@Z$0:
  00000	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _vtTemp$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$?GCNotifyAllZoneClear@CImperialGuardian@@QAE_NH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a cc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-308]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GCNotifyAllZoneClear@CImperialGuardian@@QAE_NH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GCNotifyAllZoneClear@CImperialGuardian@@QAE_NH@Z ENDP	; CImperialGuardian::GCNotifyAllZoneClear
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?GCNotifyZoneClear@CImperialGuardian@@QAE_NH@Z
_TEXT	SEGMENT
_vtTemp$ = -44						; size = 12
_this$GSCopy$1$ = -32					; size = 4
_pMsg$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_nZoneIndex$ = 8					; size = 4
?GCNotifyZoneClear@CImperialGuardian@@QAE_NH@Z PROC	; CImperialGuardian::GCNotifyZoneClear, COMDAT
; _this$ = ecx

; 1363 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GCNotifyZoneClear@CImperialGuardian@@QAE_NH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d e0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  00030	8b 75 08	 mov	 esi, DWORD PTR _nZoneIndex$[ebp]

; 1364 : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  00033	85 f6		 test	 esi, esi
  00035	0f 88 fe 00 00
	00		 js	 $LN196@GCNotifyZo
  0003b	33 c0		 xor	 eax, eax
  0003d	83 fe 03	 cmp	 esi, 3
  00040	0f 9e c0	 setle	 al
  00043	85 c0		 test	 eax, eax
  00045	0f 84 ee 00 00
	00		 je	 $LN196@GCNotifyZo

; 1367 : 	}
; 1368 : 
; 1369 : 	PMSG_IMPERIALFORT_PLAYEND pMsg = {0};
; 1370 : 	PHeadSubSetB((LPBYTE)&pMsg,0xF7,0x06,sizeof(pMsg));

  0004b	6a 0c		 push	 12			; 0000000cH
  0004d	6a 06		 push	 6
  0004f	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00052	c6 45 e4 00	 mov	 BYTE PTR _pMsg$[ebp], 0
  00056	0f 57 c0	 xorps	 xmm0, xmm0
  00059	66 c7 45 ed 00
	00		 mov	 WORD PTR _pMsg$[ebp+9], 0
  0005f	68 f7 00 00 00	 push	 247			; 000000f7H
  00064	50		 push	 eax
  00065	66 0f d6 45 e5	 movq	 QWORD PTR _pMsg$[ebp+1], xmm0
  0006a	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+11], 0
  0006e	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 1373 : 	std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  00073	6b c6 64	 imul	 eax, esi, 100
  00076	8d 4d d4	 lea	 ecx, DWORD PTR _vtTemp$[ebp]
  00079	83 c4 10	 add	 esp, 16			; 00000010H
  0007c	c6 45 e8 01	 mov	 BYTE PTR _pMsg$[ebp+4], 1
  00080	83 c3 3c	 add	 ebx, 60			; 0000003cH
  00083	03 c3		 add	 eax, ebx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  0008b	8b 5d d4	 mov	 ebx, DWORD PTR _vtTemp$[ebp]
  0008e	8b f3		 mov	 esi, ebx

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00090	8b 7d d8	 mov	 edi, DWORD PTR _vtTemp$[ebp+4]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1373 : 	std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  00093	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0009a	3b df		 cmp	 ebx, edi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1376 : 	for( ; it != vtTemp.end(); it++)

  0009c	74 3e		 je	 SHORT $LN3@GCNotifyZo
  0009e	8b 5d e0	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
$LL4@GCNotifyZo:

; 1377 : 	{
; 1378 : 		int nResult = *it;

  000a1	8b 16		 mov	 edx, DWORD PTR [esi]

; 1379 : 
; 1380 : 		if( IF_MAP_RANGE(gObj[nResult].MapNumber) != FALSE )

  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a8	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  000ae	8a 84 01 23 01
	00 00		 mov	 al, BYTE PTR [ecx+eax+291]
  000b5	3c 45		 cmp	 al, 69			; 00000045H
  000b7	72 19		 jb	 SHORT $LN2@GCNotifyZo
  000b9	b1 48		 mov	 cl, 72			; 00000048H
  000bb	3a c8		 cmp	 cl, al
  000bd	1b c0		 sbb	 eax, eax
  000bf	83 c0 01	 add	 eax, 1
  000c2	74 0e		 je	 SHORT $LN2@GCNotifyZo

; 1381 : 		{
; 1382 : 			this->GCSendDataToUser(nResult,(LPBYTE)&pMsg,sizeof(pMsg));

  000c4	6a 0c		 push	 12			; 0000000cH
  000c6	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000c9	8b cb		 mov	 ecx, ebx
  000cb	50		 push	 eax
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 ?GCSendDataToUser@CImperialGuardian@@QAEXHPAEH@Z ; CImperialGuardian::GCSendDataToUser
$LN2@GCNotifyZo:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  000d2	83 c6 04	 add	 esi, 4

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000d5	3b f7		 cmp	 esi, edi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1376 : 	for( ; it != vtTemp.end(); it++)

  000d7	75 c8		 jne	 SHORT $LL4@GCNotifyZo
  000d9	8b 5d d4	 mov	 ebx, DWORD PTR _vtTemp$[ebp]
$LN3@GCNotifyZo:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  000dc	85 db		 test	 ebx, ebx
  000de	74 55		 je	 SHORT $LN86@GCNotifyZo

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  000e0	8b 45 dc	 mov	 eax, DWORD PTR _vtTemp$[ebp+8]
  000e3	2b c3		 sub	 eax, ebx
  000e5	c1 f8 02	 sar	 eax, 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  000e8	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  000ed	76 05		 jbe	 SHORT $LN153@GCNotifyZo
  000ef	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN199@GCNotifyZo:
$LN153@GCNotifyZo:

; 101  : 	const size_t _User_size = _Count * _Sz;

  000f4	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  000f7	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000fc	72 2e		 jb	 SHORT $LN154@GCNotifyZo

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  000fe	f6 c3 1f	 test	 bl, 31			; 0000001fH
  00101	74 05		 je	 SHORT $LN155@GCNotifyZo
  00103	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN200@GCNotifyZo:
$LN155@GCNotifyZo:

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00108	8b 43 fc	 mov	 eax, DWORD PTR [ebx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0010b	3b c3		 cmp	 eax, ebx
  0010d	72 05		 jb	 SHORT $LN156@GCNotifyZo
  0010f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN201@GCNotifyZo:
$LN156@GCNotifyZo:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00114	2b d8		 sub	 ebx, eax
  00116	83 fb 04	 cmp	 ebx, 4
  00119	73 05		 jae	 SHORT $LN157@GCNotifyZo
  0011b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN202@GCNotifyZo:
$LN157@GCNotifyZo:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00120	83 fb 23	 cmp	 ebx, 35			; 00000023H
  00123	76 05		 jbe	 SHORT $LN158@GCNotifyZo
  00125	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN203@GCNotifyZo:
$LN158@GCNotifyZo:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0012a	8b d8		 mov	 ebx, eax
$LN154@GCNotifyZo:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  0012c	53		 push	 ebx
  0012d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00132	83 c4 04	 add	 esp, 4
$LN86@GCNotifyZo:
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1385 : return true;

  00135	b0 01		 mov	 al, 1
  00137	eb 02		 jmp	 SHORT $LN1@GCNotifyZo
$LN196@GCNotifyZo:

; 1365 : 	{
; 1366 : 		return false;

  00139	32 c0		 xor	 al, al
$LN1@GCNotifyZo:

; 1386 : }

  0013b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0013e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00145	59		 pop	 ecx
  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	5b		 pop	 ebx
  00149	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014c	33 cd		 xor	 ecx, ebp
  0014e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c2 04 00	 ret	 4
$LN198@GCNotifyZo:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GCNotifyZoneClear@CImperialGuardian@@QAE_NH@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _vtTemp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$?GCNotifyZoneClear@CImperialGuardian@@QAE_NH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GCNotifyZoneClear@CImperialGuardian@@QAE_NH@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GCNotifyZoneClear@CImperialGuardian@@QAE_NH@Z ENDP	; CImperialGuardian::GCNotifyZoneClear
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?IsLastZone@CImperialGuardian@@QAE_NH@Z
_TEXT	SEGMENT
_nZoneIndex$ = 8					; size = 4
?IsLastZone@CImperialGuardian@@QAE_NH@Z PROC		; CImperialGuardian::IsLastZone, COMDAT
; _this$ = ecx

; 1339 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1340 : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _nZoneIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 2e		 js	 SHORT $LN8@IsLastZone
  0000a	33 c0		 xor	 eax, eax
  0000c	83 fa 03	 cmp	 edx, 3
  0000f	0f 9e c0	 setle	 al
  00012	85 c0		 test	 eax, eax
  00014	74 22		 je	 SHORT $LN8@IsLastZone

; 1342 : 
; 1343 : 	if( this->m_ZoneInfo[nZoneIndex].m_wMonsterRegenTable == 1 && nZoneIndex == 3 )

  00016	6b c2 64	 imul	 eax, edx, 100
  00019	0f b7 44 08 24	 movzx	 eax, WORD PTR [eax+ecx+36]
  0001e	83 f8 01	 cmp	 eax, 1
  00021	75 10		 jne	 SHORT $LN10@IsLastZone
  00023	83 fa 03	 cmp	 edx, 3
  00026	75 06		 jne	 SHORT $LN3@IsLastZone
$LN11@IsLastZone:

; 1344 : 	{
; 1345 : 		return true;

  00028	b0 01		 mov	 al, 1

; 1349 : 	{
; 1350 : 		return true;
; 1351 : 	}
; 1352 : 	return false;
; 1353 : }

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN3@IsLastZone:

; 1346 : 	}
; 1347 : 
; 1348 : 	if( this->m_ZoneInfo[nZoneIndex].m_wMonsterRegenTable != 1 && nZoneIndex == 2 )

  0002e	83 f8 01	 cmp	 eax, 1
  00031	74 05		 je	 SHORT $LN8@IsLastZone
$LN10@IsLastZone:
  00033	83 fa 02	 cmp	 edx, 2
  00036	74 f0		 je	 SHORT $LN11@IsLastZone
$LN8@IsLastZone:

; 1341 : 		return false;

  00038	32 c0		 xor	 al, al

; 1349 : 	{
; 1350 : 		return true;
; 1351 : 	}
; 1352 : 	return false;
; 1353 : }

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?IsLastZone@CImperialGuardian@@QAE_NH@Z ENDP		; CImperialGuardian::IsLastZone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?GetTotalPlayerCount@CImperialGuardian@@QAEHXZ
_TEXT	SEGMENT
?GetTotalPlayerCount@CImperialGuardian@@QAEHXZ PROC	; CImperialGuardian::GetTotalPlayerCount, COMDAT
; _this$ = ecx

; 1328 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 1329 : 	int nCount = 0;

  00003	33 ff		 xor	 edi, edi
  00005	8b d9		 mov	 ebx, ecx

; 1330 : 
; 1331 : 	for(int i = 0; i < IMPERIAL_GUARDIAN_MAXZONE; i++)

  00007	33 f6		 xor	 esi, esi
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@GetTotalPl:

; 1332 : 	{
; 1333 : 		nCount += this->GetPlayerCount(i);

  00010	56		 push	 esi
  00011	8b cb		 mov	 ecx, ebx
  00013	e8 00 00 00 00	 call	 ?GetPlayerCount@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetPlayerCount
  00018	46		 inc	 esi
  00019	03 f8		 add	 edi, eax
  0001b	83 fe 04	 cmp	 esi, 4
  0001e	7c f0		 jl	 SHORT $LL4@GetTotalPl

; 1334 : 	}
; 1335 : return nCount;

  00020	8b c7		 mov	 eax, edi
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx

; 1336 : }

  00025	c3		 ret	 0
?GetTotalPlayerCount@CImperialGuardian@@QAEHXZ ENDP	; CImperialGuardian::GetTotalPlayerCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?GetPlayerCount@CImperialGuardian@@QAEHH@Z
_TEXT	SEGMENT
_nZoneIndex$ = 8					; size = 4
?GetPlayerCount@CImperialGuardian@@QAEHH@Z PROC		; CImperialGuardian::GetPlayerCount, COMDAT
; _this$ = ecx

; 1320 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1321 : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _nZoneIndex$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	78 21		 js	 SHORT $LN27@GetPlayerC
  0000d	33 c0		 xor	 eax, eax
  0000f	83 fa 03	 cmp	 edx, 3
  00012	0f 9e c0	 setle	 al
  00015	85 c0		 test	 eax, eax
  00017	74 15		 je	 SHORT $LN27@GetPlayerC

; 1324 : return this->m_ZoneInfo[nZoneIndex].m_vtUserIndex.size();

  00019	6b c2 64	 imul	 eax, edx, 100
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0001c	8b 4c 30 40	 mov	 ecx, DWORD PTR [eax+esi+64]
  00020	2b 4c 30 3c	 sub	 ecx, DWORD PTR [eax+esi+60]
  00024	c1 f9 02	 sar	 ecx, 2
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1324 : return this->m_ZoneInfo[nZoneIndex].m_vtUserIndex.size();

  00027	8b c1		 mov	 eax, ecx
  00029	5e		 pop	 esi

; 1325 : }

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN27@GetPlayerC:

; 1322 : 		return 0;

  0002e	33 c0		 xor	 eax, eax
  00030	5e		 pop	 esi

; 1325 : }

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?GetPlayerCount@CImperialGuardian@@QAEHH@Z ENDP		; CImperialGuardian::GetPlayerCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?RemoveUserInAllZone@CImperialGuardian@@QAEXH@Z
_TEXT	SEGMENT
_nUserNumber$ = 8					; size = 4
?RemoveUserInAllZone@CImperialGuardian@@QAEXH@Z PROC	; CImperialGuardian::RemoveUserInAllZone, COMDAT
; _this$ = ecx

; 1312 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1313 : 	for(int i = 0; i < IMPERIAL_GUARDIAN_MAXZONE; i++)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _nUserNumber$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	33 f6		 xor	 esi, esi
  0000d	0f 1f 00	 npad	 3
$LL4@RemoveUser:

; 1314 : 	{
; 1315 : 		this->RemoveUserInZone(i,nUserNumber);

  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b cf		 mov	 ecx, edi
  00014	e8 00 00 00 00	 call	 ?RemoveUserInZone@CImperialGuardian@@QAEXHH@Z ; CImperialGuardian::RemoveUserInZone
  00019	46		 inc	 esi
  0001a	83 fe 04	 cmp	 esi, 4
  0001d	7c f1		 jl	 SHORT $LL4@RemoveUser
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx

; 1316 : 	}
; 1317 : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?RemoveUserInAllZone@CImperialGuardian@@QAEXH@Z ENDP	; CImperialGuardian::RemoveUserInAllZone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?RemoveUserInZone@CImperialGuardian@@QAEXHH@Z
_TEXT	SEGMENT
_nZoneIndex$ = 8					; size = 4
_nUserIndex$ = 12					; size = 4
?RemoveUserInZone@CImperialGuardian@@QAEXHH@Z PROC	; CImperialGuardian::RemoveUserInZone, COMDAT
; _this$ = ecx

; 1290 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1291 : 	EnterCriticalSection(&this->m_CritSection);

  00007	8d 9e cc 01 00
	00		 lea	 ebx, DWORD PTR [esi+460]
  0000d	53		 push	 ebx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 1292 : 
; 1293 : 	std::vector<int>::iterator it = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex.begin();

  00014	6b 45 08 64	 imul	 eax, DWORD PTR _nZoneIndex$[ebp], 100
  00018	03 f0		 add	 esi, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  0001a	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  0001d	3b 46 40	 cmp	 eax, DWORD PTR [esi+64]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1295 : 	for( ; it != this->m_ZoneInfo[nZoneIndex].m_vtUserIndex.end(); it++)

  00020	74 5d		 je	 SHORT $LN3@RemoveUser
  00022	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 652  : 		return (_Get_data()._Mylast);

  00023	8b 7d 0c	 mov	 edi, DWORD PTR _nUserIndex$[ebp]
$LL4@RemoveUser:
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1299 : 		if( nResult == nUserIndex )

  00026	39 38		 cmp	 DWORD PTR [eax], edi
  00028	74 16		 je	 SHORT $LN135@RemoveUser
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  0002a	83 c0 04	 add	 eax, 4

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  0002d	3b 46 40	 cmp	 eax, DWORD PTR [esi+64]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1295 : 	for( ; it != this->m_ZoneInfo[nZoneIndex].m_vtUserIndex.end(); it++)

  00030	75 f4		 jne	 SHORT $LL4@RemoveUser

; 1303 : 				nZoneIndex+1,gObj[nUserIndex].AccountID,gObj[nUserIndex].Name);
; 1304 : 			break;
; 1305 : 		}
; 1306 : 	}
; 1307 : 
; 1308 : 	LeaveCriticalSection(&this->m_CritSection);

  00032	5f		 pop	 edi
  00033	53		 push	 ebx
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx

; 1309 : }

  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
$LN135@RemoveUser:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2527 : 	ptrdiff_t _Count = _Last - _First;

  00040	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),

  00043	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2527 : 	ptrdiff_t _Count = _Last - _First;

  00046	2b ca		 sub	 ecx, edx

; 2528 : 	_CSTD memmove(&*_Dest, &*_First,

  00048	83 e1 fc	 and	 ecx, -4			; fffffffcH
  0004b	51		 push	 ecx
  0004c	52		 push	 edx
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1488 : 		--this->_Mylast();

  00053	83 46 40 fc	 add	 DWORD PTR [esi+64], -4	; fffffffcH
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1302 : 			LogAddTD("[IMPERIALGUARDIAN] Leave Player Zone [ZONE]:%d, [AccountID]:%s, [Name]:%s",

  00057	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048
  0005d	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00063	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00066	50		 push	 eax
  00067	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0006a	50		 push	 eax
  0006b	8b 45 08	 mov	 eax, DWORD PTR _nZoneIndex$[ebp]
  0006e	40		 inc	 eax
  0006f	50		 push	 eax
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@BDGBBCGM@?$FLIMPERIALGUARDIAN?$FN?5Leave?5Player?5@
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0007b	83 c4 1c	 add	 esp, 28			; 0000001cH
  0007e	5f		 pop	 edi
$LN3@RemoveUser:

; 1303 : 				nZoneIndex+1,gObj[nUserIndex].AccountID,gObj[nUserIndex].Name);
; 1304 : 			break;
; 1305 : 		}
; 1306 : 	}
; 1307 : 
; 1308 : 	LeaveCriticalSection(&this->m_CritSection);

  0007f	53		 push	 ebx
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx

; 1309 : }

  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
?RemoveUserInZone@CImperialGuardian@@QAEXHH@Z ENDP	; CImperialGuardian::RemoveUserInZone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?AddUserInZone@CImperialGuardian@@QAE_NHH@Z
_TEXT	SEGMENT
_nZoneIndex$ = 8					; size = 4
_nUserIndex$ = 12					; size = 4
?AddUserInZone@CImperialGuardian@@QAE_NHH@Z PROC	; CImperialGuardian::AddUserInZone, COMDAT
; _this$ = ecx

; 1259 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 1260 : 	EnterCriticalSection(&this->m_CritSection);

  00008	8d 9e cc 01 00
	00		 lea	 ebx, DWORD PTR [esi+460]
  0000e	53		 push	 ebx
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 1264 : 	std::vector<int>::iterator it = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex.begin();

  00015	6b 4d 08 64	 imul	 ecx, DWORD PTR _nZoneIndex$[ebp], 100

; 1266 : 	for( ; it != this->m_ZoneInfo[nZoneIndex].m_vtUserIndex.end(); it++)

  00019	8b 7d 0c	 mov	 edi, DWORD PTR _nUserIndex$[ebp]
  0001c	03 ce		 add	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  0001e	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1264 : 	std::vector<int>::iterator it = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex.begin();

  00021	8d 71 3c	 lea	 esi, DWORD PTR [ecx+60]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00024	3b 41 40	 cmp	 eax, DWORD PTR [ecx+64]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1266 : 	for( ; it != this->m_ZoneInfo[nZoneIndex].m_vtUserIndex.end(); it++)

  00027	74 13		 je	 SHORT $LN303@AddUserInZ
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@AddUserInZ:

; 1267 : 	{
; 1268 : 		int nResult = *it;
; 1269 : 		if( nResult == nUserIndex )

  00030	39 38		 cmp	 DWORD PTR [eax], edi
  00032	74 52		 je	 SHORT $LN6@AddUserInZ
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  00034	83 c0 04	 add	 eax, 4

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00037	3b 41 40	 cmp	 eax, DWORD PTR [ecx+64]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1266 : 	for( ; it != this->m_ZoneInfo[nZoneIndex].m_vtUserIndex.end(); it++)

  0003a	75 f4		 jne	 SHORT $LL4@AddUserInZ
$LN303@AddUserInZ:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  0003c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003f	8d 4d 0c	 lea	 ecx, DWORD PTR _nUserIndex$[ebp]
  00042	3b c8		 cmp	 ecx, eax
  00044	73 50		 jae	 SHORT $LN79@AddUserInZ
  00046	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00048	8d 55 0c	 lea	 edx, DWORD PTR _nUserIndex$[ebp]
  0004b	3b ca		 cmp	 ecx, edx
  0004d	77 47		 ja	 SHORT $LN79@AddUserInZ

; 207  : 		}
; 208  : 
; 209  : 	bool operator!=(const _Myiter& _Right) const
; 210  : 		{	// test for iterator inequality
; 211  : 		return (!(*this == _Right));
; 212  : 		}
; 213  : 
; 214  : 	bool operator<(const _Myiter& _Right) const
; 215  : 		{	// test if this < _Right
; 216  : 		_Compat(_Right);
; 217  : 		return (this->_Ptr < _Right._Ptr);
; 218  : 		}
; 219  : 
; 220  : 	bool operator>(const _Myiter& _Right) const
; 221  : 		{	// test if this > _Right
; 222  : 		return (_Right < *this);
; 223  : 		}
; 224  : 
; 225  : 	bool operator<=(const _Myiter& _Right) const
; 226  : 		{	// test if this <= _Right
; 227  : 		return (!(_Right < *this));
; 228  : 		}
; 229  : 
; 230  : 	bool operator>=(const _Myiter& _Right) const
; 231  : 		{	// test if this >= _Right
; 232  : 		return (!(*this < _Right));
; 233  : 		}
; 234  : 
; 235  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 236  : 	void _Compat(const _Myiter& _Right) const
; 237  : 		{	// test for compatible iterator pair
; 238  : 		if (this->_Getcont() == 0
; 239  : 			|| this->_Getcont() != _Right._Getcont())
; 240  : 			{	// report error
; 241  : 			_DEBUG_ERROR("vector iterators incompatible");
; 242  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 243  : 			}
; 244  : 		}
; 245  : 
; 246  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 247  : 	void _Compat(const _Myiter& _Right) const
; 248  : 		{	// test for compatible iterator pair
; 249  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 250  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 251  : 		}
; 252  : 
; 253  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 254  : 	void _Compat(const _Myiter&) const
; 255  : 		{	// test for compatible iterator pair
; 256  : 		}
; 257  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 258  : 
; 259  : 	_Tptr _Ptr;	// pointer to element in vector
; 260  : 	};
; 261  : 
; 262  : template<class _Myvec> inline
; 263  : 	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
; 264  : 		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
; 265  : 	{	// convert to unchecked
; 266  : 	return (_Iter._Unchecked());
; 267  : 	}
; 268  : 
; 269  : template<class _Myvec> inline
; 270  : 	_Vector_const_iterator<_Myvec>&
; 271  : 		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
; 272  : 			typename _Vector_const_iterator<_Myvec>
; 273  : 				::_Unchecked_type _Right)
; 274  : 	{	// convert to checked
; 275  : 	return (_Iter._Rechecked(_Right));
; 276  : 	}
; 277  : 
; 278  : template<class _Myvec> inline
; 279  : 	_Vector_const_iterator<_Myvec> operator+(
; 280  : 		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
; 281  : 		_Vector_const_iterator<_Myvec> _Next)
; 282  : 	{	// add offset to iterator
; 283  : 	return (_Next += _Off);
; 284  : 	}
; 285  : 
; 286  : 		// TEMPLATE CLASS _Vector_iterator
; 287  : template<class _Myvec>
; 288  : 	class _Vector_iterator
; 289  : 		: public _Vector_const_iterator<_Myvec>
; 290  : 	{	// iterator for mutable vector
; 291  : public:
; 292  : 	typedef _Vector_iterator<_Myvec> _Myiter;
; 293  : 	typedef _Vector_const_iterator<_Myvec> _Mybase;
; 294  : 	typedef random_access_iterator_tag iterator_category;
; 295  : 
; 296  : 	typedef typename _Myvec::value_type value_type;
; 297  : 	typedef typename _Myvec::difference_type difference_type;
; 298  : 	typedef typename _Myvec::pointer pointer;
; 299  : 	typedef typename _Myvec::reference reference;
; 300  : 
; 301  : 	_Vector_iterator()
; 302  : 		{	// construct with null vector pointer
; 303  : 		}
; 304  : 
; 305  : 	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
; 306  : 		: _Mybase(_Parg, _Pvector)
; 307  : 		{	// construct with pointer _Parg
; 308  : 		}
; 309  : 
; 310  : 	typedef pointer _Unchecked_type;
; 311  : 
; 312  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 313  : 		{	// reset from unchecked iterator
; 314  : 		this->_Ptr = _Right;
; 315  : 		return (*this);
; 316  : 		}
; 317  : 
; 318  : 	_Unchecked_type _Unchecked() const
; 319  : 		{	// make an unchecked iterator
; 320  : 		return (_Unchecked_type(this->_Ptr));
; 321  : 		}
; 322  : 
; 323  : 	reference operator*() const
; 324  : 		{	// return designated object
; 325  : 		return ((reference)**(_Mybase *)this);
; 326  : 		}
; 327  : 
; 328  : 	pointer operator->() const
; 329  : 		{	// return pointer to class object
; 330  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 331  : 		}
; 332  : 
; 333  : 	_Myiter& operator++()
; 334  : 		{	// preincrement
; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);
; 337  : 		}
; 338  : 
; 339  : 	_Myiter operator++(int)
; 340  : 		{	// postincrement
; 341  : 		_Myiter _Tmp = *this;
; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}
; 345  : 
; 346  : 	_Myiter& operator--()
; 347  : 		{	// predecrement
; 348  : 		--*(_Mybase *)this;
; 349  : 		return (*this);
; 350  : 		}
; 351  : 
; 352  : 	_Myiter operator--(int)
; 353  : 		{	// postdecrement
; 354  : 		_Myiter _Tmp = *this;
; 355  : 		--*this;
; 356  : 		return (_Tmp);
; 357  : 		}
; 358  : 
; 359  : 	_Myiter& operator+=(difference_type _Off)
; 360  : 		{	// increment by integer
; 361  : 		*(_Mybase *)this += _Off;
; 362  : 		return (*this);
; 363  : 		}
; 364  : 
; 365  : 	_Myiter operator+(difference_type _Off) const
; 366  : 		{	// return this + integer
; 367  : 		_Myiter _Tmp = *this;
; 368  : 		return (_Tmp += _Off);
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator-=(difference_type _Off)
; 372  : 		{	// decrement by integer
; 373  : 		return (*this += -_Off);
; 374  : 		}
; 375  : 
; 376  : 	_Myiter operator-(difference_type _Off) const
; 377  : 		{	// return this - integer
; 378  : 		_Myiter _Tmp = *this;
; 379  : 		return (_Tmp -= _Off);
; 380  : 		}
; 381  : 
; 382  : 	difference_type operator-(const _Mybase& _Right) const
; 383  : 		{	// return difference of iterators
; 384  : 		return (*(_Mybase *)this - _Right);
; 385  : 		}
; 386  : 
; 387  : 	reference operator[](difference_type _Off) const
; 388  : 		{	// subscript
; 389  : 		return (*(*this + _Off));
; 390  : 		}
; 391  : 	};
; 392  : 
; 393  : template<class _Myvec> inline
; 394  : 	typename _Vector_iterator<_Myvec>::_Unchecked_type
; 395  : 		_Unchecked(_Vector_iterator<_Myvec> _Iter)
; 396  : 	{	// convert to unchecked
; 397  : 	return (_Iter._Unchecked());
; 398  : 	}
; 399  : 
; 400  : template<class _Myvec> inline
; 401  : 	_Vector_iterator<_Myvec>&
; 402  : 		_Rechecked(_Vector_iterator<_Myvec>& _Iter,
; 403  : 			typename _Vector_iterator<_Myvec>
; 404  : 				::_Unchecked_type _Right)
; 405  : 	{	// convert to checked
; 406  : 	return (_Iter._Rechecked(_Right));
; 407  : 	}
; 408  : 
; 409  : template<class _Myvec> inline
; 410  : 	_Vector_iterator<_Myvec> operator+(
; 411  : 		typename _Vector_iterator<_Myvec>::difference_type _Off,
; 412  : 		_Vector_iterator<_Myvec> _Next)
; 413  : 	{	// add offset to iterator
; 414  : 	return (_Next += _Off);
; 415  : 	}
; 416  : 
; 417  : 		// vector TYPE WRAPPERS
; 418  : template<class _Value_type,
; 419  : 	class _Size_type,
; 420  : 	class _Difference_type,
; 421  : 	class _Pointer,
; 422  : 	class _Const_pointer,
; 423  : 	class _Reference,
; 424  : 	class _Const_reference>
; 425  : 	struct _Vec_iter_types
; 426  : 	{	// wraps types needed by iterators
; 427  : 	typedef _Value_type value_type;
; 428  : 	typedef _Size_type size_type;
; 429  : 	typedef _Difference_type difference_type;
; 430  : 	typedef _Pointer pointer;
; 431  : 	typedef _Const_pointer const_pointer;
; 432  : 	typedef _Reference reference;
; 433  : 	typedef _Const_reference const_reference;
; 434  : 	};
; 435  : 
; 436  : template<class _Ty,
; 437  : 	class _Alloc0>
; 438  : 	struct _Vec_base_types
; 439  : 	{	// types needed for a container base
; 440  : 	typedef _Alloc0 _Alloc;
; 441  : 	typedef _Vec_base_types<_Ty, _Alloc> _Myt;
; 442  : 
; 443  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 444  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 445  : 
; 446  : 
; 447  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 448  : 		_Simple_types<typename _Alty::value_type>,
; 449  : 		_Vec_iter_types<typename _Alty::value_type,
; 450  : 			typename _Alty::size_type,
; 451  : 			typename _Alty::difference_type,
; 452  : 			typename _Alty::pointer,
; 453  : 			typename _Alty::const_pointer,
; 454  : 			typename _Alty::reference,
; 455  : 			typename _Alty::const_reference> >::type
; 456  : 		_Val_types;
; 457  : 	};
; 458  : 
; 459  : 		// TEMPLATE CLASS _Vector_val
; 460  : template<class _Val_types>
; 461  : 	class _Vector_val
; 462  : 		: public _Container_base
; 463  : 	{	// base class for vector to hold data
; 464  : public:
; 465  : 	typedef _Vector_val<_Val_types> _Myt;
; 466  : 
; 467  : 	typedef typename _Val_types::value_type value_type;
; 468  : 	typedef typename _Val_types::size_type size_type;
; 469  : 	typedef typename _Val_types::difference_type difference_type;
; 470  : 	typedef typename _Val_types::pointer pointer;
; 471  : 	typedef typename _Val_types::const_pointer const_pointer;
; 472  : 	typedef typename _Val_types::reference reference;
; 473  : 	typedef typename _Val_types::const_reference const_reference;
; 474  : 
; 475  : 	typedef _Vector_iterator<_Myt> iterator;
; 476  : 	typedef _Vector_const_iterator<_Myt> const_iterator;
; 477  : 
; 478  : 	_Vector_val()
; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();
; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}
; 484  : 
; 485  : 	pointer _Myfirst;	// pointer to beginning of array
; 486  : 	pointer _Mylast;	// pointer to current end of sequence
; 487  : 	pointer _Myend;	// pointer to end of array
; 488  : 	};
; 489  : 
; 490  : 		// TEMPLATE CLASS _Vector_alloc
; 491  : template<class _Alloc_types>
; 492  : 	class _Vector_alloc
; 493  : 	{	// base class for vector to hold allocator
; 494  : public:
; 495  : 	typedef _Vector_alloc<_Alloc_types> _Myt;
; 496  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 497  : 	typedef typename _Alloc_types::_Alty _Alty;
; 498  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 499  : 
; 500  : 	typedef typename _Val_types::value_type value_type;
; 501  : 	typedef typename _Val_types::size_type size_type;
; 502  : 	typedef typename _Val_types::difference_type difference_type;
; 503  : 	typedef typename _Val_types::pointer pointer;
; 504  : 	typedef typename _Val_types::const_pointer const_pointer;
; 505  : 	typedef typename _Val_types::reference reference;
; 506  : 	typedef typename _Val_types::const_reference const_reference;
; 507  : 
; 508  : 	typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
; 509  : 	typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
; 510  : 
; 511  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 512  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 513  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 514  : 		{	// construct allocator from _Al
; 515  : 		}
; 516  : 
; 517  : 	_Vector_alloc(_Alloc&& _Al)
; 518  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 519  : 		{	// construct allocator from _Al
; 520  : 		}
; 521  : 
; 522  : 	void _Copy_alloc(const _Alty& _Al)
; 523  : 		{	// replace old allocator
; 524  : 		_Pocca(_Getal(), _Al);
; 525  : 		}
; 526  : 
; 527  : 	void _Move_alloc(_Alty& _Al)
; 528  : 		{	// replace old allocator
; 529  : 		_Pocma(_Getal(), _Al);
; 530  : 		}
; 531  : 
; 532  : 	void _Swap_alloc(_Myt& _Right)
; 533  : 		{	// swap allocators
; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}
; 536  : 
; 537  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 538  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 540  : 		{	// construct allocator from _Al
; 541  : 		_Alloc_proxy();
; 542  : 		}
; 543  : 
; 544  : 	_Vector_alloc(_Alloc&& _Al)
; 545  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 546  : 		{	// construct allocator from _Al
; 547  : 		_Alloc_proxy();
; 548  : 		}
; 549  : 
; 550  : 	~_Vector_alloc() _NOEXCEPT
; 551  : 		{	// destroy proxy
; 552  : 		_Free_proxy();
; 553  : 		}
; 554  : 
; 555  : 	void _Copy_alloc(const _Alty& _Al)
; 556  : 		{	// replace old allocator
; 557  : 		_Free_proxy();
; 558  : 		_Pocca(_Getal(), _Al);
; 559  : 		_Alloc_proxy();
; 560  : 		}
; 561  : 
; 562  : 	void _Move_alloc(_Alty& _Al)
; 563  : 		{	// replace old allocator
; 564  : 		_Free_proxy();
; 565  : 		_Pocma(_Getal(), _Al);
; 566  : 		_Alloc_proxy();
; 567  : 		}
; 568  : 
; 569  : 	void _Swap_alloc(_Myt& _Right)
; 570  : 		{	// swap allocators
; 571  : 		_Pocs(_Getal(), _Right._Getal());
; 572  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 573  : 		}
; 574  : 
; 575  : 	void _Alloc_proxy()
; 576  : 		{	// construct proxy
; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());
; 579  : 		_Myproxy() = _Alproxy.allocate(1);
; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 581  : 		_Myproxy()->_Mycont = &_Get_data();
; 582  : 		}
; 583  : 
; 584  : 	void _Free_proxy()
; 585  : 		{	// destroy proxy
; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());
; 588  : 		_Orphan_all();
; 589  : 		_Alproxy.destroy(_Myproxy());
; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 591  : 		_Myproxy() = 0;
; 592  : 		}
; 593  : 
; 594  : 	_Iterator_base12 **_Getpfirst() const
; 595  : 		{	// get address of iterator chain
; 596  : 		return (_Get_data()._Getpfirst());
; 597  : 		}
; 598  : 
; 599  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 600  : 		{	// return reference to _Myproxy
; 601  : 		return (_Get_data()._Myproxy);
; 602  : 		}
; 603  : 
; 604  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 605  : 		{	// return const reference to _Myproxy
; 606  : 		return (_Get_data()._Myproxy);
; 607  : 		}
; 608  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 609  : 
; 610  : 	void _Orphan_all()
; 611  : 		{	// orphan all iterators
; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}
; 614  : 
; 615  : 	void _Swap_all(_Myt& _Right)
; 616  : 		{	// swap all iterators
; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}
; 619  : 
; 620  : 	_Alty& _Getal() _NOEXCEPT
; 621  : 		{	// return reference to allocator
; 622  : 		return (_Mypair._Get_first());
; 623  : 		}
; 624  : 
; 625  : 	const _Alty& _Getal() const _NOEXCEPT
; 626  : 		{	// return const reference to allocator
; 627  : 		return (_Mypair._Get_first());
; 628  : 		}
; 629  : 
; 630  : 	_Vector_val<_Val_types>& _Get_data() _NOEXCEPT
; 631  : 		{	// return reference to _Vector_val
; 632  : 		return (_Mypair._Get_second());
; 633  : 		}
; 634  : 
; 635  : 	const _Vector_val<_Val_types>& _Get_data() const _NOEXCEPT
; 636  : 		{	// return const reference to _Vector_val
; 637  : 		return (_Mypair._Get_second());
; 638  : 		}
; 639  : 
; 640  : 	pointer& _Myfirst() _NOEXCEPT
; 641  : 		{	// return reference to _Myfirst
; 642  : 		return (_Get_data()._Myfirst);
; 643  : 		}
; 644  : 
; 645  : 	const pointer& _Myfirst() const _NOEXCEPT
; 646  : 		{	// return const reference to _Myfirst
; 647  : 		return (_Get_data()._Myfirst);
; 648  : 		}
; 649  : 
; 650  : 	pointer& _Mylast() _NOEXCEPT
; 651  : 		{	// return reference to _Mylast
; 652  : 		return (_Get_data()._Mylast);
; 653  : 		}
; 654  : 
; 655  : 	const pointer& _Mylast() const _NOEXCEPT
; 656  : 		{	// return const reference to _Mylast
; 657  : 		return (_Get_data()._Mylast);
; 658  : 		}
; 659  : 
; 660  : 	pointer& _Myend() _NOEXCEPT
; 661  : 		{	// return reference to _Myend
; 662  : 		return (_Get_data()._Myend);
; 663  : 		}
; 664  : 
; 665  : 	const pointer& _Myend() const _NOEXCEPT
; 666  : 		{	// return const reference to _Myend
; 667  : 		return (_Get_data()._Myend);
; 668  : 		}
; 669  : 
; 670  : private:
; 671  : 	_Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
; 672  : 	};
; 673  : 
; 674  : 		// TEMPLATE CLASS vector
; 675  : template<class _Ty,
; 676  : 	class _Alloc = allocator<_Ty> >
; 677  : 	class vector
; 678  : 		: public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
; 679  : 	{	// varying size array of values
; 680  : public:
; 681  : 	typedef vector<_Ty, _Alloc> _Myt;
; 682  : 	typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
; 683  : 	typedef _Alloc allocator_type;
; 684  : 
; 685  : 	typedef typename _Mybase::_Alty _Alty;
; 686  : 
; 687  : 	typedef typename _Mybase::value_type value_type;
; 688  : 	typedef typename _Mybase::size_type size_type;
; 689  : 	typedef typename _Mybase::difference_type difference_type;
; 690  : 	typedef typename _Mybase::pointer pointer;
; 691  : 	typedef typename _Mybase::const_pointer const_pointer;
; 692  : 	typedef typename _Mybase::reference reference;
; 693  : 	typedef typename _Mybase::const_reference const_reference;
; 694  : 
; 695  :  #define _VICONT(it)	it._Getcont()
; 696  :  #define _VIPTR(it)	(it)._Ptr
; 697  : 
; 698  : 	typedef typename _Mybase::iterator iterator;
; 699  : 	typedef typename _Mybase::const_iterator const_iterator;
; 700  : 
; 701  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 702  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 703  : 
; 704  : 	vector() _NOEXCEPT
; 705  : 		: _Mybase()
; 706  : 		{	// construct empty vector
; 707  : 		}
; 708  : 
; 709  : 	explicit vector(const _Alloc& _Al) _NOEXCEPT
; 710  : 		: _Mybase(_Al)
; 711  : 		{	// construct empty vector, allocator
; 712  : 		}
; 713  : 
; 714  : 	explicit vector(size_type _Count)
; 715  : 		: _Mybase()
; 716  : 		{	// construct from _Count * value_type()
; 717  : 		if (_Buy(_Count))
; 718  : 			{	// nonzero, fill it
; 719  : 			_TRY_BEGIN
; 720  : 			_Uninitialized_default_fill_n(this->_Myfirst(), _Count,
; 721  : 				this->_Getal());
; 722  : 			this->_Mylast() += _Count;
; 723  : 			_CATCH_ALL
; 724  : 			_Tidy();
; 725  : 			_RERAISE;
; 726  : 			_CATCH_END
; 727  : 			}
; 728  : 		}
; 729  : 
; 730  : 	vector(size_type _Count, const value_type& _Val)
; 731  : 		: _Mybase()
; 732  : 		{	// construct from _Count * _Val
; 733  : 		_Construct_n(_Count, _STD addressof(_Val));
; 734  : 		}
; 735  : 
; 736  : 	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 737  : 		: _Mybase(_Al)
; 738  : 		{	// construct from _Count * _Val, allocator
; 739  : 		_Construct_n(_Count, _STD addressof(_Val));
; 740  : 		}
; 741  : 
; 742  : 	vector(const _Myt& _Right)
; 743  : 
; 744  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 745  : 
; 746  : 
; 747  : 		{	// construct by copying _Right
; 748  : 		if (_Buy(_Right.size()))
; 749  : 			_TRY_BEGIN
; 750  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 751  : 				this->_Myfirst());
; 752  : 			_CATCH_ALL
; 753  : 			_Tidy();
; 754  : 			_RERAISE;
; 755  : 			_CATCH_END
; 756  : 		}
; 757  : 
; 758  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 759  : 		: _Mybase(_Al)
; 760  : 		{	// construct by copying _Right, allocator
; 761  : 		if (_Buy(_Right.size()))
; 762  : 			_TRY_BEGIN
; 763  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 764  : 				this->_Myfirst());
; 765  : 			_CATCH_ALL
; 766  : 			_Tidy();
; 767  : 			_RERAISE;
; 768  : 			_CATCH_END
; 769  : 		}
; 770  : 
; 771  : 	template<class _Iter,
; 772  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 773  : 			void>::type>
; 774  : 		vector(_Iter _First, _Iter _Last)
; 775  : 		: _Mybase()
; 776  : 		{	// construct from [_First, _Last)
; 777  : 		_Construct(_First, _Last);
; 778  : 		}
; 779  : 
; 780  : 	template<class _Iter,
; 781  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 782  : 			void>::type>
; 783  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 784  : 		: _Mybase(_Al)
; 785  : 		{	// construct from [_First, _Last) with allocator
; 786  : 		_Construct(_First, _Last);
; 787  : 		}
; 788  : 
; 789  : 	template<class _Iter>
; 790  : 		void _Construct(_Iter _First, _Iter _Last)
; 791  : 		{	// initialize with [_First, _Last)
; 792  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 793  : 		}
; 794  : 
; 795  : 	template<class _Iter>
; 796  : 		void _Construct(_Iter _First, _Iter _Last,
; 797  : 			input_iterator_tag)
; 798  : 		{	// initialize with [_First, _Last), input iterators
; 799  : 		_TRY_BEGIN
; 800  : 
; 801  : 		for (; _First != _Last; ++_First)
; 802  : 			emplace_back(*_First);
; 803  : 
; 804  : 		_CATCH_ALL
; 805  : 		_Tidy();
; 806  : 		_RERAISE;
; 807  : 		_CATCH_END
; 808  : 		}
; 809  : 
; 810  : 	template<class _Iter>
; 811  : 		void _Construct(_Iter _First, _Iter _Last,
; 812  : 			forward_iterator_tag)
; 813  : 		{	// initialize with [_First, _Last), forward iterators
; 814  : 		if (_Buy(_STD distance(_First, _Last)))
; 815  : 			{	// nonzero, fill it
; 816  : 			_TRY_BEGIN
; 817  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 818  : 			_CATCH_ALL
; 819  : 			_Tidy();
; 820  : 			_RERAISE;
; 821  : 			_CATCH_END
; 822  : 			}
; 823  : 		}
; 824  : 
; 825  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 826  : 		{	// construct from _Count * *_Pval
; 827  : 		if (_Buy(_Count))
; 828  : 			{	// nonzero, fill it
; 829  : 			_TRY_BEGIN
; 830  : 			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
; 831  : 			_CATCH_ALL
; 832  : 			_Tidy();
; 833  : 			_RERAISE;
; 834  : 			_CATCH_END
; 835  : 			}
; 836  : 		}
; 837  : 
; 838  : 	vector(_Myt&& _Right) _NOEXCEPT
; 839  : 		: _Mybase(_STD move(_Right._Getal()))
; 840  : 		{	// construct by moving _Right
; 841  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 842  : 		}
; 843  : 
; 844  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 845  : 		: _Mybase(_Al)
; 846  : 		{	// construct by moving _Right, allocator
; 847  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 848  : 		}
; 849  : 
; 850  : 	_Myt& operator=(_Myt&& _Right)
; 851  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 852  : 			|| _Alty::is_always_equal::value)
; 853  : 		{	// assign by moving _Right
; 854  : 		if (this != &_Right)
; 855  : 			{	// different, assign it
; 856  : 			_Tidy();
; 857  : 			if (_Alty::propagate_on_container_move_assignment::value
; 858  : 				&& this->_Getal() != _Right._Getal())
; 859  : 				this->_Move_alloc(_Right._Getal());
; 860  : 
; 861  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 862  : 			}
; 863  : 		return (*this);
; 864  : 		}
; 865  : 
; 866  : 	void _Assign_rv(_Myt&& _Right, true_type)
; 867  : 		{	// move from _Right, stealing its contents
; 868  : 		this->_Swap_all((_Myt&)_Right);
; 869  : 		this->_Myfirst() = _Right._Myfirst();
; 870  : 		this->_Mylast() = _Right._Mylast();
; 871  : 		this->_Myend() = _Right._Myend();
; 872  : 
; 873  : 		_Right._Myfirst() = pointer();
; 874  : 		_Right._Mylast() = pointer();
; 875  : 		_Right._Myend() = pointer();
; 876  : 		}
; 877  : 
; 878  : 	void _Assign_rv(_Myt&& _Right, false_type)
; 879  : 		{	// move from _Right, possibly moving its contents
; 880  : 		if (get_allocator() == _Right.get_allocator())
; 881  : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 882  : 		else
; 883  : 			_Construct(_STD make_move_iterator(_Right.begin()),
; 884  : 				_STD make_move_iterator(_Right.end()));
; 885  : 		}
; 886  : 
; 887  : 	void _Assign_rv(_Myt&& _Right)
; 888  : 		{	// assign by moving _Right
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 890  : 			typename _Alty::propagate_on_container_move_assignment());
; 891  : 		}
; 892  : 
; 893  : 
; 894  : 	void push_back(value_type&& _Val)
; 895  : 		{	// insert by moving into element at end
; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 899  : 			if (this->_Mylast() == this->_Myend())
; 900  : 				_Reserve(1);
; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 902  : 			this->_Getal().construct(this->_Mylast(),
; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();
; 905  : 			}
; 906  : 		else
; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())
; 909  : 				_Reserve(1);
; 910  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 911  : 			this->_Getal().construct(this->_Mylast(),
; 912  : 				_STD forward<value_type>(_Val));
; 913  : 			++this->_Mylast();
; 914  : 			}
; 915  : 		}
; 916  : 
; 917  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 918  : 		{	// insert by moving _Val at _Where
; 919  : 		return (emplace(_Where, _STD move(_Val)));
; 920  : 		}
; 921  : 
; 922  : 	template<class... _Valty>
; 923  : 		void emplace_back(_Valty&&... _Val)
; 924  : 		{	// insert by moving into element at end
; 925  : 		if (this->_Mylast() == this->_Myend())
; 926  : 			_Reserve(1);
; 927  : 		_Orphan_range(this->_Mylast(), this->_Mylast());
; 928  : 		this->_Getal().construct(this->_Mylast(),
; 929  : 			_STD forward<_Valty>(_Val)...);
; 930  : 		++this->_Mylast();
; 931  : 		}
; 932  : 
; 933  : 	template<class... _Valty>
; 934  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 935  : 		{	// insert by moving _Val at _Where
; 936  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 937  : 
; 938  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 939  : 		if (size() < _Off)
; 940  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 941  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 942  : 
; 943  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 944  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 945  : 		return (begin() + _Off);
; 946  : 		}
; 947  : 
; 948  : 
; 949  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Construct(_Ilist.begin(), _Ilist.end());
; 954  : 		}
; 955  : 
; 956  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 957  : 		{	// assign initializer_list
; 958  : 		assign(_Ilist.begin(), _Ilist.end());
; 959  : 		return (*this);
; 960  : 		}
; 961  : 
; 962  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 963  : 		{	// assign initializer_list
; 964  : 		assign(_Ilist.begin(), _Ilist.end());
; 965  : 		}
; 966  : 
; 967  : 	iterator insert(const_iterator _Where,
; 968  : 		_XSTD initializer_list<value_type> _Ilist)
; 969  : 		{	// insert initializer_list
; 970  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 971  : 		}
; 972  : 
; 973  : 	~vector() _NOEXCEPT
; 974  : 		{	// destroy the object
; 975  : 		_Tidy();
; 976  : 		}
; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  0004f	8b fa		 mov	 edi, edx
  00051	2b f9		 sub	 edi, ecx
  00053	c1 ff 02	 sar	 edi, 2

; 1278 : 			if (this->_Mylast() == this->_Myend())

  00056	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00059	75 09		 jne	 SHORT $LN81@AddUserInZ

; 1279 : 				_Reserve(1);

  0005b	6a 01		 push	 1
  0005d	8b ce		 mov	 ecx, esi
  0005f	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN81@AddUserInZ:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00064	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00067	85 c9		 test	 ecx, ecx
  00069	74 42		 je	 SHORT $LN282@AddUserInZ
  0006b	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1279 : 		LeaveCriticalSection(&this->m_CritSection);

  0006d	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0006e	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00071	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00073	83 46 04 04	 add	 DWORD PTR [esi+4], 4
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1279 : 		LeaveCriticalSection(&this->m_CritSection);

  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi

; 1280 : 		return true;

  0007f	b0 01		 mov	 al, 1
  00081	5b		 pop	 ebx

; 1286 : 	}
; 1287 : }

  00082	5d		 pop	 ebp
  00083	c2 08 00	 ret	 8
$LN6@AddUserInZ:

; 1281 : 	}
; 1282 : 	else
; 1283 : 	{
; 1284 : 		LeaveCriticalSection(&this->m_CritSection);

  00086	53		 push	 ebx
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi

; 1285 : 		return false;

  0008f	32 c0		 xor	 al, al
  00091	5b		 pop	 ebx

; 1286 : 	}
; 1287 : }

  00092	5d		 pop	 ebp
  00093	c2 08 00	 ret	 8
$LN79@AddUserInZ:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1287 : 			if (this->_Mylast() == this->_Myend())

  00096	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00099	75 09		 jne	 SHORT $LN82@AddUserInZ

; 1288 : 				_Reserve(1);

  0009b	6a 01		 push	 1
  0009d	8b ce		 mov	 ecx, esi
  0009f	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN82@AddUserInZ:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  000a4	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a7	85 c0		 test	 eax, eax
  000a9	74 02		 je	 SHORT $LN282@AddUserInZ
  000ab	89 38		 mov	 DWORD PTR [eax], edi
$LN282@AddUserInZ:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  000ad	83 46 04 04	 add	 DWORD PTR [esi+4], 4
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1279 : 		LeaveCriticalSection(&this->m_CritSection);

  000b1	53		 push	 ebx
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi

; 1280 : 		return true;

  000ba	b0 01		 mov	 al, 1
  000bc	5b		 pop	 ebx

; 1286 : 	}
; 1287 : }

  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8
?AddUserInZone@CImperialGuardian@@QAE_NHH@Z ENDP	; CImperialGuardian::AddUserInZone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?GetCurrentZoneIndex@CImperialGuardian@@QAEHH@Z
_TEXT	SEGMENT
_vtTemp$1 = -20						; size = 12
tv778 = -8						; size = 4
tv781 = -4						; size = 4
_nUserNumber$ = 8					; size = 4
?GetCurrentZoneIndex@CImperialGuardian@@QAEHH@Z PROC	; CImperialGuardian::GetCurrentZoneIndex, COMDAT
; _this$ = ecx

; 1233 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8d 81 cc 01 00
	00		 lea	 eax, DWORD PTR [ecx+460]

; 1236 : 	for(int i = 0; i < IMPERIAL_GUARDIAN_MAXZONE; i++)

  0000e	33 f6		 xor	 esi, esi
  00010	8d 59 3c	 lea	 ebx, DWORD PTR [ecx+60]
  00013	89 45 fc	 mov	 DWORD PTR tv781[ebp], eax
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _nUserNumber$[ebp]
  0001a	89 5d f8	 mov	 DWORD PTR tv778[ebp], ebx
  0001d	0f 1f 00	 npad	 3
$LL4@GetCurrent:

; 1237 : 	{
; 1238 : 		EnterCriticalSection(&this->m_CritSection);

  00020	50		 push	 eax
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 1239 : 
; 1240 : 		std::vector<int> vtTemp = this->m_ZoneInfo[i].m_vtUserIndex;

  00027	53		 push	 ebx
  00028	8d 4d ec	 lea	 ecx, DWORD PTR _vtTemp$1[ebp]
  0002b	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  00030	8b 5d ec	 mov	 ebx, DWORD PTR _vtTemp$1[ebp]
  00033	8b c3		 mov	 eax, ebx

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00035	8b 4d f0	 mov	 ecx, DWORD PTR _vtTemp$1[ebp+4]
  00038	3b d9		 cmp	 ebx, ecx
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1243 : 		for( ; it != vtTemp.end(); it++)

  0003a	74 13		 je	 SHORT $LN6@GetCurrent
  0003c	0f 1f 40 00	 npad	 4
$LL7@GetCurrent:

; 1244 : 		{
; 1245 : 			nResult = *it;
; 1246 : 
; 1247 : 			if( nResult == nUserNumber )

  00040	39 38		 cmp	 DWORD PTR [eax], edi
  00042	0f 84 90 00 00
	00		 je	 $LN301@GetCurrent
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  00048	83 c0 04	 add	 eax, 4

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  0004b	3b c1		 cmp	 eax, ecx
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1243 : 		for( ; it != vtTemp.end(); it++)

  0004d	75 f1		 jne	 SHORT $LL7@GetCurrent
$LN6@GetCurrent:

; 1251 : 			}
; 1252 : 		}
; 1253 : 		LeaveCriticalSection(&this->m_CritSection);

  0004f	ff 75 fc	 push	 DWORD PTR tv781[ebp]
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00058	85 db		 test	 ebx, ebx
  0005a	74 65		 je	 SHORT $LN2@GetCurrent

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _vtTemp$1[ebp+8]
  0005f	2b c3		 sub	 eax, ebx
  00061	c1 f8 02	 sar	 eax, 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00064	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00069	0f 87 c9 00 00
	00		 ja	 $LN315@GetCurrent

; 101  : 	const size_t _User_size = _Count * _Sz;

  0006f	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00072	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00077	72 2a		 jb	 SHORT $LN262@GetCurrent

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00079	f6 c3 1f	 test	 bl, 31			; 0000001fH
  0007c	0f 85 b6 00 00
	00		 jne	 $LN315@GetCurrent

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00082	8b 43 fc	 mov	 eax, DWORD PTR [ebx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00085	3b c3		 cmp	 eax, ebx
  00087	0f 83 ab 00 00
	00		 jae	 $LN315@GetCurrent

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0008d	2b d8		 sub	 ebx, eax
  0008f	83 fb 04	 cmp	 ebx, 4
  00092	0f 82 a0 00 00
	00		 jb	 $LN315@GetCurrent

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00098	83 fb 23	 cmp	 ebx, 35			; 00000023H
  0009b	0f 87 97 00 00
	00		 ja	 $LN315@GetCurrent

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000a1	8b d8		 mov	 ebx, eax
$LN262@GetCurrent:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  000a3	53		 push	 ebx
  000a4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000a9	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  000ac	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _vtTemp$1[ebp], 0

; 1663 : 			this->_Mylast() = pointer();

  000b3	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _vtTemp$1[ebp+4], 0

; 1664 : 			this->_Myend() = pointer();

  000ba	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _vtTemp$1[ebp+8], 0
$LN2@GetCurrent:
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1236 : 	for(int i = 0; i < IMPERIAL_GUARDIAN_MAXZONE; i++)

  000c1	8b 5d f8	 mov	 ebx, DWORD PTR tv778[ebp]
  000c4	46		 inc	 esi
  000c5	83 c3 64	 add	 ebx, 100		; 00000064H
  000c8	89 5d f8	 mov	 DWORD PTR tv778[ebp], ebx
  000cb	83 fe 04	 cmp	 esi, 4
  000ce	7d 5c		 jge	 SHORT $LN313@GetCurrent
  000d0	8b 45 fc	 mov	 eax, DWORD PTR tv781[ebp]
  000d3	e9 48 ff ff ff	 jmp	 $LL4@GetCurrent
$LN301@GetCurrent:

; 1248 : 			{
; 1249 : 				LeaveCriticalSection(&this->m_CritSection);

  000d8	ff 75 fc	 push	 DWORD PTR tv781[ebp]
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  000e1	85 db		 test	 ebx, ebx
  000e3	74 3c		 je	 SHORT $LN84@GetCurrent

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  000e5	8b 45 f4	 mov	 eax, DWORD PTR _vtTemp$1[ebp+8]
  000e8	2b c3		 sub	 eax, ebx
  000ea	c1 f8 02	 sar	 eax, 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  000ed	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  000f2	77 44		 ja	 SHORT $LN315@GetCurrent

; 101  : 	const size_t _User_size = _Count * _Sz;

  000f4	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  000f7	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000fc	72 1a		 jb	 SHORT $LN152@GetCurrent

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  000fe	f6 c3 1f	 test	 bl, 31			; 0000001fH
  00101	75 3a		 jne	 SHORT $LN317@GetCurrent

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00103	8b 43 fc	 mov	 eax, DWORD PTR [ebx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00106	3b c3		 cmp	 eax, ebx
  00108	73 38		 jae	 SHORT $LN318@GetCurrent

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0010a	2b d8		 sub	 ebx, eax
  0010c	83 fb 04	 cmp	 ebx, 4
  0010f	72 36		 jb	 SHORT $LN319@GetCurrent

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00111	83 fb 23	 cmp	 ebx, 35			; 00000023H
  00114	77 36		 ja	 SHORT $LN320@GetCurrent

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00116	8b d8		 mov	 ebx, eax
$LN152@GetCurrent:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00118	53		 push	 ebx
  00119	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011e	83 c4 04	 add	 esp, 4
$LN84@GetCurrent:
  00121	5f		 pop	 edi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1250 : 				return i;

  00122	8b c6		 mov	 eax, esi
  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx

; 1256 : }

  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 04 00	 ret	 4
$LN313@GetCurrent:
  0012c	5f		 pop	 edi
  0012d	5e		 pop	 esi

; 1254 : 	}
; 1255 : 	return -1;

  0012e	83 c8 ff	 or	 eax, -1
  00131	5b		 pop	 ebx

; 1256 : }

  00132	8b e5		 mov	 esp, ebp
  00134	5d		 pop	 ebp
  00135	c2 04 00	 ret	 4
$LN315@GetCurrent:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00138	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN321@GetCurrent:
$LN317@GetCurrent:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0013d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN322@GetCurrent:
$LN318@GetCurrent:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00142	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN323@GetCurrent:
$LN319@GetCurrent:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00147	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN324@GetCurrent:
$LN320@GetCurrent:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0014c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN325@GetCurrent:
$LN314@GetCurrent:
  00151	cc		 int	 3
?GetCurrentZoneIndex@CImperialGuardian@@QAEHH@Z ENDP	; CImperialGuardian::GetCurrentZoneIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?CheckLiveMonster@CImperialGuardian@@QAEXH@Z
_TEXT	SEGMENT
_nZoneIndex$ = 8					; size = 4
?CheckLiveMonster@CImperialGuardian@@QAEXH@Z PROC	; CImperialGuardian::CheckLiveMonster, COMDAT
; _this$ = ecx

; 1207 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1208 : 	std::vector<_stMonsterIndexInfo>::iterator it = this->m_ZoneInfo[nZoneIndex].m_vtMonsterIndexInfo.begin();

  00004	6b 5d 08 64	 imul	 ebx, DWORD PTR _nZoneIndex$[ebp], 100
  00008	03 d9		 add	 ebx, ecx
  0000a	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  0000b	8b 73 30	 mov	 esi, DWORD PTR [ebx+48]

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  0000e	3b 73 34	 cmp	 esi, DWORD PTR [ebx+52]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1210 : 	for( ; it != this->m_ZoneInfo[nZoneIndex].m_vtMonsterIndexInfo.end(); it++ )

  00011	0f 84 81 00 00
	00		 je	 $LN3@CheckLiveM
  00017	57		 push	 edi
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@CheckLiveM:

; 1211 : 	{
; 1212 : 		_stMonsterIndexInfo stMonsterIndex = *it;

  00020	8b 16		 mov	 edx, DWORD PTR [esi]

; 1213 : 
; 1214 : 		if( !gObj[stMonsterIndex.m_iIndex].Live && stMonsterIndex.m_bLiveMonster==1 ||

  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00027	69 fa 40 27 00
	00		 imul	 edi, edx, 10048
  0002d	80 7c 07 51 00	 cmp	 BYTE PTR [edi+eax+81], 0
  00032	75 06		 jne	 SHORT $LN7@CheckLiveM
  00034	80 7e 04 01	 cmp	 BYTE PTR [esi+4], 1
  00038	74 07		 je	 SHORT $LN6@CheckLiveM
$LN7@CheckLiveM:
  0003a	83 7c 07 04 03	 cmp	 DWORD PTR [edi+eax+4], 3
  0003f	74 04		 je	 SHORT $LN5@CheckLiveM
$LN6@CheckLiveM:

; 1215 : 			gObj[stMonsterIndex.m_iIndex].Connected != PLAYER_PLAYING )
; 1216 : 		{
; 1217 : 			it->m_bLiveMonster = 0;

  00041	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
$LN5@CheckLiveM:

; 1218 : 		}
; 1219 : 
; 1220 : 		if( gObj[stMonsterIndex.m_iIndex].Live && 
; 1221 : 			gObj[stMonsterIndex.m_iIndex].m_State != 1 &&

  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004b	03 cf		 add	 ecx, edi
  0004d	80 79 51 00	 cmp	 BYTE PTR [ecx+81], 0
  00051	74 3c		 je	 SHORT $LN2@CheckLiveM
  00053	8b 81 d0 01 00
	00		 mov	 eax, DWORD PTR [ecx+464]
  00059	83 f8 01	 cmp	 eax, 1
  0005c	74 31		 je	 SHORT $LN2@CheckLiveM
  0005e	83 f8 02	 cmp	 eax, 2
  00061	74 2c		 je	 SHORT $LN2@CheckLiveM

; 1222 : 			gObj[stMonsterIndex.m_iIndex].m_State != 2 )
; 1223 : 		{
; 1224 : 			LogAddTD("[IMPERIALGUARDIAN][RESTORE] [NAME]:%s [INDEX]:%d [TYPE]:%d [STATE]:%d",

  00063	50		 push	 eax
  00064	0f b7 81 90 00
	00 00		 movzx	 eax, WORD PTR [ecx+144]
  0006b	50		 push	 eax
  0006c	52		 push	 edx
  0006d	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00070	50		 push	 eax
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@MJKDFELM@?$FLIMPERIALGUARDIAN?$FN?$FLRESTORE?$FN?5?$FLNAM@
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1225 : 				gObj[stMonsterIndex.m_iIndex].Name,stMonsterIndex.m_iIndex,gObj[stMonsterIndex.m_iIndex].Class,gObj[stMonsterIndex.m_iIndex].m_State);
; 1226 : 
; 1227 : 			gObj[stMonsterIndex.m_iIndex].m_State = 1;

  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00081	83 c4 14	 add	 esp, 20			; 00000014H
  00084	c7 84 07 d0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR [edi+eax+464], 1
$LN2@CheckLiveM:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  0008f	83 c6 08	 add	 esi, 8

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00092	3b 73 34	 cmp	 esi, DWORD PTR [ebx+52]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1210 : 	for( ; it != this->m_ZoneInfo[nZoneIndex].m_vtMonsterIndexInfo.end(); it++ )

  00095	75 89		 jne	 SHORT $LL4@CheckLiveM
  00097	5f		 pop	 edi
$LN3@CheckLiveM:
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx

; 1228 : 		}
; 1229 : 	}
; 1230 : }

  0009a	5d		 pop	 ebp
  0009b	c2 04 00	 ret	 4
?CheckLiveMonster@CImperialGuardian@@QAEXH@Z ENDP	; CImperialGuardian::CheckLiveMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?GetLiveMonsterCount@CImperialGuardian@@QAEHH@Z
_TEXT	SEGMENT
_nZoneIndex$ = 8					; size = 4
?GetLiveMonsterCount@CImperialGuardian@@QAEHH@Z PROC	; CImperialGuardian::GetLiveMonsterCount, COMDAT
; _this$ = ecx

; 1190 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1191 : 	std::vector<_stMonsterIndexInfo>::iterator it = this->m_ZoneInfo[nZoneIndex].m_vtMonsterIndexInfo.begin();

  00003	6b 55 08 64	 imul	 edx, DWORD PTR _nZoneIndex$[ebp], 100
  00007	83 ec 08	 sub	 esp, 8
  0000a	56		 push	 esi
  0000b	03 d1		 add	 edx, ecx

; 1192 : 	int nCount = 0;

  0000d	33 f6		 xor	 esi, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  0000f	8b 4a 30	 mov	 ecx, DWORD PTR [edx+48]

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00012	3b 4a 34	 cmp	 ecx, DWORD PTR [edx+52]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1194 : 	for( ; it != this->m_ZoneInfo[nZoneIndex].m_vtMonsterIndexInfo.end(); it++ )

  00015	74 17		 je	 SHORT $LN80@GetLiveMon
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));

  00017	8b 52 34	 mov	 edx, DWORD PTR [edx+52]
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL4@GetLiveMon:
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1198 : 		if( stMonsterIndex.m_bLiveMonster == 1 )

  00020	80 79 04 01	 cmp	 BYTE PTR [ecx+4], 1
  00024	75 01		 jne	 SHORT $LN2@GetLiveMon

; 1199 : 		{
; 1200 : 			nCount++;

  00026	46		 inc	 esi
$LN2@GetLiveMon:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  00027	83 c1 08	 add	 ecx, 8

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  0002a	3b ca		 cmp	 ecx, edx
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1194 : 	for( ; it != this->m_ZoneInfo[nZoneIndex].m_vtMonsterIndexInfo.end(); it++ )

  0002c	75 f2		 jne	 SHORT $LL4@GetLiveMon
$LN80@GetLiveMon:

; 1201 : 		}
; 1202 : 	}
; 1203 : 	return nCount;

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi

; 1204 : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?GetLiveMonsterCount@CImperialGuardian@@QAEHH@Z ENDP	; CImperialGuardian::GetLiveMonsterCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?ProcCheckDungeon@CImperialGuardian@@QAEXH@Z
_TEXT	SEGMENT
_tCurrentTime$ = -48					; size = 8
_ttm$1 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_nZoneIndex$ = 8					; size = 4
?ProcCheckDungeon@CImperialGuardian@@QAEXH@Z PROC	; CImperialGuardian::ProcCheckDungeon, COMDAT
; _this$ = ecx

; 1154 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _nZoneIndex$[ebp]
  00015	8b f1		 mov	 esi, ecx

; 1155 : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  00017	85 ff		 test	 edi, edi
  00019	0f 88 df 00 00
	00		 js	 $LN6@ProcCheckD
  0001f	33 c0		 xor	 eax, eax
  00021	83 ff 03	 cmp	 edi, 3
  00024	0f 9e c0	 setle	 al
  00027	85 c0		 test	 eax, eax
  00029	0f 84 cf 00 00
	00		 je	 $LN6@ProcCheckD
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 374  : 	return( CTime( ::_time64( NULL ) ) );

  0002f	6a 00		 push	 0
  00031	e8 00 00 00 00	 call	 __time64
  00036	83 c4 04	 add	 esp, 4

; 375  : }
; 376  : 
; 377  : _Success_(return != false) inline bool CTime::GetAsDBTIMESTAMP(_Out_ DBTIMESTAMP& dbts) const throw()
; 378  : {
; 379  : 	struct tm tmLocal;
; 380  : 	if (GetLocalTm(&tmLocal) == nullptr) return false;
; 381  : 
; 382  : 	dbts.year = (SHORT) (1900 + tmLocal.tm_year);
; 383  : 	dbts.month = (USHORT) (1 + tmLocal.tm_mon);
; 384  : 	dbts.day = (USHORT) tmLocal.tm_mday;
; 385  : 	dbts.hour = (USHORT) tmLocal.tm_hour;
; 386  : 	dbts.minute = (USHORT) tmLocal.tm_min;
; 387  : 	dbts.second = (USHORT) tmLocal.tm_sec;
; 388  : 	dbts.fraction = 0;
; 389  : 
; 390  : 	return true;
; 391  : }
; 392  : 
; 393  : inline BOOL WINAPI CTime::IsValidFILETIME(_In_ const FILETIME& fileTime) throw()
; 394  : {
; 395  : 	FILETIME localTime;
; 396  : 	if (!FileTimeToLocalFileTime(&fileTime, &localTime))
; 397  : 	{
; 398  : 		return FALSE;
; 399  : 	}
; 400  : 
; 401  : 	// then convert that time to system time
; 402  : 	SYSTEMTIME sysTime;
; 403  : 	if (!FileTimeToSystemTime(&localTime, &sysTime))
; 404  : 	{
; 405  : 		return FALSE;
; 406  : 	}
; 407  : 
; 408  : 	return TRUE;
; 409  : }
; 410  : 
; 411  : inline CTime::CTime() throw() :
; 412  : 	m_time(0)
; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  00039	89 45 d0	 mov	 DWORD PTR _tCurrentTime$[ebp], eax

; 418  : {
; 419  : }
; 420  : 
; 421  : inline CTime::CTime(
; 422  : 	_In_ int nYear,
; 423  : 	_In_ int nMonth,
; 424  : 	_In_ int nDay,
; 425  : 	_In_ int nHour,
; 426  : 	_In_ int nMin,
; 427  : 	_In_ int nSec,
; 428  : 	_In_ int nDST)
; 429  : {
; 430  : #pragma warning (push)
; 431  : #pragma warning (disable: 4127)  // conditional expression constant
; 432  : 
; 433  : 	ATLENSURE( nYear >= 1900 );
; 434  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );
; 435  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );
; 436  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );
; 437  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );
; 438  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );
; 439  : 
; 440  : #pragma warning (pop)
; 441  : 
; 442  : 	struct tm atm;
; 443  : 
; 444  : 	atm.tm_sec = nSec;
; 445  : 	atm.tm_min = nMin;
; 446  : 	atm.tm_hour = nHour;
; 447  : 	atm.tm_mday = nDay;
; 448  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based
; 449  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based
; 450  : 	atm.tm_isdst = nDST;
; 451  : 
; 452  : 	m_time = _mktime64(&atm);
; 453  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 454  : 	if(m_time == -1)
; 455  : 	{
; 456  : 		AtlThrow(E_INVALIDARG);
; 457  : 	}
; 458  : }
; 459  : 
; 460  : inline CTime::CTime(
; 461  : 	_In_ WORD wDosDate,
; 462  : 	_In_ WORD wDosTime,
; 463  : 	_In_ int nDST)
; 464  : {
; 465  : 	struct tm atm;
; 466  : 	atm.tm_sec = (wDosTime & ~0xFFE0) << 1;
; 467  : 	atm.tm_min = (wDosTime & ~0xF800) >> 5;
; 468  : 	atm.tm_hour = wDosTime >> 11;
; 469  : 
; 470  : 	atm.tm_mday = wDosDate & ~0xFFE0;
; 471  : 	atm.tm_mon = ((wDosDate & ~0xFE00) >> 5) - 1;
; 472  : 	atm.tm_year = (wDosDate >> 9) + 80;
; 473  : 	atm.tm_isdst = nDST;
; 474  : 	m_time = _mktime64(&atm);
; 475  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 476  : 
; 477  : 	if(m_time == -1)
; 478  : 		AtlThrow(E_INVALIDARG);
; 479  : 
; 480  : }
; 481  : 
; 482  : inline CTime::CTime(
; 483  : 	_In_ const SYSTEMTIME& sysTime,
; 484  : 	_In_ int nDST)
; 485  : {
; 486  : 	if (sysTime.wYear < 1900)
; 487  : 	{
; 488  : 		__time64_t time0 = 0L;
; 489  : 		CTime timeT(time0);
; 490  : 		*this = timeT;
; 491  : 	}
; 492  : 	else
; 493  : 	{
; 494  : 		CTime timeT(
; 495  : 			(int)sysTime.wYear, (int)sysTime.wMonth, (int)sysTime.wDay,
; 496  : 			(int)sysTime.wHour, (int)sysTime.wMinute, (int)sysTime.wSecond,
; 497  : 			nDST);
; 498  : 		*this = timeT;
; 499  : 	}
; 500  : }
; 501  : 
; 502  : inline CTime::CTime(
; 503  : 	_In_ const FILETIME& fileTime,
; 504  : 	_In_ int nDST)
; 505  : {
; 506  : 	SYSTEMTIME sysTime;
; 507  : 	SYSTEMTIME localTime;
; 508  : 	if (!FileTimeToSystemTime(&fileTime, &sysTime) || !SystemTimeToTzSpecificLocalTime(nullptr, &sysTime, &localTime))
; 509  : 	{
; 510  : 		m_time = 0;
; 511  : 		AtlThrow(E_INVALIDARG);
; 512  : 		return;
; 513  : 	}
; 514  : 
; 515  : 	// Convert the system time to a time_t (C-runtime local time)
; 516  : 	CTime timeT(localTime, nDST);
; 517  : 	*this = timeT;
; 518  : }
; 519  : 
; 520  : inline CTime& CTime::operator=(_In_ __time64_t time) throw()
; 521  : {
; 522  : 	m_time = time;
; 523  : 
; 524  : 	return( *this );
; 525  : }
; 526  : 
; 527  : inline CTime& CTime::operator+=(_In_ CTimeSpan span) throw()
; 528  : {
; 529  : 	m_time += span.GetTimeSpan();
; 530  : 
; 531  : 	return( *this );
; 532  : }
; 533  : 
; 534  : inline CTime& CTime::operator-=(_In_ CTimeSpan span) throw()
; 535  : {
; 536  : 	m_time -= span.GetTimeSpan();
; 537  : 
; 538  : 	return( *this );
; 539  : }
; 540  : 
; 541  : inline CTimeSpan CTime::operator-(_In_ CTime time) const throw()
; 542  : {
; 543  : 	return( CTimeSpan( m_time-time.m_time ) );
; 544  : }
; 545  : 
; 546  : inline CTime CTime::operator-(_In_ CTimeSpan span) const throw()
; 547  : {
; 548  : 	return( CTime( m_time-span.GetTimeSpan() ) );
; 549  : }
; 550  : 
; 551  : inline CTime CTime::operator+(_In_ CTimeSpan span) const throw()
; 552  : {
; 553  : 	return( CTime( m_time+span.GetTimeSpan() ) );
; 554  : }
; 555  : 
; 556  : inline bool CTime::operator==(_In_ CTime time) const throw()
; 557  : {
; 558  : 	return( m_time == time.m_time );
; 559  : }
; 560  : 
; 561  : inline bool CTime::operator!=(_In_ CTime time) const throw()
; 562  : {
; 563  : 	return( m_time != time.m_time );
; 564  : }
; 565  : 
; 566  : inline bool CTime::operator<(_In_ CTime time) const throw()
; 567  : {
; 568  : 	return( m_time < time.m_time );
; 569  : }
; 570  : 
; 571  : inline bool CTime::operator>(_In_ CTime time) const throw()
; 572  : {
; 573  : 	return( m_time > time.m_time );
; 574  : }
; 575  : 
; 576  : inline bool CTime::operator<=(_In_ CTime time) const throw()
; 577  : {
; 578  : 	return( m_time <= time.m_time );
; 579  : }
; 580  : 
; 581  : inline bool CTime::operator>=(_In_ CTime time) const throw()
; 582  : {
; 583  : 	return( m_time >= time.m_time );
; 584  : }
; 585  : 
; 586  : inline _Success_(return != NULL) struct tm* CTime::GetGmtTm(_Out_ struct tm* ptm) const
; 587  : {
; 588  : 	// Ensure ptm is valid
; 589  : 	ATLENSURE( ptm != NULL );
; 590  : 
; 591  : 	if (ptm != NULL)
; 592  : 	{
; 593  : 		struct tm ptmTemp;
; 594  : 		errno_t err = _gmtime64_s(&ptmTemp, &m_time);
; 595  : 
; 596  : 		// Be sure the call succeeded
; 597  : 		if(err != 0) { return NULL; }
; 598  : 
; 599  : 		*ptm = ptmTemp;
; 600  : 		return ptm;
; 601  : 	}
; 602  : 
; 603  : 	return NULL;
; 604  : }
; 605  : 
; 606  : inline _Success_(return != NULL) struct tm* CTime::GetLocalTm(_Out_ struct tm* ptm) const
; 607  : {
; 608  : 	// Ensure ptm is valid
; 609  : 	ATLENSURE( ptm != NULL );
; 610  : 
; 611  : 	if (ptm != NULL)
; 612  : 	{
; 613  : 		struct tm ptmTemp;
; 614  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);
; 615  : 
; 616  : 		if (err != 0)
; 617  : 		{
; 618  : 			return NULL;    // indicates that m_time was not initialized!
; 619  : 		}
; 620  : 
; 621  : 		*ptm = ptmTemp;
; 622  : 		return ptm;
; 623  : 	}
; 624  : 
; 625  : 	return NULL;
; 626  : }
; 627  : 
; 628  : inline _Success_(return != false) bool CTime::GetAsSystemTime(_Out_ SYSTEMTIME& timeDest) const throw()
; 629  : {
; 630  : 	struct tm ttm;
; 631  : 	struct tm* ptm;
; 632  : 
; 633  : 	ptm = GetLocalTm(&ttm);
; 634  : 	if(!ptm) 
; 635  : 	{ 
; 636  : 		return false; 
; 637  : 	}
; 638  : 
; 639  : 	timeDest.wYear = (WORD) (1900 + ptm->tm_year);
; 640  : 	timeDest.wMonth = (WORD) (1 + ptm->tm_mon);
; 641  : 	timeDest.wDayOfWeek = (WORD) ptm->tm_wday;
; 642  : 	timeDest.wDay = (WORD) ptm->tm_mday;
; 643  : 	timeDest.wHour = (WORD) ptm->tm_hour;
; 644  : 	timeDest.wMinute = (WORD) ptm->tm_min;
; 645  : 	timeDest.wSecond = (WORD) ptm->tm_sec;
; 646  : 	timeDest.wMilliseconds = 0;
; 647  : 
; 648  : 	return true;
; 649  : }
; 650  : 
; 651  : inline __time64_t CTime::GetTime() const throw()
; 652  : {
; 653  : 	return( m_time );
; 654  : }
; 655  : 
; 656  : inline int CTime::GetYear() const
; 657  : {
; 658  : 	struct tm ttm;
; 659  : 	struct tm * ptm;
; 660  : 
; 661  : 	ptm = GetLocalTm(&ttm);
; 662  : 	return ptm ? (ptm->tm_year) + 1900 : 0 ;
; 663  : }
; 664  : 
; 665  : inline int CTime::GetMonth() const
; 666  : {
; 667  : 	struct tm ttm;
; 668  : 	struct tm * ptm;
; 669  : 
; 670  : 	ptm = GetLocalTm(&ttm);
; 671  : 	return ptm ? ptm->tm_mon + 1 : 0;
; 672  : }
; 673  : 
; 674  : inline int CTime::GetDay() const
; 675  : {
; 676  : 	struct tm ttm;
; 677  : 	struct tm * ptm;
; 678  : 
; 679  : 	ptm = GetLocalTm(&ttm);
; 680  : 	return ptm ? ptm->tm_mday : 0 ;
; 681  : }
; 682  : 
; 683  : inline int CTime::GetHour() const
; 684  : {
; 685  : 	struct tm ttm;
; 686  : 	struct tm * ptm;
; 687  : 
; 688  : 	ptm = GetLocalTm(&ttm);
; 689  : 	return ptm ? ptm->tm_hour : -1 ;
; 690  : }
; 691  : 
; 692  : inline int CTime::GetMinute() const
; 693  : {
; 694  : 	struct tm ttm;
; 695  : 	struct tm * ptm;
; 696  : 
; 697  : 	ptm = GetLocalTm(&ttm);
; 698  : 	return ptm ? ptm->tm_min : -1 ;
; 699  : }
; 700  : 
; 701  : inline int CTime::GetSecond() const
; 702  : {
; 703  : 	struct tm ttm;
; 704  : 	struct tm * ptm;
; 705  : 
; 706  : 	ptm = GetLocalTm(&ttm);
; 707  : 	return ptm ? ptm->tm_sec : -1 ;
; 708  : }
; 709  : 
; 710  : inline int CTime::GetDayOfWeek() const
; 711  : {
; 712  : 	struct tm ttm;
; 713  : 	struct tm * ptm;
; 714  : 
; 715  : 	ptm = GetLocalTm(&ttm);

  0003c	8d 45 d8	 lea	 eax, DWORD PTR _ttm$1[ebp]

; 375  : }
; 376  : 
; 377  : _Success_(return != false) inline bool CTime::GetAsDBTIMESTAMP(_Out_ DBTIMESTAMP& dbts) const throw()
; 378  : {
; 379  : 	struct tm tmLocal;
; 380  : 	if (GetLocalTm(&tmLocal) == nullptr) return false;
; 381  : 
; 382  : 	dbts.year = (SHORT) (1900 + tmLocal.tm_year);
; 383  : 	dbts.month = (USHORT) (1 + tmLocal.tm_mon);
; 384  : 	dbts.day = (USHORT) tmLocal.tm_mday;
; 385  : 	dbts.hour = (USHORT) tmLocal.tm_hour;
; 386  : 	dbts.minute = (USHORT) tmLocal.tm_min;
; 387  : 	dbts.second = (USHORT) tmLocal.tm_sec;
; 388  : 	dbts.fraction = 0;
; 389  : 
; 390  : 	return true;
; 391  : }
; 392  : 
; 393  : inline BOOL WINAPI CTime::IsValidFILETIME(_In_ const FILETIME& fileTime) throw()
; 394  : {
; 395  : 	FILETIME localTime;
; 396  : 	if (!FileTimeToLocalFileTime(&fileTime, &localTime))
; 397  : 	{
; 398  : 		return FALSE;
; 399  : 	}
; 400  : 
; 401  : 	// then convert that time to system time
; 402  : 	SYSTEMTIME sysTime;
; 403  : 	if (!FileTimeToSystemTime(&localTime, &sysTime))
; 404  : 	{
; 405  : 		return FALSE;
; 406  : 	}
; 407  : 
; 408  : 	return TRUE;
; 409  : }
; 410  : 
; 411  : inline CTime::CTime() throw() :
; 412  : 	m_time(0)
; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  0003f	89 55 d4	 mov	 DWORD PTR _tCurrentTime$[ebp+4], edx

; 418  : {
; 419  : }
; 420  : 
; 421  : inline CTime::CTime(
; 422  : 	_In_ int nYear,
; 423  : 	_In_ int nMonth,
; 424  : 	_In_ int nDay,
; 425  : 	_In_ int nHour,
; 426  : 	_In_ int nMin,
; 427  : 	_In_ int nSec,
; 428  : 	_In_ int nDST)
; 429  : {
; 430  : #pragma warning (push)
; 431  : #pragma warning (disable: 4127)  // conditional expression constant
; 432  : 
; 433  : 	ATLENSURE( nYear >= 1900 );
; 434  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );
; 435  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );
; 436  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );
; 437  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );
; 438  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );
; 439  : 
; 440  : #pragma warning (pop)
; 441  : 
; 442  : 	struct tm atm;
; 443  : 
; 444  : 	atm.tm_sec = nSec;
; 445  : 	atm.tm_min = nMin;
; 446  : 	atm.tm_hour = nHour;
; 447  : 	atm.tm_mday = nDay;
; 448  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based
; 449  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based
; 450  : 	atm.tm_isdst = nDST;
; 451  : 
; 452  : 	m_time = _mktime64(&atm);
; 453  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 454  : 	if(m_time == -1)
; 455  : 	{
; 456  : 		AtlThrow(E_INVALIDARG);
; 457  : 	}
; 458  : }
; 459  : 
; 460  : inline CTime::CTime(
; 461  : 	_In_ WORD wDosDate,
; 462  : 	_In_ WORD wDosTime,
; 463  : 	_In_ int nDST)
; 464  : {
; 465  : 	struct tm atm;
; 466  : 	atm.tm_sec = (wDosTime & ~0xFFE0) << 1;
; 467  : 	atm.tm_min = (wDosTime & ~0xF800) >> 5;
; 468  : 	atm.tm_hour = wDosTime >> 11;
; 469  : 
; 470  : 	atm.tm_mday = wDosDate & ~0xFFE0;
; 471  : 	atm.tm_mon = ((wDosDate & ~0xFE00) >> 5) - 1;
; 472  : 	atm.tm_year = (wDosDate >> 9) + 80;
; 473  : 	atm.tm_isdst = nDST;
; 474  : 	m_time = _mktime64(&atm);
; 475  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 476  : 
; 477  : 	if(m_time == -1)
; 478  : 		AtlThrow(E_INVALIDARG);
; 479  : 
; 480  : }
; 481  : 
; 482  : inline CTime::CTime(
; 483  : 	_In_ const SYSTEMTIME& sysTime,
; 484  : 	_In_ int nDST)
; 485  : {
; 486  : 	if (sysTime.wYear < 1900)
; 487  : 	{
; 488  : 		__time64_t time0 = 0L;
; 489  : 		CTime timeT(time0);
; 490  : 		*this = timeT;
; 491  : 	}
; 492  : 	else
; 493  : 	{
; 494  : 		CTime timeT(
; 495  : 			(int)sysTime.wYear, (int)sysTime.wMonth, (int)sysTime.wDay,
; 496  : 			(int)sysTime.wHour, (int)sysTime.wMinute, (int)sysTime.wSecond,
; 497  : 			nDST);
; 498  : 		*this = timeT;
; 499  : 	}
; 500  : }
; 501  : 
; 502  : inline CTime::CTime(
; 503  : 	_In_ const FILETIME& fileTime,
; 504  : 	_In_ int nDST)
; 505  : {
; 506  : 	SYSTEMTIME sysTime;
; 507  : 	SYSTEMTIME localTime;
; 508  : 	if (!FileTimeToSystemTime(&fileTime, &sysTime) || !SystemTimeToTzSpecificLocalTime(nullptr, &sysTime, &localTime))
; 509  : 	{
; 510  : 		m_time = 0;
; 511  : 		AtlThrow(E_INVALIDARG);
; 512  : 		return;
; 513  : 	}
; 514  : 
; 515  : 	// Convert the system time to a time_t (C-runtime local time)
; 516  : 	CTime timeT(localTime, nDST);
; 517  : 	*this = timeT;
; 518  : }
; 519  : 
; 520  : inline CTime& CTime::operator=(_In_ __time64_t time) throw()
; 521  : {
; 522  : 	m_time = time;
; 523  : 
; 524  : 	return( *this );
; 525  : }
; 526  : 
; 527  : inline CTime& CTime::operator+=(_In_ CTimeSpan span) throw()
; 528  : {
; 529  : 	m_time += span.GetTimeSpan();
; 530  : 
; 531  : 	return( *this );
; 532  : }
; 533  : 
; 534  : inline CTime& CTime::operator-=(_In_ CTimeSpan span) throw()
; 535  : {
; 536  : 	m_time -= span.GetTimeSpan();
; 537  : 
; 538  : 	return( *this );
; 539  : }
; 540  : 
; 541  : inline CTimeSpan CTime::operator-(_In_ CTime time) const throw()
; 542  : {
; 543  : 	return( CTimeSpan( m_time-time.m_time ) );
; 544  : }
; 545  : 
; 546  : inline CTime CTime::operator-(_In_ CTimeSpan span) const throw()
; 547  : {
; 548  : 	return( CTime( m_time-span.GetTimeSpan() ) );
; 549  : }
; 550  : 
; 551  : inline CTime CTime::operator+(_In_ CTimeSpan span) const throw()
; 552  : {
; 553  : 	return( CTime( m_time+span.GetTimeSpan() ) );
; 554  : }
; 555  : 
; 556  : inline bool CTime::operator==(_In_ CTime time) const throw()
; 557  : {
; 558  : 	return( m_time == time.m_time );
; 559  : }
; 560  : 
; 561  : inline bool CTime::operator!=(_In_ CTime time) const throw()
; 562  : {
; 563  : 	return( m_time != time.m_time );
; 564  : }
; 565  : 
; 566  : inline bool CTime::operator<(_In_ CTime time) const throw()
; 567  : {
; 568  : 	return( m_time < time.m_time );
; 569  : }
; 570  : 
; 571  : inline bool CTime::operator>(_In_ CTime time) const throw()
; 572  : {
; 573  : 	return( m_time > time.m_time );
; 574  : }
; 575  : 
; 576  : inline bool CTime::operator<=(_In_ CTime time) const throw()
; 577  : {
; 578  : 	return( m_time <= time.m_time );
; 579  : }
; 580  : 
; 581  : inline bool CTime::operator>=(_In_ CTime time) const throw()
; 582  : {
; 583  : 	return( m_time >= time.m_time );
; 584  : }
; 585  : 
; 586  : inline _Success_(return != NULL) struct tm* CTime::GetGmtTm(_Out_ struct tm* ptm) const
; 587  : {
; 588  : 	// Ensure ptm is valid
; 589  : 	ATLENSURE( ptm != NULL );
; 590  : 
; 591  : 	if (ptm != NULL)
; 592  : 	{
; 593  : 		struct tm ptmTemp;
; 594  : 		errno_t err = _gmtime64_s(&ptmTemp, &m_time);
; 595  : 
; 596  : 		// Be sure the call succeeded
; 597  : 		if(err != 0) { return NULL; }
; 598  : 
; 599  : 		*ptm = ptmTemp;
; 600  : 		return ptm;
; 601  : 	}
; 602  : 
; 603  : 	return NULL;
; 604  : }
; 605  : 
; 606  : inline _Success_(return != NULL) struct tm* CTime::GetLocalTm(_Out_ struct tm* ptm) const
; 607  : {
; 608  : 	// Ensure ptm is valid
; 609  : 	ATLENSURE( ptm != NULL );
; 610  : 
; 611  : 	if (ptm != NULL)
; 612  : 	{
; 613  : 		struct tm ptmTemp;
; 614  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);
; 615  : 
; 616  : 		if (err != 0)
; 617  : 		{
; 618  : 			return NULL;    // indicates that m_time was not initialized!
; 619  : 		}
; 620  : 
; 621  : 		*ptm = ptmTemp;
; 622  : 		return ptm;
; 623  : 	}
; 624  : 
; 625  : 	return NULL;
; 626  : }
; 627  : 
; 628  : inline _Success_(return != false) bool CTime::GetAsSystemTime(_Out_ SYSTEMTIME& timeDest) const throw()
; 629  : {
; 630  : 	struct tm ttm;
; 631  : 	struct tm* ptm;
; 632  : 
; 633  : 	ptm = GetLocalTm(&ttm);
; 634  : 	if(!ptm) 
; 635  : 	{ 
; 636  : 		return false; 
; 637  : 	}
; 638  : 
; 639  : 	timeDest.wYear = (WORD) (1900 + ptm->tm_year);
; 640  : 	timeDest.wMonth = (WORD) (1 + ptm->tm_mon);
; 641  : 	timeDest.wDayOfWeek = (WORD) ptm->tm_wday;
; 642  : 	timeDest.wDay = (WORD) ptm->tm_mday;
; 643  : 	timeDest.wHour = (WORD) ptm->tm_hour;
; 644  : 	timeDest.wMinute = (WORD) ptm->tm_min;
; 645  : 	timeDest.wSecond = (WORD) ptm->tm_sec;
; 646  : 	timeDest.wMilliseconds = 0;
; 647  : 
; 648  : 	return true;
; 649  : }
; 650  : 
; 651  : inline __time64_t CTime::GetTime() const throw()
; 652  : {
; 653  : 	return( m_time );
; 654  : }
; 655  : 
; 656  : inline int CTime::GetYear() const
; 657  : {
; 658  : 	struct tm ttm;
; 659  : 	struct tm * ptm;
; 660  : 
; 661  : 	ptm = GetLocalTm(&ttm);
; 662  : 	return ptm ? (ptm->tm_year) + 1900 : 0 ;
; 663  : }
; 664  : 
; 665  : inline int CTime::GetMonth() const
; 666  : {
; 667  : 	struct tm ttm;
; 668  : 	struct tm * ptm;
; 669  : 
; 670  : 	ptm = GetLocalTm(&ttm);
; 671  : 	return ptm ? ptm->tm_mon + 1 : 0;
; 672  : }
; 673  : 
; 674  : inline int CTime::GetDay() const
; 675  : {
; 676  : 	struct tm ttm;
; 677  : 	struct tm * ptm;
; 678  : 
; 679  : 	ptm = GetLocalTm(&ttm);
; 680  : 	return ptm ? ptm->tm_mday : 0 ;
; 681  : }
; 682  : 
; 683  : inline int CTime::GetHour() const
; 684  : {
; 685  : 	struct tm ttm;
; 686  : 	struct tm * ptm;
; 687  : 
; 688  : 	ptm = GetLocalTm(&ttm);
; 689  : 	return ptm ? ptm->tm_hour : -1 ;
; 690  : }
; 691  : 
; 692  : inline int CTime::GetMinute() const
; 693  : {
; 694  : 	struct tm ttm;
; 695  : 	struct tm * ptm;
; 696  : 
; 697  : 	ptm = GetLocalTm(&ttm);
; 698  : 	return ptm ? ptm->tm_min : -1 ;
; 699  : }
; 700  : 
; 701  : inline int CTime::GetSecond() const
; 702  : {
; 703  : 	struct tm ttm;
; 704  : 	struct tm * ptm;
; 705  : 
; 706  : 	ptm = GetLocalTm(&ttm);
; 707  : 	return ptm ? ptm->tm_sec : -1 ;
; 708  : }
; 709  : 
; 710  : inline int CTime::GetDayOfWeek() const
; 711  : {
; 712  : 	struct tm ttm;
; 713  : 	struct tm * ptm;
; 714  : 
; 715  : 	ptm = GetLocalTm(&ttm);

  00042	8d 4d d0	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 716  : 	return ptm ? ptm->tm_wday + 1 : 0 ;

  0004b	85 c0		 test	 eax, eax
  0004d	74 06		 je	 SHORT $LN16@ProcCheckD
  0004f	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00052	40		 inc	 eax
  00053	eb 02		 jmp	 SHORT $LN17@ProcCheckD
$LN16@ProcCheckD:
  00055	33 c0		 xor	 eax, eax
$LN17@ProcCheckD:
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1161 : 	if( this->m_iDayOfWeek != nDayOfWeek )

  00057	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  0005a	74 17		 je	 SHORT $LN3@ProcCheckD

; 1162 : 	{
; 1163 : 		this->m_iDayOfWeek = nDayOfWeek;

  0005c	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1164 : 		this->iUnk1 = rand()%4;

  0005f	e8 00 00 00 00	 call	 _rand
  00064	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00069	79 05		 jns	 SHORT $LN18@ProcCheckD
  0006b	48		 dec	 eax
  0006c	83 c8 fc	 or	 eax, -4			; fffffffcH
  0006f	40		 inc	 eax
$LN18@ProcCheckD:
  00070	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN3@ProcCheckD:

; 1165 : 	}
; 1166 : 
; 1167 : 	this->CheckLiveMonster(nZoneIndex);

  00073	57		 push	 edi
  00074	8b ce		 mov	 ecx, esi
  00076	e8 00 00 00 00	 call	 ?CheckLiveMonster@CImperialGuardian@@QAEXH@Z ; CImperialGuardian::CheckLiveMonster

; 1168 : 
; 1169 : 	if( this->GetZoneState(nZoneIndex) )

  0007b	57		 push	 edi
  0007c	8b ce		 mov	 ecx, esi
  0007e	e8 00 00 00 00	 call	 ?GetZoneState@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetZoneState
  00083	85 c0		 test	 eax, eax
  00085	74 77		 je	 SHORT $LN6@ProcCheckD

; 1170 : 	{
; 1171 : 		if( this->GetZoneState(nZoneIndex) == IMPERIAL_STATE_BEGINTIMEATTACK &&
; 1172 : 			this->m_ZoneInfo[nZoneIndex].m_bMonsterSpawn == TRUE &&

  00087	57		 push	 edi
  00088	8b ce		 mov	 ecx, esi
  0008a	e8 00 00 00 00	 call	 ?GetZoneState@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetZoneState
  0008f	83 f8 01	 cmp	 eax, 1
  00092	75 44		 jne	 SHORT $LN5@ProcCheckD
  00094	6b c7 64	 imul	 eax, edi, 100
  00097	80 7c 30 21 01	 cmp	 BYTE PTR [eax+esi+33], 1
  0009c	75 3a		 jne	 SHORT $LN5@ProcCheckD
  0009e	57		 push	 edi
  0009f	8b ce		 mov	 ecx, esi
  000a1	e8 00 00 00 00	 call	 ?GetLiveMonsterCount@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetLiveMonsterCount
  000a6	83 f8 01	 cmp	 eax, 1
  000a9	7d 2d		 jge	 SHORT $LN5@ProcCheckD

; 1173 : 			this->GetLiveMonsterCount(nZoneIndex) < 1)
; 1174 : 		{
; 1175 : 			this->SetAtackAbleState(nZoneIndex,524,true);

  000ab	6a 01		 push	 1
  000ad	68 0c 02 00 00	 push	 524			; 0000020cH
  000b2	57		 push	 edi
  000b3	8b ce		 mov	 ecx, esi
  000b5	e8 00 00 00 00	 call	 ?SetAtackAbleState@CImperialGuardian@@QAEXHH_N@Z ; CImperialGuardian::SetAtackAbleState

; 1176 : 			this->SetAtackAbleState(nZoneIndex,527,true);

  000ba	6a 01		 push	 1
  000bc	68 0f 02 00 00	 push	 527			; 0000020fH
  000c1	57		 push	 edi
  000c2	8b ce		 mov	 ecx, esi
  000c4	e8 00 00 00 00	 call	 ?SetAtackAbleState@CImperialGuardian@@QAEXHH_N@Z ; CImperialGuardian::SetAtackAbleState

; 1177 : 			this->SetAtackAbleState(nZoneIndex,528,true);

  000c9	6a 01		 push	 1
  000cb	68 10 02 00 00	 push	 528			; 00000210H
  000d0	57		 push	 edi
  000d1	8b ce		 mov	 ecx, esi
  000d3	e8 00 00 00 00	 call	 ?SetAtackAbleState@CImperialGuardian@@QAEXHH_N@Z ; CImperialGuardian::SetAtackAbleState
$LN5@ProcCheckD:

; 1178 : 		}
; 1179 : 
; 1180 : 		if( this->GetPlayerCount(nZoneIndex) < 1 )

  000d8	57		 push	 edi
  000d9	8b ce		 mov	 ecx, esi
  000db	e8 00 00 00 00	 call	 ?GetPlayerCount@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetPlayerCount
  000e0	83 f8 01	 cmp	 eax, 1
  000e3	7d 19		 jge	 SHORT $LN6@ProcCheckD

; 1181 : 		{
; 1182 : 			int nMonsterRegenTable = this->m_ZoneInfo[nZoneIndex].m_wMonsterRegenTable;

  000e5	6b c7 64	 imul	 eax, edi, 100

; 1183 : 			this->DeleteMonster(nZoneIndex,nMonsterRegenTable);

  000e8	8b ce		 mov	 ecx, esi
  000ea	0f b7 44 30 24	 movzx	 eax, WORD PTR [eax+esi+36]
  000ef	50		 push	 eax
  000f0	57		 push	 edi
  000f1	e8 00 00 00 00	 call	 ?DeleteMonster@CImperialGuardian@@QAEXHH@Z ; CImperialGuardian::DeleteMonster

; 1184 : 			this->InitZone(nZoneIndex);

  000f6	57		 push	 edi
  000f7	8b ce		 mov	 ecx, esi
  000f9	e8 00 00 00 00	 call	 ?InitZone@CImperialGuardian@@QAEXH@Z ; CImperialGuardian::InitZone
$LN6@ProcCheckD:

; 1185 : 		}
; 1186 : 	}
; 1187 : }

  000fe	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00101	5f		 pop	 edi
  00102	33 cd		 xor	 ecx, ebp
  00104	5e		 pop	 esi
  00105	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c2 04 00	 ret	 4
?ProcCheckDungeon@CImperialGuardian@@QAEXH@Z ENDP	; CImperialGuardian::ProcCheckDungeon
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?GetMapNumber@CImperialGuardian@@QAEHH@Z
_TEXT	SEGMENT
_nDayOfWeek$ = 8					; size = 4
?GetMapNumber@CImperialGuardian@@QAEHH@Z PROC		; CImperialGuardian::GetMapNumber, COMDAT
; _this$ = ecx

; 1130 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1131 : 	int nMapNumber = -1;
; 1132 : 
; 1133 : 	if( nDayOfWeek == 2 || nDayOfWeek == 5 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _nDayOfWeek$[ebp]
  00006	83 f8 02	 cmp	 eax, 2
  00009	74 40		 je	 SHORT $LN4@GetMapNumb
  0000b	83 f8 05	 cmp	 eax, 5
  0000e	74 3b		 je	 SHORT $LN4@GetMapNumb

; 1134 : 	{
; 1135 : 		nMapNumber = MAP_INDEX_IMPERIALFORT1;
; 1136 : 	}
; 1137 : 	else if( nDayOfWeek == 3 || nDayOfWeek == 6 )

  00010	83 f8 03	 cmp	 eax, 3
  00013	74 2d		 je	 SHORT $LN7@GetMapNumb
  00015	83 f8 06	 cmp	 eax, 6
  00018	74 28		 je	 SHORT $LN7@GetMapNumb

; 1138 : 	{
; 1139 : 		nMapNumber = MAP_INDEX_IMPERIALFORT2;
; 1140 : 	}
; 1141 : 	else if( nDayOfWeek == 4 || nDayOfWeek == 7 )

  0001a	83 f8 04	 cmp	 eax, 4
  0001d	74 1a		 je	 SHORT $LN10@GetMapNumb
  0001f	83 f8 07	 cmp	 eax, 7
  00022	74 15		 je	 SHORT $LN10@GetMapNumb

; 1142 : 	{
; 1143 : 		nMapNumber = MAP_INDEX_IMPERIALFORT3;
; 1144 : 	}
; 1145 : 	else if( nDayOfWeek == 1 )

  00024	83 f8 01	 cmp	 eax, 1
  00027	75 09		 jne	 SHORT $LN13@GetMapNumb

; 1146 : 	{
; 1147 : 		nMapNumber = MAP_INDEX_IMPERIALFORT4;
; 1148 : 	}
; 1149 : 
; 1150 : return nMapNumber;

  00029	b8 48 00 00 00	 mov	 eax, 72			; 00000048H

; 1151 : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
$LN13@GetMapNumb:

; 1146 : 	{
; 1147 : 		nMapNumber = MAP_INDEX_IMPERIALFORT4;
; 1148 : 	}
; 1149 : 
; 1150 : return nMapNumber;

  00032	83 c8 ff	 or	 eax, -1

; 1151 : }

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
$LN10@GetMapNumb:

; 1146 : 	{
; 1147 : 		nMapNumber = MAP_INDEX_IMPERIALFORT4;
; 1148 : 	}
; 1149 : 
; 1150 : return nMapNumber;

  00039	b8 47 00 00 00	 mov	 eax, 71			; 00000047H

; 1151 : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN7@GetMapNumb:

; 1146 : 	{
; 1147 : 		nMapNumber = MAP_INDEX_IMPERIALFORT4;
; 1148 : 	}
; 1149 : 
; 1150 : return nMapNumber;

  00042	b8 46 00 00 00	 mov	 eax, 70			; 00000046H

; 1151 : }

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN4@GetMapNumb:

; 1146 : 	{
; 1147 : 		nMapNumber = MAP_INDEX_IMPERIALFORT4;
; 1148 : 	}
; 1149 : 
; 1150 : return nMapNumber;

  0004b	b8 45 00 00 00	 mov	 eax, 69			; 00000045H

; 1151 : }

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?GetMapNumber@CImperialGuardian@@QAEHH@Z ENDP		; CImperialGuardian::GetMapNumber
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?GetGateNumber@CImperialGuardian@@QAEHHH@Z
_TEXT	SEGMENT
_nZoneIndex$ = 8					; size = 4
_nDayOfWeek$ = 12					; size = 4
?GetGateNumber@CImperialGuardian@@QAEHHH@Z PROC		; CImperialGuardian::GetGateNumber, COMDAT
; _this$ = ecx

; 1055 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1056 : 	int nGateNumber = -1;
; 1057 : 
; 1058 : 	if( nZoneIndex == 0 )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _nZoneIndex$[ebp]
  00006	56		 push	 esi
  00007	83 ce ff	 or	 esi, -1
  0000a	85 c9		 test	 ecx, ecx
  0000c	75 5a		 jne	 SHORT $LN2@GetGateNum

; 1059 : 	{
; 1060 : 		if( nDayOfWeek == 2 || nDayOfWeek == 5 )

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _nDayOfWeek$[ebp]
  00011	83 f8 02	 cmp	 eax, 2
  00014	74 46		 je	 SHORT $LN6@GetGateNum
  00016	83 f8 05	 cmp	 eax, 5
  00019	74 41		 je	 SHORT $LN6@GetGateNum

; 1063 : 		}
; 1064 : 		else if( nDayOfWeek == 3 || nDayOfWeek == 6 )

  0001b	83 f8 03	 cmp	 eax, 3
  0001e	74 30		 je	 SHORT $LN9@GetGateNum
  00020	83 f8 06	 cmp	 eax, 6
  00023	74 2b		 je	 SHORT $LN9@GetGateNum

; 1067 : 		}
; 1068 : 		else if( nDayOfWeek == 4 || nDayOfWeek == 7 )

  00025	83 f8 04	 cmp	 eax, 4
  00028	74 1a		 je	 SHORT $LN12@GetGateNum
  0002a	83 f8 07	 cmp	 eax, 7
  0002d	74 15		 je	 SHORT $LN12@GetGateNum

; 1071 : 		}
; 1072 : 		else if( nDayOfWeek == 1 )

  0002f	83 f8 01	 cmp	 eax, 1
  00032	0f 85 0f 01 00
	00		 jne	 $LN39@GetGateNum

; 1073 : 		{
; 1074 : 			nGateNumber = 322;

  00038	be 42 01 00 00	 mov	 esi, 322		; 00000142H

; 1125 : 	}
; 1126 : 	return nGateNumber;

  0003d	8b c6		 mov	 eax, esi
  0003f	5e		 pop	 esi

; 1127 : }

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN12@GetGateNum:

; 1069 : 		{
; 1070 : 			nGateNumber = 317;

  00044	be 3d 01 00 00	 mov	 esi, 317		; 0000013dH

; 1125 : 	}
; 1126 : 	return nGateNumber;

  00049	8b c6		 mov	 eax, esi
  0004b	5e		 pop	 esi

; 1127 : }

  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN9@GetGateNum:

; 1065 : 		{
; 1066 : 			nGateNumber = 312;

  00050	be 38 01 00 00	 mov	 esi, 312		; 00000138H

; 1125 : 	}
; 1126 : 	return nGateNumber;

  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi

; 1127 : }

  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
$LN6@GetGateNum:

; 1061 : 		{
; 1062 : 			nGateNumber = 307;

  0005c	be 33 01 00 00	 mov	 esi, 307		; 00000133H

; 1125 : 	}
; 1126 : 	return nGateNumber;

  00061	8b c6		 mov	 eax, esi
  00063	5e		 pop	 esi

; 1127 : }

  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
$LN2@GetGateNum:

; 1075 : 		}
; 1076 : 	}
; 1077 : 	else if( nZoneIndex == 1 )

  00068	83 f9 01	 cmp	 ecx, 1
  0006b	75 59		 jne	 SHORT $LN14@GetGateNum

; 1078 : 	{
; 1079 : 		if( nDayOfWeek == 2 || nDayOfWeek == 5 )

  0006d	8b 45 0c	 mov	 eax, DWORD PTR _nDayOfWeek$[ebp]
  00070	83 f8 02	 cmp	 eax, 2
  00073	74 45		 je	 SHORT $LN18@GetGateNum
  00075	83 f8 05	 cmp	 eax, 5
  00078	74 40		 je	 SHORT $LN18@GetGateNum

; 1082 : 		}
; 1083 : 		else if( nDayOfWeek == 3 || nDayOfWeek == 6 )

  0007a	83 f8 03	 cmp	 eax, 3
  0007d	74 2f		 je	 SHORT $LN21@GetGateNum
  0007f	83 f8 06	 cmp	 eax, 6
  00082	74 2a		 je	 SHORT $LN21@GetGateNum

; 1086 : 		}
; 1087 : 		else if( nDayOfWeek == 4 || nDayOfWeek == 7 )

  00084	83 f8 04	 cmp	 eax, 4
  00087	74 19		 je	 SHORT $LN24@GetGateNum
  00089	83 f8 07	 cmp	 eax, 7
  0008c	74 14		 je	 SHORT $LN24@GetGateNum

; 1090 : 		}
; 1091 : 		else if( nDayOfWeek == 1 )

  0008e	3b c1		 cmp	 eax, ecx
  00090	0f 85 b1 00 00
	00		 jne	 $LN39@GetGateNum

; 1092 : 		{
; 1093 : 			nGateNumber = 324;

  00096	be 44 01 00 00	 mov	 esi, 324		; 00000144H

; 1125 : 	}
; 1126 : 	return nGateNumber;

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi

; 1127 : }

  0009e	5d		 pop	 ebp
  0009f	c2 08 00	 ret	 8
$LN24@GetGateNum:

; 1088 : 		{
; 1089 : 			nGateNumber = 319;

  000a2	be 3f 01 00 00	 mov	 esi, 319		; 0000013fH

; 1125 : 	}
; 1126 : 	return nGateNumber;

  000a7	8b c6		 mov	 eax, esi
  000a9	5e		 pop	 esi

; 1127 : }

  000aa	5d		 pop	 ebp
  000ab	c2 08 00	 ret	 8
$LN21@GetGateNum:

; 1084 : 		{
; 1085 : 			nGateNumber = 314;

  000ae	be 3a 01 00 00	 mov	 esi, 314		; 0000013aH

; 1125 : 	}
; 1126 : 	return nGateNumber;

  000b3	8b c6		 mov	 eax, esi
  000b5	5e		 pop	 esi

; 1127 : }

  000b6	5d		 pop	 ebp
  000b7	c2 08 00	 ret	 8
$LN18@GetGateNum:

; 1080 : 		{
; 1081 : 			nGateNumber = 309;

  000ba	be 35 01 00 00	 mov	 esi, 309		; 00000135H

; 1125 : 	}
; 1126 : 	return nGateNumber;

  000bf	8b c6		 mov	 eax, esi
  000c1	5e		 pop	 esi

; 1127 : }

  000c2	5d		 pop	 ebp
  000c3	c2 08 00	 ret	 8
$LN14@GetGateNum:

; 1094 : 		}
; 1095 : 	}
; 1096 : 	else if( nZoneIndex == 2 )

  000c6	83 f9 02	 cmp	 ecx, 2
  000c9	75 55		 jne	 SHORT $LN26@GetGateNum

; 1097 : 	{
; 1098 : 		if( nDayOfWeek == 2 || nDayOfWeek == 5 )

  000cb	8b 45 0c	 mov	 eax, DWORD PTR _nDayOfWeek$[ebp]
  000ce	3b c1		 cmp	 eax, ecx
  000d0	74 42		 je	 SHORT $LN30@GetGateNum
  000d2	83 f8 05	 cmp	 eax, 5
  000d5	74 3d		 je	 SHORT $LN30@GetGateNum

; 1101 : 		}
; 1102 : 		else if( nDayOfWeek == 3 || nDayOfWeek == 6 )

  000d7	83 f8 03	 cmp	 eax, 3
  000da	74 2c		 je	 SHORT $LN33@GetGateNum
  000dc	83 f8 06	 cmp	 eax, 6
  000df	74 27		 je	 SHORT $LN33@GetGateNum

; 1105 : 		}
; 1106 : 		else if( nDayOfWeek == 4 || nDayOfWeek == 7 )

  000e1	83 f8 04	 cmp	 eax, 4
  000e4	74 16		 je	 SHORT $LN36@GetGateNum
  000e6	83 f8 07	 cmp	 eax, 7
  000e9	74 11		 je	 SHORT $LN36@GetGateNum

; 1109 : 		}
; 1110 : 		else if( nDayOfWeek == 1 )

  000eb	83 f8 01	 cmp	 eax, 1
  000ee	75 57		 jne	 SHORT $LN39@GetGateNum

; 1111 : 		{
; 1112 : 			nGateNumber = 326;

  000f0	be 46 01 00 00	 mov	 esi, 326		; 00000146H

; 1125 : 	}
; 1126 : 	return nGateNumber;

  000f5	8b c6		 mov	 eax, esi
  000f7	5e		 pop	 esi

; 1127 : }

  000f8	5d		 pop	 ebp
  000f9	c2 08 00	 ret	 8
$LN36@GetGateNum:

; 1107 : 		{
; 1108 : 			nGateNumber = 321;

  000fc	be 41 01 00 00	 mov	 esi, 321		; 00000141H

; 1125 : 	}
; 1126 : 	return nGateNumber;

  00101	8b c6		 mov	 eax, esi
  00103	5e		 pop	 esi

; 1127 : }

  00104	5d		 pop	 ebp
  00105	c2 08 00	 ret	 8
$LN33@GetGateNum:

; 1103 : 		{
; 1104 : 			nGateNumber = 316;

  00108	be 3c 01 00 00	 mov	 esi, 316		; 0000013cH

; 1125 : 	}
; 1126 : 	return nGateNumber;

  0010d	8b c6		 mov	 eax, esi
  0010f	5e		 pop	 esi

; 1127 : }

  00110	5d		 pop	 ebp
  00111	c2 08 00	 ret	 8
$LN30@GetGateNum:

; 1099 : 		{
; 1100 : 			nGateNumber = 311;

  00114	be 37 01 00 00	 mov	 esi, 311		; 00000137H

; 1125 : 	}
; 1126 : 	return nGateNumber;

  00119	8b c6		 mov	 eax, esi
  0011b	5e		 pop	 esi

; 1127 : }

  0011c	5d		 pop	 ebp
  0011d	c2 08 00	 ret	 8
$LN26@GetGateNum:

; 1113 : 		}
; 1114 : 	}
; 1115 : 	else if( nZoneIndex == 3 )

  00120	83 f9 03	 cmp	 ecx, 3
  00123	75 12		 jne	 SHORT $LN38@GetGateNum

; 1116 : 	{
; 1117 : 		if( nDayOfWeek == 1 )

  00125	83 7d 0c 01	 cmp	 DWORD PTR _nDayOfWeek$[ebp], 1
  00129	75 1c		 jne	 SHORT $LN39@GetGateNum

; 1118 : 		{
; 1119 : 			nGateNumber = 328;

  0012b	be 48 01 00 00	 mov	 esi, 328		; 00000148H

; 1125 : 	}
; 1126 : 	return nGateNumber;

  00130	8b c6		 mov	 eax, esi
  00132	5e		 pop	 esi

; 1127 : }

  00133	5d		 pop	 ebp
  00134	c2 08 00	 ret	 8
$LN38@GetGateNum:

; 1120 : 		}
; 1121 : 	}
; 1122 : 	else
; 1123 : 	{
; 1124 : 		LogAddTD("[IMPERIALGUARDIAN][GetGateNumberFunc] Invalid zoneIndex : %d ",(nZoneIndex+1));

  00137	41		 inc	 ecx
  00138	51		 push	 ecx
  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@ELCKLNIA@?$FLIMPERIALGUARDIAN?$FN?$FLGetGateNumber@
  0013e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00144	83 c4 08	 add	 esp, 8
$LN39@GetGateNum:

; 1125 : 	}
; 1126 : 	return nGateNumber;

  00147	8b c6		 mov	 eax, esi
  00149	5e		 pop	 esi

; 1127 : }

  0014a	5d		 pop	 ebp
  0014b	c2 08 00	 ret	 8
?GetGateNumber@CImperialGuardian@@QAEHHH@Z ENDP		; CImperialGuardian::GetGateNumber
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?SetMonster@CImperialGuardian@@QAE_NHHH@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
_MonsterClass$ = 12					; size = 4
_nMaxLevel$ = 16					; size = 4
?SetMonster@CImperialGuardian@@QAE_NHHH@Z PROC		; CImperialGuardian::SetMonster, COMDAT
; _this$ = ecx

; 1013 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 1014 : 	if( !OBJMAX_RANGE(nIndex) )

  00004	8b 7d 08	 mov	 edi, DWORD PTR _nIndex$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	0f 88 10 01 00
	00		 js	 $LN7@SetMonster
  0000f	33 c0		 xor	 eax, eax
  00011	81 ff eb 2c 00
	00		 cmp	 edi, 11499		; 00002cebH
  00017	0f 9e c0	 setle	 al
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 fd 00 00
	00		 je	 $LN7@SetMonster

; 1018 : 	}
; 1019 : 
; 1020 : 	LPOBJ lpObj = &gObj[nIndex];

  00022	56		 push	 esi
  00023	69 f7 40 27 00
	00		 imul	 esi, edi, 10048
  00029	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1021 : 	lpObj->ConnectCheckTime = GetTickCount();

  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 1022 : 	lpObj->ShopNumber = -1;

  00035	83 c9 ff	 or	 ecx, -1
  00038	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 1023 : 	lpObj->TargetNumber = -1;
; 1024 : 	lpObj->m_RecallMon = -1;
; 1025 : 	lpObj->Connected = PLAYER_PLAYING;
; 1026 : 	lpObj->Live = TRUE;
; 1027 : 	lpObj->m_State = 1;
; 1028 : 	lpObj->DieRegen = 0;
; 1029 : 	lpObj->Type = OBJ_MONSTER;
; 1030 : 	lpObj->Class = MonsterClass;

  0003b	66 8b 45 0c	 mov	 ax, WORD PTR _MonsterClass$[ebp]

; 1031 : 	lpObj->LastAttackerID = -1;
; 1032 : 
; 1033 : 
; 1034 : 	g_MonsterStatCalc.ConvertMonsterStat(lpObj,nMaxLevel,0);

  0003f	6a 00		 push	 0
  00041	ff 75 10	 push	 DWORD PTR _nMaxLevel$[ebp]
  00044	66 89 8e 3c 06
	00 00		 mov	 WORD PTR [esi+1596], cx
  0004b	66 89 8e 38 06
	00 00		 mov	 WORD PTR [esi+1592], cx
  00052	89 8e 30 06 00
	00		 mov	 DWORD PTR [esi+1584], ecx
  00058	66 89 8e 3e 06
	00 00		 mov	 WORD PTR [esi+1598], cx
  0005f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MonsterStatCalc@@3VCMonsterStatCalc@@A ; g_MonsterStatCalc
  00064	56		 push	 esi
  00065	c7 46 04 03 00
	00 00		 mov	 DWORD PTR [esi+4], 3
  0006c	66 c7 46 50 02
	01		 mov	 WORD PTR [esi+80], 258	; 00000102H
  00072	c7 86 d0 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+464], 1
  0007c	c6 86 8a 05 00
	00 00		 mov	 BYTE PTR [esi+1418], 0
  00083	66 89 86 90 00
	00 00		 mov	 WORD PTR [esi+144], ax
  0008a	e8 00 00 00 00	 call	 ?ConvertMonsterStat@CMonsterStatCalc@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMonsterStatCalc::ConvertMonsterStat

; 1035 : 
; 1036 : 	*lpObj->pInventoryCount = 0;

  0008f	8b 86 c4 11 00
	00		 mov	 eax, DWORD PTR [esi+4548]
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1037 : 
; 1038 : 	if( lpObj->m_AttackType )

  00098	0f b7 86 92 06
	00 00		 movzx	 eax, WORD PTR [esi+1682]
  0009f	66 85 c0	 test	 ax, ax
  000a2	74 0c		 je	 SHORT $LN3@SetMonster

; 1039 : 	{
; 1040 : 		gObjMonsterMagicAdd(lpObj,lpObj->m_AttackType,1);

  000a4	6a 01		 push	 1
  000a6	50		 push	 eax
  000a7	56		 push	 esi
  000a8	e8 00 00 00 00	 call	 ?gObjMonsterMagicAdd@@YAHPAUOBJECTSTRUCT@@GE@Z ; gObjMonsterMagicAdd
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@SetMonster:

; 1041 : 	}
; 1042 : 
; 1043 : 	gObjMonsterHitDamageInit(lpObj);

  000b0	56		 push	 esi
  000b1	e8 00 00 00 00	 call	 ?gObjMonsterHitDamageInit@@YAXPAUOBJECTSTRUCT@@@Z ; gObjMonsterHitDamageInit

; 1044 : 	gObjSetInventory1Pointer(lpObj);

  000b6	56		 push	 esi
  000b7	e8 00 00 00 00	 call	 ?gObjSetInventory1Pointer@@YAXPAUOBJECTSTRUCT@@@Z ; gObjSetInventory1Pointer

; 1045 : 	CreateFrustrum(lpObj->X,lpObj->Y,nIndex);

  000bc	0f b6 86 21 01
	00 00		 movzx	 eax, BYTE PTR [esi+289]
  000c3	57		 push	 edi
  000c4	50		 push	 eax
  000c5	0f b6 86 20 01
	00 00		 movzx	 eax, BYTE PTR [esi+288]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ?CreateFrustrum@@YAXHHH@Z ; CreateFrustrum

; 1046 : 
; 1047 : 	MapC[lpObj->MapNumber].SetStandAttr(lpObj->X,lpObj->Y);

  000d2	0f b6 86 21 01
	00 00		 movzx	 eax, BYTE PTR [esi+289]
  000d9	83 c4 14	 add	 esp, 20			; 00000014H
  000dc	50		 push	 eax
  000dd	0f b6 86 20 01
	00 00		 movzx	 eax, BYTE PTR [esi+288]
  000e4	50		 push	 eax
  000e5	0f b6 86 23 01
	00 00		 movzx	 eax, BYTE PTR [esi+291]
  000ec	69 c8 28 38 05
	00		 imul	 ecx, eax, 342056
  000f2	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  000f8	e8 00 00 00 00	 call	 ?SetStandAttr@MapClass@@QAEXHH@Z ; MapClass::SetStandAttr

; 1048 : 
; 1049 : 	lpObj->m_OldX = lpObj->X;

  000fd	0f b6 86 20 01
	00 00		 movzx	 eax, BYTE PTR [esi+288]
  00104	88 86 50 01 00
	00		 mov	 BYTE PTR [esi+336], al

; 1050 : 	lpObj->m_OldY = lpObj->Y;

  0010a	0f b6 86 21 01
	00 00		 movzx	 eax, BYTE PTR [esi+289]
  00111	88 86 51 01 00
	00		 mov	 BYTE PTR [esi+337], al

; 1051 : 	return true;

  00117	b0 01		 mov	 al, 1
  00119	5e		 pop	 esi
  0011a	5f		 pop	 edi

; 1052 : }

  0011b	5d		 pop	 ebp
  0011c	c2 0c 00	 ret	 12			; 0000000cH
$LN7@SetMonster:

; 1015 : 	{
; 1016 : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  0011f	68 f8 03 00 00	 push	 1016			; 000003f8H
  00124	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00134	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1017 : 		return false;

  00137	32 c0		 xor	 al, al
  00139	5f		 pop	 edi

; 1052 : }

  0013a	5d		 pop	 ebp
  0013b	c2 0c 00	 ret	 12			; 0000000cH
?SetMonster@CImperialGuardian@@QAE_NHHH@Z ENDP		; CImperialGuardian::SetMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?InitZone@CImperialGuardian@@QAEXH@Z
_TEXT	SEGMENT
_nZoneIndex$ = 8					; size = 4
?InitZone@CImperialGuardian@@QAEXH@Z PROC		; CImperialGuardian::InitZone, COMDAT
; _this$ = ecx

; 970  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b d1		 mov	 edx, ecx

; 971  : 	if( !this->m_bScriptLoaded )

  00005	80 7a 10 00	 cmp	 BYTE PTR [edx+16], 0
  00009	75 11		 jne	 SHORT $LN2@InitZone

; 972  : 	{
; 973  : 		MsgBox("[EVENTDUNGEON] script file not loaded");

  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@PIAPLIPD@?$FLEVENTDUNGEON?$FN?5script?5file?5not?5l@
  00010	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00015	83 c4 04	 add	 esp, 4

; 1010 : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN2@InitZone:

; 974  : 		return;
; 975  : 	}
; 976  : 
; 977  : 	this->m_ZoneInfo[nZoneIndex].m_bInitLootTime = 0;

  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _nZoneIndex$[ebp]
  0001f	56		 push	 esi
  00020	6b f1 64	 imul	 esi, ecx, 100
  00023	03 f2		 add	 esi, edx
  00025	c7 46 1e 00 00
	00 00		 mov	 DWORD PTR [esi+30], 0

; 978  : 	this->m_ZoneInfo[nZoneIndex].m_bInitWaitPlayer = 0;
; 979  : 	this->m_ZoneInfo[nZoneIndex].m_bInitTimeAttack = 0;

  0002c	c6 46 1d 00	 mov	 BYTE PTR [esi+29], 0

; 980  : 	this->m_ZoneInfo[nZoneIndex].m_bWait = 0;
; 981  : 	this->m_ZoneInfo[nZoneIndex].m_bMonsterSpawn = 0;
; 982  : 	this->m_ZoneInfo[nZoneIndex].btUnk6 = 0;

  00030	c6 46 22 00	 mov	 BYTE PTR [esi+34], 0

; 983  : 
; 984  : 	if( nZoneIndex == 0 )

  00034	85 c9		 test	 ecx, ecx
  00036	75 14		 jne	 SHORT $LN3@InitZone

; 985  : 	{
; 986  : 		this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC3 = 120000+this->m_iWaitPlayerTime*1000;

  00038	8b 82 ac 01 00
	00		 mov	 eax, DWORD PTR [edx+428]
  0003e	83 c0 78	 add	 eax, 120		; 00000078H
  00041	69 c0 e8 03 00
	00		 imul	 eax, eax, 1000
  00047	89 42 5c	 mov	 DWORD PTR [edx+92], eax

; 987  : 	}
; 988  : 	else

  0004a	eb 0d		 jmp	 SHORT $LN4@InitZone
$LN3@InitZone:

; 989  : 	{
; 990  : 		this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC3 = this->m_iWaitPlayerTime*1000;

  0004c	69 82 ac 01 00
	00 e8 03 00 00	 imul	 eax, DWORD PTR [edx+428], 1000
  00056	89 46 5c	 mov	 DWORD PTR [esi+92], eax
$LN4@InitZone:

; 991  : 	}
; 992  : 
; 993  : 	this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC2 = this->m_iLootTime*1000;

  00059	69 82 a8 01 00
	00 e8 03 00 00	 imul	 eax, DWORD PTR [edx+424], 1000
  00063	89 46 58	 mov	 DWORD PTR [esi+88], eax

; 994  : 	this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC = this->m_iTimeAttackEvent*1000;

  00066	69 82 b0 01 00
	00 e8 03 00 00	 imul	 eax, DWORD PTR [edx+432], 1000

; 995  : 
; 996  : 	this->m_ZoneInfo[nZoneIndex].m_dwTICK_COUNT1 = 0;

  00070	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0

; 997  : 	this->m_ZoneInfo[nZoneIndex].m_dwTICK_COUNT2 = 0;

  00077	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0

; 998  : 	this->m_ZoneInfo[nZoneIndex].m_dwTICK_COUNT3 = 0;

  0007e	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0

; 999  : 
; 1000 : 	this->m_ZoneInfo[nZoneIndex].m_wMonsterRegenTable = -1;
; 1001 : 	this->m_ZoneInfo[nZoneIndex].m_iPartyNumber = -1;

  00085	c7 46 18 ff ff
	ff ff		 mov	 DWORD PTR [esi+24], -1
  0008c	89 46 54	 mov	 DWORD PTR [esi+84], eax
  0008f	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00094	66 89 46 24	 mov	 WORD PTR [esi+36], ax

; 1002 : 	this->m_ZoneInfo[nZoneIndex].m_iMaxLevel = 0;
; 1003 : 	this->m_ZoneInfo[nZoneIndex].m_iState = IMPERIAL_STATE_READY;
; 1004 : 	this->m_ZoneInfo[nZoneIndex].m_iNotifyMinute = (this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC/60000)+1;

  00098	b8 73 b2 e7 45	 mov	 eax, 1172812403		; 45e7b273H
  0009d	f7 66 54	 mul	 DWORD PTR [esi+84]
  000a0	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  000a7	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  000ae	c1 ea 0e	 shr	 edx, 14			; 0000000eH
  000b1	42		 inc	 edx
  000b2	89 56 2c	 mov	 DWORD PTR [esi+44], edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  000b5	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  000b8	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  000bb	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  000be	89 46 40	 mov	 DWORD PTR [esi+64], eax
  000c1	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000c4	89 46 34	 mov	 DWORD PTR [esi+52], eax
  000c7	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000ca	89 46 70	 mov	 DWORD PTR [esi+112], eax
  000cd	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 1010 : }

  000ce	5d		 pop	 ebp
  000cf	c2 04 00	 ret	 4
?InitZone@CImperialGuardian@@QAEXH@Z ENDP		; CImperialGuardian::InitZone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?DeleteMonster@CImperialGuardian@@QAEXHH@Z
_TEXT	SEGMENT
tv380 = -4						; size = 4
_nZoneIndex$ = 8					; size = 4
_nMonsterRegenTableIndex$ = 12				; size = 4
?DeleteMonster@CImperialGuardian@@QAEXHH@Z PROC		; CImperialGuardian::DeleteMonster, COMDAT
; _this$ = ecx

; 950  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 951  : 	std::vector<_stMonsterIndexInfo>::iterator it = this->m_ZoneInfo[nZoneIndex].m_vtMonsterIndexInfo.begin();

  00006	6b 45 08 64	 imul	 eax, DWORD PTR _nZoneIndex$[ebp], 100
  0000a	03 c8		 add	 ecx, eax
  0000c	53		 push	 ebx
  0000d	56		 push	 esi

; 952  : 	int nCount = 0;

  0000e	33 db		 xor	 ebx, ebx
  00010	89 4d fc	 mov	 DWORD PTR tv380[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  00013	8b 71 30	 mov	 esi, DWORD PTR [ecx+48]

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00016	3b 71 34	 cmp	 esi, DWORD PTR [ecx+52]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 954  : 	for( ; it != this->m_ZoneInfo[nZoneIndex].m_vtMonsterIndexInfo.end(); it++)

  00019	74 38		 je	 SHORT $LN3@DeleteMons
  0001b	57		 push	 edi
  0001c	0f 1f 40 00	 npad	 4
$LL4@DeleteMons:

; 955  : 	{
; 956  : 		_stMonsterIndexInfo stMonsterIndex = *it;

  00020	8b 3e		 mov	 edi, DWORD PTR [esi]

; 957  : 
; 958  : 		if( gObjDel(stMonsterIndex.m_iIndex) )

  00022	57		 push	 edi
  00023	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00028	83 c4 04	 add	 esp, 4
  0002b	66 85 c0	 test	 ax, ax
  0002e	74 17		 je	 SHORT $LN2@DeleteMons

; 959  : 		{
; 960  : 			gObj[stMonsterIndex.m_iIndex].m_ImperialGuardianZone = -1;

  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00035	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048

; 961  : 			nCount++;

  0003b	43		 inc	 ebx
  0003c	c7 84 01 b8 26
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+9912], -1
$LN2@DeleteMons:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00047	8b 4d fc	 mov	 ecx, DWORD PTR tv380[ebp]

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  0004a	83 c6 08	 add	 esi, 8

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0004d	3b 71 34	 cmp	 esi, DWORD PTR [ecx+52]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 954  : 	for( ; it != this->m_ZoneInfo[nZoneIndex].m_vtMonsterIndexInfo.end(); it++)

  00050	75 ce		 jne	 SHORT $LL4@DeleteMons
  00052	5f		 pop	 edi
$LN3@DeleteMons:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  00053	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00056	89 41 34	 mov	 DWORD PTR [ecx+52], eax
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 966  : 	LogAddTD("[IMPERIALGUARDIAN] DELETE ALL MONSTER -> [ZONE]:%d [COUNT]:%d ",nZoneIndex+1,nCount);

  00059	8b 45 08	 mov	 eax, DWORD PTR _nZoneIndex$[ebp]
  0005c	53		 push	 ebx
  0005d	40		 inc	 eax
  0005e	50		 push	 eax
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@HBNLDLKJ@?$FLIMPERIALGUARDIAN?$FN?5DELETE?5ALL?5MO@
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx

; 967  : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?DeleteMonster@CImperialGuardian@@QAEXHH@Z ENDP		; CImperialGuardian::DeleteMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?RegenMonster@CImperialGuardian@@QAEXHHH_N@Z
_TEXT	SEGMENT
_stMonsterIndex$1 = -16					; size = 8
_this$1$ = -8						; size = 4
tv694 = -4						; size = 4
_i$1$ = 8						; size = 4
_nZoneIndex$ = 8					; size = 4
_nMonsterRegenTableIndex$ = 12				; size = 4
_nMaxLevel$2$ = 16					; size = 4
_nMaxUserLevel$ = 16					; size = 4
_bOnlyCreateGate$ = 20					; size = 1
?RegenMonster@CImperialGuardian@@QAEXHHH_N@Z PROC	; CImperialGuardian::RegenMonster, COMDAT
; _this$ = ecx

; 841  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 842  : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _nZoneIndex$[ebp]
  0000a	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	85 db		 test	 ebx, ebx
  0000f	0f 88 a2 02 00
	00		 js	 $LN32@RegenMonst
  00015	33 c0		 xor	 eax, eax
  00017	83 fb 03	 cmp	 ebx, 3
  0001a	0f 9e c0	 setle	 al
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 92 02 00
	00		 je	 $LN32@RegenMonst

; 845  : 		return;
; 846  : 	}
; 847  : 
; 848  : 	if( nMonsterRegenTableIndex < 1 ||

  00025	8b 55 0c	 mov	 edx, DWORD PTR _nMonsterRegenTableIndex$[ebp]
  00028	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0002b	83 f8 06	 cmp	 eax, 6
  0002e	0f 87 6d 02 00
	00		 ja	 $LN7@RegenMonst

; 852  : 		return;
; 853  : 	}
; 854  : 
; 855  : 	int nMaxLevel = gParty.m_PartyS[this->m_ZoneInfo[nZoneIndex].m_iPartyNumber].m_MaxLevel;

  00034	6b c3 64	 imul	 eax, ebx, 100

; 856  : 
; 857  : 	if( nMaxUserLevel != 0 )
; 858  : 		nMaxLevel = nMaxUserLevel;
; 859  : 
; 860  : 	for(int i = 0; i < gMSetBase.m_Count; i++)

  00037	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
  0003e	03 c1		 add	 eax, ecx
  00040	89 45 fc	 mov	 DWORD PTR tv694[ebp], eax
  00043	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00046	8b c8		 mov	 ecx, eax
  00048	c1 e1 04	 shl	 ecx, 4
  0004b	2b c8		 sub	 ecx, eax
  0004d	8b 45 10	 mov	 eax, DWORD PTR _nMaxUserLevel$[ebp]
  00050	85 c0		 test	 eax, eax
  00052	0f bf 0c 8d 34
	00 00 00	 movsx	 ecx, WORD PTR ?gParty@@3VPartyClass@@A[ecx*4+52]
  0005a	0f 45 c8	 cmovne	 ecx, eax
  0005d	83 3d 60 34 03
	00 00		 cmp	 DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+210016, 0
  00064	89 4d 10	 mov	 DWORD PTR _nMaxLevel$2$[ebp], ecx
  00067	0f 8e 59 02 00
	00		 jle	 $LN3@RegenMonst
  0006d	56		 push	 esi
  0006e	57		 push	 edi
  0006f	bf 0c 02 00 00	 mov	 edi, 524		; 0000020cH
  00074	be 06 00 00 00	 mov	 esi, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A+6
  00079	33 c0		 xor	 eax, eax
  0007b	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0007e	66 90		 npad	 2
$LL4@RegenMonst:

; 861  : 	{
; 862  : 		if( gMSetBase.m_Mp[i].m_ArrangeType == 5 &&
; 863  : 			gMSetBase.m_Mp[i].m_wZoneIndex == nZoneIndex &&

  00080	80 7e fe 05	 cmp	 BYTE PTR [esi-2], 5
  00084	0f 85 fb 01 00
	00		 jne	 $LN2@RegenMonst
  0008a	0f bf 46 0a	 movsx	 eax, WORD PTR [esi+10]
  0008e	3b c3		 cmp	 eax, ebx
  00090	0f 85 ec 01 00
	00		 jne	 $LN37@RegenMonst
  00096	0f bf 46 0c	 movsx	 eax, WORD PTR [esi+12]
  0009a	3b c2		 cmp	 eax, edx
  0009c	0f 85 e0 01 00
	00		 jne	 $LN37@RegenMonst

; 864  : 			gMSetBase.m_Mp[i].m_wMonsterRegenTableIndex == nMonsterRegenTableIndex )
; 865  : 		{
; 866  : 			if( bOnlyCreateGate )

  000a2	80 7d 14 00	 cmp	 BYTE PTR _bOnlyCreateGate$[ebp], 0

; 867  : 			{
; 868  : 				if( gMSetBase.m_Mp[i].m_Type < 524 ||

  000a6	0f b7 06	 movzx	 eax, WORD PTR [esi]
  000a9	74 13		 je	 SHORT $LN10@RegenMonst
  000ab	66 3b c7	 cmp	 ax, di
  000ae	0f 82 ce 01 00
	00		 jb	 $LN37@RegenMonst
  000b4	66 3b c1	 cmp	 ax, cx
  000b7	76 13		 jbe	 SHORT $LN14@RegenMonst

; 869  : 					gMSetBase.m_Mp[i].m_Type > 528 )
; 870  : 				{
; 871  : 					continue;

  000b9	e9 c4 01 00 00	 jmp	 $LN37@RegenMonst
$LN10@RegenMonst:

; 872  : 				}
; 873  : 			}
; 874  : 			else
; 875  : 			{
; 876  : 				if( gMSetBase.m_Mp[i].m_Type >= 524 &&

  000be	66 3b c7	 cmp	 ax, di
  000c1	72 09		 jb	 SHORT $LN14@RegenMonst
  000c3	66 3b c1	 cmp	 ax, cx
  000c6	0f 86 b6 01 00
	00		 jbe	 $LN37@RegenMonst
$LN14@RegenMonst:

; 877  : 					gMSetBase.m_Mp[i].m_Type <= 528 )
; 878  : 				{
; 879  : 					continue;
; 880  : 				}
; 881  : 			}
; 882  : 
; 883  : 			int nResult = gObjAddMonster(gMSetBase.m_Mp[i].m_MapNumber);

  000cc	0f b6 46 02	 movzx	 eax, BYTE PTR [esi+2]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  000d6	0f bf f8	 movsx	 edi, ax
  000d9	83 c4 04	 add	 esp, 4

; 884  : 
; 885  : 			if( nResult >= 0 )

  000dc	85 ff		 test	 edi, edi
  000de	0f 88 7e 01 00
	00		 js	 $LN15@RegenMonst

; 886  : 			{
; 887  : 				if( !gObjSetPosMonster(nResult,i) )

  000e4	ff 75 08	 push	 DWORD PTR _i$1$[ebp]
  000e7	57		 push	 edi
  000e8	e8 00 00 00 00	 call	 ?gObjSetPosMonster@@YAHHH@Z ; gObjSetPosMonster
  000ed	83 c4 08	 add	 esp, 8
  000f0	85 c0		 test	 eax, eax
  000f2	75 23		 jne	 SHORT $LN17@RegenMonst

; 888  : 				{
; 889  : 					gObjDel(nResult);

  000f4	57		 push	 edi
  000f5	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel

; 890  : 					LogAdd("error : %s %d",__FILE__,__LINE__);

  000fa	68 7a 03 00 00	 push	 890			; 0000037aH
$LN39@RegenMonst:
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0010f	83 c4 10	 add	 esp, 16			; 00000010H

; 891  : 					continue;

  00112	e9 5e 01 00 00	 jmp	 $LN41@RegenMonst
$LN17@RegenMonst:

; 892  : 				}
; 893  : 
; 894  : 				if( !this->SetMonster(nResult,gMSetBase.m_Mp[i].m_Type,nMaxLevel) )

  00117	ff 75 10	 push	 DWORD PTR _nMaxLevel$2$[ebp]
  0011a	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0011d	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00120	50		 push	 eax
  00121	57		 push	 edi
  00122	e8 00 00 00 00	 call	 ?SetMonster@CImperialGuardian@@QAE_NHHH@Z ; CImperialGuardian::SetMonster
  00127	84 c0		 test	 al, al
  00129	75 0d		 jne	 SHORT $LN18@RegenMonst

; 895  : 				{
; 896  : 					gObjDel(nResult);

  0012b	57		 push	 edi
  0012c	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel

; 897  : 					LogAdd("error : %s %d",__FILE__,__LINE__);

  00131	68 81 03 00 00	 push	 897			; 00000381H

; 898  : 					continue;

  00136	eb c7		 jmp	 SHORT $LN39@RegenMonst
$LN18@RegenMonst:

; 899  : 				}
; 900  : 
; 901  : 				gObj[nResult].m_ImperialGuardianZone = nZoneIndex;

  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 902  : 
; 903  : 				_stMonsterIndexInfo stMonsterIndex;
; 904  : 
; 905  : 				if( gMSetBase.m_Mp[i].m_Type >= 523 &&

  0013d	ba 0b 02 00 00	 mov	 edx, 523		; 0000020bH
  00142	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048
  00148	89 9c 01 b8 26
	00 00		 mov	 DWORD PTR [ecx+eax+9912], ebx
  0014f	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00152	66 3b c2	 cmp	 ax, dx
  00155	72 69		 jb	 SHORT $LN19@RegenMonst
  00157	ba 10 02 00 00	 mov	 edx, 528		; 00000210H
  0015c	66 3b c2	 cmp	 ax, dx
  0015f	77 5f		 ja	 SHORT $LN19@RegenMonst

; 906  : 					gMSetBase.m_Mp[i].m_Type <= 528 )
; 907  : 				{
; 908  : 					stMonsterIndex.m_bLiveMonster = 0;
; 909  : 					stMonsterIndex.m_iIndex = nResult;

  00161	89 7d f0	 mov	 DWORD PTR _stMonsterIndex$1[ebp], edi

; 910  : 					stMonsterIndex.m_bAttack = 0;
; 911  : 
; 912  : 					if( gMSetBase.m_Mp[i].m_Type >= 524 &&
; 913  : 						gMSetBase.m_Mp[i].m_Type <= 528 &&

  00164	bf 0c 02 00 00	 mov	 edi, 524		; 0000020cH
  00169	66 c7 45 f4 00
	00		 mov	 WORD PTR _stMonsterIndex$1[ebp+4], 0
  0016f	66 3b c7	 cmp	 ax, di
  00172	0f 82 9e 00 00
	00		 jb	 $LN20@RegenMonst
  00178	ba 0e 02 00 00	 mov	 edx, 526		; 0000020eH
  0017d	66 3b c2	 cmp	 ax, dx
  00180	0f 84 90 00 00
	00		 je	 $LN20@RegenMonst

; 914  : 						gMSetBase.m_Mp[i].m_Type != 526 )
; 915  : 					{
; 916  : 						LogAddTD("[IMPERIALGUARDIAN] AddGate => %s, MapNumber => %d ,Zone => %d PosX => %d, PosY => %d ",

  00186	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0018c	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  00193	50		 push	 eax
  00194	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  0019b	50		 push	 eax
  0019c	8b 81 b8 26 00
	00		 mov	 eax, DWORD PTR [ecx+9912]
  001a2	40		 inc	 eax
  001a3	50		 push	 eax
  001a4	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  001ab	50		 push	 eax
  001ac	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  001af	50		 push	 eax
  001b0	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@KMFHIHOJ@?$FLIMPERIALGUARDIAN?$FN?5AddGate?5?$DN?$DO?5?$CFs@
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001bb	83 c4 18	 add	 esp, 24			; 00000018H

; 917  : 							gObj[nResult].Name,gObj[nResult].MapNumber,gObj[nResult].m_ImperialGuardianZone+1,gObj[nResult].X,gObj[nResult].Y);
; 918  : 					}
; 919  : 				}
; 920  : 				else

  001be	eb 56		 jmp	 SHORT $LN20@RegenMonst
$LN19@RegenMonst:

; 921  : 				{
; 922  : 					stMonsterIndex.m_bLiveMonster = 1;
; 923  : 					stMonsterIndex.m_iIndex = nResult;
; 924  : 					stMonsterIndex.m_bAttack = 1;
; 925  : 					this->m_ZoneInfo[nZoneIndex].m_bMonsterSpawn = 1;

  001c0	8b 45 fc	 mov	 eax, DWORD PTR tv694[ebp]
  001c3	66 c7 45 f4 01
	01		 mov	 WORD PTR _stMonsterIndex$1[ebp+4], 257 ; 00000101H
  001c9	89 7d f0	 mov	 DWORD PTR _stMonsterIndex$1[ebp], edi
  001cc	c6 40 21 01	 mov	 BYTE PTR [eax+33], 1

; 926  : 
; 927  : 					LogAddTD("[IMPERIALGUARDIAN] AddMonster => %s, MapNumber => %d ,Zone => %d PosX => %d, PosY => %d, Connected => %d, STATE => %d ",

  001d0	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001d6	ff b1 d0 01 00
	00		 push	 DWORD PTR [ecx+464]
  001dc	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  001e3	ff 71 04	 push	 DWORD PTR [ecx+4]
  001e6	50		 push	 eax
  001e7	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  001ee	50		 push	 eax
  001ef	8b 81 b8 26 00
	00		 mov	 eax, DWORD PTR [ecx+9912]
  001f5	40		 inc	 eax
  001f6	50		 push	 eax
  001f7	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  001fe	50		 push	 eax
  001ff	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00202	50		 push	 eax
  00203	68 00 00 00 00	 push	 OFFSET ??_C@_0HH@NPLECNJH@?$FLIMPERIALGUARDIAN?$FN?5AddMonster?5?$DN?$DO@
  00208	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0020e	83 c4 20	 add	 esp, 32			; 00000020H
  00211	bf 0c 02 00 00	 mov	 edi, 524		; 0000020cH
$LN20@RegenMonst:

; 928  : 						gObj[nResult].Name,gObj[nResult].MapNumber,gObj[nResult].m_ImperialGuardianZone+1,gObj[nResult].X,gObj[nResult].Y,gObj[nResult].Connected,gObj[nResult].m_State);
; 929  : 				}
; 930  : 
; 931  : 				this->m_ZoneInfo[nZoneIndex].m_vtMonsterIndexInfo.push_back(stMonsterIndex);

  00216	8b 4d fc	 mov	 ecx, DWORD PTR tv694[ebp]
  00219	8d 45 f0	 lea	 eax, DWORD PTR _stMonsterIndex$1[ebp]
  0021c	50		 push	 eax
  0021d	8d 49 30	 lea	 ecx, DWORD PTR [ecx+48]
  00220	e8 00 00 00 00	 call	 ?push_back@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXABU_stMonsterIndexInfo@@@Z ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::push_back

; 932  : 
; 933  : 				if( gMSetBase.m_Mp[i].m_Type >= 524 &&
; 934  : 					gMSetBase.m_Mp[i].m_Type <= 528 &&

  00225	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00228	b9 10 02 00 00	 mov	 ecx, 528		; 00000210H
  0022d	66 3b c7	 cmp	 ax, di
  00230	72 4d		 jb	 SHORT $LN33@RegenMonst
  00232	66 3b c1	 cmp	 ax, cx
  00235	77 48		 ja	 SHORT $LN33@RegenMonst
  00237	ba 0e 02 00 00	 mov	 edx, 526		; 0000020eH
  0023c	66 3b c2	 cmp	 ax, dx
  0023f	74 3e		 je	 SHORT $LN33@RegenMonst

; 935  : 					gMSetBase.m_Mp[i].m_Type != 526 )
; 936  : 				{
; 937  : 					this->SetGateBlockState(gMSetBase.m_Mp[i].m_MapNumber,nZoneIndex,gMSetBase.m_Mp[i].m_X,gMSetBase.m_Mp[i].m_Y,1,gMSetBase.m_Mp[i].m_Dir);

  00241	0f b6 46 06	 movzx	 eax, BYTE PTR [esi+6]
  00245	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00248	50		 push	 eax
  00249	0f b6 46 05	 movzx	 eax, BYTE PTR [esi+5]
  0024d	6a 01		 push	 1
  0024f	50		 push	 eax
  00250	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  00254	50		 push	 eax
  00255	0f b6 46 02	 movzx	 eax, BYTE PTR [esi+2]
  00259	53		 push	 ebx
  0025a	50		 push	 eax
  0025b	e8 00 00 00 00	 call	 ?SetGateBlockState@CImperialGuardian@@QAEXHHHHHH@Z ; CImperialGuardian::SetGateBlockState

; 938  : 				}
; 939  : 			}
; 940  : 			else

  00260	eb 18		 jmp	 SHORT $LN42@RegenMonst
$LN15@RegenMonst:

; 941  : 			{
; 942  : 				LogAddTD("[IMPERIALGUARDIAN][RegenMonsterFunc] gObjAddMonster fail (ErrorCode: %d, MonsterClass: %d)",

  00262	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00265	50		 push	 eax
  00266	57		 push	 edi
  00267	68 00 00 00 00	 push	 OFFSET ??_C@_0FL@DNMPJOJF@?$FLIMPERIALGUARDIAN?$FN?$FLRegenMonsterF@
  0026c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00272	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN41@RegenMonst:
  00275	bf 0c 02 00 00	 mov	 edi, 524		; 0000020cH
$LN42@RegenMonst:
  0027a	b9 10 02 00 00	 mov	 ecx, 528		; 00000210H
$LN33@RegenMonst:
  0027f	8b 55 0c	 mov	 edx, DWORD PTR _nMonsterRegenTableIndex$[ebp]
$LN37@RegenMonst:
  00282	8b 45 08	 mov	 eax, DWORD PTR _i$1$[ebp]
$LN2@RegenMonst:

; 856  : 
; 857  : 	if( nMaxUserLevel != 0 )
; 858  : 		nMaxLevel = nMaxUserLevel;
; 859  : 
; 860  : 	for(int i = 0; i < gMSetBase.m_Count; i++)

  00285	40		 inc	 eax
  00286	83 c6 14	 add	 esi, 20			; 00000014H
  00289	89 45 08	 mov	 DWORD PTR _i$1$[ebp], eax
  0028c	3b 05 60 34 03
	00		 cmp	 eax, DWORD PTR ?gMSetBase@@3VCMonsterSetBase@@A+210016
  00292	0f 8c e8 fd ff
	ff		 jl	 $LL4@RegenMonst
  00298	5f		 pop	 edi
  00299	5e		 pop	 esi
  0029a	5b		 pop	 ebx

; 943  : 					nResult,gMSetBase.m_Mp[i].m_Type);
; 944  : 			}
; 945  : 		}
; 946  : 	}
; 947  : }

  0029b	8b e5		 mov	 esp, ebp
  0029d	5d		 pop	 ebp
  0029e	c2 10 00	 ret	 16			; 00000010H
$LN7@RegenMonst:

; 849  : 		nMonsterRegenTableIndex > 7 )
; 850  : 	{
; 851  : 		LogAddTD("[IMPERIALGUARDIAN][RegenMonsterFunc] Invalid MonsterRegenTable Index => %d  ",nMonsterRegenTableIndex);

  002a1	52		 push	 edx
  002a2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@DCMGCKOE@?$FLIMPERIALGUARDIAN?$FN?$FLRegenMonsterF@
  002a7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002ad	83 c4 08	 add	 esp, 8
  002b0	5b		 pop	 ebx

; 943  : 					nResult,gMSetBase.m_Mp[i].m_Type);
; 944  : 			}
; 945  : 		}
; 946  : 	}
; 947  : }

  002b1	8b e5		 mov	 esp, ebp
  002b3	5d		 pop	 ebp
  002b4	c2 10 00	 ret	 16			; 00000010H
$LN32@RegenMonst:

; 843  : 	{
; 844  : 		LogAdd("[IMPERIALGUARDIAN][RegenMonsterFunc] Invalid zone index => %d  ",nZoneIndex);

  002b7	53		 push	 ebx
  002b8	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@OPEPFPC@?$FLIMPERIALGUARDIAN?$FN?$FLRegenMonsterF@
  002bd	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  002c3	83 c4 08	 add	 esp, 8
$LN3@RegenMonst:
  002c6	5b		 pop	 ebx

; 943  : 					nResult,gMSetBase.m_Mp[i].m_Type);
; 944  : 			}
; 945  : 		}
; 946  : 	}
; 947  : }

  002c7	8b e5		 mov	 esp, ebp
  002c9	5d		 pop	 ebp
  002ca	c2 10 00	 ret	 16			; 00000010H
?RegenMonster@CImperialGuardian@@QAEXHHH_N@Z ENDP	; CImperialGuardian::RegenMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?CGEnterPortal@CImperialGuardian@@QAEXHH@Z
_TEXT	SEGMENT
_tCurrentTime$ = -96					; size = 8
_lpObj$1$ = -88						; size = 4
tv862 = -84						; size = 4
_nEnterItemPos$1$ = -80					; size = 4
tv948 = -76						; size = 4
_nMaxLevel$1$ = -72					; size = 4
_nDayOfWeek$1$ = -72					; size = 4
tv904 = -72						; size = 4
_nGateIndex$1$ = -68					; size = 4
tv938 = -68						; size = 4
tv912 = -68						; size = 4
tv910 = -68						; size = 4
tv908 = -68						; size = 4
tv906 = -68						; size = 4
tv880 = -68						; size = 4
_ttm$1 = -64						; size = 36
_pMsg$2 = -28						; size = 12
_pMsg$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_nUserIndex$ = 8					; size = 4
_nDestZoneIndex$ = 12					; size = 4
?CGEnterPortal@CImperialGuardian@@QAEXHH@Z PROC		; CImperialGuardian::CGEnterPortal, COMDAT
; _this$ = ecx

; 568  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _nDestZoneIndex$[ebp]
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _nUserIndex$[ebp]
  00018	57		 push	 edi
  00019	8b f9		 mov	 edi, ecx

; 569  : 	if( !OBJMAX_RANGE(nUserIndex) )

  0001b	85 f6		 test	 esi, esi
  0001d	0f 88 8b 06 00
	00		 js	 $LN47@CGEnterPor
  00023	33 c0		 xor	 eax, eax
  00025	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  0002b	0f 9e c0	 setle	 al
  0002e	85 c0		 test	 eax, eax
  00030	0f 84 78 06 00
	00		 je	 $LN47@CGEnterPor

; 570  : 		return;
; 571  : 
; 572  : 	if( !IMPERIAL_ZONE_CHECK(nDestZoneIndex) )

  00036	85 db		 test	 ebx, ebx
  00038	0f 88 70 06 00
	00		 js	 $LN47@CGEnterPor
  0003e	33 c0		 xor	 eax, eax
  00040	83 fb 03	 cmp	 ebx, 3
  00043	0f 9e c0	 setle	 al
  00046	85 c0		 test	 eax, eax
  00048	0f 84 60 06 00
	00		 je	 $LN47@CGEnterPor

; 573  : 		return;
; 574  : 
; 575  : 	LPOBJ lpObj = &gObj[nUserIndex];

  0004e	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  00054	89 4d b4	 mov	 DWORD PTR tv948[ebp], ecx
  00057	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005d	89 4d a8	 mov	 DWORD PTR _lpObj$1$[ebp], ecx

; 576  : 
; 577  : 	if( lpObj->m_IfState.use && lpObj->m_IfState.type != 12 )

  00060	8b 81 b8 11 00
	00		 mov	 eax, DWORD PTR [ecx+4536]
  00066	a8 03		 test	 al, 3
  00068	74 10		 je	 SHORT $LN7@CGEnterPor
  0006a	25 c0 ff 00 00	 and	 eax, 65472		; 0000ffc0H
  0006f	3d 00 03 00 00	 cmp	 eax, 768		; 00000300H
  00074	0f 85 34 06 00
	00		 jne	 $LN47@CGEnterPor
$LN7@CGEnterPor:

; 578  : 		return;
; 579  : 
; 580  : 	if( gFreeServer == TRUE )

  0007a	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?gFreeServer@@3HA, 1 ; gFreeServer
  00081	75 5f		 jne	 SHORT $LN9@CGEnterPor

; 581  : 	{
; 582  : 		if( lpObj->Level < 150 )

  00083	b8 96 00 00 00	 mov	 eax, 150		; 00000096H
  00088	66 39 81 96 00
	00 00		 cmp	 WORD PTR [ecx+150], ax
  0008f	7d 51		 jge	 SHORT $LN9@CGEnterPor

; 583  : 		{
; 584  : 			PMSG_ANS_ENTERPORTAL pMsg = {0};
; 585  : 			pMsg.btResult = 6;
; 586  : 			PHeadSubSetB((LPBYTE)&pMsg,0xF7,0x02,sizeof(pMsg));

  00091	6a 0c		 push	 12			; 0000000cH
  00093	6a 02		 push	 2
  00095	0f 57 c0	 xorps	 xmm0, xmm0
  00098	c6 45 e4 00	 mov	 BYTE PTR _pMsg$2[ebp], 0
  0009c	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$2[ebp]
  0009f	66 0f d6 45 e5	 movq	 QWORD PTR _pMsg$2[ebp+1], xmm0
  000a4	68 f7 00 00 00	 push	 247			; 000000f7H
  000a9	50		 push	 eax
  000aa	66 c7 45 ed 00
	00		 mov	 WORD PTR _pMsg$2[ebp+9], 0
  000b0	c6 45 ef 00	 mov	 BYTE PTR _pMsg$2[ebp+11], 0
  000b4	c6 45 e8 06	 mov	 BYTE PTR _pMsg$2[ebp+4], 6
  000b8	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 587  : 			DataSend(nUserIndex,(LPBYTE)&pMsg,pMsg.h.size);

  000bd	0f b6 45 e5	 movzx	 eax, BYTE PTR _pMsg$2[ebp+1]
  000c1	50		 push	 eax
  000c2	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$2[ebp]
  000c5	50		 push	 eax
  000c6	56		 push	 esi
  000c7	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000cc	83 c4 1c	 add	 esp, 28			; 0000001cH
  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx

; 837  : 	}
; 838  : }

  000d2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d5	33 cd		 xor	 ecx, ebp
  000d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c2 08 00	 ret	 8
$LN9@CGEnterPor:

; 588  : 			return;
; 589  : 		}
; 590  : 	}
; 591  : 
; 592  : 	if( lpObj->m_bPShopOpen == TRUE )

  000e2	80 b9 5c 12 00
	00 01		 cmp	 BYTE PTR [ecx+4700], 1
  000e9	75 0a		 jne	 SHORT $LN10@CGEnterPor

; 593  : 		CGPShopReqClose(lpObj->m_Index);

  000eb	ff 31		 push	 DWORD PTR [ecx]
  000ed	e8 00 00 00 00	 call	 ?CGPShopReqClose@@YAXH@Z ; CGPShopReqClose
  000f2	83 c4 04	 add	 esp, 4
$LN10@CGEnterPor:

; 594  : 
; 595  : 	int nEnterItemPos = -1;
; 596  : 
; 597  : 	PMSG_ANS_ENTERPORTAL pMsg = {0};
; 598  : 	PHeadSubSetB((LPBYTE)&pMsg,0xF7,0x02,sizeof(pMsg));

  000f5	6a 0c		 push	 12			; 0000000cH
  000f7	83 c8 ff	 or	 eax, -1
  000fa	c6 45 f0 00	 mov	 BYTE PTR _pMsg$[ebp], 0
  000fe	6a 02		 push	 2
  00100	89 45 b0	 mov	 DWORD PTR _nEnterItemPos$1$[ebp], eax
  00103	0f 57 c0	 xorps	 xmm0, xmm0
  00106	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00109	66 0f d6 45 f1	 movq	 QWORD PTR _pMsg$[ebp+1], xmm0
  0010e	68 f7 00 00 00	 push	 247			; 000000f7H
  00113	50		 push	 eax
  00114	66 c7 45 f9 00
	00		 mov	 WORD PTR _pMsg$[ebp+9], 0
  0011a	c6 45 fb 00	 mov	 BYTE PTR _pMsg$[ebp+11], 0
  0011e	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 599  : 
; 600  : 	pMsg.btTmp = 0;
; 601  : 	pMsg.btResult = 0;
; 602  : 	pMsg.btFortZone = nDestZoneIndex+1;
; 603  : 	pMsg.iTime = this->m_ZoneInfo[nDestZoneIndex].m_dwREMAIN_MSEC + this->m_ZoneInfo[nDestZoneIndex].m_dwREMAIN_MSEC2 + this->m_ZoneInfo[nDestZoneIndex].m_dwREMAIN_MSEC3;

  00123	6b cb 64	 imul	 ecx, ebx, 100
  00126	8a c3		 mov	 al, bl
  00128	fe c0		 inc	 al
  0012a	c6 45 f7 00	 mov	 BYTE PTR _pMsg$[ebp+7], 0
  0012e	88 45 f6	 mov	 BYTE PTR _pMsg$[ebp+6], al
  00131	83 c4 10	 add	 esp, 16			; 00000010H
  00134	c6 45 f4 00	 mov	 BYTE PTR _pMsg$[ebp+4], 0
  00138	89 4d ac	 mov	 DWORD PTR tv862[ebp], ecx
  0013b	8b 44 39 5c	 mov	 eax, DWORD PTR [ecx+edi+92]
  0013f	03 44 39 58	 add	 eax, DWORD PTR [ecx+edi+88]
  00143	03 44 39 54	 add	 eax, DWORD PTR [ecx+edi+84]

; 604  : 
; 605  : 	if( !this->m_bEnabled )

  00147	80 7f 11 00	 cmp	 BYTE PTR [edi+17], 0
  0014b	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  0014e	0f 84 5a 05 00
	00		 je	 $LN47@CGEnterPor
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 374  : 	return( CTime( ::_time64( NULL ) ) );

  00154	6a 00		 push	 0
  00156	e8 00 00 00 00	 call	 __time64
  0015b	83 c4 04	 add	 esp, 4

; 375  : }
; 376  : 
; 377  : _Success_(return != false) inline bool CTime::GetAsDBTIMESTAMP(_Out_ DBTIMESTAMP& dbts) const throw()
; 378  : {
; 379  : 	struct tm tmLocal;
; 380  : 	if (GetLocalTm(&tmLocal) == nullptr) return false;
; 381  : 
; 382  : 	dbts.year = (SHORT) (1900 + tmLocal.tm_year);
; 383  : 	dbts.month = (USHORT) (1 + tmLocal.tm_mon);
; 384  : 	dbts.day = (USHORT) tmLocal.tm_mday;
; 385  : 	dbts.hour = (USHORT) tmLocal.tm_hour;
; 386  : 	dbts.minute = (USHORT) tmLocal.tm_min;
; 387  : 	dbts.second = (USHORT) tmLocal.tm_sec;
; 388  : 	dbts.fraction = 0;
; 389  : 
; 390  : 	return true;
; 391  : }
; 392  : 
; 393  : inline BOOL WINAPI CTime::IsValidFILETIME(_In_ const FILETIME& fileTime) throw()
; 394  : {
; 395  : 	FILETIME localTime;
; 396  : 	if (!FileTimeToLocalFileTime(&fileTime, &localTime))
; 397  : 	{
; 398  : 		return FALSE;
; 399  : 	}
; 400  : 
; 401  : 	// then convert that time to system time
; 402  : 	SYSTEMTIME sysTime;
; 403  : 	if (!FileTimeToSystemTime(&localTime, &sysTime))
; 404  : 	{
; 405  : 		return FALSE;
; 406  : 	}
; 407  : 
; 408  : 	return TRUE;
; 409  : }
; 410  : 
; 411  : inline CTime::CTime() throw() :
; 412  : 	m_time(0)
; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  0015e	89 45 a0	 mov	 DWORD PTR _tCurrentTime$[ebp], eax

; 418  : {
; 419  : }
; 420  : 
; 421  : inline CTime::CTime(
; 422  : 	_In_ int nYear,
; 423  : 	_In_ int nMonth,
; 424  : 	_In_ int nDay,
; 425  : 	_In_ int nHour,
; 426  : 	_In_ int nMin,
; 427  : 	_In_ int nSec,
; 428  : 	_In_ int nDST)
; 429  : {
; 430  : #pragma warning (push)
; 431  : #pragma warning (disable: 4127)  // conditional expression constant
; 432  : 
; 433  : 	ATLENSURE( nYear >= 1900 );
; 434  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );
; 435  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );
; 436  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );
; 437  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );
; 438  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );
; 439  : 
; 440  : #pragma warning (pop)
; 441  : 
; 442  : 	struct tm atm;
; 443  : 
; 444  : 	atm.tm_sec = nSec;
; 445  : 	atm.tm_min = nMin;
; 446  : 	atm.tm_hour = nHour;
; 447  : 	atm.tm_mday = nDay;
; 448  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based
; 449  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based
; 450  : 	atm.tm_isdst = nDST;
; 451  : 
; 452  : 	m_time = _mktime64(&atm);
; 453  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 454  : 	if(m_time == -1)
; 455  : 	{
; 456  : 		AtlThrow(E_INVALIDARG);
; 457  : 	}
; 458  : }
; 459  : 
; 460  : inline CTime::CTime(
; 461  : 	_In_ WORD wDosDate,
; 462  : 	_In_ WORD wDosTime,
; 463  : 	_In_ int nDST)
; 464  : {
; 465  : 	struct tm atm;
; 466  : 	atm.tm_sec = (wDosTime & ~0xFFE0) << 1;
; 467  : 	atm.tm_min = (wDosTime & ~0xF800) >> 5;
; 468  : 	atm.tm_hour = wDosTime >> 11;
; 469  : 
; 470  : 	atm.tm_mday = wDosDate & ~0xFFE0;
; 471  : 	atm.tm_mon = ((wDosDate & ~0xFE00) >> 5) - 1;
; 472  : 	atm.tm_year = (wDosDate >> 9) + 80;
; 473  : 	atm.tm_isdst = nDST;
; 474  : 	m_time = _mktime64(&atm);
; 475  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 476  : 
; 477  : 	if(m_time == -1)
; 478  : 		AtlThrow(E_INVALIDARG);
; 479  : 
; 480  : }
; 481  : 
; 482  : inline CTime::CTime(
; 483  : 	_In_ const SYSTEMTIME& sysTime,
; 484  : 	_In_ int nDST)
; 485  : {
; 486  : 	if (sysTime.wYear < 1900)
; 487  : 	{
; 488  : 		__time64_t time0 = 0L;
; 489  : 		CTime timeT(time0);
; 490  : 		*this = timeT;
; 491  : 	}
; 492  : 	else
; 493  : 	{
; 494  : 		CTime timeT(
; 495  : 			(int)sysTime.wYear, (int)sysTime.wMonth, (int)sysTime.wDay,
; 496  : 			(int)sysTime.wHour, (int)sysTime.wMinute, (int)sysTime.wSecond,
; 497  : 			nDST);
; 498  : 		*this = timeT;
; 499  : 	}
; 500  : }
; 501  : 
; 502  : inline CTime::CTime(
; 503  : 	_In_ const FILETIME& fileTime,
; 504  : 	_In_ int nDST)
; 505  : {
; 506  : 	SYSTEMTIME sysTime;
; 507  : 	SYSTEMTIME localTime;
; 508  : 	if (!FileTimeToSystemTime(&fileTime, &sysTime) || !SystemTimeToTzSpecificLocalTime(nullptr, &sysTime, &localTime))
; 509  : 	{
; 510  : 		m_time = 0;
; 511  : 		AtlThrow(E_INVALIDARG);
; 512  : 		return;
; 513  : 	}
; 514  : 
; 515  : 	// Convert the system time to a time_t (C-runtime local time)
; 516  : 	CTime timeT(localTime, nDST);
; 517  : 	*this = timeT;
; 518  : }
; 519  : 
; 520  : inline CTime& CTime::operator=(_In_ __time64_t time) throw()
; 521  : {
; 522  : 	m_time = time;
; 523  : 
; 524  : 	return( *this );
; 525  : }
; 526  : 
; 527  : inline CTime& CTime::operator+=(_In_ CTimeSpan span) throw()
; 528  : {
; 529  : 	m_time += span.GetTimeSpan();
; 530  : 
; 531  : 	return( *this );
; 532  : }
; 533  : 
; 534  : inline CTime& CTime::operator-=(_In_ CTimeSpan span) throw()
; 535  : {
; 536  : 	m_time -= span.GetTimeSpan();
; 537  : 
; 538  : 	return( *this );
; 539  : }
; 540  : 
; 541  : inline CTimeSpan CTime::operator-(_In_ CTime time) const throw()
; 542  : {
; 543  : 	return( CTimeSpan( m_time-time.m_time ) );
; 544  : }
; 545  : 
; 546  : inline CTime CTime::operator-(_In_ CTimeSpan span) const throw()
; 547  : {
; 548  : 	return( CTime( m_time-span.GetTimeSpan() ) );
; 549  : }
; 550  : 
; 551  : inline CTime CTime::operator+(_In_ CTimeSpan span) const throw()
; 552  : {
; 553  : 	return( CTime( m_time+span.GetTimeSpan() ) );
; 554  : }
; 555  : 
; 556  : inline bool CTime::operator==(_In_ CTime time) const throw()
; 557  : {
; 558  : 	return( m_time == time.m_time );
; 559  : }
; 560  : 
; 561  : inline bool CTime::operator!=(_In_ CTime time) const throw()
; 562  : {
; 563  : 	return( m_time != time.m_time );
; 564  : }
; 565  : 
; 566  : inline bool CTime::operator<(_In_ CTime time) const throw()
; 567  : {
; 568  : 	return( m_time < time.m_time );
; 569  : }
; 570  : 
; 571  : inline bool CTime::operator>(_In_ CTime time) const throw()
; 572  : {
; 573  : 	return( m_time > time.m_time );
; 574  : }
; 575  : 
; 576  : inline bool CTime::operator<=(_In_ CTime time) const throw()
; 577  : {
; 578  : 	return( m_time <= time.m_time );
; 579  : }
; 580  : 
; 581  : inline bool CTime::operator>=(_In_ CTime time) const throw()
; 582  : {
; 583  : 	return( m_time >= time.m_time );
; 584  : }
; 585  : 
; 586  : inline _Success_(return != NULL) struct tm* CTime::GetGmtTm(_Out_ struct tm* ptm) const
; 587  : {
; 588  : 	// Ensure ptm is valid
; 589  : 	ATLENSURE( ptm != NULL );
; 590  : 
; 591  : 	if (ptm != NULL)
; 592  : 	{
; 593  : 		struct tm ptmTemp;
; 594  : 		errno_t err = _gmtime64_s(&ptmTemp, &m_time);
; 595  : 
; 596  : 		// Be sure the call succeeded
; 597  : 		if(err != 0) { return NULL; }
; 598  : 
; 599  : 		*ptm = ptmTemp;
; 600  : 		return ptm;
; 601  : 	}
; 602  : 
; 603  : 	return NULL;
; 604  : }
; 605  : 
; 606  : inline _Success_(return != NULL) struct tm* CTime::GetLocalTm(_Out_ struct tm* ptm) const
; 607  : {
; 608  : 	// Ensure ptm is valid
; 609  : 	ATLENSURE( ptm != NULL );
; 610  : 
; 611  : 	if (ptm != NULL)
; 612  : 	{
; 613  : 		struct tm ptmTemp;
; 614  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);
; 615  : 
; 616  : 		if (err != 0)
; 617  : 		{
; 618  : 			return NULL;    // indicates that m_time was not initialized!
; 619  : 		}
; 620  : 
; 621  : 		*ptm = ptmTemp;
; 622  : 		return ptm;
; 623  : 	}
; 624  : 
; 625  : 	return NULL;
; 626  : }
; 627  : 
; 628  : inline _Success_(return != false) bool CTime::GetAsSystemTime(_Out_ SYSTEMTIME& timeDest) const throw()
; 629  : {
; 630  : 	struct tm ttm;
; 631  : 	struct tm* ptm;
; 632  : 
; 633  : 	ptm = GetLocalTm(&ttm);
; 634  : 	if(!ptm) 
; 635  : 	{ 
; 636  : 		return false; 
; 637  : 	}
; 638  : 
; 639  : 	timeDest.wYear = (WORD) (1900 + ptm->tm_year);
; 640  : 	timeDest.wMonth = (WORD) (1 + ptm->tm_mon);
; 641  : 	timeDest.wDayOfWeek = (WORD) ptm->tm_wday;
; 642  : 	timeDest.wDay = (WORD) ptm->tm_mday;
; 643  : 	timeDest.wHour = (WORD) ptm->tm_hour;
; 644  : 	timeDest.wMinute = (WORD) ptm->tm_min;
; 645  : 	timeDest.wSecond = (WORD) ptm->tm_sec;
; 646  : 	timeDest.wMilliseconds = 0;
; 647  : 
; 648  : 	return true;
; 649  : }
; 650  : 
; 651  : inline __time64_t CTime::GetTime() const throw()
; 652  : {
; 653  : 	return( m_time );
; 654  : }
; 655  : 
; 656  : inline int CTime::GetYear() const
; 657  : {
; 658  : 	struct tm ttm;
; 659  : 	struct tm * ptm;
; 660  : 
; 661  : 	ptm = GetLocalTm(&ttm);
; 662  : 	return ptm ? (ptm->tm_year) + 1900 : 0 ;
; 663  : }
; 664  : 
; 665  : inline int CTime::GetMonth() const
; 666  : {
; 667  : 	struct tm ttm;
; 668  : 	struct tm * ptm;
; 669  : 
; 670  : 	ptm = GetLocalTm(&ttm);
; 671  : 	return ptm ? ptm->tm_mon + 1 : 0;
; 672  : }
; 673  : 
; 674  : inline int CTime::GetDay() const
; 675  : {
; 676  : 	struct tm ttm;
; 677  : 	struct tm * ptm;
; 678  : 
; 679  : 	ptm = GetLocalTm(&ttm);
; 680  : 	return ptm ? ptm->tm_mday : 0 ;
; 681  : }
; 682  : 
; 683  : inline int CTime::GetHour() const
; 684  : {
; 685  : 	struct tm ttm;
; 686  : 	struct tm * ptm;
; 687  : 
; 688  : 	ptm = GetLocalTm(&ttm);
; 689  : 	return ptm ? ptm->tm_hour : -1 ;
; 690  : }
; 691  : 
; 692  : inline int CTime::GetMinute() const
; 693  : {
; 694  : 	struct tm ttm;
; 695  : 	struct tm * ptm;
; 696  : 
; 697  : 	ptm = GetLocalTm(&ttm);
; 698  : 	return ptm ? ptm->tm_min : -1 ;
; 699  : }
; 700  : 
; 701  : inline int CTime::GetSecond() const
; 702  : {
; 703  : 	struct tm ttm;
; 704  : 	struct tm * ptm;
; 705  : 
; 706  : 	ptm = GetLocalTm(&ttm);
; 707  : 	return ptm ? ptm->tm_sec : -1 ;
; 708  : }
; 709  : 
; 710  : inline int CTime::GetDayOfWeek() const
; 711  : {
; 712  : 	struct tm ttm;
; 713  : 	struct tm * ptm;
; 714  : 
; 715  : 	ptm = GetLocalTm(&ttm);

  00161	8d 45 c0	 lea	 eax, DWORD PTR _ttm$1[ebp]

; 375  : }
; 376  : 
; 377  : _Success_(return != false) inline bool CTime::GetAsDBTIMESTAMP(_Out_ DBTIMESTAMP& dbts) const throw()
; 378  : {
; 379  : 	struct tm tmLocal;
; 380  : 	if (GetLocalTm(&tmLocal) == nullptr) return false;
; 381  : 
; 382  : 	dbts.year = (SHORT) (1900 + tmLocal.tm_year);
; 383  : 	dbts.month = (USHORT) (1 + tmLocal.tm_mon);
; 384  : 	dbts.day = (USHORT) tmLocal.tm_mday;
; 385  : 	dbts.hour = (USHORT) tmLocal.tm_hour;
; 386  : 	dbts.minute = (USHORT) tmLocal.tm_min;
; 387  : 	dbts.second = (USHORT) tmLocal.tm_sec;
; 388  : 	dbts.fraction = 0;
; 389  : 
; 390  : 	return true;
; 391  : }
; 392  : 
; 393  : inline BOOL WINAPI CTime::IsValidFILETIME(_In_ const FILETIME& fileTime) throw()
; 394  : {
; 395  : 	FILETIME localTime;
; 396  : 	if (!FileTimeToLocalFileTime(&fileTime, &localTime))
; 397  : 	{
; 398  : 		return FALSE;
; 399  : 	}
; 400  : 
; 401  : 	// then convert that time to system time
; 402  : 	SYSTEMTIME sysTime;
; 403  : 	if (!FileTimeToSystemTime(&localTime, &sysTime))
; 404  : 	{
; 405  : 		return FALSE;
; 406  : 	}
; 407  : 
; 408  : 	return TRUE;
; 409  : }
; 410  : 
; 411  : inline CTime::CTime() throw() :
; 412  : 	m_time(0)
; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  00164	89 55 a4	 mov	 DWORD PTR _tCurrentTime$[ebp+4], edx

; 418  : {
; 419  : }
; 420  : 
; 421  : inline CTime::CTime(
; 422  : 	_In_ int nYear,
; 423  : 	_In_ int nMonth,
; 424  : 	_In_ int nDay,
; 425  : 	_In_ int nHour,
; 426  : 	_In_ int nMin,
; 427  : 	_In_ int nSec,
; 428  : 	_In_ int nDST)
; 429  : {
; 430  : #pragma warning (push)
; 431  : #pragma warning (disable: 4127)  // conditional expression constant
; 432  : 
; 433  : 	ATLENSURE( nYear >= 1900 );
; 434  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );
; 435  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );
; 436  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );
; 437  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );
; 438  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );
; 439  : 
; 440  : #pragma warning (pop)
; 441  : 
; 442  : 	struct tm atm;
; 443  : 
; 444  : 	atm.tm_sec = nSec;
; 445  : 	atm.tm_min = nMin;
; 446  : 	atm.tm_hour = nHour;
; 447  : 	atm.tm_mday = nDay;
; 448  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based
; 449  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based
; 450  : 	atm.tm_isdst = nDST;
; 451  : 
; 452  : 	m_time = _mktime64(&atm);
; 453  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 454  : 	if(m_time == -1)
; 455  : 	{
; 456  : 		AtlThrow(E_INVALIDARG);
; 457  : 	}
; 458  : }
; 459  : 
; 460  : inline CTime::CTime(
; 461  : 	_In_ WORD wDosDate,
; 462  : 	_In_ WORD wDosTime,
; 463  : 	_In_ int nDST)
; 464  : {
; 465  : 	struct tm atm;
; 466  : 	atm.tm_sec = (wDosTime & ~0xFFE0) << 1;
; 467  : 	atm.tm_min = (wDosTime & ~0xF800) >> 5;
; 468  : 	atm.tm_hour = wDosTime >> 11;
; 469  : 
; 470  : 	atm.tm_mday = wDosDate & ~0xFFE0;
; 471  : 	atm.tm_mon = ((wDosDate & ~0xFE00) >> 5) - 1;
; 472  : 	atm.tm_year = (wDosDate >> 9) + 80;
; 473  : 	atm.tm_isdst = nDST;
; 474  : 	m_time = _mktime64(&atm);
; 475  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 476  : 
; 477  : 	if(m_time == -1)
; 478  : 		AtlThrow(E_INVALIDARG);
; 479  : 
; 480  : }
; 481  : 
; 482  : inline CTime::CTime(
; 483  : 	_In_ const SYSTEMTIME& sysTime,
; 484  : 	_In_ int nDST)
; 485  : {
; 486  : 	if (sysTime.wYear < 1900)
; 487  : 	{
; 488  : 		__time64_t time0 = 0L;
; 489  : 		CTime timeT(time0);
; 490  : 		*this = timeT;
; 491  : 	}
; 492  : 	else
; 493  : 	{
; 494  : 		CTime timeT(
; 495  : 			(int)sysTime.wYear, (int)sysTime.wMonth, (int)sysTime.wDay,
; 496  : 			(int)sysTime.wHour, (int)sysTime.wMinute, (int)sysTime.wSecond,
; 497  : 			nDST);
; 498  : 		*this = timeT;
; 499  : 	}
; 500  : }
; 501  : 
; 502  : inline CTime::CTime(
; 503  : 	_In_ const FILETIME& fileTime,
; 504  : 	_In_ int nDST)
; 505  : {
; 506  : 	SYSTEMTIME sysTime;
; 507  : 	SYSTEMTIME localTime;
; 508  : 	if (!FileTimeToSystemTime(&fileTime, &sysTime) || !SystemTimeToTzSpecificLocalTime(nullptr, &sysTime, &localTime))
; 509  : 	{
; 510  : 		m_time = 0;
; 511  : 		AtlThrow(E_INVALIDARG);
; 512  : 		return;
; 513  : 	}
; 514  : 
; 515  : 	// Convert the system time to a time_t (C-runtime local time)
; 516  : 	CTime timeT(localTime, nDST);
; 517  : 	*this = timeT;
; 518  : }
; 519  : 
; 520  : inline CTime& CTime::operator=(_In_ __time64_t time) throw()
; 521  : {
; 522  : 	m_time = time;
; 523  : 
; 524  : 	return( *this );
; 525  : }
; 526  : 
; 527  : inline CTime& CTime::operator+=(_In_ CTimeSpan span) throw()
; 528  : {
; 529  : 	m_time += span.GetTimeSpan();
; 530  : 
; 531  : 	return( *this );
; 532  : }
; 533  : 
; 534  : inline CTime& CTime::operator-=(_In_ CTimeSpan span) throw()
; 535  : {
; 536  : 	m_time -= span.GetTimeSpan();
; 537  : 
; 538  : 	return( *this );
; 539  : }
; 540  : 
; 541  : inline CTimeSpan CTime::operator-(_In_ CTime time) const throw()
; 542  : {
; 543  : 	return( CTimeSpan( m_time-time.m_time ) );
; 544  : }
; 545  : 
; 546  : inline CTime CTime::operator-(_In_ CTimeSpan span) const throw()
; 547  : {
; 548  : 	return( CTime( m_time-span.GetTimeSpan() ) );
; 549  : }
; 550  : 
; 551  : inline CTime CTime::operator+(_In_ CTimeSpan span) const throw()
; 552  : {
; 553  : 	return( CTime( m_time+span.GetTimeSpan() ) );
; 554  : }
; 555  : 
; 556  : inline bool CTime::operator==(_In_ CTime time) const throw()
; 557  : {
; 558  : 	return( m_time == time.m_time );
; 559  : }
; 560  : 
; 561  : inline bool CTime::operator!=(_In_ CTime time) const throw()
; 562  : {
; 563  : 	return( m_time != time.m_time );
; 564  : }
; 565  : 
; 566  : inline bool CTime::operator<(_In_ CTime time) const throw()
; 567  : {
; 568  : 	return( m_time < time.m_time );
; 569  : }
; 570  : 
; 571  : inline bool CTime::operator>(_In_ CTime time) const throw()
; 572  : {
; 573  : 	return( m_time > time.m_time );
; 574  : }
; 575  : 
; 576  : inline bool CTime::operator<=(_In_ CTime time) const throw()
; 577  : {
; 578  : 	return( m_time <= time.m_time );
; 579  : }
; 580  : 
; 581  : inline bool CTime::operator>=(_In_ CTime time) const throw()
; 582  : {
; 583  : 	return( m_time >= time.m_time );
; 584  : }
; 585  : 
; 586  : inline _Success_(return != NULL) struct tm* CTime::GetGmtTm(_Out_ struct tm* ptm) const
; 587  : {
; 588  : 	// Ensure ptm is valid
; 589  : 	ATLENSURE( ptm != NULL );
; 590  : 
; 591  : 	if (ptm != NULL)
; 592  : 	{
; 593  : 		struct tm ptmTemp;
; 594  : 		errno_t err = _gmtime64_s(&ptmTemp, &m_time);
; 595  : 
; 596  : 		// Be sure the call succeeded
; 597  : 		if(err != 0) { return NULL; }
; 598  : 
; 599  : 		*ptm = ptmTemp;
; 600  : 		return ptm;
; 601  : 	}
; 602  : 
; 603  : 	return NULL;
; 604  : }
; 605  : 
; 606  : inline _Success_(return != NULL) struct tm* CTime::GetLocalTm(_Out_ struct tm* ptm) const
; 607  : {
; 608  : 	// Ensure ptm is valid
; 609  : 	ATLENSURE( ptm != NULL );
; 610  : 
; 611  : 	if (ptm != NULL)
; 612  : 	{
; 613  : 		struct tm ptmTemp;
; 614  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);
; 615  : 
; 616  : 		if (err != 0)
; 617  : 		{
; 618  : 			return NULL;    // indicates that m_time was not initialized!
; 619  : 		}
; 620  : 
; 621  : 		*ptm = ptmTemp;
; 622  : 		return ptm;
; 623  : 	}
; 624  : 
; 625  : 	return NULL;
; 626  : }
; 627  : 
; 628  : inline _Success_(return != false) bool CTime::GetAsSystemTime(_Out_ SYSTEMTIME& timeDest) const throw()
; 629  : {
; 630  : 	struct tm ttm;
; 631  : 	struct tm* ptm;
; 632  : 
; 633  : 	ptm = GetLocalTm(&ttm);
; 634  : 	if(!ptm) 
; 635  : 	{ 
; 636  : 		return false; 
; 637  : 	}
; 638  : 
; 639  : 	timeDest.wYear = (WORD) (1900 + ptm->tm_year);
; 640  : 	timeDest.wMonth = (WORD) (1 + ptm->tm_mon);
; 641  : 	timeDest.wDayOfWeek = (WORD) ptm->tm_wday;
; 642  : 	timeDest.wDay = (WORD) ptm->tm_mday;
; 643  : 	timeDest.wHour = (WORD) ptm->tm_hour;
; 644  : 	timeDest.wMinute = (WORD) ptm->tm_min;
; 645  : 	timeDest.wSecond = (WORD) ptm->tm_sec;
; 646  : 	timeDest.wMilliseconds = 0;
; 647  : 
; 648  : 	return true;
; 649  : }
; 650  : 
; 651  : inline __time64_t CTime::GetTime() const throw()
; 652  : {
; 653  : 	return( m_time );
; 654  : }
; 655  : 
; 656  : inline int CTime::GetYear() const
; 657  : {
; 658  : 	struct tm ttm;
; 659  : 	struct tm * ptm;
; 660  : 
; 661  : 	ptm = GetLocalTm(&ttm);
; 662  : 	return ptm ? (ptm->tm_year) + 1900 : 0 ;
; 663  : }
; 664  : 
; 665  : inline int CTime::GetMonth() const
; 666  : {
; 667  : 	struct tm ttm;
; 668  : 	struct tm * ptm;
; 669  : 
; 670  : 	ptm = GetLocalTm(&ttm);
; 671  : 	return ptm ? ptm->tm_mon + 1 : 0;
; 672  : }
; 673  : 
; 674  : inline int CTime::GetDay() const
; 675  : {
; 676  : 	struct tm ttm;
; 677  : 	struct tm * ptm;
; 678  : 
; 679  : 	ptm = GetLocalTm(&ttm);
; 680  : 	return ptm ? ptm->tm_mday : 0 ;
; 681  : }
; 682  : 
; 683  : inline int CTime::GetHour() const
; 684  : {
; 685  : 	struct tm ttm;
; 686  : 	struct tm * ptm;
; 687  : 
; 688  : 	ptm = GetLocalTm(&ttm);
; 689  : 	return ptm ? ptm->tm_hour : -1 ;
; 690  : }
; 691  : 
; 692  : inline int CTime::GetMinute() const
; 693  : {
; 694  : 	struct tm ttm;
; 695  : 	struct tm * ptm;
; 696  : 
; 697  : 	ptm = GetLocalTm(&ttm);
; 698  : 	return ptm ? ptm->tm_min : -1 ;
; 699  : }
; 700  : 
; 701  : inline int CTime::GetSecond() const
; 702  : {
; 703  : 	struct tm ttm;
; 704  : 	struct tm * ptm;
; 705  : 
; 706  : 	ptm = GetLocalTm(&ttm);
; 707  : 	return ptm ? ptm->tm_sec : -1 ;
; 708  : }
; 709  : 
; 710  : inline int CTime::GetDayOfWeek() const
; 711  : {
; 712  : 	struct tm ttm;
; 713  : 	struct tm * ptm;
; 714  : 
; 715  : 	ptm = GetLocalTm(&ttm);

  00167	8d 4d a0	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  0016a	50		 push	 eax
  0016b	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 716  : 	return ptm ? ptm->tm_wday + 1 : 0 ;

  00170	85 c0		 test	 eax, eax
  00172	74 06		 je	 SHORT $LN68@CGEnterPor
  00174	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00177	41		 inc	 ecx
  00178	eb 02		 jmp	 SHORT $LN98@CGEnterPor
$LN68@CGEnterPor:
  0017a	33 c9		 xor	 ecx, ecx
$LN98@CGEnterPor:
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 611  : 	if( this->m_wCheatMode && this->m_wDayOfWeek > -1 )

  0017c	0f b7 47 04	 movzx	 eax, WORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 716  : 	return ptm ? ptm->tm_wday + 1 : 0 ;

  00180	89 4d b8	 mov	 DWORD PTR _nDayOfWeek$1$[ebp], ecx
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 611  : 	if( this->m_wCheatMode && this->m_wDayOfWeek > -1 )

  00183	66 85 c0	 test	 ax, ax
  00186	74 10		 je	 SHORT $LN12@CGEnterPor
  00188	0f b7 87 a4 01
	00 00		 movzx	 eax, WORD PTR [edi+420]
  0018f	83 f8 ff	 cmp	 eax, -1
  00192	0f 4f c8	 cmovg	 ecx, eax
  00195	89 4d b8	 mov	 DWORD PTR _nDayOfWeek$1$[ebp], ecx
$LN12@CGEnterPor:

; 612  : 		nDayOfWeek = this->m_wDayOfWeek;
; 613  : 
; 614  : 	if( gParty.m_PartyS[gObj[nUserIndex].PartyNumber].Count < 1 )

  00198	8b 55 b4	 mov	 edx, DWORD PTR tv948[ebp]
  0019b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001a0	8b 84 02 0c 06
	00 00		 mov	 eax, DWORD PTR [edx+eax+1548]
  001a7	8b d0		 mov	 edx, eax
  001a9	c1 e2 04	 shl	 edx, 4
  001ac	2b d0		 sub	 edx, eax
  001ae	83 3c 95 08 00
	00 00 01	 cmp	 DWORD PTR ?gParty@@3VPartyClass@@A[edx*4+8], 1
  001b6	7d 25		 jge	 SHORT $LN13@CGEnterPor

; 615  : 	{
; 616  : 		pMsg.btResult = 5;
; 617  : 		this->GCSendDataToUser(nUserIndex,(LPBYTE)&pMsg,sizeof(pMsg));

  001b8	6a 0c		 push	 12			; 0000000cH
  001ba	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  001bd	c6 45 f4 05	 mov	 BYTE PTR _pMsg$[ebp+4], 5
  001c1	50		 push	 eax
  001c2	56		 push	 esi
  001c3	8b cf		 mov	 ecx, edi
  001c5	e8 00 00 00 00	 call	 ?GCSendDataToUser@CImperialGuardian@@QAEXHPAEH@Z ; CImperialGuardian::GCSendDataToUser
  001ca	5f		 pop	 edi
  001cb	5e		 pop	 esi
  001cc	5b		 pop	 ebx

; 837  : 	}
; 838  : }

  001cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d0	33 cd		 xor	 ecx, ebp
  001d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d7	8b e5		 mov	 esp, ebp
  001d9	5d		 pop	 ebp
  001da	c2 08 00	 ret	 8
$LN13@CGEnterPor:

; 618  : 		return;
; 619  : 	}
; 620  : 
; 621  : 	if( this->m_wCheatMode != 1 )

  001dd	66 83 7f 04 01	 cmp	 WORD PTR [edi+4], 1
  001e2	0f 84 96 00 00
	00		 je	 $LN25@CGEnterPor

; 622  : 	{
; 623  : 		if( nDestZoneIndex == 0 )

  001e8	85 db		 test	 ebx, ebx
  001ea	75 74		 jne	 SHORT $LN97@CGEnterPor

; 624  : 		{
; 625  : 			if( nDayOfWeek != 1 )

  001ec	83 f9 01	 cmp	 ecx, 1

; 626  : 			{
; 627  : 				nEnterItemPos = this->CheckGaionOrderPaper(nUserIndex);

  001ef	8b cf		 mov	 ecx, edi
  001f1	56		 push	 esi
  001f2	74 36		 je	 SHORT $LN16@CGEnterPor
  001f4	e8 00 00 00 00	 call	 ?CheckGaionOrderPaper@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::CheckGaionOrderPaper
  001f9	89 45 b0	 mov	 DWORD PTR _nEnterItemPos$1$[ebp], eax

; 628  : 
; 629  : 				if( nEnterItemPos >= 0 )

  001fc	85 c0		 test	 eax, eax
  001fe	79 60		 jns	 SHORT $LN97@CGEnterPor

; 630  : 				{
; 631  : 
; 632  : 				}
; 633  : 				else if( nEnterItemPos == -1 )

  00200	83 f8 ff	 cmp	 eax, -1
  00203	75 5b		 jne	 SHORT $LN97@CGEnterPor

; 634  : 				{
; 635  : 					pMsg.btResult = 2;
; 636  : 					this->GCSendDataToUser(nUserIndex,(LPBYTE)&pMsg,sizeof(pMsg));

  00205	6a 0c		 push	 12			; 0000000cH
  00207	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0020a	c6 45 f4 02	 mov	 BYTE PTR _pMsg$[ebp+4], 2
  0020e	50		 push	 eax
  0020f	56		 push	 esi
  00210	8b cf		 mov	 ecx, edi
  00212	e8 00 00 00 00	 call	 ?GCSendDataToUser@CImperialGuardian@@QAEXHPAEH@Z ; CImperialGuardian::GCSendDataToUser
  00217	5f		 pop	 edi
  00218	5e		 pop	 esi
  00219	5b		 pop	 ebx

; 837  : 	}
; 838  : }

  0021a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0021d	33 cd		 xor	 ecx, ebp
  0021f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00224	8b e5		 mov	 esp, ebp
  00226	5d		 pop	 ebp
  00227	c2 08 00	 ret	 8
$LN16@CGEnterPor:

; 637  : 					return;
; 638  : 				}
; 639  : 			}
; 640  : 			else
; 641  : 			{
; 642  : 				nEnterItemPos = this->CheckFullSecromicon(nUserIndex);

  0022a	e8 00 00 00 00	 call	 ?CheckFullSecromicon@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::CheckFullSecromicon
  0022f	89 45 b0	 mov	 DWORD PTR _nEnterItemPos$1$[ebp], eax

; 643  : 
; 644  : 				if( nEnterItemPos >= 0 )

  00232	85 c0		 test	 eax, eax
  00234	79 2a		 jns	 SHORT $LN97@CGEnterPor

; 645  : 				{
; 646  : 
; 647  : 				}
; 648  : 				else if( nEnterItemPos == -1 )

  00236	83 f8 ff	 cmp	 eax, -1
  00239	75 25		 jne	 SHORT $LN97@CGEnterPor

; 649  : 				{
; 650  : 					pMsg.btResult = 2;
; 651  : 					this->GCSendDataToUser(nUserIndex,(LPBYTE)&pMsg,sizeof(pMsg));

  0023b	6a 0c		 push	 12			; 0000000cH
  0023d	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00240	c6 45 f4 02	 mov	 BYTE PTR _pMsg$[ebp+4], 2
  00244	50		 push	 eax
  00245	56		 push	 esi
  00246	8b cf		 mov	 ecx, edi
  00248	e8 00 00 00 00	 call	 ?GCSendDataToUser@CImperialGuardian@@QAEXHPAEH@Z ; CImperialGuardian::GCSendDataToUser
  0024d	5f		 pop	 edi
  0024e	5e		 pop	 esi
  0024f	5b		 pop	 ebx

; 837  : 	}
; 838  : }

  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	33 cd		 xor	 ecx, ebp
  00255	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025a	8b e5		 mov	 esp, ebp
  0025c	5d		 pop	 ebp
  0025d	c2 08 00	 ret	 8
$LN97@CGEnterPor:

; 652  : 					return;
; 653  : 				}
; 654  : 			}
; 655  : 		}
; 656  : 	}
; 657  : 
; 658  : 	if( this->m_wCheatMode != 1 && nDestZoneIndex > 0 )

  00260	66 83 7f 04 01	 cmp	 WORD PTR [edi+4], 1
  00265	74 17		 je	 SHORT $LN25@CGEnterPor
  00267	85 db		 test	 ebx, ebx
  00269	7e 13		 jle	 SHORT $LN25@CGEnterPor

; 659  : 	{
; 660  : 		if( this->GetCurrentZoneIndex(nUserIndex) != (nDestZoneIndex-1))

  0026b	56		 push	 esi
  0026c	8b cf		 mov	 ecx, edi
  0026e	e8 00 00 00 00	 call	 ?GetCurrentZoneIndex@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetCurrentZoneIndex
  00273	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  00276	3b c1		 cmp	 eax, ecx
  00278	0f 85 30 04 00
	00		 jne	 $LN47@CGEnterPor
$LN25@CGEnterPor:

; 661  : 			return;
; 662  : 	}
; 663  : 
; 664  : 	if( this->GetZoneState(nDestZoneIndex) != IMPERIAL_STATE_READY && 

  0027e	53		 push	 ebx
  0027f	8b cf		 mov	 ecx, edi
  00281	e8 00 00 00 00	 call	 ?GetZoneState@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetZoneState
  00286	85 c0		 test	 eax, eax
  00288	74 6a		 je	 SHORT $LN26@CGEnterPor
  0028a	53		 push	 ebx
  0028b	8b cf		 mov	 ecx, edi
  0028d	e8 00 00 00 00	 call	 ?GetZoneState@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetZoneState
  00292	83 f8 02	 cmp	 eax, 2
  00295	74 5d		 je	 SHORT $LN26@CGEnterPor

; 665  : 		this->GetZoneState(nDestZoneIndex) != IMPERIAL_STATE_BEGINWAITPLAYER )
; 666  : 	{
; 667  : 		GCServerMsgStringSend(lMsg.Get(MSGGET(13,136)),nUserIndex,1);

  00297	6a 01		 push	 1
  00299	56		 push	 esi
  0029a	68 88 0d 00 00	 push	 3464			; 00000d88H
  0029f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  002a4	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  002a9	50		 push	 eax
  002aa	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  002af	83 c4 0c	 add	 esp, 12			; 0000000cH

; 668  : 		
; 669  : 		if( nDestZoneIndex != 0 )
; 670  : 		{
; 671  : 			this->RollBackUserPos(nUserIndex);

  002b2	8b cf		 mov	 ecx, edi
  002b4	85 db		 test	 ebx, ebx
  002b6	74 19		 je	 SHORT $LN27@CGEnterPor
  002b8	56		 push	 esi
  002b9	e8 00 00 00 00	 call	 ?RollBackUserPos@CImperialGuardian@@QAEXH@Z ; CImperialGuardian::RollBackUserPos
  002be	5f		 pop	 edi
  002bf	5e		 pop	 esi
  002c0	5b		 pop	 ebx

; 837  : 	}
; 838  : }

  002c1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002c4	33 cd		 xor	 ecx, ebp
  002c6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002cb	8b e5		 mov	 esp, ebp
  002cd	5d		 pop	 ebp
  002ce	c2 08 00	 ret	 8
$LN27@CGEnterPor:

; 672  : 		}
; 673  : 		else
; 674  : 		{
; 675  : 			pMsg.btResult = 1;
; 676  : 			this->GCSendDataToUser(nUserIndex,(LPBYTE)&pMsg,sizeof(pMsg));

  002d1	6a 0c		 push	 12			; 0000000cH
  002d3	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002d6	c6 45 f4 01	 mov	 BYTE PTR _pMsg$[ebp+4], 1
  002da	50		 push	 eax
  002db	56		 push	 esi
  002dc	e8 00 00 00 00	 call	 ?GCSendDataToUser@CImperialGuardian@@QAEXHPAEH@Z ; CImperialGuardian::GCSendDataToUser
  002e1	5f		 pop	 edi
  002e2	5e		 pop	 esi
  002e3	5b		 pop	 ebx

; 837  : 	}
; 838  : }

  002e4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002e7	33 cd		 xor	 ecx, ebp
  002e9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ee	8b e5		 mov	 esp, ebp
  002f0	5d		 pop	 ebp
  002f1	c2 08 00	 ret	 8
$LN26@CGEnterPor:

; 677  : 		}
; 678  : 		return;
; 679  : 	}
; 680  : 
; 681  : 	if( nDestZoneIndex == 0 && this->m_wCheatMode == 0 )

  002f4	85 db		 test	 ebx, ebx
  002f6	75 2c		 jne	 SHORT $LN31@CGEnterPor
  002f8	66 39 5f 04	 cmp	 WORD PTR [edi+4], bx
  002fc	75 26		 jne	 SHORT $LN31@CGEnterPor

; 686  : 		{
; 687  : 			if( this->m_ZoneInfo[i].m_iPartyNumber == gObj[nUserIndex].PartyNumber )

  002fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00303	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  00306	8b 55 b4	 mov	 edx, DWORD PTR tv948[ebp]
  00309	8b 94 02 0c 06
	00 00		 mov	 edx, DWORD PTR [edx+eax+1548]
  00310	8d 47 7c	 lea	 eax, DWORD PTR [edi+124]
$LL4@CGEnterPor:
  00313	39 10		 cmp	 DWORD PTR [eax], edx
  00315	0f 84 90 00 00
	00		 je	 $LN92@CGEnterPor

; 682  : 	{
; 683  : 		char bFlag = 0;
; 684  : 
; 685  : 		for(int i = 1; i < IMPERIAL_GUARDIAN_MAXZONE; i++)

  0031b	41		 inc	 ecx
  0031c	83 c0 64	 add	 eax, 100		; 00000064H
  0031f	83 f9 04	 cmp	 ecx, 4
  00322	7c ef		 jl	 SHORT $LL4@CGEnterPor
$LN31@CGEnterPor:

; 699  : 
; 700  : 			if( nDestZoneIndex != 0 )
; 701  : 			{
; 702  : 				this->RollBackUserPos(nUserIndex);
; 703  : 			}
; 704  : 			return;
; 705  : 		}
; 706  : 	}
; 707  : 
; 708  : 	pMsg.btFortDay = nDayOfWeek-1;

  00324	8b 4d b8	 mov	 ecx, DWORD PTR _nDayOfWeek$1$[ebp]
  00327	49		 dec	 ecx

; 709  : 
; 710  : 	if( pMsg.btFortDay < 1 )

  00328	c7 45 bc 07 00
	00 00		 mov	 DWORD PTR tv880[ebp], 7
  0032f	80 f9 01	 cmp	 cl, 1
  00332	0f b6 c1	 movzx	 eax, cl

; 713  : 	if( this->m_ZoneInfo[nDestZoneIndex].m_iPartyNumber < 0 &&

  00335	8b 4d ac	 mov	 ecx, DWORD PTR tv862[ebp]
  00338	0f 42 45 bc	 cmovb	 eax, DWORD PTR tv880[ebp]
  0033c	88 45 f5	 mov	 BYTE PTR _pMsg$[ebp+5], al
  0033f	8b 44 39 18	 mov	 eax, DWORD PTR [ecx+edi+24]
  00343	85 c0		 test	 eax, eax
  00345	0f 89 a3 02 00
	00		 jns	 $LN34@CGEnterPor
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0034b	8b 44 39 40	 mov	 eax, DWORD PTR [ecx+edi+64]
  0034f	2b 44 39 3c	 sub	 eax, DWORD PTR [ecx+edi+60]
  00353	c1 f8 02	 sar	 eax, 2
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 713  : 	if( this->m_ZoneInfo[nDestZoneIndex].m_iPartyNumber < 0 &&

  00356	83 f8 01	 cmp	 eax, 1
  00359	0f 83 8f 02 00
	00		 jae	 $LN34@CGEnterPor

; 714  : 		this->m_ZoneInfo[nDestZoneIndex].m_vtUserIndex.size() < 1)
; 715  : 	{
; 716  : 		if( nDestZoneIndex > 0 &&
; 717  : 			this->m_wCheatMode != 1 && 

  0035f	85 db		 test	 ebx, ebx
  00361	0f 8e 84 00 00
	00		 jle	 $LN36@CGEnterPor
  00367	66 83 7f 04 01	 cmp	 WORD PTR [edi+4], 1
  0036c	74 7d		 je	 SHORT $LN36@CGEnterPor
  0036e	80 7c 39 bc 00	 cmp	 BYTE PTR [ecx+edi-68], 0
  00373	75 76		 jne	 SHORT $LN36@CGEnterPor

; 718  : 			!this->m_ZoneInfo[nDestZoneIndex-1].m_bWait )
; 719  : 		{
; 720  : 			GCServerMsgStringSend(lMsg.Get(MSGGET(13,138)),nUserIndex,1);

  00375	6a 01		 push	 1
  00377	56		 push	 esi
  00378	68 8a 0d 00 00	 push	 3466			; 00000d8aH
  0037d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00382	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00387	50		 push	 eax
  00388	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0038d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 721  : 			this->RollBackUserPos(nUserIndex);

  00390	8b cf		 mov	 ecx, edi
  00392	56		 push	 esi
  00393	e8 00 00 00 00	 call	 ?RollBackUserPos@CImperialGuardian@@QAEXH@Z ; CImperialGuardian::RollBackUserPos
  00398	5f		 pop	 edi
  00399	5e		 pop	 esi
  0039a	5b		 pop	 ebx

; 837  : 	}
; 838  : }

  0039b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0039e	33 cd		 xor	 ecx, ebp
  003a0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003a5	8b e5		 mov	 esp, ebp
  003a7	5d		 pop	 ebp
  003a8	c2 08 00	 ret	 8
$LN92@CGEnterPor:

; 688  : 			{
; 689  : 				bFlag = TRUE;
; 690  : 				break;
; 691  : 			}
; 692  : 		}
; 693  : 
; 694  : 		if( bFlag )
; 695  : 		{
; 696  : 			GCServerMsgStringSend(lMsg.Get(MSGGET(13,137)),nUserIndex,1);

  003ab	6a 01		 push	 1
  003ad	56		 push	 esi
  003ae	68 89 0d 00 00	 push	 3465			; 00000d89H
$LN101@CGEnterPor:
  003b3	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  003b8	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  003bd	50		 push	 eax
  003be	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 697  : 			pMsg.btResult = 1;

  003c3	c6 45 f4 01	 mov	 BYTE PTR _pMsg$[ebp+4], 1
$LN104@CGEnterPor:

; 698  : 			this->GCSendDataToUser(nUserIndex,(LPBYTE)&pMsg,sizeof(pMsg));

  003c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ca	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  003cd	8b cf		 mov	 ecx, edi
  003cf	6a 0c		 push	 12			; 0000000cH
  003d1	50		 push	 eax
  003d2	56		 push	 esi
  003d3	e8 00 00 00 00	 call	 ?GCSendDataToUser@CImperialGuardian@@QAEXHPAEH@Z ; CImperialGuardian::GCSendDataToUser
  003d8	5f		 pop	 edi
  003d9	5e		 pop	 esi
  003da	5b		 pop	 ebx

; 837  : 	}
; 838  : }

  003db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003de	33 cd		 xor	 ecx, ebp
  003e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003e5	8b e5		 mov	 esp, ebp
  003e7	5d		 pop	 ebp
  003e8	c2 08 00	 ret	 8
$LN36@CGEnterPor:

; 722  : 			return;
; 723  : 		}
; 724  : 
; 725  : 		int nTest = gObj[nUserIndex].PartyNumber;
; 726  : 		this->m_ZoneInfo[nDestZoneIndex].m_iPartyNumber = gObj[nUserIndex].PartyNumber;

  003eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003f0	8b 55 b4	 mov	 edx, DWORD PTR tv948[ebp]
  003f3	8b 84 02 0c 06
	00 00		 mov	 eax, DWORD PTR [edx+eax+1548]

; 727  : 
; 728  : 		if( nDestZoneIndex == 0 )

  003fa	8b 55 b8	 mov	 edx, DWORD PTR _nDayOfWeek$1$[ebp]
  003fd	89 44 39 18	 mov	 DWORD PTR [ecx+edi+24], eax
  00401	85 db		 test	 ebx, ebx
  00403	75 06		 jne	 SHORT $LN37@CGEnterPor

; 729  : 		{
; 730  : 			this->m_ZoneInfo[nDestZoneIndex].m_wMonsterRegenTable = nDayOfWeek;

  00405	66 89 57 24	 mov	 WORD PTR [edi+36], dx

; 731  : 		}
; 732  : 		else

  00409	eb 25		 jmp	 SHORT $LN40@CGEnterPor
$LN37@CGEnterPor:

; 733  : 		{
; 734  : 			if( this->m_ZoneInfo[nDestZoneIndex-1].m_wMonsterRegenTable > 0 && 

  0040b	0f b7 44 39 c0	 movzx	 eax, WORD PTR [ecx+edi-64]
  00410	66 85 c0	 test	 ax, ax
  00413	74 16		 je	 SHORT $LN39@CGEnterPor
  00415	66 83 7f 04 00	 cmp	 WORD PTR [edi+4], 0
  0041a	75 0f		 jne	 SHORT $LN39@CGEnterPor

; 735  : 				this->m_wCheatMode == 0 )
; 736  : 			{
; 737  : 				this->m_ZoneInfo[nDestZoneIndex].m_wMonsterRegenTable = this->m_ZoneInfo[nDestZoneIndex-1].m_wMonsterRegenTable;

  0041c	66 89 44 39 24	 mov	 WORD PTR [ecx+edi+36], ax

; 738  : 				this->m_ZoneInfo[nDestZoneIndex].m_iMaxLevel = this->m_ZoneInfo[nDestZoneIndex-1].m_iMaxLevel;

  00421	8b 44 39 c4	 mov	 eax, DWORD PTR [ecx+edi-60]
  00425	89 44 39 28	 mov	 DWORD PTR [ecx+edi+40], eax

; 739  : 			}
; 740  : 			else

  00429	eb 05		 jmp	 SHORT $LN40@CGEnterPor
$LN39@CGEnterPor:

; 741  : 			{
; 742  : 				this->m_ZoneInfo[nDestZoneIndex].m_wMonsterRegenTable = nDayOfWeek;

  0042b	66 89 54 39 24	 mov	 WORD PTR [ecx+edi+36], dx
$LN40@CGEnterPor:

; 743  : 			}
; 744  : 		}
; 745  : 
; 746  : 		int nMaxLevel = 0;
; 747  : 
; 748  : 		if( !gParty.m_PartyS[this->m_ZoneInfo[nDestZoneIndex].m_iPartyNumber].m_MaxLevel )

  00430	8b 54 39 18	 mov	 edx, DWORD PTR [ecx+edi+24]
  00434	8b c2		 mov	 eax, edx
  00436	c1 e0 04	 shl	 eax, 4
  00439	2b c2		 sub	 eax, edx
  0043b	66 83 3c 85 34
	00 00 00 00	 cmp	 WORD PTR ?gParty@@3VPartyClass@@A[eax*4+52], 0
  00444	75 22		 jne	 SHORT $LN41@CGEnterPor

; 749  : 		{
; 750  : 			nMaxLevel = gObj[nUserIndex].Level + gObj[nUserIndex].MasterLevel;

  00446	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0044b	8b 55 b4	 mov	 edx, DWORD PTR tv948[ebp]
  0044e	8b 4d b4	 mov	 ecx, DWORD PTR tv948[ebp]
  00451	0f bf 94 02 a8
	00 00 00	 movsx	 edx, WORD PTR [edx+eax+168]
  00459	0f bf 84 01 96
	00 00 00	 movsx	 eax, WORD PTR [ecx+eax+150]
  00461	03 d0		 add	 edx, eax
  00463	89 55 b8	 mov	 DWORD PTR _nMaxLevel$1$[ebp], edx

; 751  : 		}
; 752  : 		else

  00466	eb 0e		 jmp	 SHORT $LN100@CGEnterPor
$LN41@CGEnterPor:

; 753  : 		{
; 754  : 			nMaxLevel = gGetPartyMaxLevel(this->m_ZoneInfo[nDestZoneIndex].m_iPartyNumber);

  00468	52		 push	 edx
  00469	e8 00 00 00 00	 call	 ?gGetPartyMaxLevel@@YAHH@Z ; gGetPartyMaxLevel
  0046e	83 c4 04	 add	 esp, 4
  00471	89 45 b8	 mov	 DWORD PTR _nMaxLevel$1$[ebp], eax
  00474	8b d0		 mov	 edx, eax
$LN100@CGEnterPor:

; 755  : 		}
; 756  : 
; 757  : 		this->m_ZoneInfo[nDestZoneIndex].m_iMaxLevel = nMaxLevel;
; 758  : 		this->RegAllPartyUser(nDestZoneIndex,nUserIndex);

  00476	8b 4d ac	 mov	 ecx, DWORD PTR tv862[ebp]
  00479	56		 push	 esi
  0047a	53		 push	 ebx
  0047b	89 54 39 28	 mov	 DWORD PTR [ecx+edi+40], edx
  0047f	8b cf		 mov	 ecx, edi
  00481	e8 00 00 00 00	 call	 ?RegAllPartyUser@CImperialGuardian@@QAEXHH@Z ; CImperialGuardian::RegAllPartyUser

; 759  : 		this->RegenMonster(nDestZoneIndex,this->m_ZoneInfo[nDestZoneIndex].m_wMonsterRegenTable,nMaxLevel,true);

  00486	8b 45 ac	 mov	 eax, DWORD PTR tv862[ebp]
  00489	8b cf		 mov	 ecx, edi
  0048b	6a 01		 push	 1
  0048d	ff 75 b8	 push	 DWORD PTR _nMaxLevel$1$[ebp]
  00490	0f b7 44 38 24	 movzx	 eax, WORD PTR [eax+edi+36]
  00495	50		 push	 eax
  00496	53		 push	 ebx
  00497	e8 00 00 00 00	 call	 ?RegenMonster@CImperialGuardian@@QAEXHHH_N@Z ; CImperialGuardian::RegenMonster

; 760  : 		this->SetZoneState(nDestZoneIndex,IMPERIAL_STATE_BEGINWAITPLAYER);

  0049c	6a 02		 push	 2
  0049e	53		 push	 ebx
  0049f	8b cf		 mov	 ecx, edi
  004a1	e8 00 00 00 00	 call	 ?SetZoneState@CImperialGuardian@@QAE_NHH@Z ; CImperialGuardian::SetZoneState
$LN45@CGEnterPor:

; 787  : 		}
; 788  : 	}
; 789  : 
; 790  : 	pMsg.btTmp = this->iUnk1;

  004a6	8a 47 0c	 mov	 al, BYTE PTR [edi+12]
  004a9	88 45 f7	 mov	 BYTE PTR _pMsg$[ebp+7], al

; 791  : 
; 792  : 	if( nDestZoneIndex > 0 )

  004ac	85 db		 test	 ebx, ebx
  004ae	7e 0c		 jle	 SHORT $LN46@CGEnterPor

; 793  : 		this->RemoveUserInZone(nDestZoneIndex-1,nUserIndex);

  004b0	56		 push	 esi
  004b1	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  004b4	8b cf		 mov	 ecx, edi
  004b6	50		 push	 eax
  004b7	e8 00 00 00 00	 call	 ?RemoveUserInZone@CImperialGuardian@@QAEXHH@Z ; CImperialGuardian::RemoveUserInZone
$LN46@CGEnterPor:

; 794  : 
; 795  : 	int nGateIndex = this->GetGateNumber(nDestZoneIndex,this->m_ZoneInfo[nDestZoneIndex].m_wMonsterRegenTable);

  004bc	8b 45 ac	 mov	 eax, DWORD PTR tv862[ebp]
  004bf	8b cf		 mov	 ecx, edi
  004c1	0f b7 44 38 24	 movzx	 eax, WORD PTR [eax+edi+36]
  004c6	50		 push	 eax
  004c7	53		 push	 ebx
  004c8	e8 00 00 00 00	 call	 ?GetGateNumber@CImperialGuardian@@QAEHHH@Z ; CImperialGuardian::GetGateNumber
  004cd	89 45 bc	 mov	 DWORD PTR _nGateIndex$1$[ebp], eax

; 796  : 	if( nGateIndex != -1 )

  004d0	83 f8 ff	 cmp	 eax, -1
  004d3	0f 84 d5 01 00
	00		 je	 $LN47@CGEnterPor

; 797  : 	{
; 798  : 		this->AddUserInZone(nDestZoneIndex,nUserIndex);

  004d9	56		 push	 esi
  004da	53		 push	 ebx
  004db	8b cf		 mov	 ecx, edi
  004dd	e8 00 00 00 00	 call	 ?AddUserInZone@CImperialGuardian@@QAE_NHH@Z ; CImperialGuardian::AddUserInZone

; 799  : 		pMsg.btResult = 0;
; 800  : 		this->GCSendDataToUser(nUserIndex,(LPBYTE)&pMsg,sizeof(pMsg));

  004e2	6a 0c		 push	 12			; 0000000cH
  004e4	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  004e7	c6 45 f4 00	 mov	 BYTE PTR _pMsg$[ebp+4], 0
  004eb	50		 push	 eax
  004ec	56		 push	 esi
  004ed	8b cf		 mov	 ecx, edi
  004ef	e8 00 00 00 00	 call	 ?GCSendDataToUser@CImperialGuardian@@QAEXHPAEH@Z ; CImperialGuardian::GCSendDataToUser

; 801  : 
; 802  : 		if( gObjCheckUsedBuffEffect(lpObj,AT_NPC_HELP) == TRUE )

  004f4	6a 03		 push	 3
  004f6	ff 75 a8	 push	 DWORD PTR _lpObj$1$[ebp]
  004f9	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  004fe	83 c4 08	 add	 esp, 8
  00501	3c 01		 cmp	 al, 1
  00503	75 0d		 jne	 SHORT $LN48@CGEnterPor

; 803  : 			gObjRemoveBuffEffect(lpObj,AT_NPC_HELP);

  00505	6a 03		 push	 3
  00507	ff 75 a8	 push	 DWORD PTR _lpObj$1$[ebp]
  0050a	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  0050f	83 c4 08	 add	 esp, 8
$LN48@CGEnterPor:

; 804  : 
; 805  : 		gObjMoveGate(nUserIndex,nGateIndex);

  00512	ff 75 bc	 push	 DWORD PTR _nGateIndex$1$[ebp]
  00515	56		 push	 esi
  00516	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  0051b	83 c4 08	 add	 esp, 8

; 806  : 
; 807  : 		if( this->m_wCheatMode != 1 &&
; 808  : 			nDestZoneIndex == 0 &&

  0051e	66 83 7f 04 01	 cmp	 WORD PTR [edi+4], 1
  00523	0f 84 47 01 00
	00		 je	 $LN56@CGEnterPor
  00529	85 db		 test	 ebx, ebx
  0052b	0f 85 3f 01 00
	00		 jne	 $LN56@CGEnterPor
  00531	8b 4d b0	 mov	 ecx, DWORD PTR _nEnterItemPos$1$[ebp]
  00534	85 c9		 test	 ecx, ecx
  00536	0f 88 34 01 00
	00		 js	 $LN56@CGEnterPor

; 809  : 			nEnterItemPos >= 0 )
; 810  : 		{
; 811  : 			if( lpObj->pInventory[nEnterItemPos].m_Type == ITEMGET(14,102) ||

  0053c	8b 45 a8	 mov	 eax, DWORD PTR _lpObj$1$[ebp]
  0053f	69 d1 d4 00 00
	00		 imul	 edx, ecx, 212
  00545	c7 45 bc 66 1c
	00 00		 mov	 DWORD PTR tv906[ebp], 7270 ; 00001c66H
  0054c	8b 80 c0 11 00
	00		 mov	 eax, DWORD PTR [eax+4544]
  00552	89 45 b8	 mov	 DWORD PTR tv904[ebp], eax
  00555	0f b7 44 02 06	 movzx	 eax, WORD PTR [edx+eax+6]
  0055a	66 3b 45 bc	 cmp	 ax, WORD PTR tv906[ebp]
  0055e	0f 84 f6 00 00
	00		 je	 $LN52@CGEnterPor
  00564	c7 45 bc 6d 1c
	00 00		 mov	 DWORD PTR tv908[ebp], 7277 ; 00001c6dH
  0056b	66 3b 45 bc	 cmp	 ax, WORD PTR tv908[ebp]
  0056f	0f 84 e5 00 00
	00		 je	 $LN52@CGEnterPor

; 816  : 			}
; 817  : 			else if( lpObj->pInventory[nEnterItemPos].m_Type == ITEMGET(13,126) ||

  00575	c7 45 bc 7e 1a
	00 00		 mov	 DWORD PTR tv910[ebp], 6782 ; 00001a7eH
  0057c	66 3b 45 bc	 cmp	 ax, WORD PTR tv910[ebp]
  00580	74 11		 je	 SHORT $LN54@CGEnterPor
  00582	c7 45 bc 7f 1a
	00 00		 mov	 DWORD PTR tv912[ebp], 6783 ; 00001a7fH
  00589	66 3b 45 bc	 cmp	 ax, WORD PTR tv912[ebp]
  0058d	0f 85 dd 00 00
	00		 jne	 $LN56@CGEnterPor
$LN54@CGEnterPor:

; 818  : 				lpObj->pInventory[nEnterItemPos].m_Type == ITEMGET(13,127) )
; 819  : 			{
; 820  : 				lpObj->pInventory[nEnterItemPos].m_Durability -= 1.0f;

  00593	8b 45 b8	 mov	 eax, DWORD PTR tv904[ebp]
  00596	f3 0f 10 44 02
	24		 movss	 xmm0, DWORD PTR [edx+eax+36]
  0059c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  005a4	f3 0f 11 44 02
	24		 movss	 DWORD PTR [edx+eax+36], xmm0
  005aa	0f 57 c0	 xorps	 xmm0, xmm0

; 821  : 
; 822  : 				if( lpObj->pInventory[nEnterItemPos].m_Durability < 0 )

  005ad	8b 45 a8	 mov	 eax, DWORD PTR _lpObj$1$[ebp]
  005b0	8b 80 c0 11 00
	00		 mov	 eax, DWORD PTR [eax+4544]
  005b6	0f 2f 44 02 24	 comiss	 xmm0, DWORD PTR [edx+eax+36]
  005bb	0f 87 99 00 00
	00		 ja	 $LN52@CGEnterPor

; 823  : 				{
; 824  : 					gObjInventoryDeleteItem(nUserIndex,nEnterItemPos);
; 825  : 					GCInventoryItemDeleteSend(nUserIndex,nEnterItemPos,1);
; 826  : 				}
; 827  : 				else
; 828  : 				{
; 829  : 					GCItemDurSend2(nUserIndex,nEnterItemPos,(BYTE)gObj[nUserIndex].pInventory[nEnterItemPos].m_Durability,0);

  005c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  005c6	8b 4d b4	 mov	 ecx, DWORD PTR tv948[ebp]
  005c9	6a 00		 push	 0
  005cb	8b 84 01 c0 11
	00 00		 mov	 eax, DWORD PTR [ecx+eax+4544]
  005d2	8b 4d b0	 mov	 ecx, DWORD PTR _nEnterItemPos$1$[ebp]
  005d5	f3 0f 2c 44 10
	24		 cvttss2si eax, DWORD PTR [eax+edx+36]
  005db	0f b6 c0	 movzx	 eax, al
  005de	50		 push	 eax
  005df	51		 push	 ecx
  005e0	56		 push	 esi
  005e1	e8 00 00 00 00	 call	 ?GCItemDurSend2@@YAXHEEE@Z ; GCItemDurSend2
  005e6	83 c4 10	 add	 esp, 16			; 00000010H
  005e9	e9 82 00 00 00	 jmp	 $LN56@CGEnterPor
$LN34@CGEnterPor:

; 761  : 	}
; 762  : 	else
; 763  : 	{
; 764  : 		if( this->m_ZoneInfo[nDestZoneIndex].m_iPartyNumber != gObj[nUserIndex].PartyNumber )

  005ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  005f3	8b 55 b4	 mov	 edx, DWORD PTR tv948[ebp]
  005f6	8b 4c 39 18	 mov	 ecx, DWORD PTR [ecx+edi+24]
  005fa	3b 8c 02 0c 06
	00 00		 cmp	 ecx, DWORD PTR [edx+eax+1548]
  00601	74 0d		 je	 SHORT $LN43@CGEnterPor
$LN103@CGEnterPor:

; 765  : 		{
; 766  : 			GCServerMsgStringSend(lMsg.Get(MSGGET(13,139)),nUserIndex,1);

  00603	6a 01		 push	 1
  00605	56		 push	 esi
  00606	68 8b 0d 00 00	 push	 3467			; 00000d8bH

; 767  : 			pMsg.btResult = 1;
; 768  : 			this->GCSendDataToUser(nUserIndex,(LPBYTE)&pMsg,sizeof(pMsg));
; 769  : 			return;

  0060b	e9 a3 fd ff ff	 jmp	 $LN101@CGEnterPor
$LN43@CGEnterPor:

; 770  : 		}
; 771  : 
; 772  : 		if( this->m_wCheatMode == 0 && nDestZoneIndex == 0 &&

  00610	66 83 7f 04 00	 cmp	 WORD PTR [edi+4], 0
  00615	75 11		 jne	 SHORT $LN44@CGEnterPor
  00617	85 db		 test	 ebx, ebx
  00619	75 0d		 jne	 SHORT $LN44@CGEnterPor
  0061b	56		 push	 esi
  0061c	53		 push	 ebx
  0061d	8b cf		 mov	 ecx, edi
  0061f	e8 00 00 00 00	 call	 ?IsRegPartyUser@CImperialGuardian@@QAE_NHH@Z ; CImperialGuardian::IsRegPartyUser
  00624	84 c0		 test	 al, al
  00626	74 db		 je	 SHORT $LN103@CGEnterPor
$LN44@CGEnterPor:

; 773  : 			!this->IsRegPartyUser(nDestZoneIndex,nUserIndex) )
; 774  : 		{
; 775  : 			GCServerMsgStringSend(lMsg.Get(MSGGET(13,139)),nUserIndex,1);
; 776  : 			pMsg.btResult = 1;
; 777  : 			this->GCSendDataToUser(nUserIndex,(LPBYTE)&pMsg,sizeof(pMsg));
; 778  : 			return;
; 779  : 		}
; 780  : 
; 781  : 		if( this->GetPlayerCount(nDestZoneIndex) > 5 )

  00628	53		 push	 ebx
  00629	8b cf		 mov	 ecx, edi
  0062b	e8 00 00 00 00	 call	 ?GetPlayerCount@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetPlayerCount
  00630	83 f8 05	 cmp	 eax, 5
  00633	0f 8e 6d fe ff
	ff		 jle	 $LN45@CGEnterPor

; 782  : 		{
; 783  : 			GCServerMsgStringSend(lMsg.Get(MSGGET(13,140)),nUserIndex,1);

  00639	6a 01		 push	 1
  0063b	56		 push	 esi
  0063c	68 8c 0d 00 00	 push	 3468			; 00000d8cH
  00641	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00646	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0064b	50		 push	 eax
  0064c	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 784  : 			pMsg.btResult = 3;

  00651	c6 45 f4 03	 mov	 BYTE PTR _pMsg$[ebp+4], 3

; 785  : 			this->GCSendDataToUser(nUserIndex,(LPBYTE)&pMsg,sizeof(pMsg));
; 786  : 			return;

  00655	e9 6d fd ff ff	 jmp	 $LN104@CGEnterPor
$LN52@CGEnterPor:

; 812  : 				lpObj->pInventory[nEnterItemPos].m_Type == ITEMGET(14,109) )
; 813  : 			{
; 814  : 				gObjInventoryDeleteItem(nUserIndex,nEnterItemPos);

  0065a	51		 push	 ecx
  0065b	56		 push	 esi
  0065c	e8 00 00 00 00	 call	 ?gObjInventoryDeleteItem@@YAEHH@Z ; gObjInventoryDeleteItem

; 815  : 				GCInventoryItemDeleteSend(nUserIndex,nEnterItemPos,1);

  00661	8b 45 b0	 mov	 eax, DWORD PTR _nEnterItemPos$1$[ebp]
  00664	6a 01		 push	 1
  00666	50		 push	 eax
  00667	56		 push	 esi
  00668	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  0066d	83 c4 14	 add	 esp, 20			; 00000014H
$LN56@CGEnterPor:

; 830  : 				}
; 831  : 			}
; 832  : 		}
; 833  : 
; 834  : 		LogAddTD("[IMPERIALGUARDIAN] Enter Zone User -> [AccountID]:%s [NAME]:%s [ZONE]:%d ",

  00670	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00676	8d 73 01	 lea	 esi, DWORD PTR [ebx+1]
  00679	56		 push	 esi
  0067a	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0067d	03 45 b4	 add	 eax, DWORD PTR tv948[ebp]
  00680	50		 push	 eax
  00681	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00684	03 45 b4	 add	 eax, DWORD PTR tv948[ebp]
  00687	50		 push	 eax
  00688	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@OILHLBMJ@?$FLIMPERIALGUARDIAN?$FN?5Enter?5Zone?5Us@
  0068d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00693	83 c4 10	 add	 esp, 16			; 00000010H

; 835  : 			gObj[nUserIndex].AccountID,gObj[nUserIndex].Name,(nDestZoneIndex+1));
; 836  : 		LogAddTD("[IMPERIALGUARDIAN] [%d ZONE USER COUNT] : %d  ",(nDestZoneIndex+1),this->GetPlayerCount(nDestZoneIndex));

  00696	8b cf		 mov	 ecx, edi
  00698	53		 push	 ebx
  00699	e8 00 00 00 00	 call	 ?GetPlayerCount@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetPlayerCount
  0069e	50		 push	 eax
  0069f	56		 push	 esi
  006a0	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@EJIDDFJD@?$FLIMPERIALGUARDIAN?$FN?5?$FL?$CFd?5ZONE?5USER@
  006a5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  006ab	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN47@CGEnterPor:

; 837  : 	}
; 838  : }

  006ae	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006b1	5f		 pop	 edi
  006b2	5e		 pop	 esi
  006b3	33 cd		 xor	 ecx, ebp
  006b5	5b		 pop	 ebx
  006b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006bb	8b e5		 mov	 esp, ebp
  006bd	5d		 pop	 ebp
  006be	c2 08 00	 ret	 8
?CGEnterPortal@CImperialGuardian@@QAEXHH@Z ENDP		; CImperialGuardian::CGEnterPortal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?SetZoneState@CImperialGuardian@@QAE_NHH@Z
_TEXT	SEGMENT
_nZoneIndex$ = 8					; size = 4
_nState$ = 12						; size = 4
?SetZoneState@CImperialGuardian@@QAE_NHH@Z PROC		; CImperialGuardian::SetZoneState, COMDAT
; _this$ = ecx

; 544  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 545  : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _nZoneIndex$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	78 22		 js	 SHORT $LN7@SetZoneSta
  0000d	33 c0		 xor	 eax, eax
  0000f	83 fa 03	 cmp	 edx, 3
  00012	0f 9e c0	 setle	 al
  00015	85 c0		 test	 eax, eax
  00017	74 16		 je	 SHORT $LN7@SetZoneSta

; 547  : 
; 548  : 	if( nState > IMPERIAL_STATE_MISSIONCLEAR+1 )

  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _nState$[ebp]
  0001c	83 f9 08	 cmp	 ecx, 8
  0001f	7f 0e		 jg	 SHORT $LN7@SetZoneSta

; 549  : 		return false;
; 550  : 
; 551  : 	this->m_ZoneInfo[nZoneIndex].m_iState = nState;

  00021	6b c2 64	 imul	 eax, edx, 100
  00024	89 4c 30 14	 mov	 DWORD PTR [eax+esi+20], ecx

; 552  : 	return true;

  00028	b0 01		 mov	 al, 1
  0002a	5e		 pop	 esi

; 553  : }

  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
$LN7@SetZoneSta:

; 546  : 		return false;

  0002f	32 c0		 xor	 al, al
  00031	5e		 pop	 esi

; 553  : }

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
?SetZoneState@CImperialGuardian@@QAE_NHH@Z ENDP		; CImperialGuardian::SetZoneState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?GetZoneState@CImperialGuardian@@QAEHH@Z
_TEXT	SEGMENT
_nZoneIndex$ = 8					; size = 4
?GetZoneState@CImperialGuardian@@QAEHH@Z PROC		; CImperialGuardian::GetZoneState, COMDAT
; _this$ = ecx

; 536  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 537  : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _nZoneIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 17		 js	 SHORT $LN6@GetZoneSta
  0000a	33 c0		 xor	 eax, eax
  0000c	83 fa 03	 cmp	 edx, 3
  0000f	0f 9e c0	 setle	 al
  00012	85 c0		 test	 eax, eax
  00014	74 0b		 je	 SHORT $LN6@GetZoneSta

; 539  : 
; 540  : return this->m_ZoneInfo[nZoneIndex].m_iState;

  00016	6b c2 64	 imul	 eax, edx, 100
  00019	8b 44 08 14	 mov	 eax, DWORD PTR [eax+ecx+20]

; 541  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN6@GetZoneSta:

; 538  : 		return -1;

  00021	83 c8 ff	 or	 eax, -1

; 541  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?GetZoneState@CImperialGuardian@@QAEHH@Z ENDP		; CImperialGuardian::GetZoneState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?CheckValidUser@CImperialGuardian@@QAE_NH@Z
_TEXT	SEGMENT
_nUserNumber$ = 8					; size = 4
?CheckValidUser@CImperialGuardian@@QAE_NH@Z PROC	; CImperialGuardian::CheckValidUser, COMDAT
; _this$ = ecx

; 529  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 530  : 	if( this->GetCurrentZoneIndex(nUserNumber) > -1 )

  00003	ff 75 08	 push	 DWORD PTR _nUserNumber$[ebp]
  00006	e8 00 00 00 00	 call	 ?GetCurrentZoneIndex@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetCurrentZoneIndex
  0000b	83 f8 ff	 cmp	 eax, -1
  0000e	0f 9f c0	 setg	 al

; 531  : 		return true;
; 532  : return false;
; 533  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?CheckValidUser@CImperialGuardian@@QAE_NH@Z ENDP	; CImperialGuardian::CheckValidUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?KickInvalidUser@CImperialGuardian@@QAEXXZ
_TEXT	SEGMENT
?KickInvalidUser@CImperialGuardian@@QAEXXZ PROC		; CImperialGuardian::KickInvalidUser, COMDAT
; _this$ = ecx

; 483  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b d9		 mov	 ebx, ecx

; 484  : 	for(int iCount = OBJ_STARTUSERINDEX; iCount < OBJMAX; iCount++)

  00005	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  0000a	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  0000f	90		 npad	 1
$LL4@KickInvali:

; 485  : 	{
; 486  : 		if( (gObj[iCount].Connected == PLAYER_PLAYING ||
; 487  : 			gObj[iCount].Connected == 4 ) &&
; 488  : 			gObj[iCount].Type == OBJ_USER &&

  00010	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00016	03 d6		 add	 edx, esi
  00018	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001b	83 f8 03	 cmp	 eax, 3
  0001e	74 09		 je	 SHORT $LN7@KickInvali
  00020	83 f8 04	 cmp	 eax, 4
  00023	0f 85 d2 00 00
	00		 jne	 $LN5@KickInvali
$LN7@KickInvali:
  00029	80 7a 50 01	 cmp	 BYTE PTR [edx+80], 1
  0002d	0f 85 c8 00 00
	00		 jne	 $LN5@KickInvali
  00033	8a 82 23 01 00
	00		 mov	 al, BYTE PTR [edx+291]
  00039	3c 45		 cmp	 al, 69			; 00000045H
  0003b	0f 82 ba 00 00
	00		 jb	 $LN5@KickInvali
  00041	b1 48		 mov	 cl, 72			; 00000048H
  00043	3a c8		 cmp	 cl, al
  00045	1b c0		 sbb	 eax, eax
  00047	83 c0 01	 add	 eax, 1
  0004a	0f 84 ab 00 00
	00		 je	 $LN5@KickInvali

; 489  : 			IF_MAP_RANGE(gObj[iCount].MapNumber) )
; 490  : 		{
; 491  : 			if( (gObj[iCount].Authority&2) != 2 )

  00050	f6 82 bc 01 00
	00 02		 test	 BYTE PTR [edx+444], 2
  00057	0f 85 b2 00 00
	00		 jne	 $LN2@KickInvali

; 492  : 			{
; 493  : 				if( !this->CheckValidUser(iCount) )

  0005d	57		 push	 edi
  0005e	8b cb		 mov	 ecx, ebx
  00060	e8 00 00 00 00	 call	 ?CheckValidUser@CImperialGuardian@@QAE_NH@Z ; CImperialGuardian::CheckValidUser
  00065	84 c0		 test	 al, al
  00067	75 52		 jne	 SHORT $LN9@KickInvali

; 494  : 				{
; 495  : 					if( !gObj[iCount].RegenOk &&
; 496  : 						gObj[iCount].m_State == 2 &&

  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006e	80 bc 06 8b 05
	00 00 00	 cmp	 BYTE PTR [esi+eax+1419], 0
  00076	0f 85 93 00 00
	00		 jne	 $LN2@KickInvali
  0007c	83 bc 06 d0 01
	00 00 02	 cmp	 DWORD PTR [esi+eax+464], 2
  00084	0f 85 85 00 00
	00		 jne	 $LN2@KickInvali
  0008a	80 7c 06 51 01	 cmp	 BYTE PTR [esi+eax+81], 1
  0008f	75 7e		 jne	 SHORT $LN2@KickInvali

; 497  : 						gObj[iCount].Live == TRUE )
; 498  : 					{
; 499  : 						gObjMoveGate(iCount,22);

  00091	6a 16		 push	 22			; 00000016H
  00093	57		 push	 edi
  00094	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate

; 500  : 						LogAddTD("[IMPERIALGUARDIAN][ Invalid User ] [%s][%s] ",

  00099	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009f	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  000a2	03 c6		 add	 eax, esi
  000a4	50		 push	 eax
  000a5	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  000a8	03 c6		 add	 eax, esi
  000aa	50		 push	 eax
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@EBJLDAME@?$FLIMPERIALGUARDIAN?$FN?$FL?5Invalid?5User@
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000b6	83 c4 14	 add	 esp, 20			; 00000014H

; 501  : 							gObj[iCount].AccountID,gObj[iCount].Name);
; 502  : 					}
; 503  : 				}
; 504  : 				else

  000b9	eb 54		 jmp	 SHORT $LN2@KickInvali
$LN9@KickInvali:

; 505  : 				{
; 506  : 					if( !this->m_wCheatMode )

  000bb	66 83 7b 04 00	 cmp	 WORD PTR [ebx+4], 0
  000c0	75 4d		 jne	 SHORT $LN2@KickInvali

; 507  : 					{
; 508  : 						if( gObj[iCount].PartyNumber < 0 )

  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c7	83 bc 06 0c 06
	00 00 00	 cmp	 DWORD PTR [esi+eax+1548], 0
  000cf	7d 3e		 jge	 SHORT $LN2@KickInvali

; 509  : 						{
; 510  : 							gObjMoveGate(iCount,22);

  000d1	6a 16		 push	 22			; 00000016H
  000d3	57		 push	 edi
  000d4	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate

; 511  : 							LogAddTD("[IMPERIALGUARDIAN][ Invalid User ] User is not a party [%s][%s] ",

  000d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000df	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  000e2	03 c6		 add	 eax, esi
  000e4	50		 push	 eax
  000e5	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  000e8	03 c6		 add	 eax, esi
  000ea	50		 push	 eax
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@JMFDLKOB@?$FLIMPERIALGUARDIAN?$FN?$FL?5Invalid?5User@
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000f6	83 c4 14	 add	 esp, 20			; 00000014H

; 512  : 								gObj[iCount].AccountID,gObj[iCount].Name);
; 513  : 						}
; 514  : 					}
; 515  : 				}
; 516  : 			}
; 517  : 		}
; 518  : 		else

  000f9	eb 14		 jmp	 SHORT $LN2@KickInvali
$LN5@KickInvali:

; 519  : 		{
; 520  : 			if( this->CheckValidUser(iCount) )

  000fb	57		 push	 edi
  000fc	8b cb		 mov	 ecx, ebx
  000fe	e8 00 00 00 00	 call	 ?CheckValidUser@CImperialGuardian@@QAE_NH@Z ; CImperialGuardian::CheckValidUser
  00103	84 c0		 test	 al, al
  00105	74 08		 je	 SHORT $LN2@KickInvali

; 521  : 			{
; 522  : 				this->RemoveUserInAllZone(iCount);

  00107	57		 push	 edi
  00108	8b cb		 mov	 ecx, ebx
  0010a	e8 00 00 00 00	 call	 ?RemoveUserInAllZone@CImperialGuardian@@QAEXH@Z ; CImperialGuardian::RemoveUserInAllZone
$LN2@KickInvali:

; 484  : 	for(int iCount = OBJ_STARTUSERINDEX; iCount < OBJMAX; iCount++)

  0010f	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00115	47		 inc	 edi
  00116	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  0011c	0f 8c ee fe ff
	ff		 jl	 $LL4@KickInvali

; 523  : 			}
; 524  : 		}
; 525  : 	}
; 526  : }

  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx
  00125	c3		 ret	 0
?KickInvalidUser@CImperialGuardian@@QAEXXZ ENDP		; CImperialGuardian::KickInvalidUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?IsEmptyZone@CImperialGuardian@@QAE_NH@Z
_TEXT	SEGMENT
_nZoneIndex$ = 8					; size = 4
?IsEmptyZone@CImperialGuardian@@QAE_NH@Z PROC		; CImperialGuardian::IsEmptyZone, COMDAT
; _this$ = ecx

; 464  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 465  : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _nZoneIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 25		 js	 SHORT $LN8@IsEmptyZon
  0000a	33 c0		 xor	 eax, eax
  0000c	83 fa 03	 cmp	 edx, 3
  0000f	0f 9e c0	 setle	 al
  00012	85 c0		 test	 eax, eax
  00014	74 19		 je	 SHORT $LN8@IsEmptyZon

; 469  : 	}
; 470  : 
; 471  : 	if( this->m_ZoneInfo[nZoneIndex].m_iState == IMPERIAL_STATE_READY )

  00016	6b c2 64	 imul	 eax, edx, 100
  00019	83 7c 08 14 00	 cmp	 DWORD PTR [eax+ecx+20], 0
  0001e	75 27		 jne	 SHORT $LN3@IsEmptyZon

; 472  : 	{
; 473  : 		if( !this->GetPlayerCount(nZoneIndex) )

  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ?GetPlayerCount@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetPlayerCount
  00026	85 c0		 test	 eax, eax
  00028	0f 94 c0	 sete	 al

; 474  : 		{
; 475  : 			return true;
; 476  : 		}
; 477  : 		return false;
; 478  : 	}
; 479  : return false;
; 480  : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
$LN8@IsEmptyZon:

; 466  : 	{
; 467  : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  0002f	68 d3 01 00 00	 push	 467			; 000001d3H
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@IsEmptyZon:

; 468  : 		return false;

  00047	32 c0		 xor	 al, al

; 474  : 		{
; 475  : 			return true;
; 476  : 		}
; 477  : 		return false;
; 478  : 	}
; 479  : return false;
; 480  : }

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
?IsEmptyZone@CImperialGuardian@@QAE_NH@Z ENDP		; CImperialGuardian::IsEmptyZone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?ProcMissionClear@CImperialGuardian@@QAEXH@Z
_TEXT	SEGMENT
_vtTemp$ = -28						; size = 12
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nZoneIndex$ = 8					; size = 4
?ProcMissionClear@CImperialGuardian@@QAEXH@Z PROC	; CImperialGuardian::ProcMissionClear, COMDAT
; _this$ = ecx

; 431  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ProcMissionClear@CImperialGuardian@@QAEXH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx

; 432  : 	/*if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )
; 433  : 	{
; 434  : 		LogAdd("error : %s %d",__FILE__,__LINE__);
; 435  : 		return;
; 436  : 	}*/
; 437  : 
; 438  : 	this->GCNotifyAllZoneClear(nZoneIndex);

  0002d	8b 75 08	 mov	 esi, DWORD PTR _nZoneIndex$[ebp]
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 ?GCNotifyAllZoneClear@CImperialGuardian@@QAE_NH@Z ; CImperialGuardian::GCNotifyAllZoneClear

; 440  : 	std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  00036	6b c6 64	 imul	 eax, esi, 100
  00039	8d 4d e4	 lea	 ecx, DWORD PTR _vtTemp$[ebp]
  0003c	83 c3 3c	 add	 ebx, 60			; 0000003cH
  0003f	03 c3		 add	 eax, ebx
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  00047	8b 5d e4	 mov	 ebx, DWORD PTR _vtTemp$[ebp]
  0004a	8b f3		 mov	 esi, ebx

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0004c	8b 7d e8	 mov	 edi, DWORD PTR _vtTemp$[ebp+4]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 440  : 	std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  0004f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00056	3b df		 cmp	 ebx, edi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 443  : 	for( ; it != vtTemp.end(); ++it)

  00058	74 4b		 je	 SHORT $LN3@ProcMissio
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL4@ProcMissio:

; 444  : 	{
; 445  : 		int nResult = *it;
; 446  : 		
; 447  : 		if( gObj[nResult].Connected > 0 && IF_MAP_RANGE(gObj[nResult].MapNumber) )

  00060	69 0e 40 27 00
	00		 imul	 ecx, DWORD PTR [esi], 10048
  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006b	03 c8		 add	 ecx, eax
  0006d	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00071	7e 2b		 jle	 SHORT $LN2@ProcMissio
  00073	8a 81 23 01 00
	00		 mov	 al, BYTE PTR [ecx+291]
  00079	3c 45		 cmp	 al, 69			; 00000045H
  0007b	72 21		 jb	 SHORT $LN2@ProcMissio
  0007d	b2 48		 mov	 dl, 72			; 00000048H
  0007f	3a d0		 cmp	 dl, al
  00081	1b c0		 sbb	 eax, eax
  00083	83 c0 01	 add	 eax, 1
  00086	74 16		 je	 SHORT $LN2@ProcMissio

; 448  : 		{
; 449  : 			LogAddTD("[IMPERIALGUARDIAN] MISSION CLEAR USER ->[AccountID]:%s [Name]:%s ",

  00088	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0008b	50		 push	 eax
  0008c	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0008f	50		 push	 eax
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@LFDAMNEF@?$FLIMPERIALGUARDIAN?$FN?5MISSION?5CLEAR@
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@ProcMissio:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  0009e	83 c6 04	 add	 esi, 4

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000a1	3b f7		 cmp	 esi, edi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 443  : 	for( ; it != vtTemp.end(); ++it)

  000a3	75 bb		 jne	 SHORT $LL4@ProcMissio
$LN3@ProcMissio:

; 450  : 				gObj[nResult].AccountID,gObj[nResult].Name);
; 451  : 
; 452  : 			if( nZoneIndex == 3 && this->m_bPromotion == TRUE )
; 453  : 			{
; 454  : 				// Event server send info ... 
; 455  : 				//GEReqRegIGMissionClear(nResult);
; 456  : 			}
; 457  : 		}
; 458  : 	}
; 459  : 
; 460  : 	this->SetZoneState(nZoneIndex,IMPERIAL_STATE_BEGINLOOTTIME);

  000a5	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000a8	6a 03		 push	 3
  000aa	ff 75 08	 push	 DWORD PTR _nZoneIndex$[ebp]
  000ad	e8 00 00 00 00	 call	 ?SetZoneState@CImperialGuardian@@QAE_NHH@Z ; CImperialGuardian::SetZoneState
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  000b2	85 db		 test	 ebx, ebx
  000b4	74 55		 je	 SHORT $LN82@ProcMissio

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  000b6	8b 45 ec	 mov	 eax, DWORD PTR _vtTemp$[ebp+8]
  000b9	2b c3		 sub	 eax, ebx
  000bb	c1 f8 02	 sar	 eax, 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  000be	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  000c3	76 05		 jbe	 SHORT $LN149@ProcMissio
  000c5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN194@ProcMissio:
$LN149@ProcMissio:

; 101  : 	const size_t _User_size = _Count * _Sz;

  000ca	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  000cd	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000d2	72 2e		 jb	 SHORT $LN150@ProcMissio

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  000d4	f6 c3 1f	 test	 bl, 31			; 0000001fH
  000d7	74 05		 je	 SHORT $LN151@ProcMissio
  000d9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN195@ProcMissio:
$LN151@ProcMissio:

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  000de	8b 43 fc	 mov	 eax, DWORD PTR [ebx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  000e1	3b c3		 cmp	 eax, ebx
  000e3	72 05		 jb	 SHORT $LN152@ProcMissio
  000e5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN196@ProcMissio:
$LN152@ProcMissio:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  000ea	2b d8		 sub	 ebx, eax
  000ec	83 fb 04	 cmp	 ebx, 4
  000ef	73 05		 jae	 SHORT $LN153@ProcMissio
  000f1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN197@ProcMissio:
$LN153@ProcMissio:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  000f6	83 fb 23	 cmp	 ebx, 35			; 00000023H
  000f9	76 05		 jbe	 SHORT $LN154@ProcMissio
  000fb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN198@ProcMissio:
$LN154@ProcMissio:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00100	8b d8		 mov	 ebx, eax
$LN150@ProcMissio:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00102	53		 push	 ebx
  00103	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00108	83 c4 04	 add	 esp, 4
$LN82@ProcMissio:
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 461  : }

  0010b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00115	59		 pop	 ecx
  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	5b		 pop	 ebx
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c2 04 00	 ret	 4
$LN193@ProcMissio:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcMissionClear@CImperialGuardian@@QAEXH@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _vtTemp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$?ProcMissionClear@CImperialGuardian@@QAEXH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ProcMissionClear@CImperialGuardian@@QAEXH@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ProcMissionClear@CImperialGuardian@@QAEXH@Z ENDP	; CImperialGuardian::ProcMissionClear
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?ProcMissionFail@CImperialGuardian@@QAEXH@Z
_TEXT	SEGMENT
_nZoneIndex$ = 8					; size = 4
?ProcMissionFail@CImperialGuardian@@QAEXH@Z PROC	; CImperialGuardian::ProcMissionFail, COMDAT
; _this$ = ecx

; 420  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 421  : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  00004	8b 75 08	 mov	 esi, DWORD PTR _nZoneIndex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	78 34		 js	 SHORT $LN6@ProcMissio
  0000e	33 c0		 xor	 eax, eax
  00010	83 fe 03	 cmp	 esi, 3
  00013	0f 9e c0	 setle	 al
  00016	85 c0		 test	 eax, eax
  00018	74 28		 je	 SHORT $LN6@ProcMissio

; 424  : 		return;
; 425  : 	}
; 426  : 	this->GCMissionFail(nZoneIndex);

  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?GCMissionFail@CImperialGuardian@@QAEXH@Z ; CImperialGuardian::GCMissionFail

; 427  : 	LogAddTD("[IMPERIALGUARDIAN] MISSION FAIL -> [ZONE]:%d ",(nZoneIndex+1));

  00020	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@HOFCCJKC@?$FLIMPERIALGUARDIAN?$FN?5MISSION?5FAIL?5@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0002f	83 c4 08	 add	 esp, 8

; 428  : 	this->SetZoneState(nZoneIndex,IMPERIAL_STATE_KICKALL);

  00032	8b cf		 mov	 ecx, edi
  00034	6a 06		 push	 6
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 ?SetZoneState@CImperialGuardian@@QAE_NHH@Z ; CImperialGuardian::SetZoneState
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 429  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@ProcMissio:

; 422  : 	{
; 423  : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  00042	68 a7 01 00 00	 push	 423			; 000001a7H
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi

; 429  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?ProcMissionFail@CImperialGuardian@@QAEXH@Z ENDP	; CImperialGuardian::ProcMissionFail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?ProcAllKick@CImperialGuardian@@QAEXH@Z
_TEXT	SEGMENT
_vtTemp$ = -28						; size = 12
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
tv555 = 8						; size = 4
_nZoneIndex$ = 8					; size = 4
?ProcAllKick@CImperialGuardian@@QAEXH@Z PROC		; CImperialGuardian::ProcAllKick, COMDAT
; _this$ = ecx

; 392  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ProcAllKick@CImperialGuardian@@QAEXH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 393  : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  0002b	8b 7d 08	 mov	 edi, DWORD PTR _nZoneIndex$[ebp]
  0002e	85 ff		 test	 edi, edi
  00030	0f 88 1b 01 00
	00		 js	 $LN192@ProcAllKic
  00036	33 c0		 xor	 eax, eax
  00038	83 ff 03	 cmp	 edi, 3
  0003b	0f 9e c0	 setle	 al
  0003e	85 c0		 test	 eax, eax
  00040	0f 84 0b 01 00
	00		 je	 $LN192@ProcAllKic

; 399  : 	std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  00046	6b c7 64	 imul	 eax, edi, 100
  00049	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0004c	03 c1		 add	 eax, ecx
  0004e	8d 4d e4	 lea	 ecx, DWORD PTR _vtTemp$[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  00057	8b 5d e4	 mov	 ebx, DWORD PTR _vtTemp$[ebp]
  0005a	8b f3		 mov	 esi, ebx
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 399  : 	std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  0005c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00063	3b 5d e8	 cmp	 ebx, DWORD PTR _vtTemp$[ebp+4]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 402  : 	for( ; it != vtTemp.end(); ++it)

  00066	74 52		 je	 SHORT $LN3@ProcAllKic
  00068	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@ProcAllKic:

; 403  : 	{
; 404  : 		int nResult = *it;

  00070	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 405  : 		
; 406  : 		if( gObj[nResult].Connected > 0 )

  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00077	69 d1 40 27 00
	00		 imul	 edx, ecx, 10048
  0007d	89 55 08	 mov	 DWORD PTR tv555[ebp], edx
  00080	83 7c 02 04 00	 cmp	 DWORD PTR [edx+eax+4], 0
  00085	7e 2b		 jle	 SHORT $LN2@ProcAllKic

; 407  : 		{
; 408  : 			gObjMoveGate(nResult,22);

  00087	6a 16		 push	 22			; 00000016H
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate

; 409  : 			LogAddTD("[IMPERIALGUARDIAN] Leave Player Zone -> [ZONE]:%d [AccountID]:%s [Name]:%s ",

  0008f	8b 4d 08	 mov	 ecx, DWORD PTR tv555[ebp]
  00092	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00098	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0009b	50		 push	 eax
  0009c	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0009f	50		 push	 eax
  000a0	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  000a3	50		 push	 eax
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@KDFOBECC@?$FLIMPERIALGUARDIAN?$FN?5Leave?5Player?5@
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000af	83 c4 18	 add	 esp, 24			; 00000018H
$LN2@ProcAllKic:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  000b2	83 c6 04	 add	 esi, 4

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000b5	3b 75 e8	 cmp	 esi, DWORD PTR _vtTemp$[ebp+4]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 402  : 	for( ; it != vtTemp.end(); ++it)

  000b8	75 b6		 jne	 SHORT $LL4@ProcAllKic
$LN3@ProcAllKic:

; 410  : 				nZoneIndex+1,gObj[nResult].AccountID,gObj[nResult].Name);
; 411  : 		}
; 412  : 	}
; 413  : 
; 414  : 	this->InitZone(nZoneIndex);

  000ba	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000bd	57		 push	 edi
  000be	e8 00 00 00 00	 call	 ?InitZone@CImperialGuardian@@QAEXH@Z ; CImperialGuardian::InitZone

; 415  : 	this->SetZoneState(nZoneIndex,IMPERIAL_STATE_READY);

  000c3	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000c6	6a 00		 push	 0
  000c8	57		 push	 edi
  000c9	e8 00 00 00 00	 call	 ?SetZoneState@CImperialGuardian@@QAE_NHH@Z ; CImperialGuardian::SetZoneState

; 416  : 
; 417  : 	LogAddTD("[IMPERIALGUARDIAN] ALL KICK USER -> [ZONE]:%d ",(nZoneIndex+1));

  000ce	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  000d1	50		 push	 eax
  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@HMEEDDK@?$FLIMPERIALGUARDIAN?$FN?5ALL?5KICK?5USER@
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000dd	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  000e0	85 db		 test	 ebx, ebx
  000e2	0f 84 81 00 00
	00		 je	 $LN82@ProcAllKic

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  000e8	8b 45 ec	 mov	 eax, DWORD PTR _vtTemp$[ebp+8]
  000eb	2b c3		 sub	 eax, ebx
  000ed	c1 f8 02	 sar	 eax, 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  000f0	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  000f5	76 05		 jbe	 SHORT $LN149@ProcAllKic
  000f7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN195@ProcAllKic:
$LN149@ProcAllKic:

; 101  : 	const size_t _User_size = _Count * _Sz;

  000fc	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  000ff	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00104	72 2e		 jb	 SHORT $LN150@ProcAllKic

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00106	f6 c3 1f	 test	 bl, 31			; 0000001fH
  00109	74 05		 je	 SHORT $LN151@ProcAllKic
  0010b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN196@ProcAllKic:
$LN151@ProcAllKic:

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00110	8b 43 fc	 mov	 eax, DWORD PTR [ebx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00113	3b c3		 cmp	 eax, ebx
  00115	72 05		 jb	 SHORT $LN152@ProcAllKic
  00117	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN197@ProcAllKic:
$LN152@ProcAllKic:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0011c	2b d8		 sub	 ebx, eax
  0011e	83 fb 04	 cmp	 ebx, 4
  00121	73 05		 jae	 SHORT $LN153@ProcAllKic
  00123	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN198@ProcAllKic:
$LN153@ProcAllKic:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00128	83 fb 23	 cmp	 ebx, 35			; 00000023H
  0012b	76 05		 jbe	 SHORT $LN154@ProcAllKic
  0012d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN199@ProcAllKic:
$LN154@ProcAllKic:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00132	8b d8		 mov	 ebx, eax
$LN150@ProcAllKic:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00134	53		 push	 ebx
  00135	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0013a	83 c4 04	 add	 esp, 4
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 418  : }

  0013d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00140	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00147	59		 pop	 ecx
  00148	5f		 pop	 edi
  00149	5e		 pop	 esi
  0014a	5b		 pop	 ebx
  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c2 04 00	 ret	 4
$LN192@ProcAllKic:

; 394  : 	{
; 395  : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  00151	68 8b 01 00 00	 push	 395			; 0000018bH
  00156	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  0015b	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00166	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN82@ProcAllKic:

; 418  : }

  00169	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0016c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00173	59		 pop	 ecx
  00174	5f		 pop	 edi
  00175	5e		 pop	 esi
  00176	5b		 pop	 ebx
  00177	8b e5		 mov	 esp, ebp
  00179	5d		 pop	 ebp
  0017a	c2 04 00	 ret	 4
$LN194@ProcAllKic:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcAllKick@CImperialGuardian@@QAEXH@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _vtTemp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$?ProcAllKick@CImperialGuardian@@QAEXH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ProcAllKick@CImperialGuardian@@QAEXH@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ProcAllKick@CImperialGuardian@@QAEXH@Z ENDP		; CImperialGuardian::ProcAllKick
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?ProcAllWarpNextZone@CImperialGuardian@@QAEXH@Z
_TEXT	SEGMENT
_vtTemp$2 = -24						; size = 12
_vtTemp$3 = -24						; size = 12
__$EHRec$ = -12						; size = 12
_nZoneIndex$ = 8					; size = 4
?ProcAllWarpNextZone@CImperialGuardian@@QAEXH@Z PROC	; CImperialGuardian::ProcAllWarpNextZone, COMDAT
; _this$ = ecx

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ProcAllWarpNextZone@CImperialGuardian@@QAEXH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 359  : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  00028	8b 55 08	 mov	 edx, DWORD PTR _nZoneIndex$[ebp]
  0002b	85 d2		 test	 edx, edx
  0002d	0f 88 c7 00 00
	00		 js	 $LN345@ProcAllWar
  00033	33 c0		 xor	 eax, eax
  00035	83 fa 03	 cmp	 edx, 3
  00038	0f 9e c0	 setle	 al
  0003b	85 c0		 test	 eax, eax
  0003d	0f 84 b7 00 00
	00		 je	 $LN345@ProcAllWar

; 362  : 		return;
; 363  : 	}
; 364  : 
; 365  : 	int nPartyNumber = this->m_ZoneInfo[nZoneIndex].m_iPartyNumber;
; 366  : 	int nPartyCount = gParty.m_PartyS[nPartyNumber].Count;
; 367  : 
; 368  : 	if( (nZoneIndex+1) >= IMPERIAL_GUARDIAN_MAXZONE )

  00043	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 370  : 		std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  00046	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00049	83 f8 04	 cmp	 eax, 4
  0004c	7c 63		 jl	 SHORT $LN9@ProcAllWar
  0004e	6b c2 64	 imul	 eax, edx, 100
  00051	03 c1		 add	 eax, ecx
  00053	8d 4d e8	 lea	 ecx, DWORD PTR _vtTemp$3[ebp]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  0005c	8b 5d e8	 mov	 ebx, DWORD PTR _vtTemp$3[ebp]
  0005f	8b f3		 mov	 esi, ebx

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00061	8b 7d ec	 mov	 edi, DWORD PTR _vtTemp$3[ebp+4]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 370  : 		std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0006b	3b df		 cmp	 ebx, edi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 372  : 		for( ; it != vtTemp.end(); ++it)

  0006d	74 14		 je	 SHORT $LN3@ProcAllWar
  0006f	90		 npad	 1
$LL4@ProcAllWar:

; 375  : 			gObjMoveGate(nResult,22);

  00070	6a 16		 push	 22			; 00000016H
  00072	ff 36		 push	 DWORD PTR [esi]
  00074	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  00079	83 c6 04	 add	 esi, 4
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 375  : 			gObjMoveGate(nResult,22);

  0007c	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0007f	3b f7		 cmp	 esi, edi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 372  : 		for( ; it != vtTemp.end(); ++it)

  00081	75 ed		 jne	 SHORT $LL4@ProcAllWar
$LN3@ProcAllWar:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00083	85 db		 test	 ebx, ebx
  00085	0f 84 87 00 00
	00		 je	 $LN248@ProcAllWar

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0008b	8b 45 f0	 mov	 eax, DWORD PTR _vtTemp$3[ebp+8]
  0008e	8d 4d e8	 lea	 ecx, DWORD PTR _vtTemp$3[ebp]
  00091	2b c3		 sub	 eax, ebx
  00093	c1 f8 02	 sar	 eax, 2
  00096	50		 push	 eax
  00097	53		 push	 ebx
  00098	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 390  : }

  0009d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a7	59		 pop	 ecx
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
$LN9@ProcAllWar:

; 380  : 		std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  000b1	6b c2 64	 imul	 eax, edx, 100
  000b4	03 c1		 add	 eax, ecx
  000b6	8d 4d e8	 lea	 ecx, DWORD PTR _vtTemp$2[ebp]
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  000bf	8b 5d e8	 mov	 ebx, DWORD PTR _vtTemp$2[ebp]
  000c2	8b f3		 mov	 esi, ebx

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000c4	8b 7d ec	 mov	 edi, DWORD PTR _vtTemp$2[ebp+4]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 380  : 		std::vector<int> vtTemp = this->m_ZoneInfo[nZoneIndex].m_vtUserIndex;

  000c7	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000ce	3b df		 cmp	 ebx, edi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 382  : 		for( ; it != vtTemp.end(); ++it)

  000d0	74 b1		 je	 SHORT $LN3@ProcAllWar
$LL7@ProcAllWar:

; 383  : 		{
; 384  : 			int nResult = *it;

  000d2	8b 16		 mov	 edx, DWORD PTR [esi]

; 385  : 
; 386  : 			if( gObj[nResult].Connected > 0 )

  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d9	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  000df	83 7c 01 04 00	 cmp	 DWORD PTR [ecx+eax+4], 0
  000e4	7e 0b		 jle	 SHORT $LN5@ProcAllWar

; 387  : 				gObjMoveGate(nResult,22);

  000e6	6a 16		 push	 22			; 00000016H
  000e8	52		 push	 edx
  000e9	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  000ee	83 c4 08	 add	 esp, 8
$LN5@ProcAllWar:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  000f1	83 c6 04	 add	 esi, 4

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000f4	3b f7		 cmp	 esi, edi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 382  : 		for( ; it != vtTemp.end(); ++it)

  000f6	75 da		 jne	 SHORT $LL7@ProcAllWar
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  000f8	eb 89		 jmp	 SHORT $LN3@ProcAllWar
$LN345@ProcAllWar:
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 361  : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  000fa	68 69 01 00 00	 push	 361			; 00000169H
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0010f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN248@ProcAllWar:

; 390  : }

  00112	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00115	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011c	59		 pop	 ecx
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcAllWarpNextZone@CImperialGuardian@@QAEXH@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _vtTemp$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$?ProcAllWarpNextZone@CImperialGuardian@@QAEXH@Z$1:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR _vtTemp$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$?ProcAllWarpNextZone@CImperialGuardian@@QAEXH@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ProcAllWarpNextZone@CImperialGuardian@@QAEXH@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ProcAllWarpNextZone@CImperialGuardian@@QAEXH@Z ENDP	; CImperialGuardian::ProcAllWarpNextZone
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?ProcBeginWaitPlayer@CImperialGuardian@@QAEXH@Z
_TEXT	SEGMENT
_szText$1 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_nZoneIndex$ = 8					; size = 4
?ProcBeginWaitPlayer@CImperialGuardian@@QAEXH@Z PROC	; CImperialGuardian::ProcBeginWaitPlayer, COMDAT
; _this$ = ecx

; 311  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _nZoneIndex$[ebp]
  00018	8b d9		 mov	 ebx, ecx

; 312  : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  0001a	85 ff		 test	 edi, edi
  0001c	0f 88 10 01 00
	00		 js	 $LN12@ProcBeginW
  00022	33 c0		 xor	 eax, eax
  00024	83 ff 03	 cmp	 edi, 3
  00027	0f 9e c0	 setle	 al
  0002a	85 c0		 test	 eax, eax
  0002c	0f 84 00 01 00
	00		 je	 $LN12@ProcBeginW

; 315  : 		return;
; 316  : 	}
; 317  : 
; 318  : 	if( !this->m_ZoneInfo[nZoneIndex].m_bInitWaitPlayer )

  00032	56		 push	 esi
  00033	6b f7 64	 imul	 esi, edi, 100
  00036	03 f3		 add	 esi, ebx
  00038	80 7e 1f 00	 cmp	 BYTE PTR [esi+31], 0
  0003c	0f 85 92 00 00
	00		 jne	 $LN3@ProcBeginW

; 319  : 	{
; 320  : 		this->m_ZoneInfo[nZoneIndex].m_dwTICK_COUNT1 = GetTickCount();

  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00048	89 46 60	 mov	 DWORD PTR [esi+96], eax

; 321  : 		this->m_ZoneInfo[nZoneIndex].m_bInitWaitPlayer = TRUE;
; 322  : 
; 323  : 		LogAddTD("[IMPERIALGUARDIAN] BEGIN WAITPLAYER -> [ZONE]:%d ",(nZoneIndex+1));

  0004b	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0004e	50		 push	 eax
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@BDFBOBIA@?$FLIMPERIALGUARDIAN?$FN?5BEGIN?5WAITPLA@
  00054	c6 46 1f 01	 mov	 BYTE PTR [esi+31], 1
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0005e	83 c4 08	 add	 esp, 8

; 324  : 
; 325  : 		this->GCNotifyRemainTickCount(nZoneIndex,1,this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC3);

  00061	8b cb		 mov	 ecx, ebx
  00063	ff 76 5c	 push	 DWORD PTR [esi+92]
  00066	6a 01		 push	 1
  00068	57		 push	 edi
  00069	e8 00 00 00 00	 call	 ?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z ; CImperialGuardian::GCNotifyRemainTickCount

; 326  : 		int nRemainMin = this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC3/60000;

  0006e	b8 73 b2 e7 45	 mov	 eax, 1172812403		; 45e7b273H
  00073	f7 66 5c	 mul	 DWORD PTR [esi+92]
  00076	68 00 01 00 00	 push	 256			; 00000100H
  0007b	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  00081	8b f2		 mov	 esi, edx
  00083	6a 00		 push	 0
  00085	50		 push	 eax
  00086	c1 ee 0e	 shr	 esi, 14			; 0000000eH
  00089	e8 00 00 00 00	 call	 _memset
  0008e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 327  : 
; 328  : 		char szText[256] = {0};
; 329  : 		wsprintf(szText,lMsg.Get(MSGGET(13,106)),nRemainMin);

  00091	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00096	56		 push	 esi
  00097	68 6a 0d 00 00	 push	 3434			; 00000d6aH
  0009c	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000a1	50		 push	 eax
  000a2	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  000a8	50		 push	 eax
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  000af	83 c4 0c	 add	 esp, 12			; 0000000cH

; 330  : 		this->GCSendServerMsgAll(nZoneIndex,szText);

  000b2	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  000b8	8b cb		 mov	 ecx, ebx
  000ba	50		 push	 eax
  000bb	57		 push	 edi
  000bc	e8 00 00 00 00	 call	 ?GCSendServerMsgAll@CImperialGuardian@@QAEXHPAD@Z ; CImperialGuardian::GCSendServerMsgAll
$LN13@ProcBeginW:
  000c1	5e		 pop	 esi
  000c2	5f		 pop	 edi
  000c3	5b		 pop	 ebx

; 354  : 		}
; 355  : 	}
; 356  : }

  000c4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c7	33 cd		 xor	 ecx, ebp
  000c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
$LN3@ProcBeginW:

; 331  : 	}
; 332  : 	else
; 333  : 	{
; 334  : 		int iTickSec = GetTickCount() - this->m_ZoneInfo[nZoneIndex].m_dwTICK_COUNT1;

  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000da	2b 46 60	 sub	 eax, DWORD PTR [esi+96]

; 335  : 
; 336  : 		if( iTickSec >= 1000 )

  000dd	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  000e2	7c 2b		 jl	 SHORT $LN5@ProcBeginW

; 337  : 		{
; 338  : 			if( this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC3 <= iTickSec )

  000e4	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  000e7	3b c8		 cmp	 ecx, eax
  000e9	77 09		 ja	 SHORT $LN6@ProcBeginW

; 339  : 			{
; 340  : 				this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC3 = 0;

  000eb	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 341  : 			}
; 342  : 			else

  000f2	eb 05		 jmp	 SHORT $LN7@ProcBeginW
$LN6@ProcBeginW:

; 343  : 			{
; 344  : 				this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC3 -= iTickSec;

  000f4	2b c8		 sub	 ecx, eax
  000f6	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx
$LN7@ProcBeginW:

; 345  : 			}
; 346  : 
; 347  : 			this->m_ZoneInfo[nZoneIndex].m_dwTICK_COUNT1 = GetTickCount();

  000f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 348  : 			this->GCNotifyRemainTickCount(nZoneIndex,1,this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC3);

  000ff	ff 76 5c	 push	 DWORD PTR [esi+92]
  00102	8b cb		 mov	 ecx, ebx
  00104	89 46 60	 mov	 DWORD PTR [esi+96], eax
  00107	6a 01		 push	 1
  00109	57		 push	 edi
  0010a	e8 00 00 00 00	 call	 ?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z ; CImperialGuardian::GCNotifyRemainTickCount
$LN5@ProcBeginW:

; 349  : 		}
; 350  : 
; 351  : 		if( this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC3 <= 0 )

  0010f	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00113	77 ac		 ja	 SHORT $LN13@ProcBeginW

; 352  : 		{
; 353  : 			this->SetZoneState(nZoneIndex,IMPERIAL_STATE_BEGINTIMEATTACK);

  00115	6a 01		 push	 1
  00117	57		 push	 edi
  00118	8b cb		 mov	 ecx, ebx
  0011a	e8 00 00 00 00	 call	 ?SetZoneState@CImperialGuardian@@QAE_NHH@Z ; CImperialGuardian::SetZoneState
  0011f	5e		 pop	 esi
  00120	5f		 pop	 edi
  00121	5b		 pop	 ebx

; 354  : 		}
; 355  : 	}
; 356  : }

  00122	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00125	33 cd		 xor	 ecx, ebp
  00127	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 04 00	 ret	 4
$LN12@ProcBeginW:

; 313  : 	{
; 314  : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  00132	68 3a 01 00 00	 push	 314			; 0000013aH
  00137	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 354  : 		}
; 355  : 	}
; 356  : }

  00147	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014d	33 cd		 xor	 ecx, ebp
  0014f	5f		 pop	 edi
  00150	5b		 pop	 ebx
  00151	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c2 04 00	 ret	 4
?ProcBeginWaitPlayer@CImperialGuardian@@QAEXH@Z ENDP	; CImperialGuardian::ProcBeginWaitPlayer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?ProcBeginLootTime@CImperialGuardian@@QAEXH@Z
_TEXT	SEGMENT
_szText$1 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_nZoneIndex$ = 8					; size = 4
?ProcBeginLootTime@CImperialGuardian@@QAEXH@Z PROC	; CImperialGuardian::ProcBeginLootTime, COMDAT
; _this$ = ecx

; 247  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _nZoneIndex$[ebp]
  00018	8b d9		 mov	 ebx, ecx

; 248  : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  0001a	85 ff		 test	 edi, edi
  0001c	0f 88 7b 01 00
	00		 js	 $LN15@ProcBeginL
  00022	33 c0		 xor	 eax, eax
  00024	83 ff 03	 cmp	 edi, 3
  00027	0f 9e c0	 setle	 al
  0002a	85 c0		 test	 eax, eax
  0002c	0f 84 6b 01 00
	00		 je	 $LN15@ProcBeginL

; 251  : 		return;
; 252  : 	}
; 253  : 
; 254  : 	if( !this->m_ZoneInfo[nZoneIndex].m_bInitLootTime )

  00032	56		 push	 esi
  00033	6b f7 64	 imul	 esi, edi, 100
  00036	03 f3		 add	 esi, ebx
  00038	80 7e 1e 00	 cmp	 BYTE PTR [esi+30], 0
  0003c	0f 85 ca 00 00
	00		 jne	 $LN3@ProcBeginL

; 255  : 	{
; 256  : 		this->m_ZoneInfo[nZoneIndex].m_dwTICK_COUNT2 = GetTickCount();

  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 257  : 		this->m_ZoneInfo[nZoneIndex].m_bInitLootTime = TRUE;
; 258  : 
; 259  : 		this->GCNotifyRemainTickCount(nZoneIndex,0,this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC2);

  00048	ff 76 58	 push	 DWORD PTR [esi+88]
  0004b	8b cb		 mov	 ecx, ebx
  0004d	89 46 64	 mov	 DWORD PTR [esi+100], eax
  00050	6a 00		 push	 0
  00052	57		 push	 edi
  00053	c6 46 1e 01	 mov	 BYTE PTR [esi+30], 1
  00057	e8 00 00 00 00	 call	 ?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z ; CImperialGuardian::GCNotifyRemainTickCount

; 260  : 		LogAddTD("[IMPERIALGUARDIAN] BEGIN LOOTTIME -> [ZONE]:%d ",(nZoneIndex+1));

  0005c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0005f	50		 push	 eax
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@EDOFHFCG@?$FLIMPERIALGUARDIAN?$FN?5BEGIN?5LOOTTIM@
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0006b	83 c4 08	 add	 esp, 8

; 261  : 		this->GCNotifyRemainTickCount(nZoneIndex,0,this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC2);

  0006e	8b cb		 mov	 ecx, ebx
  00070	ff 76 58	 push	 DWORD PTR [esi+88]
  00073	6a 00		 push	 0
  00075	57		 push	 edi
  00076	e8 00 00 00 00	 call	 ?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z ; CImperialGuardian::GCNotifyRemainTickCount

; 262  : 
; 263  : 		if( !this->IsLastZone(nZoneIndex) )

  0007b	57		 push	 edi
  0007c	8b cb		 mov	 ecx, ebx
  0007e	e8 00 00 00 00	 call	 ?IsLastZone@CImperialGuardian@@QAE_NH@Z ; CImperialGuardian::IsLastZone
  00083	84 c0		 test	 al, al
  00085	75 72		 jne	 SHORT $LN16@ProcBeginL

; 264  : 		{
; 265  : 			char szText[256] = {0};
; 266  : 			wsprintf(szText,lMsg.Get(MSGGET(13,108)));

  00087	68 00 01 00 00	 push	 256			; 00000100H
  0008c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  00092	6a 00		 push	 0
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 _memset
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000a2	68 6c 0d 00 00	 push	 3436			; 00000d6cH
  000a7	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000ac	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__wsprintfA
  000b2	50		 push	 eax
  000b3	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  000b9	50		 push	 eax
  000ba	ff d6		 call	 esi
  000bc	83 c4 08	 add	 esp, 8

; 267  : 			this->GCSendServerMsgAll(nZoneIndex,szText);

  000bf	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  000c5	8b cb		 mov	 ecx, ebx
  000c7	50		 push	 eax
  000c8	57		 push	 edi
  000c9	e8 00 00 00 00	 call	 ?GCSendServerMsgAll@CImperialGuardian@@QAEXHPAD@Z ; CImperialGuardian::GCSendServerMsgAll

; 268  : 			wsprintf(szText,lMsg.Get(MSGGET(13,109)));

  000ce	68 6d 0d 00 00	 push	 3437			; 00000d6dH
  000d3	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000d8	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000dd	50		 push	 eax
  000de	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  000e4	50		 push	 eax
  000e5	ff d6		 call	 esi
  000e7	83 c4 08	 add	 esp, 8

; 269  : 			this->GCSendServerMsgAll(nZoneIndex,szText);

  000ea	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  000f0	8b cb		 mov	 ecx, ebx
  000f2	50		 push	 eax
  000f3	57		 push	 edi
  000f4	e8 00 00 00 00	 call	 ?GCSendServerMsgAll@CImperialGuardian@@QAEXHPAD@Z ; CImperialGuardian::GCSendServerMsgAll
$LN16@ProcBeginL:
  000f9	5e		 pop	 esi
  000fa	5f		 pop	 edi
  000fb	5b		 pop	 ebx

; 307  : 		}
; 308  : 	}
; 309  : }

  000fc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ff	33 cd		 xor	 ecx, ebp
  00101	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 04 00	 ret	 4
$LN3@ProcBeginL:

; 270  : 		}
; 271  : 	}
; 272  : 	else
; 273  : 	{
; 274  : 		int iTickSec = GetTickCount() - this->m_ZoneInfo[nZoneIndex].m_dwTICK_COUNT2;

  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00112	2b 46 64	 sub	 eax, DWORD PTR [esi+100]

; 275  : 
; 276  : 		if( iTickSec >= 1000 )

  00115	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  0011a	7c 2b		 jl	 SHORT $LN6@ProcBeginL

; 277  : 		{
; 278  : 			if( this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC2 <= iTickSec )

  0011c	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0011f	3b c8		 cmp	 ecx, eax
  00121	77 09		 ja	 SHORT $LN7@ProcBeginL

; 279  : 			{
; 280  : 				this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC2 = 0;

  00123	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0

; 281  : 			}
; 282  : 			else

  0012a	eb 05		 jmp	 SHORT $LN8@ProcBeginL
$LN7@ProcBeginL:

; 283  : 			{
; 284  : 				this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC2 -= iTickSec;

  0012c	2b c8		 sub	 ecx, eax
  0012e	89 4e 58	 mov	 DWORD PTR [esi+88], ecx
$LN8@ProcBeginL:

; 285  : 			}
; 286  : 
; 287  : 			this->m_ZoneInfo[nZoneIndex].m_dwTICK_COUNT2 = GetTickCount();

  00131	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 288  : 			this->GCNotifyRemainTickCount(nZoneIndex,0,this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC2);

  00137	ff 76 58	 push	 DWORD PTR [esi+88]
  0013a	8b cb		 mov	 ecx, ebx
  0013c	89 46 64	 mov	 DWORD PTR [esi+100], eax
  0013f	6a 00		 push	 0
  00141	57		 push	 edi
  00142	e8 00 00 00 00	 call	 ?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z ; CImperialGuardian::GCNotifyRemainTickCount
$LN6@ProcBeginL:

; 289  : 		}
; 290  : 
; 291  : 		if( this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC2 <= 0 )

  00147	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0014b	77 ac		 ja	 SHORT $LN16@ProcBeginL

; 292  : 		{
; 293  : 			this->m_ZoneInfo[nZoneIndex].m_bInitLootTime = FALSE;
; 294  : 			LogAddTD("[IMPERIALGUARDIAN] END LOOTTIME -> [ZONE]:%d ",(nZoneIndex+1));

  0014d	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00150	c6 46 1e 00	 mov	 BYTE PTR [esi+30], 0
  00154	50		 push	 eax
  00155	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@FGCFEPEM@?$FLIMPERIALGUARDIAN?$FN?5END?5LOOTTIME?5@
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00160	83 c4 08	 add	 esp, 8

; 295  : 
; 296  : 			if( this->IsLastZone(nZoneIndex) )

  00163	8b cb		 mov	 ecx, ebx
  00165	57		 push	 edi
  00166	e8 00 00 00 00	 call	 ?IsLastZone@CImperialGuardian@@QAE_NH@Z ; CImperialGuardian::IsLastZone

; 297  : 			{
; 298  : 				this->SetZoneState(nZoneIndex,IMPERIAL_STATE_KICKALL);

  0016b	8b cb		 mov	 ecx, ebx
  0016d	84 c0		 test	 al, al
  0016f	74 04		 je	 SHORT $LN10@ProcBeginL
  00171	6a 06		 push	 6

; 299  : 			}
; 300  : 			else

  00173	eb 02		 jmp	 SHORT $LN17@ProcBeginL
$LN10@ProcBeginL:

; 301  : 			{
; 302  : 				this->SetZoneState(nZoneIndex,IMPERIAL_STATE_MISSIONFAIL);

  00175	6a 05		 push	 5
$LN17@ProcBeginL:
  00177	57		 push	 edi
  00178	e8 00 00 00 00	 call	 ?SetZoneState@CImperialGuardian@@QAE_NHH@Z ; CImperialGuardian::SetZoneState

; 303  : 			}
; 304  : 
; 305  : 			int nMonsterRegenTable = this->m_ZoneInfo[nZoneIndex].m_wMonsterRegenTable;

  0017d	0f b7 46 24	 movzx	 eax, WORD PTR [esi+36]

; 306  : 			this->DeleteMonster(nZoneIndex,nMonsterRegenTable);

  00181	8b cb		 mov	 ecx, ebx
  00183	50		 push	 eax
  00184	57		 push	 edi
  00185	e8 00 00 00 00	 call	 ?DeleteMonster@CImperialGuardian@@QAEXHH@Z ; CImperialGuardian::DeleteMonster
  0018a	5e		 pop	 esi
  0018b	5f		 pop	 edi
  0018c	5b		 pop	 ebx

; 307  : 		}
; 308  : 	}
; 309  : }

  0018d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00190	33 cd		 xor	 ecx, ebp
  00192	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00197	8b e5		 mov	 esp, ebp
  00199	5d		 pop	 ebp
  0019a	c2 04 00	 ret	 4
$LN15@ProcBeginL:

; 249  : 	{
; 250  : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  0019d	68 fa 00 00 00	 push	 250			; 000000faH
  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  001ac	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 307  : 		}
; 308  : 	}
; 309  : }

  001b2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b8	33 cd		 xor	 ecx, ebp
  001ba	5f		 pop	 edi
  001bb	5b		 pop	 ebx
  001bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c1	8b e5		 mov	 esp, ebp
  001c3	5d		 pop	 ebp
  001c4	c2 04 00	 ret	 4
?ProcBeginLootTime@CImperialGuardian@@QAEXH@Z ENDP	; CImperialGuardian::ProcBeginLootTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?ProcBeginTimeAttack@CImperialGuardian@@QAEXH@Z
_TEXT	SEGMENT
_nRemainMin$1$ = -264					; size = 4
_iTickSec$1$ = -264					; size = 4
_szText$1 = -260					; size = 256
_szText$2 = -260					; size = 256
_szText$3 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_nZoneIndex$ = 8					; size = 4
?ProcBeginTimeAttack@CImperialGuardian@@QAEXH@Z PROC	; CImperialGuardian::ProcBeginTimeAttack, COMDAT
; _this$ = ecx

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _nZoneIndex$[ebp]
  00018	8b d9		 mov	 ebx, ecx

; 141  : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  0001a	85 f6		 test	 esi, esi
  0001c	0f 88 99 02 00
	00		 js	 $LN43@ProcBeginT
  00022	33 c0		 xor	 eax, eax
  00024	83 fe 03	 cmp	 esi, 3
  00027	0f 9e c0	 setle	 al
  0002a	85 c0		 test	 eax, eax
  0002c	0f 84 89 02 00
	00		 je	 $LN43@ProcBeginT

; 144  : 		return;
; 145  : 	}
; 146  : 
; 147  : 	if( !this->m_ZoneInfo[nZoneIndex].m_bInitTimeAttack )

  00032	57		 push	 edi
  00033	6b fe 64	 imul	 edi, esi, 100
  00036	03 fb		 add	 edi, ebx
  00038	80 7f 1d 00	 cmp	 BYTE PTR [edi+29], 0
  0003c	0f 85 c8 00 00
	00		 jne	 $LN3@ProcBeginT

; 148  : 	{
; 149  : 		this->m_ZoneInfo[nZoneIndex].m_dwTICK_COUNT3 = GetTickCount();

  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00048	68 00 01 00 00	 push	 256			; 00000100H
  0004d	89 47 68	 mov	 DWORD PTR [edi+104], eax
  00050	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$3[ebp]
  00056	6a 00		 push	 0
  00058	50		 push	 eax

; 150  : 		this->m_ZoneInfo[nZoneIndex].m_bInitTimeAttack = TRUE;

  00059	c6 47 1d 01	 mov	 BYTE PTR [edi+29], 1
  0005d	e8 00 00 00 00	 call	 _memset
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH

; 151  : 
; 152  : 		char szText[256] = {0};
; 153  : 		wsprintf(szText,lMsg.Get(MSGGET(13,107)));

  00065	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0006a	68 6b 0d 00 00	 push	 3435			; 00000d6bH
  0006f	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00074	50		 push	 eax
  00075	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$3[ebp]
  0007b	50		 push	 eax
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00082	83 c4 08	 add	 esp, 8

; 154  : 		this->GCSendServerMsgAll(nZoneIndex,szText);

  00085	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$3[ebp]
  0008b	8b cb		 mov	 ecx, ebx
  0008d	50		 push	 eax
  0008e	56		 push	 esi
  0008f	e8 00 00 00 00	 call	 ?GCSendServerMsgAll@CImperialGuardian@@QAEXHPAD@Z ; CImperialGuardian::GCSendServerMsgAll

; 155  : 		this->SetAtackAbleState(nZoneIndex,525,true);

  00094	6a 01		 push	 1
  00096	68 0d 02 00 00	 push	 525			; 0000020dH
  0009b	56		 push	 esi
  0009c	8b cb		 mov	 ecx, ebx
  0009e	e8 00 00 00 00	 call	 ?SetAtackAbleState@CImperialGuardian@@QAEXHH_N@Z ; CImperialGuardian::SetAtackAbleState

; 156  : 		this->SetAtackAbleState(nZoneIndex,528,true);

  000a3	6a 01		 push	 1
  000a5	68 10 02 00 00	 push	 528			; 00000210H
  000aa	56		 push	 esi
  000ab	8b cb		 mov	 ecx, ebx
  000ad	e8 00 00 00 00	 call	 ?SetAtackAbleState@CImperialGuardian@@QAEXHH_N@Z ; CImperialGuardian::SetAtackAbleState

; 157  : 
; 158  : 		int nMonsterRegenTable = this->m_ZoneInfo[nZoneIndex].m_wMonsterRegenTable;

  000b2	0f b7 47 24	 movzx	 eax, WORD PTR [edi+36]

; 159  : 		int nMaxLevel = this->m_ZoneInfo[nZoneIndex].m_iMaxLevel;
; 160  : 
; 161  : 		this->RegenMonster(nZoneIndex,nMonsterRegenTable,nMaxLevel,false);

  000b6	8b cb		 mov	 ecx, ebx
  000b8	6a 00		 push	 0
  000ba	ff 77 28	 push	 DWORD PTR [edi+40]
  000bd	50		 push	 eax
  000be	56		 push	 esi
  000bf	e8 00 00 00 00	 call	 ?RegenMonster@CImperialGuardian@@QAEXHHH_N@Z ; CImperialGuardian::RegenMonster

; 162  : 		this->GCNotifyRemainTickCount(nZoneIndex,2,this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC);

  000c4	ff 77 54	 push	 DWORD PTR [edi+84]
  000c7	8b cb		 mov	 ecx, ebx
  000c9	6a 02		 push	 2
  000cb	56		 push	 esi
  000cc	e8 00 00 00 00	 call	 ?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z ; CImperialGuardian::GCNotifyRemainTickCount

; 163  : 
; 164  : 		LogAddTD("[IMPERIALGUARDIAN] BEGIN TIMEATTACK -> [ZONE]:%d ",(nZoneIndex+1));

  000d1	46		 inc	 esi
  000d2	56		 push	 esi
  000d3	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@GLEDMLHG@?$FLIMPERIALGUARDIAN?$FN?5BEGIN?5TIMEATT@
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  000de	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  000e1	2b 47 30	 sub	 eax, DWORD PTR [edi+48]
  000e4	c1 f8 03	 sar	 eax, 3
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp

; 165  : 		LogAddTD("[IMPERIALGUARDIAN] OBJECT COUNT -> [ZONE]:%d [COUNT]:%d",

  000e7	50		 push	 eax
  000e8	56		 push	 esi
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@KMNKLEEH@?$FLIMPERIALGUARDIAN?$FN?5OBJECT?5COUNT?5@
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000f4	83 c4 14	 add	 esp, 20			; 00000014H
$LN44@ProcBeginT:
  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx

; 243  : 		}
; 244  : 	}
; 245  : }

  000fa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fd	33 cd		 xor	 ecx, ebp
  000ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c2 04 00	 ret	 4
$LN3@ProcBeginT:

; 166  : 			(nZoneIndex+1),this->m_ZoneInfo[nZoneIndex].m_vtMonsterIndexInfo.size());
; 167  : 	}
; 168  : 	else
; 169  : 	{
; 170  : 		int iTickSec = GetTickCount() - this->m_ZoneInfo[nZoneIndex].m_dwTICK_COUNT3;

  0010a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00110	2b 47 68	 sub	 eax, DWORD PTR [edi+104]

; 171  : 
; 172  : 		if( !this->m_ZoneInfo[nZoneIndex].btUnk6 &&

  00113	80 7f 22 00	 cmp	 BYTE PTR [edi+34], 0
  00117	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _iTickSec$1$[ebp], eax
  0011d	75 58		 jne	 SHORT $LN5@ProcBeginT
  0011f	81 7f 54 60 ea
	00 00		 cmp	 DWORD PTR [edi+84], 60000 ; 0000ea60H
  00126	77 4f		 ja	 SHORT $LN5@ProcBeginT

; 173  : 			this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC <= 60000 )
; 174  : 		{
; 175  : 			char szText[256] = {0};
; 176  : 			wsprintf(szText,lMsg.Get(MSGGET(13,112)));

  00128	68 00 01 00 00	 push	 256			; 00000100H
  0012d	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$2[ebp]
  00133	6a 00		 push	 0
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 _memset
  0013b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00143	68 70 0d 00 00	 push	 3440			; 00000d70H
  00148	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0014d	50		 push	 eax
  0014e	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$2[ebp]
  00154	50		 push	 eax
  00155	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  0015b	83 c4 08	 add	 esp, 8

; 177  : 			this->GCSendServerMsgAll(nZoneIndex,szText);

  0015e	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$2[ebp]
  00164	8b cb		 mov	 ecx, ebx
  00166	50		 push	 eax
  00167	56		 push	 esi
  00168	e8 00 00 00 00	 call	 ?GCSendServerMsgAll@CImperialGuardian@@QAEXHPAD@Z ; CImperialGuardian::GCSendServerMsgAll
  0016d	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _iTickSec$1$[ebp]

; 178  : 			this->m_ZoneInfo[nZoneIndex].btUnk6 = TRUE;

  00173	c6 47 22 01	 mov	 BYTE PTR [edi+34], 1
$LN5@ProcBeginT:

; 179  : 		}
; 180  : 
; 181  : 		if( iTickSec >= 1000 )

  00177	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  0017c	7c 2b		 jl	 SHORT $LN6@ProcBeginT

; 182  : 		{
; 183  : 			if( this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC <= iTickSec )

  0017e	8b 4f 54	 mov	 ecx, DWORD PTR [edi+84]
  00181	3b c8		 cmp	 ecx, eax
  00183	77 09		 ja	 SHORT $LN7@ProcBeginT

; 184  : 			{
; 185  : 				this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC = 0;

  00185	c7 47 54 00 00
	00 00		 mov	 DWORD PTR [edi+84], 0

; 186  : 			}
; 187  : 			else

  0018c	eb 05		 jmp	 SHORT $LN8@ProcBeginT
$LN7@ProcBeginT:

; 188  : 			{
; 189  : 				this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC -= iTickSec;

  0018e	2b c8		 sub	 ecx, eax
  00190	89 4f 54	 mov	 DWORD PTR [edi+84], ecx
$LN8@ProcBeginT:

; 190  : 			}
; 191  : 
; 192  : 			this->m_ZoneInfo[nZoneIndex].m_dwTICK_COUNT3 = GetTickCount();

  00193	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 193  : 			this->GCNotifyRemainTickCount(nZoneIndex,2,this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC);

  00199	ff 77 54	 push	 DWORD PTR [edi+84]
  0019c	8b cb		 mov	 ecx, ebx
  0019e	89 47 68	 mov	 DWORD PTR [edi+104], eax
  001a1	6a 02		 push	 2
  001a3	56		 push	 esi
  001a4	e8 00 00 00 00	 call	 ?GCNotifyRemainTickCount@CImperialGuardian@@QAE_NHEK@Z ; CImperialGuardian::GCNotifyRemainTickCount
$LN6@ProcBeginT:

; 194  : 		}
; 195  : 
; 196  : 		if( this->IsLastZone(nZoneIndex) )

  001a9	56		 push	 esi
  001aa	8b cb		 mov	 ecx, ebx
  001ac	e8 00 00 00 00	 call	 ?IsLastZone@CImperialGuardian@@QAE_NH@Z ; CImperialGuardian::IsLastZone
  001b1	84 c0		 test	 al, al
  001b3	74 16		 je	 SHORT $LN9@ProcBeginT

; 197  : 		{
; 198  : 			if( this->GetLiveMonsterCount(nZoneIndex) < 1 )

  001b5	56		 push	 esi
  001b6	8b cb		 mov	 ecx, ebx
  001b8	e8 00 00 00 00	 call	 ?GetLiveMonsterCount@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetLiveMonsterCount
  001bd	83 f8 01	 cmp	 eax, 1
  001c0	7d 7a		 jge	 SHORT $LN13@ProcBeginT

; 199  : 			{
; 200  : 				this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC = 0;

  001c2	c7 47 54 00 00
	00 00		 mov	 DWORD PTR [edi+84], 0

; 201  : 			}
; 202  : 		}
; 203  : 		else

  001c9	eb 71		 jmp	 SHORT $LN13@ProcBeginT
$LN9@ProcBeginT:

; 204  : 		{
; 205  : 			if( this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC >= 60000 )

  001cb	81 7f 54 60 ea
	00 00		 cmp	 DWORD PTR [edi+84], 60000 ; 0000ea60H
  001d2	72 68		 jb	 SHORT $LN13@ProcBeginT

; 206  : 			{
; 207  : 				char szText[256] = {0};
; 208  : 				int nRemainMin = this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC/60000+1;

  001d4	68 00 01 00 00	 push	 256			; 00000100H
  001d9	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  001df	6a 00		 push	 0
  001e1	50		 push	 eax
  001e2	e8 00 00 00 00	 call	 _memset
  001e7	b8 73 b2 e7 45	 mov	 eax, 1172812403		; 45e7b273H
  001ec	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ef	f7 67 54	 mul	 DWORD PTR [edi+84]
  001f2	8b c2		 mov	 eax, edx
  001f4	c1 e8 0e	 shr	 eax, 14			; 0000000eH
  001f7	40		 inc	 eax
  001f8	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _nRemainMin$1$[ebp], eax

; 209  : 
; 210  : 				if( nRemainMin != this->m_ZoneInfo[nZoneIndex].m_iNotifyMinute )

  001fe	3b 47 2c	 cmp	 eax, DWORD PTR [edi+44]
  00201	74 39		 je	 SHORT $LN13@ProcBeginT

; 211  : 				{
; 212  : 					wsprintf(szText,lMsg.Get(MSGGET(13,113)),nRemainMin);

  00203	50		 push	 eax
  00204	68 71 0d 00 00	 push	 3441			; 00000d71H
  00209	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0020e	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00213	50		 push	 eax
  00214	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  0021a	50		 push	 eax
  0021b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  00221	83 c4 0c	 add	 esp, 12			; 0000000cH

; 213  : 					this->GCSendServerMsgAll(nZoneIndex,szText);

  00224	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  0022a	8b cb		 mov	 ecx, ebx
  0022c	50		 push	 eax
  0022d	56		 push	 esi
  0022e	e8 00 00 00 00	 call	 ?GCSendServerMsgAll@CImperialGuardian@@QAEXHPAD@Z ; CImperialGuardian::GCSendServerMsgAll

; 214  : 					this->m_ZoneInfo[nZoneIndex].m_iNotifyMinute = nRemainMin;

  00233	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _nRemainMin$1$[ebp]
  00239	89 47 2c	 mov	 DWORD PTR [edi+44], eax
$LN13@ProcBeginT:

; 215  : 				}
; 216  : 			}
; 217  : 		}
; 218  : 
; 219  : 		if( this->m_ZoneInfo[nZoneIndex].m_dwREMAIN_MSEC <= 0 )

  0023c	83 7f 54 00	 cmp	 DWORD PTR [edi+84], 0
  00240	0f 87 b1 fe ff
	ff		 ja	 $LN44@ProcBeginT

; 220  : 		{
; 221  : 			this->m_ZoneInfo[nZoneIndex].m_bInitTimeAttack = 0;
; 222  : 
; 223  : 			if( this->GetLiveMonsterCount(nZoneIndex) < 1 )

  00246	56		 push	 esi
  00247	8b cb		 mov	 ecx, ebx
  00249	c6 47 1d 00	 mov	 BYTE PTR [edi+29], 0
  0024d	e8 00 00 00 00	 call	 ?GetLiveMonsterCount@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetLiveMonsterCount

; 224  : 			{
; 225  : 				if( this->IsLastZone(nZoneIndex) )

  00252	8b cb		 mov	 ecx, ebx
  00254	83 f8 01	 cmp	 eax, 1
  00257	7d 28		 jge	 SHORT $LN15@ProcBeginT
  00259	56		 push	 esi
  0025a	e8 00 00 00 00	 call	 ?IsLastZone@CImperialGuardian@@QAE_NH@Z ; CImperialGuardian::IsLastZone

; 226  : 				{
; 227  : 					this->SetZoneState(nZoneIndex,IMPERIAL_STATE_MISSIONCLEAR);

  0025f	8b cb		 mov	 ecx, ebx
  00261	84 c0		 test	 al, al
  00263	74 0e		 je	 SHORT $LN17@ProcBeginT
  00265	6a 07		 push	 7

; 228  : 				}
; 229  : 				else
; 230  : 				{
; 231  : 					this->SetZoneState(nZoneIndex,IMPERIAL_STATE_BEGINLOOTTIME);

  00267	56		 push	 esi
  00268	e8 00 00 00 00	 call	 ?SetZoneState@CImperialGuardian@@QAE_NHH@Z ; CImperialGuardian::SetZoneState

; 232  : 				}
; 233  : 				this->m_ZoneInfo[nZoneIndex].m_bWait = TRUE;

  0026d	c6 47 20 01	 mov	 BYTE PTR [edi+32], 1

; 234  : 			}
; 235  : 			else

  00271	eb 23		 jmp	 SHORT $LN16@ProcBeginT
$LN17@ProcBeginT:

; 228  : 				}
; 229  : 				else
; 230  : 				{
; 231  : 					this->SetZoneState(nZoneIndex,IMPERIAL_STATE_BEGINLOOTTIME);

  00273	6a 03		 push	 3
  00275	56		 push	 esi
  00276	e8 00 00 00 00	 call	 ?SetZoneState@CImperialGuardian@@QAE_NHH@Z ; CImperialGuardian::SetZoneState

; 232  : 				}
; 233  : 				this->m_ZoneInfo[nZoneIndex].m_bWait = TRUE;

  0027b	c6 47 20 01	 mov	 BYTE PTR [edi+32], 1

; 234  : 			}
; 235  : 			else

  0027f	eb 15		 jmp	 SHORT $LN16@ProcBeginT
$LN15@ProcBeginT:

; 236  : 			{
; 237  : 				this->SetZoneState(nZoneIndex,IMPERIAL_STATE_MISSIONFAIL);

  00281	6a 05		 push	 5
  00283	56		 push	 esi
  00284	e8 00 00 00 00	 call	 ?SetZoneState@CImperialGuardian@@QAE_NHH@Z ; CImperialGuardian::SetZoneState

; 238  : 				int nMonsterRegenTable = this->m_ZoneInfo[nZoneIndex].m_wMonsterRegenTable;

  00289	0f b7 47 24	 movzx	 eax, WORD PTR [edi+36]

; 239  : 				this->DeleteMonster(nZoneIndex,nMonsterRegenTable);

  0028d	8b cb		 mov	 ecx, ebx
  0028f	50		 push	 eax
  00290	56		 push	 esi
  00291	e8 00 00 00 00	 call	 ?DeleteMonster@CImperialGuardian@@QAEXHH@Z ; CImperialGuardian::DeleteMonster
$LN16@ProcBeginT:

; 240  : 			}
; 241  : 
; 242  : 			LogAddTD("[IMPERIALGUARDIAN] END TIMEATTACK -> [ZONE]:%d ",(nZoneIndex+1));

  00296	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00299	50		 push	 eax
  0029a	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@DCFNIECJ@?$FLIMPERIALGUARDIAN?$FN?5END?5TIMEATTAC@
  0029f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002a5	83 c4 08	 add	 esp, 8
  002a8	5f		 pop	 edi
  002a9	5e		 pop	 esi
  002aa	5b		 pop	 ebx

; 243  : 		}
; 244  : 	}
; 245  : }

  002ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ae	33 cd		 xor	 ecx, ebp
  002b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b5	8b e5		 mov	 esp, ebp
  002b7	5d		 pop	 ebp
  002b8	c2 04 00	 ret	 4
$LN43@ProcBeginT:

; 142  : 	{
; 143  : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  002bb	68 8f 00 00 00	 push	 143			; 0000008fH
  002c0	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  002c5	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  002ca	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 243  : 		}
; 244  : 	}
; 245  : }

  002d0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d3	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d6	33 cd		 xor	 ecx, ebp
  002d8	5e		 pop	 esi
  002d9	5b		 pop	 ebx
  002da	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002df	8b e5		 mov	 esp, ebp
  002e1	5d		 pop	 ebp
  002e2	c2 04 00	 ret	 4
?ProcBeginTimeAttack@CImperialGuardian@@QAEXH@Z ENDP	; CImperialGuardian::ProcBeginTimeAttack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?ProcReady@CImperialGuardian@@QAEXH@Z
_TEXT	SEGMENT
_nZoneIndex$ = 8					; size = 4
?ProcReady@CImperialGuardian@@QAEXH@Z PROC		; CImperialGuardian::ProcReady, COMDAT
; _this$ = ecx

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 128  : 	if( !IMPERIAL_ZONE_CHECK(nZoneIndex) )

  00004	8b 75 08	 mov	 esi, DWORD PTR _nZoneIndex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	78 26		 js	 SHORT $LN7@ProcReady
  0000e	33 c0		 xor	 eax, eax
  00010	83 fe 03	 cmp	 esi, 3
  00013	0f 9e c0	 setle	 al
  00016	85 c0		 test	 eax, eax
  00018	74 1a		 je	 SHORT $LN7@ProcReady

; 131  : 		return;
; 132  : 	}
; 133  : 
; 134  : 	if( GetPlayerCount(nZoneIndex) > 0 )

  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?GetPlayerCount@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetPlayerCount
  00020	85 c0		 test	 eax, eax
  00022	7e 28		 jle	 SHORT $LN3@ProcReady

; 135  : 	{
; 136  : 		SetZoneState(nZoneIndex,IMPERIAL_STATE_KICKALL);

  00024	6a 06		 push	 6
  00026	56		 push	 esi
  00027	8b cf		 mov	 ecx, edi
  00029	e8 00 00 00 00	 call	 ?SetZoneState@CImperialGuardian@@QAE_NHH@Z ; CImperialGuardian::SetZoneState
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi

; 137  : 	}
; 138  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN7@ProcReady:

; 129  : 	{
; 130  : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  00034	68 82 00 00 00	 push	 130			; 00000082H
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PJIOLJJJ@ImperialGuardian?4cpp?$AA@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@ProcReady:
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi

; 137  : 	}
; 138  : }

  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?ProcReady@CImperialGuardian@@QAEXH@Z ENDP		; CImperialGuardian::ProcReady
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?Run@CImperialGuardian@@QAEXXZ
_TEXT	SEGMENT
?Run@CImperialGuardian@@QAEXXZ PROC			; CImperialGuardian::Run, COMDAT
; _this$ = ecx

; 86   : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 87   : 	if( !this->m_bEnabled )

  00003	80 7f 11 00	 cmp	 BYTE PTR [edi+17], 0
  00007	74 7e		 je	 SHORT $LN1@Run

; 88   : 		return;
; 89   : 
; 90   : 	for(int i = 0; i < IMPERIAL_GUARDIAN_MAXZONE; i++)

  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	33 f6		 xor	 esi, esi
  0000d	8d 5f 14	 lea	 ebx, DWORD PTR [edi+20]
$LL4@Run:

; 91   : 	{
; 92   : 		switch( this->m_ZoneInfo[i].m_iState )

  00010	8b 03		 mov	 eax, DWORD PTR [ebx]
  00012	83 f8 07	 cmp	 eax, 7
  00015	77 55		 ja	 SHORT $LN5@Run
  00017	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN24@Run[eax*4]
$LN8@Run:

; 93   : 		{
; 94   : 		case IMPERIAL_STATE_READY:
; 95   : 			ProcReady(i);

  0001e	56		 push	 esi
  0001f	8b cf		 mov	 ecx, edi
  00021	e8 00 00 00 00	 call	 ?ProcReady@CImperialGuardian@@QAEXH@Z ; CImperialGuardian::ProcReady

; 96   : 			break;

  00026	eb 44		 jmp	 SHORT $LN5@Run
$LN9@Run:

; 97   : 		case IMPERIAL_STATE_BEGINTIMEATTACK:
; 98   : 			ProcBeginTimeAttack(i);

  00028	56		 push	 esi
  00029	8b cf		 mov	 ecx, edi
  0002b	e8 00 00 00 00	 call	 ?ProcBeginTimeAttack@CImperialGuardian@@QAEXH@Z ; CImperialGuardian::ProcBeginTimeAttack

; 99   : 			break;

  00030	eb 3a		 jmp	 SHORT $LN5@Run
$LN10@Run:

; 100  : 		case IMPERIAL_STATE_BEGINLOOTTIME:
; 101  : 			ProcBeginLootTime(i);

  00032	56		 push	 esi
  00033	8b cf		 mov	 ecx, edi
  00035	e8 00 00 00 00	 call	 ?ProcBeginLootTime@CImperialGuardian@@QAEXH@Z ; CImperialGuardian::ProcBeginLootTime

; 102  : 			break;

  0003a	eb 30		 jmp	 SHORT $LN5@Run
$LN11@Run:

; 103  : 		case IMPERIAL_STATE_BEGINWAITPLAYER:
; 104  : 			ProcBeginWaitPlayer(i);

  0003c	56		 push	 esi
  0003d	8b cf		 mov	 ecx, edi
  0003f	e8 00 00 00 00	 call	 ?ProcBeginWaitPlayer@CImperialGuardian@@QAEXH@Z ; CImperialGuardian::ProcBeginWaitPlayer

; 105  : 			break;

  00044	eb 26		 jmp	 SHORT $LN5@Run
$LN12@Run:

; 106  : 		case IMPERIAL_STATE_PROCWARPNEXTZONE:
; 107  : 			ProcAllWarpNextZone(i);

  00046	56		 push	 esi
  00047	8b cf		 mov	 ecx, edi
  00049	e8 00 00 00 00	 call	 ?ProcAllWarpNextZone@CImperialGuardian@@QAEXH@Z ; CImperialGuardian::ProcAllWarpNextZone

; 108  : 			break;

  0004e	eb 1c		 jmp	 SHORT $LN5@Run
$LN13@Run:

; 109  : 		case IMPERIAL_STATE_KICKALL:
; 110  : 			ProcAllKick(i);

  00050	56		 push	 esi
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 ?ProcAllKick@CImperialGuardian@@QAEXH@Z ; CImperialGuardian::ProcAllKick

; 111  : 			break;

  00058	eb 12		 jmp	 SHORT $LN5@Run
$LN14@Run:

; 112  : 		case IMPERIAL_STATE_MISSIONFAIL:
; 113  : 			ProcMissionFail(i);

  0005a	56		 push	 esi
  0005b	8b cf		 mov	 ecx, edi
  0005d	e8 00 00 00 00	 call	 ?ProcMissionFail@CImperialGuardian@@QAEXH@Z ; CImperialGuardian::ProcMissionFail

; 114  : 			break;

  00062	eb 08		 jmp	 SHORT $LN5@Run
$LN15@Run:

; 115  : 		case IMPERIAL_STATE_MISSIONCLEAR:
; 116  : 			ProcMissionClear(i);

  00064	56		 push	 esi
  00065	8b cf		 mov	 ecx, edi
  00067	e8 00 00 00 00	 call	 ?ProcMissionClear@CImperialGuardian@@QAEXH@Z ; CImperialGuardian::ProcMissionClear
$LN5@Run:

; 117  : 			break;
; 118  : 		}
; 119  : 
; 120  : 		ProcCheckDungeon(i);

  0006c	56		 push	 esi
  0006d	8b cf		 mov	 ecx, edi
  0006f	e8 00 00 00 00	 call	 ?ProcCheckDungeon@CImperialGuardian@@QAEXH@Z ; CImperialGuardian::ProcCheckDungeon
  00074	46		 inc	 esi
  00075	83 c3 64	 add	 ebx, 100		; 00000064H
  00078	83 fe 04	 cmp	 esi, 4
  0007b	7c 93		 jl	 SHORT $LL4@Run

; 121  : 	}
; 122  : 
; 123  : 	KickInvalidUser();

  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b cf		 mov	 ecx, edi
  00081	5f		 pop	 edi
  00082	e9 00 00 00 00	 jmp	 ?KickInvalidUser@CImperialGuardian@@QAEXXZ ; CImperialGuardian::KickInvalidUser
$LN1@Run:
  00087	5f		 pop	 edi

; 124  : }

  00088	c3		 ret	 0
  00089	0f 1f 00	 npad	 3
$LN24@Run:
  0008c	00 00 00 00	 DD	 $LN8@Run
  00090	00 00 00 00	 DD	 $LN9@Run
  00094	00 00 00 00	 DD	 $LN11@Run
  00098	00 00 00 00	 DD	 $LN10@Run
  0009c	00 00 00 00	 DD	 $LN12@Run
  000a0	00 00 00 00	 DD	 $LN14@Run
  000a4	00 00 00 00	 DD	 $LN13@Run
  000a8	00 00 00 00	 DD	 $LN15@Run
?Run@CImperialGuardian@@QAEXXZ ENDP			; CImperialGuardian::Run
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?LoadScript@CImperialGuardian@@QAEXPBD@Z
_TEXT	SEGMENT
_szFileName$ = 8					; size = 4
?LoadScript@CImperialGuardian@@QAEXPBD@Z PROC		; CImperialGuardian::LoadScript, COMDAT
; _this$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 55   : 	int nTemp = 0;
; 56   : 
; 57   : 	nTemp = GetPrivateProfileInt("GameServerInfo","IGEventOn",0,szFileName);

  00004	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetPrivateProfileIntA@16
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _szFileName$[ebp]
  0000f	8b f1		 mov	 esi, ecx
  00011	57		 push	 edi
  00012	6a 00		 push	 0
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_09DADCBAGP@IGEventOn?$AA@
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0001e	ff d3		 call	 ebx

; 58   : 
; 59   : 	if( nTemp == 1 )

  00020	83 f8 01	 cmp	 eax, 1
  00023	75 05		 jne	 SHORT $LN2@LoadScript

; 60   : 		this->m_bEnabled = true;

  00025	88 46 11	 mov	 BYTE PTR [esi+17], al

; 61   : 	else

  00028	eb 04		 jmp	 SHORT $LN3@LoadScript
$LN2@LoadScript:

; 62   : 		this->m_bEnabled = false;

  0002a	c6 46 11 00	 mov	 BYTE PTR [esi+17], 0
$LN3@LoadScript:

; 63   : 
; 64   : 	this->m_iLootTime = GetPrivateProfileInt("GameServerInfo","LootTime",20,szFileName);

  0002e	57		 push	 edi
  0002f	6a 14		 push	 20			; 00000014H
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_08BGOOMMJN@LootTime?$AA@
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0003b	ff d3		 call	 ebx

; 65   : 	this->m_iWaitPlayerTime = GetPrivateProfileInt("GameServerInfo","WaitPlayerTime",20,szFileName);

  0003d	57		 push	 edi
  0003e	6a 14		 push	 20			; 00000014H
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IFHCOMEP@WaitPlayerTime?$AA@
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0004a	89 86 a8 01 00
	00		 mov	 DWORD PTR [esi+424], eax
  00050	ff d3		 call	 ebx

; 66   : 	this->m_iTimeAttackEvent = GetPrivateProfileInt("GameServerInfo","TimeAttackTime",600,szFileName);

  00052	57		 push	 edi
  00053	68 58 02 00 00	 push	 600			; 00000258H
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KFFDMCNL@TimeAttackTime?$AA@
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00062	89 86 ac 01 00
	00		 mov	 DWORD PTR [esi+428], eax
  00068	ff d3		 call	 ebx

; 67   : 	this->m_iMixNeedZen = GetPrivateProfileInt("GameServerInfo","MixNeedZen",1000000,szFileName);

  0006a	57		 push	 edi
  0006b	68 40 42 0f 00	 push	 1000000			; 000f4240H
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CPONAIFB@MixNeedZen?$AA@
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0007a	89 86 b0 01 00
	00		 mov	 DWORD PTR [esi+432], eax
  00080	ff d3		 call	 ebx

; 68   : 
; 69   : 	g_nMysteriousPaperDropRate = GetPrivateProfileInt("GameServerInfo","MysteriousPaperDropRate",0,szFileName);

  00082	57		 push	 edi
  00083	6a 00		 push	 0
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@LHIDHHFN@MysteriousPaperDropRate?$AA@
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0008f	89 86 b4 01 00
	00		 mov	 DWORD PTR [esi+436], eax
  00095	ff d3		 call	 ebx

; 70   : 
; 71   : 	nTemp = GetPrivateProfileInt("GameServerInfo","IGPromotionOn",0,szFileName);

  00097	57		 push	 edi
  00098	6a 00		 push	 0
  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GIJEGFIP@IGPromotionOn?$AA@
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  000a4	a3 00 00 00 00	 mov	 DWORD PTR ?g_nMysteriousPaperDropRate@@3HA, eax ; g_nMysteriousPaperDropRate
  000a9	ff d3		 call	 ebx

; 72   : 
; 73   : 	if( nTemp == 1 )

  000ab	83 f8 01	 cmp	 eax, 1

; 74   : 		this->m_bPromotion = true;
; 75   : 	else
; 76   : 		this->m_bPromotion = false;
; 77   : 
; 78   : 	this->m_RewardExp.LoadScript(gDirPath.GetNewPath(FILE_EVENT_IMPERIAL_REWARD));

  000ae	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KDEFHMMJ@Event?2ImperialGuardianReward?4dat@
  000b8	0f 94 c0	 sete	 al
  000bb	88 46 12	 mov	 BYTE PTR [esi+18], al
  000be	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000c3	50		 push	 eax
  000c4	8d 8e b8 01 00
	00		 lea	 ecx, DWORD PTR [esi+440]
  000ca	e8 00 00 00 00	 call	 ?LoadScript@CImperialGuardianRewardExp@@QAEXPAD@Z ; CImperialGuardianRewardExp::LoadScript

; 79   : 	this->m_bScriptLoaded = true;
; 80   : 
; 81   : 	if( this->m_bEnabled )

  000cf	80 7e 11 00	 cmp	 BYTE PTR [esi+17], 0
  000d3	c6 46 10 01	 mov	 BYTE PTR [esi+16], 1
  000d7	74 07		 je	 SHORT $LN6@LoadScript

; 82   : 		InitEventDungeon();

  000d9	8b ce		 mov	 ecx, esi
  000db	e8 00 00 00 00	 call	 ?InitEventDungeon@CImperialGuardian@@QAEXXZ ; CImperialGuardian::InitEventDungeon
$LN6@LoadScript:
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx

; 83   : }

  000e3	5d		 pop	 ebp
  000e4	c2 04 00	 ret	 4
?LoadScript@CImperialGuardian@@QAEXPBD@Z ENDP		; CImperialGuardian::LoadScript
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?InitEventDungeon@CImperialGuardian@@QAEXXZ
_TEXT	SEGMENT
?InitEventDungeon@CImperialGuardian@@QAEXXZ PROC	; CImperialGuardian::InitEventDungeon, COMDAT
; _this$ = ecx

; 46   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 47   : 	for(int i = 0; i < IMPERIAL_GUARDIAN_MAXZONE; i++)

  00004	33 f6		 xor	 esi, esi
$LL4@InitEventD:

; 48   : 	{
; 49   : 		InitZone(i);

  00006	56		 push	 esi
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 ?InitZone@CImperialGuardian@@QAEXH@Z ; CImperialGuardian::InitZone
  0000e	46		 inc	 esi
  0000f	83 fe 04	 cmp	 esi, 4
  00012	7c f2		 jl	 SHORT $LL4@InitEventD

; 50   : 	}
; 51   : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	c3		 ret	 0
?InitEventDungeon@CImperialGuardian@@QAEXXZ ENDP	; CImperialGuardian::InitEventDungeon
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?Init@CImperialGuardian@@QAEXXZ
_TEXT	SEGMENT
?Init@CImperialGuardian@@QAEXXZ PROC			; CImperialGuardian::Init, COMDAT
; _this$ = ecx

; 34   : 	this->m_wDayOfWeek = -1;

  00000	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 35   : 	this->m_iMixNeedZen = 0;

  00005	c7 81 b4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+436], 0
  0000f	66 89 81 a4 01
	00 00		 mov	 WORD PTR [ecx+420], ax

; 36   : 	this->m_wCheatMode = 0;

  00016	33 c0		 xor	 eax, eax
  00018	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 37   : 	this->m_iDayOfWeek = -1;
; 38   : 	this->iUnk1 = 0;

  0001c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 39   : 	this->m_bScriptLoaded = 0;

  0001f	66 89 41 10	 mov	 WORD PTR [ecx+16], ax

; 40   : 	this->m_bEnabled = 0;
; 41   : 
; 42   : 	InitializeCriticalSection(&this->m_CritSection);

  00023	8d 81 cc 01 00
	00		 lea	 eax, DWORD PTR [ecx+460]
  00029	50		 push	 eax
  0002a	c7 41 08 ff ff
	ff ff		 mov	 DWORD PTR [ecx+8], -1
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 43   : }

  00037	c3		 ret	 0
?Init@CImperialGuardian@@QAEXXZ ENDP			; CImperialGuardian::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ??1CImperialGuardian@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CImperialGuardian@@UAE@XZ PROC			; CImperialGuardian::~CImperialGuardian, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CImperialGuardian@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 29   : 	DeleteCriticalSection(&this->m_CritSection);

  00025	8d 86 cc 01 00
	00		 lea	 eax, DWORD PTR [esi+460]
  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CImperialGuardian@@6B@
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 30   : }

  00038	8d 8e b8 01 00
	00		 lea	 ecx, DWORD PTR [esi+440]
  0003e	e8 00 00 00 00	 call	 ??1CImperialGuardianRewardExp@@UAE@XZ ; CImperialGuardianRewardExp::~CImperialGuardianRewardExp
  00043	68 00 00 00 00	 push	 OFFSET ??1_stZoneInfo@@QAE@XZ
  00048	6a 04		 push	 4
  0004a	6a 64		 push	 100			; 00000064H
  0004c	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5e		 pop	 esi
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CImperialGuardian@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CImperialGuardian@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CImperialGuardian@@UAE@XZ ENDP			; CImperialGuardian::~CImperialGuardian
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ??0CImperialGuardian@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CImperialGuardian@@QAE@XZ PROC			; CImperialGuardian::CImperialGuardian, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CImperialGuardian@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	68 00 00 00 00	 push	 OFFSET ??1_stZoneInfo@@QAE@XZ
  0002e	68 00 00 00 00	 push	 OFFSET ??0_stZoneInfo@@QAE@XZ ; _stZoneInfo::_stZoneInfo
  00033	6a 04		 push	 4
  00035	6a 64		 push	 100			; 00000064H
  00037	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CImperialGuardian@@6B@
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  00046	8d 8e b8 01 00
	00		 lea	 ecx, DWORD PTR [esi+440]
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00053	e8 00 00 00 00	 call	 ??0CImperialGuardianRewardExp@@QAE@XZ ; CImperialGuardianRewardExp::CImperialGuardianRewardExp

; 24   : 	Init();

  00058	8b ce		 mov	 ecx, esi
  0005a	e8 00 00 00 00	 call	 ?Init@CImperialGuardian@@QAEXXZ ; CImperialGuardian::Init

; 25   : }

  0005f	8b c6		 mov	 eax, esi
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	5e		 pop	 esi
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CImperialGuardian@@QAE@XZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1_stZoneInfo@@QAE@XZ
  00005	6a 04		 push	 4
  00007	6a 64		 push	 100			; 00000064H
  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 c0 14	 add	 eax, 20			; 00000014H
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00015	c3		 ret	 0
__ehhandler$??0CImperialGuardian@@QAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CImperialGuardian@@QAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CImperialGuardian@@QAE@XZ ENDP			; CImperialGuardian::CImperialGuardian
; Function compile flags: /Ogtp
;	COMDAT ??0_stZoneInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0_stZoneInfo@@QAE@ABU0@@Z PROC			; _stZoneInfo::_stZoneInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_stZoneInfo@@QAE@ABU0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	89 07		 mov	 DWORD PTR [edi], eax
  00034	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00037	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0003a	0f b6 46 08	 movzx	 eax, BYTE PTR [esi+8]
  0003e	88 47 08	 mov	 BYTE PTR [edi+8], al
  00041	0f b6 46 09	 movzx	 eax, BYTE PTR [esi+9]
  00045	88 47 09	 mov	 BYTE PTR [edi+9], al
  00048	0f b6 46 0a	 movzx	 eax, BYTE PTR [esi+10]
  0004c	88 47 0a	 mov	 BYTE PTR [edi+10], al
  0004f	0f b6 46 0b	 movzx	 eax, BYTE PTR [esi+11]
  00053	88 47 0b	 mov	 BYTE PTR [edi+11], al
  00056	0f b6 46 0c	 movzx	 eax, BYTE PTR [esi+12]
  0005a	88 47 0c	 mov	 BYTE PTR [edi+12], al
  0005d	0f b6 46 0d	 movzx	 eax, BYTE PTR [esi+13]
  00061	88 47 0d	 mov	 BYTE PTR [edi+13], al
  00064	0f b6 46 0e	 movzx	 eax, BYTE PTR [esi+14]
  00068	88 47 0e	 mov	 BYTE PTR [edi+14], al
  0006b	66 8b 46 10	 mov	 ax, WORD PTR [esi+16]
  0006f	66 89 47 10	 mov	 WORD PTR [edi+16], ax
  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00079	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0007c	89 47 18	 mov	 DWORD PTR [edi+24], eax
  0007f	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV01@@Z ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >
  00088	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  0008b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00092	50		 push	 eax
  00093	8d 4f 28	 lea	 ecx, DWORD PTR [edi+40]
  00096	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  0009b	8d 46 34	 lea	 eax, DWORD PTR [esi+52]
  0009e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a2	50		 push	 eax
  000a3	8d 4f 34	 lea	 ecx, DWORD PTR [edi+52]
  000a6	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  000ab	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  000ae	8d 4f 58	 lea	 ecx, DWORD PTR [edi+88]
  000b1	89 47 40	 mov	 DWORD PTR [edi+64], eax
  000b4	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000b7	89 47 44	 mov	 DWORD PTR [edi+68], eax
  000ba	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  000bd	89 47 48	 mov	 DWORD PTR [edi+72], eax
  000c0	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  000c3	89 47 4c	 mov	 DWORD PTR [edi+76], eax
  000c6	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  000c9	89 47 50	 mov	 DWORD PTR [edi+80], eax
  000cc	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  000cf	89 47 54	 mov	 DWORD PTR [edi+84], eax
  000d2	8d 46 58	 lea	 eax, DWORD PTR [esi+88]
  000d5	50		 push	 eax
  000d6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000da	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  000df	8b c7		 mov	 eax, edi
  000e1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000eb	59		 pop	 ecx
  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_stZoneInfo@@QAE@ABU0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@XZ ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::~vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >
__unwindfunclet$??0_stZoneInfo@@QAE@ABU0@@Z$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 28	 add	 ecx, 40			; 00000028H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0_stZoneInfo@@QAE@ABU0@@Z$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 34	 add	 ecx, 52			; 00000034H
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$??0_stZoneInfo@@QAE@ABU0@@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_stZoneInfo@@QAE@ABU0@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_stZoneInfo@@QAE@ABU0@@Z ENDP			; _stZoneInfo::_stZoneInfo
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1_stZoneInfo@@QAE@XZ
_TEXT	SEGMENT
??1_stZoneInfo@@QAE@XZ PROC				; _stZoneInfo::~_stZoneInfo, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00004	8b 4f 58	 mov	 ecx, DWORD PTR [edi+88]
  00007	85 c9		 test	 ecx, ecx
  00009	74 27		 je	 SHORT $LN7@stZoneInfo

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0000b	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  0000e	2b c1		 sub	 eax, ecx
  00010	c1 f8 02	 sar	 eax, 2
  00013	50		 push	 eax
  00014	51		 push	 ecx
  00015	8d 4f 58	 lea	 ecx, DWORD PTR [edi+88]
  00018	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001d	c7 47 58 00 00
	00 00		 mov	 DWORD PTR [edi+88], 0

; 1663 : 			this->_Mylast() = pointer();

  00024	c7 47 5c 00 00
	00 00		 mov	 DWORD PTR [edi+92], 0

; 1664 : 			this->_Myend() = pointer();

  0002b	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0
$LN7@stZoneInfo:

; 1656 : 		if (this->_Myfirst() != pointer())

  00032	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  00035	85 c9		 test	 ecx, ecx
  00037	74 27		 je	 SHORT $LN100@stZoneInfo

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00039	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  0003c	2b c1		 sub	 eax, ecx
  0003e	c1 f8 02	 sar	 eax, 2
  00041	50		 push	 eax
  00042	51		 push	 ecx
  00043	8d 4f 34	 lea	 ecx, DWORD PTR [edi+52]
  00046	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0004b	c7 47 34 00 00
	00 00		 mov	 DWORD PTR [edi+52], 0

; 1663 : 			this->_Mylast() = pointer();

  00052	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0

; 1664 : 			this->_Myend() = pointer();

  00059	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0
$LN100@stZoneInfo:

; 1656 : 		if (this->_Myfirst() != pointer())

  00060	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  00063	85 c9		 test	 ecx, ecx
  00065	74 27		 je	 SHORT $LN193@stZoneInfo

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00067	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  0006a	2b c1		 sub	 eax, ecx
  0006c	c1 f8 02	 sar	 eax, 2
  0006f	50		 push	 eax
  00070	51		 push	 ecx
  00071	8d 4f 28	 lea	 ecx, DWORD PTR [edi+40]
  00074	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  00079	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0

; 1663 : 			this->_Mylast() = pointer();

  00080	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 1664 : 			this->_Myend() = pointer();

  00087	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
$LN193@stZoneInfo:

; 1656 : 		if (this->_Myfirst() != pointer())

  0008e	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  00091	85 c9		 test	 ecx, ecx
  00093	74 27		 je	 SHORT $LN286@stZoneInfo

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00095	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00098	2b c1		 sub	 eax, ecx
  0009a	c1 f8 03	 sar	 eax, 3
  0009d	50		 push	 eax
  0009e	51		 push	 ecx
  0009f	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  000a2	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@I@Z ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  000a7	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0

; 1663 : 			this->_Mylast() = pointer();

  000ae	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0

; 1664 : 			this->_Myend() = pointer();

  000b5	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
$LN286@stZoneInfo:
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	c3		 ret	 0
??1_stZoneInfo@@QAE@XZ ENDP				; _stZoneInfo::~_stZoneInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xran@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xran@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ PROC	; std::vector<int,std::allocator<int> >::_Xran, COMDAT
; _this$ = ecx

; 1789 : 		_Xout_of_range("invalid vector<T> subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN4@Xran:
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 02	 sar	 eax, 2
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0002e	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0002f	c3		 ret	 0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1646 : 		if (_Unused_capacity() < _Count)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	57		 push	 edi

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  0000a	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0000d	8b c7		 mov	 eax, edi
  0000f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00012	2b c2		 sub	 eax, edx
  00014	c1 f8 02	 sar	 eax, 2

; 1646 : 		if (_Unused_capacity() < _Count)

  00017	3b c1		 cmp	 eax, ecx
  00019	73 3b		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0001b	2b 16		 sub	 edx, DWORD PTR [esi]
  0001d	53		 push	 ebx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  0001e	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00023	c1 fa 02	 sar	 edx, 2

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00026	8b c3		 mov	 eax, ebx
  00028	2b c2		 sub	 eax, edx
  0002a	3b c1		 cmp	 eax, ecx
  0002c	72 2e		 jb	 SHORT $LN134@Reserve

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0002e	2b 3e		 sub	 edi, DWORD PTR [esi]

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00030	03 d1		 add	 edx, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00032	c1 ff 02	 sar	 edi, 2

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00035	8b c7		 mov	 eax, edi
  00037	d1 e8		 shr	 eax, 1
  00039	2b d8		 sub	 ebx, eax
  0003b	3b df		 cmp	 ebx, edi
  0003d	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00040	b8 00 00 00 00	 mov	 eax, 0
  00045	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00048	3b ca		 cmp	 ecx, edx
  0004a	0f 42 ca	 cmovb	 ecx, edx

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004d	51		 push	 ecx
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reallocate
  00055	5b		 pop	 ebx
$LN2@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1651 : 			}
; 1652 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00061	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  00066	cc		 int	 3
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z PROC ; std::vector<int,std::allocator<int> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00006	ff 75 08	 push	 DWORD PTR __Count$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1620 : 		{	// move to array of exactly _Count elements

  00009	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  0000b	e8 00 00 00 00	 call	 ?allocate@?$allocator@H@std@@QAEPAHI@Z ; std::allocator<int>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);

  00010	8b 37		 mov	 esi, DWORD PTR [edi]
  00012	8b d8		 mov	 ebx, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00014	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00017	2b d6		 sub	 edx, esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  00019	83 e2 fc	 and	 edx, -4			; fffffffcH
  0001c	52		 push	 edx
  0001d	56		 push	 esi
  0001e	53		 push	 ebx
  0001f	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00024	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00029	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0002c	2b f1		 sub	 esi, ecx
  0002e	c1 fe 02	 sar	 esi, 2

; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00031	85 c9		 test	 ecx, ecx
  00033	74 11		 je	 SHORT $LN3@Reallocate

; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00035	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00038	2b c1		 sub	 eax, ecx
  0003a	c1 f8 02	 sar	 eax, 2
  0003d	50		 push	 eax
  0003e	51		 push	 ecx
  0003f	8b cf		 mov	 ecx, edi
  00041	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
$LN3@Reallocate:

; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;

  00046	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00049	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0004c	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  0004f	8d 04 b3	 lea	 eax, DWORD PTR [ebx+esi*4]
  00052	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  00055	89 1f		 mov	 DWORD PTR [edi], ebx
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx

; 1642 : 		}

  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ENDP ; std::vector<int,std::allocator<int> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z PROC ; std::vector<int,std::allocator<int> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ENDP ; std::vector<int,std::allocator<int> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z PROC ; std::vector<int,std::allocator<int> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	2b 31		 sub	 esi, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00009	b9 ff ff ff 3f	 mov	 ecx, 1073741823		; 3fffffffH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0000e	c1 fe 02	 sar	 esi, 2

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00011	8b c6		 mov	 eax, esi
  00013	d1 e8		 shr	 eax, 1
  00015	57		 push	 edi
  00016	2b c8		 sub	 ecx, eax
  00018	33 ff		 xor	 edi, edi
  0001a	3b ce		 cmp	 ecx, esi
  0001c	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0001f	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00022	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00025	5f		 pop	 edi
  00026	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  0002a	8b c2		 mov	 eax, edx
  0002c	5e		 pop	 esi

; 1612 : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ENDP ; std::vector<int,std::allocator<int> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z PROC	; std::vector<int,std::allocator<int> >::_Buy, COMDAT
; _this$ = ecx

; 1580 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00017	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001e	85 ff		 test	 edi, edi
  00020	75 08		 jne	 SHORT $LN2@Buy

; 1586 : 			return (false);

  00022	5f		 pop	 edi
  00023	32 c0		 xor	 al, al
  00025	5e		 pop	 esi

; 1596 : 		}

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN2@Buy:

; 1587 : 		else if (max_size() < _Capacity)

  0002a	81 ff ff ff ff
	3f		 cmp	 edi, 1073741823		; 3fffffffH
  00030	77 1b		 ja	 SHORT $LN109@Buy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@H@std@@QAEPAHI@Z ; std::allocator<int>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);

  00038	89 06		 mov	 DWORD PTR [esi], eax

; 1592 : 			this->_Mylast() = this->_Myfirst();

  0003a	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;

  0003d	8b 06		 mov	 eax, DWORD PTR [esi]
  0003f	8d 04 b8	 lea	 eax, DWORD PTR [eax+edi*4]
  00042	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1594 : 			}
; 1595 : 		return (true);

  00045	b0 01		 mov	 al, 1
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1596 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN109@Buy:

; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00052	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN111@Buy:
$LN108@Buy:
  00057	cc		 int	 3
?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ENDP	; std::vector<int,std::allocator<int> >::_Buy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ PROC	; std::vector<int,std::allocator<int> >::clear, COMDAT
; _this$ = ecx

; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1543 : 		}

  00005	c3		 ret	 0
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ENDP	; std::vector<int,std::allocator<int> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z PROC ; std::vector<int,std::allocator<int> >::erase, COMDAT
; _this$ = ecx

; 1484 : 		{	// erase element at where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2527 : 	ptrdiff_t _Count = _Last - _First;

  0000d	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00010	2b d6		 sub	 edx, esi

; 2528 : 	_CSTD memmove(&*_Dest, &*_First,

  00012	83 e2 fc	 and	 edx, -4			; fffffffcH
  00015	52		 push	 edx
  00016	56		 push	 esi
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2528 : 	_CSTD memmove(&*_Dest, &*_First,

  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1488 : 		--this->_Mylast();

  00023	83 47 04 fc	 add	 DWORD PTR [edi+4], -4	; fffffffcH

; 46   : 		: _Ptr(_Parg)

  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  0002a	5f		 pop	 edi
  0002b	89 08		 mov	 DWORD PTR [eax], ecx
  0002d	5e		 pop	 esi

; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z ENDP ; std::vector<int,std::allocator<int> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 31		 jae	 SHORT $LN2@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 2b		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0002a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 2a		 je	 SHORT $LN205@push_back
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00036	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00038	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN2@push_back:

; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  00042	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00045	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  00047	6a 01		 push	 1
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00050	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00053	85 c9		 test	 ecx, ecx
  00055	74 04		 je	 SHORT $LN205@push_back
  00057	8b 07		 mov	 eax, DWORD PTR [edi]
  00059	89 01		 mov	 DWORD PTR [ecx], eax
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  0005b	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z PROC	; std::vector<int,std::allocator<int> >::operator[], COMDAT
; _this$ = ecx

; 1228 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00008	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 1241 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ENDP	; std::vector<int,std::allocator<int> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?at@?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
?at@?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z PROC	; std::vector<int,std::allocator<int> >::at, COMDAT
; _this$ = ecx

; 1205 : 		{	// subscript mutable sequence with checking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	2b c2		 sub	 eax, edx

; 1206 : 		if (size() <= _Pos)

  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0000d	c1 f8 02	 sar	 eax, 2

; 1206 : 		if (size() <= _Pos)

  00010	3b c1		 cmp	 eax, ecx
  00012	76 07		 jbe	 SHORT $LN38@at

; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));

  00014	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]

; 1209 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
$LN38@at:

; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");
; 1785 : 		}
; 1786 : 
; 1787 : 	[[noreturn]] void _Xran() const
; 1788 : 		{	// report an out_of_range error
; 1789 : 		_Xout_of_range("invalid vector<T> subscript");

  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
  00020	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN40@at:
$LN37@at:
  00025	cc		 int	 3
?at@?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ENDP	; std::vector<int,std::allocator<int> >::at
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1180 : 		}

  00008	c3		 ret	 0
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z PROC ; std::vector<int,std::allocator<int> >::_Make_iter, COMDAT
; _this$ = ecx

; 1076 : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z ENDP ; std::vector<int,std::allocator<int> >::_Make_iter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx

; 1071 : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx

; 1066 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx

; 1061 : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx

; 1056 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 02	 sar	 eax, 2

; 1048 : 		}

  00009	c3		 ret	 0
?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1043 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 02	 sar	 eax, 2
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002e	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0002f	c3		 ret	 0
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 747  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 483  : 		}
; 484  : 
; 485  : 	pointer _Myfirst;	// pointer to beginning of array
; 486  : 	pointer _Mylast;	// pointer to current end of sequence
; 487  : 	pointer _Myend;	// pointer to end of array
; 488  : 	};
; 489  : 
; 490  : 		// TEMPLATE CLASS _Vector_alloc
; 491  : template<class _Alloc_types>
; 492  : 	class _Vector_alloc
; 493  : 	{	// base class for vector to hold allocator
; 494  : public:
; 495  : 	typedef _Vector_alloc<_Alloc_types> _Myt;
; 496  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 497  : 	typedef typename _Alloc_types::_Alty _Alty;
; 498  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 499  : 
; 500  : 	typedef typename _Val_types::value_type value_type;
; 501  : 	typedef typename _Val_types::size_type size_type;
; 502  : 	typedef typename _Val_types::difference_type difference_type;
; 503  : 	typedef typename _Val_types::pointer pointer;
; 504  : 	typedef typename _Val_types::const_pointer const_pointer;
; 505  : 	typedef typename _Val_types::reference reference;
; 506  : 	typedef typename _Val_types::const_reference const_reference;
; 507  : 
; 508  : 	typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
; 509  : 	typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
; 510  : 
; 511  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 512  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 513  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 514  : 		{	// construct allocator from _Al
; 515  : 		}
; 516  : 
; 517  : 	_Vector_alloc(_Alloc&& _Al)
; 518  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 519  : 		{	// construct allocator from _Al
; 520  : 		}
; 521  : 
; 522  : 	void _Copy_alloc(const _Alty& _Al)
; 523  : 		{	// replace old allocator
; 524  : 		_Pocca(_Getal(), _Al);
; 525  : 		}
; 526  : 
; 527  : 	void _Move_alloc(_Alty& _Al)
; 528  : 		{	// replace old allocator
; 529  : 		_Pocma(_Getal(), _Al);
; 530  : 		}
; 531  : 
; 532  : 	void _Swap_alloc(_Myt& _Right)
; 533  : 		{	// swap allocators
; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}
; 536  : 
; 537  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 538  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 540  : 		{	// construct allocator from _Al
; 541  : 		_Alloc_proxy();
; 542  : 		}
; 543  : 
; 544  : 	_Vector_alloc(_Alloc&& _Al)
; 545  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 546  : 		{	// construct allocator from _Al
; 547  : 		_Alloc_proxy();
; 548  : 		}
; 549  : 
; 550  : 	~_Vector_alloc() _NOEXCEPT
; 551  : 		{	// destroy proxy
; 552  : 		_Free_proxy();
; 553  : 		}
; 554  : 
; 555  : 	void _Copy_alloc(const _Alty& _Al)
; 556  : 		{	// replace old allocator
; 557  : 		_Free_proxy();
; 558  : 		_Pocca(_Getal(), _Al);
; 559  : 		_Alloc_proxy();
; 560  : 		}
; 561  : 
; 562  : 	void _Move_alloc(_Alty& _Al)
; 563  : 		{	// replace old allocator
; 564  : 		_Free_proxy();
; 565  : 		_Pocma(_Getal(), _Al);
; 566  : 		_Alloc_proxy();
; 567  : 		}
; 568  : 
; 569  : 	void _Swap_alloc(_Myt& _Right)
; 570  : 		{	// swap allocators
; 571  : 		_Pocs(_Getal(), _Right._Getal());
; 572  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 573  : 		}
; 574  : 
; 575  : 	void _Alloc_proxy()
; 576  : 		{	// construct proxy
; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());
; 579  : 		_Myproxy() = _Alproxy.allocate(1);
; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 581  : 		_Myproxy()->_Mycont = &_Get_data();
; 582  : 		}
; 583  : 
; 584  : 	void _Free_proxy()
; 585  : 		{	// destroy proxy
; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());
; 588  : 		_Orphan_all();
; 589  : 		_Alproxy.destroy(_Myproxy());
; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 591  : 		_Myproxy() = 0;
; 592  : 		}
; 593  : 
; 594  : 	_Iterator_base12 **_Getpfirst() const
; 595  : 		{	// get address of iterator chain
; 596  : 		return (_Get_data()._Getpfirst());
; 597  : 		}
; 598  : 
; 599  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 600  : 		{	// return reference to _Myproxy
; 601  : 		return (_Get_data()._Myproxy);
; 602  : 		}
; 603  : 
; 604  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 605  : 		{	// return const reference to _Myproxy
; 606  : 		return (_Get_data()._Myproxy);
; 607  : 		}
; 608  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 609  : 
; 610  : 	void _Orphan_all()
; 611  : 		{	// orphan all iterators
; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}
; 614  : 
; 615  : 	void _Swap_all(_Myt& _Right)
; 616  : 		{	// swap all iterators
; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}
; 619  : 
; 620  : 	_Alty& _Getal() _NOEXCEPT
; 621  : 		{	// return reference to allocator
; 622  : 		return (_Mypair._Get_first());
; 623  : 		}
; 624  : 
; 625  : 	const _Alty& _Getal() const _NOEXCEPT
; 626  : 		{	// return const reference to allocator
; 627  : 		return (_Mypair._Get_first());
; 628  : 		}
; 629  : 
; 630  : 	_Vector_val<_Val_types>& _Get_data() _NOEXCEPT
; 631  : 		{	// return reference to _Vector_val
; 632  : 		return (_Mypair._Get_second());
; 633  : 		}
; 634  : 
; 635  : 	const _Vector_val<_Val_types>& _Get_data() const _NOEXCEPT
; 636  : 		{	// return const reference to _Vector_val
; 637  : 		return (_Mypair._Get_second());
; 638  : 		}
; 639  : 
; 640  : 	pointer& _Myfirst() _NOEXCEPT
; 641  : 		{	// return reference to _Myfirst
; 642  : 		return (_Get_data()._Myfirst);
; 643  : 		}
; 644  : 
; 645  : 	const pointer& _Myfirst() const _NOEXCEPT
; 646  : 		{	// return const reference to _Myfirst
; 647  : 		return (_Get_data()._Myfirst);
; 648  : 		}
; 649  : 
; 650  : 	pointer& _Mylast() _NOEXCEPT
; 651  : 		{	// return reference to _Mylast
; 652  : 		return (_Get_data()._Mylast);
; 653  : 		}
; 654  : 
; 655  : 	const pointer& _Mylast() const _NOEXCEPT
; 656  : 		{	// return const reference to _Mylast
; 657  : 		return (_Get_data()._Mylast);

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi

; 747  : 		{	// construct by copying _Right

  00009	8b f9		 mov	 edi, ecx

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);
; 207  : 		}
; 208  : 
; 209  : 	bool operator!=(const _Myiter& _Right) const
; 210  : 		{	// test for iterator inequality
; 211  : 		return (!(*this == _Right));
; 212  : 		}
; 213  : 
; 214  : 	bool operator<(const _Myiter& _Right) const
; 215  : 		{	// test if this < _Right
; 216  : 		_Compat(_Right);
; 217  : 		return (this->_Ptr < _Right._Ptr);
; 218  : 		}
; 219  : 
; 220  : 	bool operator>(const _Myiter& _Right) const
; 221  : 		{	// test if this > _Right
; 222  : 		return (_Right < *this);
; 223  : 		}
; 224  : 
; 225  : 	bool operator<=(const _Myiter& _Right) const
; 226  : 		{	// test if this <= _Right
; 227  : 		return (!(_Right < *this));
; 228  : 		}
; 229  : 
; 230  : 	bool operator>=(const _Myiter& _Right) const
; 231  : 		{	// test if this >= _Right
; 232  : 		return (!(*this < _Right));
; 233  : 		}
; 234  : 
; 235  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 236  : 	void _Compat(const _Myiter& _Right) const
; 237  : 		{	// test for compatible iterator pair
; 238  : 		if (this->_Getcont() == 0
; 239  : 			|| this->_Getcont() != _Right._Getcont())
; 240  : 			{	// report error
; 241  : 			_DEBUG_ERROR("vector iterators incompatible");
; 242  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 243  : 			}
; 244  : 		}
; 245  : 
; 246  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 247  : 	void _Compat(const _Myiter& _Right) const
; 248  : 		{	// test for compatible iterator pair
; 249  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 250  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 251  : 		}
; 252  : 
; 253  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 254  : 	void _Compat(const _Myiter&) const
; 255  : 		{	// test for compatible iterator pair
; 256  : 		}
; 257  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 258  : 
; 259  : 	_Tptr _Ptr;	// pointer to element in vector
; 260  : 	};
; 261  : 
; 262  : template<class _Myvec> inline
; 263  : 	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
; 264  : 		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
; 265  : 	{	// convert to unchecked
; 266  : 	return (_Iter._Unchecked());
; 267  : 	}
; 268  : 
; 269  : template<class _Myvec> inline
; 270  : 	_Vector_const_iterator<_Myvec>&
; 271  : 		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
; 272  : 			typename _Vector_const_iterator<_Myvec>
; 273  : 				::_Unchecked_type _Right)
; 274  : 	{	// convert to checked
; 275  : 	return (_Iter._Rechecked(_Right));
; 276  : 	}
; 277  : 
; 278  : template<class _Myvec> inline
; 279  : 	_Vector_const_iterator<_Myvec> operator+(
; 280  : 		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
; 281  : 		_Vector_const_iterator<_Myvec> _Next)
; 282  : 	{	// add offset to iterator
; 283  : 	return (_Next += _Off);
; 284  : 	}
; 285  : 
; 286  : 		// TEMPLATE CLASS _Vector_iterator
; 287  : template<class _Myvec>
; 288  : 	class _Vector_iterator
; 289  : 		: public _Vector_const_iterator<_Myvec>
; 290  : 	{	// iterator for mutable vector
; 291  : public:
; 292  : 	typedef _Vector_iterator<_Myvec> _Myiter;
; 293  : 	typedef _Vector_const_iterator<_Myvec> _Mybase;
; 294  : 	typedef random_access_iterator_tag iterator_category;
; 295  : 
; 296  : 	typedef typename _Myvec::value_type value_type;
; 297  : 	typedef typename _Myvec::difference_type difference_type;
; 298  : 	typedef typename _Myvec::pointer pointer;
; 299  : 	typedef typename _Myvec::reference reference;
; 300  : 
; 301  : 	_Vector_iterator()
; 302  : 		{	// construct with null vector pointer
; 303  : 		}
; 304  : 
; 305  : 	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
; 306  : 		: _Mybase(_Parg, _Pvector)
; 307  : 		{	// construct with pointer _Parg
; 308  : 		}
; 309  : 
; 310  : 	typedef pointer _Unchecked_type;
; 311  : 
; 312  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 313  : 		{	// reset from unchecked iterator
; 314  : 		this->_Ptr = _Right;
; 315  : 		return (*this);
; 316  : 		}
; 317  : 
; 318  : 	_Unchecked_type _Unchecked() const
; 319  : 		{	// make an unchecked iterator
; 320  : 		return (_Unchecked_type(this->_Ptr));
; 321  : 		}
; 322  : 
; 323  : 	reference operator*() const
; 324  : 		{	// return designated object
; 325  : 		return ((reference)**(_Mybase *)this);
; 326  : 		}
; 327  : 
; 328  : 	pointer operator->() const
; 329  : 		{	// return pointer to class object
; 330  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 331  : 		}
; 332  : 
; 333  : 	_Myiter& operator++()
; 334  : 		{	// preincrement
; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);
; 337  : 		}
; 338  : 
; 339  : 	_Myiter operator++(int)
; 340  : 		{	// postincrement
; 341  : 		_Myiter _Tmp = *this;
; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}
; 345  : 
; 346  : 	_Myiter& operator--()
; 347  : 		{	// predecrement
; 348  : 		--*(_Mybase *)this;
; 349  : 		return (*this);
; 350  : 		}
; 351  : 
; 352  : 	_Myiter operator--(int)
; 353  : 		{	// postdecrement
; 354  : 		_Myiter _Tmp = *this;
; 355  : 		--*this;
; 356  : 		return (_Tmp);
; 357  : 		}
; 358  : 
; 359  : 	_Myiter& operator+=(difference_type _Off)
; 360  : 		{	// increment by integer
; 361  : 		*(_Mybase *)this += _Off;
; 362  : 		return (*this);
; 363  : 		}
; 364  : 
; 365  : 	_Myiter operator+(difference_type _Off) const
; 366  : 		{	// return this + integer
; 367  : 		_Myiter _Tmp = *this;
; 368  : 		return (_Tmp += _Off);
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator-=(difference_type _Off)
; 372  : 		{	// decrement by integer
; 373  : 		return (*this += -_Off);
; 374  : 		}
; 375  : 
; 376  : 	_Myiter operator-(difference_type _Off) const
; 377  : 		{	// return this - integer
; 378  : 		_Myiter _Tmp = *this;
; 379  : 		return (_Tmp -= _Off);
; 380  : 		}
; 381  : 
; 382  : 	difference_type operator-(const _Mybase& _Right) const
; 383  : 		{	// return difference of iterators
; 384  : 		return (*(_Mybase *)this - _Right);
; 385  : 		}
; 386  : 
; 387  : 	reference operator[](difference_type _Off) const
; 388  : 		{	// subscript
; 389  : 		return (*(*this + _Off));
; 390  : 		}
; 391  : 	};
; 392  : 
; 393  : template<class _Myvec> inline
; 394  : 	typename _Vector_iterator<_Myvec>::_Unchecked_type
; 395  : 		_Unchecked(_Vector_iterator<_Myvec> _Iter)
; 396  : 	{	// convert to unchecked
; 397  : 	return (_Iter._Unchecked());
; 398  : 	}
; 399  : 
; 400  : template<class _Myvec> inline
; 401  : 	_Vector_iterator<_Myvec>&
; 402  : 		_Rechecked(_Vector_iterator<_Myvec>& _Iter,
; 403  : 			typename _Vector_iterator<_Myvec>
; 404  : 				::_Unchecked_type _Right)
; 405  : 	{	// convert to checked
; 406  : 	return (_Iter._Rechecked(_Right));
; 407  : 	}
; 408  : 
; 409  : template<class _Myvec> inline
; 410  : 	_Vector_iterator<_Myvec> operator+(
; 411  : 		typename _Vector_iterator<_Myvec>::difference_type _Off,
; 412  : 		_Vector_iterator<_Myvec> _Next)
; 413  : 	{	// add offset to iterator
; 414  : 	return (_Next += _Off);
; 415  : 	}
; 416  : 
; 417  : 		// vector TYPE WRAPPERS
; 418  : template<class _Value_type,
; 419  : 	class _Size_type,
; 420  : 	class _Difference_type,
; 421  : 	class _Pointer,
; 422  : 	class _Const_pointer,
; 423  : 	class _Reference,
; 424  : 	class _Const_reference>
; 425  : 	struct _Vec_iter_types
; 426  : 	{	// wraps types needed by iterators
; 427  : 	typedef _Value_type value_type;
; 428  : 	typedef _Size_type size_type;
; 429  : 	typedef _Difference_type difference_type;
; 430  : 	typedef _Pointer pointer;
; 431  : 	typedef _Const_pointer const_pointer;
; 432  : 	typedef _Reference reference;
; 433  : 	typedef _Const_reference const_reference;
; 434  : 	};
; 435  : 
; 436  : template<class _Ty,
; 437  : 	class _Alloc0>
; 438  : 	struct _Vec_base_types
; 439  : 	{	// types needed for a container base
; 440  : 	typedef _Alloc0 _Alloc;
; 441  : 	typedef _Vec_base_types<_Ty, _Alloc> _Myt;
; 442  : 
; 443  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 444  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 445  : 
; 446  : 
; 447  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 448  : 		_Simple_types<typename _Alty::value_type>,
; 449  : 		_Vec_iter_types<typename _Alty::value_type,
; 450  : 			typename _Alty::size_type,
; 451  : 			typename _Alty::difference_type,
; 452  : 			typename _Alty::pointer,
; 453  : 			typename _Alty::const_pointer,
; 454  : 			typename _Alty::reference,
; 455  : 			typename _Alty::const_reference> >::type
; 456  : 		_Val_types;
; 457  : 	};
; 458  : 
; 459  : 		// TEMPLATE CLASS _Vector_val
; 460  : template<class _Val_types>
; 461  : 	class _Vector_val
; 462  : 		: public _Container_base
; 463  : 	{	// base class for vector to hold data
; 464  : public:
; 465  : 	typedef _Vector_val<_Val_types> _Myt;
; 466  : 
; 467  : 	typedef typename _Val_types::value_type value_type;
; 468  : 	typedef typename _Val_types::size_type size_type;
; 469  : 	typedef typename _Val_types::difference_type difference_type;
; 470  : 	typedef typename _Val_types::pointer pointer;
; 471  : 	typedef typename _Val_types::const_pointer const_pointer;
; 472  : 	typedef typename _Val_types::reference reference;
; 473  : 	typedef typename _Val_types::const_reference const_reference;
; 474  : 
; 475  : 	typedef _Vector_iterator<_Myt> iterator;
; 476  : 	typedef _Vector_const_iterator<_Myt> const_iterator;
; 477  : 
; 478  : 	_Vector_val()
; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  0000b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 481  : 		_Mylast = pointer();

  00011	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 482  : 		_Myend = pointer();

  00018	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 757  : 
; 758  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 759  : 		: _Mybase(_Al)
; 760  : 		{	// construct by copying _Right, allocator
; 761  : 		if (_Buy(_Right.size()))
; 762  : 			_TRY_BEGIN
; 763  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 764  : 				this->_Myfirst());
; 765  : 			_CATCH_ALL
; 766  : 			_Tidy();
; 767  : 			_RERAISE;
; 768  : 			_CATCH_END
; 769  : 		}
; 770  : 
; 771  : 	template<class _Iter,
; 772  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 773  : 			void>::type>
; 774  : 		vector(_Iter _First, _Iter _Last)
; 775  : 		: _Mybase()
; 776  : 		{	// construct from [_First, _Last)
; 777  : 		_Construct(_First, _Last);
; 778  : 		}
; 779  : 
; 780  : 	template<class _Iter,
; 781  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 782  : 			void>::type>
; 783  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 784  : 		: _Mybase(_Al)
; 785  : 		{	// construct from [_First, _Last) with allocator
; 786  : 		_Construct(_First, _Last);
; 787  : 		}
; 788  : 
; 789  : 	template<class _Iter>
; 790  : 		void _Construct(_Iter _First, _Iter _Last)
; 791  : 		{	// initialize with [_First, _Last)
; 792  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 793  : 		}
; 794  : 
; 795  : 	template<class _Iter>
; 796  : 		void _Construct(_Iter _First, _Iter _Last,
; 797  : 			input_iterator_tag)
; 798  : 		{	// initialize with [_First, _Last), input iterators
; 799  : 		_TRY_BEGIN
; 800  : 
; 801  : 		for (; _First != _Last; ++_First)
; 802  : 			emplace_back(*_First);
; 803  : 
; 804  : 		_CATCH_ALL
; 805  : 		_Tidy();
; 806  : 		_RERAISE;
; 807  : 		_CATCH_END
; 808  : 		}
; 809  : 
; 810  : 	template<class _Iter>
; 811  : 		void _Construct(_Iter _First, _Iter _Last,
; 812  : 			forward_iterator_tag)
; 813  : 		{	// initialize with [_First, _Last), forward iterators
; 814  : 		if (_Buy(_STD distance(_First, _Last)))
; 815  : 			{	// nonzero, fill it
; 816  : 			_TRY_BEGIN
; 817  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 818  : 			_CATCH_ALL
; 819  : 			_Tidy();
; 820  : 			_RERAISE;
; 821  : 			_CATCH_END
; 822  : 			}
; 823  : 		}
; 824  : 
; 825  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 826  : 		{	// construct from _Count * *_Pval
; 827  : 		if (_Buy(_Count))
; 828  : 			{	// nonzero, fill it
; 829  : 			_TRY_BEGIN
; 830  : 			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
; 831  : 			_CATCH_ALL
; 832  : 			_Tidy();
; 833  : 			_RERAISE;
; 834  : 			_CATCH_END
; 835  : 			}
; 836  : 		}
; 837  : 
; 838  : 	vector(_Myt&& _Right) _NOEXCEPT
; 839  : 		: _Mybase(_STD move(_Right._Getal()))
; 840  : 		{	// construct by moving _Right
; 841  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 842  : 		}
; 843  : 
; 844  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 845  : 		: _Mybase(_Al)
; 846  : 		{	// construct by moving _Right, allocator
; 847  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 848  : 		}
; 849  : 
; 850  : 	_Myt& operator=(_Myt&& _Right)
; 851  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 852  : 			|| _Alty::is_always_equal::value)
; 853  : 		{	// assign by moving _Right
; 854  : 		if (this != &_Right)
; 855  : 			{	// different, assign it
; 856  : 			_Tidy();
; 857  : 			if (_Alty::propagate_on_container_move_assignment::value
; 858  : 				&& this->_Getal() != _Right._Getal())
; 859  : 				this->_Move_alloc(_Right._Getal());
; 860  : 
; 861  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 862  : 			}
; 863  : 		return (*this);
; 864  : 		}
; 865  : 
; 866  : 	void _Assign_rv(_Myt&& _Right, true_type)
; 867  : 		{	// move from _Right, stealing its contents
; 868  : 		this->_Swap_all((_Myt&)_Right);
; 869  : 		this->_Myfirst() = _Right._Myfirst();
; 870  : 		this->_Mylast() = _Right._Mylast();
; 871  : 		this->_Myend() = _Right._Myend();
; 872  : 
; 873  : 		_Right._Myfirst() = pointer();
; 874  : 		_Right._Mylast() = pointer();
; 875  : 		_Right._Myend() = pointer();
; 876  : 		}
; 877  : 
; 878  : 	void _Assign_rv(_Myt&& _Right, false_type)
; 879  : 		{	// move from _Right, possibly moving its contents
; 880  : 		if (get_allocator() == _Right.get_allocator())
; 881  : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 882  : 		else
; 883  : 			_Construct(_STD make_move_iterator(_Right.begin()),
; 884  : 				_STD make_move_iterator(_Right.end()));
; 885  : 		}
; 886  : 
; 887  : 	void _Assign_rv(_Myt&& _Right)
; 888  : 		{	// assign by moving _Right
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 890  : 			typename _Alty::propagate_on_container_move_assignment());
; 891  : 		}
; 892  : 
; 893  : 
; 894  : 	void push_back(value_type&& _Val)
; 895  : 		{	// insert by moving into element at end
; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 899  : 			if (this->_Mylast() == this->_Myend())
; 900  : 				_Reserve(1);
; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 902  : 			this->_Getal().construct(this->_Mylast(),
; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();
; 905  : 			}
; 906  : 		else
; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())
; 909  : 				_Reserve(1);
; 910  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 911  : 			this->_Getal().construct(this->_Mylast(),
; 912  : 				_STD forward<value_type>(_Val));
; 913  : 			++this->_Mylast();
; 914  : 			}
; 915  : 		}
; 916  : 
; 917  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 918  : 		{	// insert by moving _Val at _Where
; 919  : 		return (emplace(_Where, _STD move(_Val)));
; 920  : 		}
; 921  : 
; 922  : 	template<class... _Valty>
; 923  : 		void emplace_back(_Valty&&... _Val)
; 924  : 		{	// insert by moving into element at end
; 925  : 		if (this->_Mylast() == this->_Myend())
; 926  : 			_Reserve(1);
; 927  : 		_Orphan_range(this->_Mylast(), this->_Mylast());
; 928  : 		this->_Getal().construct(this->_Mylast(),
; 929  : 			_STD forward<_Valty>(_Val)...);
; 930  : 		++this->_Mylast();
; 931  : 		}
; 932  : 
; 933  : 	template<class... _Valty>
; 934  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 935  : 		{	// insert by moving _Val at _Where
; 936  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 937  : 
; 938  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 939  : 		if (size() < _Off)
; 940  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 941  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 942  : 
; 943  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 944  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 945  : 		return (begin() + _Off);
; 946  : 		}
; 947  : 
; 948  : 
; 949  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Construct(_Ilist.begin(), _Ilist.end());
; 954  : 		}
; 955  : 
; 956  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 957  : 		{	// assign initializer_list
; 958  : 		assign(_Ilist.begin(), _Ilist.end());
; 959  : 		return (*this);
; 960  : 		}
; 961  : 
; 962  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 963  : 		{	// assign initializer_list
; 964  : 		assign(_Ilist.begin(), _Ilist.end());
; 965  : 		}
; 966  : 
; 967  : 	iterator insert(const_iterator _Where,
; 968  : 		_XSTD initializer_list<value_type> _Ilist)
; 969  : 		{	// insert initializer_list
; 970  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 971  : 		}
; 972  : 
; 973  : 	~vector() _NOEXCEPT
; 974  : 		{	// destroy the object
; 975  : 		_Tidy();
; 976  : 		}
; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0001f	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00022	2b 33		 sub	 esi, DWORD PTR [ebx]
  00024	c1 fe 02	 sar	 esi, 2

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();

  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 1582 : 		this->_Mylast() = pointer();

  0002d	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1583 : 		this->_Myend() = pointer();

  00034	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1584 : 
; 1585 : 		if (_Capacity == 0)

  0003b	85 f6		 test	 esi, esi
  0003d	74 3d		 je	 SHORT $LN5@vector

; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)

  0003f	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  00045	77 3e		 ja	 SHORT $LN255@vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00047	56		 push	 esi
  00048	e8 00 00 00 00	 call	 ?allocate@?$allocator@H@std@@QAEPAHI@Z ; std::allocator<int>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);

  0004d	89 07		 mov	 DWORD PTR [edi], eax

; 1592 : 			this->_Mylast() = this->_Myfirst();

  0004f	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;

  00052	8b 07		 mov	 eax, DWORD PTR [edi]
  00054	8d 04 b0	 lea	 eax, DWORD PTR [eax+esi*4]
  00057	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 46   : 		: _Ptr(_Parg)

  0005a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0005d	8b 03		 mov	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  0005f	2b c8		 sub	 ecx, eax
  00061	c1 f9 02	 sar	 ecx, 2

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  00064	8d 34 8d 00 00
	00 00		 lea	 esi, DWORD PTR [ecx*4]
  0006b	56		 push	 esi
  0006c	50		 push	 eax
  0006d	ff 37		 push	 DWORD PTR [edi]
  0006f	e8 00 00 00 00	 call	 _memmove
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
  00077	03 c6		 add	 eax, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 750  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),

  00079	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN5@vector:

; 751  : 				this->_Myfirst());
; 752  : 			_CATCH_ALL
; 753  : 			_Tidy();
; 754  : 			_RERAISE;
; 755  : 			_CATCH_END
; 756  : 		}

  0007c	8b c7		 mov	 eax, edi
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
$LN255@vector:

; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0008a	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN257@vector:
$LN254@vector:
  0008f	cc		 int	 3
??0?$vector@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABQAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@$$QAV?$allocator@H@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@$$QAV?$allocator@H@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 520  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 520  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@$$QAV?$allocator@H@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 139  : 	}
; 140  : 
; 141  : 		// TEMPLATE FUNCTION _Construct
; 142  : template<class _Ty1,
; 143  : 	class _Ty2> inline
; 144  : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 145  : 	{	// construct object at _Ptr with value _Val
; 146  : 	void *_Vptr = _Ptr;
; 147  : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 148  : 	}
; 149  : 
; 150  : template<class _Ty1> inline
; 151  : 	void _Construct(_Ty1 *_Ptr)
; 152  : 	{	// construct object at _Ptr with default value
; 153  : 	void *_Vptr = _Ptr;
; 154  : 
; 155  : 	::new (_Vptr) _Ty1();
; 156  : 	}
; 157  : 
; 158  : 		// TEMPLATE FUNCTION _Destroy
; 159  : template<class _Ty> inline
; 160  : 	void _Destroy(_Ty *_Ptr)
; 161  : 	{	// destroy object at _Ptr
; 162  : 	_Ptr->~_Ty();
; 163  : 	}
; 164  : 
; 165  : 		// TEMPLATE FUNCTION _Destroy_range
; 166  : template<class _Alloc> inline
; 167  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 168  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 169  : 		_Nonscalar_ptr_iterator_tag)
; 170  : 	{	// destroy [_First, _Last), arbitrary type
; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000e	77 31		 ja	 SHORT $LN16@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN7@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN18@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN19@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN20@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN21@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN7@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 909  : 		_Mybase::deallocate(_Ptr, _Count);
; 910  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN16@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  0005a	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@H@std@@QAEPAHI@Z ; std::allocator<int>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@ABV?$allocator@H@1@@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@ABV?$allocator@H@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBE?AU12@U_Nil@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 1
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBE?AU12@U_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 828  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 829  : 		return (_Mytraits::select_on_container_copy_construction(*this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 830  : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBE?AU12@U_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@H@std@@@std@@SA?AV?$allocator@H@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@H@std@@@std@@SA?AV?$allocator@H@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<int> >::select_on_container_copy_construction, COMDAT

; 790  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 791  : 		return (_Al);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 792  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@H@std@@@std@@SA?AV?$allocator@H@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<int> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z PROC ; std::allocator_traits<std::allocator<int> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z ENDP ; std::allocator_traits<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@H@std@@QAEPAHI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@H@std@@QAEPAHI@Z PROC		; std::allocator<int>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00013	77 3c		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	c1 e0 02	 shl	 eax, 2

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@H@std@@QAEPAHI@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000e	77 31		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 639  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005a	cc		 int	 3
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@H@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@H@std@@QAE@ABV01@@Z PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@H@std@@QAE@ABV01@@Z ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IBEXPAU_stMonsterIndexInfo@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IBEXPAU_stMonsterIndexInfo@@0@Z PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IBEXPAU_stMonsterIndexInfo@@0@Z ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xran@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xran@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Xran, COMDAT
; _this$ = ecx

; 1789 : 		_Xout_of_range("invalid vector<T> subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN4@Xran:
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 03	 sar	 eax, 3
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@I@Z ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0002e	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0002f	c3		 ret	 0
?_Tidy@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1646 : 		if (_Unused_capacity() < _Count)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	57		 push	 edi

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  0000a	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0000d	8b c7		 mov	 eax, edi
  0000f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00012	2b c2		 sub	 eax, edx
  00014	c1 f8 03	 sar	 eax, 3

; 1646 : 		if (_Unused_capacity() < _Count)

  00017	3b c1		 cmp	 eax, ecx
  00019	73 3b		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0001b	2b 16		 sub	 edx, DWORD PTR [esi]
  0001d	53		 push	 ebx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  0001e	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00023	c1 fa 03	 sar	 edx, 3

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00026	8b c3		 mov	 eax, ebx
  00028	2b c2		 sub	 eax, edx
  0002a	3b c1		 cmp	 eax, ecx
  0002c	72 2e		 jb	 SHORT $LN134@Reserve

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0002e	2b 3e		 sub	 edi, DWORD PTR [esi]

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00030	03 d1		 add	 edx, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00032	c1 ff 03	 sar	 edi, 3

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00035	8b c7		 mov	 eax, edi
  00037	d1 e8		 shr	 eax, 1
  00039	2b d8		 sub	 ebx, eax
  0003b	3b df		 cmp	 ebx, edi
  0003d	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00040	b8 00 00 00 00	 mov	 eax, 0
  00045	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00048	3b ca		 cmp	 ecx, edx
  0004a	0f 42 ca	 cmovb	 ecx, edx

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004d	51		 push	 ecx
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Reallocate
  00055	5b		 pop	 ebx
$LN2@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1651 : 			}
; 1652 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00061	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  00066	cc		 int	 3
?_Reserve@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00030	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_stMonsterIndexInfo@@@std@@QAEPAU_stMonsterIndexInfo@@I@Z ; std::allocator<_stMonsterIndexInfo>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00038	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0003b	8b f8		 mov	 edi, eax

; 1622 : 
; 1623 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00044	6a 00		 push	 0
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	ff 76 04	 push	 DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0004b	89 7d ec	 mov	 DWORD PTR __Ptr$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0004e	ff 36		 push	 DWORD PTR [esi]
  00050	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_stMonsterIndexInfo@@PAU1@V?$allocator@U_stMonsterIndexInfo@@@std@@U1@@std@@YAPAU_stMonsterIndexInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stMonsterIndexInfo *,_stMonsterIndexInfo *,std::allocator<_stMonsterIndexInfo>,_stMonsterIndexInfo>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00057	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0005a	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  0005d	2b d9		 sub	 ebx, ecx
  0005f	c1 fb 03	 sar	 ebx, 3

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00062	85 c9		 test	 ecx, ecx
  00064	74 11		 je	 SHORT $LN3@Reallocate

; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00066	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00069	2b c1		 sub	 eax, ecx
  0006b	c1 f8 03	 sar	 eax, 3
  0006e	50		 push	 eax
  0006f	51		 push	 ecx
  00070	8b ce		 mov	 ecx, esi
  00072	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@I@Z ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::deallocate
$LN3@Reallocate:

; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;

  00077	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0007a	8d 04 c7	 lea	 eax, DWORD PTR [edi+eax*8]
  0007d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  00080	8d 04 df	 lea	 eax, DWORD PTR [edi+ebx*8]
  00083	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  00086	89 3e		 mov	 DWORD PTR [esi], edi

; 1642 : 		}

  00088	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00092	59		 pop	 ecx
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z$0:

; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);

  0009c	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0009f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  000a5	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@I@Z ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::deallocate

; 1627 : 		_RERAISE;

  000aa	6a 00		 push	 0
  000ac	6a 00		 push	 0
  000ae	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN175@Reallocate:
$LN174@Reallocate:
  000b3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IBE_NPBU_stMonsterIndexInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IBE_NPBU_stMonsterIndexInfo@@@Z PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IBE_NPBU_stMonsterIndexInfo@@@Z ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IBEII@Z PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	2b 31		 sub	 esi, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00009	b9 ff ff ff 1f	 mov	 ecx, 536870911		; 1fffffffH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0000e	c1 fe 03	 sar	 esi, 3

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00011	8b c6		 mov	 eax, esi
  00013	d1 e8		 shr	 eax, 1
  00015	57		 push	 edi
  00016	2b c8		 sub	 ecx, eax
  00018	33 ff		 xor	 edi, edi
  0001a	3b ce		 cmp	 ecx, esi
  0001c	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0001f	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00022	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00025	5f		 pop	 edi
  00026	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  0002a	8b c2		 mov	 eax, edx
  0002c	5e		 pop	 esi

; 1612 : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?_Grow_to@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IBEII@Z ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXPAU_stMonsterIndexInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXPAU_stMonsterIndexInfo@@0@Z PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXPAU_stMonsterIndexInfo@@0@Z ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAE_NI@Z PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1580 : 		{	// allocate array with _Capacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Capacity$[ebp]
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00017	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001e	85 ff		 test	 edi, edi
  00020	75 08		 jne	 SHORT $LN2@Buy

; 1586 : 			return (false);

  00022	5f		 pop	 edi
  00023	32 c0		 xor	 al, al
  00025	5e		 pop	 esi

; 1596 : 		}

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN2@Buy:

; 1587 : 		else if (max_size() < _Capacity)

  0002a	81 ff ff ff ff
	1f		 cmp	 edi, 536870911		; 1fffffffH
  00030	77 1b		 ja	 SHORT $LN109@Buy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_stMonsterIndexInfo@@@std@@QAEPAU_stMonsterIndexInfo@@I@Z ; std::allocator<_stMonsterIndexInfo>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);

  00038	89 06		 mov	 DWORD PTR [esi], eax

; 1592 : 			this->_Mylast() = this->_Myfirst();

  0003a	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;

  0003d	8b 06		 mov	 eax, DWORD PTR [esi]
  0003f	8d 04 f8	 lea	 eax, DWORD PTR [eax+edi*8]
  00042	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1594 : 			}
; 1595 : 		return (true);

  00045	b0 01		 mov	 al, 1
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 1596 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN109@Buy:

; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00052	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN111@Buy:
$LN108@Buy:
  00057	cc		 int	 3
?_Buy@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Buy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::clear, COMDAT
; _this$ = ecx

; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1543 : 		}

  00005	c3		 ret	 0
?clear@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXABU_stMonsterIndexInfo@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXABU_stMonsterIndexInfo@@@Z PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 38		 jae	 SHORT $LN2@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 32		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 03	 sar	 edi, 3

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0002a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002d	85 d2		 test	 edx, edx
  0002f	74 37		 je	 SHORT $LN205@push_back
  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8b 04 f9	 mov	 eax, DWORD PTR [ecx+edi*8]
  00036	89 02		 mov	 DWORD PTR [edx], eax
  00038	8b 44 f9 04	 mov	 eax, DWORD PTR [ecx+edi*8+4]
  0003c	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  0003f	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
$LN2@push_back:

; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  00049	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004c	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  0004e	6a 01		 push	 1
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?_Reserve@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00057	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005a	85 c9		 test	 ecx, ecx
  0005c	74 0a		 je	 SHORT $LN205@push_back
  0005e	8b 07		 mov	 eax, DWORD PTR [edi]
  00060	89 01		 mov	 DWORD PTR [ecx], eax
  00062	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00065	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00068	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
?push_back@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXABU_stMonsterIndexInfo@@@Z ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?at@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEAAU_stMonsterIndexInfo@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
?at@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEAAU_stMonsterIndexInfo@@I@Z PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::at, COMDAT
; _this$ = ecx

; 1205 : 		{	// subscript mutable sequence with checking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	2b c2		 sub	 eax, edx

; 1206 : 		if (size() <= _Pos)

  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0000d	c1 f8 03	 sar	 eax, 3

; 1206 : 		if (size() <= _Pos)

  00010	3b c1		 cmp	 eax, ecx
  00012	76 07		 jbe	 SHORT $LN38@at

; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));

  00014	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]

; 1209 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
$LN38@at:

; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");
; 1785 : 		}
; 1786 : 
; 1787 : 	[[noreturn]] void _Xran() const
; 1788 : 		{	// report an out_of_range error
; 1789 : 		_Xout_of_range("invalid vector<T> subscript");

  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
  00020	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN40@at:
$LN37@at:
  00025	cc		 int	 3
?at@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEAAU_stMonsterIndexInfo@@I@Z ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::at
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 1180 : 		}

  00008	c3		 ret	 0
?size@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@2@XZ PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::end, COMDAT
; _this$ = ecx

; 1071 : 		{	// return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@2@XZ PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::end, COMDAT
; _this$ = ecx

; 1066 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@2@XZ PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::begin, COMDAT
; _this$ = ecx

; 1061 : 		{	// return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@2@XZ PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::begin, COMDAT
; _this$ = ecx

; 1056 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 03	 sar	 eax, 3

; 1048 : 		}

  00009	c3		 ret	 0
?_Unused_capacity@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 1043 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::~vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 03	 sar	 eax, 3
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@I@Z ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002e	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0002f	c3		 ret	 0
??1?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::~vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Right$ = 8						; size = 4
??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >, COMDAT
; _this$ = ecx

; 747  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 483  : 		}
; 484  : 
; 485  : 	pointer _Myfirst;	// pointer to beginning of array
; 486  : 	pointer _Mylast;	// pointer to current end of sequence
; 487  : 	pointer _Myend;	// pointer to end of array
; 488  : 	};
; 489  : 
; 490  : 		// TEMPLATE CLASS _Vector_alloc
; 491  : template<class _Alloc_types>
; 492  : 	class _Vector_alloc
; 493  : 	{	// base class for vector to hold allocator
; 494  : public:
; 495  : 	typedef _Vector_alloc<_Alloc_types> _Myt;
; 496  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 497  : 	typedef typename _Alloc_types::_Alty _Alty;
; 498  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 499  : 
; 500  : 	typedef typename _Val_types::value_type value_type;
; 501  : 	typedef typename _Val_types::size_type size_type;
; 502  : 	typedef typename _Val_types::difference_type difference_type;
; 503  : 	typedef typename _Val_types::pointer pointer;
; 504  : 	typedef typename _Val_types::const_pointer const_pointer;
; 505  : 	typedef typename _Val_types::reference reference;
; 506  : 	typedef typename _Val_types::const_reference const_reference;
; 507  : 
; 508  : 	typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
; 509  : 	typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
; 510  : 
; 511  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 512  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 513  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 514  : 		{	// construct allocator from _Al
; 515  : 		}
; 516  : 
; 517  : 	_Vector_alloc(_Alloc&& _Al)
; 518  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 519  : 		{	// construct allocator from _Al
; 520  : 		}
; 521  : 
; 522  : 	void _Copy_alloc(const _Alty& _Al)
; 523  : 		{	// replace old allocator
; 524  : 		_Pocca(_Getal(), _Al);
; 525  : 		}
; 526  : 
; 527  : 	void _Move_alloc(_Alty& _Al)
; 528  : 		{	// replace old allocator
; 529  : 		_Pocma(_Getal(), _Al);
; 530  : 		}
; 531  : 
; 532  : 	void _Swap_alloc(_Myt& _Right)
; 533  : 		{	// swap allocators
; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}
; 536  : 
; 537  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 538  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 540  : 		{	// construct allocator from _Al
; 541  : 		_Alloc_proxy();
; 542  : 		}
; 543  : 
; 544  : 	_Vector_alloc(_Alloc&& _Al)
; 545  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 546  : 		{	// construct allocator from _Al
; 547  : 		_Alloc_proxy();
; 548  : 		}
; 549  : 
; 550  : 	~_Vector_alloc() _NOEXCEPT
; 551  : 		{	// destroy proxy
; 552  : 		_Free_proxy();
; 553  : 		}
; 554  : 
; 555  : 	void _Copy_alloc(const _Alty& _Al)
; 556  : 		{	// replace old allocator
; 557  : 		_Free_proxy();
; 558  : 		_Pocca(_Getal(), _Al);
; 559  : 		_Alloc_proxy();
; 560  : 		}
; 561  : 
; 562  : 	void _Move_alloc(_Alty& _Al)
; 563  : 		{	// replace old allocator
; 564  : 		_Free_proxy();
; 565  : 		_Pocma(_Getal(), _Al);
; 566  : 		_Alloc_proxy();
; 567  : 		}
; 568  : 
; 569  : 	void _Swap_alloc(_Myt& _Right)
; 570  : 		{	// swap allocators
; 571  : 		_Pocs(_Getal(), _Right._Getal());
; 572  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 573  : 		}
; 574  : 
; 575  : 	void _Alloc_proxy()
; 576  : 		{	// construct proxy
; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());
; 579  : 		_Myproxy() = _Alproxy.allocate(1);
; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 581  : 		_Myproxy()->_Mycont = &_Get_data();
; 582  : 		}
; 583  : 
; 584  : 	void _Free_proxy()
; 585  : 		{	// destroy proxy
; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());
; 588  : 		_Orphan_all();
; 589  : 		_Alproxy.destroy(_Myproxy());
; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 591  : 		_Myproxy() = 0;
; 592  : 		}
; 593  : 
; 594  : 	_Iterator_base12 **_Getpfirst() const
; 595  : 		{	// get address of iterator chain
; 596  : 		return (_Get_data()._Getpfirst());
; 597  : 		}
; 598  : 
; 599  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 600  : 		{	// return reference to _Myproxy
; 601  : 		return (_Get_data()._Myproxy);
; 602  : 		}
; 603  : 
; 604  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 605  : 		{	// return const reference to _Myproxy
; 606  : 		return (_Get_data()._Myproxy);
; 607  : 		}
; 608  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 609  : 
; 610  : 	void _Orphan_all()
; 611  : 		{	// orphan all iterators
; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}
; 614  : 
; 615  : 	void _Swap_all(_Myt& _Right)
; 616  : 		{	// swap all iterators
; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}
; 619  : 
; 620  : 	_Alty& _Getal() _NOEXCEPT
; 621  : 		{	// return reference to allocator
; 622  : 		return (_Mypair._Get_first());
; 623  : 		}
; 624  : 
; 625  : 	const _Alty& _Getal() const _NOEXCEPT
; 626  : 		{	// return const reference to allocator
; 627  : 		return (_Mypair._Get_first());
; 628  : 		}
; 629  : 
; 630  : 	_Vector_val<_Val_types>& _Get_data() _NOEXCEPT
; 631  : 		{	// return reference to _Vector_val
; 632  : 		return (_Mypair._Get_second());
; 633  : 		}
; 634  : 
; 635  : 	const _Vector_val<_Val_types>& _Get_data() const _NOEXCEPT
; 636  : 		{	// return const reference to _Vector_val
; 637  : 		return (_Mypair._Get_second());
; 638  : 		}
; 639  : 
; 640  : 	pointer& _Myfirst() _NOEXCEPT
; 641  : 		{	// return reference to _Myfirst
; 642  : 		return (_Get_data()._Myfirst);
; 643  : 		}
; 644  : 
; 645  : 	const pointer& _Myfirst() const _NOEXCEPT
; 646  : 		{	// return const reference to _Myfirst
; 647  : 		return (_Get_data()._Myfirst);
; 648  : 		}
; 649  : 
; 650  : 	pointer& _Mylast() _NOEXCEPT
; 651  : 		{	// return reference to _Mylast
; 652  : 		return (_Get_data()._Mylast);
; 653  : 		}
; 654  : 
; 655  : 	const pointer& _Mylast() const _NOEXCEPT
; 656  : 		{	// return const reference to _Mylast
; 657  : 		return (_Get_data()._Mylast);

  00030	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]

; 480  : 		_Myfirst = pointer();

  00033	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 481  : 		_Mylast = pointer();

  00039	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 482  : 		_Myend = pointer();

  00040	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 757  : 
; 758  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 759  : 		: _Mybase(_Al)
; 760  : 		{	// construct by copying _Right, allocator
; 761  : 		if (_Buy(_Right.size()))
; 762  : 			_TRY_BEGIN
; 763  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 764  : 				this->_Myfirst());
; 765  : 			_CATCH_ALL
; 766  : 			_Tidy();
; 767  : 			_RERAISE;
; 768  : 			_CATCH_END
; 769  : 		}
; 770  : 
; 771  : 	template<class _Iter,
; 772  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 773  : 			void>::type>
; 774  : 		vector(_Iter _First, _Iter _Last)
; 775  : 		: _Mybase()
; 776  : 		{	// construct from [_First, _Last)
; 777  : 		_Construct(_First, _Last);
; 778  : 		}
; 779  : 
; 780  : 	template<class _Iter,
; 781  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 782  : 			void>::type>
; 783  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 784  : 		: _Mybase(_Al)
; 785  : 		{	// construct from [_First, _Last) with allocator
; 786  : 		_Construct(_First, _Last);
; 787  : 		}
; 788  : 
; 789  : 	template<class _Iter>
; 790  : 		void _Construct(_Iter _First, _Iter _Last)
; 791  : 		{	// initialize with [_First, _Last)
; 792  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 793  : 		}
; 794  : 
; 795  : 	template<class _Iter>
; 796  : 		void _Construct(_Iter _First, _Iter _Last,
; 797  : 			input_iterator_tag)
; 798  : 		{	// initialize with [_First, _Last), input iterators
; 799  : 		_TRY_BEGIN
; 800  : 
; 801  : 		for (; _First != _Last; ++_First)
; 802  : 			emplace_back(*_First);
; 803  : 
; 804  : 		_CATCH_ALL
; 805  : 		_Tidy();
; 806  : 		_RERAISE;
; 807  : 		_CATCH_END
; 808  : 		}
; 809  : 
; 810  : 	template<class _Iter>
; 811  : 		void _Construct(_Iter _First, _Iter _Last,
; 812  : 			forward_iterator_tag)
; 813  : 		{	// initialize with [_First, _Last), forward iterators
; 814  : 		if (_Buy(_STD distance(_First, _Last)))
; 815  : 			{	// nonzero, fill it
; 816  : 			_TRY_BEGIN
; 817  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 818  : 			_CATCH_ALL
; 819  : 			_Tidy();
; 820  : 			_RERAISE;
; 821  : 			_CATCH_END
; 822  : 			}
; 823  : 		}
; 824  : 
; 825  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 826  : 		{	// construct from _Count * *_Pval
; 827  : 		if (_Buy(_Count))
; 828  : 			{	// nonzero, fill it
; 829  : 			_TRY_BEGIN
; 830  : 			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
; 831  : 			_CATCH_ALL
; 832  : 			_Tidy();
; 833  : 			_RERAISE;
; 834  : 			_CATCH_END
; 835  : 			}
; 836  : 		}
; 837  : 
; 838  : 	vector(_Myt&& _Right) _NOEXCEPT
; 839  : 		: _Mybase(_STD move(_Right._Getal()))
; 840  : 		{	// construct by moving _Right
; 841  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 842  : 		}
; 843  : 
; 844  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 845  : 		: _Mybase(_Al)
; 846  : 		{	// construct by moving _Right, allocator
; 847  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 848  : 		}
; 849  : 
; 850  : 	_Myt& operator=(_Myt&& _Right)
; 851  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 852  : 			|| _Alty::is_always_equal::value)
; 853  : 		{	// assign by moving _Right
; 854  : 		if (this != &_Right)
; 855  : 			{	// different, assign it
; 856  : 			_Tidy();
; 857  : 			if (_Alty::propagate_on_container_move_assignment::value
; 858  : 				&& this->_Getal() != _Right._Getal())
; 859  : 				this->_Move_alloc(_Right._Getal());
; 860  : 
; 861  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 862  : 			}
; 863  : 		return (*this);
; 864  : 		}
; 865  : 
; 866  : 	void _Assign_rv(_Myt&& _Right, true_type)
; 867  : 		{	// move from _Right, stealing its contents
; 868  : 		this->_Swap_all((_Myt&)_Right);
; 869  : 		this->_Myfirst() = _Right._Myfirst();
; 870  : 		this->_Mylast() = _Right._Mylast();
; 871  : 		this->_Myend() = _Right._Myend();
; 872  : 
; 873  : 		_Right._Myfirst() = pointer();
; 874  : 		_Right._Mylast() = pointer();
; 875  : 		_Right._Myend() = pointer();
; 876  : 		}
; 877  : 
; 878  : 	void _Assign_rv(_Myt&& _Right, false_type)
; 879  : 		{	// move from _Right, possibly moving its contents
; 880  : 		if (get_allocator() == _Right.get_allocator())
; 881  : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 882  : 		else
; 883  : 			_Construct(_STD make_move_iterator(_Right.begin()),
; 884  : 				_STD make_move_iterator(_Right.end()));
; 885  : 		}
; 886  : 
; 887  : 	void _Assign_rv(_Myt&& _Right)
; 888  : 		{	// assign by moving _Right
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 890  : 			typename _Alty::propagate_on_container_move_assignment());
; 891  : 		}
; 892  : 
; 893  : 
; 894  : 	void push_back(value_type&& _Val)
; 895  : 		{	// insert by moving into element at end
; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 899  : 			if (this->_Mylast() == this->_Myend())
; 900  : 				_Reserve(1);
; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 902  : 			this->_Getal().construct(this->_Mylast(),
; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();
; 905  : 			}
; 906  : 		else
; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())
; 909  : 				_Reserve(1);
; 910  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 911  : 			this->_Getal().construct(this->_Mylast(),
; 912  : 				_STD forward<value_type>(_Val));
; 913  : 			++this->_Mylast();
; 914  : 			}
; 915  : 		}
; 916  : 
; 917  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 918  : 		{	// insert by moving _Val at _Where
; 919  : 		return (emplace(_Where, _STD move(_Val)));
; 920  : 		}
; 921  : 
; 922  : 	template<class... _Valty>
; 923  : 		void emplace_back(_Valty&&... _Val)
; 924  : 		{	// insert by moving into element at end
; 925  : 		if (this->_Mylast() == this->_Myend())
; 926  : 			_Reserve(1);
; 927  : 		_Orphan_range(this->_Mylast(), this->_Mylast());
; 928  : 		this->_Getal().construct(this->_Mylast(),
; 929  : 			_STD forward<_Valty>(_Val)...);
; 930  : 		++this->_Mylast();
; 931  : 		}
; 932  : 
; 933  : 	template<class... _Valty>
; 934  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 935  : 		{	// insert by moving _Val at _Where
; 936  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 937  : 
; 938  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 939  : 		if (size() < _Off)
; 940  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 941  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 942  : 
; 943  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 944  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 945  : 		return (begin() + _Off);
; 946  : 		}
; 947  : 
; 948  : 
; 949  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Construct(_Ilist.begin(), _Ilist.end());
; 954  : 		}
; 955  : 
; 956  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 957  : 		{	// assign initializer_list
; 958  : 		assign(_Ilist.begin(), _Ilist.end());
; 959  : 		return (*this);
; 960  : 		}
; 961  : 
; 962  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 963  : 		{	// assign initializer_list
; 964  : 		assign(_Ilist.begin(), _Ilist.end());
; 965  : 		}
; 966  : 
; 967  : 	iterator insert(const_iterator _Where,
; 968  : 		_XSTD initializer_list<value_type> _Ilist)
; 969  : 		{	// insert initializer_list
; 970  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 971  : 		}
; 972  : 
; 973  : 	~vector() _NOEXCEPT
; 974  : 		{	// destroy the object
; 975  : 		_Tidy();
; 976  : 		}
; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00047	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  0004a	2b 3b		 sub	 edi, DWORD PTR [ebx]
  0004c	c1 ff 03	 sar	 edi, 3

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();

  0004f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1582 : 		this->_Mylast() = pointer();

  00055	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1583 : 		this->_Myend() = pointer();

  0005c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1584 : 
; 1585 : 		if (_Capacity == 0)

  00063	85 ff		 test	 edi, edi
  00065	74 42		 je	 SHORT $LN7@vector

; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)

  00067	81 ff ff ff ff
	1f		 cmp	 edi, 536870911		; 1fffffffH
  0006d	76 0a		 jbe	 SHORT $LN58@vector

; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00074	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN254@vector:
$LN58@vector:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00079	57		 push	 edi
  0007a	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_stMonsterIndexInfo@@@std@@QAEPAU_stMonsterIndexInfo@@I@Z ; std::allocator<_stMonsterIndexInfo>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 415  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,

  0007f	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);

  00082	89 06		 mov	 DWORD PTR [esi], eax

; 1592 : 			this->_Mylast() = this->_Myfirst();

  00084	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;

  00087	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 415  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,

  00089	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 749  : 			_TRY_BEGIN

  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;

  00091	8d 04 f8	 lea	 eax, DWORD PTR [eax+edi*8]
  00094	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 415  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,

  00097	ff 36		 push	 DWORD PTR [esi]
  00099	ff 73 04	 push	 DWORD PTR [ebx+4]
  0009c	ff 33		 push	 DWORD PTR [ebx]
  0009e	e8 00 00 00 00	 call	 ??$_Uninit_copy@PBU_stMonsterIndexInfo@@PAU1@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@YAPAU_stMonsterIndexInfo@@PBU1@0PAU1@AAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<_stMonsterIndexInfo const *,_stMonsterIndexInfo *,std::allocator<_stMonsterIndexInfo> >
  000a3	83 c4 14	 add	 esp, 20			; 00000014H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 750  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),

  000a6	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@vector:

; 755  : 			_CATCH_END
; 756  : 		}

  000a9	8b c6		 mov	 eax, esi
  000ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b5	59		 pop	 ecx
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 04 00	 ret	 4
__catch$??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV01@@Z$0:

; 751  : 				this->_Myfirst());
; 752  : 			_CATCH_ALL
; 753  : 			_Tidy();

  000bf	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	e8 00 00 00 00	 call	 ?_Tidy@?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@IAEXXZ ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::_Tidy

; 754  : 			_RERAISE;

  000c7	6a 00		 push	 0
  000c9	6a 00		 push	 0
  000cb	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN255@vector:
$LN253@vector:
  000d0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >::vector<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >,std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >,std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >,std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >,std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >,std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >,std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >,std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >,std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >::_Vector_val<std::_Simple_types<_stMonsterIndexInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEABQAU_stMonsterIndexInfo@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEABQAU_stMonsterIndexInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEABQAU_stMonsterIndexInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAPAU_stMonsterIndexInfo@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAPAU_stMonsterIndexInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAPAU_stMonsterIndexInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEABQAU_stMonsterIndexInfo@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEABQAU_stMonsterIndexInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEABQAU_stMonsterIndexInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAPAU_stMonsterIndexInfo@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAPAU_stMonsterIndexInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAPAU_stMonsterIndexInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEABQAU_stMonsterIndexInfo@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEABQAU_stMonsterIndexInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEABQAU_stMonsterIndexInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAPAU_stMonsterIndexInfo@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAPAU_stMonsterIndexInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAPAU_stMonsterIndexInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stMonsterIndexInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAE@$$QAV?$allocator@U_stMonsterIndexInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAE@$$QAV?$allocator@U_stMonsterIndexInfo@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 520  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 520  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAE@$$QAV?$allocator@U_stMonsterIndexInfo@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@U_stMonsterIndexInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@U_stMonsterIndexInfo@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@U_stMonsterIndexInfo@@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@U_stMonsterIndexInfo@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >::_Vector_alloc<std::_Vec_base_types<_stMonsterIndexInfo,std::allocator<_stMonsterIndexInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 139  : 	}
; 140  : 
; 141  : 		// TEMPLATE FUNCTION _Construct
; 142  : template<class _Ty1,
; 143  : 	class _Ty2> inline
; 144  : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 145  : 	{	// construct object at _Ptr with value _Val
; 146  : 	void *_Vptr = _Ptr;
; 147  : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 148  : 	}
; 149  : 
; 150  : template<class _Ty1> inline
; 151  : 	void _Construct(_Ty1 *_Ptr)
; 152  : 	{	// construct object at _Ptr with default value
; 153  : 	void *_Vptr = _Ptr;
; 154  : 
; 155  : 	::new (_Vptr) _Ty1();
; 156  : 	}
; 157  : 
; 158  : 		// TEMPLATE FUNCTION _Destroy
; 159  : template<class _Ty> inline
; 160  : 	void _Destroy(_Ty *_Ptr)
; 161  : 	{	// destroy object at _Ptr
; 162  : 	_Ptr->~_Ty();
; 163  : 	}
; 164  : 
; 165  : 		// TEMPLATE FUNCTION _Destroy_range
; 166  : template<class _Alloc> inline
; 167  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 168  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 169  : 		_Nonscalar_ptr_iterator_tag)
; 170  : 	{	// destroy [_First, _Last), arbitrary type
; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  0000e	77 31		 ja	 SHORT $LN16@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 03	 shl	 eax, 3

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN7@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN18@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN19@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN20@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN21@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN7@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 909  : 		_Mybase::deallocate(_Ptr, _Count);
; 910  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN16@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  0005a	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEXPAU_stMonsterIndexInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEPAU_stMonsterIndexInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEPAU_stMonsterIndexInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@U_stMonsterIndexInfo@@@std@@QAEPAU_stMonsterIndexInfo@@I@Z ; std::allocator<_stMonsterIndexInfo>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAEPAU_stMonsterIndexInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV?$allocator@U_stMonsterIndexInfo@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV?$allocator@U_stMonsterIndexInfo@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QAE@ABV?$allocator@U_stMonsterIndexInfo@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBE?AU12@U_Nil@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 1
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBE?AU12@U_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 828  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 829  : 		return (_Mytraits::select_on_container_copy_construction(*this));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 830  : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@QBE?AU12@U_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stMonsterIndexInfo> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@SA?AV?$allocator@U_stMonsterIndexInfo@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@SA?AV?$allocator@U_stMonsterIndexInfo@@@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<_stMonsterIndexInfo> >::select_on_container_copy_construction, COMDAT

; 790  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 791  : 		return (_Al);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 792  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@SA?AV?$allocator@U_stMonsterIndexInfo@@@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<_stMonsterIndexInfo> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@SAIABV?$allocator@U_stMonsterIndexInfo@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@SAIABV?$allocator@U_stMonsterIndexInfo@@@2@@Z PROC ; std::allocator_traits<std::allocator<_stMonsterIndexInfo> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U_stMonsterIndexInfo@@@std@@@std@@SAIABV?$allocator@U_stMonsterIndexInfo@@@2@@Z ENDP ; std::allocator_traits<std::allocator<_stMonsterIndexInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U_stMonsterIndexInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U_stMonsterIndexInfo@@@std@@QBEIXZ PROC ; std::allocator<_stMonsterIndexInfo>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U_stMonsterIndexInfo@@@std@@QBEIXZ ENDP ; std::allocator<_stMonsterIndexInfo>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_stMonsterIndexInfo@@@std@@QAEPAU_stMonsterIndexInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_stMonsterIndexInfo@@@std@@QAEPAU_stMonsterIndexInfo@@I@Z PROC ; std::allocator<_stMonsterIndexInfo>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00013	77 3c		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	c1 e0 03	 shl	 eax, 3

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@U_stMonsterIndexInfo@@@std@@QAEPAU_stMonsterIndexInfo@@I@Z ENDP ; std::allocator<_stMonsterIndexInfo>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U_stMonsterIndexInfo@@@std@@QAEXPAU_stMonsterIndexInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U_stMonsterIndexInfo@@@std@@QAEXPAU_stMonsterIndexInfo@@I@Z PROC ; std::allocator<_stMonsterIndexInfo>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  0000e	77 31		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 03	 shl	 eax, 3

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 639  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005a	cc		 int	 3
?deallocate@?$allocator@U_stMonsterIndexInfo@@@std@@QAEXPAU_stMonsterIndexInfo@@I@Z ENDP ; std::allocator<_stMonsterIndexInfo>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_stMonsterIndexInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U_stMonsterIndexInfo@@@std@@QAE@ABV01@@Z PROC ; std::allocator<_stMonsterIndexInfo>::allocator<_stMonsterIndexInfo>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@U_stMonsterIndexInfo@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<_stMonsterIndexInfo>::allocator<_stMonsterIndexInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_stMonsterIndexInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U_stMonsterIndexInfo@@@std@@QAE@XZ PROC	; std::allocator<_stMonsterIndexInfo>::allocator<_stMonsterIndexInfo>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U_stMonsterIndexInfo@@@std@@QAE@XZ ENDP	; std::allocator<_stMonsterIndexInfo>::allocator<_stMonsterIndexInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.h
;	COMDAT ??0_stZoneInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_stZoneInfo@@QAE@XZ PROC				; _stZoneInfo::_stZoneInfo, COMDAT
; _this$ = ecx

; 38   : 	_stZoneInfo()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00004	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.h

; 41   : 	}

  0000b	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  0000d	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 482  : 		_Myend = pointer();

  00014	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 480  : 		_Myfirst = pointer();

  0001b	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 481  : 		_Mylast = pointer();

  00022	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0

; 482  : 		_Myend = pointer();

  00029	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 480  : 		_Myfirst = pointer();

  00030	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0

; 481  : 		_Mylast = pointer();

  00037	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0

; 482  : 		_Myend = pointer();

  0003e	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.h

; 38   : 	_stZoneInfo()

  00045	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00048	c7 41 58 00 00
	00 00		 mov	 DWORD PTR [ecx+88], 0

; 481  : 		_Mylast = pointer();

  0004f	c7 41 5c 00 00
	00 00		 mov	 DWORD PTR [ecx+92], 0

; 482  : 		_Myend = pointer();

  00056	c7 41 60 00 00
	00 00		 mov	 DWORD PTR [ecx+96], 0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.h

; 41   : 	}

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??0_stZoneInfo@@QAE@XZ ENDP				; _stZoneInfo::_stZoneInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.h
;	COMDAT ??0_stMonsterIndexInfo@@QAE@XZ
_TEXT	SEGMENT
??0_stMonsterIndexInfo@@QAE@XZ PROC			; _stMonsterIndexInfo::_stMonsterIndexInfo, COMDAT
; _this$ = ecx

; 24   : 	{
; 25   : 		m_bLiveMonster = 0;

  00000	66 c7 41 04 00
	01		 mov	 WORD PTR [ecx+4], 256	; 00000100H

; 26   : 		m_iIndex = -1;
; 27   : 		m_bAttack = 1;
; 28   : 	}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1
  0000e	c3		 ret	 0
??0_stMonsterIndexInfo@@QAE@XZ ENDP			; _stMonsterIndexInfo::_stMonsterIndexInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ PROC ; std::_Iterator_base0::_Getcont, COMDAT
; _this$ = ecx

; 59   : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 60   : 		}

  00002	c3		 ret	 0
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ENDP ; std::_Iterator_base0::_Getcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetDayOfWeek@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ttm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?GetDayOfWeek@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetDayOfWeek, COMDAT
; _this$ = ecx

; 711  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 712  : 	struct tm ttm;
; 713  : 	struct tm * ptm;
; 714  : 
; 715  : 	ptm = GetLocalTm(&ttm);

  00010	8d 45 d8	 lea	 eax, DWORD PTR _ttm$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 716  : 	return ptm ? ptm->tm_wday + 1 : 0 ;

  00019	85 c0		 test	 eax, eax
  0001b	74 12		 je	 SHORT $LN3@GetDayOfWe
  0001d	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00020	40		 inc	 eax

; 717  : }

  00021	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00024	33 cd		 xor	 ecx, ebp
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN3@GetDayOfWe:
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00032	33 c0		 xor	 eax, eax
  00034	33 cd		 xor	 ecx, ebp
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?GetDayOfWeek@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetDayOfWeek
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z
_TEXT	SEGMENT
_ptmTemp$1 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
_ptm$ = 8						; size = 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z PROC		; ATL::CTime::GetLocalTm, COMDAT
; _this$ = ecx

; 607  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _ptm$[ebp]

; 608  : 	// Ensure ptm is valid
; 609  : 	ATLENSURE( ptm != NULL );

  00014	85 f6		 test	 esi, esi
  00016	74 4c		 je	 SHORT $LN13@GetLocalTm

; 610  : 
; 611  : 	if (ptm != NULL)
; 612  : 	{
; 613  : 		struct tm ptmTemp;
; 614  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);

  00018	51		 push	 ecx
  00019	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$1[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 __localtime64_s
  00022	83 c4 08	 add	 esp, 8

; 615  : 
; 616  : 		if (err != 0)

  00025	85 c0		 test	 eax, eax
  00027	74 13		 je	 SHORT $LN10@GetLocalTm

; 617  : 		{
; 618  : 			return NULL;    // indicates that m_time was not initialized!

  00029	33 c0		 xor	 eax, eax
  0002b	5e		 pop	 esi

; 623  : 	}
; 624  : 
; 625  : 	return NULL;
; 626  : }

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002f	33 cd		 xor	 ecx, ebp
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
$LN10@GetLocalTm:

; 619  : 		}
; 620  : 
; 621  : 		*ptm = ptmTemp;

  0003c	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR _ptmTemp$1[ebp]
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _ptmTemp$1[ebp+32]

; 622  : 		return ptm;

  00043	8b c6		 mov	 eax, esi
  00045	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00048	0f 10 45 e8	 movups	 xmm0, XMMWORD PTR _ptmTemp$1[ebp+16]
  0004c	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  00050	89 4e 20	 mov	 DWORD PTR [esi+32], ecx

; 623  : 	}
; 624  : 
; 625  : 	return NULL;
; 626  : }

  00053	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00056	33 cd		 xor	 ecx, ebp
  00058	5e		 pop	 esi
  00059	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
$LN13@GetLocalTm:

; 608  : 	// Ensure ptm is valid
; 609  : 	ATLENSURE( ptm != NULL );

  00064	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00069	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN15@GetLocalTm:
$LN12@GetLocalTm:
  0006e	cc		 int	 3
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ENDP		; ATL::CTime::GetLocalTm
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ??0CTime@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_time$ = 8						; size = 8
??0CTime@ATL@@QAE@_J@Z PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 418  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 417  : 	m_time( time )

  00003	8b 45 08	 mov	 eax, DWORD PTR _time$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b 45 0c	 mov	 eax, DWORD PTR _time$[ebp+4]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 419  : }

  0000e	8b c1		 mov	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0CTime@ATL@@QAE@_J@Z ENDP				; ATL::CTime::CTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetTickCount@CTime@ATL@@SG?AV12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ PROC		; ATL::CTime::GetTickCount, COMDAT

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 374  : 	return( CTime( ::_time64( NULL ) ) );

  00003	6a 00		 push	 0
  00005	e8 00 00 00 00	 call	 __time64

; 376  : 
; 377  : _Success_(return != false) inline bool CTime::GetAsDBTIMESTAMP(_Out_ DBTIMESTAMP& dbts) const throw()
; 378  : {
; 379  : 	struct tm tmLocal;
; 380  : 	if (GetLocalTm(&tmLocal) == nullptr) return false;
; 381  : 
; 382  : 	dbts.year = (SHORT) (1900 + tmLocal.tm_year);
; 383  : 	dbts.month = (USHORT) (1 + tmLocal.tm_mon);
; 384  : 	dbts.day = (USHORT) tmLocal.tm_mday;
; 385  : 	dbts.hour = (USHORT) tmLocal.tm_hour;
; 386  : 	dbts.minute = (USHORT) tmLocal.tm_min;
; 387  : 	dbts.second = (USHORT) tmLocal.tm_sec;
; 388  : 	dbts.fraction = 0;
; 389  : 
; 390  : 	return true;
; 391  : }
; 392  : 
; 393  : inline BOOL WINAPI CTime::IsValidFILETIME(_In_ const FILETIME& fileTime) throw()
; 394  : {
; 395  : 	FILETIME localTime;
; 396  : 	if (!FileTimeToLocalFileTime(&fileTime, &localTime))
; 397  : 	{
; 398  : 		return FALSE;
; 399  : 	}
; 400  : 
; 401  : 	// then convert that time to system time
; 402  : 	SYSTEMTIME sysTime;
; 403  : 	if (!FileTimeToSystemTime(&localTime, &sysTime))
; 404  : 	{
; 405  : 		return FALSE;
; 406  : 	}
; 407  : 
; 408  : 	return TRUE;
; 409  : }
; 410  : 
; 411  : inline CTime::CTime() throw() :
; 412  : 	m_time(0)
; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  0000a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]

; 374  : 	return( CTime( ::_time64( NULL ) ) );

  0000d	83 c4 04	 add	 esp, 4

; 376  : 
; 377  : _Success_(return != false) inline bool CTime::GetAsDBTIMESTAMP(_Out_ DBTIMESTAMP& dbts) const throw()
; 378  : {
; 379  : 	struct tm tmLocal;
; 380  : 	if (GetLocalTm(&tmLocal) == nullptr) return false;
; 381  : 
; 382  : 	dbts.year = (SHORT) (1900 + tmLocal.tm_year);
; 383  : 	dbts.month = (USHORT) (1 + tmLocal.tm_mon);
; 384  : 	dbts.day = (USHORT) tmLocal.tm_mday;
; 385  : 	dbts.hour = (USHORT) tmLocal.tm_hour;
; 386  : 	dbts.minute = (USHORT) tmLocal.tm_min;
; 387  : 	dbts.second = (USHORT) tmLocal.tm_sec;
; 388  : 	dbts.fraction = 0;
; 389  : 
; 390  : 	return true;
; 391  : }
; 392  : 
; 393  : inline BOOL WINAPI CTime::IsValidFILETIME(_In_ const FILETIME& fileTime) throw()
; 394  : {
; 395  : 	FILETIME localTime;
; 396  : 	if (!FileTimeToLocalFileTime(&fileTime, &localTime))
; 397  : 	{
; 398  : 		return FALSE;
; 399  : 	}
; 400  : 
; 401  : 	// then convert that time to system time
; 402  : 	SYSTEMTIME sysTime;
; 403  : 	if (!FileTimeToSystemTime(&localTime, &sysTime))
; 404  : 	{
; 405  : 		return FALSE;
; 406  : 	}
; 407  : 
; 408  : 	return TRUE;
; 409  : }
; 410  : 
; 411  : inline CTime::CTime() throw() :
; 412  : 	m_time(0)
; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  00010	89 01		 mov	 DWORD PTR [ecx], eax

; 374  : 	return( CTime( ::_time64( NULL ) ) );

  00012	8b c1		 mov	 eax, ecx

; 376  : 
; 377  : _Success_(return != false) inline bool CTime::GetAsDBTIMESTAMP(_Out_ DBTIMESTAMP& dbts) const throw()
; 378  : {
; 379  : 	struct tm tmLocal;
; 380  : 	if (GetLocalTm(&tmLocal) == nullptr) return false;
; 381  : 
; 382  : 	dbts.year = (SHORT) (1900 + tmLocal.tm_year);
; 383  : 	dbts.month = (USHORT) (1 + tmLocal.tm_mon);
; 384  : 	dbts.day = (USHORT) tmLocal.tm_mday;
; 385  : 	dbts.hour = (USHORT) tmLocal.tm_hour;
; 386  : 	dbts.minute = (USHORT) tmLocal.tm_min;
; 387  : 	dbts.second = (USHORT) tmLocal.tm_sec;
; 388  : 	dbts.fraction = 0;
; 389  : 
; 390  : 	return true;
; 391  : }
; 392  : 
; 393  : inline BOOL WINAPI CTime::IsValidFILETIME(_In_ const FILETIME& fileTime) throw()
; 394  : {
; 395  : 	FILETIME localTime;
; 396  : 	if (!FileTimeToLocalFileTime(&fileTime, &localTime))
; 397  : 	{
; 398  : 		return FALSE;
; 399  : 	}
; 400  : 
; 401  : 	// then convert that time to system time
; 402  : 	SYSTEMTIME sysTime;
; 403  : 	if (!FileTimeToSystemTime(&localTime, &sysTime))
; 404  : 	{
; 405  : 		return FALSE;
; 406  : 	}
; 407  : 
; 408  : 	return TRUE;
; 409  : }
; 410  : 
; 411  : inline CTime::CTime() throw() :
; 412  : 	m_time(0)
; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  00014	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 375  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ ENDP		; ATL::CTime::GetTickCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )

  00003	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  00006	3d 0e 00 07 80	 cmp	 eax, -2147024882	; 8007000eH
  0000b	75 05		 jne	 SHORT $LN2@AtlThrowIm

; 69   : 	{
; 70   : 		AfxThrowMemoryException();

  0000d	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException
$LN6@AtlThrowIm:
$LN2@AtlThrowIm:

; 71   : 	}
; 72   : 	else
; 73   : 	{
; 74   : 		AfxThrowOleException( hr );

  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$LN7@AtlThrowIm:
$LN5@AtlThrowIm:
  00018	cc		 int	 3
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);
; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 1459 :     #pragma warning(pop)
; 1460 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 2585 : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardian.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 2585 : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
