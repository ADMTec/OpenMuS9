; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\CommandManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CommandManager@@QAE@XZ			; CommandManager::CommandManager
PUBLIC	??1CommandManager@@UAE@XZ			; CommandManager::~CommandManager
PUBLIC	?Init@CommandManager@@QAEXXZ			; CommandManager::Init
PUBLIC	?Load@CommandManager@@QAEXXZ			; CommandManager::Load
PUBLIC	?Read@CommandManager@@QAEXPAD@Z			; CommandManager::Read
PUBLIC	?Run@CommandManager@@QAEXPAUOBJECTSTRUCT@@PAD@Z	; CommandManager::Run
PUBLIC	?CheckCommand@CommandManager@@QAEEPAUOBJECTSTRUCT@@PAD@Z ; CommandManager::CheckCommand
PUBLIC	?GetUserInfo@CommandManager@@QAEPAUOBJECTSTRUCT@@PAU2@PAD@Z ; CommandManager::GetUserInfo
PUBLIC	?GetTokenString@CommandManager@@QAEPADXZ	; CommandManager::GetTokenString
PUBLIC	?GetTokenNumber@CommandManager@@QAEHXZ		; CommandManager::GetTokenNumber
PUBLIC	?GetCommand@CommandManager@@QAEPAUCommandInfo@@H@Z ; CommandManager::GetCommand
PUBLIC	?GetCommand@CommandManager@@QAEPAUCommandInfo@@PAD@Z ; CommandManager::GetCommand
PUBLIC	?allocate@?$allocator@UCommandInfo@@@std@@QAEPAUCommandInfo@@I@Z ; std::allocator<CommandInfo>::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@I@Z ; std::_Wrap_alloc<std::allocator<CommandInfo> >::deallocate
PUBLIC	?push_back@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAEXABUCommandInfo@@@Z ; std::vector<CommandInfo,std::allocator<CommandInfo> >::push_back
PUBLIC	?_Reallocate@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Reallocate
PUBLIC	?_Reserve@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Reserve
PUBLIC	??_GCommandManager@@UAEPAXI@Z			; CommandManager::`scalar deleting destructor'
PUBLIC	??$_Uninit_move@PAUCommandInfo@@PAU1@V?$allocator@UCommandInfo@@@std@@U1@@std@@YAPAUCommandInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CommandInfo *,CommandInfo *,std::allocator<CommandInfo>,CommandInfo>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7CommandManager@@6B@				; CommandManager::`vftable'
PUBLIC	?g_CommandManager@@3VCommandManager@@A		; g_CommandManager
PUBLIC	??_C@_0BK@LKNNOONE@Custom?2CommandManager?4xml?$AA@ ; `string'
PUBLIC	??_C@_0CH@KPCABHMJ@?$FLCommandManager?$FN?5File?5?$CFs?5not?5fou@ ; `string'
PUBLIC	??_C@_0P@EJIINOB@commandmanager?$AA@		; `string'
PUBLIC	??_C@_0M@MCFKJOEK@commandlist?$AA@		; `string'
PUBLIC	??_C@_07KMMNMMFF@command?$AA@			; `string'
PUBLIC	??_C@_02EGCJHIOB@id?$AA@			; `string'
PUBLIC	??_C@_06EBPNOMLE@access?$AA@			; `string'
PUBLIC	??_C@_08EHBDOELG@minlevel?$AA@			; `string'
PUBLIC	??_C@_08MLAKOPDG@minreset?$AA@			; `string'
PUBLIC	??_C@_09EPLENEOI@pricetype?$AA@			; `string'
PUBLIC	??_C@_05NCDILCCA@price?$AA@			; `string'
PUBLIC	??_C@_07LAKGFKMJ@premium?$AA@			; `string'
PUBLIC	??_C@_0O@GJJEBBIE@Wrong?5command?$AA@		; `string'
PUBLIC	??_C@_0CL@JKLMFPBI@Your?5access?5code?5is?5wrong?5for?5th@ ; `string'
PUBLIC	??_C@_0CF@FDJBFHDG@You?5are?5short?5money?5for?5this?5com@ ; `string'
PUBLIC	??_C@_0DD@IKBMDDFP@Your?5premium?5access?5code?5is?5wron@ ; `string'
PUBLIC	??_C@_0CJ@KEINPLJP@Your?5level?5is?5small?5for?5use?5this@ ; `string'
PUBLIC	??_C@_0CJ@LEGKJAEC@Your?5reset?5is?5small?5for?5use?5this@ ; `string'
PUBLIC	??_C@_0BI@CMMMMCHI@Syntax?5error?5in?5command?$AA@ ; `string'
PUBLIC	??_C@_0CA@MLPJHLAP@Command?5temporarily?5not?5working?$AA@ ; `string'
PUBLIC	??_C@_0BH@FNALGCI@You?5are?5short?5of?5money?$AA@ ; `string'
PUBLIC	??_C@_0BA@BPEOHPDB@Party?5not?5found?$AA@	; `string'
PUBLIC	??_C@_0BF@HAAJEEKJ@Party?5data?5not?5found?$AA@	; `string'
PUBLIC	??_C@_06JLCIBMAL@Party?3?$AA@			; `string'
PUBLIC	??_C@_08DHLCFGJM@?$CILeader?$CJ?$AA@		; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_02LIELOMNJ@on?$AA@			; `string'
PUBLIC	??_C@_03MCADLMAF@off?$AA@			; `string'
PUBLIC	??_C@_0BE@FAHMMEJJ@Wrong?5value?5for?5add?$AA@	; `string'
PUBLIC	??_C@_0CI@EKJHCFIP@You?5do?5not?5have?5enough?5level?5up?5@ ; `string'
PUBLIC	??_C@_0CH@JLPPKMNJ@Your?5class?5in?5invalid?5for?5this?5c@ ; `string'
PUBLIC	??_C@_0BK@PMIGKCON@?$CFd?5point?$CIs?$CJ?5has?5been?5used?$AA@ ; `string'
PUBLIC	??_C@_0BF@KOJCGEPK@Warehouse?5range?3?50?95?$AA@ ; `string'
PUBLIC	??_C@_0BG@DMHAJLGP@Target?5user?5not?5found?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CommandManager@@6B@			; CommandManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCommandManager@@@8			; CommandManager `RTTI Type Descriptor'
PUBLIC	??_R3CommandManager@@8				; CommandManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CommandManager@@8				; CommandManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CommandManager@@8			; CommandManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_strtok:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	_rand:PROC
EXTRN	_atoi:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?ItemGetNumberMake@@YAHHH@Z:PROC		; ItemGetNumberMake
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?CloseClient@@YAXH@Z:PROC			; CloseClient
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?ClearItem@MapClass@@QAEHPAUOBJECTSTRUCT@@H@Z:PROC ; MapClass::ClearItem
EXTRN	?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z:PROC	; MsgSendV2
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?GCPkLevelSend@@YAXHE@Z:PROC			; GCPkLevelSend
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?GCGuildWarRequestResult@@YAXPADHH@Z:PROC	; GCGuildWarRequestResult
EXTRN	?gObjCalCharacter@@YAXH@Z:PROC			; gObjCalCharacter
EXTRN	?gObjSetTradeOption@@YAXHH@Z:PROC		; gObjSetTradeOption
EXTRN	?gObjSetDuelOption@@YAXHH@Z:PROC		; gObjSetDuelOption
EXTRN	?gObjSetBP@@YAXH@Z:PROC				; gObjSetBP
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
EXTRN	?gObjGetIndex@@YAHPAD@Z:PROC			; gObjGetIndex
EXTRN	?gObjInventoryDeleteItem@@YAEHH@Z:PROC		; gObjInventoryDeleteItem
EXTRN	?gObjViewportListProtocolDestroy@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjViewportListProtocolDestroy
EXTRN	?gObjViewportListProtocolCreate@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjViewportListProtocolCreate
EXTRN	?gObjTeleport@@YAXHHHH@Z:PROC			; gObjTeleport
EXTRN	?MakeRandomSetItem@@YAXH@Z:PROC			; MakeRandomSetItem
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	??_ECommandManager@@UAEPAXI@Z:PROC		; CommandManager::`vector deleting destructor'
EXTRN	?as_int@xml_attribute@pugi@@QBEHH@Z:PROC	; pugi::xml_attribute::as_int
EXTRN	??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ:PROC	; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
EXTRN	?next_sibling@xml_node@pugi@@QBE?AV12@XZ:PROC	; pugi::xml_node::next_sibling
EXTRN	?text@xml_node@pugi@@QBE?AVxml_text@2@XZ:PROC	; pugi::xml_node::text
EXTRN	?child@xml_node@pugi@@QBE?AV12@PBD@Z:PROC	; pugi::xml_node::child
EXTRN	?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z:PROC ; pugi::xml_node::attribute
EXTRN	?as_string@xml_text@pugi@@QBEPBDPBD@Z:PROC	; pugi::xml_text::as_string
EXTRN	??0xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::xml_document
EXTRN	??1xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::~xml_document
EXTRN	?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z:PROC ; pugi::xml_document::load_file
EXTRN	?DataSend@wsJoinServerCli@@QAEHPADH@Z:PROC	; wsJoinServerCli::DataSend
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?SetPkLevel@PartyClass@@QAEXHHHE@Z:PROC		; PartyClass::SetPkLevel
EXTRN	?SetPkCount@PartyClass@@QAEXH@Z:PROC		; PartyClass::SetPkCount
EXTRN	?SetLeader@PartyClass@@QAE_NHH@Z:PROC		; PartyClass::SetLeader
EXTRN	?GCItemListSend@@YAXH@Z:PROC			; GCItemListSend
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z:PROC ; ItemSerialCreateSend
EXTRN	?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjAddBuffEffect
EXTRN	?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z:PROC ; gObjRemoveBuffEffect
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
EXTRN	?OperateGmCommand@CCastleSiege@@QAEXHHPAX@Z:PROC ; CCastleSiege::OperateGmCommand
EXTRN	?OperateGmCommand@CCrywolf@@QAEXHH@Z:PROC	; CCrywolf::OperateGmCommand
EXTRN	?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@PAD@Z:PROC ; CMoveCommand::Move
EXTRN	?DBSendVaultInfo@WareHouseSYSTEM@@QAEXHPADE@Z:PROC ; WareHouseSYSTEM::DBSendVaultInfo
EXTRN	?ProcStart@OfflineTrade@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; OfflineTrade::ProcStart
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?m_ObjBill@@3PAVBILL_CLASS@@A:BYTE		; m_ObjBill
EXTRN	?g_SelfDefenseOn@@3_NA:BYTE			; g_SelfDefenseOn
EXTRN	?g_SelfDefenseTime@@3HA:DWORD			; g_SelfDefenseTime
EXTRN	?wsJServerCli@@3VwsJoinServerCli@@A:BYTE	; wsJServerCli
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?gEnableBattleSoccer@@3HA:DWORD			; gEnableBattleSoccer
EXTRN	?g_MaxStatValue@@3HA:DWORD			; g_MaxStatValue
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
EXTRN	?g_Crywolf@@3VCCrywolf@@A:BYTE			; g_Crywolf
EXTRN	?gMoveCommand@@3VCMoveCommand@@A:BYTE		; gMoveCommand
EXTRN	?gWareHouseSYSTEM@@3VWareHouseSYSTEM@@A:BYTE	; gWareHouseSYSTEM
EXTRN	?g_OfflineTrade@@3VOfflineTrade@@A:BYTE		; g_OfflineTrade
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_CommandManager@@3VCommandManager@@A DB 010H DUP (?)	; g_CommandManager
_BSS	ENDS
CRT$XCU	SEGMENT
?g_CommandManager$initializer$@@3P6AXXZA DD FLAT:??__Eg_CommandManager@@YAXXZ ; g_CommandManager$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CommandManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CommandManager@@8 DD FLAT:??_R0?AVCommandManager@@@8 ; CommandManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CommandManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CommandManager@@8
rdata$r	SEGMENT
??_R2CommandManager@@8 DD FLAT:??_R1A@?0A@EA@CommandManager@@8 ; CommandManager::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CommandManager@@8
rdata$r	SEGMENT
??_R3CommandManager@@8 DD 00H				; CommandManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CommandManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCommandManager@@@8
data$r	SEGMENT
??_R0?AVCommandManager@@@8 DD FLAT:??_7type_info@@6B@	; CommandManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCommandManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4CommandManager@@6B@
rdata$r	SEGMENT
??_R4CommandManager@@6B@ DD 00H				; CommandManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCommandManager@@@8
	DD	FLAT:??_R3CommandManager@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DMHAJLGP@Target?5user?5not?5found?$AA@
CONST	SEGMENT
??_C@_0BG@DMHAJLGP@Target?5user?5not?5found?$AA@ DB 'Target user not foun'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KOJCGEPK@Warehouse?5range?3?50?95?$AA@
CONST	SEGMENT
??_C@_0BF@KOJCGEPK@Warehouse?5range?3?50?95?$AA@ DB 'Warehouse range: 0-5'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PMIGKCON@?$CFd?5point?$CIs?$CJ?5has?5been?5used?$AA@
CONST	SEGMENT
??_C@_0BK@PMIGKCON@?$CFd?5point?$CIs?$CJ?5has?5been?5used?$AA@ DB '%d poi'
	DB	'nt(s) has been used', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JLPPKMNJ@Your?5class?5in?5invalid?5for?5this?5c@
CONST	SEGMENT
??_C@_0CH@JLPPKMNJ@Your?5class?5in?5invalid?5for?5this?5c@ DB 'Your class'
	DB	' in invalid for this command', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EKJHCFIP@You?5do?5not?5have?5enough?5level?5up?5@
CONST	SEGMENT
??_C@_0CI@EKJHCFIP@You?5do?5not?5have?5enough?5level?5up?5@ DB 'You do no'
	DB	't have enough level up points!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FAHMMEJJ@Wrong?5value?5for?5add?$AA@
CONST	SEGMENT
??_C@_0BE@FAHMMEJJ@Wrong?5value?5for?5add?$AA@ DB 'Wrong value for add', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03MCADLMAF@off?$AA@
CONST	SEGMENT
??_C@_03MCADLMAF@off?$AA@ DB 'off', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LIELOMNJ@on?$AA@
CONST	SEGMENT
??_C@_02LIELOMNJ@on?$AA@ DB 'on', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DHLCFGJM@?$CILeader?$CJ?$AA@
CONST	SEGMENT
??_C@_08DHLCFGJM@?$CILeader?$CJ?$AA@ DB '(Leader)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JLCIBMAL@Party?3?$AA@
CONST	SEGMENT
??_C@_06JLCIBMAL@Party?3?$AA@ DB 'Party:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HAAJEEKJ@Party?5data?5not?5found?$AA@
CONST	SEGMENT
??_C@_0BF@HAAJEEKJ@Party?5data?5not?5found?$AA@ DB 'Party data not found', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPEOHPDB@Party?5not?5found?$AA@
CONST	SEGMENT
??_C@_0BA@BPEOHPDB@Party?5not?5found?$AA@ DB 'Party not found', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FNALGCI@You?5are?5short?5of?5money?$AA@
CONST	SEGMENT
??_C@_0BH@FNALGCI@You?5are?5short?5of?5money?$AA@ DB 'You are short of mo'
	DB	'ney', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MLPJHLAP@Command?5temporarily?5not?5working?$AA@
CONST	SEGMENT
??_C@_0CA@MLPJHLAP@Command?5temporarily?5not?5working?$AA@ DB 'Command te'
	DB	'mporarily not working', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CMMMMCHI@Syntax?5error?5in?5command?$AA@
CONST	SEGMENT
??_C@_0BI@CMMMMCHI@Syntax?5error?5in?5command?$AA@ DB 'Syntax error in co'
	DB	'mmand', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@LEGKJAEC@Your?5reset?5is?5small?5for?5use?5this@
CONST	SEGMENT
??_C@_0CJ@LEGKJAEC@Your?5reset?5is?5small?5for?5use?5this@ DB 'Your reset'
	DB	' is small for use this command', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KEINPLJP@Your?5level?5is?5small?5for?5use?5this@
CONST	SEGMENT
??_C@_0CJ@KEINPLJP@Your?5level?5is?5small?5for?5use?5this@ DB 'Your level'
	DB	' is small for use this command', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@IKBMDDFP@Your?5premium?5access?5code?5is?5wron@
CONST	SEGMENT
??_C@_0DD@IKBMDDFP@Your?5premium?5access?5code?5is?5wron@ DB 'Your premiu'
	DB	'm access code is wrong for this command', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FDJBFHDG@You?5are?5short?5money?5for?5this?5com@
CONST	SEGMENT
??_C@_0CF@FDJBFHDG@You?5are?5short?5money?5for?5this?5com@ DB 'You are sh'
	DB	'ort money for this command', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@JKLMFPBI@Your?5access?5code?5is?5wrong?5for?5th@
CONST	SEGMENT
??_C@_0CL@JKLMFPBI@Your?5access?5code?5is?5wrong?5for?5th@ DB 'Your acces'
	DB	's code is wrong for this command', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GJJEBBIE@Wrong?5command?$AA@
CONST	SEGMENT
??_C@_0O@GJJEBBIE@Wrong?5command?$AA@ DB 'Wrong command', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07LAKGFKMJ@premium?$AA@
CONST	SEGMENT
??_C@_07LAKGFKMJ@premium?$AA@ DB 'premium', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NCDILCCA@price?$AA@
CONST	SEGMENT
??_C@_05NCDILCCA@price?$AA@ DB 'price', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EPLENEOI@pricetype?$AA@
CONST	SEGMENT
??_C@_09EPLENEOI@pricetype?$AA@ DB 'pricetype', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MLAKOPDG@minreset?$AA@
CONST	SEGMENT
??_C@_08MLAKOPDG@minreset?$AA@ DB 'minreset', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EHBDOELG@minlevel?$AA@
CONST	SEGMENT
??_C@_08EHBDOELG@minlevel?$AA@ DB 'minlevel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBPNOMLE@access?$AA@
CONST	SEGMENT
??_C@_06EBPNOMLE@access?$AA@ DB 'access', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGCJHIOB@id?$AA@
CONST	SEGMENT
??_C@_02EGCJHIOB@id?$AA@ DB 'id', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07KMMNMMFF@command?$AA@
CONST	SEGMENT
??_C@_07KMMNMMFF@command?$AA@ DB 'command', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MCFKJOEK@commandlist?$AA@
CONST	SEGMENT
??_C@_0M@MCFKJOEK@commandlist?$AA@ DB 'commandlist', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EJIINOB@commandmanager?$AA@
CONST	SEGMENT
??_C@_0P@EJIINOB@commandmanager?$AA@ DB 'commandmanager', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KPCABHMJ@?$FLCommandManager?$FN?5File?5?$CFs?5not?5fou@
CONST	SEGMENT
??_C@_0CH@KPCABHMJ@?$FLCommandManager?$FN?5File?5?$CFs?5not?5fou@ DB '[Co'
	DB	'mmandManager] File %s not found! %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LKNNOONE@Custom?2CommandManager?4xml?$AA@
CONST	SEGMENT
??_C@_0BK@LKNNOONE@Custom?2CommandManager?4xml?$AA@ DB 'Custom\CommandMan'
	DB	'ager.xml', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7CommandManager@@6B@
CONST	SEGMENT
??_7CommandManager@@6B@ DD FLAT:??_R4CommandManager@@6B@ ; CommandManager::`vftable'
	DD	FLAT:??_ECommandManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z$50
__ehfuncinfo$?_Reallocate@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Read@CommandManager@@QAEXPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Read@CommandManager@@QAEXPAD@Z$0
__ehfuncinfo$?Read@CommandManager@@QAEXPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Read@CommandManager@@QAEXPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UCommandInfo@@U1@@?$allocator@UCommandInfo@@@std@@QAEXPAUCommandInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UCommandInfo@@U1@@?$allocator@UCommandInfo@@@std@@QAEXPAUCommandInfo@@$$QAU2@@Z PROC ; std::allocator<CommandInfo>::construct<CommandInfo,CommandInfo>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR _<_Args_0>$[ebp]
  0000f	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct:
  00017	5f		 pop	 edi

; 656  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??$construct@UCommandInfo@@U1@@?$allocator@UCommandInfo@@@std@@QAEXPAUCommandInfo@@$$QAU2@@Z ENDP ; std::allocator<CommandInfo>::construct<CommandInfo,CommandInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UCommandInfo@@U1@@?$allocator_traits@V?$allocator@UCommandInfo@@@std@@@std@@SAXAAV?$allocator@UCommandInfo@@@1@PAUCommandInfo@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UCommandInfo@@U1@@?$allocator_traits@V?$allocator@UCommandInfo@@@std@@@std@@SAXAAV?$allocator@UCommandInfo@@@1@PAUCommandInfo@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<CommandInfo> >::construct<CommandInfo,CommandInfo>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN8@construct
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR _<_Args_0>$[ebp]
  0000f	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN8@construct:
  00017	5f		 pop	 edi

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$construct@UCommandInfo@@U1@@?$allocator_traits@V?$allocator@UCommandInfo@@@std@@@std@@SAXAAV?$allocator@UCommandInfo@@@1@PAUCommandInfo@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<CommandInfo> >::construct<CommandInfo,CommandInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@UCommandInfo@@@std@@YA$$QAUCommandInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UCommandInfo@@@std@@YA$$QAUCommandInfo@@AAU1@@Z PROC ; std::forward<CommandInfo>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UCommandInfo@@@std@@YA$$QAUCommandInfo@@AAU1@@Z ENDP ; std::forward<CommandInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UCommandInfo@@U1@@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UCommandInfo@@U1@@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<CommandInfo> >::construct<CommandInfo,CommandInfo>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN13@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR _<_Args_0>$[ebp]
  0000f	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN13@construct:
  00017	5f		 pop	 edi

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??$construct@UCommandInfo@@U1@@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CommandInfo> >::construct<CommandInfo,CommandInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UCommandInfo@@@?$allocator@UCommandInfo@@@std@@QAEXPAUCommandInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UCommandInfo@@@?$allocator@UCommandInfo@@@std@@QAEXPAUCommandInfo@@@Z PROC ; std::allocator<CommandInfo>::destroy<CommandInfo>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UCommandInfo@@@?$allocator@UCommandInfo@@@std@@QAEXPAUCommandInfo@@@Z ENDP ; std::allocator<CommandInfo>::destroy<CommandInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUCommandInfo@@PAU1@V?$allocator@UCommandInfo@@@std@@U1@@std@@YAPAUCommandInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUCommandInfo@@PAU1@V?$allocator@UCommandInfo@@@std@@U1@@std@@YAPAUCommandInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CommandInfo *,CommandInfo *,std::allocator<CommandInfo>,CommandInfo>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000d	3b d3		 cmp	 edx, ebx
  0000f	74 1d		 je	 SHORT $LN3@Uninit_mov
  00011	56		 push	 esi
  00012	57		 push	 edi
$LL4@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	85 c0		 test	 eax, eax
  00015	74 0b		 je	 SHORT $LN2@Uninit_mov
  00017	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  0001c	8b f2		 mov	 esi, edx
  0001e	8b f8		 mov	 edi, eax
  00020	f3 a5		 rep movsd
$LN2@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00022	83 c2 6c	 add	 edx, 108		; 0000006cH
  00025	83 c0 6c	 add	 eax, 108		; 0000006cH
  00028	3b d3		 cmp	 edx, ebx
  0002a	75 e7		 jne	 SHORT $LL4@Uninit_mov
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
$LN3@Uninit_mov:
  0002e	5b		 pop	 ebx

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);
; 450  : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Uninit_move@PAUCommandInfo@@PAU1@V?$allocator@UCommandInfo@@@std@@U1@@std@@YAPAUCommandInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CommandInfo *,CommandInfo *,std::allocator<CommandInfo>,CommandInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUCommandInfo@@@std@@YAPAUCommandInfo@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUCommandInfo@@@std@@YAPAUCommandInfo@@PAU1@@Z PROC ; std::_Val_type<CommandInfo *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUCommandInfo@@@std@@YAPAUCommandInfo@@PAU1@@Z ENDP ; std::_Val_type<CommandInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UCommandInfo@@@?$allocator_traits@V?$allocator@UCommandInfo@@@std@@@std@@SAXAAV?$allocator@UCommandInfo@@@1@PAUCommandInfo@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UCommandInfo@@@?$allocator_traits@V?$allocator@UCommandInfo@@@std@@@std@@SAXAAV?$allocator@UCommandInfo@@@1@PAUCommandInfo@@@Z PROC ; std::allocator_traits<std::allocator<CommandInfo> >::destroy<CommandInfo>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@UCommandInfo@@@?$allocator_traits@V?$allocator@UCommandInfo@@@std@@@std@@SAXAAV?$allocator@UCommandInfo@@@1@PAUCommandInfo@@@Z ENDP ; std::allocator_traits<std::allocator<CommandInfo> >::destroy<CommandInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@UCommandInfo@@@std@@YAPAUCommandInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@UCommandInfo@@@std@@YAPAUCommandInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<CommandInfo>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@UCommandInfo@@@std@@YAPAUCommandInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<CommandInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAUCommandInfo@@PAU1@@std@@YAAAPAUCommandInfo@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUCommandInfo@@PAU1@@std@@YAAAPAUCommandInfo@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<CommandInfo *,CommandInfo *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAUCommandInfo@@PAU1@@std@@YAAAPAUCommandInfo@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<CommandInfo *,CommandInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUCommandInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@@std@@YAPAUCommandInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAUCommandInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@@std@@YAPAUCommandInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@@Z PROC ; std::_Uninit_move<CommandInfo *,CommandInfo *,std::_Wrap_alloc<std::allocator<CommandInfo> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCommandInfo@@PAU1@V?$allocator@UCommandInfo@@@std@@U1@@std@@YAPAUCommandInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CommandInfo *,CommandInfo *,std::allocator<CommandInfo>,CommandInfo>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAUCommandInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@@std@@YAPAUCommandInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@@Z ENDP ; std::_Uninit_move<CommandInfo *,CommandInfo *,std::_Wrap_alloc<std::allocator<CommandInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAUCommandInfo@@@std@@YAPAUCommandInfo@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUCommandInfo@@@std@@YAPAUCommandInfo@@PAU1@@Z PROC ; std::_Unchecked<CommandInfo *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAUCommandInfo@@@std@@YAPAUCommandInfo@@PAU1@@Z ENDP ; std::_Unchecked<CommandInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UCommandInfo@@@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UCommandInfo@@@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@@Z PROC ; std::_Wrap_alloc<std::allocator<CommandInfo> >::destroy<CommandInfo>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UCommandInfo@@@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@@Z ENDP ; std::_Wrap_alloc<std::allocator<CommandInfo> >::destroy<CommandInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@UCommandInfo@@@std@@YAPAUCommandInfo@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UCommandInfo@@@std@@YAPAUCommandInfo@@AAU1@@Z PROC ; std::addressof<CommandInfo>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@UCommandInfo@@@std@@YAPAUCommandInfo@@AAU1@@Z ENDP ; std::addressof<CommandInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UCommandInfo@@ABU1@@?$allocator@UCommandInfo@@@std@@QAEXPAUCommandInfo@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UCommandInfo@@ABU1@@?$allocator@UCommandInfo@@@std@@QAEXPAUCommandInfo@@ABU2@@Z PROC ; std::allocator<CommandInfo>::construct<CommandInfo,CommandInfo const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR _<_Args_0>$[ebp]
  0000f	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct:
  00017	5f		 pop	 edi

; 656  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??$construct@UCommandInfo@@ABU1@@?$allocator@UCommandInfo@@@std@@QAEXPAUCommandInfo@@ABU2@@Z ENDP ; std::allocator<CommandInfo>::construct<CommandInfo,CommandInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UCommandInfo@@AAU1@@?$allocator@UCommandInfo@@@std@@QAEXPAUCommandInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UCommandInfo@@AAU1@@?$allocator@UCommandInfo@@@std@@QAEXPAUCommandInfo@@AAU2@@Z PROC ; std::allocator<CommandInfo>::construct<CommandInfo,CommandInfo &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN3@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR _<_Args_0>$[ebp]
  0000f	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN3@construct:
  00017	5f		 pop	 edi

; 656  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??$construct@UCommandInfo@@AAU1@@?$allocator@UCommandInfo@@@std@@QAEXPAUCommandInfo@@AAU2@@Z ENDP ; std::allocator<CommandInfo>::construct<CommandInfo,CommandInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$_Move@AAPAUCommandInfo@@@std@@YA$$QAPAUCommandInfo@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAPAUCommandInfo@@@std@@YA$$QAPAUCommandInfo@@AAPAU1@@Z PROC ; std::_Move<CommandInfo * &>, COMDAT

; 1257 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1258 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1259 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAPAUCommandInfo@@@std@@YA$$QAPAUCommandInfo@@AAPAU1@@Z ENDP ; std::_Move<CommandInfo * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUCommandInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@@std@@YAPAUCommandInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUCommandInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@@std@@YAPAUCommandInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@@Z PROC ; std::_Uninitialized_move<CommandInfo *,CommandInfo *,std::_Wrap_alloc<std::allocator<CommandInfo> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCommandInfo@@PAU1@V?$allocator@UCommandInfo@@@std@@U1@@std@@YAPAUCommandInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CommandInfo *,CommandInfo *,std::allocator<CommandInfo>,CommandInfo>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAUCommandInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@@std@@YAPAUCommandInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<CommandInfo *,CommandInfo *,std::_Wrap_alloc<std::allocator<CommandInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@@std@@YAXPAUCommandInfo@@0AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@@std@@YAXPAUCommandInfo@@0AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CommandInfo> > >, COMDAT

; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@@std@@YAXPAUCommandInfo@@0AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CommandInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UCommandInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCommandInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UCommandInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCommandInfo@@0@Z PROC ; std::_Ptr_cat<CommandInfo,CommandInfo>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UCommandInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUCommandInfo@@0@Z ENDP ; std::_Ptr_cat<CommandInfo,CommandInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@UCommandInfo@@@std@@@std@@YAABV?$allocator@UCommandInfo@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@UCommandInfo@@@std@@@std@@YAABV?$allocator@UCommandInfo@@@0@ABV10@@Z PROC ; std::forward<std::allocator<CommandInfo> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@UCommandInfo@@@std@@@std@@YAABV?$allocator@UCommandInfo@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<CommandInfo> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocs@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocs@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Pocs<std::_Wrap_alloc<std::allocator<CommandInfo> > >, COMDAT

; 999  : 	}

  00000	c3		 ret	 0
??$_Pocs@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Pocs<std::_Wrap_alloc<std::allocator<CommandInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UCommandInfo@@ABU1@@?$allocator_traits@V?$allocator@UCommandInfo@@@std@@@std@@SAXAAV?$allocator@UCommandInfo@@@1@PAUCommandInfo@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UCommandInfo@@ABU1@@?$allocator_traits@V?$allocator@UCommandInfo@@@std@@@std@@SAXAAV?$allocator@UCommandInfo@@@1@PAUCommandInfo@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<CommandInfo> >::construct<CommandInfo,CommandInfo const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN8@construct
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR _<_Args_0>$[ebp]
  0000f	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN8@construct:
  00017	5f		 pop	 edi

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$construct@UCommandInfo@@ABU1@@?$allocator_traits@V?$allocator@UCommandInfo@@@std@@@std@@SAXAAV?$allocator@UCommandInfo@@@1@PAUCommandInfo@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<CommandInfo> >::construct<CommandInfo,CommandInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABUCommandInfo@@@std@@YAABUCommandInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUCommandInfo@@@std@@YAABUCommandInfo@@ABU1@@Z PROC ; std::forward<CommandInfo const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUCommandInfo@@@std@@YAABUCommandInfo@@ABU1@@Z ENDP ; std::forward<CommandInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UCommandInfo@@AAU1@@?$allocator_traits@V?$allocator@UCommandInfo@@@std@@@std@@SAXAAV?$allocator@UCommandInfo@@@1@PAUCommandInfo@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UCommandInfo@@AAU1@@?$allocator_traits@V?$allocator@UCommandInfo@@@std@@@std@@SAXAAV?$allocator@UCommandInfo@@@1@PAUCommandInfo@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<CommandInfo> >::construct<CommandInfo,CommandInfo &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00004	8b 7d 0c	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN8@construct
  0000b	56		 push	 esi
  0000c	8b 75 10	 mov	 esi, DWORD PTR _<_Args_0>$[ebp]
  0000f	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN8@construct:
  00017	5f		 pop	 edi

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$construct@UCommandInfo@@AAU1@@?$allocator_traits@V?$allocator@UCommandInfo@@@std@@@std@@SAXAAV?$allocator@UCommandInfo@@@1@PAUCommandInfo@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<CommandInfo> >::construct<CommandInfo,CommandInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAUCommandInfo@@@std@@YAAAUCommandInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUCommandInfo@@@std@@YAAAUCommandInfo@@AAU1@@Z PROC ; std::forward<CommandInfo &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUCommandInfo@@@std@@YAAAUCommandInfo@@AAU1@@Z ENDP ; std::forward<CommandInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBUCommandInfo@@@std@@YAPBUCommandInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBUCommandInfo@@@std@@YAPBUCommandInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<CommandInfo const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBUCommandInfo@@@std@@YAPBUCommandInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<CommandInfo const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAUCommandInfo@@@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEPAUCommandInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUCommandInfo@@@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEPAUCommandInfo@@PAU2@00@Z PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Umove<CommandInfo *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCommandInfo@@PAU1@V?$allocator@UCommandInfo@@@std@@U1@@std@@YAPAUCommandInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CommandInfo *,CommandInfo *,std::allocator<CommandInfo>,CommandInfo>
  00017	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUCommandInfo@@@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEPAUCommandInfo@@PAU2@00@Z ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Umove<CommandInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@@std@@YAXPAUCommandInfo@@0AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@@std@@YAXPAUCommandInfo@@0AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CommandInfo> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@@std@@YAXPAUCommandInfo@@0AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CommandInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@UCommandInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UCommandInfo@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@UCommandInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UCommandInfo@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CommandInfo> >,std::_Vector_val<std::_Simple_types<CommandInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<CommandInfo> >,std::_Vector_val<std::_Simple_types<CommandInfo> >,1><std::allocator<CommandInfo> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@UCommandInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UCommandInfo@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CommandInfo> >,std::_Vector_val<std::_Simple_types<CommandInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<CommandInfo> >,std::_Vector_val<std::_Simple_types<CommandInfo> >,1><std::allocator<CommandInfo> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocs@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocs@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@0@Z PROC ; std::_Pocs<std::_Wrap_alloc<std::allocator<CommandInfo> > >, COMDAT

; 1004 : 	typename _Alty::propagate_on_container_swap _Tag;
; 1005 : 	_Pocs(_Left, _Right, _Tag);
; 1006 : 	}

  00000	c3		 ret	 0
??$_Pocs@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@0@Z ENDP ; std::_Pocs<std::_Wrap_alloc<std::allocator<CommandInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UCommandInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UCommandInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<CommandInfo> >::construct<CommandInfo,CommandInfo const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN13@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR _<_Args_0>$[ebp]
  0000f	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN13@construct:
  00017	5f		 pop	 edi

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??$construct@UCommandInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CommandInfo> >::construct<CommandInfo,CommandInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UCommandInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UCommandInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<CommandInfo> >::construct<CommandInfo,CommandInfo &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00004	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 0c		 je	 SHORT $LN13@construct
  0000b	56		 push	 esi
  0000c	8b 75 0c	 mov	 esi, DWORD PTR _<_Args_0>$[ebp]
  0000f	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00014	f3 a5		 rep movsd
  00016	5e		 pop	 esi
$LN13@construct:
  00017	5f		 pop	 edi

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
??$construct@UCommandInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CommandInfo> >::construct<CommandInfo,CommandInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBUCommandInfo@@@std@@YAPBUCommandInfo@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUCommandInfo@@@std@@YAPBUCommandInfo@@ABU1@@Z PROC ; std::addressof<CommandInfo const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUCommandInfo@@@std@@YAPBUCommandInfo@@ABU1@@Z ENDP ; std::addressof<CommandInfo const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@PAUCommandInfo@@@std@@YAXAAPAUCommandInfo@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAUCommandInfo@@@std@@YAXAAPAUCommandInfo@@0@Z PROC ; std::swap<CommandInfo *>, COMDAT

; 51   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	56		 push	 esi
  0000a	8b 32		 mov	 esi, DWORD PTR [edx]
  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00010	89 31		 mov	 DWORD PTR [ecx], esi
  00012	5e		 pop	 esi

; 55   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@PAUCommandInfo@@@std@@YAXAAPAUCommandInfo@@0@Z ENDP ; std::swap<CommandInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$_Swap_adl@PAUCommandInfo@@@std@@YAXAAPAUCommandInfo@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Swap_adl@PAUCommandInfo@@@std@@YAXAAPAUCommandInfo@@0@Z PROC ; std::_Swap_adl<CommandInfo *>, COMDAT

; 61   : 	{	// exchange values stored at _Left and _Right, using ADL

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	56		 push	 esi

; 52   : 	_Ty _Tmp = _Move(_Left);

  0000a	8b 32		 mov	 esi, DWORD PTR [edx]

; 53   : 	_Left = _Move(_Right);

  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00010	89 31		 mov	 DWORD PTR [ecx], esi
  00012	5e		 pop	 esi

; 62   : 	swap(_Left, _Right);
; 63   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Swap_adl@PAUCommandInfo@@@std@@YAXAAPAUCommandInfo@@0@Z ENDP ; std::_Swap_adl<CommandInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8UCommandInfo@@U0@@std@@YA_NABV?$allocator@UCommandInfo@@@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8UCommandInfo@@U0@@std@@YA_NABV?$allocator@UCommandInfo@@@0@0@Z PROC ; std::operator==<CommandInfo,CommandInfo>, COMDAT

; 712  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 713  : 	}

  00002	c3		 ret	 0
??$?8UCommandInfo@@U0@@std@@YA_NABV?$allocator@UCommandInfo@@@0@0@Z ENDP ; std::operator==<CommandInfo,CommandInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8V?$allocator@UCommandInfo@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8V?$allocator@UCommandInfo@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@0@Z PROC ; std::operator==<std::allocator<CommandInfo>,std::allocator<CommandInfo> >, COMDAT

; 939  : 	return (static_cast<const _Ty&>(_Left)

  00000	b0 01		 mov	 al, 1

; 940  : 		== static_cast<const _Other&>(_Right));
; 941  : 	}

  00002	c3		 ret	 0
??$?8V?$allocator@UCommandInfo@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@0@Z ENDP ; std::operator==<std::allocator<CommandInfo>,std::allocator<CommandInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_CommandManager@@YAXXZ
text$yd	SEGMENT
??__Fg_CommandManager@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CommandManager'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CommandManager@@3VCommandManager@@A ; g_CommandManager
  00005	e9 00 00 00 00	 jmp	 ??1CommandManager@@UAE@XZ ; CommandManager::~CommandManager
??__Fg_CommandManager@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CommandManager''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
;	COMDAT ??__Eg_CommandManager@@YAXXZ
text$di	SEGMENT
??__Eg_CommandManager@@YAXXZ PROC			; `dynamic initializer for 'g_CommandManager'', COMDAT

; 20   : CommandManager g_CommandManager;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CommandManager@@3VCommandManager@@A ; g_CommandManager
  00005	e8 00 00 00 00	 call	 ??0CommandManager@@QAE@XZ ; CommandManager::CommandManager
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CommandManager@@YAXXZ ; `dynamic atexit destructor for 'g_CommandManager''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CommandManager@@YAXXZ ENDP			; `dynamic initializer for 'g_CommandManager''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCommandManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCommandManager@@UAEPAXI@Z PROC			; CommandManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CommandManager@@UAE@XZ ; CommandManager::~CommandManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 10		 push	 16			; 00000010H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCommandManager@@UAEPAXI@Z ENDP			; CommandManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IBEXPAUCommandInfo@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IBEXPAUCommandInfo@@0@Z PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IBEXPAUCommandInfo@@0@Z ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 33		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	c1 fa 05	 sar	 edx, 5
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@I@Z ; std::_Wrap_alloc<std::allocator<CommandInfo> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00035	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0003c	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0003d	c3		 ret	 0
?_Tidy@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
tv202 = 8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00006	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  0000b	56		 push	 esi
  0000c	57		 push	 edi

; 1646 : 		if (_Unused_capacity() < _Count)

  0000d	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00010	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00013	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00016	2b d6		 sub	 edx, esi
  00018	f7 ea		 imul	 edx
  0001a	c1 fa 05	 sar	 edx, 5
  0001d	8b c2		 mov	 eax, edx
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	03 c2		 add	 eax, edx

; 1646 : 		if (_Unused_capacity() < _Count)

  00024	3b c7		 cmp	 eax, edi
  00026	73 61		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00028	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002a	2b f0		 sub	 esi, eax
  0002c	89 45 08	 mov	 DWORD PTR tv202[ebp], eax
  0002f	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  00034	f7 ee		 imul	 esi

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00036	b8 97 d0 5e 02	 mov	 eax, 39768215		; 025ed097H

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0003b	c1 fa 05	 sar	 edx, 5
  0003e	8b ca		 mov	 ecx, edx
  00040	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00043	03 ca		 add	 ecx, edx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00045	2b c1		 sub	 eax, ecx
  00047	3b c7		 cmp	 eax, edi
  00049	72 45		 jb	 SHORT $LN134@Reserve

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004b	03 f9		 add	 edi, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0004d	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  00052	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00055	2b 4d 08	 sub	 ecx, DWORD PTR tv202[ebp]
  00058	f7 e9		 imul	 ecx
  0005a	c1 fa 05	 sar	 edx, 5
  0005d	8b f2		 mov	 esi, edx
  0005f	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00062	03 f2		 add	 esi, edx

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00064	ba 97 d0 5e 02	 mov	 edx, 39768215		; 025ed097H
  00069	8b c6		 mov	 eax, esi
  0006b	d1 e8		 shr	 eax, 1
  0006d	2b d0		 sub	 edx, eax
  0006f	3b d6		 cmp	 edx, esi
  00071	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  00074	b8 00 00 00 00	 mov	 eax, 0
  00079	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  0007c	3b cf		 cmp	 ecx, edi
  0007e	0f 42 cf	 cmovb	 ecx, edi

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00081	51		 push	 ecx
  00082	8b cb		 mov	 ecx, ebx
  00084	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Reallocate
$LN2@Reserve:
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx

; 1651 : 			}
; 1652 : 		}

  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00095	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  0009a	cc		 int	 3
?_Reserve@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00030	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@UCommandInfo@@@std@@QAEPAUCommandInfo@@I@Z ; std::allocator<CommandInfo>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00038	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0003b	8b f8		 mov	 edi, eax

; 1622 : 
; 1623 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00044	6a 00		 push	 0
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	ff 76 04	 push	 DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0004b	89 7d ec	 mov	 DWORD PTR __Ptr$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0004e	ff 36		 push	 DWORD PTR [esi]
  00050	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUCommandInfo@@PAU1@V?$allocator@UCommandInfo@@@std@@U1@@std@@YAPAUCommandInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CommandInfo *,CommandInfo *,std::allocator<CommandInfo>,CommandInfo>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00055	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00058	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  0005d	2b 0e		 sub	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0005f	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00062	f7 e9		 imul	 ecx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00064	8b 06		 mov	 eax, DWORD PTR [esi]

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00066	c1 fa 05	 sar	 edx, 5
  00069	8b da		 mov	 ebx, edx
  0006b	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0006e	03 da		 add	 ebx, edx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00070	85 c0		 test	 eax, eax
  00072	74 20		 je	 SHORT $LN3@Reallocate

; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00074	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00077	2b c8		 sub	 ecx, eax
  00079	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  0007e	f7 e9		 imul	 ecx
  00080	8b ce		 mov	 ecx, esi
  00082	c1 fa 05	 sar	 edx, 5
  00085	8b c2		 mov	 eax, edx
  00087	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008a	03 c2		 add	 eax, edx
  0008c	50		 push	 eax
  0008d	ff 36		 push	 DWORD PTR [esi]
  0008f	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@I@Z ; std::_Wrap_alloc<std::allocator<CommandInfo> >::deallocate
$LN3@Reallocate:

; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;

  00094	6b 45 08 6c	 imul	 eax, DWORD PTR __Count$[ebp], 108
  00098	03 c7		 add	 eax, edi
  0009a	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  0009d	6b c3 6c	 imul	 eax, ebx, 108
  000a0	03 c7		 add	 eax, edi
  000a2	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  000a5	89 3e		 mov	 DWORD PTR [esi], edi

; 1642 : 		}

  000a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b1	59		 pop	 ecx
  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z$0:

; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);

  000bb	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  000be	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  000c4	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@I@Z ; std::_Wrap_alloc<std::allocator<CommandInfo> >::deallocate

; 1627 : 		_RERAISE;

  000c9	6a 00		 push	 0
  000cb	6a 00		 push	 0
  000cd	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN175@Reallocate:
$LN174@Reallocate:
  000d2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IBE_NPBUCommandInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IBE_NPBUCommandInfo@@@Z PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IBE_NPBUCommandInfo@@@Z ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IBEII@Z PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0000d	b9 97 d0 5e 02	 mov	 ecx, 39768215		; 025ed097H

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00012	f7 ea		 imul	 edx
  00014	56		 push	 esi
  00015	c1 fa 05	 sar	 edx, 5
  00018	8b f2		 mov	 esi, edx
  0001a	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001d	03 f2		 add	 esi, edx

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0001f	8b c6		 mov	 eax, esi
  00021	d1 e8		 shr	 eax, 1
  00023	57		 push	 edi
  00024	2b c8		 sub	 ecx, eax
  00026	33 ff		 xor	 edi, edi
  00028	3b ce		 cmp	 ecx, esi
  0002a	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0002d	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00030	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00033	5f		 pop	 edi
  00034	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  00038	8b c2		 mov	 eax, edx
  0003a	5e		 pop	 esi

; 1612 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IBEII@Z ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXPAUCommandInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXPAUCommandInfo@@0@Z PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXPAUCommandInfo@@0@Z ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?swap@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?swap@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAEXAAV12@@Z PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::swap, COMDAT
; _this$ = ecx

; 1548 : 		{	// exchange contents with _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1549 : 		if (this == &_Right)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 20		 je	 SHORT $LN7@swap
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	8b 16		 mov	 edx, DWORD PTR [esi]
  00012	89 06		 mov	 DWORD PTR [esi], eax

; 54   : 	_Right = _Move(_Tmp);

  00014	89 17		 mov	 DWORD PTR [edi], edx

; 52   : 	_Ty _Tmp = _Move(_Left);

  00016	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 53   : 	_Left = _Move(_Right);

  00019	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 54   : 	_Right = _Move(_Tmp);

  0001f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 52   : 	_Ty _Tmp = _Move(_Left);

  00022	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 53   : 	_Left = _Move(_Right);

  00025	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 54   : 	_Right = _Move(_Tmp);

  0002b	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
$LN7@swap:
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1576 : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?swap@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::swap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::clear, COMDAT
; _this$ = ecx

; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1543 : 		}

  00005	c3		 ret	 0
?clear@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAEXABUCommandInfo@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAEXABUCommandInfo@@@Z PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 75 08	 mov	 esi, DWORD PTR __Val$[ebp]
  0000a	57		 push	 edi
  0000b	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0000e	3b f1		 cmp	 esi, ecx
  00010	73 45		 jae	 SHORT $LN2@push_back
  00012	8b 03		 mov	 eax, DWORD PTR [ebx]
  00014	3b c6		 cmp	 eax, esi
  00016	77 3f		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00018	2b f0		 sub	 esi, eax
  0001a	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  0001f	f7 ee		 imul	 esi
  00021	c1 fa 05	 sar	 edx, 5
  00024	8b f2		 mov	 esi, edx
  00026	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00029	03 f2		 add	 esi, edx

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0002b	3b 4b 08	 cmp	 ecx, DWORD PTR [ebx+8]
  0002e	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  00030	6a 01		 push	 1
  00032	8b cb		 mov	 ecx, ebx
  00034	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00039	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  0003c	85 ff		 test	 edi, edi
  0003e	74 33		 je	 SHORT $LN205@push_back
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1281 : 			this->_Getal().construct(this->_Mylast(),

  00040	6b f6 6c	 imul	 esi, esi, 108
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00043	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1281 : 			this->_Getal().construct(this->_Mylast(),

  00048	03 33		 add	 esi, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0004a	f3 a5		 rep movsd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  0004c	83 43 04 6c	 add	 DWORD PTR [ebx+4], 108	; 0000006cH
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx

; 1293 : 			}
; 1294 : 		}

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
$LN2@push_back:

; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  00057	3b 4b 08	 cmp	 ecx, DWORD PTR [ebx+8]
  0005a	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  0005c	6a 01		 push	 1
  0005e	8b cb		 mov	 ecx, ebx
  00060	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@IAEXI@Z ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00065	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00068	85 ff		 test	 edi, edi
  0006a	74 07		 je	 SHORT $LN205@push_back
  0006c	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00071	f3 a5		 rep movsd
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00073	83 43 04 6c	 add	 DWORD PTR [ebx+4], 108	; 0000006cH
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx

; 1293 : 			}
; 1294 : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
?push_back@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAEXABUCommandInfo@@@Z ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAEAAUCommandInfo@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAEAAUCommandInfo@@I@Z PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::operator[], COMDAT
; _this$ = ecx

; 1228 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00003	6b 45 08 6c	 imul	 eax, DWORD PTR __Pos$[ebp], 108
  00007	03 01		 add	 eax, DWORD PTR [ecx]

; 1241 : 		}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
??A?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAEAAUCommandInfo@@I@Z ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 97 d0 5e 02	 mov	 eax, 39768215		; 025ed097H

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 05	 sar	 edx, 5
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1180 : 		}

  00016	c3		 ret	 0
?size@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  00008	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 05	 sar	 edx, 5
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx

; 1048 : 		}

  00017	c3		 ret	 0
?_Unused_capacity@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 05	 sar	 edx, 5
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1043 : 		}

  00016	c3		 ret	 0
?capacity@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::~vector<CommandInfo,std::allocator<CommandInfo> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 33		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	c1 fa 05	 sar	 edx, 5
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@I@Z ; std::_Wrap_alloc<std::allocator<CommandInfo> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00035	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0003c	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0003d	c3		 ret	 0
??1?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::~vector<CommandInfo,std::allocator<CommandInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<CommandInfo,std::allocator<CommandInfo> >::vector<CommandInfo,std::allocator<CommandInfo> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<CommandInfo,std::allocator<CommandInfo> >::vector<CommandInfo,std::allocator<CommandInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CommandInfo> >,std::_Vector_val<std::_Simple_types<CommandInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CommandInfo> >,std::_Vector_val<std::_Simple_types<CommandInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CommandInfo> >,std::_Vector_val<std::_Simple_types<CommandInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CommandInfo> >,std::_Vector_val<std::_Simple_types<CommandInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CommandInfo> >,std::_Vector_val<std::_Simple_types<CommandInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CommandInfo> >,std::_Vector_val<std::_Simple_types<CommandInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CommandInfo> >,std::_Vector_val<std::_Simple_types<CommandInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CommandInfo> >,std::_Vector_val<std::_Simple_types<CommandInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CommandInfo> >::_Vector_val<std::_Simple_types<CommandInfo> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CommandInfo> >::_Vector_val<std::_Simple_types<CommandInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QBEABQAUCommandInfo@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QBEABQAUCommandInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QBEABQAUCommandInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEAAPAUCommandInfo@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEAAPAUCommandInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEAAPAUCommandInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QBEABQAUCommandInfo@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QBEABQAUCommandInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QBEABQAUCommandInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEAAPAUCommandInfo@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEAAPAUCommandInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEAAPAUCommandInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QBEABQAUCommandInfo@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QBEABQAUCommandInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QBEABQAUCommandInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEAAPAUCommandInfo@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEAAPAUCommandInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEAAPAUCommandInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UCommandInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Swap_all, COMDAT
; _this$ = ecx

; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}

  00000	c2 04 00	 ret	 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Swap_alloc, COMDAT
; _this$ = ecx

; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}

  00000	c2 04 00	 ret	 4
?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Swap_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UCommandInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UCommandInfo@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UCommandInfo@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >::_Vector_alloc<std::_Vec_base_types<CommandInfo,std::allocator<CommandInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<CommandInfo> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 97 d0 5e 02	 mov	 eax, 39768215		; 025ed097H

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CommandInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CommandInfo> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 139  : 	}
; 140  : 
; 141  : 		// TEMPLATE FUNCTION _Construct
; 142  : template<class _Ty1,
; 143  : 	class _Ty2> inline
; 144  : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 145  : 	{	// construct object at _Ptr with value _Val
; 146  : 	void *_Vptr = _Ptr;
; 147  : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 148  : 	}
; 149  : 
; 150  : template<class _Ty1> inline
; 151  : 	void _Construct(_Ty1 *_Ptr)
; 152  : 	{	// construct object at _Ptr with default value
; 153  : 	void *_Vptr = _Ptr;
; 154  : 
; 155  : 	::new (_Vptr) _Ty1();
; 156  : 	}
; 157  : 
; 158  : 		// TEMPLATE FUNCTION _Destroy
; 159  : template<class _Ty> inline
; 160  : 	void _Destroy(_Ty *_Ptr)
; 161  : 	{	// destroy object at _Ptr
; 162  : 	_Ptr->~_Ty();
; 163  : 	}
; 164  : 
; 165  : 		// TEMPLATE FUNCTION _Destroy_range
; 166  : template<class _Alloc> inline
; 167  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 168  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 169  : 		_Nonscalar_ptr_iterator_tag)
; 170  : 	{	// destroy [_First, _Last), arbitrary type
; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d 97 d0 5e 02	 cmp	 eax, 39768215		; 025ed097H
  0000e	77 31		 ja	 SHORT $LN16@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	6b c0 6c	 imul	 eax, eax, 108

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN7@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN18@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN19@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN20@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN21@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN7@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 909  : 		_Mybase::deallocate(_Ptr, _Count);
; 910  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN16@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  0005a	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CommandInfo> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEPAUCommandInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEPAUCommandInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CommandInfo> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@UCommandInfo@@@std@@QAEPAUCommandInfo@@I@Z ; std::allocator<CommandInfo>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEPAUCommandInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CommandInfo> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAE@ABV?$allocator@UCommandInfo@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAE@ABV?$allocator@UCommandInfo@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<CommandInfo> >::_Wrap_alloc<std::allocator<CommandInfo> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAE@ABV?$allocator@UCommandInfo@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<CommandInfo> >::_Wrap_alloc<std::allocator<CommandInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@UCommandInfo@@@std@@@std@@SAIABV?$allocator@UCommandInfo@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@UCommandInfo@@@std@@@std@@SAIABV?$allocator@UCommandInfo@@@2@@Z PROC ; std::allocator_traits<std::allocator<CommandInfo> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 97 d0 5e 02	 mov	 eax, 39768215		; 025ed097H

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@UCommandInfo@@@std@@@std@@SAIABV?$allocator@UCommandInfo@@@2@@Z ENDP ; std::allocator_traits<std::allocator<CommandInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@UCommandInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UCommandInfo@@@std@@QBEIXZ PROC	; std::allocator<CommandInfo>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 97 d0 5e 02	 mov	 eax, 39768215		; 025ed097H

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UCommandInfo@@@std@@QBEIXZ ENDP	; std::allocator<CommandInfo>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@UCommandInfo@@@std@@QAEPAUCommandInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UCommandInfo@@@std@@QAEPAUCommandInfo@@I@Z PROC ; std::allocator<CommandInfo>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d 97 d0 5e 02	 cmp	 eax, 39768215		; 025ed097H
  00013	77 3c		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	6b c0 6c	 imul	 eax, eax, 108

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@UCommandInfo@@@std@@QAEPAUCommandInfo@@I@Z ENDP ; std::allocator<CommandInfo>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UCommandInfo@@@std@@QAEXPAUCommandInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UCommandInfo@@@std@@QAEXPAUCommandInfo@@I@Z PROC ; std::allocator<CommandInfo>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d 97 d0 5e 02	 cmp	 eax, 39768215		; 025ed097H
  0000e	77 31		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	6b c0 6c	 imul	 eax, eax, 108

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 639  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005a	cc		 int	 3
?deallocate@?$allocator@UCommandInfo@@@std@@QAEXPAUCommandInfo@@I@Z ENDP ; std::allocator<CommandInfo>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UCommandInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UCommandInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<CommandInfo>::allocator<CommandInfo>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@UCommandInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<CommandInfo>::allocator<CommandInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UCommandInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UCommandInfo@@@std@@QAE@XZ PROC		; std::allocator<CommandInfo>::allocator<CommandInfo>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@UCommandInfo@@@std@@QAE@XZ ENDP		; std::allocator<CommandInfo>::allocator<CommandInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
;	COMDAT ?GetCommand@CommandManager@@QAEPAUCommandInfo@@PAD@Z
_TEXT	SEGMENT
tv199 = -4						; size = 4
_Text$ = 8						; size = 4
?GetCommand@CommandManager@@QAEPAUCommandInfo@@PAD@Z PROC ; CommandManager::GetCommand, COMDAT
; _this$ = ecx

; 1259 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00007	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  0000c	56		 push	 esi
  0000d	57		 push	 edi
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 1260 : 	for( int i = 0; i < this->m_CommandInfo.size(); i++ )

  0000e	33 ff		 xor	 edi, edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00010	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00013	2b 53 04	 sub	 edx, DWORD PTR [ebx+4]
  00016	f7 ea		 imul	 edx
  00018	c1 fa 05	 sar	 edx, 5
  0001b	8b c2		 mov	 eax, edx
  0001d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00020	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 1260 : 	for( int i = 0; i < this->m_CommandInfo.size(); i++ )

  00022	74 59		 je	 SHORT $LN3@GetCommand

; 1262 : 		if( strcmp(this->m_CommandInfo[i].Text, Text) == 0 )

  00024	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00027	89 45 fc	 mov	 DWORD PTR tv199[ebp], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 314  : 		return (_Myval2);

  0002a	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
  0002d	0f 1f 00	 npad	 3
$LL4@GetCommand:
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 1262 : 		if( strcmp(this->m_CommandInfo[i].Text, Text) == 0 )

  00030	8b 45 08	 mov	 eax, DWORD PTR _Text$[ebp]
  00033	8b ce		 mov	 ecx, esi
$LL55@GetCommand:
  00035	8a 11		 mov	 dl, BYTE PTR [ecx]
  00037	3a 10		 cmp	 dl, BYTE PTR [eax]
  00039	75 1a		 jne	 SHORT $LN56@GetCommand
  0003b	84 d2		 test	 dl, dl
  0003d	74 12		 je	 SHORT $LN57@GetCommand
  0003f	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00042	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00045	75 0e		 jne	 SHORT $LN56@GetCommand
  00047	83 c1 02	 add	 ecx, 2
  0004a	83 c0 02	 add	 eax, 2
  0004d	84 d2		 test	 dl, dl
  0004f	75 e4		 jne	 SHORT $LL55@GetCommand
$LN57@GetCommand:
  00051	33 c0		 xor	 eax, eax
  00053	eb 05		 jmp	 SHORT $LN58@GetCommand
$LN56@GetCommand:
  00055	1b c0		 sbb	 eax, eax
  00057	83 c8 01	 or	 eax, 1
$LN58@GetCommand:
  0005a	85 c0		 test	 eax, eax
  0005c	74 2a		 je	 SHORT $LN51@GetCommand
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0005e	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00061	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  00066	2b 4b 04	 sub	 ecx, DWORD PTR [ebx+4]
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 1260 : 	for( int i = 0; i < this->m_CommandInfo.size(); i++ )

  00069	47		 inc	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0006a	f7 e9		 imul	 ecx
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 1260 : 	for( int i = 0; i < this->m_CommandInfo.size(); i++ )

  0006c	83 c6 6c	 add	 esi, 108		; 0000006cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0006f	c1 fa 05	 sar	 edx, 5
  00072	8b c2		 mov	 eax, edx
  00074	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00077	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 1260 : 	for( int i = 0; i < this->m_CommandInfo.size(); i++ )

  00079	3b f8		 cmp	 edi, eax
  0007b	72 b3		 jb	 SHORT $LL4@GetCommand
$LN3@GetCommand:
  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi

; 1263 : 		{
; 1264 : 			return &m_CommandInfo[i];
; 1265 : 		}
; 1266 : 	}
; 1267 : 	// ----
; 1268 : 	return NULL;

  0007f	33 c0		 xor	 eax, eax
  00081	5b		 pop	 ebx

; 1269 : }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
$LN51@GetCommand:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00088	6b c7 6c	 imul	 eax, edi, 108
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	03 45 fc	 add	 eax, DWORD PTR tv199[ebp]
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 1269 : }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 04 00	 ret	 4
?GetCommand@CommandManager@@QAEPAUCommandInfo@@PAD@Z ENDP ; CommandManager::GetCommand
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
;	COMDAT ?GetCommand@CommandManager@@QAEPAUCommandInfo@@H@Z
_TEXT	SEGMENT
tv225 = -4						; size = 4
_Index$ = 8						; size = 4
?GetCommand@CommandManager@@QAEPAUCommandInfo@@H@Z PROC	; CommandManager::GetCommand, COMDAT
; _this$ = ecx

; 1245 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00007	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  0000c	56		 push	 esi
  0000d	57		 push	 edi
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 1246 : 	for( int i = 0; i < this->m_CommandInfo.size(); i++ )

  0000e	33 ff		 xor	 edi, edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00010	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00013	2b 53 04	 sub	 edx, DWORD PTR [ebx+4]
  00016	f7 ea		 imul	 edx
  00018	c1 fa 05	 sar	 edx, 5
  0001b	8b c2		 mov	 eax, edx
  0001d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00020	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 1246 : 	for( int i = 0; i < this->m_CommandInfo.size(); i++ )

  00022	74 32		 je	 SHORT $LN3@GetCommand
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00024	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 314  : 		return (_Myval2);

  00027	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00029	89 4d fc	 mov	 DWORD PTR tv225[ebp], ecx
  0002c	0f 1f 40 00	 npad	 4
$LL4@GetCommand:
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 1248 : 		if( this->m_CommandInfo[i].Index == Index )

  00030	8b 45 08	 mov	 eax, DWORD PTR _Index$[ebp]
  00033	39 06		 cmp	 DWORD PTR [esi], eax
  00035	74 2a		 je	 SHORT $LN51@GetCommand
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00037	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0003a	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  0003f	2b 4b 04	 sub	 ecx, DWORD PTR [ebx+4]
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 1246 : 	for( int i = 0; i < this->m_CommandInfo.size(); i++ )

  00042	47		 inc	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00043	f7 e9		 imul	 ecx
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 1246 : 	for( int i = 0; i < this->m_CommandInfo.size(); i++ )

  00045	83 c6 6c	 add	 esi, 108		; 0000006cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00048	c1 fa 05	 sar	 edx, 5
  0004b	8b c2		 mov	 eax, edx
  0004d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00050	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 1246 : 	for( int i = 0; i < this->m_CommandInfo.size(); i++ )

  00052	3b f8		 cmp	 edi, eax
  00054	72 da		 jb	 SHORT $LL4@GetCommand
$LN3@GetCommand:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1249 : 		{
; 1250 : 			return &m_CommandInfo[i];
; 1251 : 		}
; 1252 : 	}
; 1253 : 	// ----
; 1254 : 	return NULL;

  00058	33 c0		 xor	 eax, eax
  0005a	5b		 pop	 ebx

; 1255 : }

  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN51@GetCommand:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00061	6b c7 6c	 imul	 eax, edi, 108
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	03 45 fc	 add	 eax, DWORD PTR tv225[ebp]
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 1255 : }

  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
?GetCommand@CommandManager@@QAEPAUCommandInfo@@H@Z ENDP	; CommandManager::GetCommand
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
;	COMDAT ?GetTokenNumber@CommandManager@@QAEHXZ
_TEXT	SEGMENT
_Separator$ = -4					; size = 2
?GetTokenNumber@CommandManager@@QAEHXZ PROC		; CommandManager::GetTokenNumber, COMDAT
; _this$ = ecx

; 1231 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1232 : 	char Separator[2] = " ";

  00004	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00009	66 89 45 fc	 mov	 WORD PTR _Separator$[ebp], ax

; 1233 : 	LPSTR Token = strtok(0, Separator);

  0000d	8d 45 fc	 lea	 eax, DWORD PTR _Separator$[ebp]
  00010	50		 push	 eax
  00011	6a 00		 push	 0
  00013	e8 00 00 00 00	 call	 _strtok
  00018	83 c4 08	 add	 esp, 8

; 1234 : 	// ----
; 1235 : 	if( Token != NULL )

  0001b	85 c0		 test	 eax, eax
  0001d	74 0d		 je	 SHORT $LN2@GetTokenNu

; 1236 : 	{
; 1237 : 		return atoi(Token);

  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 _atoi
  00025	83 c4 04	 add	 esp, 4

; 1241 : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN2@GetTokenNu:

; 1238 : 	}
; 1239 : 	// ----
; 1240 : 	return -1;

  0002c	83 c8 ff	 or	 eax, -1

; 1241 : }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?GetTokenNumber@CommandManager@@QAEHXZ ENDP		; CommandManager::GetTokenNumber
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
;	COMDAT ?GetTokenString@CommandManager@@QAEPADXZ
_TEXT	SEGMENT
_Separator$ = -4					; size = 2
?GetTokenString@CommandManager@@QAEPADXZ PROC		; CommandManager::GetTokenString, COMDAT
; _this$ = ecx

; 1224 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1225 : 	char Separator[2] = " ";

  00004	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00009	66 89 45 fc	 mov	 WORD PTR _Separator$[ebp], ax

; 1226 : 	return strtok(0, Separator);

  0000d	8d 45 fc	 lea	 eax, DWORD PTR _Separator$[ebp]
  00010	50		 push	 eax
  00011	6a 00		 push	 0
  00013	e8 00 00 00 00	 call	 _strtok
  00018	83 c4 08	 add	 esp, 8

; 1227 : }

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?GetTokenString@CommandManager@@QAEPADXZ ENDP		; CommandManager::GetTokenString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
;	COMDAT ?GetUserInfo@CommandManager@@QAEPAUOBJECTSTRUCT@@PAU2@PAD@Z
_TEXT	SEGMENT
_lpUser$ = 8						; size = 4
_UserName$ = 12						; size = 4
?GetUserInfo@CommandManager@@QAEPAUOBJECTSTRUCT@@PAU2@PAD@Z PROC ; CommandManager::GetUserInfo, COMDAT
; _this$ = ecx

; 1203 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1204 : 	for( int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++ )

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _UserName$[ebp]
  00007	56		 push	 esi
  00008	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000e	57		 push	 edi
  0000f	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  00014	81 c6 5d dd 49
	06		 add	 esi, 105504093		; 0649dd5dH
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL4@GetUserInf:

; 1205 : 	{
; 1206 : 		if( gObj[i].Connected >= PLAYER_PLAYING )

  00020	83 7e a7 03	 cmp	 DWORD PTR [esi-89], 3
  00024	7c 33		 jl	 SHORT $LN2@GetUserInf

; 1207 : 		{
; 1208 : 			if( gObj[i].Name[0] == *UserName )

  00026	8a 06		 mov	 al, BYTE PTR [esi]
  00028	3a 03		 cmp	 al, BYTE PTR [ebx]
  0002a	75 2d		 jne	 SHORT $LN2@GetUserInf

; 1209 : 			{
; 1210 : 				if( strcmp(gObj[i].Name, UserName) == 0 )

  0002c	8b c3		 mov	 eax, ebx
  0002e	8b ce		 mov	 ecx, esi
$LL15@GetUserInf:
  00030	8a 11		 mov	 dl, BYTE PTR [ecx]
  00032	3a 10		 cmp	 dl, BYTE PTR [eax]
  00034	75 1a		 jne	 SHORT $LN16@GetUserInf
  00036	84 d2		 test	 dl, dl
  00038	74 12		 je	 SHORT $LN17@GetUserInf
  0003a	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0003d	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00040	75 0e		 jne	 SHORT $LN16@GetUserInf
  00042	83 c1 02	 add	 ecx, 2
  00045	83 c0 02	 add	 eax, 2
  00048	84 d2		 test	 dl, dl
  0004a	75 e4		 jne	 SHORT $LL15@GetUserInf
$LN17@GetUserInf:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 05		 jmp	 SHORT $LN18@GetUserInf
$LN16@GetUserInf:
  00050	1b c0		 sbb	 eax, eax
  00052	83 c8 01	 or	 eax, 1
$LN18@GetUserInf:
  00055	85 c0		 test	 eax, eax
  00057	74 2a		 je	 SHORT $LN10@GetUserInf
$LN2@GetUserInf:

; 1204 : 	for( int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++ )

  00059	47		 inc	 edi
  0005a	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00060	81 ff ec 2c 00
	00		 cmp	 edi, 11500		; 00002cecH
  00066	7c b8		 jl	 SHORT $LL4@GetUserInf

; 1213 : 				}
; 1214 : 			}
; 1215 : 		}
; 1216 : 	}
; 1217 : 	// ----
; 1218 : 	MsgOutput(lpUser->m_Index, "Target user not found");

  00068	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DMHAJLGP@Target?5user?5not?5found?$AA@
  00070	ff 30		 push	 DWORD PTR [eax]
  00072	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00077	83 c4 08	 add	 esp, 8

; 1219 : 	return NULL;

  0007a	33 c0		 xor	 eax, eax
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx

; 1220 : }

  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
$LN10@GetUserInf:

; 1211 : 				{
; 1212 : 					return &gObj[i];

  00083	69 c7 40 27 00
	00		 imul	 eax, edi, 10048
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1220 : }

  00092	5d		 pop	 ebp
  00093	c2 08 00	 ret	 8
?GetUserInfo@CommandManager@@QAEPAUOBJECTSTRUCT@@PAU2@PAD@Z ENDP ; CommandManager::GetUserInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
;	COMDAT ?CheckCommand@CommandManager@@QAEEPAUOBJECTSTRUCT@@PAD@Z
_TEXT	SEGMENT
_lpUser$ = 8						; size = 4
_Text$ = 12						; size = 4
?CheckCommand@CommandManager@@QAEEPAUOBJECTSTRUCT@@PAD@Z PROC ; CommandManager::CheckCommand, COMDAT
; _this$ = ecx

; 1125 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1126 : 	CommandInfo* lpCommand = this->GetCommand(Text);

  00003	ff 75 0c	 push	 DWORD PTR _Text$[ebp]
  00006	e8 00 00 00 00	 call	 ?GetCommand@CommandManager@@QAEPAUCommandInfo@@PAD@Z ; CommandManager::GetCommand
  0000b	8b d0		 mov	 edx, eax

; 1127 : 	// ----
; 1128 : 	if( !lpCommand )

  0000d	85 d2		 test	 edx, edx
  0000f	75 06		 jne	 SHORT $LN4@CheckComma

; 1129 : 	{
; 1130 : 		return 0;

  00011	32 c0		 xor	 al, al

; 1194 : 	{
; 1195 : 		return 6;
; 1196 : 	}
; 1197 : 	// ----
; 1198 : 	return 1;
; 1199 : }

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
$LN4@CheckComma:

; 1131 : 	}
; 1132 : 	// ----
; 1133 : 	if( lpUser->Authority < lpCommand->Access )

  00017	8b 4d 08	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  0001a	0f b6 42 54	 movzx	 eax, BYTE PTR [edx+84]
  0001e	39 81 bc 01 00
	00		 cmp	 DWORD PTR [ecx+444], eax
  00024	73 06		 jae	 SHORT $LN5@CheckComma

; 1134 : 	{
; 1135 : 		return 2;

  00026	b0 02		 mov	 al, 2

; 1194 : 	{
; 1195 : 		return 6;
; 1196 : 	}
; 1197 : 	// ----
; 1198 : 	return 1;
; 1199 : }

  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
$LN5@CheckComma:

; 1136 : 	}
; 1137 : 	// ----
; 1138 : 	if( lpCommand->Price > 0 )

  0002c	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  0002f	56		 push	 esi
  00030	85 c0		 test	 eax, eax
  00032	7e 4c		 jle	 SHORT $LN14@CheckComma

; 1139 : 	{
; 1140 : 		switch(lpCommand->PriceType)

  00034	0f b6 72 60	 movzx	 esi, BYTE PTR [edx+96]
  00038	83 fe 03	 cmp	 esi, 3
  0003b	77 43		 ja	 SHORT $LN14@CheckComma
  0003d	ff 24 b5 00 00
	00 00		 jmp	 DWORD PTR $LN24@CheckComma[esi*4]
$LN7@CheckComma:

; 1141 : 		{
; 1142 : 		case 0: //Zen
; 1143 : 			{
; 1144 : 				if( lpUser->Money < lpCommand->Price )

  00044	39 81 cc 00 00
	00		 cmp	 DWORD PTR [ecx+204], eax
  0004a	7d 34		 jge	 SHORT $LN14@CheckComma

; 1145 : 				{
; 1146 : 					return 3;

  0004c	b0 03		 mov	 al, 3
  0004e	5e		 pop	 esi

; 1194 : 	{
; 1195 : 		return 6;
; 1196 : 	}
; 1197 : 	// ----
; 1198 : 	return 1;
; 1199 : }

  0004f	5d		 pop	 ebp
  00050	c2 08 00	 ret	 8
$LN9@CheckComma:

; 1147 : 				}
; 1148 : 			}
; 1149 : 			break;
; 1150 : 			// --
; 1151 : 		case 1: //WCoinC
; 1152 : 			{
; 1153 : 				if( lpUser->m_wcCashPoint < lpCommand->Price )

  00053	39 81 68 24 00
	00		 cmp	 DWORD PTR [ecx+9320], eax
  00059	7d 25		 jge	 SHORT $LN14@CheckComma

; 1154 : 				{
; 1155 : 					return 3;

  0005b	b0 03		 mov	 al, 3
  0005d	5e		 pop	 esi

; 1194 : 	{
; 1195 : 		return 6;
; 1196 : 	}
; 1197 : 	// ----
; 1198 : 	return 1;
; 1199 : }

  0005e	5d		 pop	 ebp
  0005f	c2 08 00	 ret	 8
$LN11@CheckComma:

; 1156 : 				}
; 1157 : 			}
; 1158 : 			break;
; 1159 : 			// --
; 1160 : 		case 2: //WCoinP
; 1161 : 			{
; 1162 : 				if( lpUser->m_wpCashPoint < lpCommand->Price )

  00062	39 81 6c 24 00
	00		 cmp	 DWORD PTR [ecx+9324], eax
  00068	7d 16		 jge	 SHORT $LN14@CheckComma

; 1163 : 				{
; 1164 : 					return 3;

  0006a	b0 03		 mov	 al, 3
  0006c	5e		 pop	 esi

; 1194 : 	{
; 1195 : 		return 6;
; 1196 : 	}
; 1197 : 	// ----
; 1198 : 	return 1;
; 1199 : }

  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
$LN13@CheckComma:

; 1165 : 				}
; 1166 : 			}
; 1167 : 			break;
; 1168 : 			// --
; 1169 : 		case 3: //WCoinG
; 1170 : 			{
; 1171 : 				if( lpUser->m_wgCashPoint < lpCommand->Price )

  00071	39 81 70 24 00
	00		 cmp	 DWORD PTR [ecx+9328], eax
  00077	7d 07		 jge	 SHORT $LN14@CheckComma

; 1172 : 				{
; 1173 : 					return 3;

  00079	b0 03		 mov	 al, 3
  0007b	5e		 pop	 esi

; 1194 : 	{
; 1195 : 		return 6;
; 1196 : 	}
; 1197 : 	// ----
; 1198 : 	return 1;
; 1199 : }

  0007c	5d		 pop	 ebp
  0007d	c2 08 00	 ret	 8
$LN14@CheckComma:

; 1174 : 				}
; 1175 : 			}
; 1176 : 			break;
; 1177 : 		}
; 1178 : 	}
; 1179 : 	// ----
; 1180 : 	if( lpCommand->PremiumAccess >= 0 )

  00080	8b 72 68	 mov	 esi, DWORD PTR [edx+104]
  00083	85 f6		 test	 esi, esi
  00085	78 17		 js	 SHORT $LN16@CheckComma

; 1181 : 	{
; 1182 : 		if( m_ObjBill[lpUser->m_Index].GetPayCode() < lpCommand->PremiumAccess )

  00087	8b 01		 mov	 eax, DWORD PTR [ecx]
  00089	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0008c	c1 e0 04	 shl	 eax, 4
  0008f	39 b0 00 00 00
	00		 cmp	 DWORD PTR ?m_ObjBill@@3PAVBILL_CLASS@@A[eax], esi
  00095	7d 07		 jge	 SHORT $LN16@CheckComma

; 1183 : 		{
; 1184 : 			return 4;

  00097	b0 04		 mov	 al, 4
  00099	5e		 pop	 esi

; 1194 : 	{
; 1195 : 		return 6;
; 1196 : 	}
; 1197 : 	// ----
; 1198 : 	return 1;
; 1199 : }

  0009a	5d		 pop	 ebp
  0009b	c2 08 00	 ret	 8
$LN16@CheckComma:

; 1185 : 		}
; 1186 : 	}
; 1187 : 	// ----
; 1188 : 	if( lpUser->Level < lpCommand->MinLevel )

  0009e	0f bf 81 96 00
	00 00		 movsx	 eax, WORD PTR [ecx+150]
  000a5	3b 42 58	 cmp	 eax, DWORD PTR [edx+88]
  000a8	7d 07		 jge	 SHORT $LN17@CheckComma

; 1189 : 	{
; 1190 : 		return 5;

  000aa	b0 05		 mov	 al, 5
  000ac	5e		 pop	 esi

; 1194 : 	{
; 1195 : 		return 6;
; 1196 : 	}
; 1197 : 	// ----
; 1198 : 	return 1;
; 1199 : }

  000ad	5d		 pop	 ebp
  000ae	c2 08 00	 ret	 8
$LN17@CheckComma:

; 1191 : 	}
; 1192 : 	// ----
; 1193 : 	if( lpUser->iResetCount < lpCommand->MinReset )

  000b1	8b 89 20 27 00
	00		 mov	 ecx, DWORD PTR [ecx+10016]
  000b7	be 06 00 00 00	 mov	 esi, 6
  000bc	3b 4a 5c	 cmp	 ecx, DWORD PTR [edx+92]
  000bf	b8 01 00 00 00	 mov	 eax, 1
  000c4	0f 4c c6	 cmovl	 eax, esi
  000c7	5e		 pop	 esi

; 1194 : 	{
; 1195 : 		return 6;
; 1196 : 	}
; 1197 : 	// ----
; 1198 : 	return 1;
; 1199 : }

  000c8	5d		 pop	 ebp
  000c9	c2 08 00	 ret	 8
$LN24@CheckComma:
  000cc	00 00 00 00	 DD	 $LN7@CheckComma
  000d0	00 00 00 00	 DD	 $LN9@CheckComma
  000d4	00 00 00 00	 DD	 $LN11@CheckComma
  000d8	00 00 00 00	 DD	 $LN13@CheckComma
?CheckCommand@CommandManager@@QAEEPAUOBJECTSTRUCT@@PAD@Z ENDP ; CommandManager::CheckCommand
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
;	COMDAT ?Run@CommandManager@@QAEXPAUOBJECTSTRUCT@@PAD@Z
_TEXT	SEGMENT
_EBP7A0$1$ = -444					; size = 4
_ItemType$1$ = -440					; size = 4
_X$1$ = -436						; size = 4
_iDur$1$ = -436						; size = 4
_MapNumber$1$ = -432					; size = 4
_EBP79C$1$ = -432					; size = 4
_EBP7A4$1$ = -428					; size = 4
_Separator$ = -424					; size = 2
_lpCommand$1$ = -420					; size = 4
_EBP7A8$1 = -416					; size = 1
_lpUser$GSCopy$1$ = -412				; size = 4
_ItemCount$2$ = -412					; size = 4
tv1596 = -408						; size = 4
_Text$GSCopy$1$ = -404					; size = 4
_Y$1$ = -404						; size = 4
_lpParty$1$ = -404					; size = 4
_SkinNumber$1$ = -404					; size = 4
_lpTarget$1$ = -404					; size = 4
_EBP798$1$ = -404					; size = 4
_ServerCmd$2 = -404					; size = 7
_PartyCount$1$ = -396					; size = 4
_ItemIndex$1$ = -396					; size = 4
_UserName$1$ = -396					; size = 4
_Level$1$ = -396					; size = 4
_UserName$1$ = -396					; size = 4
_EBP7A8$1$ = -389					; size = 1
tv1853 = -389						; size = 1
tv1852 = -389						; size = 1
_lpRequest$3 = -388					; size = 106
_Text$4 = -364						; size = 80
_pMsg$5 = -280						; size = 24
_Buffer$ = -256						; size = 250
__$ArrayPad$ = -4					; size = 4
_lpUser$ = 8						; size = 4
_Text$ = 12						; size = 4
?Run@CommandManager@@QAEXPAUOBJECTSTRUCT@@PAD@Z PROC	; CommandManager::Run, COMDAT
; _this$ = ecx

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 01 00
	00		 sub	 esp, 444		; 000001bcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 84   : 	if (g_SelfDefenseOn)

  00013	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_SelfDefenseOn@@3_NA, 0 ; g_SelfDefenseOn
  0001a	53		 push	 ebx
  0001b	8b 5d 08	 mov	 ebx, DWORD PTR _lpUser$[ebp]
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	8b 7d 0c	 mov	 edi, DWORD PTR _Text$[ebp]
  00023	8b f1		 mov	 esi, ecx
  00025	89 9d 64 fe ff
	ff		 mov	 DWORD PTR _lpUser$GSCopy$1$[ebp], ebx
  0002b	89 bd 6c fe ff
	ff		 mov	 DWORD PTR _Text$GSCopy$1$[ebp], edi
  00031	74 49		 je	 SHORT $LN22@Run

; 85   : 	{
; 86   : 		if ((GetTickCount() - lpUser->MySelfDefenseTime) < g_SelfDefenseTime * 1000) 

  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00039	69 0d 00 00 00
	00 e8 03 00 00	 imul	 ecx, DWORD PTR ?g_SelfDefenseTime@@3HA, 1000 ; g_SelfDefenseTime
  00043	2b 83 fc 05 00
	00		 sub	 eax, DWORD PTR [ebx+1532]
  00049	3b c1		 cmp	 eax, ecx
  0004b	73 2f		 jae	 SHORT $LN22@Run

; 87   : 		{
; 88   : 			GCServerMsgStringSend(lMsg.Get(1133), lpUser->m_Index, 1);

  0004d	6a 01		 push	 1
  0004f	ff 33		 push	 DWORD PTR [ebx]
  00051	68 6d 04 00 00	 push	 1133			; 0000046dH
$LN246@Run:
  00056	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0005b	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00060	50		 push	 eax
$LN248@Run:
  00061	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
$LN247@Run:
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx

; 1099 : 				}
; 1100 : 			}
; 1101 : 			break;
; 1102 : 			// --
; 1103 : 		case 1: //WCoinC
; 1104 : 			{
; 1105 : 				//lpUser->m_wcCashPoint
; 1106 : 			}
; 1107 : 			break;
; 1108 : 			// --
; 1109 : 		case 2: //WCoinP
; 1110 : 			{
; 1111 : 				//lpUser->m_wpCashPoint
; 1112 : 			}
; 1113 : 			break;
; 1114 : 			// --
; 1115 : 		case 3: //WCoinG
; 1116 : 			{
; 1117 : 				//lpUser->m_wgCashPoint
; 1118 : 			}
; 1119 : 			break;
; 1120 : 	}
; 1121 : }

  0006c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006f	33 cd		 xor	 ecx, ebp
  00071	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 08 00	 ret	 8
$LN22@Run:

; 89   : 			return;
; 90   : 		}
; 91   : 	}
; 92   : 	// ----
; 93   : 	LPSTR Command = { 0 };
; 94   : 	char Buffer[250];
; 95   : 	char Separator[2] = " ";

  0007c	b8 20 00 00 00	 mov	 eax, 32			; 00000020H

; 96   : 	// ----
; 97   : 	strcpy(Buffer, Text);

  00081	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _Buffer$[ebp]
  00087	66 89 85 58 fe
	ff ff		 mov	 WORD PTR _Separator$[ebp], ax
  0008e	8b cf		 mov	 ecx, edi
  00090	2b d7		 sub	 edx, edi
$LL195@Run:
  00092	8a 01		 mov	 al, BYTE PTR [ecx]
  00094	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00097	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  0009b	84 c0		 test	 al, al
  0009d	75 f3		 jne	 SHORT $LL195@Run

; 98   : 	Command = strtok(Buffer, Separator);

  0009f	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _Separator$[ebp]
  000a5	50		 push	 eax
  000a6	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _Buffer$[ebp]
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 _strtok
  000b2	83 c4 08	 add	 esp, 8
  000b5	8b f8		 mov	 edi, eax

; 99   : 	// ----
; 100  : 	CommandInfo* lpCommand = this->GetCommand(Command);

  000b7	8b ce		 mov	 ecx, esi
  000b9	57		 push	 edi
  000ba	e8 00 00 00 00	 call	 ?GetCommand@CommandManager@@QAEPAUCommandInfo@@PAD@Z ; CommandManager::GetCommand

; 101  : 	BYTE CheckStatus = this->CheckCommand(lpUser, Command);	

  000bf	57		 push	 edi
  000c0	53		 push	 ebx
  000c1	8b ce		 mov	 ecx, esi
  000c3	89 85 5c fe ff
	ff		 mov	 DWORD PTR _lpCommand$1$[ebp], eax
  000c9	e8 00 00 00 00	 call	 ?CheckCommand@CommandManager@@QAEEPAUOBJECTSTRUCT@@PAD@Z ; CommandManager::CheckCommand

; 102  : 
; 103  : 	if (lpCommand == NULL) {

  000ce	8b 8d 5c fe ff
	ff		 mov	 ecx, DWORD PTR _lpCommand$1$[ebp]
  000d4	85 c9		 test	 ecx, ecx
  000d6	0f 84 d0 10 00
	00		 je	 $LN190@Run

; 104  : 		return;
; 105  : 	}
; 106  : 
; 107  : 	if( CheckStatus != 1)

  000dc	3c 01		 cmp	 al, 1
  000de	0f 84 8b 00 00
	00		 je	 $LN24@Run

; 108  : 	{
; 109  : 		if( CheckStatus == 0 )

  000e4	84 c0		 test	 al, al
  000e6	75 11		 jne	 SHORT $LN25@Run

; 110  : 		{
; 111  : 			MsgOutput(lpUser->m_Index, "Wrong command");

  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GJJEBBIE@Wrong?5command?$AA@
  000ed	ff 33		 push	 DWORD PTR [ebx]
  000ef	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  000f4	e9 b0 10 00 00	 jmp	 $LN240@Run
$LN25@Run:

; 112  : 		}
; 113  : 		else if( CheckStatus == 2 )

  000f9	3c 02		 cmp	 al, 2
  000fb	75 11		 jne	 SHORT $LN27@Run

; 114  : 		{
; 115  : 			MsgOutput(lpUser->m_Index, "Your access code is wrong for this command");

  000fd	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@JKLMFPBI@Your?5access?5code?5is?5wrong?5for?5th@
  00102	ff 33		 push	 DWORD PTR [ebx]
  00104	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 116  : 		}
; 117  : 		else if( CheckStatus == 3 

  00109	e9 9b 10 00 00	 jmp	 $LN240@Run
$LN27@Run:

; 118  : 			&& lpCommand->Index != Command::PKReset) // special calculation

  0010e	3c 03		 cmp	 al, 3
  00110	75 1a		 jne	 SHORT $LN29@Run
  00112	83 39 05	 cmp	 DWORD PTR [ecx], 5
  00115	0f 84 91 10 00
	00		 je	 $LN190@Run

; 119  : 		{
; 120  : 			MsgOutput(lpUser->m_Index, "You are short money for this command");

  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@FDJBFHDG@You?5are?5short?5money?5for?5this?5com@
  00120	ff 33		 push	 DWORD PTR [ebx]
  00122	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00127	e9 7d 10 00 00	 jmp	 $LN240@Run
$LN29@Run:

; 121  : 		}
; 122  : 		else if( CheckStatus == 4 )

  0012c	3c 04		 cmp	 al, 4
  0012e	75 11		 jne	 SHORT $LN31@Run

; 123  : 		{
; 124  : 			MsgOutput(lpUser->m_Index, "Your premium access code is wrong for this command");

  00130	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@IKBMDDFP@Your?5premium?5access?5code?5is?5wron@
  00135	ff 33		 push	 DWORD PTR [ebx]
  00137	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0013c	e9 68 10 00 00	 jmp	 $LN240@Run
$LN31@Run:

; 125  : 		}
; 126  : 		else if( CheckStatus == 5 )

  00141	3c 05		 cmp	 al, 5
  00143	75 11		 jne	 SHORT $LN33@Run

; 127  : 		{
; 128  : 			MsgOutput(lpUser->m_Index, "Your level is small for use this command");

  00145	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@KEINPLJP@Your?5level?5is?5small?5for?5use?5this@
  0014a	ff 33		 push	 DWORD PTR [ebx]
  0014c	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00151	e9 53 10 00 00	 jmp	 $LN240@Run
$LN33@Run:

; 129  : 		}
; 130  : 		else if( CheckStatus == 6 )

  00156	3c 06		 cmp	 al, 6
  00158	0f 85 4e 10 00
	00		 jne	 $LN190@Run

; 131  : 		{
; 132  : 			MsgOutput(lpUser->m_Index, "Your reset is small for use this command");

  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@LEGKJAEC@Your?5reset?5is?5small?5for?5use?5this@
  00163	ff 33		 push	 DWORD PTR [ebx]
  00165	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 133  : 		}
; 134  : 		// ----
; 135  : 		return;

  0016a	e9 3a 10 00 00	 jmp	 $LN240@Run
$LN24@Run:

; 136  : 	}
; 137  : 	// ----
; 138  : 	
; 139  : 	// ----
; 140  : 	switch(lpCommand->Index)

  0016f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00171	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  00174	0f 87 01 10 00
	00		 ja	 $LN187@Run
  0017a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN251@Run[eax*4]
$LN36@Run:

; 141  : 	{
; 142  : 	case Command::BanChat:
; 143  : 		{
; 144  : 			LPSTR UserName = this->GetTokenString();

  00181	8b ce		 mov	 ecx, esi
  00183	e8 00 00 00 00	 call	 ?GetTokenString@CommandManager@@QAEPADXZ ; CommandManager::GetTokenString

; 145  : 			int Time = this->GetTokenNumber();

  00188	8b ce		 mov	 ecx, esi
  0018a	89 85 74 fe ff
	ff		 mov	 DWORD PTR _UserName$1$[ebp], eax
  00190	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber
  00195	8b f8		 mov	 edi, eax

; 146  : 			// ----
; 147  : 			if( UserName == 0 || Time == -1 )

  00197	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR _UserName$1$[ebp]
  0019d	85 c0		 test	 eax, eax
  0019f	0f 84 00 0b 00
	00		 je	 $LN38@Run
  001a5	83 ff ff	 cmp	 edi, -1
  001a8	0f 84 f7 0a 00
	00		 je	 $LN38@Run

; 148  : 			{
; 149  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 150  : 				return;
; 151  : 			}
; 152  : 			// ----
; 153  : 			LPOBJ lpTarget = this->GetUserInfo(lpUser, UserName);

  001ae	50		 push	 eax
  001af	53		 push	 ebx
  001b0	8b ce		 mov	 ecx, esi
  001b2	e8 00 00 00 00	 call	 ?GetUserInfo@CommandManager@@QAEPAUOBJECTSTRUCT@@PAU2@PAD@Z ; CommandManager::GetUserInfo

; 154  : 			// ----
; 155  : 			if( !lpTarget )

  001b7	85 c0		 test	 eax, eax
  001b9	0f 84 ed 0f 00
	00		 je	 $LN190@Run

; 156  : 			{
; 157  : 				return;
; 158  : 			}
; 159  : 			// ----
; 160  : 			lpTarget->ChatLimitTime = Time;

  001bf	66 89 b8 f8 00
	00 00		 mov	 WORD PTR [eax+248], di

; 161  : 		}
; 162  : 		break;

  001c6	e9 b0 0f 00 00	 jmp	 $LN187@Run
$LN40@Run:

; 163  : 		// --
; 164  : 	case Command::BanUser: //Need DB request for set new ctrlcode
; 165  : 		{
; 166  : 			MsgOutput(lpUser->m_Index, "Command temporarily not working");

  001cb	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@MLPJHLAP@Command?5temporarily?5not?5working?$AA@
  001d0	ff 33		 push	 DWORD PTR [ebx]
  001d2	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 167  : 			return;

  001d7	e9 cd 0f 00 00	 jmp	 $LN240@Run
$LN42@Run:

; 168  : 			/*LPSTR UserName = this->GetTokenString();
; 169  : 			// ----
; 170  : 			if( UserName == 0 )
; 171  : 			{
; 172  : 			MsgOutput(lpUser->m_Index, "Syntax error in command");
; 173  : 			return;
; 174  : 			}
; 175  : 			// ----
; 176  : 			LPOBJ lpTarget = this->GetUserInfo(lpUser, UserName);
; 177  : 			// ----
; 178  : 			if( !lpTarget )
; 179  : 			{
; 180  : 			return;
; 181  : 			}
; 182  : 			// ----
; 183  : 			lpTarget->Authority = 1;*/
; 184  : 		}
; 185  : 		break;
; 186  : 		// --
; 187  : 	case Command::BanAccount:
; 188  : 		{
; 189  : 			MsgOutput(lpUser->m_Index, "Command temporarily not working");
; 190  : 			return;
; 191  : 		}
; 192  : 		break;
; 193  : 		// --
; 194  : 	case Command::Disconnect:
; 195  : 		{
; 196  : 			LPSTR UserName = this->GetTokenString();

  001dc	8b ce		 mov	 ecx, esi
  001de	e8 00 00 00 00	 call	 ?GetTokenString@CommandManager@@QAEPADXZ ; CommandManager::GetTokenString

; 197  : 			// ----
; 198  : 			if( UserName == 0 )

  001e3	85 c0		 test	 eax, eax
  001e5	0f 84 ba 0a 00
	00		 je	 $LN38@Run

; 199  : 			{
; 200  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 201  : 				return;
; 202  : 			}
; 203  : 			// ----
; 204  : 			LPOBJ lpTarget = this->GetUserInfo(lpUser, UserName);

  001eb	50		 push	 eax
  001ec	53		 push	 ebx
  001ed	8b ce		 mov	 ecx, esi
  001ef	e8 00 00 00 00	 call	 ?GetUserInfo@CommandManager@@QAEPAUOBJECTSTRUCT@@PAU2@PAD@Z ; CommandManager::GetUserInfo
  001f4	8b f0		 mov	 esi, eax

; 205  : 			// ----
; 206  : 			if( !lpTarget )

  001f6	85 f6		 test	 esi, esi
  001f8	0f 84 ae 0f 00
	00		 je	 $LN190@Run

; 207  : 			{
; 208  : 				return;
; 209  : 			}
; 210  : 			// ----
; 211  : 			CloseClient(lpTarget->m_Index);

  001fe	ff 36		 push	 DWORD PTR [esi]
  00200	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00205	83 c4 04	 add	 esp, 4

; 212  : #if (ENABLE_CUSTOM_OFFLINETRADE == 1)
; 213  : 			if( lpTarget->bOffTrade )

  00208	80 be 31 27 00
	00 00		 cmp	 BYTE PTR [esi+10033], 0
  0020f	0f 84 66 0f 00
	00		 je	 $LN187@Run

; 214  : 			{
; 215  : 				gObjDel(lpTarget->m_Index);

  00215	ff 36		 push	 DWORD PTR [esi]
  00217	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  0021c	83 c4 04	 add	 esp, 4

; 216  : 			}
; 217  : #endif
; 218  : 		}
; 219  : 		break;

  0021f	e9 57 0f 00 00	 jmp	 $LN187@Run
$LN46@Run:

; 220  : 		// --
; 221  : 	case Command::PKSet:
; 222  : 		{
; 223  : 			LPSTR UserName = this->GetTokenString();

  00224	8b ce		 mov	 ecx, esi
  00226	e8 00 00 00 00	 call	 ?GetTokenString@CommandManager@@QAEPADXZ ; CommandManager::GetTokenString

; 224  : 			int Level = this->GetTokenNumber();

  0022b	8b ce		 mov	 ecx, esi
  0022d	8b f8		 mov	 edi, eax
  0022f	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber
  00234	89 85 74 fe ff
	ff		 mov	 DWORD PTR _Level$1$[ebp], eax

; 225  : 			// ----
; 226  : 			if( UserName == 0 || Level == -1 )

  0023a	85 ff		 test	 edi, edi
  0023c	0f 84 63 0a 00
	00		 je	 $LN38@Run
  00242	83 f8 ff	 cmp	 eax, -1
  00245	0f 84 5a 0a 00
	00		 je	 $LN38@Run

; 227  : 			{
; 228  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 229  : 				return;
; 230  : 			}
; 231  : 			// ----
; 232  : 			LPOBJ lpTarget = this->GetUserInfo(lpUser, UserName);

  0024b	57		 push	 edi
  0024c	53		 push	 ebx
  0024d	8b ce		 mov	 ecx, esi
  0024f	e8 00 00 00 00	 call	 ?GetUserInfo@CommandManager@@QAEPAUOBJECTSTRUCT@@PAU2@PAD@Z ; CommandManager::GetUserInfo
  00254	8b f0		 mov	 esi, eax

; 233  : 			// ----
; 234  : 			if( !lpTarget )

  00256	85 f6		 test	 esi, esi
  00258	0f 84 4e 0f 00
	00		 je	 $LN190@Run

; 235  : 			{
; 236  : 				return;
; 237  : 			}
; 238  : 			// ----
; 239  : 			lpTarget->m_PK_Level = Level;
; 240  : 			// ----
; 241  : 			if( lpTarget->PartyNumber >= 0 )

  0025e	8b 8e 0c 06 00
	00		 mov	 ecx, DWORD PTR [esi+1548]
  00264	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR _Level$1$[ebp]
  0026a	88 86 19 01 00
	00		 mov	 BYTE PTR [esi+281], al
  00270	85 c9		 test	 ecx, ecx
  00272	78 21		 js	 SHORT $LN50@Run

; 242  : 			{
; 243  : 				gParty.SetPkLevel(lpTarget->PartyNumber, lpTarget->m_Index, lpTarget->DBNumber, lpTarget->m_PK_Level);

  00274	50		 push	 eax
  00275	ff 76 30	 push	 DWORD PTR [esi+48]
  00278	ff 36		 push	 DWORD PTR [esi]
  0027a	51		 push	 ecx
$LN244@Run:
  0027b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00280	e8 00 00 00 00	 call	 ?SetPkLevel@PartyClass@@QAEXHHHE@Z ; PartyClass::SetPkLevel

; 244  : 				gParty.SetPkCount(lpTarget->PartyNumber);

  00285	ff b6 0c 06 00
	00		 push	 DWORD PTR [esi+1548]
  0028b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00290	e8 00 00 00 00	 call	 ?SetPkCount@PartyClass@@QAEXH@Z ; PartyClass::SetPkCount
$LN50@Run:

; 245  : 			}
; 246  : 			// ----
; 247  : 			GCPkLevelSend(lpTarget->m_Index, lpTarget->m_PK_Level);

  00295	0f b6 86 19 01
	00 00		 movzx	 eax, BYTE PTR [esi+281]
  0029c	50		 push	 eax
  0029d	ff 36		 push	 DWORD PTR [esi]
  0029f	e8 00 00 00 00	 call	 ?GCPkLevelSend@@YAXHE@Z	; GCPkLevelSend
  002a4	83 c4 08	 add	 esp, 8

; 248  : 		}
; 249  : 		break;

  002a7	e9 cf 0e 00 00	 jmp	 $LN187@Run
$LN51@Run:

; 250  : 		// --
; 251  : 	case Command::PKReset:
; 252  : 		{
; 253  : 			LPSTR UserName = this->GetTokenString();

  002ac	8b ce		 mov	 ecx, esi
  002ae	e8 00 00 00 00	 call	 ?GetTokenString@CommandManager@@QAEPADXZ ; CommandManager::GetTokenString

; 254  : 			// ----
; 255  : 			if( UserName == 0 )

  002b3	85 c0		 test	 eax, eax
  002b5	0f 84 ea 09 00
	00		 je	 $LN38@Run

; 256  : 			{
; 257  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 258  : 				return;
; 259  : 			}
; 260  : 			// ----
; 261  : 			LPOBJ lpTarget = this->GetUserInfo(lpUser, UserName);

  002bb	50		 push	 eax
  002bc	53		 push	 ebx
  002bd	8b ce		 mov	 ecx, esi
  002bf	e8 00 00 00 00	 call	 ?GetUserInfo@CommandManager@@QAEPAUOBJECTSTRUCT@@PAU2@PAD@Z ; CommandManager::GetUserInfo
  002c4	8b f0		 mov	 esi, eax

; 262  : 			// ----
; 263  : 			if( !lpTarget )

  002c6	85 f6		 test	 esi, esi
  002c8	0f 84 de 0e 00
	00		 je	 $LN190@Run

; 264  : 			{
; 265  : 				return;
; 266  : 			}
; 267  : 			// ----
; 268  : 			if (lpUser->Money < lpCommand->Price * lpTarget->m_PK_Count) {

  002ce	8b bd 5c fe ff
	ff		 mov	 edi, DWORD PTR _lpCommand$1$[ebp]
  002d4	0f be 8e 18 01
	00 00		 movsx	 ecx, BYTE PTR [esi+280]
  002db	8b 83 cc 00 00
	00		 mov	 eax, DWORD PTR [ebx+204]
  002e1	8b 57 64	 mov	 edx, DWORD PTR [edi+100]
  002e4	0f af d1	 imul	 edx, ecx
  002e7	3b c2		 cmp	 eax, edx
  002e9	7d 11		 jge	 SHORT $LN54@Run

; 269  : 				MsgOutput(lpUser->m_Index, "You are short of money");

  002eb	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FNALGCI@You?5are?5short?5of?5money?$AA@
  002f0	ff 33		 push	 DWORD PTR [ebx]
  002f2	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 270  : 				return;

  002f7	e9 ad 0e 00 00	 jmp	 $LN240@Run
$LN54@Run:

; 271  : 			}
; 272  : 
; 273  : 			lpUser->Money -= lpCommand->Price * lpTarget->m_PK_Count;

  002fc	2b c2		 sub	 eax, edx

; 274  : 			GCMoneySend(lpUser->m_Index, lpUser->Money);

  002fe	50		 push	 eax
  002ff	ff 33		 push	 DWORD PTR [ebx]
  00301	89 83 cc 00 00
	00		 mov	 DWORD PTR [ebx+204], eax
  00307	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 275  : 			
; 276  : 			lpTarget->m_PK_Count = 0;
; 277  : 			lpTarget->m_PK_Level = 3;
; 278  : 			lpTarget->m_PK_Time	= 0;
; 279  : 			// ----
; 280  : 			if( lpTarget->PartyNumber >= 0 )

  0030c	8b 86 0c 06 00
	00		 mov	 eax, DWORD PTR [esi+1548]
  00312	83 c4 08	 add	 esp, 8
  00315	66 c7 86 18 01
	00 00 00 03	 mov	 WORD PTR [esi+280], 768	; 00000300H
  0031e	c7 86 1c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+284], 0
  00328	85 c0		 test	 eax, eax
  0032a	0f 88 65 ff ff
	ff		 js	 $LN50@Run

; 281  : 			{
; 282  : 				gParty.SetPkLevel(lpTarget->PartyNumber, lpTarget->m_Index, lpTarget->DBNumber, lpTarget->m_PK_Level);

  00330	6a 03		 push	 3
  00332	ff 76 30	 push	 DWORD PTR [esi+48]
  00335	ff 36		 push	 DWORD PTR [esi]
  00337	50		 push	 eax

; 283  : 				gParty.SetPkCount(lpTarget->PartyNumber);
; 284  : 			}
; 285  : 			// ----
; 286  : 			GCPkLevelSend(lpTarget->m_Index, lpTarget->m_PK_Level);
; 287  : 		}
; 288  : 		break;

  00338	e9 3e ff ff ff	 jmp	 $LN244@Run
$LN56@Run:

; 289  : 		// --
; 290  : 	case Command::MoneySet:
; 291  : 		{
; 292  : 			LPSTR UserName = this->GetTokenString();

  0033d	8b ce		 mov	 ecx, esi
  0033f	e8 00 00 00 00	 call	 ?GetTokenString@CommandManager@@QAEPADXZ ; CommandManager::GetTokenString

; 293  : 			int Money = this->GetTokenNumber();

  00344	8b ce		 mov	 ecx, esi
  00346	89 85 74 fe ff
	ff		 mov	 DWORD PTR _UserName$1$[ebp], eax
  0034c	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber
  00351	8b f8		 mov	 edi, eax

; 294  : 			// ----
; 295  : 			if( UserName == 0 || Money == -1 )

  00353	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR _UserName$1$[ebp]
  00359	85 c0		 test	 eax, eax
  0035b	0f 84 44 09 00
	00		 je	 $LN38@Run
  00361	83 ff ff	 cmp	 edi, -1
  00364	0f 84 3b 09 00
	00		 je	 $LN38@Run

; 296  : 			{
; 297  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 298  : 				return;
; 299  : 			}
; 300  : 			// ----
; 301  : 			LPOBJ lpTarget = this->GetUserInfo(lpUser, UserName);

  0036a	50		 push	 eax
  0036b	53		 push	 ebx
  0036c	8b ce		 mov	 ecx, esi
  0036e	e8 00 00 00 00	 call	 ?GetUserInfo@CommandManager@@QAEPAUOBJECTSTRUCT@@PAU2@PAD@Z ; CommandManager::GetUserInfo

; 302  : 			// ----
; 303  : 			if( !lpTarget )

  00373	85 c0		 test	 eax, eax
  00375	0f 84 31 0e 00
	00		 je	 $LN190@Run

; 304  : 			{
; 305  : 				return;
; 306  : 			}
; 307  : 			// ----
; 308  : 			lpTarget->Money = Money;
; 309  : 			GCMoneySend(lpTarget->m_Index, lpTarget->Money);

  0037b	57		 push	 edi
  0037c	ff 30		 push	 DWORD PTR [eax]
  0037e	89 b8 cc 00 00
	00		 mov	 DWORD PTR [eax+204], edi
  00384	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00389	83 c4 08	 add	 esp, 8
  0038c	e9 ea 0d 00 00	 jmp	 $LN187@Run
$LN60@Run:

; 310  : 		}
; 311  : 		break;
; 312  : 		// --
; 313  : 	case Command::MakeItem:
; 314  : 		{
; 315  : 			int EBP798;
; 316  : 			int EBP79C = 0;
; 317  : 			int EBP7A0 = 0;
; 318  : 			int EBP7A4 = 0;
; 319  : 			BYTE EBP7A8 = 0;
; 320  : 			int iDur = (BYTE)-1;//7AC
; 321  : 			int EBP7B0;
; 322  : 
; 323  : 			int ItemCount = this->GetTokenNumber();

  00391	8b ce		 mov	 ecx, esi
  00393	c7 85 54 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _EBP7A4$1$[ebp], 0
  0039d	c6 85 7b fe ff
	ff 00		 mov	 BYTE PTR _EBP7A8$1$[ebp], 0
  003a4	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber

; 324  : 			int ItemType  = this->GetTokenNumber();

  003a9	8b ce		 mov	 ecx, esi
  003ab	8b f8		 mov	 edi, eax
  003ad	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber

; 325  : 			int ItemIndex  = this->GetTokenNumber();

  003b2	8b ce		 mov	 ecx, esi
  003b4	89 85 48 fe ff
	ff		 mov	 DWORD PTR _ItemType$1$[ebp], eax
  003ba	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber

; 326  : 			EBP798 = this->GetTokenNumber();

  003bf	8b ce		 mov	 ecx, esi
  003c1	89 85 74 fe ff
	ff		 mov	 DWORD PTR _ItemIndex$1$[ebp], eax
  003c7	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber

; 327  : 			iDur = this->GetTokenNumber();

  003cc	8b ce		 mov	 ecx, esi
  003ce	89 85 6c fe ff
	ff		 mov	 DWORD PTR _EBP798$1$[ebp], eax
  003d4	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber

; 328  : 			EBP79C = this->GetTokenNumber();

  003d9	8b ce		 mov	 ecx, esi
  003db	89 85 4c fe ff
	ff		 mov	 DWORD PTR _iDur$1$[ebp], eax
  003e1	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber

; 329  : 			EBP7A0 = this->GetTokenNumber();

  003e6	8b ce		 mov	 ecx, esi
  003e8	89 85 50 fe ff
	ff		 mov	 DWORD PTR _EBP79C$1$[ebp], eax
  003ee	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber

; 330  : 			EBP7B0 = this->GetTokenNumber();

  003f3	8b ce		 mov	 ecx, esi
  003f5	89 85 44 fe ff
	ff		 mov	 DWORD PTR _EBP7A0$1$[ebp], eax
  003fb	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber
  00400	8b c8		 mov	 ecx, eax

; 331  : 
; 332  : 			if( ItemCount <= 0 )

  00402	85 ff		 test	 edi, edi
  00404	7f 0c		 jg	 SHORT $LN61@Run

; 333  : 			{
; 334  : 				ItemCount = 1;

  00406	c7 85 64 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _ItemCount$2$[ebp], 1

; 335  : 			}
; 336  : 
; 337  : 			if( ItemCount > 20 )

  00410	eb 10		 jmp	 SHORT $LN62@Run
$LN61@Run:
  00412	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00417	3b f8		 cmp	 edi, eax
  00419	0f 4f f8	 cmovg	 edi, eax
  0041c	89 bd 64 fe ff
	ff		 mov	 DWORD PTR _ItemCount$2$[ebp], edi
$LN62@Run:

; 338  : 			{
; 339  : 				ItemCount = 20;
; 340  : 			}
; 341  : 
; 342  : 			if( ItemType < 0 || ItemType > 15 )

  00422	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR _ItemType$1$[ebp]
  00428	83 fa 0f	 cmp	 edx, 15			; 0000000fH
  0042b	0f 87 74 08 00
	00		 ja	 $LN38@Run

; 343  : 			{
; 344  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 345  : 				return;
; 346  : 			}
; 347  : 
; 348  : 			if( ItemIndex < 0 || ItemIndex > 512 )

  00431	8b bd 74 fe ff
	ff		 mov	 edi, DWORD PTR _ItemIndex$1$[ebp]
  00437	81 ff 00 02 00
	00		 cmp	 edi, 512		; 00000200H
  0043d	0f 87 62 08 00
	00		 ja	 $LN38@Run

; 349  : 			{
; 350  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 351  : 				return;
; 352  : 			}
; 353  : 			
; 354  : 			int ItemCode = ITEMGET(ItemType, ItemIndex);

  00443	8b c2		 mov	 eax, edx
  00445	c1 e0 09	 shl	 eax, 9
  00448	03 c7		 add	 eax, edi

; 355  : 			
; 356  : 			if( ItemCode < ITEMGET(0, 0) || ItemCode > ITEMGET(15, 512) )

  0044a	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0044f	0f 87 50 08 00
	00		 ja	 $LN38@Run

; 357  : 			{
; 358  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 359  : 				return;
; 360  : 			}
; 361  : 
; 362  : 			if( !ItemAttribute[ItemCode].HaveItemInfo )

  00455	6b c0 70	 imul	 eax, eax, 112
  00458	80 b8 20 00 00
	00 00		 cmp	 BYTE PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[eax+32], 0
  0045f	0f 84 40 08 00
	00		 je	 $LN38@Run

; 363  : 			{
; 364  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 365  : 				return;
; 366  : 			}
; 367  : 
; 368  : 			if(ItemType == 13 && ItemIndex == 3)

  00465	83 fa 0d	 cmp	 edx, 13			; 0000000dH
  00468	75 12		 jne	 SHORT $LN70@Run
  0046a	83 ff 03	 cmp	 edi, 3
  0046d	75 0d		 jne	 SHORT $LN70@Run

; 369  : 			{
; 370  : 				if(	EBP7B0 < 8)

  0046f	83 f9 08	 cmp	 ecx, 8
  00472	7d 1e		 jge	 SHORT $LN73@Run

; 371  : 				{
; 372  : 					EBP7A4 = EBP7B0;

  00474	89 8d 54 fe ff
	ff		 mov	 DWORD PTR _EBP7A4$1$[ebp], ecx

; 373  : 				}
; 374  : 			}
; 375  : 			else

  0047a	eb 16		 jmp	 SHORT $LN73@Run
$LN70@Run:

; 376  : 			{
; 377  : 				if( EBP7B0 >= 4 )

  0047c	83 f9 04	 cmp	 ecx, 4
  0047f	7c 11		 jl	 SHORT $LN73@Run

; 378  : 				{
; 379  : 					EBP7A4 = EBP7B0 / 4;

  00481	8b c1		 mov	 eax, ecx
  00483	99		 cdq
  00484	83 e2 03	 and	 edx, 3
  00487	03 c2		 add	 eax, edx
  00489	c1 f8 02	 sar	 eax, 2
  0048c	89 85 54 fe ff
	ff		 mov	 DWORD PTR _EBP7A4$1$[ebp], eax
$LN73@Run:

; 380  : 				}
; 381  : 				else
; 382  : 				{
; 383  : 					EBP7B0 = 0;
; 384  : 				}
; 385  : 			}
; 386  : 
; 387  : 			int EBP7B4 = this->GetTokenNumber();

  00492	8b ce		 mov	 ecx, esi
  00494	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber

; 388  : 			int EBP7B8 = this->GetTokenNumber();

  00499	8b ce		 mov	 ecx, esi
  0049b	8b f8		 mov	 edi, eax
  0049d	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber
  004a2	8b c8		 mov	 ecx, eax

; 389  : 
; 390  : 			if(EBP7B4 != 0 )

  004a4	85 ff		 test	 edi, edi
  004a6	74 2e		 je	 SHORT $LN81@Run

; 391  : 			{
; 392  : 				if( EBP7B8 == 0)

  004a8	85 c9		 test	 ecx, ecx
  004aa	75 1c		 jne	 SHORT $LN76@Run

; 393  : 				{
; 394  : 					if((rand()%100) < 80)

  004ac	e8 00 00 00 00	 call	 _rand
  004b1	99		 cdq
  004b2	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  004b7	f7 f9		 idiv	 ecx
  004b9	83 fa 50	 cmp	 edx, 80			; 00000050H
  004bc	7d 05		 jge	 SHORT $LN78@Run

; 395  : 					{
; 396  : 						EBP7B4 |= 4; 

  004be	83 cf 04	 or	 edi, 4

; 397  : 					}
; 398  : 					else

  004c1	eb 13		 jmp	 SHORT $LN81@Run
$LN78@Run:

; 399  : 					{
; 400  : 						EBP7B4 |= 8; 

  004c3	83 cf 08	 or	 edi, 8

; 401  : 					}

  004c6	eb 0e		 jmp	 SHORT $LN81@Run
$LN76@Run:
  004c8	8b c7		 mov	 eax, edi

; 402  : 				}
; 403  : 				else if (EBP7B8 == 1) 
; 404  : 				{
; 405  : 					EBP7B4 |= 4; 
; 406  : 				}
; 407  : 				else
; 408  : 				{
; 409  : 					EBP7B4 |= 8; 

  004ca	83 cf 08	 or	 edi, 8
  004cd	83 c8 04	 or	 eax, 4
  004d0	83 f9 01	 cmp	 ecx, 1
  004d3	0f 44 f8	 cmove	 edi, eax
$LN81@Run:

; 410  : 				}
; 411  : 			}
; 412  : 
; 413  : 			int EBP7BC = this->GetTokenNumber();

  004d6	8b ce		 mov	 ecx, esi
  004d8	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber

; 414  : 
; 415  : 			if(EBP7BC > 0)

  004dd	0f b6 8d 7b fe
	ff ff		 movzx	 ecx, BYTE PTR _EBP7A8$1$[ebp]
  004e4	85 c0		 test	 eax, eax
  004e6	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  004eb	0f 4f c8	 cmovg	 ecx, eax
  004ee	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv1596[ebp], ecx
  004f4	88 8d 60 fe ff
	ff		 mov	 BYTE PTR _EBP7A8$1[ebp], cl

; 416  : 			{
; 417  : 				EBP7A8 |= 0x20;
; 418  : 			}
; 419  : 
; 420  : 			int EBP7C0 = this->GetTokenNumber();

  004fa	8b ce		 mov	 ecx, esi
  004fc	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber

; 421  : 
; 422  : 			if(EBP7C0 > 0)

  00501	85 c0		 test	 eax, eax
  00503	7e 15		 jle	 SHORT $LN83@Run

; 423  : 			{
; 424  : 				EBP7A8 |= 0x10;

  00505	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR tv1596[ebp]
  0050b	83 c8 10	 or	 eax, 16			; 00000010H
  0050e	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv1596[ebp], eax
  00514	88 85 60 fe ff
	ff		 mov	 BYTE PTR _EBP7A8$1[ebp], al
$LN83@Run:

; 425  : 			}
; 426  : 
; 427  : 			int EBP7C4 = this->GetTokenNumber();

  0051a	8b ce		 mov	 ecx, esi
  0051c	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber

; 428  : 
; 429  : 			if(EBP7C4 > 0)

  00521	85 c0		 test	 eax, eax
  00523	7e 15		 jle	 SHORT $LN84@Run

; 430  : 			{
; 431  : 				EBP7A8 |= 0x08;

  00525	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR tv1596[ebp]
  0052b	83 c8 08	 or	 eax, 8
  0052e	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv1596[ebp], eax
  00534	88 85 60 fe ff
	ff		 mov	 BYTE PTR _EBP7A8$1[ebp], al
$LN84@Run:

; 432  : 			}
; 433  : 
; 434  : 			int EBP7C8 = this->GetTokenNumber();

  0053a	8b ce		 mov	 ecx, esi
  0053c	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber

; 435  : 
; 436  : 			if(EBP7C8 > 0)

  00541	85 c0		 test	 eax, eax
  00543	7e 15		 jle	 SHORT $LN85@Run

; 437  : 			{
; 438  : 				EBP7A8 |= 0x04;

  00545	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR tv1596[ebp]
  0054b	83 c8 04	 or	 eax, 4
  0054e	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv1596[ebp], eax
  00554	88 85 60 fe ff
	ff		 mov	 BYTE PTR _EBP7A8$1[ebp], al
$LN85@Run:

; 439  : 			}
; 440  : 
; 441  : 			int EBP7CC = this->GetTokenNumber();

  0055a	8b ce		 mov	 ecx, esi
  0055c	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber

; 442  : 
; 443  : 			if(EBP7CC > 0)

  00561	85 c0		 test	 eax, eax
  00563	7e 15		 jle	 SHORT $LN86@Run

; 444  : 			{
; 445  : 				EBP7A8 |= 0x02;

  00565	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR tv1596[ebp]
  0056b	83 c8 02	 or	 eax, 2
  0056e	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv1596[ebp], eax
  00574	88 85 60 fe ff
	ff		 mov	 BYTE PTR _EBP7A8$1[ebp], al
$LN86@Run:

; 446  : 			}
; 447  : 
; 448  : 			int EBP7D0 = this->GetTokenNumber();

  0057a	8b ce		 mov	 ecx, esi
  0057c	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber

; 449  : 
; 450  : 			if(EBP7D0 > 0)

  00581	85 c0		 test	 eax, eax
  00583	7e 0e		 jle	 SHORT $LN87@Run

; 451  : 			{
; 452  : 				EBP7A8 |= 0x01;

  00585	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR tv1596[ebp]
  0058b	0c 01		 or	 al, 1
  0058d	88 85 60 fe ff
	ff		 mov	 BYTE PTR _EBP7A8$1[ebp], al
$LN87@Run:

; 453  : 			}
; 454  : 
; 455  : 			if( ItemType >= 0 && ItemType < 512 &&
; 456  : 				ItemIndex >= 0 && ItemIndex < 512)

  00593	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR _ItemType$1$[ebp]
  00599	3d 00 02 00 00	 cmp	 eax, 512		; 00000200H
  0059e	0f 8d d7 0b 00
	00		 jge	 $LN187@Run
  005a4	8b 8d 74 fe ff
	ff		 mov	 ecx, DWORD PTR _ItemIndex$1$[ebp]
  005aa	81 f9 00 02 00
	00		 cmp	 ecx, 512		; 00000200H
  005b0	0f 8d c5 0b 00
	00		 jge	 $LN187@Run

; 457  : 			{
; 458  : 				int iItemNumber = ItemGetNumberMake(ItemType, ItemIndex);

  005b6	51		 push	 ecx
  005b7	50		 push	 eax
  005b8	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  005bd	8b f0		 mov	 esi, eax
  005bf	83 c4 08	 add	 esp, 8

; 459  : 
; 460  : 				if( iItemNumber == ITEMGET(0,19) || 
; 461  : 					iItemNumber == ITEMGET(4,18) || 
; 462  : 					iItemNumber == ITEMGET(5,10) || 

  005c2	83 fe 13	 cmp	 esi, 19			; 00000013H
  005c5	74 18		 je	 SHORT $LN90@Run
  005c7	81 fe 12 08 00
	00		 cmp	 esi, 2066		; 00000812H
  005cd	74 10		 je	 SHORT $LN90@Run
  005cf	81 fe 0a 0a 00
	00		 cmp	 esi, 2570		; 00000a0aH
  005d5	74 08		 je	 SHORT $LN90@Run
  005d7	81 fe 0d 04 00
	00		 cmp	 esi, 1037		; 0000040dH
  005dd	75 07		 jne	 SHORT $LN89@Run
$LN90@Run:

; 463  : 					iItemNumber == ITEMGET(2,13))
; 464  : 				{
; 465  : 					EBP7A8 = 63;	

  005df	c6 85 60 fe ff
	ff 3f		 mov	 BYTE PTR _EBP7A8$1[ebp], 63 ; 0000003fH
$LN89@Run:

; 466  : 				}
; 467  : 
; 468  : 				for( int i =0;i < ItemCount; i++ )

  005e6	83 bd 64 fe ff
	ff 00		 cmp	 DWORD PTR _ItemCount$2$[ebp], 0
  005ed	0f 8e 88 0b 00
	00		 jle	 $LN187@Run
$LL6@Run:

; 469  : 				{
; 470  : 					ItemSerialCreateSend(lpUser->m_Index, lpUser->MapNumber, lpUser->X, lpUser->Y, iItemNumber, EBP798, iDur, EBP79C, EBP7A0, EBP7A4, -1, EBP7A8, EBP7B4); 

  005f3	6a 00		 push	 0
  005f5	6a 00		 push	 0
  005f7	0f b6 83 21 01
	00 00		 movzx	 eax, BYTE PTR [ebx+289]
  005fe	57		 push	 edi
  005ff	ff b5 60 fe ff
	ff		 push	 DWORD PTR _EBP7A8$1[ebp]
  00605	6a ff		 push	 -1
  00607	ff b5 54 fe ff
	ff		 push	 DWORD PTR _EBP7A4$1$[ebp]
  0060d	ff b5 44 fe ff
	ff		 push	 DWORD PTR _EBP7A0$1$[ebp]
  00613	ff b5 50 fe ff
	ff		 push	 DWORD PTR _EBP79C$1$[ebp]
  00619	ff b5 4c fe ff
	ff		 push	 DWORD PTR _iDur$1$[ebp]
  0061f	ff b5 6c fe ff
	ff		 push	 DWORD PTR _EBP798$1$[ebp]
  00625	56		 push	 esi
  00626	50		 push	 eax
  00627	0f b6 83 20 01
	00 00		 movzx	 eax, BYTE PTR [ebx+288]
  0062e	50		 push	 eax
  0062f	0f b6 83 23 01
	00 00		 movzx	 eax, BYTE PTR [ebx+291]
  00636	50		 push	 eax
  00637	ff 33		 push	 DWORD PTR [ebx]
  00639	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend
  0063e	83 c4 3c	 add	 esp, 60			; 0000003cH
  00641	83 ad 64 fe ff
	ff 01		 sub	 DWORD PTR _ItemCount$2$[ebp], 1
  00648	75 a9		 jne	 SHORT $LL6@Run

; 471  : 				}
; 472  : 			}
; 473  : 		}
; 474  : 		break;

  0064a	e9 2c 0b 00 00	 jmp	 $LN187@Run
$LN91@Run:

; 475  : 		// --
; 476  : 	case Command::MakeRandomSet:
; 477  : 		{
; 478  : 			int Count = this->GetTokenNumber();

  0064f	8b ce		 mov	 ecx, esi
  00651	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber
  00656	8b f0		 mov	 esi, eax

; 479  : 			// ----
; 480  : 			if( Count == -1 )

  00658	83 fe ff	 cmp	 esi, -1
  0065b	0f 84 44 06 00
	00		 je	 $LN38@Run

; 481  : 			{
; 482  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 483  : 				return;
; 484  : 			}
; 485  : 			// ----
; 486  : 			for( int i = 0; i < Count; i++ )

  00661	85 f6		 test	 esi, esi
  00663	0f 8e 12 0b 00
	00		 jle	 $LN187@Run
  00669	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@Run:

; 487  : 			{
; 488  : 				MakeRandomSetItem(lpUser->m_Index);

  00670	ff 33		 push	 DWORD PTR [ebx]
  00672	e8 00 00 00 00	 call	 ?MakeRandomSetItem@@YAXH@Z ; MakeRandomSetItem
  00677	83 c4 04	 add	 esp, 4
  0067a	83 ee 01	 sub	 esi, 1
  0067d	75 f1		 jne	 SHORT $LL9@Run

; 489  : 			}
; 490  : 		}
; 491  : 		break;

  0067f	e9 f7 0a 00 00	 jmp	 $LN187@Run
$LN93@Run:

; 492  : 		// ---
; 493  : 	case Command::HideOn:
; 494  : 		{
; 495  : 			gObjAddBuffEffect(lpUser, BUFF_INVISIBILITY, 0, 0, 0, 0, -10);

  00684	6a f6		 push	 -10			; fffffff6H
  00686	6a 00		 push	 0
  00688	6a 00		 push	 0
  0068a	6a 00		 push	 0
  0068c	6a 00		 push	 0
  0068e	6a 12		 push	 18			; 00000012H
  00690	53		 push	 ebx
  00691	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 496  : 			gObjViewportListProtocolDestroy(lpUser);

  00696	53		 push	 ebx
  00697	e8 00 00 00 00	 call	 ?gObjViewportListProtocolDestroy@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportListProtocolDestroy
  0069c	83 c4 20	 add	 esp, 32			; 00000020H

; 497  : 		}
; 498  : 		break;

  0069f	e9 d7 0a 00 00	 jmp	 $LN187@Run
$LN94@Run:

; 499  : 		// ---
; 500  : 	case Command::HideOff:
; 501  : 		{
; 502  : 			gObjRemoveBuffEffect(lpUser, BUFF_INVISIBILITY);

  006a4	6a 12		 push	 18			; 00000012H
  006a6	53		 push	 ebx
  006a7	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect

; 503  : 			gObjViewportListProtocolCreate(lpUser);

  006ac	53		 push	 ebx
  006ad	e8 00 00 00 00	 call	 ?gObjViewportListProtocolCreate@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportListProtocolCreate

; 504  : 		}
; 505  : 		break;

  006b2	e9 c1 0a 00 00	 jmp	 $LN241@Run
$LN95@Run:

; 506  : 		// --
; 507  : 	case Command::ClearDrop:
; 508  : 		{
; 509  : 			int Distance = this->GetTokenNumber();

  006b7	8b ce		 mov	 ecx, esi
  006b9	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber

; 510  : 			// ----
; 511  : 			if( Distance == -1 )

  006be	83 f8 ff	 cmp	 eax, -1
  006c1	0f 84 de 05 00
	00		 je	 $LN38@Run

; 512  : 			{
; 513  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 514  : 				return;
; 515  : 			}
; 516  : 			// ----
; 517  : 			MapC[lpUser->MapNumber].ClearItem(lpUser, Distance);

  006c7	50		 push	 eax
  006c8	0f b6 83 23 01
	00 00		 movzx	 eax, BYTE PTR [ebx+291]
  006cf	69 c8 28 38 05
	00		 imul	 ecx, eax, 342056
  006d5	53		 push	 ebx
  006d6	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  006dc	e8 00 00 00 00	 call	 ?ClearItem@MapClass@@QAEHPAUOBJECTSTRUCT@@H@Z ; MapClass::ClearItem

; 518  : 		}
; 519  : 		break;

  006e1	e9 95 0a 00 00	 jmp	 $LN187@Run
$LN97@Run:

; 520  : 		// --
; 521  : 	case Command::ClearInventory:
; 522  : 		{
; 523  : 			LPSTR UserName = this->GetTokenString();

  006e6	8b ce		 mov	 ecx, esi
  006e8	e8 00 00 00 00	 call	 ?GetTokenString@CommandManager@@QAEPADXZ ; CommandManager::GetTokenString

; 524  : 			// ----
; 525  : 			if( UserName == 0 )

  006ed	85 c0		 test	 eax, eax
  006ef	0f 84 b0 05 00
	00		 je	 $LN38@Run

; 526  : 			{
; 527  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 528  : 				return;
; 529  : 			}
; 530  : 			// ----
; 531  : 			LPOBJ lpTarget = this->GetUserInfo(lpUser, UserName);

  006f5	50		 push	 eax
  006f6	53		 push	 ebx
  006f7	8b ce		 mov	 ecx, esi
  006f9	e8 00 00 00 00	 call	 ?GetUserInfo@CommandManager@@QAEPAUOBJECTSTRUCT@@PAU2@PAD@Z ; CommandManager::GetUserInfo
  006fe	89 85 6c fe ff
	ff		 mov	 DWORD PTR _lpTarget$1$[ebp], eax

; 532  : 			// ----
; 533  : 			if( !lpTarget )

  00704	85 c0		 test	 eax, eax
  00706	0f 84 a0 0a 00
	00		 je	 $LN190@Run

; 534  : 			{
; 535  : 				return;
; 536  : 			}
; 537  : 			// ----
; 538  : 			for( int i = INVETORY_WEAR_SIZE; i < MAIN_INVENTORY_SIZE; i++ )

  0070c	bf 0c 00 00 00	 mov	 edi, 12			; 0000000cH
  00711	be f0 09 00 00	 mov	 esi, 2544		; 000009f0H
  00716	8b d8		 mov	 ebx, eax
  00718	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL12@Run:

; 539  : 			{
; 540  : 				if( lpTarget->pInventory[i].IsItem() )

  00720	8b 8b c0 11 00
	00		 mov	 ecx, DWORD PTR [ebx+4544]
  00726	03 ce		 add	 ecx, esi
  00728	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0072d	85 c0		 test	 eax, eax
  0072f	74 0b		 je	 SHORT $LN10@Run

; 541  : 				{
; 542  : 					gObjInventoryDeleteItem(lpTarget->m_Index, i);

  00731	57		 push	 edi
  00732	ff 33		 push	 DWORD PTR [ebx]
  00734	e8 00 00 00 00	 call	 ?gObjInventoryDeleteItem@@YAEHH@Z ; gObjInventoryDeleteItem
  00739	83 c4 08	 add	 esp, 8
$LN10@Run:

; 534  : 			{
; 535  : 				return;
; 536  : 			}
; 537  : 			// ----
; 538  : 			for( int i = INVETORY_WEAR_SIZE; i < MAIN_INVENTORY_SIZE; i++ )

  0073c	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  00742	47		 inc	 edi
  00743	81 fe f0 a8 00
	00		 cmp	 esi, 43248		; 0000a8f0H
  00749	7c d5		 jl	 SHORT $LL12@Run

; 543  : 				}
; 544  : 			}
; 545  : 			// ----
; 546  : 			GCItemListSend(lpTarget->m_Index);

  0074b	ff 33		 push	 DWORD PTR [ebx]
  0074d	e8 00 00 00 00	 call	 ?GCItemListSend@@YAXH@Z	; GCItemListSend

; 547  : 		}
; 548  : 		break;

  00752	8b 9d 64 fe ff
	ff		 mov	 ebx, DWORD PTR _lpUser$GSCopy$1$[ebp]
  00758	83 c4 04	 add	 esp, 4
  0075b	e9 1b 0a 00 00	 jmp	 $LN187@Run
$LN101@Run:

; 549  : 		// --
; 550  : 	case Command::Skin:
; 551  : 		{
; 552  : 			LPSTR UserName = this->GetTokenString();

  00760	8b ce		 mov	 ecx, esi
  00762	e8 00 00 00 00	 call	 ?GetTokenString@CommandManager@@QAEPADXZ ; CommandManager::GetTokenString

; 553  : 			int SkinNumber = this->GetTokenNumber();

  00767	8b ce		 mov	 ecx, esi
  00769	8b f8		 mov	 edi, eax
  0076b	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber
  00770	89 85 6c fe ff
	ff		 mov	 DWORD PTR _SkinNumber$1$[ebp], eax

; 554  : 			// ----
; 555  : 			if( UserName == 0 )

  00776	85 ff		 test	 edi, edi
  00778	0f 84 27 05 00
	00		 je	 $LN38@Run

; 556  : 			{
; 557  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 558  : 				return;
; 559  : 			}
; 560  : 			// ----
; 561  : 			LPOBJ lpTarget = this->GetUserInfo(lpUser, UserName);

  0077e	57		 push	 edi
  0077f	53		 push	 ebx
  00780	8b ce		 mov	 ecx, esi
  00782	e8 00 00 00 00	 call	 ?GetUserInfo@CommandManager@@QAEPAUOBJECTSTRUCT@@PAU2@PAD@Z ; CommandManager::GetUserInfo

; 562  : 			// ----
; 563  : 			if( !lpTarget )

  00787	85 c0		 test	 eax, eax
  00789	0f 84 1d 0a 00
	00		 je	 $LN190@Run

; 564  : 			{
; 565  : 				return;
; 566  : 			}
; 567  : 			// ----
; 568  : 			lpTarget->m_Change = SkinNumber;

  0078f	8b 8d 6c fe ff
	ff		 mov	 ecx, DWORD PTR _SkinNumber$1$[ebp]

; 569  : 			gObjViewportListProtocolCreate(lpTarget);

  00795	50		 push	 eax
  00796	89 88 34 06 00
	00		 mov	 DWORD PTR [eax+1588], ecx
  0079c	e8 00 00 00 00	 call	 ?gObjViewportListProtocolCreate@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportListProtocolCreate
  007a1	83 c4 04	 add	 esp, 4

; 570  : 		}
; 571  : 		break;

  007a4	e9 d2 09 00 00	 jmp	 $LN187@Run
$LN104@Run:

; 572  : 		// --
; 573  : 	case Command::PartyInfo:
; 574  : 		{
; 575  : 			LPSTR UserName = this->GetTokenString();

  007a9	8b ce		 mov	 ecx, esi
  007ab	e8 00 00 00 00	 call	 ?GetTokenString@CommandManager@@QAEPADXZ ; CommandManager::GetTokenString
  007b0	6a 50		 push	 80			; 00000050H
  007b2	8b f8		 mov	 edi, eax
  007b4	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _Text$4[ebp]
  007ba	6a 00		 push	 0
  007bc	50		 push	 eax
  007bd	e8 00 00 00 00	 call	 _memset
  007c2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 576  : 			char Text[80] = { 0 };
; 577  : 			// ----
; 578  : 			if( UserName == 0 )

  007c5	85 ff		 test	 edi, edi
  007c7	0f 84 d8 04 00
	00		 je	 $LN38@Run

; 579  : 			{
; 580  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 581  : 				return;
; 582  : 			}
; 583  : 			// ----
; 584  : 			LPOBJ lpTarget = this->GetUserInfo(lpUser, UserName);

  007cd	57		 push	 edi
  007ce	53		 push	 ebx
  007cf	8b ce		 mov	 ecx, esi
  007d1	e8 00 00 00 00	 call	 ?GetUserInfo@CommandManager@@QAEPAUOBJECTSTRUCT@@PAU2@PAD@Z ; CommandManager::GetUserInfo

; 585  : 			// ----
; 586  : 			if( !lpTarget )

  007d6	85 c0		 test	 eax, eax
  007d8	0f 84 ce 09 00
	00		 je	 $LN190@Run

; 587  : 			{
; 588  : 				return;
; 589  : 			}
; 590  : 			// ----
; 591  : 			if( lpTarget->PartyNumber < 0 )

  007de	8b 88 0c 06 00
	00		 mov	 ecx, DWORD PTR [eax+1548]
  007e4	85 c9		 test	 ecx, ecx
  007e6	79 11		 jns	 SHORT $LN107@Run

; 592  : 			{
; 593  : 				MsgOutput(lpUser->m_Index, "Party not found");

  007e8	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BPEOHPDB@Party?5not?5found?$AA@
  007ed	ff 33		 push	 DWORD PTR [ebx]
  007ef	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 594  : 				return;

  007f4	e9 b0 09 00 00	 jmp	 $LN240@Run
$LN107@Run:

; 595  : 			}
; 596  : 			// ----
; 597  : 			PARTY_STRUCT* lpParty = &gParty.m_PartyS[lpTarget->PartyNumber];

  007f9	8b c1		 mov	 eax, ecx
  007fb	c1 e0 04	 shl	 eax, 4
  007fe	2b c1		 sub	 eax, ecx
  00800	8d 34 85 08 00
	00 00		 lea	 esi, DWORD PTR ?gParty@@3VPartyClass@@A[eax*4+8]
  00807	89 b5 6c fe ff
	ff		 mov	 DWORD PTR _lpParty$1$[ebp], esi

; 598  : 			// ----
; 599  : 			if( !lpParty )

  0080d	85 f6		 test	 esi, esi
  0080f	75 11		 jne	 SHORT $LN108@Run

; 600  : 			{
; 601  : 				MsgOutput(lpUser->m_Index, "Party data not found");

  00811	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@HAAJEEKJ@Party?5data?5not?5found?$AA@
  00816	ff 33		 push	 DWORD PTR [ebx]
  00818	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 602  : 				return;

  0081d	e9 87 09 00 00	 jmp	 $LN240@Run
$LN108@Run:

; 603  : 			}
; 604  : 			// ----
; 605  : 			MsgOutput(lpUser->m_Index, "Party:");

  00822	68 00 00 00 00	 push	 OFFSET ??_C@_06JLCIBMAL@Party?3?$AA@
  00827	ff 33		 push	 DWORD PTR [ebx]
  00829	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0082e	83 c4 08	 add	 esp, 8

; 606  : 			// ----
; 607  : 			int PartyCount = 0;

  00831	33 c9		 xor	 ecx, ecx

; 608  : 			int PartyNumber = -1;
; 609  : 			// ----
; 610  : 			for( int i = 0; i < 5; i++ )

  00833	33 db		 xor	 ebx, ebx
  00835	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL15@Run:

; 611  : 			{
; 612  : 				PartyNumber = lpParty->Number[i];

  00840	8b 44 9e 04	 mov	 eax, DWORD PTR [esi+ebx*4+4]

; 613  : 				// ----
; 614  : 				if( PartyNumber < 0 )

  00844	85 c0		 test	 eax, eax
  00846	0f 88 b5 00 00
	00		 js	 $LN13@Run

; 615  : 				{
; 616  : 					continue;
; 617  : 				}
; 618  : 				// ----
; 619  : 				LPOBJ lpPartyObj = &gObj[PartyNumber];

  0084c	69 d0 40 27 00
	00		 imul	 edx, eax, 10048
  00852	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 620  : 				// ----
; 621  : 				if( lpPartyObj != NULL )

  00858	0f 84 a3 00 00
	00		 je	 $LN13@Run

; 622  : 				{
; 623  : 					if( lpPartyObj->Connected >= PLAYER_PLAYING )

  0085e	83 7a 04 03	 cmp	 DWORD PTR [edx+4], 3
  00862	0f 8c 99 00 00
	00		 jl	 $LN13@Run

; 624  : 					{
; 625  : 						PartyCount++;

  00868	41		 inc	 ecx

; 626  : 						strcat(Text, lpPartyObj->Name);

  00869	83 c2 5d	 add	 edx, 93			; 0000005dH
  0086c	89 8d 74 fe ff
	ff		 mov	 DWORD PTR _PartyCount$1$[ebp], ecx
  00872	8b f2		 mov	 esi, edx
$LL223@Run:
  00874	8a 02		 mov	 al, BYTE PTR [edx]
  00876	42		 inc	 edx
  00877	84 c0		 test	 al, al
  00879	75 f9		 jne	 SHORT $LL223@Run
  0087b	8d bd 94 fe ff
	ff		 lea	 edi, DWORD PTR _Text$4[ebp]
  00881	2b d6		 sub	 edx, esi
  00883	4f		 dec	 edi
$LL224@Run:
  00884	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00887	47		 inc	 edi
  00888	84 c0		 test	 al, al
  0088a	75 f8		 jne	 SHORT $LL224@Run
  0088c	8b ca		 mov	 ecx, edx
  0088e	c1 e9 02	 shr	 ecx, 2
  00891	f3 a5		 rep movsd
  00893	8b ca		 mov	 ecx, edx
  00895	83 e1 03	 and	 ecx, 3
  00898	f3 a4		 rep movsb

; 627  : 						// ----
; 628  : 						if( i == 0 )

  0089a	85 db		 test	 ebx, ebx
  0089c	75 28		 jne	 SHORT $LN112@Run

; 629  : 						{
; 630  : 							strcat(Text, "(Leader)");

  0089e	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _Text$4[ebp]
  008a4	49		 dec	 ecx
$LL225@Run:
  008a5	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  008a8	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  008ab	84 c0		 test	 al, al
  008ad	75 f6		 jne	 SHORT $LL225@Run
  008af	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_08DHLCFGJM@?$CILeader?$CJ?$AA@
  008b4	89 01		 mov	 DWORD PTR [ecx], eax
  008b6	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_08DHLCFGJM@?$CILeader?$CJ?$AA@+4
  008bb	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  008be	a0 08 00 00 00	 mov	 al, BYTE PTR ??_C@_08DHLCFGJM@?$CILeader?$CJ?$AA@+8
  008c3	88 41 08	 mov	 BYTE PTR [ecx+8], al
$LN112@Run:

; 631  : 						}
; 632  : 						// ----
; 633  : 						if( lpParty->Count > PartyCount)

  008c6	8b b5 6c fe ff
	ff		 mov	 esi, DWORD PTR _lpParty$1$[ebp]
  008cc	8b 8d 74 fe ff
	ff		 mov	 ecx, DWORD PTR _PartyCount$1$[ebp]
  008d2	39 0e		 cmp	 DWORD PTR [esi], ecx
  008d4	7e 2b		 jle	 SHORT $LN13@Run

; 634  : 						{
; 635  : 							strcat(Text, ", ");

  008d6	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR _Text$4[ebp]
  008dc	49		 dec	 ecx
  008dd	0f 1f 00	 npad	 3
$LL226@Run:
  008e0	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  008e3	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  008e6	84 c0		 test	 al, al
  008e8	75 f6		 jne	 SHORT $LL226@Run
  008ea	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02KEGNLNML@?0?5?$AA@
  008f0	66 89 01	 mov	 WORD PTR [ecx], ax
  008f3	a0 02 00 00 00	 mov	 al, BYTE PTR ??_C@_02KEGNLNML@?0?5?$AA@+2
  008f8	88 41 02	 mov	 BYTE PTR [ecx+2], al
  008fb	8b 8d 74 fe ff
	ff		 mov	 ecx, DWORD PTR _PartyCount$1$[ebp]
$LN13@Run:

; 608  : 			int PartyNumber = -1;
; 609  : 			// ----
; 610  : 			for( int i = 0; i < 5; i++ )

  00901	43		 inc	 ebx
  00902	83 fb 05	 cmp	 ebx, 5
  00905	0f 8c 35 ff ff
	ff		 jl	 $LL15@Run

; 636  : 						}
; 637  : 					}
; 638  : 				}
; 639  : 			}
; 640  : 			// ----
; 641  : 			MsgOutput(lpUser->m_Index, Text);

  0090b	8b 9d 64 fe ff
	ff		 mov	 ebx, DWORD PTR _lpUser$GSCopy$1$[ebp]
  00911	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _Text$4[ebp]
  00917	50		 push	 eax
  00918	ff 33		 push	 DWORD PTR [ebx]
  0091a	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0091f	83 c4 08	 add	 esp, 8
  00922	e9 54 08 00 00	 jmp	 $LN187@Run
$LN114@Run:

; 642  : 		}
; 643  : 		break;
; 644  : 		// --
; 645  : 	case Command::FireCrack:
; 646  : 		{
; 647  : 			for( int i = 0; i < 3; i++ )

  00927	be 03 00 00 00	 mov	 esi, 3
  0092c	8d 7e 02	 lea	 edi, DWORD PTR [esi+2]
  0092f	90		 npad	 1
$LL18@Run:

; 648  : 			{
; 649  : 				PMSG_SERVERCMD ServerCmd = { 0 };

  00930	33 c0		 xor	 eax, eax
  00932	c6 85 6c fe ff
	ff 00		 mov	 BYTE PTR _ServerCmd$2[ebp], 0

; 650  : 				PHeadSubSetB((LPBYTE)&ServerCmd, 0xF3, 0x40, sizeof(ServerCmd));

  00939	6a 07		 push	 7
  0093b	6a 40		 push	 64			; 00000040H
  0093d	89 85 6d fe ff
	ff		 mov	 DWORD PTR _ServerCmd$2[ebp+1], eax
  00943	66 89 85 71 fe
	ff ff		 mov	 WORD PTR _ServerCmd$2[ebp+5], ax
  0094a	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _ServerCmd$2[ebp]
  00950	68 f3 00 00 00	 push	 243			; 000000f3H
  00955	50		 push	 eax
  00956	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 651  : 				ServerCmd.CmdType = 0;

  0095b	c6 85 70 fe ff
	ff 00		 mov	 BYTE PTR _ServerCmd$2[ebp+4], 0

; 652  : 				ServerCmd.X = lpUser->X + (rand() % 5) * 2 - 4;

  00962	e8 00 00 00 00	 call	 _rand
  00967	99		 cdq
  00968	f7 ff		 idiv	 edi
  0096a	02 d2		 add	 dl, dl
  0096c	80 ea 04	 sub	 dl, 4
  0096f	02 93 20 01 00
	00		 add	 dl, BYTE PTR [ebx+288]
  00975	88 95 71 fe ff
	ff		 mov	 BYTE PTR _ServerCmd$2[ebp+5], dl

; 653  : 				ServerCmd.Y = lpUser->Y + (rand() % 5) * 2 - 4;

  0097b	e8 00 00 00 00	 call	 _rand
  00980	99		 cdq
  00981	f7 ff		 idiv	 edi

; 654  : 				MsgSendV2(lpUser, (LPBYTE)&ServerCmd, sizeof(ServerCmd));

  00983	6a 07		 push	 7
  00985	02 d2		 add	 dl, dl
  00987	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _ServerCmd$2[ebp]
  0098d	80 ea 04	 sub	 dl, 4
  00990	02 93 21 01 00
	00		 add	 dl, BYTE PTR [ebx+289]
  00996	50		 push	 eax
  00997	53		 push	 ebx
  00998	88 95 72 fe ff
	ff		 mov	 BYTE PTR _ServerCmd$2[ebp+6], dl
  0099e	e8 00 00 00 00	 call	 ?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z ; MsgSendV2

; 655  : 				DataSend(lpUser->m_Index, (LPBYTE)&ServerCmd, sizeof(ServerCmd));

  009a3	6a 07		 push	 7
  009a5	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _ServerCmd$2[ebp]
  009ab	50		 push	 eax
  009ac	ff 33		 push	 DWORD PTR [ebx]
  009ae	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  009b3	83 c4 28	 add	 esp, 40			; 00000028H
  009b6	83 ee 01	 sub	 esi, 1
  009b9	0f 85 71 ff ff
	ff		 jne	 $LL18@Run

; 656  : 			}
; 657  : 		}
; 658  : 		break;

  009bf	e9 b7 07 00 00	 jmp	 $LN187@Run
$LN115@Run:

; 659  : 		// --
; 660  : 	case Command::Trans:
; 661  : 		{
; 662  : 			LPSTR UserName = this->GetTokenString();

  009c4	8b ce		 mov	 ecx, esi
  009c6	e8 00 00 00 00	 call	 ?GetTokenString@CommandManager@@QAEPADXZ ; CommandManager::GetTokenString

; 663  : 			int MapNumber = this->GetTokenNumber();

  009cb	8b ce		 mov	 ecx, esi
  009cd	8b f8		 mov	 edi, eax
  009cf	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber

; 664  : 			int X = this->GetTokenNumber();

  009d4	8b ce		 mov	 ecx, esi
  009d6	89 85 50 fe ff
	ff		 mov	 DWORD PTR _MapNumber$1$[ebp], eax
  009dc	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber

; 665  : 			int Y = this->GetTokenNumber();

  009e1	8b ce		 mov	 ecx, esi
  009e3	89 85 4c fe ff
	ff		 mov	 DWORD PTR _X$1$[ebp], eax
  009e9	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber
  009ee	89 85 6c fe ff
	ff		 mov	 DWORD PTR _Y$1$[ebp], eax

; 666  : 			// ---
; 667  : 			if( UserName == 0 )

  009f4	85 ff		 test	 edi, edi
  009f6	0f 84 a9 02 00
	00		 je	 $LN38@Run

; 668  : 			{
; 669  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 670  : 				return;
; 671  : 			}
; 672  : 			// ----
; 673  : 			LPOBJ lpTarget = this->GetUserInfo(lpUser, UserName);

  009fc	57		 push	 edi
  009fd	53		 push	 ebx
  009fe	8b ce		 mov	 ecx, esi
  00a00	e8 00 00 00 00	 call	 ?GetUserInfo@CommandManager@@QAEPAUOBJECTSTRUCT@@PAU2@PAD@Z ; CommandManager::GetUserInfo

; 674  : 			// ----
; 675  : 			if( !lpTarget )

  00a05	85 c0		 test	 eax, eax
  00a07	0f 84 9f 07 00
	00		 je	 $LN190@Run

; 676  : 			{
; 677  : 				return;
; 678  : 			}
; 679  : 			// ----
; 680  : 			gObjTeleport(lpTarget->m_Index, MapNumber, X, Y);

  00a0d	ff b5 6c fe ff
	ff		 push	 DWORD PTR _Y$1$[ebp]
  00a13	ff b5 4c fe ff
	ff		 push	 DWORD PTR _X$1$[ebp]
  00a19	ff b5 50 fe ff
	ff		 push	 DWORD PTR _MapNumber$1$[ebp]
  00a1f	ff 30		 push	 DWORD PTR [eax]
  00a21	e8 00 00 00 00	 call	 ?gObjTeleport@@YAXHHHH@Z ; gObjTeleport
  00a26	83 c4 10	 add	 esp, 16			; 00000010H

; 681  : 		}
; 682  : 		break;

  00a29	e9 4d 07 00 00	 jmp	 $LN187@Run
$LN118@Run:

; 683  : 		// --
; 684  : 	case Command::Track:
; 685  : 		{
; 686  : 			LPSTR UserName = this->GetTokenString();

  00a2e	8b ce		 mov	 ecx, esi
  00a30	e8 00 00 00 00	 call	 ?GetTokenString@CommandManager@@QAEPADXZ ; CommandManager::GetTokenString

; 687  : 			// ---
; 688  : 			if( UserName == 0 )

  00a35	85 c0		 test	 eax, eax
  00a37	0f 84 68 02 00
	00		 je	 $LN38@Run

; 689  : 			{
; 690  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 691  : 				return;
; 692  : 			}
; 693  : 			// ----
; 694  : 			LPOBJ lpTarget = this->GetUserInfo(lpUser, UserName);

  00a3d	50		 push	 eax
  00a3e	53		 push	 ebx
  00a3f	8b ce		 mov	 ecx, esi
  00a41	e8 00 00 00 00	 call	 ?GetUserInfo@CommandManager@@QAEPAUOBJECTSTRUCT@@PAU2@PAD@Z ; CommandManager::GetUserInfo

; 695  : 			// ----
; 696  : 			if( !lpTarget )

  00a46	85 c0		 test	 eax, eax
  00a48	0f 84 5e 07 00
	00		 je	 $LN190@Run

; 697  : 			{
; 698  : 				return;
; 699  : 			}
; 700  : 			// ----
; 701  : 			gObjTeleport(lpTarget->m_Index, lpUser->MapNumber, lpUser->X, lpUser->Y);

  00a4e	0f b6 8b 21 01
	00 00		 movzx	 ecx, BYTE PTR [ebx+289]
  00a55	51		 push	 ecx
  00a56	0f b6 8b 20 01
	00 00		 movzx	 ecx, BYTE PTR [ebx+288]
  00a5d	51		 push	 ecx
  00a5e	0f b6 8b 23 01
	00 00		 movzx	 ecx, BYTE PTR [ebx+291]
  00a65	51		 push	 ecx
  00a66	ff 30		 push	 DWORD PTR [eax]
  00a68	e8 00 00 00 00	 call	 ?gObjTeleport@@YAXHHHH@Z ; gObjTeleport
  00a6d	83 c4 10	 add	 esp, 16			; 00000010H

; 702  : 		}
; 703  : 		break;

  00a70	e9 06 07 00 00	 jmp	 $LN187@Run
$LN121@Run:

; 704  : 		// --
; 705  : 	case Command::Trace:
; 706  : 		{
; 707  : 			LPSTR UserName = this->GetTokenString();

  00a75	8b ce		 mov	 ecx, esi
  00a77	e8 00 00 00 00	 call	 ?GetTokenString@CommandManager@@QAEPADXZ ; CommandManager::GetTokenString

; 708  : 			// ---
; 709  : 			if( UserName == 0 )

  00a7c	85 c0		 test	 eax, eax
  00a7e	0f 84 21 02 00
	00		 je	 $LN38@Run

; 710  : 			{
; 711  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 712  : 				return;
; 713  : 			}
; 714  : 			// ----
; 715  : 			LPOBJ lpTarget = this->GetUserInfo(lpUser, UserName);

  00a84	50		 push	 eax
  00a85	53		 push	 ebx
  00a86	8b ce		 mov	 ecx, esi
  00a88	e8 00 00 00 00	 call	 ?GetUserInfo@CommandManager@@QAEPAUOBJECTSTRUCT@@PAU2@PAD@Z ; CommandManager::GetUserInfo

; 716  : 			// ----
; 717  : 			if( !lpTarget )

  00a8d	85 c0		 test	 eax, eax
  00a8f	0f 84 17 07 00
	00		 je	 $LN190@Run

; 718  : 			{
; 719  : 				return;
; 720  : 			}
; 721  : 			// ----
; 722  : 			gObjTeleport(lpUser->m_Index, lpTarget->MapNumber, lpTarget->X, lpTarget->Y);

  00a95	0f b6 88 21 01
	00 00		 movzx	 ecx, BYTE PTR [eax+289]
  00a9c	51		 push	 ecx
  00a9d	0f b6 88 20 01
	00 00		 movzx	 ecx, BYTE PTR [eax+288]
  00aa4	0f b6 80 23 01
	00 00		 movzx	 eax, BYTE PTR [eax+291]
  00aab	51		 push	 ecx
  00aac	50		 push	 eax
  00aad	ff 33		 push	 DWORD PTR [ebx]
  00aaf	e8 00 00 00 00	 call	 ?gObjTeleport@@YAXHHHH@Z ; gObjTeleport
  00ab4	83 c4 10	 add	 esp, 16			; 00000010H

; 723  : 		}
; 724  : 		break;

  00ab7	e9 bf 06 00 00	 jmp	 $LN187@Run
$LN124@Run:

; 725  : 		// --
; 726  : 	case Command::CastleSiege1:
; 727  : 		{
; 728  : 			LPSTR GuildName = this->GetTokenString();

  00abc	8b ce		 mov	 ecx, esi
  00abe	e8 00 00 00 00	 call	 ?GetTokenString@CommandManager@@QAEPADXZ ; CommandManager::GetTokenString

; 729  : 			// ---
; 730  : 			if( GuildName == 0 )

  00ac3	85 c0		 test	 eax, eax
  00ac5	0f 84 da 01 00
	00		 je	 $LN38@Run

; 731  : 			{
; 732  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 733  : 				return;
; 734  : 			}
; 735  : 			// ----
; 736  : 			g_CastleSiege.OperateGmCommand(lpUser->m_Index, 0, GuildName);

  00acb	50		 push	 eax
  00acc	6a 00		 push	 0
  00ace	ff 33		 push	 DWORD PTR [ebx]
  00ad0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00ad5	e8 00 00 00 00	 call	 ?OperateGmCommand@CCastleSiege@@QAEXHHPAX@Z ; CCastleSiege::OperateGmCommand

; 737  : 		}
; 738  : 		break;

  00ada	e9 9c 06 00 00	 jmp	 $LN187@Run
$LN126@Run:

; 739  : 		// --
; 740  : 	case Command::CastleSiege2:
; 741  : 		{
; 742  : 			g_CastleSiege.OperateGmCommand(lpUser->m_Index, 1, 0);

  00adf	6a 00		 push	 0
  00ae1	6a 01		 push	 1
  00ae3	ff 33		 push	 DWORD PTR [ebx]
  00ae5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00aea	e8 00 00 00 00	 call	 ?OperateGmCommand@CCastleSiege@@QAEXHHPAX@Z ; CCastleSiege::OperateGmCommand

; 743  : 		}
; 744  : 		break;

  00aef	e9 87 06 00 00	 jmp	 $LN187@Run
$LN127@Run:

; 745  : 		// --
; 746  : 	case Command::CastleSiege3:
; 747  : 		{
; 748  : 			g_CastleSiege.OperateGmCommand(lpUser->m_Index, 2, 0);

  00af4	6a 00		 push	 0
  00af6	6a 02		 push	 2
  00af8	ff 33		 push	 DWORD PTR [ebx]
  00afa	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00aff	e8 00 00 00 00	 call	 ?OperateGmCommand@CCastleSiege@@QAEXHHPAX@Z ; CCastleSiege::OperateGmCommand

; 749  : 		}
; 750  : 		break;

  00b04	e9 72 06 00 00	 jmp	 $LN187@Run
$LN128@Run:

; 751  : 		// --
; 752  : 	case Command::CastleSiege4:
; 753  : 		{
; 754  : 			g_CastleSiege.OperateGmCommand(lpUser->m_Index, 3, 0);

  00b09	6a 00		 push	 0
  00b0b	6a 03		 push	 3
  00b0d	ff 33		 push	 DWORD PTR [ebx]
  00b0f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00b14	e8 00 00 00 00	 call	 ?OperateGmCommand@CCastleSiege@@QAEXHHPAX@Z ; CCastleSiege::OperateGmCommand

; 755  : 		}
; 756  : 		break;

  00b19	e9 5d 06 00 00	 jmp	 $LN187@Run
$LN129@Run:

; 757  : 		// --
; 758  : 	case Command::CastleSiege5:
; 759  : 		{
; 760  : 			g_CastleSiege.OperateGmCommand(lpUser->m_Index, 4, 0);

  00b1e	6a 00		 push	 0
  00b20	6a 04		 push	 4
  00b22	ff 33		 push	 DWORD PTR [ebx]
  00b24	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00b29	e8 00 00 00 00	 call	 ?OperateGmCommand@CCastleSiege@@QAEXHHPAX@Z ; CCastleSiege::OperateGmCommand

; 761  : 		}
; 762  : 		break;

  00b2e	e9 48 06 00 00	 jmp	 $LN187@Run
$LN130@Run:

; 763  : 		// --
; 764  : 	case Command::CastleSiege6:
; 765  : 		{
; 766  : 			g_CastleSiege.OperateGmCommand(lpUser->m_Index, 5, 0);

  00b33	6a 00		 push	 0
  00b35	6a 05		 push	 5
  00b37	ff 33		 push	 DWORD PTR [ebx]
  00b39	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00b3e	e8 00 00 00 00	 call	 ?OperateGmCommand@CCastleSiege@@QAEXHHPAX@Z ; CCastleSiege::OperateGmCommand

; 767  : 		}
; 768  : 		break;

  00b43	e9 33 06 00 00	 jmp	 $LN187@Run
$LN131@Run:

; 769  : 		// --
; 770  : 	case Command::CastleSiege7:
; 771  : 		{
; 772  : 			g_CastleSiege.OperateGmCommand(lpUser->m_Index, 6, 0);

  00b48	6a 00		 push	 0
  00b4a	6a 06		 push	 6
  00b4c	ff 33		 push	 DWORD PTR [ebx]
  00b4e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00b53	e8 00 00 00 00	 call	 ?OperateGmCommand@CCastleSiege@@QAEXHHPAX@Z ; CCastleSiege::OperateGmCommand

; 773  : 		}
; 774  : 		break;

  00b58	e9 1e 06 00 00	 jmp	 $LN187@Run
$LN132@Run:

; 775  : 		// --
; 776  : 	case Command::CastleSiege8:
; 777  : 		{
; 778  : 			LPSTR GuildName = this->GetTokenString();

  00b5d	8b ce		 mov	 ecx, esi
  00b5f	e8 00 00 00 00	 call	 ?GetTokenString@CommandManager@@QAEPADXZ ; CommandManager::GetTokenString

; 779  : 			// ---
; 780  : 			if( GuildName == 0 )

  00b64	85 c0		 test	 eax, eax
  00b66	0f 84 39 01 00
	00		 je	 $LN38@Run

; 781  : 			{
; 782  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 783  : 				return;
; 784  : 			}
; 785  : 			// ----
; 786  : 			g_CastleSiege.OperateGmCommand(lpUser->m_Index, 8, GuildName);

  00b6c	50		 push	 eax
  00b6d	6a 08		 push	 8
  00b6f	ff 33		 push	 DWORD PTR [ebx]
  00b71	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00b76	e8 00 00 00 00	 call	 ?OperateGmCommand@CCastleSiege@@QAEXHHPAX@Z ; CCastleSiege::OperateGmCommand

; 787  : 		}
; 788  : 		break;

  00b7b	e9 fb 05 00 00	 jmp	 $LN187@Run
$LN134@Run:

; 789  : 		// --
; 790  : 	case Command::Crywolf1:
; 791  : 		{
; 792  : 			g_Crywolf.OperateGmCommand(lpUser->m_Index, 1);

  00b80	6a 01		 push	 1
  00b82	ff 33		 push	 DWORD PTR [ebx]
  00b84	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Crywolf@@3VCCrywolf@@A ; g_Crywolf
  00b89	e8 00 00 00 00	 call	 ?OperateGmCommand@CCrywolf@@QAEXHH@Z ; CCrywolf::OperateGmCommand

; 793  : 		}
; 794  : 		break;

  00b8e	e9 e8 05 00 00	 jmp	 $LN187@Run
$LN135@Run:

; 795  : 		// --
; 796  : 	case Command::Crywolf2:
; 797  : 		{
; 798  : 			g_Crywolf.OperateGmCommand(lpUser->m_Index, 2);

  00b93	6a 02		 push	 2
  00b95	ff 33		 push	 DWORD PTR [ebx]
  00b97	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Crywolf@@3VCCrywolf@@A ; g_Crywolf
  00b9c	e8 00 00 00 00	 call	 ?OperateGmCommand@CCrywolf@@QAEXHH@Z ; CCrywolf::OperateGmCommand

; 799  : 		}
; 800  : 		break;

  00ba1	e9 d5 05 00 00	 jmp	 $LN187@Run
$LN136@Run:

; 801  : 		// --
; 802  : 	case Command::Crywolf3:
; 803  : 		{
; 804  : 			g_Crywolf.OperateGmCommand(lpUser->m_Index, 3);

  00ba6	6a 03		 push	 3
  00ba8	ff 33		 push	 DWORD PTR [ebx]
  00baa	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Crywolf@@3VCCrywolf@@A ; g_Crywolf
  00baf	e8 00 00 00 00	 call	 ?OperateGmCommand@CCrywolf@@QAEXHH@Z ; CCrywolf::OperateGmCommand

; 805  : 		}
; 806  : 		break;

  00bb4	e9 c2 05 00 00	 jmp	 $LN187@Run
$LN137@Run:

; 807  : 		// --
; 808  : 	case Command::Crywolf4:
; 809  : 		{
; 810  : 			g_Crywolf.OperateGmCommand(lpUser->m_Index, 0);

  00bb9	6a 00		 push	 0
  00bbb	ff 33		 push	 DWORD PTR [ebx]
  00bbd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Crywolf@@3VCCrywolf@@A ; g_Crywolf
  00bc2	e8 00 00 00 00	 call	 ?OperateGmCommand@CCrywolf@@QAEXHH@Z ; CCrywolf::OperateGmCommand

; 811  : 		}
; 812  : 		break;

  00bc7	e9 af 05 00 00	 jmp	 $LN187@Run
$LN138@Run:

; 813  : 		// --
; 814  : 	case Command::Request:
; 815  : 		{
; 816  : 			LPSTR Mode = this->GetTokenString();

  00bcc	8b ce		 mov	 ecx, esi
  00bce	e8 00 00 00 00	 call	 ?GetTokenString@CommandManager@@QAEPADXZ ; CommandManager::GetTokenString

; 817  : 			// ---
; 818  : 			if( Mode == 0 )

  00bd3	85 c0		 test	 eax, eax
  00bd5	0f 84 ca 00 00
	00		 je	 $LN38@Run

; 819  : 			{
; 820  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 821  : 				return;
; 822  : 			}
; 823  : 			// ----
; 824  : 			BYTE State = 3;
; 825  : 			// ---
; 826  : 			if( strcmp(Mode, "on" ) == 0 )

  00bdb	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_02LIELOMNJ@on?$AA@
  00be0	8b c8		 mov	 ecx, eax
$LL227@Run:
  00be2	8a 19		 mov	 bl, BYTE PTR [ecx]
  00be4	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00be6	88 9d 7b fe ff
	ff		 mov	 BYTE PTR tv1852[ebp], bl
  00bec	8b 9d 64 fe ff
	ff		 mov	 ebx, DWORD PTR _lpUser$GSCopy$1$[ebp]
  00bf2	75 30		 jne	 SHORT $LN228@Run
  00bf4	80 bd 7b fe ff
	ff 00		 cmp	 BYTE PTR tv1852[ebp], 0
  00bfb	74 23		 je	 SHORT $LN229@Run
  00bfd	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00c00	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00c03	88 9d 7b fe ff
	ff		 mov	 BYTE PTR tv1853[ebp], bl
  00c09	8b 9d 64 fe ff
	ff		 mov	 ebx, DWORD PTR _lpUser$GSCopy$1$[ebp]
  00c0f	75 13		 jne	 SHORT $LN228@Run
  00c11	83 c1 02	 add	 ecx, 2
  00c14	83 c2 02	 add	 edx, 2
  00c17	80 bd 7b fe ff
	ff 00		 cmp	 BYTE PTR tv1853[ebp], 0
  00c1e	75 c2		 jne	 SHORT $LL227@Run
$LN229@Run:
  00c20	33 c9		 xor	 ecx, ecx
  00c22	eb 05		 jmp	 SHORT $LN230@Run
$LN228@Run:
  00c24	1b c9		 sbb	 ecx, ecx
  00c26	83 c9 01	 or	 ecx, 1
$LN230@Run:
  00c29	85 c9		 test	 ecx, ecx
  00c2b	75 04		 jne	 SHORT $LN140@Run

; 827  : 			{
; 828  : 				State = 1;

  00c2d	b0 01		 mov	 al, 1
  00c2f	eb 34		 jmp	 SHORT $LN222@Run
$LN140@Run:

; 829  : 			}
; 830  : 			else if( strcmp(Mode, "off") == 0 )

  00c31	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03MCADLMAF@off?$AA@
$LL231@Run:
  00c36	8a 10		 mov	 dl, BYTE PTR [eax]
  00c38	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00c3a	75 1a		 jne	 SHORT $LN232@Run
  00c3c	84 d2		 test	 dl, dl
  00c3e	74 12		 je	 SHORT $LN233@Run
  00c40	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00c43	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00c46	75 0e		 jne	 SHORT $LN232@Run
  00c48	83 c0 02	 add	 eax, 2
  00c4b	83 c1 02	 add	 ecx, 2
  00c4e	84 d2		 test	 dl, dl
  00c50	75 e4		 jne	 SHORT $LL231@Run
$LN233@Run:
  00c52	33 c0		 xor	 eax, eax
  00c54	eb 05		 jmp	 SHORT $LN234@Run
$LN232@Run:
  00c56	1b c0		 sbb	 eax, eax
  00c58	83 c8 01	 or	 eax, 1
$LN234@Run:
  00c5b	85 c0		 test	 eax, eax
  00c5d	0f 85 18 05 00
	00		 jne	 $LN187@Run

; 831  : 			{
; 832  : 				State = 0;

  00c63	32 c0		 xor	 al, al
$LN222@Run:

; 833  : 			}
; 834  : 			// ---
; 835  : 			if( State >= FALSE && State <= TRUE )
; 836  : 			{
; 837  : 				gObjSetTradeOption(lpUser->m_Index, State);

  00c65	0f b6 f0	 movzx	 esi, al
  00c68	56		 push	 esi
  00c69	ff 33		 push	 DWORD PTR [ebx]
  00c6b	e8 00 00 00 00	 call	 ?gObjSetTradeOption@@YAXHH@Z ; gObjSetTradeOption

; 838  : 				gObjSetDuelOption(lpUser->m_Index, State);

  00c70	56		 push	 esi
  00c71	ff 33		 push	 DWORD PTR [ebx]
  00c73	e8 00 00 00 00	 call	 ?gObjSetDuelOption@@YAXHH@Z ; gObjSetDuelOption
  00c78	83 c4 10	 add	 esp, 16			; 00000010H

; 839  : 			}
; 840  : 		}
; 841  : 		break;

  00c7b	e9 fb 04 00 00	 jmp	 $LN187@Run
$LN144@Run:

; 842  : 		// --
; 843  : 	case Command::PartyLeader:
; 844  : 		{
; 845  : 			LPSTR TargetName	= this->GetTokenString();

  00c80	8b ce		 mov	 ecx, esi
  00c82	e8 00 00 00 00	 call	 ?GetTokenString@CommandManager@@QAEPADXZ ; CommandManager::GetTokenString

; 846  : 			int TargetIndex		= gObjGetIndex(TargetName);

  00c87	50		 push	 eax
  00c88	e8 00 00 00 00	 call	 ?gObjGetIndex@@YAHPAD@Z	; gObjGetIndex
  00c8d	83 c4 04	 add	 esp, 4

; 847  : 			// ----
; 848  : 			if( !gParty.SetLeader(lpUser->m_Index, TargetIndex) )

  00c90	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00c95	50		 push	 eax
  00c96	ff 33		 push	 DWORD PTR [ebx]
  00c98	e8 00 00 00 00	 call	 ?SetLeader@PartyClass@@QAE_NHH@Z ; PartyClass::SetLeader
  00c9d	84 c0		 test	 al, al
  00c9f	0f 85 d6 04 00
	00		 jne	 $LN187@Run
$LN38@Run:

; 849  : 			{
; 850  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");

  00ca5	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CMMMMCHI@Syntax?5error?5in?5command?$AA@
  00caa	ff 33		 push	 DWORD PTR [ebx]
  00cac	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 851  : 				return;

  00cb1	e9 f3 04 00 00	 jmp	 $LN240@Run
$LN146@Run:

; 852  : 			}
; 853  : 		}
; 854  : 		break;
; 855  : 		// --
; 856  : 	case Command::Move:
; 857  : 		{
; 858  : 			LPSTR MapName = this->GetTokenString();

  00cb6	8b ce		 mov	 ecx, esi
  00cb8	e8 00 00 00 00	 call	 ?GetTokenString@CommandManager@@QAEPADXZ ; CommandManager::GetTokenString
  00cbd	8b d0		 mov	 edx, eax

; 859  : 			// ---
; 860  : 			if( MapName == 0 )

  00cbf	85 d2		 test	 edx, edx
  00cc1	74 e2		 je	 SHORT $LN38@Run

; 861  : 			{
; 862  : 				MsgOutput(lpUser->m_Index, "Syntax error in command");
; 863  : 				return;
; 864  : 			}
; 865  : 			// ----
; 866  : 			if( lpUser->Teleport != 0 )

  00cc3	80 bb 88 05 00
	00 00		 cmp	 BYTE PTR [ebx+1416], 0
  00cca	74 0e		 je	 SHORT $LN148@Run
$LN249@Run:

; 867  : 			{
; 868  : 				GCServerMsgStringSend(lMsg.Get(MSGGET(6, 68)), lpUser->m_Index, 1);

  00ccc	6a 01		 push	 1
  00cce	ff 33		 push	 DWORD PTR [ebx]
  00cd0	68 44 06 00 00	 push	 1604			; 00000644H

; 869  : 				return;

  00cd5	e9 7c f3 ff ff	 jmp	 $LN246@Run
$LN148@Run:

; 870  : 			}
; 871  : 			// ----
; 872  : 			if( (lpUser->m_IfState.use) != 0 )

  00cda	8b 8b b8 11 00
	00		 mov	 ecx, DWORD PTR [ebx+4536]
  00ce0	f6 c1 03	 test	 cl, 3
  00ce3	74 24		 je	 SHORT $LN150@Run

; 873  : 			{
; 874  : 				if( lpUser->m_IfState.type  == 3 )

  00ce5	8b c1		 mov	 eax, ecx
  00ce7	25 c0 ff 00 00	 and	 eax, 65472		; 0000ffc0H
  00cec	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  00cf1	75 16		 jne	 SHORT $LN150@Run

; 875  : 				{
; 876  : 					lpUser->TargetShopNumber = -1;

  00cf3	83 c8 ff	 or	 eax, -1

; 877  : 					lpUser->m_IfState.type = 0;
; 878  : 					lpUser->m_IfState.use = 0;

  00cf6	81 e1 3c 00 ff
	ff		 and	 ecx, -65476		; ffff003cH
  00cfc	66 89 83 3a 06
	00 00		 mov	 WORD PTR [ebx+1594], ax
  00d03	89 8b b8 11 00
	00		 mov	 DWORD PTR [ebx+4536], ecx
$LN150@Run:

; 879  : 				}
; 880  : 			}
; 881  : 			// ----
; 882  : 			if( lpUser->m_IfState.use > 0 )

  00d09	f6 83 b8 11 00
	00 03		 test	 BYTE PTR [ebx+4536], 3
  00d10	77 ba		 ja	 SHORT $LN249@Run

; 883  : 			{
; 884  : 				GCServerMsgStringSend(lMsg.Get(MSGGET(6, 68)), lpUser->m_Index, 1);
; 885  : 				return;
; 886  : 			}
; 887  : 			// ----
; 888  : 			if( lpUser->m_PK_Level >= 5 )

  00d12	80 bb 19 01 00
	00 05		 cmp	 BYTE PTR [ebx+281], 5
  00d19	7c 0e		 jl	 SHORT $LN152@Run

; 889  : 			{
; 890  : 				GCServerMsgStringSend(lMsg.Get(MSGGET(4, 101)), lpUser->m_Index, 1);

  00d1b	6a 01		 push	 1
  00d1d	ff 33		 push	 DWORD PTR [ebx]
  00d1f	68 65 04 00 00	 push	 1125			; 00000465H

; 891  : 				return;

  00d24	e9 2d f3 ff ff	 jmp	 $LN246@Run
$LN152@Run:

; 892  : 			}
; 893  : 			// ----
; 894  : 			gMoveCommand.Move(lpUser, MapName);

  00d29	52		 push	 edx
  00d2a	53		 push	 ebx
  00d2b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMoveCommand@@3VCMoveCommand@@A ; gMoveCommand
  00d30	e8 00 00 00 00	 call	 ?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@PAD@Z ; CMoveCommand::Move

; 895  : 		}
; 896  : 		break;

  00d35	e9 41 04 00 00	 jmp	 $LN187@Run
$LN153@Run:

; 897  : 		// --
; 898  : 	case Command::Post:
; 899  : 		{
; 900  : 			if (lpUser->ChatLimitTime > 0) {

  00d3a	0f b7 83 f8 00
	00 00		 movzx	 eax, WORD PTR [ebx+248]
  00d41	66 85 c0	 test	 ax, ax
  00d44	74 1d		 je	 SHORT $LN154@Run

; 901  : 				MsgOutput(lpUser->m_Index, lMsg.Get(MSGGET(4, 223)), lpUser->ChatLimitTime);

  00d46	50		 push	 eax
  00d47	68 df 04 00 00	 push	 1247			; 000004dfH
  00d4c	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00d51	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00d56	50		 push	 eax
  00d57	ff 33		 push	 DWORD PTR [ebx]
  00d59	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 902  : 				return;

  00d5e	e9 03 f3 ff ff	 jmp	 $LN247@Run
$LN154@Run:

; 903  : 			}
; 904  : 			
; 905  : 			BroadCastMessageInfo lpRequest = { 0 };

  00d63	6a 69		 push	 105			; 00000069H
  00d65	8d 85 7d fe ff
	ff		 lea	 eax, DWORD PTR _lpRequest$3[ebp+1]
  00d6b	6a 00		 push	 0
  00d6d	50		 push	 eax
  00d6e	e8 00 00 00 00	 call	 _memset
  00d73	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 111  : 		lpBuf[0] = 0xC2;

  00d76	c7 85 7c fe ff
	ff c2 00 6a cd	 mov	 DWORD PTR _lpRequest$3[ebp], -848691006 ; cd6a00c2H
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 907  : 			lpRequest.Type = 1;

  00d80	c6 85 80 fe ff
	ff 01		 mov	 BYTE PTR _lpRequest$3[ebp+4], 1

; 908  : 			strcat(lpRequest.Text, &Text[strlen(Command) + 1]);

  00d87	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  00d8a	66 0f 1f 44 00
	00		 npad	 6
$LL235@Run:
  00d90	8a 07		 mov	 al, BYTE PTR [edi]
  00d92	47		 inc	 edi
  00d93	84 c0		 test	 al, al
  00d95	75 f9		 jne	 SHORT $LL235@Run
  00d97	8b 95 6c fe ff
	ff		 mov	 edx, DWORD PTR _Text$GSCopy$1$[ebp]
  00d9d	2b f9		 sub	 edi, ecx
  00d9f	42		 inc	 edx
  00da0	03 d7		 add	 edx, edi
  00da2	8b f2		 mov	 esi, edx
$LL236@Run:
  00da4	8a 02		 mov	 al, BYTE PTR [edx]
  00da6	42		 inc	 edx
  00da7	84 c0		 test	 al, al
  00da9	75 f9		 jne	 SHORT $LL236@Run
  00dab	8d bd 8c fe ff
	ff		 lea	 edi, DWORD PTR _lpRequest$3[ebp+16]
  00db1	2b d6		 sub	 edx, esi
  00db3	4f		 dec	 edi
$LL237@Run:
  00db4	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00db7	47		 inc	 edi
  00db8	84 c0		 test	 al, al
  00dba	75 f8		 jne	 SHORT $LL237@Run

; 909  : 			CopyMemory(lpRequest.Sender, lpUser->Name, 10);

  00dbc	66 8b 43 65	 mov	 ax, WORD PTR [ebx+101]
  00dc0	8b ca		 mov	 ecx, edx
  00dc2	c1 e9 02	 shr	 ecx, 2
  00dc5	f3 a5		 rep movsd
  00dc7	f3 0f 7e 43 5d	 movq	 xmm0, QWORD PTR [ebx+93]
  00dcc	8b ca		 mov	 ecx, edx
  00dce	83 e1 03	 and	 ecx, 3
  00dd1	f3 a4		 rep movsb
  00dd3	66 89 85 8a fe
	ff ff		 mov	 WORD PTR _lpRequest$3[ebp+14], ax

; 910  : 			
; 911  : 			wsJServerCli.DataSend((PCHAR)&lpRequest, sizeof(BroadCastMessageInfo));

  00dda	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsJServerCli@@3VwsJoinServerCli@@A ; wsJServerCli
  00ddf	6a 6a		 push	 106			; 0000006aH
  00de1	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR _lpRequest$3[ebp]
  00de7	66 0f d6 85 82
	fe ff ff	 movq	 QWORD PTR _lpRequest$3[ebp+6], xmm0
  00def	50		 push	 eax
  00df0	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 912  : 
; 913  : 			/*USER_REQ_POST lpInfo = { 0 };
; 914  : 			PHeadSetB((LPBYTE)&lpInfo, 0, sizeof(lpInfo));
; 915  : 			lpInfo.h.headcode = 2;
; 916  : 			lpInfo.chatmsg[0] = '!';
; 917  : 			memcpy(lpInfo.id, lpUser->Name, 10);
; 918  : 			strcat(lpInfo.chatmsg, &Text[strlen(Command) + 1]);
; 919  : 			DataSendAll((LPBYTE)&lpInfo, sizeof(lpInfo));*/
; 920  : 		}
; 921  : 		break;

  00df5	e9 81 03 00 00	 jmp	 $LN187@Run
$LN155@Run:

; 922  : 		// --
; 923  : 	case Command::AddStr:
; 924  : 	case Command::AddAgi:
; 925  : 	case Command::AddVit:
; 926  : 	case Command::AddEne:
; 927  : 	case Command::AddCom:
; 928  : 		{
; 929  : 			int AddValue = this->GetTokenNumber();

  00dfa	8b ce		 mov	 ecx, esi
  00dfc	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber
  00e01	8b f0		 mov	 esi, eax

; 930  : 			// ----
; 931  : 			if( AddValue < 0 || AddValue >= g_MaxStatValue )

  00e03	85 f6		 test	 esi, esi
  00e05	0f 88 76 02 00
	00		 js	 $LN157@Run
  00e0b	3b 35 00 00 00
	00		 cmp	 esi, DWORD PTR ?g_MaxStatValue@@3HA ; g_MaxStatValue
  00e11	0f 8d 6a 02 00
	00		 jge	 $LN157@Run

; 935  : 			}
; 936  : 			// ----
; 937  : 			if( lpUser->LevelUpPoint < AddValue )

  00e17	39 b3 98 00 00
	00		 cmp	 DWORD PTR [ebx+152], esi
  00e1d	7d 11		 jge	 SHORT $LN158@Run

; 938  : 			{
; 939  : 				MsgOutput(lpUser->m_Index, "You do not have enough level up points!");

  00e1f	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EKJHCFIP@You?5do?5not?5have?5enough?5level?5up?5@
  00e24	ff 33		 push	 DWORD PTR [ebx]
  00e26	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 940  : 				return;

  00e2b	e9 79 03 00 00	 jmp	 $LN240@Run
$LN158@Run:

; 941  : 			}
; 942  : 			// ----
; 943  : 			if(		lpCommand->Index == Command::AddCom 
; 944  : 				&&	lpUser->Class != CLASS_DARKLORD )

  00e30	8b bd 5c fe ff
	ff		 mov	 edi, DWORD PTR _lpCommand$1$[ebp]
  00e36	83 3f 28	 cmp	 DWORD PTR [edi], 40	; 00000028H
  00e39	75 1b		 jne	 SHORT $LN159@Run
  00e3b	66 83 bb 90 00
	00 00 04	 cmp	 WORD PTR [ebx+144], 4
  00e43	74 11		 je	 SHORT $LN159@Run

; 945  : 			{
; 946  : 				MsgOutput(lpUser->m_Index, "Your class in invalid for this command");

  00e45	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@JLPPKMNJ@Your?5class?5in?5invalid?5for?5this?5c@
  00e4a	ff 33		 push	 DWORD PTR [ebx]
  00e4c	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 947  : 				return;

  00e51	e9 53 03 00 00	 jmp	 $LN240@Run
$LN159@Run:

; 948  : 			}
; 949  : 			// ----
; 950  : 			PMSG_LVPOINTADDRESULT pMsg;
; 951  : 			PHeadSubSetB((LPBYTE)&pMsg, 0xF3, 0x06, sizeof(pMsg));

  00e56	6a 18		 push	 24			; 00000018H
  00e58	6a 06		 push	 6
  00e5a	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$5[ebp]
  00e60	68 f3 00 00 00	 push	 243			; 000000f3H
  00e65	50		 push	 eax
  00e66	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 952  : 			// ----
; 953  : 			if( lpCommand->Index == Command::AddStr )

  00e6b	8b 07		 mov	 eax, DWORD PTR [edi]
  00e6d	83 c4 10	 add	 esp, 16			; 00000010H
  00e70	83 f8 24	 cmp	 eax, 36			; 00000024H
  00e73	75 2c		 jne	 SHORT $LN160@Run

; 954  : 			{
; 955  : 				if( lpUser->Strength + AddValue > g_MaxStatValue )

  00e75	0f b7 8b d0 00
	00 00		 movzx	 ecx, WORD PTR [ebx+208]
  00e7c	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00e7f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?g_MaxStatValue@@3HA ; g_MaxStatValue
  00e85	0f 8f 21 03 00
	00		 jg	 $LN190@Run

; 956  : 				{
; 957  : 					return;
; 958  : 				}
; 959  : 				lpUser->Strength += AddValue;

  00e8b	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]

; 960  : 				pMsg.NewValue = lpUser->Strength;
; 961  : 				pMsg.ResultType = 0x15;

  00e8e	c6 85 ec fe ff
	ff 15		 mov	 BYTE PTR _pMsg$5[ebp+4], 21 ; 00000015H
  00e95	66 89 83 d0 00
	00 00		 mov	 WORD PTR [ebx+208], ax
  00e9c	e9 50 01 00 00	 jmp	 $LN242@Run
$LN160@Run:

; 962  : 			}
; 963  : 			else if( lpCommand->Index == Command::AddAgi )

  00ea1	83 f8 25	 cmp	 eax, 37			; 00000025H
  00ea4	75 2c		 jne	 SHORT $LN163@Run

; 964  : 			{
; 965  : 				if( lpUser->Dexterity + AddValue > g_MaxStatValue )

  00ea6	0f b7 8b d2 00
	00 00		 movzx	 ecx, WORD PTR [ebx+210]
  00ead	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00eb0	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?g_MaxStatValue@@3HA ; g_MaxStatValue
  00eb6	0f 8f f0 02 00
	00		 jg	 $LN190@Run

; 966  : 				{
; 967  : 					return;
; 968  : 				}
; 969  : 				lpUser->Dexterity += AddValue;

  00ebc	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]

; 970  : 				pMsg.NewValue = lpUser->Dexterity;
; 971  : 				pMsg.ResultType = 0x16;

  00ebf	c6 85 ec fe ff
	ff 16		 mov	 BYTE PTR _pMsg$5[ebp+4], 22 ; 00000016H
  00ec6	66 89 83 d2 00
	00 00		 mov	 WORD PTR [ebx+210], ax
  00ecd	e9 1f 01 00 00	 jmp	 $LN242@Run
$LN163@Run:

; 972  : 			}
; 973  : 			else if( lpCommand->Index == Command::AddVit )

  00ed2	83 f8 26	 cmp	 eax, 38			; 00000026H
  00ed5	75 76		 jne	 SHORT $LN166@Run

; 974  : 			{
; 975  : 				if( lpUser->Vitality + AddValue > g_MaxStatValue )

  00ed7	0f b7 8b d4 00
	00 00		 movzx	 ecx, WORD PTR [ebx+212]
  00ede	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00ee1	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?g_MaxStatValue@@3HA ; g_MaxStatValue
  00ee7	0f 8f bf 02 00
	00		 jg	 $LN190@Run

; 976  : 				{
; 977  : 					return;
; 978  : 				}
; 979  : 				lpUser->Vitality += AddValue;

  00eed	66 0f 6e 83 24
	01 00 00	 movd	 xmm0, DWORD PTR [ebx+292]
  00ef5	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  00ef8	66 0f 6e ce	 movd	 xmm1, esi

; 980  : 				pMsg.NewValue = lpUser->Vitality;
; 981  : 				lpUser->MaxLife += lpUser->VitalityToLife * AddValue;

  00efc	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00eff	66 89 83 d4 00
	00 00		 mov	 WORD PTR [ebx+212], ax
  00f06	66 89 85 f4 fe
	ff ff		 mov	 WORD PTR _pMsg$5[ebp+12], ax

; 982  : 				pMsg.MaxLifeAndMana = (WORD)(lpUser->MaxLife + lpUser->AddLife);
; 983  : 				pMsg.MAXHPANDMANA = (int)(lpUser->MaxLife + lpUser->AddLife);
; 984  : 				pMsg.ResultType = 0x17;

  00f0d	c6 85 ec fe ff
	ff 17		 mov	 BYTE PTR _pMsg$5[ebp+4], 23 ; 00000017H
  00f14	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00f17	f3 0f 59 8b 10
	01 00 00	 mulss	 xmm1, DWORD PTR [ebx+272]
  00f1f	f3 0f 58 8b dc
	00 00 00	 addss	 xmm1, DWORD PTR [ebx+220]
  00f27	f3 0f 58 c1	 addss	 xmm0, xmm1
  00f2b	f3 0f 11 8b dc
	00 00 00	 movss	 DWORD PTR [ebx+220], xmm1
  00f33	f3 0f 2c c0	 cvttss2si eax, xmm0
  00f37	66 89 85 ee fe
	ff ff		 mov	 WORD PTR _pMsg$5[ebp+6], ax
  00f3e	f3 0f 2c c0	 cvttss2si eax, xmm0
  00f42	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _pMsg$5[ebp+16], eax
  00f48	e9 ab 00 00 00	 jmp	 $LN172@Run
$LN166@Run:

; 985  : 			}
; 986  : 			else if( lpCommand->Index == Command::AddEne )

  00f4d	83 f8 27	 cmp	 eax, 39			; 00000027H
  00f50	75 73		 jne	 SHORT $LN169@Run

; 987  : 			{
; 988  : 				if( lpUser->Energy + AddValue > g_MaxStatValue )

  00f52	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  00f59	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00f5c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?g_MaxStatValue@@3HA ; g_MaxStatValue
  00f62	0f 8f 44 02 00
	00		 jg	 $LN190@Run

; 989  : 				{
; 990  : 					return;
; 991  : 				}
; 992  : 				lpUser->Energy += AddValue;

  00f68	66 0f 6e 83 28
	01 00 00	 movd	 xmm0, DWORD PTR [ebx+296]
  00f70	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  00f73	66 0f 6e ce	 movd	 xmm1, esi

; 993  : 				pMsg.NewValue = lpUser->Energy;
; 994  : 				lpUser->MaxMana += lpUser->EnergyToMana * AddValue;

  00f77	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00f7a	66 89 83 d6 00
	00 00		 mov	 WORD PTR [ebx+214], ax
  00f81	66 89 85 f4 fe
	ff ff		 mov	 WORD PTR _pMsg$5[ebp+12], ax

; 995  : 				pMsg.MaxLifeAndMana = (WORD)(lpUser->MaxMana + lpUser->AddMana);
; 996  : 				pMsg.MAXHPANDMANA = (int)(lpUser->MaxMana + lpUser->AddMana);
; 997  : 				pMsg.ResultType = 0x18;

  00f88	c6 85 ec fe ff
	ff 18		 mov	 BYTE PTR _pMsg$5[ebp+4], 24 ; 00000018H
  00f8f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00f92	f3 0f 59 8b 14
	01 00 00	 mulss	 xmm1, DWORD PTR [ebx+276]
  00f9a	f3 0f 58 8b f0
	00 00 00	 addss	 xmm1, DWORD PTR [ebx+240]
  00fa2	f3 0f 58 c1	 addss	 xmm0, xmm1
  00fa6	f3 0f 11 8b f0
	00 00 00	 movss	 DWORD PTR [ebx+240], xmm1
  00fae	f3 0f 2c c0	 cvttss2si eax, xmm0
  00fb2	66 89 85 ee fe
	ff ff		 mov	 WORD PTR _pMsg$5[ebp+6], ax
  00fb9	f3 0f 2c c0	 cvttss2si eax, xmm0
  00fbd	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _pMsg$5[ebp+16], eax
  00fc3	eb 33		 jmp	 SHORT $LN172@Run
$LN169@Run:

; 998  : 			}
; 999  : 			else if( lpCommand->Index == Command::AddCom )

  00fc5	83 f8 28	 cmp	 eax, 40			; 00000028H
  00fc8	75 2e		 jne	 SHORT $LN172@Run

; 1000 : 			{
; 1001 : 				if( lpUser->Leadership + AddValue > g_MaxStatValue )

  00fca	0f b7 8b f4 00
	00 00		 movzx	 ecx, WORD PTR [ebx+244]
  00fd1	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00fd4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?g_MaxStatValue@@3HA ; g_MaxStatValue
  00fda	0f 8f cc 01 00
	00		 jg	 $LN190@Run

; 1002 : 				{
; 1003 : 					return;
; 1004 : 				}
; 1005 : 				lpUser->Leadership += AddValue;

  00fe0	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]

; 1007 : 				pMsg.ResultType = 0x19;

  00fe3	c6 85 ec fe ff
	ff 19		 mov	 BYTE PTR _pMsg$5[ebp+4], 25 ; 00000019H
  00fea	66 89 83 f4 00
	00 00		 mov	 WORD PTR [ebx+244], ax
$LN242@Run:

; 1006 : 				pMsg.NewValue = lpUser->Leadership;

  00ff1	66 89 85 f4 fe
	ff ff		 mov	 WORD PTR _pMsg$5[ebp+12], ax
$LN172@Run:

; 1008 : 			}
; 1009 : 			// ----
; 1010 : 			gObjCalCharacter(lpUser->m_Index);

  00ff8	ff 33		 push	 DWORD PTR [ebx]
  00ffa	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter

; 1011 : 			gObjSetBP(lpUser->m_Index);

  00fff	ff 33		 push	 DWORD PTR [ebx]
  01001	e8 00 00 00 00	 call	 ?gObjSetBP@@YAXH@Z	; gObjSetBP

; 1012 : 			pMsg.wMaxShield = lpUser->iMaxShield + lpUser->iAddShield;

  01006	0f b7 83 30 01
	00 00		 movzx	 eax, WORD PTR [ebx+304]
  0100d	66 03 83 34 01
	00 00		 add	 ax, WORD PTR [ebx+308]

; 1013 : 			pMsg.MaxBP = lpUser->MaxBP + lpUser->AddBP;
; 1014 : 			pMsg.MAXSD = lpUser->iMaxShield + lpUser->iAddShield;
; 1015 : 			lpUser->LevelUpPoint -= AddValue;

  01014	29 b3 98 00 00
	00		 sub	 DWORD PTR [ebx+152], esi
  0101a	66 89 85 f0 fe
	ff ff		 mov	 WORD PTR _pMsg$5[ebp+8], ax
  01021	0f b7 83 0c 01
	00 00		 movzx	 eax, WORD PTR [ebx+268]
  01028	66 03 83 08 01
	00 00		 add	 ax, WORD PTR [ebx+264]
  0102f	66 89 85 f2 fe
	ff ff		 mov	 WORD PTR _pMsg$5[ebp+10], ax
  01036	8b 83 30 01 00
	00		 mov	 eax, DWORD PTR [ebx+304]
  0103c	03 83 34 01 00
	00		 add	 eax, DWORD PTR [ebx+308]
  01042	89 85 fc fe ff
	ff		 mov	 DWORD PTR _pMsg$5[ebp+20], eax

; 1016 : 			pMsg.LvlUpPt = lpUser->LevelUpPoint;

  01048	0f b7 83 98 00
	00 00		 movzx	 eax, WORD PTR [ebx+152]
  0104f	66 89 85 f6 fe
	ff ff		 mov	 WORD PTR _pMsg$5[ebp+14], ax

; 1017 : 			DataSend(lpUser->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  01056	0f b6 85 e9 fe
	ff ff		 movzx	 eax, BYTE PTR _pMsg$5[ebp+1]
  0105d	50		 push	 eax
  0105e	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$5[ebp]
  01064	50		 push	 eax
  01065	ff 33		 push	 DWORD PTR [ebx]
  01067	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1018 : 			MsgOutput(lpUser->m_Index, "%d point(s) has been used", AddValue);

  0106c	56		 push	 esi
  0106d	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@PMIGKCON@?$CFd?5point?$CIs?$CJ?5has?5been?5used?$AA@
  01072	ff 33		 push	 DWORD PTR [ebx]
  01074	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  01079	83 c4 20	 add	 esp, 32			; 00000020H

; 1019 : 		}
; 1020 : 		break;

  0107c	e9 fa 00 00 00	 jmp	 $LN187@Run
$LN157@Run:

; 932  : 			{
; 933  : 				MsgOutput(lpUser->m_Index, "Wrong value for add");

  01081	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@FAHMMEJJ@Wrong?5value?5for?5add?$AA@
  01086	ff 33		 push	 DWORD PTR [ebx]
  01088	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 934  : 				return;

  0108d	e9 17 01 00 00	 jmp	 $LN240@Run
$LN174@Run:

; 1021 : 		// --
; 1022 : 	case Command::Offtrade:
; 1023 : 		{
; 1024 : #if (ENABLE_CUSTOM_OFFLINETRADE == 1)
; 1025 : 			g_OfflineTrade.ProcStart(lpUser);

  01092	53		 push	 ebx
  01093	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_OfflineTrade@@3VOfflineTrade@@A ; g_OfflineTrade
  01098	e8 00 00 00 00	 call	 ?ProcStart@OfflineTrade@@QAEXPAUOBJECTSTRUCT@@@Z ; OfflineTrade::ProcStart

; 1026 : #endif
; 1027 : 		}
; 1028 : 		break;

  0109d	e9 d9 00 00 00	 jmp	 $LN187@Run
$LN175@Run:

; 1029 : 	case Command::MultiVault:
; 1030 : 		{
; 1031 : 			int iVaultNumber = this->GetTokenNumber();

  010a2	8b ce		 mov	 ecx, esi
  010a4	e8 00 00 00 00	 call	 ?GetTokenNumber@CommandManager@@QAEHXZ ; CommandManager::GetTokenNumber
  010a9	8b d0		 mov	 edx, eax

; 1032 : 
; 1033 : 			if (iVaultNumber > 5 || iVaultNumber < 0)

  010ab	83 fa 05	 cmp	 edx, 5
  010ae	77 5e		 ja	 SHORT $LN177@Run

; 1037 : 			}
; 1038 : 			// ----
; 1039 : 			if (	lpUser->WarehouseSave != 0 
; 1040 : 				|| lpUser->m_ReqWarehouseOpen != 0
; 1041 : 				|| (lpUser->m_IfState.use >= 1 && lpUser->m_IfState.type >=1) )

  010b0	83 bb 0c 12 00
	00 00		 cmp	 DWORD PTR [ebx+4620], 0
  010b7	0f 85 ef 00 00
	00		 jne	 $LN190@Run
  010bd	80 bb b0 14 00
	00 00		 cmp	 BYTE PTR [ebx+5296], 0
  010c4	0f 85 e2 00 00
	00		 jne	 $LN190@Run
  010ca	8b 8b b8 11 00
	00		 mov	 ecx, DWORD PTR [ebx+4536]
  010d0	8b c1		 mov	 eax, ecx
  010d2	24 03		 and	 al, 3
  010d4	3c 01		 cmp	 al, 1
  010d6	72 0f		 jb	 SHORT $LN178@Run
  010d8	81 e1 c0 ff 00
	00		 and	 ecx, 65472		; 0000ffc0H
  010de	83 f9 40	 cmp	 ecx, 64			; 00000040H
  010e1	0f 83 c5 00 00
	00		 jae	 $LN190@Run
$LN178@Run:

; 1042 : 			{
; 1043 : 				return;
; 1044 : 			}
; 1045 : 			// ----
; 1046 : 			if (lpUser->RecvSendWare != 0)

  010e7	80 bb 1c 27 00
	00 00		 cmp	 BYTE PTR [ebx+10012], 0
  010ee	0f 85 b8 00 00
	00		 jne	 $LN190@Run

; 1047 : 			{
; 1048 : 				return;
; 1049 : 			}
; 1050 : 
; 1051 : 			lpUser->RecvSendWare = 1;
; 1052 : 			gWareHouseSYSTEM.DBSendVaultInfo(lpUser->m_Index, lpUser->AccountID, (BYTE)iVaultNumber);

  010f4	52		 push	 edx
  010f5	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  010f8	c6 83 1c 27 00
	00 01		 mov	 BYTE PTR [ebx+10012], 1
  010ff	50		 push	 eax
  01100	ff 33		 push	 DWORD PTR [ebx]
  01102	b9 00 00 00 00	 mov	 ecx, OFFSET ?gWareHouseSYSTEM@@3VWareHouseSYSTEM@@A ; gWareHouseSYSTEM
  01107	e8 00 00 00 00	 call	 ?DBSendVaultInfo@WareHouseSYSTEM@@QAEXHPADE@Z ; WareHouseSYSTEM::DBSendVaultInfo

; 1053 : 		}
; 1054 : 		break;

  0110c	eb 6d		 jmp	 SHORT $LN187@Run
$LN177@Run:

; 1034 : 			{
; 1035 : 				GCServerMsgStringSend("Warehouse range: 0-5", lpUser->m_Index,1);

  0110e	6a 01		 push	 1
  01110	ff 33		 push	 DWORD PTR [ebx]
  01112	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KOJCGEPK@Warehouse?5range?3?50?95?$AA@

; 1036 : 				return;

  01117	e9 45 ef ff ff	 jmp	 $LN248@Run
$LN181@Run:

; 1055 : 	case Command::GuildWar:
; 1056 : 		{
; 1057 : 			LPSTR pId = this->GetTokenString();

  0111c	8b ce		 mov	 ecx, esi
  0111e	e8 00 00 00 00	 call	 ?GetTokenString@CommandManager@@QAEPADXZ ; CommandManager::GetTokenString
  01123	8b d0		 mov	 edx, eax

; 1058 : 
; 1059 : 			if ( pId != NULL )

  01125	85 d2		 test	 edx, edx
  01127	74 52		 je	 SHORT $LN187@Run

; 1060 : 			{
; 1061 : 				if ( strlen(pId) >= 1 )

  01129	8b ca		 mov	 ecx, edx
  0112b	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0112e	66 90		 npad	 2
$LL238@Run:
  01130	8a 01		 mov	 al, BYTE PTR [ecx]
  01132	41		 inc	 ecx
  01133	84 c0		 test	 al, al
  01135	75 f9		 jne	 SHORT $LL238@Run
  01137	2b ce		 sub	 ecx, esi
  01139	83 f9 01	 cmp	 ecx, 1
  0113c	72 3d		 jb	 SHORT $LN187@Run

; 1062 : 				{
; 1063 : 					::GCGuildWarRequestResult(pId, lpUser->m_Index, 0);

  0113e	6a 00		 push	 0

; 1064 : 				}
; 1065 : 			}
; 1066 : 		}
; 1067 : 		break;

  01140	eb 2e		 jmp	 SHORT $LN243@Run
$LN184@Run:

; 1068 : 	case Command::BattleSoccer:
; 1069 : 		{
; 1070 : 			if ( gEnableBattleSoccer != FALSE )

  01142	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gEnableBattleSoccer@@3HA, 0 ; gEnableBattleSoccer
  01149	74 30		 je	 SHORT $LN187@Run

; 1071 : 			{
; 1072 : 				LPSTR pId = this->GetTokenString();

  0114b	8b ce		 mov	 ecx, esi
  0114d	e8 00 00 00 00	 call	 ?GetTokenString@CommandManager@@QAEPADXZ ; CommandManager::GetTokenString
  01152	8b d0		 mov	 edx, eax

; 1073 : 
; 1074 : 				if ( pId != NULL )

  01154	85 d2		 test	 edx, edx
  01156	74 23		 je	 SHORT $LN187@Run

; 1075 : 				{
; 1076 : 					if ( strlen(pId) >= 1 )

  01158	8b ca		 mov	 ecx, edx
  0115a	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0115d	0f 1f 00	 npad	 3
$LL239@Run:
  01160	8a 01		 mov	 al, BYTE PTR [ecx]
  01162	41		 inc	 ecx
  01163	84 c0		 test	 al, al
  01165	75 f9		 jne	 SHORT $LL239@Run
  01167	2b ce		 sub	 ecx, esi
  01169	83 f9 01	 cmp	 ecx, 1
  0116c	72 0d		 jb	 SHORT $LN187@Run

; 1077 : 					{
; 1078 : 						::GCGuildWarRequestResult(pId, lpUser->m_Index, 1);

  0116e	6a 01		 push	 1
$LN243@Run:
  01170	ff 33		 push	 DWORD PTR [ebx]
  01172	52		 push	 edx
  01173	e8 00 00 00 00	 call	 ?GCGuildWarRequestResult@@YAXPADHH@Z ; GCGuildWarRequestResult
$LN241@Run:
  01178	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN187@Run:

; 1079 : 					}
; 1080 : 				}
; 1081 : 			}
; 1082 : 		}
; 1083 : 		break;
; 1084 : 	}
; 1085 : 	// ----
; 1086 : 	if( lpCommand->Price <= 0 )

  0117b	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _lpCommand$1$[ebp]
  01181	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  01184	85 c9		 test	 ecx, ecx
  01186	7e 24		 jle	 SHORT $LN190@Run

; 1087 : 	{
; 1088 : 		return;
; 1089 : 	}
; 1090 : 	// ----
; 1091 : 	switch(lpCommand->PriceType)

  01188	80 78 60 00	 cmp	 BYTE PTR [eax+96], 0
  0118c	75 1e		 jne	 SHORT $LN190@Run

; 1092 : 	{
; 1093 : 		case 0: //Zen
; 1094 : 			{
; 1095 : 				if (lpCommand->Index != Command::PKReset) {

  0118e	83 38 05	 cmp	 DWORD PTR [eax], 5
  01191	74 19		 je	 SHORT $LN190@Run

; 1096 : 
; 1097 : 				lpUser->Money -= lpCommand->Price;

  01193	8b 83 cc 00 00
	00		 mov	 eax, DWORD PTR [ebx+204]
  01199	2b c1		 sub	 eax, ecx

; 1098 : 				GCMoneySend(lpUser->m_Index, lpUser->Money);

  0119b	50		 push	 eax
  0119c	ff 33		 push	 DWORD PTR [ebx]
  0119e	89 83 cc 00 00
	00		 mov	 DWORD PTR [ebx+204], eax
  011a4	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
$LN240@Run:
  011a9	83 c4 08	 add	 esp, 8
$LN190@Run:

; 1099 : 				}
; 1100 : 			}
; 1101 : 			break;
; 1102 : 			// --
; 1103 : 		case 1: //WCoinC
; 1104 : 			{
; 1105 : 				//lpUser->m_wcCashPoint
; 1106 : 			}
; 1107 : 			break;
; 1108 : 			// --
; 1109 : 		case 2: //WCoinP
; 1110 : 			{
; 1111 : 				//lpUser->m_wpCashPoint
; 1112 : 			}
; 1113 : 			break;
; 1114 : 			// --
; 1115 : 		case 3: //WCoinG
; 1116 : 			{
; 1117 : 				//lpUser->m_wgCashPoint
; 1118 : 			}
; 1119 : 			break;
; 1120 : 	}
; 1121 : }

  011ac	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  011af	5f		 pop	 edi
  011b0	5e		 pop	 esi
  011b1	33 cd		 xor	 ecx, ebp
  011b3	5b		 pop	 ebx
  011b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  011b9	8b e5		 mov	 esp, ebp
  011bb	5d		 pop	 ebp
  011bc	c2 08 00	 ret	 8
  011bf	90		 npad	 1
$LN251@Run:
  011c0	00 00 00 00	 DD	 $LN36@Run
  011c4	00 00 00 00	 DD	 $LN40@Run
  011c8	00 00 00 00	 DD	 $LN40@Run
  011cc	00 00 00 00	 DD	 $LN42@Run
  011d0	00 00 00 00	 DD	 $LN46@Run
  011d4	00 00 00 00	 DD	 $LN51@Run
  011d8	00 00 00 00	 DD	 $LN56@Run
  011dc	00 00 00 00	 DD	 $LN60@Run
  011e0	00 00 00 00	 DD	 $LN91@Run
  011e4	00 00 00 00	 DD	 $LN93@Run
  011e8	00 00 00 00	 DD	 $LN94@Run
  011ec	00 00 00 00	 DD	 $LN95@Run
  011f0	00 00 00 00	 DD	 $LN97@Run
  011f4	00 00 00 00	 DD	 $LN101@Run
  011f8	00 00 00 00	 DD	 $LN104@Run
  011fc	00 00 00 00	 DD	 $LN114@Run
  01200	00 00 00 00	 DD	 $LN115@Run
  01204	00 00 00 00	 DD	 $LN118@Run
  01208	00 00 00 00	 DD	 $LN121@Run
  0120c	00 00 00 00	 DD	 $LN124@Run
  01210	00 00 00 00	 DD	 $LN126@Run
  01214	00 00 00 00	 DD	 $LN127@Run
  01218	00 00 00 00	 DD	 $LN128@Run
  0121c	00 00 00 00	 DD	 $LN129@Run
  01220	00 00 00 00	 DD	 $LN130@Run
  01224	00 00 00 00	 DD	 $LN131@Run
  01228	00 00 00 00	 DD	 $LN132@Run
  0122c	00 00 00 00	 DD	 $LN187@Run
  01230	00 00 00 00	 DD	 $LN134@Run
  01234	00 00 00 00	 DD	 $LN135@Run
  01238	00 00 00 00	 DD	 $LN136@Run
  0123c	00 00 00 00	 DD	 $LN137@Run
  01240	00 00 00 00	 DD	 $LN138@Run
  01244	00 00 00 00	 DD	 $LN144@Run
  01248	00 00 00 00	 DD	 $LN146@Run
  0124c	00 00 00 00	 DD	 $LN153@Run
  01250	00 00 00 00	 DD	 $LN155@Run
  01254	00 00 00 00	 DD	 $LN155@Run
  01258	00 00 00 00	 DD	 $LN155@Run
  0125c	00 00 00 00	 DD	 $LN155@Run
  01260	00 00 00 00	 DD	 $LN155@Run
  01264	00 00 00 00	 DD	 $LN174@Run
  01268	00 00 00 00	 DD	 $LN175@Run
  0126c	00 00 00 00	 DD	 $LN181@Run
  01270	00 00 00 00	 DD	 $LN184@Run
?Run@CommandManager@@QAEXPAUOBJECTSTRUCT@@PAD@Z ENDP	; CommandManager::Run
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
;	COMDAT ?Read@CommandManager@@QAEXPAD@Z
_TEXT	SEGMENT
_Result$ = -384						; size = 12
$T2 = -372						; size = 4
$T3 = -368						; size = 4
$T4 = -364						; size = 4
$T5 = -360						; size = 4
$T6 = -356						; size = 4
$T7 = -352						; size = 4
$T8 = -348						; size = 4
$T9 = -344						; size = 4
$T10 = -340						; size = 4
_CommandList$ = -336					; size = 4
_CommandManager$ = -332					; size = 4
_Node$11 = -328						; size = 4
_Document$ = -324					; size = 200
_lpCommand$12 = -124					; size = 108
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_File$ = 8						; size = 4
?Read@CommandManager@@QAEXPAD@Z PROC			; CommandManager::Read, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Read@CommandManager@@QAEXPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 74 01 00
	00		 sub	 esp, 372		; 00000174H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f9		 mov	 edi, ecx
  0002f	8b 75 08	 mov	 esi, DWORD PTR _File$[ebp]

; 54   : 	xml_document Document;

  00032	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00038	e8 00 00 00 00	 call	 ??0xml_document@pugi@@QAE@XZ ; pugi::xml_document::xml_document

; 55   : 	xml_parse_result Result = Document.load_file(File);

  0003d	6a 00		 push	 0
  0003f	6a 74		 push	 116			; 00000074H
  00041	56		 push	 esi
  00042	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR _Result$[ebp]
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004f	50		 push	 eax
  00050	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00056	e8 00 00 00 00	 call	 ?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z ; pugi::xml_document::load_file

; 56   : 	// ----
; 57   : 	if( Result.status != status_ok )

  0005b	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _Result$[ebp]
  00061	85 c0		 test	 eax, eax
  00063	74 14		 je	 SHORT $LN5@Read

; 58   : 	{
; 59   : 		MsgBox("[CommandManager] File %s not found! %d", File, Result.status);

  00065	50		 push	 eax
  00066	56		 push	 esi
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@KPCABHMJ@?$FLCommandManager?$FN?5File?5?$CFs?5not?5fou@
  0006c	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
  00074	e9 cd 01 00 00	 jmp	 $LN3@Read
$LN5@Read:

; 60   : 		return;
; 61   : 	}
; 62   : 	// ----
; 63   : 	xml_node CommandManager = Document.child("commandmanager");

  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EJIINOB@commandmanager?$AA@
  0007e	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR _CommandManager$[ebp]
  00084	50		 push	 eax
  00085	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  0008b	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child

; 64   : 	xml_node CommandList = CommandManager.child("commandlist");

  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MCFKJOEK@commandlist?$AA@
  00095	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _CommandList$[ebp]
  0009b	50		 push	 eax
  0009c	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _CommandManager$[ebp]
  000a2	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child

; 65   : 	// ----
; 66   : 	for( xml_node Node = CommandList.child("command"); Node; Node = Node.next_sibling() )

  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_07KMMNMMFF@command?$AA@
  000ac	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _Node$11[ebp]
  000b2	50		 push	 eax
  000b3	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _CommandList$[ebp]
  000b9	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  000be	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  000c4	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  000c9	85 c0		 test	 eax, eax
  000cb	0f 84 75 01 00
	00		 je	 $LN3@Read
$LL4@Read:

; 67   : 	{
; 68   : 		CommandInfo lpCommand = { 0 };

  000d1	6a 68		 push	 104			; 00000068H
  000d3	8d 45 88	 lea	 eax, DWORD PTR _lpCommand$12[ebp+4]
  000d6	6a 00		 push	 0
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 _memset
  000de	83 c4 0c	 add	 esp, 12			; 0000000cH

; 69   : 		lpCommand.Index = Node.attribute("id").as_int();

  000e1	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  000e7	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  000ed	6a 00		 push	 0
  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_02EGCJHIOB@id?$AA@
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  000fa	8b c8		 mov	 ecx, eax
  000fc	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 70   : 		lpCommand.Access = Node.attribute("access").as_int();

  00101	6a 00		 push	 0
  00103	89 45 84	 mov	 DWORD PTR _lpCommand$12[ebp], eax
  00106	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_06EBPNOMLE@access?$AA@
  00111	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0011d	8b c8		 mov	 ecx, eax
  0011f	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 71   : 		lpCommand.MinLevel = Node.attribute("minlevel").as_int();

  00124	6a 00		 push	 0
  00126	88 45 d8	 mov	 BYTE PTR _lpCommand$12[ebp+84], al
  00129	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_08EHBDOELG@minlevel?$AA@
  00134	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00140	8b c8		 mov	 ecx, eax
  00142	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 72   : 		lpCommand.MinReset = Node.attribute("minreset").as_int();

  00147	6a 00		 push	 0
  00149	89 45 dc	 mov	 DWORD PTR _lpCommand$12[ebp+88], eax
  0014c	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_08MLAKOPDG@minreset?$AA@
  00157	8d 85 a0 fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00163	8b c8		 mov	 ecx, eax
  00165	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 73   : 		lpCommand.PriceType = Node.attribute("pricetype").as_int();

  0016a	6a 00		 push	 0
  0016c	89 45 e0	 mov	 DWORD PTR _lpCommand$12[ebp+92], eax
  0016f	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  00175	68 00 00 00 00	 push	 OFFSET ??_C@_09EPLENEOI@pricetype?$AA@
  0017a	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00186	8b c8		 mov	 ecx, eax
  00188	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 74   : 		lpCommand.Price = Node.attribute("price").as_int();

  0018d	6a 00		 push	 0
  0018f	88 45 e4	 mov	 BYTE PTR _lpCommand$12[ebp+96], al
  00192	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  00198	68 00 00 00 00	 push	 OFFSET ??_C@_05NCDILCCA@price?$AA@
  0019d	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001a9	8b c8		 mov	 ecx, eax
  001ab	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 75   : 		lpCommand.PremiumAccess = Node.attribute("premium").as_int();

  001b0	6a 00		 push	 0
  001b2	89 45 e8	 mov	 DWORD PTR _lpCommand$12[ebp+100], eax
  001b5	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_07LAKGFKMJ@premium?$AA@
  001c0	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  001c6	50		 push	 eax
  001c7	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001cc	8b c8		 mov	 ecx, eax
  001ce	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int
  001d3	89 45 ec	 mov	 DWORD PTR _lpCommand$12[ebp+104], eax

; 76   : 		strcpy(lpCommand.Text, Node.text().as_string());

  001d6	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  001dc	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  001e1	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  001e7	50		 push	 eax
  001e8	e8 00 00 00 00	 call	 ?text@xml_node@pugi@@QBE?AVxml_text@2@XZ ; pugi::xml_node::text
  001ed	8b c8		 mov	 ecx, eax
  001ef	e8 00 00 00 00	 call	 ?as_string@xml_text@pugi@@QBEPBDPBD@Z ; pugi::xml_text::as_string
  001f4	8d 55 88	 lea	 edx, DWORD PTR _lpCommand$12[ebp+4]
  001f7	2b d0		 sub	 edx, eax
  001f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@Read:
  00200	8a 08		 mov	 cl, BYTE PTR [eax]
  00202	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00205	88 4c 02 ff	 mov	 BYTE PTR [edx+eax-1], cl
  00209	84 c9		 test	 cl, cl
  0020b	75 f3		 jne	 SHORT $LL7@Read

; 77   : 		this->m_CommandInfo.push_back(lpCommand);

  0020d	8d 45 84	 lea	 eax, DWORD PTR _lpCommand$12[ebp]
  00210	50		 push	 eax
  00211	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00214	e8 00 00 00 00	 call	 ?push_back@?$vector@UCommandInfo@@V?$allocator@UCommandInfo@@@std@@@std@@QAEXABUCommandInfo@@@Z ; std::vector<CommandInfo,std::allocator<CommandInfo> >::push_back
  00219	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0021f	50		 push	 eax
  00220	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  00226	e8 00 00 00 00	 call	 ?next_sibling@xml_node@pugi@@QBE?AV12@XZ ; pugi::xml_node::next_sibling
  0022b	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  00231	8b 00		 mov	 eax, DWORD PTR [eax]
  00233	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _Node$11[ebp], eax
  00239	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  0023e	85 c0		 test	 eax, eax
  00240	0f 85 8b fe ff
	ff		 jne	 $LL4@Read
$LN3@Read:

; 78   : 	}
; 79   : }

  00246	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  0024c	e8 00 00 00 00	 call	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
  00251	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00254	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0025b	59		 pop	 ecx
  0025c	5f		 pop	 edi
  0025d	5e		 pop	 esi
  0025e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00261	33 cd		 xor	 ecx, ebp
  00263	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00268	8b e5		 mov	 esp, ebp
  0026a	5d		 pop	 ebp
  0026b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Read@CommandManager@@QAEXPAD@Z$0:
  00000	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
__ehhandler$?Read@CommandManager@@QAEXPAD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 80 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-384]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Read@CommandManager@@QAEXPAD@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Read@CommandManager@@QAEXPAD@Z ENDP			; CommandManager::Read
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
;	COMDAT ?Load@CommandManager@@QAEXXZ
_TEXT	SEGMENT
?Load@CommandManager@@QAEXXZ PROC			; CommandManager::Load, COMDAT
; _this$ = ecx

; 46   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 47   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@CommandManager@@QAEXXZ ; CommandManager::Init

; 48   : 	this->Read(gDirPath.GetNewPath(FILE_CUSTOM_COMMANDMANAGER));

  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@LKNNOONE@Custom?2CommandManager?4xml?$AA@
  0000d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00012	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00017	50		 push	 eax
  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?Read@CommandManager@@QAEXPAD@Z ; CommandManager::Read
  0001f	5e		 pop	 esi

; 49   : }

  00020	c3		 ret	 0
?Load@CommandManager@@QAEXXZ ENDP			; CommandManager::Load
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
;	COMDAT ?Init@CommandManager@@QAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?Init@CommandManager@@QAEXXZ PROC			; CommandManager::Init, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 36   : {

  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  00009	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0000c	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  00011	56		 push	 esi
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 37   : 	this->m_CommandInfo.clear();

  00012	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00015	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00018	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0001a	f7 e9		 imul	 ecx
  0001c	c1 fa 05	 sar	 edx, 5
  0001f	8b c2		 mov	 eax, edx
  00021	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00024	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 38   : 	if( this->m_CommandInfo.capacity() > 0 )

  00026	74 41		 je	 SHORT $LN310@Init
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1549 : 		if (this == &_Right)

  00028	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  0002b	3b c6		 cmp	 eax, esi
  0002d	74 3a		 je	 SHORT $LN310@Init
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 54   : 	_Right = _Move(_Tmp);

  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00037	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 53   : 	_Left = _Move(_Right);

  0003e	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 54   : 	_Right = _Move(_Tmp);

  00041	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00048	85 c9		 test	 ecx, ecx
  0004a	74 1d		 je	 SHORT $LN310@Init

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0004c	2b d1		 sub	 edx, ecx
  0004e	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  00053	f7 ea		 imul	 edx
  00055	c1 fa 05	 sar	 edx, 5
  00058	8b c2		 mov	 eax, edx
  0005a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005d	03 c2		 add	 eax, edx
  0005f	50		 push	 eax
  00060	51		 push	 ecx
  00061	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00064	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@I@Z ; std::_Wrap_alloc<std::allocator<CommandInfo> >::deallocate
$LN310@Init:
  00069	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 42   : }

  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
?Init@CommandManager@@QAEXXZ ENDP			; CommandManager::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
;	COMDAT ??1CommandManager@@UAE@XZ
_TEXT	SEGMENT
??1CommandManager@@UAE@XZ PROC				; CommandManager::~CommandManager, COMDAT
; _this$ = ecx

; 30   : {

  00000	56		 push	 esi

; 32   : }

  00001	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CommandManager@@6B@
  0000a	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  0000b	8b 3e		 mov	 edi, DWORD PTR [esi]
  0000d	85 ff		 test	 edi, edi
  0000f	74 33		 je	 SHORT $LN7@CommandMan

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00011	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00014	b8 f7 12 da 4b	 mov	 eax, 1272582903		; 4bda12f7H
  00019	2b cf		 sub	 ecx, edi
  0001b	f7 e9		 imul	 ecx
  0001d	8b ce		 mov	 ecx, esi
  0001f	c1 fa 05	 sar	 edx, 5
  00022	8b c2		 mov	 eax, edx
  00024	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00027	03 c2		 add	 eax, edx
  00029	50		 push	 eax
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UCommandInfo@@@std@@@std@@QAEXPAUCommandInfo@@I@Z ; std::_Wrap_alloc<std::allocator<CommandInfo> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  00030	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00036	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  0003d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN7@CommandMan:
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 32   : }

  00046	c3		 ret	 0
??1CommandManager@@UAE@XZ ENDP				; CommandManager::~CommandManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
;	COMDAT ??0CommandManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CommandManager@@QAE@XZ PROC				; CommandManager::CommandManager, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CommandManager@@6B@

; 26   : }

  0000a	8b c1		 mov	 eax, ecx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 481  : 		_Mylast = pointer();

  00016	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 482  : 		_Myend = pointer();

  0001d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp

; 26   : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0CommandManager@@QAE@XZ ENDP				; CommandManager::CommandManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
;	COMDAT ?set@PWMSG_HEAD@@QAEXPAEEH@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_size$ = 16						; size = 4
?set@PWMSG_HEAD@@QAEXPAEEH@Z PROC			; PWMSG_HEAD::set, COMDAT
; _this$ = ecx

; 110  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 111  : 		lpBuf[0] = 0xC2;

  00003	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]

; 112  : 		lpBuf[1] = SET_NUMBERH(size);

  00006	8b 4d 10	 mov	 ecx, DWORD PTR _size$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	c1 e8 08	 shr	 eax, 8
  0000e	88 42 01	 mov	 BYTE PTR [edx+1], al

; 113  : 		lpBuf[2] = SET_NUMBERL(size);
; 114  : 		lpBuf[3] = head;

  00011	8a 45 0c	 mov	 al, BYTE PTR _head$[ebp]
  00014	c6 02 c2	 mov	 BYTE PTR [edx], 194	; 000000c2H
  00017	88 4a 02	 mov	 BYTE PTR [edx+2], cl
  0001a	88 42 03	 mov	 BYTE PTR [edx+3], al

; 115  : 	};

  0001d	5d		 pop	 ebp
  0001e	c2 0c 00	 ret	 12			; 0000000cH
?set@PWMSG_HEAD@@QAEXPAEEH@Z ENDP			; PWMSG_HEAD::set
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\user.h
;	COMDAT ?GetPayCode@BILL_CLASS@@QAEHXZ
_TEXT	SEGMENT
?GetPayCode@BILL_CLASS@@QAEHXZ PROC			; BILL_CLASS::GetPayCode, COMDAT
; _this$ = ecx

; 2017 : 	int GetPayCode() {return this->PayCode;}	// line : 252

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	c3		 ret	 0
?GetPayCode@BILL_CLASS@@QAEHXZ ENDP			; BILL_CLASS::GetPayCode
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z PROC	; std::_Container_base0::_Swap_all, COMDAT
; _this$ = ecx

; 48   : 		}

  00000	c2 04 00	 ret	 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z ENDP	; std::_Container_base0::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\commandmanager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 1271 : // -------------------------------------------------------------------------------

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
