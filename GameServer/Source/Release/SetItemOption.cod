; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\common\SetItemOption.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CSetItemOption@@QAE@XZ			; CSetItemOption::CSetItemOption
PUBLIC	??1CSetItemOption@@UAE@XZ			; CSetItemOption::~CSetItemOption
PUBLIC	?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z	; CSetItemOption::LoadTypeInfo
PUBLIC	?LoadTypeInfo@CSetItemOption@@QAEHPAD@Z		; CSetItemOption::LoadTypeInfo
PUBLIC	?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z	; CSetItemOption::LoadOptionInfo
PUBLIC	?LoadOptionInfo@CSetItemOption@@QAEHPAD@Z	; CSetItemOption::LoadOptionInfo
PUBLIC	?IsSetItem@CSetItemOption@@QAEHH@Z		; CSetItemOption::IsSetItem
PUBLIC	?GetOptionTableIndex@CSetItemOption@@QAEHHH@Z	; CSetItemOption::GetOptionTableIndex
PUBLIC	?GetSetOptionName@CSetItemOption@@QAEPADHH@Z	; CSetItemOption::GetSetOptionName
PUBLIC	?GetSetOptionName@CSetItemOption@@QAEPADH@Z	; CSetItemOption::GetSetOptionName
PUBLIC	?GetSetOption@CSetItemOption@@QAEHHHAAH000HH@Z	; CSetItemOption::GetSetOption
PUBLIC	?GetMaxSetOptionCount@CSetItemOption@@QAEHH@Z	; CSetItemOption::GetMaxSetOptionCount
PUBLIC	?GetGetFullSetOption@CSetItemOption@@QAEHHAAH000000000HH@Z ; CSetItemOption::GetGetFullSetOption
PUBLIC	?IsRequireClass@CSetItemOption@@QAEHHHH@Z	; CSetItemOption::IsRequireClass
PUBLIC	?CheckMixContition@CSetItemOption@@QAEHHH@Z	; CSetItemOption::CheckMixContition
PUBLIC	?MakeSetOption@CSetItemOption@@QAEHHH@Z		; CSetItemOption::MakeSetOption
PUBLIC	?GenRandomItemNum@CSetItemOption@@QAEHXZ	; CSetItemOption::GenRandomItemNum
PUBLIC	?GenSetOption@CSetItemOption@@QAEHH@Z		; CSetItemOption::GenSetOption
PUBLIC	??_GCSetItemOption@@UAEPAXI@Z			; CSetItemOption::`scalar deleting destructor'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7CSetItemOption@@6B@				; CSetItemOption::`vftable'
PUBLIC	?gSetItemOption@@3VCSetItemOption@@A		; gSetItemOption
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CE@FIOMFOEB@IsSetItem?5Check?5error?3?5?$CIitemnum?3@ ; `string'
PUBLIC	??_C@_0CO@JHBADDNF@GetOptionTableIndex?5Check?5error?3@ ; `string'
PUBLIC	??_C@_0DI@POCMEGLP@GetOptionTableIndex?5setoption?5Ch@ ; `string'
PUBLIC	??_C@_0CL@LOANDNBH@GetSetOptionName?5Check?5error?3?5?$CIi@ ; `string'
PUBLIC	??_C@_0CH@DEMKMCF@GetSetOption?5Check?5error?3?5?$CIitemn@ ; `string'
PUBLIC	??_C@_0CM@OCFJJDJ@GetMaxOptionCount?5Check?5error?3?5?$CI@ ; `string'
PUBLIC	??_C@_0CI@NPMNOGMI@MakeSetOption?5Check?5error?3?5?$CIitem@ ; `string'
PUBLIC	??_C@_0CF@ECDCLMC@GenSetType?5Check?5error?3?5?$CIitemnum@ ; `string'
PUBLIC	??_R4CSetItemOption@@6B@			; CSetItemOption::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSetItemOption@@@8			; CSetItemOption `RTTI Type Descriptor'
PUBLIC	??_R3CSetItemOption@@8				; CSetItemOption::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSetItemOption@@8				; CSetItemOption::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSetItemOption@@8			; CSetItemOption::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_rand:PROC
EXTRN	_atof:PROC
EXTRN	??_ECSetItemOption@@UAEPAXI@Z:PROC		; CSetItemOption::`vector deleting destructor'
EXTRN	??0CWzMemScript@@QAE@XZ:PROC			; CWzMemScript::CWzMemScript
EXTRN	??1CWzMemScript@@UAE@XZ:PROC			; CWzMemScript::~CWzMemScript
EXTRN	?SetBuffer@CWzMemScript@@QAEHPADH@Z:PROC	; CWzMemScript::SetBuffer
EXTRN	?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ:PROC ; CWzMemScript::GetToken
EXTRN	?GetNumber@CWzMemScript@@QAEHXZ:PROC		; CWzMemScript::GetNumber
EXTRN	?GetString@CWzMemScript@@QAEPADXZ:PROC		; CWzMemScript::GetString
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?g_MaxItemIndexOfEachItemType@@3PAHA:BYTE	; g_MaxItemIndexOfEachItemType
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?gSetItemOption@@3VCSetItemOption@@A DB 030484H DUP (?)	; gSetItemOption
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
_BSS	ENDS
CRT$XCU	SEGMENT
?gSetItemOption$initializer$@@3P6AXXZA DD FLAT:??__EgSetItemOption@@YAXXZ ; gSetItemOption$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CSetItemOption@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSetItemOption@@8 DD FLAT:??_R0?AVCSetItemOption@@@8 ; CSetItemOption::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSetItemOption@@8
rdata$r	ENDS
;	COMDAT ??_R2CSetItemOption@@8
rdata$r	SEGMENT
??_R2CSetItemOption@@8 DD FLAT:??_R1A@?0A@EA@CSetItemOption@@8 ; CSetItemOption::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSetItemOption@@8
rdata$r	SEGMENT
??_R3CSetItemOption@@8 DD 00H				; CSetItemOption::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSetItemOption@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSetItemOption@@@8
data$r	SEGMENT
??_R0?AVCSetItemOption@@@8 DD FLAT:??_7type_info@@6B@	; CSetItemOption `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSetItemOption@@', 00H
data$r	ENDS
;	COMDAT ??_R4CSetItemOption@@6B@
rdata$r	SEGMENT
??_R4CSetItemOption@@6B@ DD 00H				; CSetItemOption::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSetItemOption@@@8
	DD	FLAT:??_R3CSetItemOption@@8
rdata$r	ENDS
;	COMDAT ??_C@_0CF@ECDCLMC@GenSetType?5Check?5error?3?5?$CIitemnum@
CONST	SEGMENT
??_C@_0CF@ECDCLMC@GenSetType?5Check?5error?3?5?$CIitemnum@ DB 'GenSetType'
	DB	' Check error: (itemnum:%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NPMNOGMI@MakeSetOption?5Check?5error?3?5?$CIitem@
CONST	SEGMENT
??_C@_0CI@NPMNOGMI@MakeSetOption?5Check?5error?3?5?$CIitem@ DB 'MakeSetOp'
	DB	'tion Check error: (itemnum:%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OCFJJDJ@GetMaxOptionCount?5Check?5error?3?5?$CI@
CONST	SEGMENT
??_C@_0CM@OCFJJDJ@GetMaxOptionCount?5Check?5error?3?5?$CI@ DB 'GetMaxOpti'
	DB	'onCount Check error: (itemnum:%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DEMKMCF@GetSetOption?5Check?5error?3?5?$CIitemn@
CONST	SEGMENT
??_C@_0CH@DEMKMCF@GetSetOption?5Check?5error?3?5?$CIitemn@ DB 'GetSetOpti'
	DB	'on Check error: (itemnum:%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LOANDNBH@GetSetOptionName?5Check?5error?3?5?$CIi@
CONST	SEGMENT
??_C@_0CL@LOANDNBH@GetSetOptionName?5Check?5error?3?5?$CIi@ DB 'GetSetOpt'
	DB	'ionName Check error: (itemnum:%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@POCMEGLP@GetOptionTableIndex?5setoption?5Ch@
CONST	SEGMENT
??_C@_0DI@POCMEGLP@GetOptionTableIndex?5setoption?5Ch@ DB 'GetOptionTable'
	DB	'Index setoption Check error: (itemnum:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@JHBADDNF@GetOptionTableIndex?5Check?5error?3@
CONST	SEGMENT
??_C@_0CO@JHBADDNF@GetOptionTableIndex?5Check?5error?3@ DB 'GetOptionTabl'
	DB	'eIndex Check error: (itemnum:%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FIOMFOEB@IsSetItem?5Check?5error?3?5?$CIitemnum?3@
CONST	SEGMENT
??_C@_0CE@FIOMFOEB@IsSetItem?5Check?5error?3?5?$CIitemnum?3@ DB 'IsSetIte'
	DB	'm Check error: (itemnum:%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CSetItemOption@@6B@
CONST	SEGMENT
??_7CSetItemOption@@6B@ DD FLAT:??_R4CSetItemOption@@6B@ ; CSetItemOption::`vftable'
	DD	FLAT:??_ECSetItemOption@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z$0
__ehfuncinfo$?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z$0
__ehfuncinfo$?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FgSetItemOption@@YAXXZ
text$yd	SEGMENT
??__FgSetItemOption@@YAXXZ PROC				; `dynamic atexit destructor for 'gSetItemOption'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  00005	e9 00 00 00 00	 jmp	 ??1CSetItemOption@@UAE@XZ ; CSetItemOption::~CSetItemOption
??__FgSetItemOption@@YAXXZ ENDP				; `dynamic atexit destructor for 'gSetItemOption''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ??__EgSetItemOption@@YAXXZ
text$di	SEGMENT
??__EgSetItemOption@@YAXXZ PROC				; `dynamic initializer for 'gSetItemOption'', COMDAT

; 15   : CSetItemOption gSetItemOption;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  00005	e8 00 00 00 00	 call	 ??0CSetItemOption@@QAE@XZ ; CSetItemOption::CSetItemOption
  0000a	68 00 00 00 00	 push	 OFFSET ??__FgSetItemOption@@YAXXZ ; `dynamic atexit destructor for 'gSetItemOption''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EgSetItemOption@@YAXXZ ENDP				; `dynamic initializer for 'gSetItemOption''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCSetItemOption@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSetItemOption@@UAEPAXI@Z PROC			; CSetItemOption::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSetItemOption@@UAE@XZ ; CSetItemOption::~CSetItemOption
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 84 04 03 00	 push	 197764			; 00030484H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCSetItemOption@@UAEPAXI@Z ENDP			; CSetItemOption::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ?GenSetOption@CSetItemOption@@QAEHH@Z
_TEXT	SEGMENT
_itemnum$ = 8						; size = 4
?GenSetOption@CSetItemOption@@QAEHH@Z PROC		; CSetItemOption::GenSetOption, COMDAT
; _this$ = ecx

; 822  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 823  : 	if ( itemnum < 0 || itemnum > MAX_ITEMS-1)

  00003	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  00006	3d ff 1f 00 00	 cmp	 eax, 8191		; 00001fffH
  0000b	77 5b		 ja	 SHORT $LN3@GenSetOpti

; 827  : 	}
; 828  : 
; 829  : 	if ( this->m_SetItemTypeInfo[itemnum].IsLoad == FALSE )

  0000d	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00010	83 7c 81 04 00	 cmp	 DWORD PTR [ecx+eax*4+4], 0
  00015	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00018	74 5d		 je	 SHORT $LN13@GenSetOpti

; 830  : 		return FALSE;
; 831  : 
; 832  : 	int SetOption;
; 833  : 
; 834  : 	if ( this->m_SetItemTypeInfo[itemnum].OptionIndex[0] &&

  0001a	56		 push	 esi
  0001b	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0001e	85 f6		 test	 esi, esi
  00020	74 1d		 je	 SHORT $LN5@GenSetOpti
  00022	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00026	74 17		 je	 SHORT $LN5@GenSetOpti

; 835  : 		 this->m_SetItemTypeInfo[itemnum].OptionIndex[1] )
; 836  : 	{
; 837  : 		SetOption = rand() % 2 + 1;

  00028	e8 00 00 00 00	 call	 _rand
  0002d	8b f0		 mov	 esi, eax
  0002f	81 e6 01 00 00
	80		 and	 esi, -2147483647	; 80000001H
  00035	79 05		 jns	 SHORT $LN12@GenSetOpti
  00037	4e		 dec	 esi
  00038	83 ce fe	 or	 esi, -2			; fffffffeH
  0003b	46		 inc	 esi
$LN12@GenSetOpti:
  0003c	46		 inc	 esi
  0003d	eb 07		 jmp	 SHORT $LN7@GenSetOpti
$LN5@GenSetOpti:

; 838  : 	}
; 839  : 	else if ( this->m_SetItemTypeInfo[itemnum].OptionIndex[0] )

  0003f	f7 de		 neg	 esi
  00041	1b f6		 sbb	 esi, esi
  00043	83 c6 02	 add	 esi, 2
$LN7@GenSetOpti:

; 840  : 	{
; 841  : 		SetOption = 1;
; 842  : 	}
; 843  : 	else
; 844  : 	{
; 845  : 		SetOption = 2;
; 846  : 	}
; 847  : 
; 848  : 	if ( (rand()%100) < 80 )

  00046	e8 00 00 00 00	 call	 _rand
  0004b	99		 cdq
  0004c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00051	f7 f9		 idiv	 ecx
  00053	8b ce		 mov	 ecx, esi

; 849  : 	{
; 850  : 		SetOption |= 4;
; 851  : 	}
; 852  : 	else
; 853  : 	{
; 854  : 		SetOption |= 8;

  00055	83 ce 08	 or	 esi, 8
  00058	83 c9 04	 or	 ecx, 4
  0005b	83 fa 50	 cmp	 edx, 80			; 00000050H
  0005e	0f 4c f1	 cmovl	 esi, ecx

; 855  : 	}
; 856  : 
; 857  : 	return SetOption;

  00061	8b c6		 mov	 eax, esi
  00063	5e		 pop	 esi

; 858  : }

  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
$LN3@GenSetOpti:

; 824  : 	{
; 825  : 		LogAdd("GenSetType Check error: (itemnum:%d)", itemnum);

  00068	50		 push	 eax
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@ECDCLMC@GenSetType?5Check?5error?3?5?$CIitemnum@
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00074	83 c4 08	 add	 esp, 8
$LN13@GenSetOpti:

; 826  : 		return FALSE;

  00077	33 c0		 xor	 eax, eax

; 858  : }

  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
?GenSetOption@CSetItemOption@@QAEHH@Z ENDP		; CSetItemOption::GenSetOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ?GenRandomItemNum@CSetItemOption@@QAEHXZ
_TEXT	SEGMENT
?GenRandomItemNum@CSetItemOption@@QAEHXZ PROC		; CSetItemOption::GenRandomItemNum, COMDAT
; _this$ = ecx

; 798  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b d9		 mov	 ebx, ecx
$LL4@GenRandomI:

; 799  : 	int iItemIndex;
; 800  : 	do
; 801  : 	{
; 802  : 		int type = (rand()%MAX_TYPE_ITEMS);

  00005	e8 00 00 00 00	 call	 _rand
  0000a	8b f8		 mov	 edi, eax
  0000c	81 e7 0f 00 00
	80		 and	 edi, -2147483633	; 8000000fH
  00012	79 05		 jns	 SHORT $LN16@GenRandomI
  00014	4f		 dec	 edi
  00015	83 cf f0	 or	 edi, -16		; fffffff0H
  00018	47		 inc	 edi
$LN16@GenRandomI:

; 803  : 		int maxindex = ( g_MaxItemIndexOfEachItemType[type] <= 0 ) ?  MAX_SUBTYPE_ITEMS : g_MaxItemIndexOfEachItemType[type];

  00019	8b 34 bd 00 00
	00 00		 mov	 esi, DWORD PTR ?g_MaxItemIndexOfEachItemType@@3PAHA[edi*4]
  00020	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  00025	85 f6		 test	 esi, esi
  00027	0f 4e f0	 cmovle	 esi, eax

; 804  : 		int index = rand() % maxindex;

  0002a	e8 00 00 00 00	 call	 _rand
  0002f	99		 cdq
  00030	f7 fe		 idiv	 esi

; 805  : 		iItemIndex = ITEMGET(type, index);

  00032	8b f7		 mov	 esi, edi

; 806  : 
; 807  : 		if( type >= 7 && type < 12 )

  00034	8d 47 f9	 lea	 eax, DWORD PTR [edi-7]
  00037	c1 e6 09	 shl	 esi, 9
  0003a	03 f2		 add	 esi, edx
  0003c	83 f8 04	 cmp	 eax, 4
  0003f	77 0a		 ja	 SHORT $LN6@GenRandomI

; 808  : 		{
; 809  : 			if( index >= 62 && index <= 72 )

  00041	83 fa 3e	 cmp	 edx, 62			; 0000003eH
  00044	7c 05		 jl	 SHORT $LN6@GenRandomI
  00046	83 fa 48	 cmp	 edx, 72			; 00000048H
  00049	7e ba		 jle	 SHORT $LL4@GenRandomI
$LN6@GenRandomI:

; 810  : 				continue;
; 811  : 		}
; 812  : 
; 813  : 		if ( this->IsSetItem(iItemIndex) != FALSE )

  0004b	56		 push	 esi
  0004c	8b cb		 mov	 ecx, ebx
  0004e	e8 00 00 00 00	 call	 ?IsSetItem@CSetItemOption@@QAEHH@Z ; CSetItemOption::IsSetItem
  00053	85 c0		 test	 eax, eax
  00055	74 ae		 je	 SHORT $LL4@GenRandomI

; 814  : 			return iItemIndex;

  00057	5f		 pop	 edi
  00058	8b c6		 mov	 eax, esi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx

; 815  : 	}
; 816  : 	while ( true );
; 817  : 
; 818  : 	return ITEMGET(0,0);
; 819  : }

  0005c	c3		 ret	 0
?GenRandomItemNum@CSetItemOption@@QAEHXZ ENDP		; CSetItemOption::GenRandomItemNum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ?MakeSetOption@CSetItemOption@@QAEHHH@Z
_TEXT	SEGMENT
_itemnum$ = 8						; size = 4
_mixitemlevel$ = 12					; size = 4
?MakeSetOption@CSetItemOption@@QAEHHH@Z PROC		; CSetItemOption::MakeSetOption, COMDAT
; _this$ = ecx

; 769  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 770  : 	if ( itemnum <0 || itemnum > MAX_ITEMS-1)

  00003	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  00006	3d ff 1f 00 00	 cmp	 eax, 8191		; 00001fffH
  0000b	77 51		 ja	 SHORT $LN3@MakeSetOpt

; 774  : 	}
; 775  : 
; 776  : 	if (this->m_SetItemTypeInfo[itemnum].IsLoad == FALSE)

  0000d	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00010	83 7c 81 04 00	 cmp	 DWORD PTR [ecx+eax*4+4], 0
  00015	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00018	74 53		 je	 SHORT $LN13@MakeSetOpt

; 777  : 	{
; 778  : 		return 0;
; 779  : 	}
; 780  : 
; 781  : 	if (this->m_SetItemTypeInfo[itemnum].ChaosMixLevel[0] == this->m_SetItemTypeInfo[itemnum].ChaosMixLevel[1])

  0001a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001d	56		 push	 esi
  0001e	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00021	3b ce		 cmp	 ecx, esi
  00023	75 17		 jne	 SHORT $LN5@MakeSetOpt

; 782  : 	{
; 783  : 		return (rand() % 2) +1;

  00025	e8 00 00 00 00	 call	 _rand
  0002a	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0002f	79 05		 jns	 SHORT $LN12@MakeSetOpt
  00031	48		 dec	 eax
  00032	83 c8 fe	 or	 eax, -2			; fffffffeH
  00035	40		 inc	 eax
$LN12@MakeSetOpt:
  00036	40		 inc	 eax
  00037	5e		 pop	 esi

; 790  : 	{
; 791  : 		return 2;
; 792  : 	}
; 793  : 
; 794  : 	return 0;
; 795  : }

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN5@MakeSetOpt:

; 784  : 	}
; 785  : 	else if ( this->m_SetItemTypeInfo[itemnum].ChaosMixLevel[0] == mixitemlevel )

  0003c	8b 55 0c	 mov	 edx, DWORD PTR _mixitemlevel$[ebp]
  0003f	3b ca		 cmp	 ecx, edx
  00041	75 0a		 jne	 SHORT $LN7@MakeSetOpt

; 786  : 	{
; 787  : 		return 1;

  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	5e		 pop	 esi

; 790  : 	{
; 791  : 		return 2;
; 792  : 	}
; 793  : 
; 794  : 	return 0;
; 795  : }

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
$LN7@MakeSetOpt:

; 788  : 	}
; 789  : 	else if ( this->m_SetItemTypeInfo[itemnum].ChaosMixLevel[1] == mixitemlevel )

  0004d	33 c0		 xor	 eax, eax
  0004f	b9 02 00 00 00	 mov	 ecx, 2
  00054	3b f2		 cmp	 esi, edx
  00056	5e		 pop	 esi
  00057	0f 44 c1	 cmove	 eax, ecx

; 790  : 	{
; 791  : 		return 2;
; 792  : 	}
; 793  : 
; 794  : 	return 0;
; 795  : }

  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
$LN3@MakeSetOpt:

; 771  : 	{
; 772  : 		LogAdd("MakeSetOption Check error: (itemnum:%d)", itemnum);

  0005e	50		 push	 eax
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@NPMNOGMI@MakeSetOption?5Check?5error?3?5?$CIitem@
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0006a	83 c4 08	 add	 esp, 8
$LN13@MakeSetOpt:

; 773  : 		return 0;

  0006d	33 c0		 xor	 eax, eax

; 790  : 	{
; 791  : 		return 2;
; 792  : 	}
; 793  : 
; 794  : 	return 0;
; 795  : }

  0006f	5d		 pop	 ebp
  00070	c2 08 00	 ret	 8
?MakeSetOption@CSetItemOption@@QAEHHH@Z ENDP		; CSetItemOption::MakeSetOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ?CheckMixContition@CSetItemOption@@QAEHHH@Z
_TEXT	SEGMENT
_itemnum$ = 8						; size = 4
_mixitemlevel$ = 12					; size = 4
?CheckMixContition@CSetItemOption@@QAEHHH@Z PROC	; CSetItemOption::CheckMixContition, COMDAT
; _this$ = ecx

; 743  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 744  : 	if (mixitemlevel == -1)

  00003	8b 55 0c	 mov	 edx, DWORD PTR _mixitemlevel$[ebp]
  00006	83 fa ff	 cmp	 edx, -1
  00009	74 39		 je	 SHORT $LN9@CheckMixCo

; 745  : 	{
; 746  : 		return 0;
; 747  : 	}
; 748  : 
; 749  : 	if ( itemnum <0 || itemnum > MAX_ITEMS-1)

  0000b	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  0000e	3d ff 1f 00 00	 cmp	 eax, 8191		; 00001fffH
  00013	77 20		 ja	 SHORT $LN4@CheckMixCo

; 753  : 	}
; 754  : 
; 755  : 	if (this->m_SetItemTypeInfo[itemnum].IsLoad == 0)

  00015	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00018	83 7c 81 04 00	 cmp	 DWORD PTR [ecx+eax*4+4], 0
  0001d	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00020	74 22		 je	 SHORT $LN9@CheckMixCo

; 756  : 	{
; 757  : 		return 0;
; 758  : 	}
; 759  : 
; 760  : 	if (this->m_SetItemTypeInfo[itemnum].ChaosMixLevel[0] == mixitemlevel || this->m_SetItemTypeInfo[itemnum].ChaosMixLevel[1] == mixitemlevel)

  00022	39 50 10	 cmp	 DWORD PTR [eax+16], edx
  00025	74 05		 je	 SHORT $LN7@CheckMixCo
  00027	39 50 14	 cmp	 DWORD PTR [eax+20], edx
  0002a	75 18		 jne	 SHORT $LN9@CheckMixCo
$LN7@CheckMixCo:

; 761  : 	{
; 762  : 		return 1;

  0002c	b8 01 00 00 00	 mov	 eax, 1

; 763  : 	}
; 764  : 
; 765  : 	return 0;
; 766  : }

  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
$LN4@CheckMixCo:

; 750  : 	{
; 751  : 		LogAdd("MakeSetOption Check error: (itemnum:%d)", itemnum);

  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@NPMNOGMI@MakeSetOption?5Check?5error?3?5?$CIitem@
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00041	83 c4 08	 add	 esp, 8
$LN9@CheckMixCo:

; 752  : 		return 0;

  00044	33 c0		 xor	 eax, eax

; 763  : 	}
; 764  : 
; 765  : 	return 0;
; 766  : }

  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
?CheckMixContition@CSetItemOption@@QAEHHH@Z ENDP	; CSetItemOption::CheckMixContition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ?IsRequireClass@CSetItemOption@@QAEHHHH@Z
_TEXT	SEGMENT
_optionindex$ = 8					; size = 4
_Class$ = 12						; size = 4
_ChangeUP$ = 16						; size = 4
?IsRequireClass@CSetItemOption@@QAEHHHH@Z PROC		; CSetItemOption::IsRequireClass, COMDAT
; _this$ = ecx

; 704  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 705  : 	int requireclass;
; 706  : 	
; 707  : 	if (optionindex <0 || optionindex > MAX_SETITEM_OPTION-1)

  00003	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  00006	83 f8 4f	 cmp	 eax, 79			; 0000004fH
  00009	77 3c		 ja	 SHORT $LN3@IsRequireC

; 711  : 	}
; 712  : 
; 713  : 	if (this->m_SetItemOptionInfo[optionindex].IsLoad == 0)

  0000b	69 d0 a8 01 00
	00		 imul	 edx, eax, 424
  00011	83 bc 0a 04 80
	02 00 00	 cmp	 DWORD PTR [edx+ecx+163844], 0
  00019	74 3b		 je	 SHORT $LN11@IsRequireC

; 714  : 	{
; 715  : 		return 0;
; 716  : 	}
; 717  : 
; 718  : 	if ( Class <0 || Class > MAX_TYPE_PLAYER-1)

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _Class$[ebp]
  0001e	83 f8 06	 cmp	 eax, 6
  00021	77 33		 ja	 SHORT $LN11@IsRequireC

; 719  : 	{
; 720  : 		return 0;
; 721  : 	}
; 722  : 
; 723  : 	requireclass= this->m_SetItemOptionInfo[optionindex].RequireClass[Class];

  00023	03 c2		 add	 eax, edx
  00025	0f b6 8c 08 a4
	81 02 00	 movzx	 ecx, BYTE PTR [eax+ecx+164260]

; 724  : 
; 725  : 	if (requireclass == 0)

  0002d	85 c9		 test	 ecx, ecx
  0002f	74 25		 je	 SHORT $LN11@IsRequireC

; 726  : 	{
; 727  : 		return 0;
; 728  : 	}
; 729  : 
; 730  : 	if (requireclass > 1)

  00031	83 f9 01	 cmp	 ecx, 1
  00034	7e 08		 jle	 SHORT $LN9@IsRequireC

; 731  : 	{
; 732  : 		if (requireclass != ChangeUP+1)

  00036	8b 45 10	 mov	 eax, DWORD PTR _ChangeUP$[ebp]
  00039	40		 inc	 eax
  0003a	3b c8		 cmp	 ecx, eax
  0003c	75 18		 jne	 SHORT $LN11@IsRequireC
$LN9@IsRequireC:

; 733  : 		{
; 734  : 			return 0;
; 735  : 		}
; 736  : 	}
; 737  : 	return 1;

  0003e	b8 01 00 00 00	 mov	 eax, 1

; 738  : }

  00043	5d		 pop	 ebp
  00044	c2 0c 00	 ret	 12			; 0000000cH
$LN3@IsRequireC:

; 708  : 	{
; 709  : 		LogAdd("GetMaxOptionCount Check error: (itemnum:%d)", optionindex);

  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@OCFJJDJ@GetMaxOptionCount?5Check?5error?3?5?$CI@
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00053	83 c4 08	 add	 esp, 8
$LN11@IsRequireC:

; 710  : 		return 0;

  00056	33 c0		 xor	 eax, eax

; 738  : }

  00058	5d		 pop	 ebp
  00059	c2 0c 00	 ret	 12			; 0000000cH
?IsRequireClass@CSetItemOption@@QAEHHHH@Z ENDP		; CSetItemOption::IsRequireClass
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ?GetGetFullSetOption@CSetItemOption@@QAEHHAAH000000000HH@Z
_TEXT	SEGMENT
_optionindex$ = 8					; size = 4
_op1$ = 12						; size = 4
_op2$ = 16						; size = 4
_op3$ = 20						; size = 4
_op4$ = 24						; size = 4
_op5$ = 28						; size = 4
_opvalue1$ = 32						; size = 4
_opvalue2$ = 36						; size = 4
_opvalue3$ = 40						; size = 4
_opvalue4$ = 44						; size = 4
_opvalue5$ = 48						; size = 4
_Class$ = 52						; size = 4
_ChangeUp$ = 56						; size = 4
?GetGetFullSetOption@CSetItemOption@@QAEHHAAH000000000HH@Z PROC ; CSetItemOption::GetGetFullSetOption, COMDAT
; _this$ = ecx

; 601  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 602  : 	opvalue1 = 0;

  00003	8b 45 20	 mov	 eax, DWORD PTR _opvalue1$[ebp]
  00006	8b d1		 mov	 edx, ecx

; 603  : 	opvalue2 = 0;
; 604  : 	opvalue3 = 0;
; 605  : 	opvalue4 = 0;
; 606  : 	opvalue5 = 0;
; 607  : 
; 608  : 	if (optionindex <0 || optionindex > MAX_SETITEM_OPTION-1)

  00008	8b 4d 08	 mov	 ecx, DWORD PTR _optionindex$[ebp]
  0000b	53		 push	 ebx
  0000c	8b 5d 24	 mov	 ebx, DWORD PTR _opvalue2$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00015	8b 45 28	 mov	 eax, DWORD PTR _opvalue3$[ebp]
  00018	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00024	8b 45 2c	 mov	 eax, DWORD PTR _opvalue4$[ebp]
  00027	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002d	8b 45 30	 mov	 eax, DWORD PTR _opvalue5$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00036	83 f9 4f	 cmp	 ecx, 79			; 0000004fH
  00039	0f 87 4e 01 00
	00		 ja	 $LN3@GetGetFull

; 612  : 	}
; 613  : 
; 614  : 	if (this->m_SetItemOptionInfo[optionindex].IsLoad == 0)

  0003f	56		 push	 esi
  00040	69 f1 a8 01 00
	00		 imul	 esi, ecx, 424
  00046	03 f2		 add	 esi, edx
  00048	83 be 04 80 02
	00 00		 cmp	 DWORD PTR [esi+163844], 0
  0004f	75 08		 jne	 SHORT $LN4@GetGetFull

; 615  : 	{
; 616  : 		return 0;

  00051	5e		 pop	 esi
  00052	33 c0		 xor	 eax, eax
  00054	5b		 pop	 ebx

; 701  : }

  00055	5d		 pop	 ebp
  00056	c2 34 00	 ret	 52			; 00000034H
$LN4@GetGetFull:
  00059	57		 push	 edi

; 617  : 	}
; 618  : 
; 619  : 	BOOL isRequireClass=this->IsRequireClass(optionindex, Class, ChangeUp);

  0005a	ff 75 38	 push	 DWORD PTR _ChangeUp$[ebp]
  0005d	ff 75 34	 push	 DWORD PTR _Class$[ebp]
  00060	51		 push	 ecx
  00061	8b ca		 mov	 ecx, edx
  00063	e8 00 00 00 00	 call	 ?IsRequireClass@CSetItemOption@@QAEHHHH@Z ; CSetItemOption::IsRequireClass

; 620  : 	op1 = this->m_SetItemOptionInfo[optionindex].SetFullOtionTable[0];

  00068	8b 7d 0c	 mov	 edi, DWORD PTR _op1$[ebp]
  0006b	8b d0		 mov	 edx, eax

; 621  : 	opvalue1 = this->m_SetItemOptionInfo[optionindex].SetFullOtionTableValue[0];

  0006d	8b 45 20	 mov	 eax, DWORD PTR _opvalue1$[ebp]
  00070	8b 8e 7c 81 02
	00		 mov	 ecx, DWORD PTR [esi+164220]
  00076	89 0f		 mov	 DWORD PTR [edi], ecx
  00078	8b 8e 90 81 02
	00		 mov	 ecx, DWORD PTR [esi+164240]
  0007e	89 08		 mov	 DWORD PTR [eax], ecx

; 622  : 
; 623  : 	if ( op1 > 183 )

  00080	8b 07		 mov	 eax, DWORD PTR [edi]
  00082	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  00087	7e 0c		 jle	 SHORT $LN6@GetGetFull

; 624  : 	{
; 625  : 		if ( isRequireClass == 0 )

  00089	85 d2		 test	 edx, edx
  0008b	75 08		 jne	 SHORT $LN6@GetGetFull

; 626  : 		{
; 627  : 			op1 = -1;

  0008d	c7 07 ff ff ff
	ff		 mov	 DWORD PTR [edi], -1

; 628  : 		}
; 629  : 	}
; 630  : 
; 631  : 	if ( op1 != -1 )

  00093	eb 0c		 jmp	 SHORT $LN7@GetGetFull
$LN6@GetGetFull:
  00095	83 f8 ff	 cmp	 eax, -1
  00098	74 07		 je	 SHORT $LN7@GetGetFull

; 632  : 	{
; 633  : 		op1 += 0xA0;

  0009a	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  0009f	89 07		 mov	 DWORD PTR [edi], eax
$LN7@GetGetFull:

; 634  : 	}
; 635  : 
; 636  : 	op2=this->m_SetItemOptionInfo[optionindex].SetFullOtionTable[1];

  000a1	8b 4d 10	 mov	 ecx, DWORD PTR _op2$[ebp]
  000a4	8b 86 80 81 02
	00		 mov	 eax, DWORD PTR [esi+164224]
  000aa	89 01		 mov	 DWORD PTR [ecx], eax

; 637  : 	opvalue2=this->m_SetItemOptionInfo[optionindex].SetFullOtionTableValue[1];

  000ac	8b 86 94 81 02
	00		 mov	 eax, DWORD PTR [esi+164244]
  000b2	89 03		 mov	 DWORD PTR [ebx], eax

; 638  : 
; 639  : 	if ( op2 > 183 )

  000b4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b6	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  000bb	7e 0c		 jle	 SHORT $LN9@GetGetFull

; 640  : 	{
; 641  : 		if ( isRequireClass == 0 )

  000bd	85 d2		 test	 edx, edx
  000bf	75 08		 jne	 SHORT $LN9@GetGetFull

; 642  : 		{
; 643  : 			op2 = -1;

  000c1	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 644  : 		}
; 645  : 	}
; 646  : 
; 647  : 	if ( op2 != -1 )

  000c7	eb 0c		 jmp	 SHORT $LN10@GetGetFull
$LN9@GetGetFull:
  000c9	83 f8 ff	 cmp	 eax, -1
  000cc	74 07		 je	 SHORT $LN10@GetGetFull

; 648  : 	{
; 649  : 		op2 += 0xA0;

  000ce	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  000d3	89 01		 mov	 DWORD PTR [ecx], eax
$LN10@GetGetFull:

; 650  : 	}
; 651  : 
; 652  : 	op3=this->m_SetItemOptionInfo[optionindex].SetFullOtionTable[2];

  000d5	8b 4d 14	 mov	 ecx, DWORD PTR _op3$[ebp]
  000d8	8b 86 84 81 02
	00		 mov	 eax, DWORD PTR [esi+164228]

; 653  : 	opvalue3=this->m_SetItemOptionInfo[optionindex].SetFullOtionTableValue[2];

  000de	8b 7d 28	 mov	 edi, DWORD PTR _opvalue3$[ebp]
  000e1	89 01		 mov	 DWORD PTR [ecx], eax
  000e3	8b 86 98 81 02
	00		 mov	 eax, DWORD PTR [esi+164248]
  000e9	89 07		 mov	 DWORD PTR [edi], eax

; 654  : 
; 655  : 	if ( op3 > 183 )

  000eb	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ed	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  000f2	7e 0c		 jle	 SHORT $LN12@GetGetFull

; 656  : 	{
; 657  : 		if ( isRequireClass == 0 )

  000f4	85 d2		 test	 edx, edx
  000f6	75 08		 jne	 SHORT $LN12@GetGetFull

; 658  : 		{
; 659  : 			op3 = -1;

  000f8	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 660  : 		}
; 661  : 	}
; 662  : 
; 663  : 	if ( op3 != -1 )

  000fe	eb 0c		 jmp	 SHORT $LN13@GetGetFull
$LN12@GetGetFull:
  00100	83 f8 ff	 cmp	 eax, -1
  00103	74 07		 je	 SHORT $LN13@GetGetFull

; 664  : 	{
; 665  : 		op3 += 0xA0;

  00105	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  0010a	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@GetGetFull:

; 666  : 	}
; 667  : 
; 668  : 	op4=this->m_SetItemOptionInfo[optionindex].SetFullOtionTable[3];

  0010c	8b 4d 18	 mov	 ecx, DWORD PTR _op4$[ebp]

; 669  : 	opvalue4=this->m_SetItemOptionInfo[optionindex].SetFullOtionTableValue[3];

  0010f	8b 7d 2c	 mov	 edi, DWORD PTR _opvalue4$[ebp]
  00112	8b 86 88 81 02
	00		 mov	 eax, DWORD PTR [esi+164232]
  00118	89 01		 mov	 DWORD PTR [ecx], eax
  0011a	8b 86 9c 81 02
	00		 mov	 eax, DWORD PTR [esi+164252]
  00120	89 07		 mov	 DWORD PTR [edi], eax

; 670  : 
; 671  : 	if ( op4 > 183 )

  00122	8b 01		 mov	 eax, DWORD PTR [ecx]
  00124	5f		 pop	 edi
  00125	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  0012a	7e 0c		 jle	 SHORT $LN15@GetGetFull

; 672  : 	{
; 673  : 		if ( isRequireClass == 0 )

  0012c	85 d2		 test	 edx, edx
  0012e	75 08		 jne	 SHORT $LN15@GetGetFull

; 674  : 		{
; 675  : 			op4 = -1;

  00130	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 676  : 		}
; 677  : 	}
; 678  : 
; 679  : 	if ( op4 != -1 )

  00136	eb 0c		 jmp	 SHORT $LN16@GetGetFull
$LN15@GetGetFull:
  00138	83 f8 ff	 cmp	 eax, -1
  0013b	74 07		 je	 SHORT $LN16@GetGetFull

; 680  : 	{
; 681  : 		op4 += 0xA0;

  0013d	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  00142	89 01		 mov	 DWORD PTR [ecx], eax
$LN16@GetGetFull:

; 682  : 	}
; 683  : 
; 684  : 	op5=this->m_SetItemOptionInfo[optionindex].SetFullOtionTable[4];

  00144	8b 4d 1c	 mov	 ecx, DWORD PTR _op5$[ebp]
  00147	8b 86 8c 81 02
	00		 mov	 eax, DWORD PTR [esi+164236]
  0014d	89 01		 mov	 DWORD PTR [ecx], eax

; 685  : 	opvalue5=this->m_SetItemOptionInfo[optionindex].SetFullOtionTableValue[4];

  0014f	8b 86 a0 81 02
	00		 mov	 eax, DWORD PTR [esi+164256]
  00155	8b 75 30	 mov	 esi, DWORD PTR _opvalue5$[ebp]
  00158	89 06		 mov	 DWORD PTR [esi], eax

; 686  : 
; 687  : 	if ( op5 > 183 )

  0015a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0015c	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  00161	7e 13		 jle	 SHORT $LN18@GetGetFull

; 688  : 	{
; 689  : 		if ( isRequireClass == 0 )

  00163	85 d2		 test	 edx, edx
  00165	75 0f		 jne	 SHORT $LN18@GetGetFull

; 690  : 		{
; 691  : 			op5 = -1;

  00167	5e		 pop	 esi
  00168	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 698  : 	}
; 699  : 
; 700  : 	return 1;

  0016e	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00171	5b		 pop	 ebx

; 701  : }

  00172	5d		 pop	 ebp
  00173	c2 34 00	 ret	 52			; 00000034H
$LN18@GetGetFull:

; 692  : 		}
; 693  : 	}
; 694  : 
; 695  : 	if ( op5 != -1 )

  00176	83 f8 ff	 cmp	 eax, -1
  00179	74 07		 je	 SHORT $LN19@GetGetFull

; 696  : 	{
; 697  : 		op5 += 0xA0;

  0017b	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  00180	89 01		 mov	 DWORD PTR [ecx], eax
$LN19@GetGetFull:

; 698  : 	}
; 699  : 
; 700  : 	return 1;

  00182	5e		 pop	 esi
  00183	b8 01 00 00 00	 mov	 eax, 1
  00188	5b		 pop	 ebx

; 701  : }

  00189	5d		 pop	 ebp
  0018a	c2 34 00	 ret	 52			; 00000034H
$LN3@GetGetFull:

; 609  : 	{
; 610  : 		LogAdd("GetMaxOptionCount Check error: (itemnum:%d)", optionindex);

  0018d	51		 push	 ecx
  0018e	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@OCFJJDJ@GetMaxOptionCount?5Check?5error?3?5?$CI@
  00193	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00199	83 c4 08	 add	 esp, 8

; 611  : 		return 0;

  0019c	33 c0		 xor	 eax, eax
  0019e	5b		 pop	 ebx

; 701  : }

  0019f	5d		 pop	 ebp
  001a0	c2 34 00	 ret	 52			; 00000034H
?GetGetFullSetOption@CSetItemOption@@QAEHHAAH000000000HH@Z ENDP ; CSetItemOption::GetGetFullSetOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ?GetMaxSetOptionCount@CSetItemOption@@QAEHH@Z
_TEXT	SEGMENT
_optionindex$ = 8					; size = 4
?GetMaxSetOptionCount@CSetItemOption@@QAEHH@Z PROC	; CSetItemOption::GetMaxSetOptionCount, COMDAT
; _this$ = ecx

; 585  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 586  : 	if (optionindex <0 || optionindex > MAX_SETITEM_OPTION-1)

  00003	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  00006	83 f8 4f	 cmp	 eax, 79			; 0000004fH
  00009	77 1b		 ja	 SHORT $LN3@GetMaxSetO

; 590  : 	}
; 591  : 
; 592  : 	if (this->m_SetItemOptionInfo[optionindex].IsLoad == 0)

  0000b	69 c0 a8 01 00
	00		 imul	 eax, eax, 424
  00011	83 bc 08 04 80
	02 00 00	 cmp	 DWORD PTR [eax+ecx+163844], 0
  00019	74 1a		 je	 SHORT $LN6@GetMaxSetO

; 593  : 	{
; 594  : 		return -1;
; 595  : 	}
; 596  : 
; 597  : 	return this->m_SetItemOptionInfo[optionindex].SetOptionCount;

  0001b	8b 84 08 08 81
	02 00		 mov	 eax, DWORD PTR [eax+ecx+164104]

; 598  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN3@GetMaxSetO:

; 587  : 	{
; 588  : 		LogAdd("GetMaxOptionCount Check error: (itemnum:%d)", optionindex);

  00026	50		 push	 eax
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@OCFJJDJ@GetMaxOptionCount?5Check?5error?3?5?$CI@
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00032	83 c4 08	 add	 esp, 8
$LN6@GetMaxSetO:

; 589  : 		return -1;

  00035	83 c8 ff	 or	 eax, -1

; 598  : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?GetMaxSetOptionCount@CSetItemOption@@QAEHH@Z ENDP	; CSetItemOption::GetMaxSetOptionCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ?GetSetOption@CSetItemOption@@QAEHHHAAH000HH@Z
_TEXT	SEGMENT
_optionindex$ = 8					; size = 4
_optablenum$ = 12					; size = 4
_op1$ = 16						; size = 4
_op2$ = 20						; size = 4
_opvalue1$ = 24						; size = 4
_opvalue2$ = 28						; size = 4
_Class$ = 32						; size = 4
_ChangeUp$ = 36						; size = 4
?GetSetOption@CSetItemOption@@QAEHHHAAH000HH@Z PROC	; CSetItemOption::GetSetOption, COMDAT
; _this$ = ecx

; 502  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 503  : 	opvalue1=0;

  00003	8b 45 18	 mov	 eax, DWORD PTR _opvalue1$[ebp]
  00006	56		 push	 esi

; 504  : 	opvalue2=0;
; 505  : 
; 506  : 	if (optionindex <0 || optionindex > MAX_SETITEM_OPTION-1)

  00007	8b 75 08	 mov	 esi, DWORD PTR _optionindex$[ebp]
  0000a	57		 push	 edi
  0000b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00011	8b f9		 mov	 edi, ecx
  00013	8b 45 1c	 mov	 eax, DWORD PTR _opvalue2$[ebp]
  00016	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0001c	83 fe 4f	 cmp	 esi, 79			; 0000004fH
  0001f	0f 87 30 01 00
	00		 ja	 $LN3@GetSetOpti

; 510  : 	}
; 511  : 
; 512  : 	if (this->m_SetItemOptionInfo[optionindex].IsLoad==0)

  00025	69 ce a8 01 00
	00		 imul	 ecx, esi, 424
  0002b	83 bc 39 04 80
	02 00 00	 cmp	 DWORD PTR [ecx+edi+163844], 0
  00033	0f 84 2b 01 00
	00		 je	 $LN18@GetSetOpti

; 513  : 	{
; 514  : 		return 0;
; 515  : 	}
; 516  : 
; 517  : 	if (optablenum >= this->m_SetItemOptionInfo[optionindex].SetOptionCount)

  00039	8b 45 0c	 mov	 eax, DWORD PTR _optablenum$[ebp]
  0003c	3b 84 39 08 81
	02 00		 cmp	 eax, DWORD PTR [ecx+edi+164104]
  00043	0f 8d 1b 01 00
	00		 jge	 $LN18@GetSetOpti

; 518  : 	{
; 519  : 		return 0;
; 520  : 	}
; 521  : 	int isRequireClass;
; 522  : 
; 523  : 	isRequireClass=this->IsRequireClass(optionindex, Class, ChangeUp);

  00049	53		 push	 ebx
  0004a	ff 75 24	 push	 DWORD PTR _ChangeUp$[ebp]
  0004d	8b cf		 mov	 ecx, edi
  0004f	ff 75 20	 push	 DWORD PTR _Class$[ebp]
  00052	56		 push	 esi
  00053	e8 00 00 00 00	 call	 ?IsRequireClass@CSetItemOption@@QAEHHHH@Z ; CSetItemOption::IsRequireClass

; 524  : 
; 525  : 	if (optablenum <OPTION_TABLE_SIZE)

  00058	8b 55 0c	 mov	 edx, DWORD PTR _optablenum$[ebp]
  0005b	8b d8		 mov	 ebx, eax
  0005d	83 fa 06	 cmp	 edx, 6
  00060	0f 8d 8b 00 00
	00		 jge	 $LN6@GetSetOpti

; 526  : 	{
; 527  : 		op1=this->m_SetItemOptionInfo[optionindex].SetOptionTable[optablenum][0];

  00066	6b f6 35	 imul	 esi, esi, 53
  00069	03 f2		 add	 esi, edx
  0006b	8b 55 10	 mov	 edx, DWORD PTR _op1$[ebp]
  0006e	8b 8c f7 0c 81
	02 00		 mov	 ecx, DWORD PTR [edi+esi*8+164108]
  00075	89 0a		 mov	 DWORD PTR [edx], ecx

; 528  : 		opvalue1=this->m_SetItemOptionInfo[optionindex].SetOptionTableValue[optablenum][0];

  00077	8b 4d 18	 mov	 ecx, DWORD PTR _opvalue1$[ebp]
  0007a	8b 84 f7 3c 81
	02 00		 mov	 eax, DWORD PTR [edi+esi*8+164156]
  00081	89 01		 mov	 DWORD PTR [ecx], eax

; 529  : 
; 530  : 		if ( op1 > 183 )

  00083	8b 02		 mov	 eax, DWORD PTR [edx]
  00085	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  0008a	7e 0c		 jle	 SHORT $LN9@GetSetOpti

; 531  : 		{
; 532  : 			if ( isRequireClass == 0 )

  0008c	85 db		 test	 ebx, ebx
  0008e	75 08		 jne	 SHORT $LN9@GetSetOpti

; 533  : 			{
; 534  : 				op1 = -1;

  00090	c7 02 ff ff ff
	ff		 mov	 DWORD PTR [edx], -1

; 535  : 			}
; 536  : 		}
; 537  : 
; 538  : 		if ( op1 != -1 )

  00096	eb 0c		 jmp	 SHORT $LN10@GetSetOpti
$LN9@GetSetOpti:
  00098	83 f8 ff	 cmp	 eax, -1
  0009b	74 07		 je	 SHORT $LN10@GetSetOpti

; 539  : 		{
; 540  : 			op1 += 0xA0;

  0009d	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  000a2	89 02		 mov	 DWORD PTR [edx], eax
$LN10@GetSetOpti:

; 541  : 		}
; 542  : 
; 543  : 		op2=this->m_SetItemOptionInfo[optionindex].SetOptionTable[optablenum][1];

  000a4	8b 4d 14	 mov	 ecx, DWORD PTR _op2$[ebp]
  000a7	8b 84 f7 10 81
	02 00		 mov	 eax, DWORD PTR [edi+esi*8+164112]

; 544  : 		opvalue2=this->m_SetItemOptionInfo[optionindex].SetOptionTableValue[optablenum][1];

  000ae	8b 55 1c	 mov	 edx, DWORD PTR _opvalue2$[ebp]
  000b1	89 01		 mov	 DWORD PTR [ecx], eax
  000b3	8b 84 f7 40 81
	02 00		 mov	 eax, DWORD PTR [edi+esi*8+164160]
  000ba	89 02		 mov	 DWORD PTR [edx], eax

; 545  : 
; 546  : 		if ( op2 > 183 )

  000bc	8b 01		 mov	 eax, DWORD PTR [ecx]
  000be	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  000c3	7e 14		 jle	 SHORT $LN12@GetSetOpti

; 547  : 		{
; 548  : 			if ( isRequireClass == 0 )

  000c5	85 db		 test	 ebx, ebx
  000c7	75 10		 jne	 SHORT $LN12@GetSetOpti

; 578  : 	}
; 579  : 
; 580  : 	return 1;

  000c9	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  000cc	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1
  000d2	5b		 pop	 ebx
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi

; 581  : }

  000d5	5d		 pop	 ebp
  000d6	c2 20 00	 ret	 32			; 00000020H
$LN12@GetSetOpti:

; 549  : 			{
; 550  : 				op2 = -1;
; 551  : 			}
; 552  : 		}
; 553  : 
; 554  : 		if ( op2 != -1 )

  000d9	83 f8 ff	 cmp	 eax, -1
  000dc	74 6b		 je	 SHORT $LN7@GetSetOpti

; 555  : 		{
; 556  : 			op2 += 0xA0;

  000de	5b		 pop	 ebx
  000df	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  000e4	5f		 pop	 edi
  000e5	89 01		 mov	 DWORD PTR [ecx], eax

; 578  : 	}
; 579  : 
; 580  : 	return 1;

  000e7	b8 01 00 00 00	 mov	 eax, 1
  000ec	5e		 pop	 esi

; 581  : }

  000ed	5d		 pop	 ebp
  000ee	c2 20 00	 ret	 32			; 00000020H
$LN6@GetSetOpti:

; 557  : 		}
; 558  : 	}
; 559  : 	else
; 560  : 	{
; 561  : 		op1=this->m_SetItemOptionInfo[optionindex].SetExPOptionTable[optablenum-OPTION_TABLE_SIZE];

  000f1	6b ce 6a	 imul	 ecx, esi, 106
  000f4	03 ca		 add	 ecx, edx
  000f6	8b 55 10	 mov	 edx, DWORD PTR _op1$[ebp]
  000f9	8b 84 8f 54 81
	02 00		 mov	 eax, DWORD PTR [edi+ecx*4+164180]
  00100	89 02		 mov	 DWORD PTR [edx], eax

; 562  : 		opvalue1=this->m_SetItemOptionInfo[optionindex].SetExPOptionTableValue[optablenum-OPTION_TABLE_SIZE];

  00102	8b 84 8f 5c 81
	02 00		 mov	 eax, DWORD PTR [edi+ecx*4+164188]
  00109	8b 4d 18	 mov	 ecx, DWORD PTR _opvalue1$[ebp]
  0010c	89 01		 mov	 DWORD PTR [ecx], eax

; 563  : 
; 564  : 		if ( op1 > 183 )

  0010e	8b 02		 mov	 eax, DWORD PTR [edx]
  00110	3d b7 00 00 00	 cmp	 eax, 183		; 000000b7H
  00115	7e 1d		 jle	 SHORT $LN15@GetSetOpti

; 565  : 		{
; 566  : 			if ( isRequireClass == 0 )

  00117	85 db		 test	 ebx, ebx
  00119	75 19		 jne	 SHORT $LN15@GetSetOpti

; 575  : 		}
; 576  : 
; 577  : 		op2 = -1;

  0011b	8b 45 14	 mov	 eax, DWORD PTR _op2$[ebp]
  0011e	c7 02 ff ff ff
	ff		 mov	 DWORD PTR [edx], -1
  00124	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 578  : 	}
; 579  : 
; 580  : 	return 1;

  0012a	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0012d	5b		 pop	 ebx
  0012e	5f		 pop	 edi
  0012f	5e		 pop	 esi

; 581  : }

  00130	5d		 pop	 ebp
  00131	c2 20 00	 ret	 32			; 00000020H
$LN15@GetSetOpti:

; 567  : 			{
; 568  : 				op1 = -1;
; 569  : 			}
; 570  : 		}
; 571  : 
; 572  : 		if ( op1 != -1 )

  00134	83 f8 ff	 cmp	 eax, -1
  00137	74 07		 je	 SHORT $LN16@GetSetOpti

; 573  : 		{
; 574  : 			op1 += 0xA0;

  00139	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  0013e	89 02		 mov	 DWORD PTR [edx], eax
$LN16@GetSetOpti:

; 575  : 		}
; 576  : 
; 577  : 		op2 = -1;

  00140	8b 45 14	 mov	 eax, DWORD PTR _op2$[ebp]
  00143	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
$LN7@GetSetOpti:

; 578  : 	}
; 579  : 
; 580  : 	return 1;

  00149	5b		 pop	 ebx
  0014a	5f		 pop	 edi
  0014b	b8 01 00 00 00	 mov	 eax, 1
  00150	5e		 pop	 esi

; 581  : }

  00151	5d		 pop	 ebp
  00152	c2 20 00	 ret	 32			; 00000020H
$LN3@GetSetOpti:

; 507  : 	{
; 508  : 		LogAdd("GetSetOption Check error: (itemnum:%d)", optionindex);

  00155	56		 push	 esi
  00156	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DEMKMCF@GetSetOption?5Check?5error?3?5?$CIitemn@
  0015b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00161	83 c4 08	 add	 esp, 8
$LN18@GetSetOpti:

; 509  : 		return 0;

  00164	5f		 pop	 edi
  00165	33 c0		 xor	 eax, eax
  00167	5e		 pop	 esi

; 581  : }

  00168	5d		 pop	 ebp
  00169	c2 20 00	 ret	 32			; 00000020H
?GetSetOption@CSetItemOption@@QAEHHHAAH000HH@Z ENDP	; CSetItemOption::GetSetOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ?GetSetOptionName@CSetItemOption@@QAEPADH@Z
_TEXT	SEGMENT
_optionindex$ = 8					; size = 4
?GetSetOptionName@CSetItemOption@@QAEPADH@Z PROC	; CSetItemOption::GetSetOptionName, COMDAT
; _this$ = ecx

; 451  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 452  : 	if ( optionindex < 0 || optionindex > MAX_SETITEM_OPTION-1)

  00003	8b 45 08	 mov	 eax, DWORD PTR _optionindex$[ebp]
  00006	83 f8 4f	 cmp	 eax, 79			; 0000004fH
  00009	77 1a		 ja	 SHORT $LN3@GetSetOpti

; 456  : 	}
; 457  : 	if (this->m_SetItemOptionInfo[optionindex].IsLoad   ==0)

  0000b	69 c0 a8 01 00
	00		 imul	 eax, eax, 424
  00011	03 c1		 add	 eax, ecx
  00013	83 b8 04 80 02
	00 00		 cmp	 DWORD PTR [eax+163844], 0
  0001a	74 18		 je	 SHORT $LN6@GetSetOpti

; 458  : 	{
; 459  : 		return "";
; 460  : 	}
; 461  : 	return &this->m_SetItemOptionInfo[optionindex].Name[0];

  0001c	05 08 80 02 00	 add	 eax, 163848		; 00028008H

; 462  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
$LN3@GetSetOpti:

; 453  : 	{
; 454  : 		LogAdd("GetSetOptionName Check error: (itemnum:%d)", optionindex);

  00025	50		 push	 eax
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@LOANDNBH@GetSetOptionName?5Check?5error?3?5?$CIi@
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00031	83 c4 08	 add	 esp, 8
$LN6@GetSetOpti:

; 455  : 		return "";

  00034	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@

; 462  : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?GetSetOptionName@CSetItemOption@@QAEPADH@Z ENDP	; CSetItemOption::GetSetOptionName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ?GetSetOptionName@CSetItemOption@@QAEPADHH@Z
_TEXT	SEGMENT
_itemnum$ = 8						; size = 4
_settype$ = 12						; size = 4
?GetSetOptionName@CSetItemOption@@QAEPADHH@Z PROC	; CSetItemOption::GetSetOptionName, COMDAT
; _this$ = ecx

; 470  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 471  : 	int optionindex;
; 472  : 
; 473  : 	if (itemnum<0 || itemnum > MAX_ITEMS-1)

  00003	8b 55 08	 mov	 edx, DWORD PTR _itemnum$[ebp]
  00006	81 fa ff 1f 00
	00		 cmp	 edx, 8191		; 00001fffH
  0000c	77 38		 ja	 SHORT $LN3@GetSetOpti

; 477  : 	}
; 478  : 
; 479  : 	if (this->m_SetItemTypeInfo[itemnum].IsLoad == FALSE)

  0000e	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]
  00011	83 7c 81 04 00	 cmp	 DWORD PTR [ecx+eax*4+4], 0
  00016	74 3d		 je	 SHORT $LN9@GetSetOpti

; 480  : 	{
; 481  : 		return "";
; 482  : 	}
; 483  : 	
; 484  : 	optionindex= this->m_SetItemTypeInfo[itemnum].OptionIndex[settype-1];

  00018	8b 45 0c	 mov	 eax, DWORD PTR _settype$[ebp]
  0001b	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  0001e	03 c2		 add	 eax, edx
  00020	8b 44 81 04	 mov	 eax, DWORD PTR [ecx+eax*4+4]

; 485  : 	
; 486  : 	if (optionindex<0 || optionindex > MAX_SETITEM_OPTION-1)

  00024	83 f8 4f	 cmp	 eax, 79			; 0000004fH
  00027	77 1a		 ja	 SHORT $LN6@GetSetOpti

; 490  : 	}
; 491  : 
; 492  : 	if (this->m_SetItemOptionInfo[optionindex].IsLoad  == 0)

  00029	69 c0 a8 01 00
	00		 imul	 eax, eax, 424
  0002f	03 c1		 add	 eax, ecx
  00031	83 b8 04 80 02
	00 00		 cmp	 DWORD PTR [eax+163844], 0
  00038	74 1b		 je	 SHORT $LN9@GetSetOpti

; 493  : 	{
; 494  : 		return "";
; 495  : 	}
; 496  : 
; 497  : 	return &this->m_SetItemOptionInfo[optionindex].Name[0];

  0003a	05 08 80 02 00	 add	 eax, 163848		; 00028008H

; 498  : }

  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
$LN6@GetSetOpti:

; 487  : 	{	
; 488  : 		LogAdd("GetSetOptionName Check error: (itemnum:%d)", optionindex);

  00043	50		 push	 eax

; 489  : 		return "";

  00044	eb 01		 jmp	 SHORT $LN10@GetSetOpti
$LN3@GetSetOpti:

; 474  : 	{
; 475  : 		LogAdd("GetSetOptionName Check error: (itemnum:%d)", itemnum);

  00046	52		 push	 edx
$LN10@GetSetOpti:
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@LOANDNBH@GetSetOptionName?5Check?5error?3?5?$CIi@
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00052	83 c4 08	 add	 esp, 8
$LN9@GetSetOpti:

; 476  : 		return "";

  00055	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@

; 498  : }

  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
?GetSetOptionName@CSetItemOption@@QAEPADHH@Z ENDP	; CSetItemOption::GetSetOptionName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ?GetOptionTableIndex@CSetItemOption@@QAEHHH@Z
_TEXT	SEGMENT
_itemnum$ = 8						; size = 4
_setoption$ = 12					; size = 4
?GetOptionTableIndex@CSetItemOption@@QAEHHH@Z PROC	; CSetItemOption::GetOptionTableIndex, COMDAT
; _this$ = ecx

; 427  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 428  : 	if (itemnum<0 || itemnum > MAX_ITEMS-1)

  00003	8b 55 08	 mov	 edx, DWORD PTR _itemnum$[ebp]
  00006	81 fa ff 1f 00
	00		 cmp	 edx, 8191		; 00001fffH
  0000c	77 3d		 ja	 SHORT $LN3@GetOptionT

; 432  : 	}
; 433  : 
; 434  : 	if (setoption != 1 && setoption != 2)

  0000e	56		 push	 esi
  0000f	8b 75 0c	 mov	 esi, DWORD PTR _setoption$[ebp]
  00012	83 fe 01	 cmp	 esi, 1
  00015	74 1c		 je	 SHORT $LN4@GetOptionT
  00017	83 fe 02	 cmp	 esi, 2
  0001a	74 17		 je	 SHORT $LN4@GetOptionT

; 435  : 	{
; 436  : 		LogAdd("GetOptionTableIndex setoption Check error: (itemnum:%d)", itemnum);

  0001c	52		 push	 edx
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@POCMEGLP@GetOptionTableIndex?5setoption?5Ch@
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00028	83 c4 08	 add	 esp, 8
$LN8@GetOptionT:

; 437  : 		return -1;

  0002b	83 c8 ff	 or	 eax, -1
  0002e	5e		 pop	 esi

; 446  : }

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
$LN4@GetOptionT:

; 438  : 	}
; 439  : 
; 440  : 	if (this->m_SetItemTypeInfo[itemnum].IsLoad == FALSE)

  00033	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]
  00036	83 7c 81 04 00	 cmp	 DWORD PTR [ecx+eax*4+4], 0
  0003b	74 ee		 je	 SHORT $LN8@GetOptionT

; 441  : 	{
; 442  : 		return -1;
; 443  : 	}
; 444  : 
; 445  : 	return this->m_SetItemTypeInfo[itemnum].OptionIndex[setoption-1];

  0003d	8d 04 96	 lea	 eax, DWORD PTR [esi+edx*4]
  00040	03 c2		 add	 eax, edx
  00042	5e		 pop	 esi
  00043	8b 44 81 04	 mov	 eax, DWORD PTR [ecx+eax*4+4]

; 446  : }

  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
$LN3@GetOptionT:

; 429  : 	{
; 430  : 		LogAdd("GetOptionTableIndex Check error: (itemnum:%d)", itemnum);

  0004b	52		 push	 edx
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@JHBADDNF@GetOptionTableIndex?5Check?5error?3@
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00057	83 c4 08	 add	 esp, 8

; 431  : 		return -1;

  0005a	83 c8 ff	 or	 eax, -1

; 446  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
?GetOptionTableIndex@CSetItemOption@@QAEHHH@Z ENDP	; CSetItemOption::GetOptionTableIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ?IsSetItem@CSetItemOption@@QAEHH@Z
_TEXT	SEGMENT
_itemnum$ = 8						; size = 4
?IsSetItem@CSetItemOption@@QAEHH@Z PROC			; CSetItemOption::IsSetItem, COMDAT
; _this$ = ecx

; 415  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 416  : 	if (itemnum<0 || itemnum > MAX_ITEMS-1)

  00003	8b 45 08	 mov	 eax, DWORD PTR _itemnum$[ebp]
  00006	3d ff 1f 00 00	 cmp	 eax, 8191		; 00001fffH
  0000b	77 0b		 ja	 SHORT $LN3@IsSetItem

; 420  : 	}
; 421  : 	return this->m_SetItemTypeInfo[itemnum].IsLoad ;

  0000d	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00010	8b 44 81 04	 mov	 eax, DWORD PTR [ecx+eax*4+4]

; 422  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@IsSetItem:

; 417  : 	{
; 418  : 		LogAdd("IsSetItem Check error: (itemnum:%d)", itemnum);

  00018	50		 push	 eax
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FIOMFOEB@IsSetItem?5Check?5error?3?5?$CIitemnum?3@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00024	83 c4 08	 add	 esp, 8

; 419  : 		return 0;

  00027	33 c0		 xor	 eax, eax

; 422  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?IsSetItem@CSetItemOption@@QAEHH@Z ENDP			; CSetItemOption::IsSetItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ?LoadOptionInfo@CSetItemOption@@QAEHPAD@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_filename$ = 8						; size = 4
?LoadOptionInfo@CSetItemOption@@QAEHPAD@Z PROC		; CSetItemOption::LoadOptionInfo, COMDAT
; _this$ = ecx

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 97   : 	int i;
; 98   : 	int Token;
; 99   : 	
; 100  : 	SMDFile=fopen(filename, "r");

  00005	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0000a	ff 75 08	 push	 DWORD PTR _filename$[ebp]
  0000d	8b d9		 mov	 ebx, ecx
  0000f	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00012	e8 00 00 00 00	 call	 _fopen
  00017	83 c4 08	 add	 esp, 8
  0001a	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 101  : 	if (SMDFile == NULL )

  0001f	85 c0		 test	 eax, eax
  00021	75 07		 jne	 SHORT $LN10@LoadOption
  00023	5b		 pop	 ebx

; 224  : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN10@LoadOption:
  0002a	56		 push	 esi
  0002b	57		 push	 edi

; 102  : 	{
; 103  : 		return 0;
; 104  : 	}
; 105  : 	memset(&this->m_SetItemOptionInfo, 0, sizeof(this->m_SetItemOptionInfo));

  0002c	68 80 84 00 00	 push	 33920			; 00008480H
  00031	8d 83 04 80 02
	00		 lea	 eax, DWORD PTR [ebx+163844]
  00037	6a 00		 push	 0
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _memset
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	8d b3 6c 81 02
	00		 lea	 esi, DWORD PTR [ebx+164204]
  00048	bf 50 00 00 00	 mov	 edi, 80			; 00000050H
  0004d	0f 1f 00	 npad	 3
$LL4@LoadOption:

; 106  : 
; 107  : 	for ( i=0;i<MAX_SETITEM_OPTION;i++)
; 108  : 	{
; 109  : 		memset(&this->m_SetItemOptionInfo[i].SetOptionTable[0], -1, sizeof(this->m_SetItemOptionInfo[0].SetOptionTable) );

  00050	6a 30		 push	 48			; 00000030H
  00052	8d 46 a0	 lea	 eax, DWORD PTR [esi-96]
  00055	6a ff		 push	 -1
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _memset

; 110  : 		memset(&this->m_SetItemOptionInfo[i].SetExPOptionTable, -1, sizeof(this->m_SetItemOptionInfo[0].SetExPOptionTable) );
; 111  : 		memset(&this->m_SetItemOptionInfo[i].SetFullOtionTable[0], -1, sizeof(this->m_SetItemOptionInfo[0].SetFullOtionTable) );

  0005d	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  00064	8d b6 a8 01 00
	00		 lea	 esi, DWORD PTR [esi+424]
  0006a	c7 86 58 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR [esi-424], -1
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
  00077	c7 86 5c fe ff
	ff ff ff ff ff	 mov	 DWORD PTR [esi-420], -1
  00081	0f 11 86 68 fe
	ff ff		 movups	 XMMWORD PTR [esi-408], xmm0
  00088	c7 86 78 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR [esi-392], -1
  00092	83 ef 01	 sub	 edi, 1
  00095	75 b9		 jne	 SHORT $LL4@LoadOption
$LL5@LoadOption:

; 112  : 	}
; 113  : 
; 114  : 	while ( true )
; 115  : 	{
; 116  : 		Token=GetToken();

  00097	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 117  : 		int number=TokenNumber;

  0009c	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA

; 118  : 		
; 119  : 		if (Token==0 && strcmp("end", &TokenString[0]) == 0)

  000a4	85 c0		 test	 eax, eax
  000a6	75 37		 jne	 SHORT $LN11@LoadOption
  000a8	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  000ad	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL66@LoadOption:
  000b2	8a 10		 mov	 dl, BYTE PTR [eax]
  000b4	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000b6	75 1a		 jne	 SHORT $LN49@LoadOption
  000b8	84 d2		 test	 dl, dl
  000ba	74 12		 je	 SHORT $LN50@LoadOption
  000bc	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000bf	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000c2	75 0e		 jne	 SHORT $LN49@LoadOption
  000c4	83 c0 02	 add	 eax, 2
  000c7	83 c1 02	 add	 ecx, 2
  000ca	84 d2		 test	 dl, dl
  000cc	75 e4		 jne	 SHORT $LL66@LoadOption
$LN50@LoadOption:
  000ce	33 c0		 xor	 eax, eax
  000d0	eb 05		 jmp	 SHORT $LN51@LoadOption
$LN49@LoadOption:
  000d2	1b c0		 sbb	 eax, eax
  000d4	83 c8 01	 or	 eax, 1
$LN51@LoadOption:
  000d7	85 c0		 test	 eax, eax
  000d9	0f 84 4c 02 00
	00		 je	 $LN24@LoadOption
$LN11@LoadOption:

; 120  : 		{
; 121  : 			break;
; 122  : 		}
; 123  : 		else
; 124  : 		{
; 125  : 			LPSETITEM_OPTIONINFO p;
; 126  : 			p=&this->m_SetItemOptionInfo[number];

  000df	69 fe a8 01 00
	00		 imul	 edi, esi, 424
  000e5	81 c7 04 80 02
	00		 add	 edi, 163844		; 00028004H
  000eb	03 fb		 add	 edi, ebx

; 127  : 
; 128  : 			Token=GetToken();

  000ed	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 129  : 			strcpy(&p->Name[0], &TokenString[0]);

  000f2	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  000f7	8b d7		 mov	 edx, edi
  000f9	2b d1		 sub	 edx, ecx
  000fb	0f 1f 44 00 00	 npad	 5
$LL67@LoadOption:
  00100	8a 01		 mov	 al, BYTE PTR [ecx]
  00102	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00105	88 44 0a 03	 mov	 BYTE PTR [edx+ecx+3], al
  00109	84 c0		 test	 al, al
  0010b	75 f3		 jne	 SHORT $LL67@LoadOption

; 130  : 
; 131  : 			for (i=0;i<OPTION_TABLE_SIZE;i++)

  0010d	8d b7 08 01 00
	00		 lea	 esi, DWORD PTR [edi+264]
  00113	bb 06 00 00 00	 mov	 ebx, 6
$LL68@LoadOption:

; 132  : 			{
; 133  : 				Token=GetToken();

  00118	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 134  : 				p->SetOptionTable[i][0] = TokenNumber;

  0011d	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00125	89 06		 mov	 DWORD PTR [esi], eax

; 135  : 				Token=GetToken();

  00127	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 136  : 				p->SetOptionTableValue[i][0] =TokenNumber;

  0012c	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00134	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 137  : 
; 138  : 				Token=GetToken();

  00137	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 139  : 				p->SetOptionTable[i][1] = TokenNumber;

  0013c	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00144	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 140  : 				Token=GetToken();

  00147	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 141  : 				p->SetOptionTableValue[i][1] =TokenNumber;
; 142  : 
; 143  : 				if ( (p->SetOptionTable[i][0] != -1) || (p->SetOptionTable[i][1] != -1) )

  0014c	83 3e ff	 cmp	 DWORD PTR [esi], -1
  0014f	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00157	89 46 34	 mov	 DWORD PTR [esi+52], eax
  0015a	75 06		 jne	 SHORT $LN14@LoadOption
  0015c	83 7e 04 ff	 cmp	 DWORD PTR [esi+4], -1
  00160	74 06		 je	 SHORT $LN7@LoadOption
$LN14@LoadOption:

; 144  : 				{
; 145  : 					p->SetOptionCount++;

  00162	ff 87 04 01 00
	00		 inc	 DWORD PTR [edi+260]
$LN7@LoadOption:

; 130  : 
; 131  : 			for (i=0;i<OPTION_TABLE_SIZE;i++)

  00168	83 c6 08	 add	 esi, 8
  0016b	83 eb 01	 sub	 ebx, 1
  0016e	75 a8		 jne	 SHORT $LL68@LoadOption

; 146  : 				}
; 147  : 			}
; 148  : 			
; 149  : 			// Special Set Item Options
; 150  : 			Token=GetToken();

  00170	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 151  : 			p->SetExPOptionTable[0]  = TokenNumber;

  00175	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0017d	89 87 68 01 00
	00		 mov	 DWORD PTR [edi+360], eax

; 152  : 			Token=GetToken();

  00183	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 153  : 			p->SetExPOptionTableValue[0] = TokenNumber;
; 154  : 
; 155  : 			if ( p->SetExPOptionTable[0] != -1)

  00188	83 bf 68 01 00
	00 ff		 cmp	 DWORD PTR [edi+360], -1
  0018f	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00197	89 87 70 01 00
	00		 mov	 DWORD PTR [edi+368], eax
  0019d	74 06		 je	 SHORT $LN15@LoadOption

; 156  : 			{
; 157  : 				p->SetOptionCount ++;

  0019f	ff 87 04 01 00
	00		 inc	 DWORD PTR [edi+260]
$LN15@LoadOption:

; 158  : 			}
; 159  : 
; 160  : 			Token=GetToken();

  001a5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 161  : 			p->SetExPOptionTable[1]  = TokenNumber;

  001aa	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001b2	89 87 6c 01 00
	00		 mov	 DWORD PTR [edi+364], eax

; 162  : 			Token=GetToken();

  001b8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 163  : 			p->SetExPOptionTableValue[1] = TokenNumber;
; 164  : 
; 165  : 			if ( p->SetExPOptionTable[1] != -1)

  001bd	83 bf 6c 01 00
	00 ff		 cmp	 DWORD PTR [edi+364], -1
  001c4	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001cc	89 87 74 01 00
	00		 mov	 DWORD PTR [edi+372], eax
  001d2	74 06		 je	 SHORT $LN16@LoadOption

; 166  : 			{
; 167  : 				p->SetOptionCount ++;

  001d4	ff 87 04 01 00
	00		 inc	 DWORD PTR [edi+260]
$LN16@LoadOption:

; 168  : 			}
; 169  : 			
; 170  : 			// Full Type Set Item
; 171  : 			Token=GetToken();

  001da	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 172  : 			p->SetFullOtionTable[0]=TokenNumber;

  001df	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001e7	89 87 78 01 00
	00		 mov	 DWORD PTR [edi+376], eax

; 173  : 			Token=GetToken();

  001ed	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 174  : 			p->SetFullOtionTableValue[0]=TokenNumber;

  001f2	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001fa	89 87 8c 01 00
	00		 mov	 DWORD PTR [edi+396], eax

; 175  : 
; 176  : 			Token=GetToken();

  00200	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 177  : 			p->SetFullOtionTable[1]=TokenNumber;

  00205	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0020d	89 87 7c 01 00
	00		 mov	 DWORD PTR [edi+380], eax

; 178  : 			Token=GetToken();

  00213	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 179  : 			p->SetFullOtionTableValue[1]=TokenNumber;

  00218	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00220	89 87 90 01 00
	00		 mov	 DWORD PTR [edi+400], eax

; 180  : 
; 181  : 			Token=GetToken();

  00226	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 182  : 			p->SetFullOtionTable[2]=TokenNumber;

  0022b	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00233	89 87 80 01 00
	00		 mov	 DWORD PTR [edi+384], eax

; 183  : 			Token=GetToken();

  00239	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 184  : 			p->SetFullOtionTableValue[2]=TokenNumber;

  0023e	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00246	89 87 94 01 00
	00		 mov	 DWORD PTR [edi+404], eax

; 185  : 
; 186  : 			Token=GetToken();

  0024c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 187  : 			p->SetFullOtionTable[3]=TokenNumber;

  00251	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00259	89 87 84 01 00
	00		 mov	 DWORD PTR [edi+388], eax

; 188  : 			Token=GetToken();

  0025f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 189  : 			p->SetFullOtionTableValue[3]=TokenNumber;

  00264	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0026c	89 87 98 01 00
	00		 mov	 DWORD PTR [edi+408], eax

; 190  : 
; 191  : 			Token=GetToken();

  00272	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 192  : 			p->SetFullOtionTable[4]=TokenNumber;

  00277	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0027f	89 87 88 01 00
	00		 mov	 DWORD PTR [edi+392], eax

; 193  : 			Token=GetToken();

  00285	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 194  : 			p->SetFullOtionTableValue[4]=TokenNumber;

  0028a	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00292	89 87 9c 01 00
	00		 mov	 DWORD PTR [edi+412], eax

; 195  : 
; 196  : 			// Save Character Class Disponibility
; 197  : 			Token=GetToken();

  00298	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 198  : 			p->RequireClass[CLASS_WIZARD]=TokenNumber;

  0029d	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  002a5	88 87 a0 01 00
	00		 mov	 BYTE PTR [edi+416], al

; 199  : 
; 200  : 			Token=GetToken();

  002ab	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 201  : 			p->RequireClass[CLASS_KNIGHT]=TokenNumber;

  002b0	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  002b8	88 87 a1 01 00
	00		 mov	 BYTE PTR [edi+417], al

; 202  : 
; 203  : 			Token=GetToken();

  002be	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 204  : 			p->RequireClass[CLASS_ELF]=TokenNumber;

  002c3	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  002cb	88 87 a2 01 00
	00		 mov	 BYTE PTR [edi+418], al

; 205  : 
; 206  : 			Token=GetToken();

  002d1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 207  : 			p->RequireClass[CLASS_MAGUMSA]=TokenNumber;

  002d6	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  002de	88 87 a3 01 00
	00		 mov	 BYTE PTR [edi+419], al

; 208  : 
; 209  : 			Token=GetToken();

  002e4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 210  : 			p->RequireClass[CLASS_DARKLORD]=TokenNumber;

  002e9	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  002f1	88 87 a4 01 00
	00		 mov	 BYTE PTR [edi+420], al

; 211  : 
; 212  : 			Token=GetToken();

  002f7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 213  : 			p->RequireClass[CLASS_SUMMONER]=TokenNumber;

  002fc	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00304	88 87 a5 01 00
	00		 mov	 BYTE PTR [edi+421], al

; 214  : 
; 215  : 			Token=GetToken();

  0030a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 216  : 			p->RequireClass[CLASS_FIGHTER]=TokenNumber;

  0030f	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 217  : 			
; 218  : 			// Active SetItem
; 219  : 			p->IsLoad=TRUE;			
; 220  : 		}
; 221  : 	}

  00317	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  0031a	88 87 a6 01 00
	00		 mov	 BYTE PTR [edi+422], al
  00320	c7 07 01 00 00
	00		 mov	 DWORD PTR [edi], 1
  00326	e9 6c fd ff ff	 jmp	 $LL5@LoadOption
$LN24@LoadOption:
  0032b	5f		 pop	 edi
  0032c	5e		 pop	 esi

; 222  : 
; 223  : 	return 1;

  0032d	b8 01 00 00 00	 mov	 eax, 1
  00332	5b		 pop	 ebx

; 224  : }

  00333	8b e5		 mov	 esp, ebp
  00335	5d		 pop	 ebp
  00336	c2 04 00	 ret	 4
?LoadOptionInfo@CSetItemOption@@QAEHPAD@Z ENDP		; CSetItemOption::LoadOptionInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -156					; size = 4
tv668 = -152						; size = 4
_WzMemScript$ = -148					; size = 132
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_Buffer$ = 8						; size = 4
_iSize$ = 12						; size = 4
?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z PROC		; CSetItemOption::LoadOptionInfo, COMDAT
; _this$ = ecx

; 292  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f9		 mov	 edi, ecx
  0002f	89 bd 64 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00035	8b 75 08	 mov	 esi, DWORD PTR _Buffer$[ebp]

; 293  : 	CWzMemScript WzMemScript;

  00038	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0CWzMemScript@@QAE@XZ	; CWzMemScript::CWzMemScript

; 294  : 	int i;
; 295  : 	int Token;
; 296  : 	
; 297  : 	WzMemScript.SetBuffer(Buffer, iSize);

  00043	ff 75 0c	 push	 DWORD PTR _iSize$[ebp]
  00046	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00053	56		 push	 esi
  00054	e8 00 00 00 00	 call	 ?SetBuffer@CWzMemScript@@QAEHPADH@Z ; CWzMemScript::SetBuffer

; 298  : 
; 299  : 	memset(&this->m_SetItemOptionInfo, 0, sizeof(this->m_SetItemOptionInfo));

  00059	68 80 84 00 00	 push	 33920			; 00008480H
  0005e	8d 87 04 80 02
	00		 lea	 eax, DWORD PTR [edi+163844]
  00064	6a 00		 push	 0
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _memset
  0006c	8d b7 6c 81 02
	00		 lea	 esi, DWORD PTR [edi+164204]
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
  00075	bf 50 00 00 00	 mov	 edi, 80			; 00000050H
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL4@LoadOption:

; 300  : 
; 301  : 	for ( i=0;i<MAX_SETITEM_OPTION;i++)
; 302  : 	{
; 303  : 		memset(&this->m_SetItemOptionInfo[i].SetOptionTable[0], -1, sizeof(this->m_SetItemOptionInfo[0].SetOptionTable) );

  00080	6a 30		 push	 48			; 00000030H
  00082	8d 46 a0	 lea	 eax, DWORD PTR [esi-96]
  00085	6a ff		 push	 -1
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _memset

; 304  : 		memset(&this->m_SetItemOptionInfo[i].SetExPOptionTable, -1, sizeof(this->m_SetItemOptionInfo[0].SetExPOptionTable) );
; 305  : 		memset(&this->m_SetItemOptionInfo[i].SetFullOtionTable[0], -1, sizeof(this->m_SetItemOptionInfo[0].SetFullOtionTable) );

  0008d	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  00094	8d b6 a8 01 00
	00		 lea	 esi, DWORD PTR [esi+424]
  0009a	c7 86 58 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR [esi-424], -1
  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a7	c7 86 5c fe ff
	ff ff ff ff ff	 mov	 DWORD PTR [esi-420], -1
  000b1	0f 11 86 68 fe
	ff ff		 movups	 XMMWORD PTR [esi-408], xmm0
  000b8	c7 86 78 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR [esi-392], -1
  000c2	83 ef 01	 sub	 edi, 1
  000c5	75 b9		 jne	 SHORT $LL4@LoadOption
  000c7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL5@LoadOption:

; 306  : 	}
; 307  : 
; 308  : 	while ( true )
; 309  : 	{
; 310  : 		Token=WzMemScript.GetToken();

  000d0	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000d6	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 311  : 		int number=WzMemScript.GetNumber();

  000db	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000e1	8b f0		 mov	 esi, eax
  000e3	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  000e8	8b f8		 mov	 edi, eax

; 312  : 		
; 313  : 		if (Token==0 && strcmp("end", WzMemScript.GetString()) == 0)

  000ea	85 f6		 test	 esi, esi
  000ec	75 3f		 jne	 SHORT $LN10@LoadOption
  000ee	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000f4	e8 00 00 00 00	 call	 ?GetString@CWzMemScript@@QAEPADXZ ; CWzMemScript::GetString
  000f9	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  000fe	66 90		 npad	 2
$LL48@LoadOption:
  00100	8a 11		 mov	 dl, BYTE PTR [ecx]
  00102	3a 10		 cmp	 dl, BYTE PTR [eax]
  00104	75 1a		 jne	 SHORT $LN49@LoadOption
  00106	84 d2		 test	 dl, dl
  00108	74 12		 je	 SHORT $LN50@LoadOption
  0010a	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0010d	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00110	75 0e		 jne	 SHORT $LN49@LoadOption
  00112	83 c1 02	 add	 ecx, 2
  00115	83 c0 02	 add	 eax, 2
  00118	84 d2		 test	 dl, dl
  0011a	75 e4		 jne	 SHORT $LL48@LoadOption
$LN50@LoadOption:
  0011c	33 c0		 xor	 eax, eax
  0011e	eb 05		 jmp	 SHORT $LN51@LoadOption
$LN49@LoadOption:
  00120	1b c0		 sbb	 eax, eax
  00122	83 c8 01	 or	 eax, 1
$LN51@LoadOption:
  00125	85 c0		 test	 eax, eax
  00127	0f 84 10 03 00
	00		 je	 $LN24@LoadOption
$LN10@LoadOption:

; 314  : 		{
; 315  : 			break;
; 316  : 		}
; 317  : 		else
; 318  : 		{
; 319  : 			LPSETITEM_OPTIONINFO p;
; 320  : 			p=&this->m_SetItemOptionInfo[number];

  0012d	69 c7 a8 01 00
	00		 imul	 eax, edi, 424

; 321  : 
; 322  : 			Token=WzMemScript.GetToken();

  00133	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00139	8b bd 64 ff ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  0013f	81 c7 04 80 02
	00		 add	 edi, 163844		; 00028004H
  00145	03 f8		 add	 edi, eax
  00147	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 323  : 			strcpy(&p->Name[0], WzMemScript.GetString());

  0014c	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00152	e8 00 00 00 00	 call	 ?GetString@CWzMemScript@@QAEPADXZ ; CWzMemScript::GetString
  00157	8b d7		 mov	 edx, edi
  00159	2b d0		 sub	 edx, eax
  0015b	83 c2 04	 add	 edx, 4
  0015e	66 90		 npad	 2
$LL17@LoadOption:
  00160	8a 08		 mov	 cl, BYTE PTR [eax]
  00162	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00165	88 4c 02 ff	 mov	 BYTE PTR [edx+eax-1], cl
  00169	84 c9		 test	 cl, cl
  0016b	75 f3		 jne	 SHORT $LL17@LoadOption

; 324  : 
; 325  : 			for (i=0;i<OPTION_TABLE_SIZE;i++)

  0016d	8d b7 08 01 00
	00		 lea	 esi, DWORD PTR [edi+264]
  00173	c7 85 68 ff ff
	ff 06 00 00 00	 mov	 DWORD PTR tv668[ebp], 6
  0017d	0f 1f 00	 npad	 3
$LL9@LoadOption:

; 326  : 			{
; 327  : 				Token=WzMemScript.GetToken();

  00180	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00186	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 328  : 				p->SetOptionTable[i][0] = WzMemScript.GetNumber();

  0018b	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00191	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 329  : 				Token=WzMemScript.GetToken();

  00196	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0019c	89 06		 mov	 DWORD PTR [esi], eax
  0019e	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 330  : 				p->SetOptionTableValue[i][0] =WzMemScript.GetNumber();

  001a3	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001a9	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 331  : 
; 332  : 				Token=WzMemScript.GetToken();

  001ae	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001b4	89 46 30	 mov	 DWORD PTR [esi+48], eax
  001b7	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 333  : 				p->SetOptionTable[i][1] = WzMemScript.GetNumber();

  001bc	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001c2	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 334  : 				Token=WzMemScript.GetToken();

  001c7	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001cd	89 46 04	 mov	 DWORD PTR [esi+4], eax
  001d0	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 335  : 				p->SetOptionTableValue[i][1] =WzMemScript.GetNumber();

  001d5	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001db	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 336  : 
; 337  : 				if ( (p->SetOptionTable[i][0] != -1) || (p->SetOptionTable[i][1] != -1) )

  001e0	83 3e ff	 cmp	 DWORD PTR [esi], -1
  001e3	89 46 34	 mov	 DWORD PTR [esi+52], eax
  001e6	75 06		 jne	 SHORT $LN13@LoadOption
  001e8	83 7e 04 ff	 cmp	 DWORD PTR [esi+4], -1
  001ec	74 06		 je	 SHORT $LN7@LoadOption
$LN13@LoadOption:

; 338  : 				{
; 339  : 					p->SetOptionCount++;

  001ee	ff 87 04 01 00
	00		 inc	 DWORD PTR [edi+260]
$LN7@LoadOption:

; 324  : 
; 325  : 			for (i=0;i<OPTION_TABLE_SIZE;i++)

  001f4	83 c6 08	 add	 esi, 8
  001f7	83 ad 68 ff ff
	ff 01		 sub	 DWORD PTR tv668[ebp], 1
  001fe	75 80		 jne	 SHORT $LL9@LoadOption

; 340  : 				}
; 341  : 			}
; 342  : 			
; 343  : 			// Special Set Item Options
; 344  : 			Token=WzMemScript.GetToken();

  00200	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00206	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 345  : 			p->SetExPOptionTable[0]  = WzMemScript.GetNumber();

  0020b	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00211	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 346  : 			Token=WzMemScript.GetToken();

  00216	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0021c	89 87 68 01 00
	00		 mov	 DWORD PTR [edi+360], eax
  00222	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 347  : 			p->SetExPOptionTableValue[0] = WzMemScript.GetNumber();

  00227	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0022d	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 348  : 
; 349  : 			if ( p->SetExPOptionTable[0] != -1)

  00232	83 bf 68 01 00
	00 ff		 cmp	 DWORD PTR [edi+360], -1
  00239	89 87 70 01 00
	00		 mov	 DWORD PTR [edi+368], eax
  0023f	74 06		 je	 SHORT $LN14@LoadOption

; 350  : 			{
; 351  : 				p->SetOptionCount ++;

  00241	ff 87 04 01 00
	00		 inc	 DWORD PTR [edi+260]
$LN14@LoadOption:

; 352  : 			}
; 353  : 
; 354  : 			Token=WzMemScript.GetToken();

  00247	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0024d	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 355  : 			p->SetExPOptionTable[1]  = WzMemScript.GetNumber();

  00252	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00258	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 356  : 			Token=WzMemScript.GetToken();

  0025d	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00263	89 87 6c 01 00
	00		 mov	 DWORD PTR [edi+364], eax
  00269	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 357  : 			p->SetExPOptionTableValue[1] = WzMemScript.GetNumber();

  0026e	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00274	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 358  : 
; 359  : 			if ( p->SetExPOptionTable[1] != -1)

  00279	83 bf 6c 01 00
	00 ff		 cmp	 DWORD PTR [edi+364], -1
  00280	89 87 74 01 00
	00		 mov	 DWORD PTR [edi+372], eax
  00286	74 06		 je	 SHORT $LN15@LoadOption

; 360  : 			{
; 361  : 				p->SetOptionCount ++;

  00288	ff 87 04 01 00
	00		 inc	 DWORD PTR [edi+260]
$LN15@LoadOption:

; 362  : 			}
; 363  : 			
; 364  : 			// Full Type Set Item
; 365  : 			Token=WzMemScript.GetToken();

  0028e	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00294	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 366  : 			p->SetFullOtionTable[0]=WzMemScript.GetNumber();

  00299	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0029f	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 367  : 			Token=WzMemScript.GetToken();

  002a4	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002aa	89 87 78 01 00
	00		 mov	 DWORD PTR [edi+376], eax
  002b0	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 368  : 			p->SetFullOtionTableValue[0]=WzMemScript.GetNumber();

  002b5	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002bb	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 369  : 
; 370  : 			Token=WzMemScript.GetToken();

  002c0	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002c6	89 87 8c 01 00
	00		 mov	 DWORD PTR [edi+396], eax
  002cc	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 371  : 			p->SetFullOtionTable[1]=WzMemScript.GetNumber();

  002d1	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002d7	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 372  : 			Token=WzMemScript.GetToken();

  002dc	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002e2	89 87 7c 01 00
	00		 mov	 DWORD PTR [edi+380], eax
  002e8	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 373  : 			p->SetFullOtionTableValue[1]=WzMemScript.GetNumber();

  002ed	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002f3	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 374  : 
; 375  : 			Token=WzMemScript.GetToken();

  002f8	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  002fe	89 87 90 01 00
	00		 mov	 DWORD PTR [edi+400], eax
  00304	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 376  : 			p->SetFullOtionTable[2]=WzMemScript.GetNumber();

  00309	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0030f	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 377  : 			Token=WzMemScript.GetToken();

  00314	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0031a	89 87 80 01 00
	00		 mov	 DWORD PTR [edi+384], eax
  00320	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 378  : 			p->SetFullOtionTableValue[2]=WzMemScript.GetNumber();

  00325	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0032b	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 379  : 
; 380  : 			Token=WzMemScript.GetToken();

  00330	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00336	89 87 94 01 00
	00		 mov	 DWORD PTR [edi+404], eax
  0033c	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 381  : 			p->SetFullOtionTable[3]=WzMemScript.GetNumber();

  00341	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00347	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 382  : 			Token=WzMemScript.GetToken();

  0034c	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00352	89 87 84 01 00
	00		 mov	 DWORD PTR [edi+388], eax
  00358	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 383  : 			p->SetFullOtionTableValue[3]=WzMemScript.GetNumber();

  0035d	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00363	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 384  : 
; 385  : 			Token=WzMemScript.GetToken();

  00368	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0036e	89 87 98 01 00
	00		 mov	 DWORD PTR [edi+408], eax
  00374	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 386  : 			p->SetFullOtionTable[4]=WzMemScript.GetNumber();

  00379	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0037f	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 387  : 			Token=WzMemScript.GetToken();

  00384	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0038a	89 87 88 01 00
	00		 mov	 DWORD PTR [edi+392], eax
  00390	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 388  : 			p->SetFullOtionTableValue[4]=WzMemScript.GetNumber();

  00395	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0039b	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 389  : 
; 390  : 			// Save Character Class Disponibility
; 391  : 			Token=WzMemScript.GetToken();

  003a0	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  003a6	89 87 9c 01 00
	00		 mov	 DWORD PTR [edi+412], eax
  003ac	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 392  : 			p->RequireClass[CLASS_WIZARD]=WzMemScript.GetNumber();

  003b1	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  003b7	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 393  : 
; 394  : 			Token=WzMemScript.GetToken();

  003bc	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  003c2	88 87 a0 01 00
	00		 mov	 BYTE PTR [edi+416], al
  003c8	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 395  : 			p->RequireClass[CLASS_KNIGHT]=WzMemScript.GetNumber();

  003cd	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  003d3	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 396  : 
; 397  : 			Token=WzMemScript.GetToken();

  003d8	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  003de	88 87 a1 01 00
	00		 mov	 BYTE PTR [edi+417], al
  003e4	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 398  : 			p->RequireClass[CLASS_ELF]=WzMemScript.GetNumber();

  003e9	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  003ef	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 399  : 
; 400  : 			Token=WzMemScript.GetToken();

  003f4	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  003fa	88 87 a2 01 00
	00		 mov	 BYTE PTR [edi+418], al
  00400	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 401  : 			p->RequireClass[CLASS_MAGUMSA]=WzMemScript.GetNumber();

  00405	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0040b	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 402  : 
; 403  : 			Token=WzMemScript.GetToken();

  00410	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00416	88 87 a3 01 00
	00		 mov	 BYTE PTR [edi+419], al
  0041c	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 404  : 			p->RequireClass[CLASS_DARKLORD]=WzMemScript.GetNumber();

  00421	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00427	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  0042c	88 87 a4 01 00
	00		 mov	 BYTE PTR [edi+420], al

; 405  : 			
; 406  : 			// Active SetItem
; 407  : 			p->IsLoad=TRUE;			

  00432	c7 07 01 00 00
	00		 mov	 DWORD PTR [edi], 1

; 408  : 		}
; 409  : 	}

  00438	e9 93 fc ff ff	 jmp	 $LL5@LoadOption
$LN24@LoadOption:

; 410  : 
; 411  : 	return 1;

  0043d	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00443	e8 00 00 00 00	 call	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
  00448	b8 01 00 00 00	 mov	 eax, 1

; 412  : }

  0044d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00450	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00457	59		 pop	 ecx
  00458	5f		 pop	 edi
  00459	5e		 pop	 esi
  0045a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0045d	33 cd		 xor	 ecx, ebp
  0045f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00464	8b e5		 mov	 esp, ebp
  00466	5d		 pop	 ebp
  00467	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z$0:
  00000	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
__ehhandler$?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 64 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-156]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadOptionInfo@CSetItemOption@@QAEHPADH@Z ENDP		; CSetItemOption::LoadOptionInfo
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ?LoadTypeInfo@CSetItemOption@@QAEHPAD@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
?LoadTypeInfo@CSetItemOption@@QAEHPAD@Z PROC		; CSetItemOption::LoadTypeInfo, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 31   : 	int i;
; 32   : 	int Token;
; 33   : 
; 34   : 	SMDFile=fopen(filename,"r");

  00004	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00009	ff 75 08	 push	 DWORD PTR _filename$[ebp]
  0000c	8b f9		 mov	 edi, ecx
  0000e	e8 00 00 00 00	 call	 _fopen
  00013	83 c4 08	 add	 esp, 8
  00016	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 35   : 	if (SMDFile == NULL )

  0001b	85 c0		 test	 eax, eax
  0001d	75 05		 jne	 SHORT $LN9@LoadTypeIn
  0001f	5f		 pop	 edi

; 92   : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN9@LoadTypeIn:
  00024	56		 push	 esi

; 36   : 	{
; 37   : 		return 0;
; 38   : 	}
; 39   : 	memset(this->m_SetItemTypeInfo , -1, sizeof(this->m_SetItemTypeInfo) );

  00025	68 00 80 02 00	 push	 163840			; 00028000H
  0002a	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  0002d	6a ff		 push	 -1
  0002f	56		 push	 esi
  00030	e8 00 00 00 00	 call	 _memset
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
  00038	b8 00 20 00 00	 mov	 eax, 8192		; 00002000H
  0003d	0f 1f 00	 npad	 3
$LL4@LoadTypeIn:

; 40   : 	
; 41   : 	for ( i=0; i<MAX_ITEMS; i++)
; 42   : 	{
; 43   : 		this->m_SetItemTypeInfo[i].IsLoad = FALSE;

  00040	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00046	8d 76 14	 lea	 esi, DWORD PTR [esi+20]
  00049	83 e8 01	 sub	 eax, 1
  0004c	75 f2		 jne	 SHORT $LL4@LoadTypeIn

; 44   : 	}
; 45   : 	
; 46   : 	while ( true )
; 47   : 	{
; 48   : 		int number;
; 49   : 		
; 50   : 		Token=GetToken();

  0004e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 51   : 		if (Token == END)

  00053	83 f8 02	 cmp	 eax, 2
  00056	0f 84 c7 00 00
	00		 je	 $LN20@LoadTypeIn
  0005c	53		 push	 ebx
  0005d	0f 1f 00	 npad	 3
$LL5@LoadTypeIn:

; 52   : 		{
; 53   : 			break;
; 54   : 		}
; 55   : 
; 56   : 		if (Token == NUMBER)

  00060	83 f8 01	 cmp	 eax, 1
  00063	0f 85 ab 00 00
	00		 jne	 $LN32@LoadTypeIn

; 57   : 		{
; 58   : 			number = TokenNumber;

  00069	f3 0f 2c 1d 00
	00 00 00	 cvttss2si ebx, DWORD PTR ?TokenNumber@@3MA
$LL7@LoadTypeIn:

; 59   : 			
; 60   : 			while ( true )
; 61   : 			{
; 62   : 				int number2;
; 63   : 				LPSETITEM_TYPEINFO pointer;
; 64   : 
; 65   : 				Token = GetToken();

  00071	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 66   : 				number2=TokenNumber;

  00076	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA

; 67   : 				if ( ( Token== 0) && (strcmp("end", &TokenString[0]) == 0))

  0007e	85 c0		 test	 eax, eax
  00080	75 37		 jne	 SHORT $LN12@LoadTypeIn
  00082	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00087	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0008c	0f 1f 40 00	 npad	 4
$LL28@LoadTypeIn:
  00090	8a 10		 mov	 dl, BYTE PTR [eax]
  00092	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00094	75 1a		 jne	 SHORT $LN29@LoadTypeIn
  00096	84 d2		 test	 dl, dl
  00098	74 12		 je	 SHORT $LN30@LoadTypeIn
  0009a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0009d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000a0	75 0e		 jne	 SHORT $LN29@LoadTypeIn
  000a2	83 c0 02	 add	 eax, 2
  000a5	83 c1 02	 add	 ecx, 2
  000a8	84 d2		 test	 dl, dl
  000aa	75 e4		 jne	 SHORT $LL28@LoadTypeIn
$LN30@LoadTypeIn:
  000ac	33 c0		 xor	 eax, eax
  000ae	eb 05		 jmp	 SHORT $LN31@LoadTypeIn
$LN29@LoadTypeIn:
  000b0	1b c0		 sbb	 eax, eax
  000b2	83 c8 01	 or	 eax, 1
$LN31@LoadTypeIn:
  000b5	85 c0		 test	 eax, eax
  000b7	74 5b		 je	 SHORT $LN32@LoadTypeIn
$LN12@LoadTypeIn:

; 68   : 				{
; 69   : 					break;
; 70   : 				}
; 71   : 				else
; 72   : 				{
; 73   : 					pointer = &this->m_SetItemTypeInfo[number*MAX_SUBTYPE_ITEMS+number2];

  000b9	8b c3		 mov	 eax, ebx
  000bb	c1 e0 09	 shl	 eax, 9
  000be	03 c6		 add	 eax, esi
  000c0	8d 34 80	 lea	 esi, DWORD PTR [eax+eax*4]

; 74   : 
; 75   : 					Token=GetToken();

  000c3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 76   : 					pointer->OptionIndex[0]=TokenNumber;

  000c8	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000d0	89 44 b7 08	 mov	 DWORD PTR [edi+esi*4+8], eax

; 77   : 					Token=GetToken();

  000d4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 78   : 					pointer->OptionIndex[1]=TokenNumber;

  000d9	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000e1	89 44 b7 0c	 mov	 DWORD PTR [edi+esi*4+12], eax

; 79   : 					Token=GetToken();

  000e5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 80   : 					pointer->ChaosMixLevel[0]=TokenNumber;

  000ea	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000f2	89 44 b7 10	 mov	 DWORD PTR [edi+esi*4+16], eax

; 81   : 					Token=GetToken();

  000f6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 82   : 					pointer->ChaosMixLevel[1]=TokenNumber;

  000fb	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 83   : 
; 84   : 					pointer->IsLoad=TRUE;

  00103	c7 44 b7 04 01
	00 00 00	 mov	 DWORD PTR [edi+esi*4+4], 1
  0010b	89 44 b7 14	 mov	 DWORD PTR [edi+esi*4+20], eax

; 85   : 				}
; 86   : 			}

  0010f	e9 5d ff ff ff	 jmp	 $LL7@LoadTypeIn
$LN32@LoadTypeIn:

; 44   : 	}
; 45   : 	
; 46   : 	while ( true )
; 47   : 	{
; 48   : 		int number;
; 49   : 		
; 50   : 		Token=GetToken();

  00114	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 51   : 		if (Token == END)

  00119	83 f8 02	 cmp	 eax, 2
  0011c	0f 85 3e ff ff
	ff		 jne	 $LL5@LoadTypeIn
  00122	5b		 pop	 ebx
$LN20@LoadTypeIn:
  00123	5e		 pop	 esi

; 87   : 		}
; 88   : 
; 89   : 	}
; 90   : 
; 91   : 	return TRUE;

  00124	b8 01 00 00 00	 mov	 eax, 1
  00129	5f		 pop	 edi

; 92   : }

  0012a	5d		 pop	 ebp
  0012b	c2 04 00	 ret	 4
?LoadTypeInfo@CSetItemOption@@QAEHPAD@Z ENDP		; CSetItemOption::LoadTypeInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -152					; size = 4
_WzMemScript$ = -148					; size = 132
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_Buffer$ = 8						; size = 4
_iSize$ = 12						; size = 4
?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z PROC		; CSetItemOption::LoadTypeInfo, COMDAT
; _this$ = ecx

; 228  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b d9		 mov	 ebx, ecx
  00030	89 9d 68 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  00036	8b 75 08	 mov	 esi, DWORD PTR _Buffer$[ebp]

; 229  : 	CWzMemScript WzMemScript;

  00039	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0003f	e8 00 00 00 00	 call	 ??0CWzMemScript@@QAE@XZ	; CWzMemScript::CWzMemScript

; 230  : 	int i;
; 231  : 	int Token;
; 232  : 
; 233  : 	WzMemScript.SetBuffer(Buffer, iSize);

  00044	ff 75 0c	 push	 DWORD PTR _iSize$[ebp]
  00047	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00054	56		 push	 esi
  00055	e8 00 00 00 00	 call	 ?SetBuffer@CWzMemScript@@QAEHPADH@Z ; CWzMemScript::SetBuffer

; 234  : 
; 235  : 	memset(this->m_SetItemTypeInfo , -1, sizeof(this->m_SetItemTypeInfo) );

  0005a	68 00 80 02 00	 push	 163840			; 00028000H
  0005f	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  00062	6a ff		 push	 -1
  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 _memset
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006d	b8 00 20 00 00	 mov	 eax, 8192		; 00002000H
$LL4@LoadTypeIn:

; 236  : 
; 237  : 	for ( i=0; i<MAX_ITEMS; i++)
; 238  : 	{
; 239  : 		this->m_SetItemTypeInfo[i].IsLoad =FALSE;

  00072	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00078	8d 76 14	 lea	 esi, DWORD PTR [esi+20]
  0007b	83 e8 01	 sub	 eax, 1
  0007e	75 f2		 jne	 SHORT $LL4@LoadTypeIn

; 240  : 	}
; 241  : 	
; 242  : 	while ( true )
; 243  : 	{
; 244  : 		int number;
; 245  : 		
; 246  : 		Token=WzMemScript.GetToken();

  00080	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00086	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 247  : 		if (Token == 2)

  0008b	83 f8 02	 cmp	 eax, 2
  0008e	0f 84 10 01 00
	00		 je	 $LN20@LoadTypeIn
$LL5@LoadTypeIn:

; 248  : 		{
; 249  : 			break;
; 250  : 		}
; 251  : 
; 252  : 		if (Token == 1)

  00094	83 f8 01	 cmp	 eax, 1
  00097	0f 85 f3 00 00
	00		 jne	 $LN19@LoadTypeIn

; 253  : 		{
; 254  : 			number = WzMemScript.GetNumber();

  0009d	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000a3	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  000a8	8b d8		 mov	 ebx, eax
  000aa	66 0f 1f 44 00
	00		 npad	 6
$LL7@LoadTypeIn:

; 255  : 			
; 256  : 			while ( true )
; 257  : 			{
; 258  : 				int number2;
; 259  : 				LPSETITEM_TYPEINFO pointer;
; 260  : 
; 261  : 				Token = WzMemScript.GetToken();

  000b0	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000b6	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 262  : 				number2=WzMemScript.GetNumber();

  000bb	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000c1	8b f0		 mov	 esi, eax
  000c3	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  000c8	8b f8		 mov	 edi, eax

; 263  : 				if ( ( Token== 0) && (strcmp("end", WzMemScript.GetString() )== 0))

  000ca	85 f6		 test	 esi, esi
  000cc	75 3f		 jne	 SHORT $LN11@LoadTypeIn
  000ce	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000d4	e8 00 00 00 00	 call	 ?GetString@CWzMemScript@@QAEPADXZ ; CWzMemScript::GetString
  000d9	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  000de	66 90		 npad	 2
$LL28@LoadTypeIn:
  000e0	8a 11		 mov	 dl, BYTE PTR [ecx]
  000e2	3a 10		 cmp	 dl, BYTE PTR [eax]
  000e4	75 1a		 jne	 SHORT $LN29@LoadTypeIn
  000e6	84 d2		 test	 dl, dl
  000e8	74 12		 je	 SHORT $LN30@LoadTypeIn
  000ea	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  000ed	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  000f0	75 0e		 jne	 SHORT $LN29@LoadTypeIn
  000f2	83 c1 02	 add	 ecx, 2
  000f5	83 c0 02	 add	 eax, 2
  000f8	84 d2		 test	 dl, dl
  000fa	75 e4		 jne	 SHORT $LL28@LoadTypeIn
$LN30@LoadTypeIn:
  000fc	33 c0		 xor	 eax, eax
  000fe	eb 05		 jmp	 SHORT $LN31@LoadTypeIn
$LN29@LoadTypeIn:
  00100	1b c0		 sbb	 eax, eax
  00102	83 c8 01	 or	 eax, 1
$LN31@LoadTypeIn:
  00105	85 c0		 test	 eax, eax
  00107	0f 84 83 00 00
	00		 je	 $LN19@LoadTypeIn
$LN11@LoadTypeIn:

; 264  : 				{
; 265  : 					break;
; 266  : 				}
; 267  : 				else
; 268  : 				{
; 269  : 					pointer = &this->m_SetItemTypeInfo[number*MAX_SUBTYPE_ITEMS+number2];

  0010d	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00113	8b c3		 mov	 eax, ebx
  00115	c1 e0 09	 shl	 eax, 9
  00118	03 c7		 add	 eax, edi
  0011a	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0011d	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]

; 270  : 
; 271  : 					Token=WzMemScript.GetToken();

  00120	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00126	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 272  : 					pointer->OptionIndex[0]=WzMemScript.GetNumber();

  0012b	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00131	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 273  : 					Token=WzMemScript.GetToken();

  00136	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0013c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0013f	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 274  : 					pointer->OptionIndex[1]=WzMemScript.GetNumber();

  00144	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0014a	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 275  : 					Token=WzMemScript.GetToken();

  0014f	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00155	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00158	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 276  : 					pointer->ChaosMixLevel[0]=WzMemScript.GetNumber();

  0015d	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00163	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber

; 277  : 					Token=WzMemScript.GetToken();

  00168	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0016e	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00171	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 278  : 					pointer->ChaosMixLevel[1]=WzMemScript.GetNumber();

  00176	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  0017c	e8 00 00 00 00	 call	 ?GetNumber@CWzMemScript@@QAEHXZ ; CWzMemScript::GetNumber
  00181	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 279  : 
; 280  : 					pointer->IsLoad=TRUE;

  00184	c7 46 04 01 00
	00 00		 mov	 DWORD PTR [esi+4], 1

; 281  : 				}
; 282  : 			}

  0018b	e9 20 ff ff ff	 jmp	 $LL7@LoadTypeIn
$LN19@LoadTypeIn:

; 240  : 	}
; 241  : 	
; 242  : 	while ( true )
; 243  : 	{
; 244  : 		int number;
; 245  : 		
; 246  : 		Token=WzMemScript.GetToken();

  00190	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00196	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 247  : 		if (Token == 2)

  0019b	83 f8 02	 cmp	 eax, 2
  0019e	0f 85 f0 fe ff
	ff		 jne	 $LL5@LoadTypeIn
$LN20@LoadTypeIn:

; 283  : 		}
; 284  : 		
; 285  : 	}
; 286  : 
; 287  : 	return 1;

  001a4	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  001aa	e8 00 00 00 00	 call	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
  001af	b8 01 00 00 00	 mov	 eax, 1

; 288  : }

  001b4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001b7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001be	59		 pop	 ecx
  001bf	5f		 pop	 edi
  001c0	5e		 pop	 esi
  001c1	5b		 pop	 ebx
  001c2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c5	33 cd		 xor	 ecx, ebp
  001c7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001cc	8b e5		 mov	 esp, ebp
  001ce	5d		 pop	 ebp
  001cf	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z$0:
  00000	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
__ehhandler$?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 64 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-156]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadTypeInfo@CSetItemOption@@QAEHPADH@Z ENDP		; CSetItemOption::LoadTypeInfo
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ??1CSetItemOption@@UAE@XZ
_TEXT	SEGMENT
??1CSetItemOption@@UAE@XZ PROC				; CSetItemOption::~CSetItemOption, COMDAT
; _this$ = ecx

; 25   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CSetItemOption@@6B@

; 26   : 	return;
; 27   : }

  00006	c3		 ret	 0
??1CSetItemOption@@UAE@XZ ENDP				; CSetItemOption::~CSetItemOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ??0CSetItemOption@@QAE@XZ
_TEXT	SEGMENT
??0CSetItemOption@@QAE@XZ PROC				; CSetItemOption::CSetItemOption, COMDAT
; _this$ = ecx

; 20   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CSetItemOption@@6B@

; 21   : 	return;
; 22   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0CSetItemOption@@QAE@XZ ENDP				; CSetItemOption::CSetItemOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\setitemoption.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
